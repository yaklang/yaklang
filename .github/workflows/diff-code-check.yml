name: Diff-Code-Check
on:
  workflow_run:
    workflows: [ "Essential Tests" ]
    types:
      - completed
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
    paths:
      - "go.mod"
      - ".github/workflows/diff-code-check.yml"
      - "common/ssa_bootstrapping/ci_rule/**"
      - "common/syntaxflow/sfbuildin/buildin/golang/**"
jobs:
  setup:
    runs-on: ubuntu-22.04
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || (github.event_name == 'pull_request') }}
    permissions:
      contents: read
      pull-requests: write
      issues: write
      checks: write
      actions: read
      # metadata: read
    steps:
      - name: Debug trigger conditions
        run: |
          echo "=== Debug Information ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
            echo "Workflow run head sha: ${{ github.event.workflow_run.head_sha }}"
            echo "Workflow run pull requests: ${{ github.event.workflow_run.pull_requests }}"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Pull request number: ${{ github.event.pull_request.number }}"
            echo "Pull request head sha: ${{ github.event.pull_request.head.sha }}"
            echo "Pull request base sha: ${{ github.event.pull_request.base.sha }}"
          fi
          echo "========================="

      - name: Init HEAD_SHA
        run: | 
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "HEAD_SHA=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          else
            echo "Unsupported event: ${{ github.event_name }}"
            exit 1
          fi
          echo "Current head sha is: ${{ env.HEAD_SHA }}"

      - name: Init PR_NUMBER
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "PR_NUMBER=${{ github.event.workflow_run.pull_requests[0].number }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "PR_NUMBER=0" >> $GITHUB_ENV
          fi
          echo "Current PR number is: ${{ env.PR_NUMBER }}"

      - name: Cache YakLang Project
        uses: actions/cache@v3
        id: cache-project
        with:
          path: |
            ~/yakit-projects
            ${{ github.workspace }}
          key: go-${{ env.HEAD_SHA }}

      - name: Check out code into the Go module directory
        if: steps.cache-project.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ env.HEAD_SHA }}
          fetch-depth: 0

      - name: Fetch Main And Reset Main
        if: steps.cache-project.outputs.cache-hit != 'true'
        run: |
          git fetch --all
          git checkout main
          git reset --hard origin/main
          git checkout ${{ env.HEAD_SHA }}

      - name: Set up Go 1.x
        if: steps.cache-project.outputs.cache-hit != 'true'
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"
        id: go

      #      - name: Download From oos
      #        run: |
      #          wget https://aliyun-oss.yaklang.com/yak/latest/yak_linux_amd64
      #          chmod +x ./yak_linux_amd64

      - name: Init Module
        if: steps.cache-project.outputs.cache-hit != 'true'
        run: |
          go mod tidy && go work vendor
          ls -la $(go env GOPATH)/pkg/mod/$(go list -m github.com/yaklang/pcap | sed 's/ /@/')/libpcap
          chmod +r $(go env GOPATH)/pkg/mod/$(go list -m github.com/yaklang/pcap | sed 's/ /@/')/libpcap
          cp -r $(go env GOPATH)/pkg/mod/$(go list -m github.com/yaklang/pcap | sed 's/ /@/')/libpcap ./vendor/github.com/yaklang/pcap/
          tree ./vendor

      - name: Init Project
        if: steps.cache-project.outputs.cache-hit != 'true'
        env: 
          SKIP_SYNC_EMBED_RULE_IN_GITHUB: "true"
        run: |
          go build common/yak/cmd/yak.go 
          ./yak --help

      - name: Generate Prog
        run: |
          pwd && ls -al
          ./yak sf-import --file common/ssa_bootstrapping/ci_rule/ --format raw
          MERGE_BASE=$(git merge-base main ${{ env.HEAD_SHA }})
          echo "Merge base is: $MERGE_BASE"
          echo "Head base is: ${{ env.HEAD_SHA }}"
          ./yak gitefs --start $MERGE_BASE --end ${{ env.HEAD_SHA }} --output ./fs.zip 

      - name: Upload fs.zip
        uses: actions/upload-artifact@v4
        with:
          name: fs.zip
          path: fs.zip

      - name: Check With SyntaxFlow
        id: scan
        run: |
          ./yak code-scan -t ./fs.zip -l golang --rule-keyword golang --format irify -o risk --memory --log-level debug --exclude-file **/vendor/**,vendor/**,**/classes/**,**/target/**,**include/**,**caches/**,**cache/**,**tmp/**,**alipay/**,**includes/**,**temp/**,**zh_cn/**,**zh_en/**,**plugins/**,**PHPExcel/**,*.pb.go
          NUM=$(cat risk.json | jq .RiskNums)
          echo "Find risk num is: $NUM"
          echo "risk_count=$NUM" >> $GITHUB_OUTPUT
          if [ $NUM == 0 ]; then
            echo "success" 
            echo "scan_result=success" >> $GITHUB_OUTPUT
          else
            echo "fail"
            echo "scan_result=failure" >> $GITHUB_OUTPUT
          fi
        # Get-Content risk.json -Encoding UTF8 | jq .RiskNums

      - name: Set up Python for commenting
        if: steps.scan.outputs.scan_result == 'failure'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        if: steps.scan.outputs.scan_result == 'failure'
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Generate GitHub App Token
        id: generate_token
        if: secrets.GITHUB_APP_ID != '' && secrets.GITHUB_APP_PRIVATE_KEY != ''
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GITHUB_APP_ID }}
          private-key: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      
      - name: Set fallback token
        id: set_token
        run: |
          if [ "${{ steps.generate_token.outputs.token }}" != "" ]; then
            echo "token=${{ steps.generate_token.outputs.token }}" >> $GITHUB_OUTPUT
          else
            echo "token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          fi

      # - name: Call Security Scan and Comment (GitHub App)
      #   if: steps.scan.outputs.scan_result == 'failure'
      #   uses: ./.github/workflows/security-scan-comment.yml
      #   with:
      #     head_sha: ${{ env.HEAD_SHA }}
      #     pr_number: ${{ github.event.pull_request.number }}
      #   secrets:
      #     GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
      #     GITHUB_APP_PRIVATE_KEY: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}

      # - name: Call Security Comment (Community Action)
      #   if: steps.scan.outputs.scan_result == 'failure'
      #   uses: ./.github/workflows/security-comment-community.yml
      #   with:
      #     head_sha: ${{ env.HEAD_SHA }}
      #     pr_number: ${{ github.event.pull_request.number }}
      #   secrets:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Call Security Comment (Simple)
      #   if: steps.scan.outputs.scan_result == 'failure'
      #   uses: ./.github/workflows/security-comment-simple.yml
      #   with:
      #     head_sha: ${{ env.HEAD_SHA }}
      #     pr_number: ${{ github.event.pull_request.number }}
      #   secrets:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add success comment
        if: steps.scan.outputs.scan_result == 'success' && env.PR_NUMBER != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.set_token.outputs.token }}
          script: |
            github.rest.issues.createComment({
              issue_number: Number(process.env.PR_NUMBER),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ✅ 代码安全检查通过\n\n代码安全扫描未发现任何问题。\n\n---\n*此评论由代码安全检查工具自动生成*'
            })

      - name: Upload risk log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: risk.json
          path: risk.json

      - name: Workflows fail info
        if: failure()
        run: |
          ./yak ssa-risk --input ./risk.json --with-code --severity high

      - name: Workflows fail info - full
        if: failure()
        run: |
          ./yak ssa-risk --input ./risk.json --with-code 
        # cat risk.json | jq -r '
        #   "=== Scan Report Summary ===",
        #   "Scan Time: \(.report_time)",
        #   "Program: \(.program_name)",
        #   "Language: \(.program_lang)",
        #   "Files Scanned: \(.file_count)",
        #   "Lines of Code: \(.code_line_count)",
        #   "Risks Found: \(.RiskNums)",
        #   "",
        #   "=== Risk Details ===",
        #   (.Risks[] | 
        #     "Risk ID: \(.hash)",
        #     "Title: \(.title_verbose)",
        #     "Severity: \(.severity)",
        #     "Location: \(.code_source_url):\(.line)",
        #     "Description: \(.description | split("\n")[0])",
        #     "Solution: \(.solution | split("\n")[0])",
        #     "Affected Code:",
        #     (.code_fragment | split("\n")[] | "  \(.)"),
        #     ""
        #   ),
        #   "=== Affected Files ===",
        #   (.File[] | 
        #     "File: \(.path)",
        #     "Lines: \(.line_count)",
        #     "Risk IDs: \(.risks | join(", "))",
        #     ""
        #   )'
        # exit 1