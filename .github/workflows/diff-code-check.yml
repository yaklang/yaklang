name: Diff-Code-Check
on:
  workflow_run:
    workflows: [ "Essential Tests" ]
    types:
      - completed
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
    paths:
      - ".github/workflows/diff-code-check.yml"
      - "common/ssa_bootstrapping/ci_rule/**"
      - "common/syntaxflow/sfbuildin/buildin/golang/**"
jobs:
  setup:
    runs-on: ubuntu-22.04
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || (github.event_name == 'pull_request') }}
    steps:
      - name: Init HEAD_SHA
        run: | 
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "HEAD_SHA=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          else
            echo "Unsupported event: ${{ github.event_name }}"
            exit 1
          fi
          echo "Current head sha is: ${{ env.HEAD_SHA }}"

      - name: Cache YakLang Project
        uses: actions/cache@v3
        id: cache-project
        with:
          path: |
            ~/yakit-projects
            ${{ github.workspace }}
          key: go-${{ env.HEAD_SHA }}

      - name: Check out code into the Go module directory
        if: steps.cache-project.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ env.HEAD_SHA }}
          fetch-depth: 0

      - name: Fetch Main And Reset Main
        if: steps.cache-project.outputs.cache-hit != 'true'
        run: |
          git fetch --all
          git checkout main
          git reset --hard origin/main
          git checkout ${{ env.HEAD_SHA }}

      - name: Set up Go 1.x
        if: steps.cache-project.outputs.cache-hit != 'true'
        uses: actions/setup-go@v4
        with:
          go-version-file: "./go.mod"
        id: go

      #      - name: Download From oos
      #        run: |
      #          wget https://aliyun-oss.yaklang.com/yak/latest/yak_linux_amd64
      #          chmod +x ./yak_linux_amd64

      - name: Init Module
        if: steps.cache-project.outputs.cache-hit != 'true'
        run: |
          go mod tidy
          go build ./common/yak/cmd/yak.go

      - name: Generate Prog And Check With SyntaxFlow
        if: steps.cache-project.outputs.cache-hit != 'true'
        run: |
          pwd && ls -al
          ./yak -h
          MERGE_BASE=$(git merge-base main ${{ env.HEAD_SHA }})
          echo "Merge base is: $MERGE_BASE"
          ./yak sync-rule
          ./yak gitefs --start $MERGE_BASE --end ${{ env.HEAD_SHA }} --output ./fs.zip
          ./yak ssa -t ./fs.zip --program diffcode -l golang > log.txt 2>&1 || exit 1; 
          grep -F "Current goroutine call stack:" log.txt && exit 1;
          ./yak sf --program diffcode ./common/ssa_bootstrapping/ci_rule --save;
          ./yak sf --program diffcode ./common/syntaxflow/sfbuildin/buildin/golang --save;
          ./yak ssa-risk --program diffcode --json --output risk.json 
          ./scripts/ssa-risk-format.sh 
        # ./yak check --language go --file ./fs.zip --rules ./common/ssa_bootstrapping/ci_rule --exclude-file *.pb.go > log.txt 2>&1 || exit 1
          
      - name: Upload fail log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: log.txt
          path: log.txt

      - name: Upload risk log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: risk.json
          path: risk.json

      - name: Upload database
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: default-yakssa.db
          path: /home/runner/yakit-projects/default-yakssa.db

      - name: Workflows Fail
        if: failure()
        run: |
          cat risk.json
          exit 1