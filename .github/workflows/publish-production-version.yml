name: Publish-Production-Version

on:
  workflow_dispatch:
    inputs:
      publish_version:
        description: "Version to publish (e.g. v1.3.0)"
        type: string
        required: true

jobs:
  check_version_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check if version starts with 'v'
        run: |
          VERSION_INPUT="${{ github.event.inputs.publish_version }}"
          if [[ $VERSION_INPUT != v* ]]; then
            echo "Error: Version must start with 'v'."
            exit 1
          else
            echo "Version starts with 'v': $VERSION_INPUT"
            # Remove the 'v' prefix and store in YAK_VERSION
            YAK_VERSION="${VERSION_INPUT:1}"
            echo "YAK_VERSION=$YAK_VERSION" >> $GITHUB_ENV
          fi
      - name: Check Version
        run: echo ${{ env.YAK_VERSION }}

      - name: Download Last Published Version
        run: wget -q -O previous_version.txt https://aliyun-oss.yaklang.com/yak/latest/version.txt

      - name: Download CI Needed Yak Linux(amd64) Version to operator
        run: wget -q -O './yak' https://aliyun-oss.yaklang.com/yak/ci/yak_linux_amd64 && chmod +x ./yak

      - name: Download Binaries
        run: |
          # Define platforms and architectures
          declare -A os_archs=(
            ["darwin_amd64"]="yak_darwin_amd64"
            ["darwin_arm64"]="yak_darwin_arm64"
            ["linux_amd64"]="yak_linux_amd64"
            ["linux_arm64"]="yak_linux_arm64"
            ["windows_amd64"]="yak_windows_amd64.exe"
            ["windows_legacy_amd64"]="yak_windows_legacy_amd64.exe"
          )
          
          # Base URL for downloads
          base_url="https://aliyun-oss.yaklang.com/yak/${{ env.YAK_VERSION }}"
          
          # Loop over the os_archs dictionary to download each file
          for arch in "${!os_archs[@]}"; do
            file_name="${os_archs[$arch]}"

            echo "Start to download $base_url/$file_name" to "./$file_name"
            wget -q -O "./$file_name" "$base_url/$file_name"
          
            # Use wget to check if the SHA256 file is accessible and returns HTTP 200
            if wget --spider --server-response "$base_url/$file_name.sha256.txt" 2>&1 | grep 'HTTP/.* 200' >/dev/null; then
              # If HTTP response 200, download both the file and its SHA256
              echo "Downloading $file_name and its SHA256..."
              wget -q -O "./$file_name.sha256.txt" "$base_url/$file_name.sha256.txt"
            else
              echo "SHA256 file not found or server did not return HTTP 200 for $file_name.sha256.txt, skipping download."
            fi
          done

      - name: Check files
        run: ls -lh

      - name: Start to Upload Version.txt
        run: |
          echo '${{ env.YAK_VERSION }}' > version.txt
          echo "Uploading version.txt to oss"
          echo "Version $(cat version.txt)"
          echo "Previous Version $(cat previous_version.txt)"
          bucket="yaklang"
          ./yak upload-oss -b $bucket --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }} -t 5 -f 'version.txt:/yak/latest/version.txt'
          ./yak upload-oss -b $bucket --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }} -t 5 -f 'previous_version.txt:/yak/previous/previous_version.txt'

      - name: Upload Yak Binary Version
        run: |
          bucket="yaklang"
          for arch in darwin_amd64 darwin_arm64 linux_amd64 linux_arm64 windows_amd64.exe windows_legacy_amd64.exe; do
            file_path="yak_${arch}:/yak/latest/yak_${arch}"
            file_hash_path="yak_${arch}.sha256.txt:/yak/latest/yak_${arch}.sha256.txt"
            
            echo "Start to upload $file_path"
            ./yak upload-oss -b $bucket --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }} -t 5 -f $file_path
          
            # Check if SHA256 file exists before uploading
            if [[ -f "${file_hash_path%%:*}" ]]; then
              echo "Start to upload $file_hash_path"
              ./yak upload-oss -b $bucket --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }} -t 5 -f $file_hash_path
            else
              echo "SHA256 file ${file_hash_path%%:*} not found, skipping upload."
            fi
          done
