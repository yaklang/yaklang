name: Publish-Production-Version

on:
  workflow_dispatch:
    inputs:
      publish_version:
        description: "Version to publish (e.g. v1.3.0)"
        type: string
        required: true

jobs:
  check_version_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check if version starts with 'v'
        run: |
          VERSION_INPUT="${{ github.event.inputs.publish_version }}"
          if [[ $VERSION_INPUT != v* ]]; then
            echo "Error: Version must start with 'v'."
            exit 1
          else
            echo "Version starts with 'v': $VERSION_INPUT"
            # Remove the 'v' prefix and store in YAK_VERSION
            YAK_VERSION="${VERSION_INPUT:1}"
            echo "YAK_VERSION=$YAK_VERSION" >> $GITHUB_ENV
          fi
      - name: Check Version
        run: echo ${{ env.YAK_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Switch to version branch
        run: |
          git fetch --all
          git checkout ${{ github.event.inputs.publish_version }}
          if [ $? -ne 0 ]; then
            echo "Branch checkout failed."
            exit 1
          fi

      - name: Download Last Published Version
        run: wget -O previous_version.txt https://aliyun-oss.yaklang.com/yak/latest/version.txt

      - name: Download CI Needed Yak Linux(amd64) Version to operator
        run: wget -O './yak' https://aliyun-oss.yaklang.com/yak/ci/yak_linux_amd64 && chmod +x ./yak

      - name: Download Binaries
        run: |
          # Define platforms and architectures
          declare -A os_archs=(
            ["darwin_amd64"]="yak_darwin_amd64"
            ["darwin_arm64"]="yak_darwin_arm64"
            ["linux_amd64"]="yak_linux_amd64"
            ["linux_arm64"]="yak_linux_arm64"
            ["windows_amd64"]="yak_windows_amd64.exe"
          )
          
          # Base URL for downloads
          base_url="https://aliyun-oss.yaklang.com/yak/${YAK_VERSION}"

          # Loop over the os_archs dictionary to download each file
          for arch in "${!os_archs[@]}"; do
            file_name="${os_archs[$arch]}"
            wget -O "./$file_name" "$base_url/$file_name"
            wget -O "./$file_name.sha256.txt" "$base_url/$file_name.sha256.txt"
          done

      - name: Check files
        run: ls -lh

      - name: Start to Upload Version.txt
        run: |
          echo '${{ env.YAK_VERSION }}' > version.txt
          echo "Uploading version.txt to oss"
          echo "Version $(cat version.txt)"
          echo "Previous Version $(cat previous_version.txt)"
          bucket="cve-db"
          ./yak upload-oss -b $bucket --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }} -t 5 -f 'version.txt:/yak/latest/version.txt'
          ./yak upload-oss -b $bucket --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }} -t 5 -f 'previous_version.txt:/yak/previous/previous_version.txt'

      - name: Upload Yak Binary Version
        run: |
          bucket="cve-db"
          for arch in darwin_amd64 darwin_arm64 linux_amd64 linux_arm64 windows_amd64.exe; do
            if [[ $arch == "windows_amd64.exe" ]]; then
              file_path='yak_windows_amd64.exe:/yak/latest/yak_windows_amd64.exe'
            else
              file_path='yak_${arch}:/yak/latest/yak_${arch}'
            fi
            echo "Start to upload $file_path"
            ./yak upload-oss -b $bucket --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }} -t 5 -f $file_path
          
            if [[ $arch == "windows_amd64.exe" ]]; then
              file_hash_path='yak_windows_amd64.exe.sha256.txt:/yak/latest/yak_windows_amd64.exe.sha256.txt'
            else
              file_hash_path='yak_${arch}.sha256.txt:/yak/latest/yak_${arch}.sha256.txt'
            fi
            echo "Start to upload $file_hash_path"
            ./yak upload-oss -b $bucket --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }} -t 5 -f $file_hash_path
          done
