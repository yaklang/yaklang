name: Essential Tests

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, labeled, unlabeled]
    paths:
      - "common/**"
      - ".github/workflows/essential-tests.yml"
      - "go.mod"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  check-wip:
    # fork PR should not run this action
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-22.04
    outputs:
      wip_detected: ${{ steps.check-wip.outputs.wip_detected }}
      should_skip: ${{ steps.check-wip.outputs.should_skip }}
    steps:
      - name: Check if PR is WIP
        id: check-wip
        run: |
          # Get current event information
          event_action="${{ github.event.action }}"
          labels="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          title='${{ github.event.pull_request.title }}'
          
          echo "Event Action: $event_action"
          echo "PR Labels: $labels"
          echo "PR Title: $title"
          
          # Convert to lowercase for case-insensitive matching
          labels_lower=$(echo "$labels" | tr '[:upper:]' '[:lower:]')
          title_lower=$(echo "$title" | tr '[:upper:]' '[:lower:]')
          
          # Define WIP indicators
          wip_labels="do-not-merge,work in progress,wip,rfc"
          
          # Function to check if current state has WIP
          check_current_wip() {
            # Check for WIP indicators in labels
            IFS=',' read -ra LABEL_ARRAY <<< "$wip_labels"
            for wip_label in "${LABEL_ARRAY[@]}"; do
              if [[ "$labels_lower" == *"$wip_label"* ]]; then
                return 0  # WIP found
              fi
            done
            
            # Check for WIP indicators in title
            IFS=',' read -ra KEYWORD_ARRAY <<< "$wip_labels"
            for wip_keyword in "${KEYWORD_ARRAY[@]}"; do
              if [[ "$title_lower" == *"$wip_keyword"* ]]; then
                return 0  # WIP found
              fi
            done
            
            return 1  # No WIP found
          }
          
          # Handle label change events
          if [[ "$event_action" == "labeled" || "$event_action" == "unlabeled" ]]; then
            label_name='${{ github.event.label.name }}'
            label_name_lower=$(echo "$label_name" | tr '[:upper:]' '[:lower:]')
            
            echo "Label changed: $label_name"
            
            # Check if the changed label is WIP-related
            is_wip_label=false
            IFS=',' read -ra WIP_LABEL_ARRAY <<< "$wip_labels"
            for wip_label in "${WIP_LABEL_ARRAY[@]}"; do
              if [[ "$label_name_lower" == *"$wip_label"* ]]; then
                is_wip_label=true
                break
              fi
            done
            
            if [[ "$is_wip_label" == "false" ]]; then
              echo "Label change is not WIP-related, skipping CI"
              echo "should_skip=true" >> $GITHUB_OUTPUT
              echo "wip_detected=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # WIP-related label changed, check current state
            if check_current_wip; then
              if [[ "$event_action" == "labeled" ]]; then
                echo "WIP label added, stopping CI"
                echo "wip_detected=true" >> $GITHUB_OUTPUT
                echo "should_skip=false" >> $GITHUB_OUTPUT
              else
                echo "Still has WIP indicators after unlabeling"
                echo "wip_detected=true" >> $GITHUB_OUTPUT
                echo "should_skip=false" >> $GITHUB_OUTPUT
              fi
            else
              if [[ "$event_action" == "unlabeled" ]]; then
                echo "WIP label removed and no other WIP indicators, proceeding with CI"
                echo "wip_detected=false" >> $GITHUB_OUTPUT
                echo "should_skip=false" >> $GITHUB_OUTPUT
              else
                echo "No WIP indicators found"
                echo "wip_detected=false" >> $GITHUB_OUTPUT
                echo "should_skip=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            # For other events (opened, synchronize, reopened), check current WIP state
            if check_current_wip; then
              echo "WIP indicator found"
              echo "wip_detected=true" >> $GITHUB_OUTPUT
              echo "should_skip=false" >> $GITHUB_OUTPUT
            else
              echo "No WIP indicators found"
              echo "wip_detected=false" >> $GITHUB_OUTPUT
              echo "should_skip=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Skip CI if not WIP-related change
        if: steps.check-wip.outputs.should_skip == 'true'
        run: |
          echo "::notice::Label change is not WIP-related, skipping CI to save resources."
          exit 0

      - name: Fail if WIP detected
        if: steps.check-wip.outputs.wip_detected == 'true' && steps.check-wip.outputs.should_skip != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "::error::This PR is marked as WIP (Work In Progress). Skipping CI run to save resources."
          echo "::error::Please remove WIP indicators from labels and title when ready for review."
          
          # Use gh CLI to add a comment to the PR
          gh pr comment ${{ github.event.pull_request.number }} --body "🚧 **WIP Detected** 🚧
          
          This PR has been marked as Work In Progress. CI tests have been skipped to save resources.
          
          **To enable CI testing:**
          - Remove WIP-related labels: \`wip\`, \`work in progress\`, \`do-not-merge\`, \`rfc\`
          - Remove WIP-related keywords from the PR title
          
          The CI will automatically run once the WIP indicators are removed." || true
          
          exit 1

  setup:
    needs: check-wip
    if: needs.check-wip.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    steps:
      - name: Set Cache Key
        id: cache_key
        run: |
          CACHE_SHA="${{ github.event.pull_request.head.sha }}"
          echo "sha=$CACHE_SHA" >> $GITHUB_OUTPUT
          echo "Cache key will be: go-$CACHE_SHA"

      - name: Cache YakLang Project
        uses: actions/cache@v3
        id: cache-project
        with:
          path: |
            ~/yakit-projects
            ${{ github.workspace }}
          key: go-${{ steps.cache_key.outputs.sha }}

      - name: Check out code into the Go module directory
        if: steps.cache-project.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"
        id: go

      - name: Init Module
        run: |
          go mod tidy && go work vendor
          ls -la $(go env GOPATH)/pkg/mod/$(go list -m github.com/yaklang/pcap | sed 's/ /@/')/libpcap
          chmod +r $(go env GOPATH)/pkg/mod/$(go list -m github.com/yaklang/pcap | sed 's/ /@/')/libpcap
          cp -r $(go env GOPATH)/pkg/mod/$(go list -m github.com/yaklang/pcap | sed 's/ /@/')/libpcap ./vendor/github.com/yaklang/pcap/
          tree ./vendor

      - name: Generate Document Data
        if: steps.cache-project.outputs.cache-hit != 'true'
        run: |
          chmod +x ./scripts/gen-auto-completion.sh
          ./scripts/gen-auto-completion.sh

      - name: Init Project
        if: steps.cache-project.outputs.cache-hit != 'true'
        run: |
          go build -x common/yak/cmd/yak.go 
          ./yak --help

  test:
    name: ${{ matrix.name }}
    needs: [check-wip, setup]
    if: needs.check-wip.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - name: "Test Utils/Misc in 2min USE gRPC"
            test_configs: |
              [
                {"package": "./common/chunkmaker/...", "timeout": "20s"},
                {"package": "./common/jsonextractor", "timeout": "20s"},
                {"package": "./common/markdownextractor", "timeout": "20s"},
                {"package": "./common/yak/yaklib/codec", "timeout": "20s"},
                {"package": "./common/yak/cartesian", "timeout": "20s"},
                {"package": "./common/jsonpath", "timeout": "20s"},
                {"package": "./common/domainextractor", "timeout": "20s"},
                {"package": "./common/utils/omap/...", "timeout": "30s", "race": true},
                {"package": "./common/utils", "timeout": "1m"},
                {"package": "./common/utils/imageutils/...", "timeout": "20s"},
                {"package": "./common/utils/xml2", "timeout": "10s"},
                {"package": "./common/utils/tlsutils/...", "timeout": "20s"},
                {"package": "./common/utils/linktable/...", "timeout": "10s"},
                {"package": "./common/cve", "timeout": "20s", "run": "TestQueryCVEWithFixName"},
                {"package": "./common/sca/...", "timeout": "20s"},
                {"package": "./common/yak/yaklib", "timeout": "20s", "run": "TestMUSTPASS_YakitLog"},
                {"package": "./common/yak/yaklib", "timeout": "20s", "run": "TestMUSTPASS_Common"},
                {"package": "./common/yak/yaklib/tools", "timeout": "1m", "run": "TestMUSTPASS_Fp"},
                {"package": "./common/openapi/...", "timeout": "30s"},
                {"package": "./common/utils/dot/...", "timeout": "10s"},
                {"package": "./common/utils/filesys/...", "timeout": "10s"},
                {"package": "./common/utils/bruteutils/.", "timeout": "15s"},
                {"package": "./common/utils/memedit/.", "timeout": "15s"},
                {"package": "./common/pcapx/pcaputil/...", "timeout": "15s"},
                {"package": "./common/yak/yakurl/...", "timeout": "15s"},
                {"package": "./common/utils/ziputil/...", "timeout": "20s"},
                {"package": "./common/yso/...", "timeout": "20s"},
                {"package": "./common/yserx", "timeout": "20s"},
                {"package": "./common/twofa/...", "timeout": "20s"},
                {"package": "./common/cybertunnel/..."},
                {"package": "./common/utils/yakgit/..."},
                {"package": "./common/utils/suspect"},
                {"package": "./common/javaclassparser/jarwar/..."},
                {"package": "./common/bin-parser/...", "timeout": "1m"},
                {"package": "./common/yak/antlr4nasl/tests/...", "timeout": "1m"},
                {"package": "./common/fp/...", "timeout": "60s"},
                {"package": "./common/utils/gzip_embed/test/...", "timeout": "30s"},
                {"package": "./common/yak/cmd/...", "timeout": "30s"},
                {"package": "./common/javaclassparser/tests/...", "timeout": "30s"},
                {"package": "./common/suricata/...", "timeout": "20s", "run": "TestMUSTPASS*"},
                {"package": "./common/chaosmaker", "timeout": "20s", "run": "TestMUSTPASS*"},
                {"package": "./common/pcapx", "timeout": "20s", "run": "TestSmoking_*"},
                {"package": "./common/netx/mustpass", "timeout": "20s"},
                {"package": "./common/utils/pingutil", "timeout": "20s", "run": "TestPingAutoConfig"},
                {"package": "./common/mutate_tests", "timeout": "20s"},
                {"package": "./common/fuzztag", "timeout": "20s"},
                {"package": "./common/fuzztagx", "timeout": "20s"},
                {"package": "./common/mutate", "timeout": "30s"},
                {"package": "./common/fuzzx", "timeout": "30s"},
                {"package": "./common/utils/bizhelper/...", "timeout": "20s"},
                {"package": "./common/utils/cli", "timeout": "1m"},
                {"package": "./common/mcp/yakcliconvert", "timeout": "1m"},
                {"package": "./common/yak/yakdoc/...", "timeout": "3m"},
                {"package": "./common/authhack/...", "timeout": "1m"},
                {"package": "./common/vulinboxagentclient", "timeout": "1m", "run": "TestMUSTPASS"},
                {"package": "./common/utils/yakgit/yakdiff/...", "timeout": "20s"}
              ]
          # 2. AI相关 - 需要串行执行避免数据库锁定
          - name: "Test AI Infra / RAG / Knowledge"
            test_configs: |
              [
                {"package": "./common/ai/aid/...", "timeout": "12m", "parallel": 1},
                {"package": "./common/ai/tests/...", "timeout": "60s", "parallel": 1},
                {"package": "./common/ai/rag/pq/...", "timeout": "60s", "parallel": 1},
                {"package": "./common/ai/rag/hnsw/...", "timeout": "60s", "parallel": 1},
                {"package": "./common/ai/aispec/...", "timeout": "60s", "parallel": 1},
                {"package": "./common/aireducer/...", "timeout": "60s", "parallel": 1},
                {"package": "./common/aiforge/aibp", "timeout": "40s", "parallel": 1, "run": "^(TestBuildForgeFromYak|TestNewForgeExecutor)"},
                {"package": "./common/aiforge", "timeout": "3m", "parallel": 1},
                {"package": "./common/ai/rag/entityrepos/...", "timeout": "60s", "parallel": 1},
                {"package": "./common/ai/rag", "timeout": "1m", "run": "TestMUSTPASS", "parallel": 1},
                {"package": "./common/ai/rag/plugins_rag/...", "timeout": "1m", "run": "TestMUSTPASS", "parallel": 1}
              ]          

          - name: "Test gRPC StaticAnalyze / BuildIn SyntaxFlow Rule / SSA / SSA-API / SF Scan"
            test_configs: |
              [
                {"package": "./common/yak/static_analyzer/test/...", "timeout": "20s"},
                {"package": "./common/coreplugin", "timeout": "1m", "run": "TestAnalyzeMustPASS*"},
                {"package": "./common/syntaxflow/sfbuildin/...", "timeout": "5m"},
                {"package": "./common/yak/ssaapi/test/syntaxflow", "timeout": "1m"},
                {"package": "./common/syntaxflow/sfanalyzer/...", "timeout": "20s"},
                {"package": "./common/yak/ssa/...", "timeout": "20s"},
                {"package": "./common/yak/ssaapi", "timeout": "1m"},
                {"package": "./common/yak/ssaapi/ssareducer", "timeout": "1m"},
                {"package": "./common/yak/ssaapi/test/ssatest", "timeout": "1m"},
                {"package": "./common/yak/syntaxflow_scan/...", "timeout": "1m"}
              ]          

          - name: "Test gRPC SSA Frontend Yak  / JS(TS|ES) | PHP | Golang | C | Java"
            test_configs: |
              [
                {"package": "./common/yak/yak2ssa/test/...", "timeout": "20s"},
                {"package": "./common/yak/ssaapi/test/yak", "timeout": "1m"},
                {"package": "./common/yak/ssaapi/test/yak", "timeout": "1m"},
                {"package": "./common/yak/antlr4yak/lsp/...", "timeout": "20s"},
                {"package": "./common/yak/java/...", "timeout": "5m"},
                {"package": "./common/yak/ssaapi/test/java", "timeout": "3m"},
                {"package": "./common/yak/typescript/frontend/tests/...", "timeout": "1m"},
                {"package": "./common/yak/typescript/ts2ssa/tests/...", "timeout": "2m"},
                {"package": "./common/yak/php/...", "timeout": "2m"},
                {"package": "./common/yak/ssaapi/test/php", "timeout": "2m"},
                {"package": "./common/yak/go2ssa/...", "timeout": "30s"},
                {"package": "./common/yak/antlr4go/...", "timeout": "30s"},
                {"package": "./common/yak/ssaapi/test/golang", "timeout": "2m"},
                {"package": "./common/yak/c2ssa/...", "timeout": "30s"},
                {"package": "./common/yak/antlr4c/...", "timeout": "30s"},
                {"package": "./common/yak/ssaapi/test/c", "timeout": "2m"}
              ]          

          - name: "Test lowhttp / DNSX"
            test_configs: |
              [
                {"package": "./common/utils/lowhttp", "timeout": "3m", "skip": "TestComputeDigestResponseFromRequest|TestComputeDigestResponseFromRequestEx|TestLowhttpResponse2", "retry": 2, "retry_delay": 5},
                {"package": "./common/facades/...", "timeout": "30s"}
              ]          

          - name: "Test HttpTpl(YakTemplate)"
            test_configs: |
              [
                {"package": "./common/yak/httptpl", "timeout": "1m"}
              ]      

          - name: "Test MustPass - full yak scripts"
            test_configs: |
              [
                {"package": "./common/yak/yaktest/mustpass", "timeout": "3m"}
              ]     

          - name: "Test gRPC MUSTPASS MITM"
            test_configs: |
              [
              {"package": "./common/yakgrpc/yakit", "timeout": "1m", "run": "TestMUSTPASS"},
              {"package": "./common/yakgrpc/...", "timeout": "5m", "run": "TestGRPCMUSTPASS_MITM_*"},
              {"package": "./common/yakgrpc/...", "timeout": "5m", "run": "TestGRPCMUSTPASS_MITMV2_*"}
              ]

          - name: "Test gRPC MUSTPASS Fuzzer"
            test_configs: |
              [
                {"package": "./common/yakgrpc/...", "timeout": "5m", "run": "TestGRPCMUSTPASS_HTTPFuzzer"},
                {"package": "./common/yakgrpc/...", "timeout": "5m", "run": "TestGRPCMUSTPASS_HTTP_"},
                {"package": "./common/yakgrpc/...", "timeout": "5m", "run": "TestGRPCMUSTPASS_PluginTrace"}
              ]

          - name: "Test gRPC MUSTPASS Language"
            test_configs: |
              [
                {"package": "./common/yakgrpc/...", "timeout": "5m", "run": "TestGRPCMUSTPASS_LANGUAGE*"}
              ]

          - name: "Test gRPC MUSTPASS SyntaxFlow | SSA"
            sync_rule: "1"
            test_configs: |
              [
              {"package": "./common/yakgrpc/...", "timeout": "5m", "run": "TestGRPCMUSTPASS_SyntaxFlow*"},
              {"package": "./common/yakgrpc/...", "timeout": "5m", "run": "TestGRPCMUSTPASS_SSA*"},
              {"package": "./common/sfweb/...", "timeout": "4m"}
              ]

          - name: "Test gRPC In 2m"
            test_configs: |
              [
                {"package": "./common/yakgrpc/...", "timeout": "2m", "run": "TestGRPCMUSTPASS_AnalyzeHTTPFlow*"},
                {"package": "./common/yakgrpc/...", "timeout": "2m", "run": "TestGRPCMUSTPASS_Fingerprint*"},
                {"package": "./common/yakgrpc/...", "timeout": "2m", "run": "TestLARGEGRPCMUSTPASS*"},
                {"package": "./common/yakgrpc/...", "timeout": "5m", "run": "TestGRPCMUSTPASS_COMMON*"},
                {"package": "./common/yakgrpc/...", "timeout": "1m", "run": "TestAITaskWith", "parallel": 1}
              ]

          - name: "Test gRPC Other"
            test_configs: |
              [
                {"package": "./common/yakgrpc/...", "timeout": "10m", "skip": "^(TestGRPCMUSTPASS_PluginTrace*|TestGRPCMUSTPASS_AnalyzeHTTPFlow*|TestGRPCMUSTPASS_Fingerprint*|TestGRPC_Ai_List_Model|TestGRPCMUSTPASS_HTTP_*|TestAITaskWith*|TestGRPCMUSTPASS_MITM_*|TestGRPCMUSTPASS_HTTPFuzzer*|TestGRPCMUSTPASS_LANGUAGE*|TestGRPCMUSTPASS_COMMON*|TestLARGEGRPCMUSTPASS*|TestGRPCMUSTPASS_SyntaxFlow*|TestGRPCMUSTPASS_SSA*)"}
              ]

          - name: "Test Integration MITM / SyntaxFlow"
            test_configs: |
              [
                {"package": "./common/coreplugin", "timeout": "2m", "run": "TestGRPCMUSTPASS_MITM"},
                {"package": "./common/syntaxflow/tests", "timeout": "20s"},
                {"package": "./common/syntaxflow/sfdb/...", "timeout": "20s"},
                {"package": "./common/syntaxflow/sfvm/...", "timeout": "20s"}
              ]          

          - name: "Test Vulinbox Coreplugin Fastjson"
            test_configs: |
              [
                {"package": "./common/coreplugin", "timeout": "3m", "run": "TestGRPCMUSTPASS_Fastjson"}
              ]

          - name: "Test Vulinbox Coreplugin SQL Injection"
            test_configs: |
              [
                {"package": "./common/coreplugin", "timeout": "5m", "run": "TestGRPCMUSTPASS_SQL"}
              ]

          - name: "Test Vulinbox Coreplugin (XSS/Shiro/SSRF/SSTI/SMUGGLE/CSRF/OPEN_REDIRECT)"
            test_configs: |
              [
                {"package": "./common/coreplugin", "timeout": "6m", "run": "^(TestGRPCMUSTPASS_XSS|TestGRPCMUSTPASS_Shiro|TestGRPCMUSTPASS_SSRF|TestGRPCMUSTPASS_SSTI|TestGRPCMUSTPASS_Smuggle|TestGRPCMUSTPASS_CSRF|TestGRPCMUSTPASS_OPEN_REDIRECT)$"}
              ]

          - name: "Test Crawler / Crawlerx (chromium based crawler)"
            test_configs: |
              [
                {"package": "./common/crawlerx/...", "timeout": "5m"},
                {"package": "./common/crawler", "timeout": "20s", "run": "TestMUSTPASS"}
              ]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set Cache Key
        id: cache_key
        run: |
          CACHE_SHA="${{ github.event.pull_request.head.sha }}"
          echo "sha=$CACHE_SHA" >> $GITHUB_OUTPUT
          echo "Cache key will be: go-$CACHE_SHA"

      - name: Cache YakLang Project
        uses: actions/cache/restore@v3
        id: cache-project
        with:
          path: |
            ~/yakit-projects
            ${{ github.workspace }}
          key: go-${{ steps.cache_key.outputs.sha }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"
        id: go

      - name: Generate Test Config
        run: |
          # 根据 matrix 配置生成测试配置文件
          TEST_CONFIG_FILE="/tmp/test_config.json"
          
          # 将 test_configs 写入文件
          cat > "$TEST_CONFIG_FILE" <<'CONFIGEOF'
          ${{ matrix.test_configs }}
          CONFIGEOF
          
          # 检查是否为空（只包含空白字符）
          if grep -q '[^[:space:]]' "$TEST_CONFIG_FILE"; then
            echo "Generated test config file:"
            cat "$TEST_CONFIG_FILE"
          else
            echo "No package-level config specified"
            echo "[]" > "$TEST_CONFIG_FILE"
          fi

      - name: Compile Test Binaries
        run: |
          chmod +x ./scripts/ci/compile-tests.sh
          export TEST_BIN_DIR=/tmp/test_binaries
          export TEST_CONFIG="/tmp/test_config.json"
          ./scripts/ci/compile-tests.sh

      - name: Start GRPC Server
        env: 
          SKIP_SYNC_EMBED_RULE_IN_GITHUB: "true"
        run: |
          echo "Starting GRPC server for test: ${{ matrix.name }}"
          nohup ./yak grpc > /tmp/grpc.log 2>&1 < /dev/null &
          echo "Waiting for GRPC server to start on port 8087..."
          for i in {1..60}; do
            if nc -z localhost 8087; then
              echo "GRPC server is ready on port 8087"
              break
            fi
            echo "Waiting... ($i/60)"
            sleep 1
          done
          if ! nc -z localhost 8087; then
            echo "GRPC server failed to start within 60 seconds"
            cat /tmp/grpc.log
            exit 1
          fi

      - name: Sync SyntaxFlow Rules
        if: matrix.sync_rule == '1'
        run: |
          echo "Syncing SyntaxFlow rules for test: ${{ matrix.name }}"
          ./yak sync-rule

      - name: ${{ matrix.name }}
        run: |
          chmod +x ./scripts/ci/run-tests.sh
          export TEST_BIN_DIR=/tmp/test_binaries
          export TEST_TIMEOUT="2m"
          export TEST_VERBOSE="1"
          export TEST_CONFIG="/tmp/test_config.json"
          ./scripts/ci/run-tests.sh

      - name: Generate safe artifact name
        if: failure()
        id: artifact_name
        run: |
          # 将matrix.name中的特殊字符替换为下划线
          SAFE_NAME=$(echo "${{ matrix.name }}" | sed 's/[^a-zA-Z0-9_-]/_/g')
          echo "name=test_logs_${SAFE_NAME}_${{ github.run_id }}" >> $GITHUB_OUTPUT
          
      - name: Upload failure logs (GRPC + test logs)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_name.outputs.name }}
          path: /tmp/*.log
          if-no-files-found: warn
