name: Essential Tests

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, labeled, unlabeled]
    paths:
      - "common/**"
      - ".github/workflows/essential-tests.yml"
      - "go.mod"

jobs:
  check-wip:
    # fork PR should not run this action
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-22.04
    outputs:
      wip_detected: ${{ steps.check-wip.outputs.wip_detected }}
      should_skip: ${{ steps.check-wip.outputs.should_skip }}
    steps:
      - name: Check if PR is WIP
        id: check-wip
        run: |
          # Get current event information
          event_action="${{ github.event.action }}"
          labels="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          title="${{ github.event.pull_request.title }}"
          
          echo "Event Action: $event_action"
          echo "PR Labels: $labels"
          echo "PR Title: $title"
          
          # Convert to lowercase for case-insensitive matching
          labels_lower=$(echo "$labels" | tr '[:upper:]' '[:lower:]')
          title_lower=$(echo "$title" | tr '[:upper:]' '[:lower:]')
          
          # Define WIP indicators
          wip_labels="do-not-merge,work in progress,wip,rfc"
          
          # Function to check if current state has WIP
          check_current_wip() {
            # Check for WIP indicators in labels
            IFS=',' read -ra LABEL_ARRAY <<< "$wip_labels"
            for wip_label in "${LABEL_ARRAY[@]}"; do
              if [[ "$labels_lower" == *"$wip_label"* ]]; then
                return 0  # WIP found
              fi
            done
            
            # Check for WIP indicators in title
            IFS=',' read -ra KEYWORD_ARRAY <<< "$wip_labels"
            for wip_keyword in "${KEYWORD_ARRAY[@]}"; do
              if [[ "$title_lower" == *"$wip_keyword"* ]]; then
                return 0  # WIP found
              fi
            done
            
            return 1  # No WIP found
          }
          
          # Handle label change events
          if [[ "$event_action" == "labeled" || "$event_action" == "unlabeled" ]]; then
            label_name="${{ github.event.label.name }}"
            label_name_lower=$(echo "$label_name" | tr '[:upper:]' '[:lower:]')
            
            echo "Label changed: $label_name"
            
            # Check if the changed label is WIP-related
            is_wip_label=false
            IFS=',' read -ra WIP_LABEL_ARRAY <<< "$wip_labels"
            for wip_label in "${WIP_LABEL_ARRAY[@]}"; do
              if [[ "$label_name_lower" == *"$wip_label"* ]]; then
                is_wip_label=true
                break
              fi
            done
            
            if [[ "$is_wip_label" == "false" ]]; then
              echo "Label change is not WIP-related, skipping CI"
              echo "should_skip=true" >> $GITHUB_OUTPUT
              echo "wip_detected=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # WIP-related label changed, check current state
            if check_current_wip; then
              if [[ "$event_action" == "labeled" ]]; then
                echo "WIP label added, stopping CI"
                echo "wip_detected=true" >> $GITHUB_OUTPUT
                echo "should_skip=false" >> $GITHUB_OUTPUT
              else
                echo "Still has WIP indicators after unlabeling"
                echo "wip_detected=true" >> $GITHUB_OUTPUT
                echo "should_skip=false" >> $GITHUB_OUTPUT
              fi
            else
              if [[ "$event_action" == "unlabeled" ]]; then
                echo "WIP label removed and no other WIP indicators, proceeding with CI"
                echo "wip_detected=false" >> $GITHUB_OUTPUT
                echo "should_skip=false" >> $GITHUB_OUTPUT
              else
                echo "No WIP indicators found"
                echo "wip_detected=false" >> $GITHUB_OUTPUT
                echo "should_skip=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            # For other events (opened, synchronize, reopened), check current WIP state
            if check_current_wip; then
              echo "WIP indicator found"
              echo "wip_detected=true" >> $GITHUB_OUTPUT
              echo "should_skip=false" >> $GITHUB_OUTPUT
            else
              echo "No WIP indicators found"
              echo "wip_detected=false" >> $GITHUB_OUTPUT
              echo "should_skip=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Skip CI if not WIP-related change
        if: steps.check-wip.outputs.should_skip == 'true'
        run: |
          echo "::notice::Label change is not WIP-related, skipping CI to save resources."
          exit 0

      - name: Fail if WIP detected
        if: steps.check-wip.outputs.wip_detected == 'true' && steps.check-wip.outputs.should_skip != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "::error::This PR is marked as WIP (Work In Progress). Skipping CI run to save resources."
          echo "::error::Please remove WIP indicators from labels and title when ready for review."
          
          # Use gh CLI to add a comment to the PR
          gh pr comment ${{ github.event.pull_request.number }} --body "🚧 **WIP Detected** 🚧
          
          This PR has been marked as Work In Progress. CI tests have been skipped to save resources.
          
          **To enable CI testing:**
          - Remove WIP-related labels: \`wip\`, \`work in progress\`, \`do-not-merge\`, \`rfc\`
          - Remove WIP-related keywords from the PR title
          
          The CI will automatically run once the WIP indicators are removed." || true
          
          exit 1

  setup:
    needs: check-wip
    if: needs.check-wip.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    steps:
      - name: Cache YakLang Project
        uses: actions/cache@v3
        id: cache-project
        with:
          path: |
            ~/yakit-projects
            ${{ github.workspace }}
          key: go-${{ github.event.pull_request.head.sha }}

      - name: Check out code into the Go module directory
        if: steps.cache-project.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"
        id: go

      - name: Init Module
        run: |
          go mod tidy && go work vendor
          ls -la $(go env GOPATH)/pkg/mod/$(go list -m github.com/yaklang/pcap | sed 's/ /@/')/libpcap
          chmod +r $(go env GOPATH)/pkg/mod/$(go list -m github.com/yaklang/pcap | sed 's/ /@/')/libpcap
          cp -r $(go env GOPATH)/pkg/mod/$(go list -m github.com/yaklang/pcap | sed 's/ /@/')/libpcap ./vendor/github.com/yaklang/pcap/
          tree ./vendor

      - name: Generate Document Data
        if: steps.cache-project.outputs.cache-hit != 'true'
        run: |
          chmod +x ./scripts/gen-auto-completion.sh
          ./scripts/gen-auto-completion.sh

      - name: Init Project
        if: steps.cache-project.outputs.cache-hit != 'true'
        run: |
          go build -x common/yak/cmd/yak.go 
          ./yak --help
  test:
    name: ${{ matrix.name }}
    needs: [check-wip, setup]
    if: needs.check-wip.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          # - name: "These Testcase Need to Improve"
          #   run: |
          #     go test -timeout 20s ./common/utils/pprofutils/...
          - name: "Test Utils/Misc in 2min USE gRPC "
            run: |
              # these tests are very quick
              go test -v -timeout 20s ./common/chunkmaker/...   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/jsonextractor    | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/markdownextractor    | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/yak/yaklib/codec   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/yak/cartesian    | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/jsonpath    | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/domainextractor    | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # --- OMAP with race detection ---
              go test -v -timeout 30s -race ./common/utils/omap/...   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # -----------------------------
              go test -v -timeout 1m ./common/utils | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/utils/imageutils/...   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 10s ./common/utils/xml2 | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/utils/tlsutils/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 10s ./common/utils/linktable/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s -run TestQueryCVEWithFixName ./common/cve | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/sca/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s -run TestMUSTPASS_YakitLog ./common/yak/yaklib | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s -run TestMUSTPASS_Common ./common/yak/yaklib | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 1m -run TestMUSTPASS_Fp ./common/yak/yaklib/tools | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 30s ./common/openapi/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 10s ./common/utils/dot/... ./common/utils/filesys/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 15s ./common/utils/bruteutils/. | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 15s ./common/utils/memedit/. | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"  
              go test -v -timeout 15s ./common/pcapx/pcaputil/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 15s ./common/yak/yakurl/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # yso
              go test -v -timeout 20s ./common/yso/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/yserx | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # totp
              go test -v -timeout 20s ./common/twofa/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # cybertunnel http trigger
              go test -v ./common/cybertunnel/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # YAK GIT
              go test -v ./common/utils/yakgit/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # YAK suspect tools
              go test -v ./common/utils/suspect | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v ./common/javaclassparser/jarwar/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 1m ./common/bin-parser/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 1m ./common/yak/antlr4nasl/tests/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 30s ./common/fp/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 30s ./common/utils/gzip_embed/test/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 30s ./common/yak/cmd/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 30s ./common/javaclassparser/tests/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"

              # suricate generate && match
              go test -v -timeout 20s -run TestMUSTPASS* ./common/suricata/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s -run TestMUSTPASS* ./common/chaosmaker | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # pcapx
              go test -v -timeout 20s -run TestSmoking_* ./common/pcapx | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/netx/mustpass | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s -run TestPingAutoConfig ./common/utils/pingutil | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/mutate_tests ./common/fuzztag   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/fuzztagx  | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 30s ./common/mutate | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 30s ./common/fuzzx | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 20s ./common/utils/bizhelper/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              
               # cli
              go test -v --timeout 1m ./common/utils/cli | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # mcp
              go test -v --timeout 1m ./common/mcp/yakcliconvert | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # doc
              go test -v -timeout 3m  ./common/yak/yakdoc/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              # jwt
              go test -v --timeout 1m ./common/authhack/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"

              # vulinbox agent client
              go test -v -timeout 1m -run TestMUSTPASS ./common/vulinboxagentclient | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"

              # yakdiff
              go test -v -timeout 20s ./common/utils/yakgit/yakdiff/...   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"

          - name: Test AI Infra / RAG / Knowledge
            run: |
              go test -v -timeout 3m ./common/ai/aid/...  | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 60s ./common/ai/tests/...  | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 60s ./common/ai/rag/pq/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 60s ./common/ai/rag/hnsw/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 60s ./common/ai/aispec/...   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 60s ./common/aireducer/...   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 40s ./common/aiforge/aibp/forge_builder_test.go   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 3m ./common/aiforge   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 60s ./common/ai/rag/entityrepos/... | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 1m -run TestMUSTPASS ./common/ai/rag   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"
              go test -v -timeout 1m -run TestMUSTPASS ./common/ai/rag/plugins_rag/...   | grep -E "(PASS|FAIL|RUN|=== RUN|--- PASS|--- FAIL|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)"

          - name: Test gRPC StaticAnalyze / BuildIn SyntaxFlow Rule / SSA / SSA-API / SF Scan
            run: |
              # SSA plugin rule/option
              go test -timeout 20s ./common/yak/static_analyzer/test/...
              # StaticAnalyze
              go test -timeout 1m -run TestAnalyzeMustPASS* ./common/coreplugin
              # BuildIn SyntaxFlow Rule
              go test -timeout 5m ./common/syntaxflow/sfbuildin/...
              go test -timeout 1m ./common/yak/ssaapi/test/syntaxflow
              # SyntaxFlowRule Evaluation
              go test -timeout 20s ./common/syntaxflow/sfanalyzer/...
              # SSA
              go test -timeout 20s ./common/yak/ssa/...
              # SSAAPI
              go test -timeout 1m ./common/yak/ssaapi
              go test -timeout 1m ./common/yak/ssaapi/ssareducer
              go test -timeout 1m ./common/yak/ssaapi/test/ssatest
              # SyntaxFlow Scan
              go test -timeout 1m ./common/yak/syntaxflow_scan/...

          - name: Test gRPC SSA Frontend Yak  / JS(TS|ES) | PHP | Golang | C | Java
            run: |
              # yak ssa
              go test -timeout 20s ./common/yak/yak2ssa/test/...
              go test -timeout 1m ./common/yak/ssaapi/test/yak
              # Test js
              # go test -timeout 60s ./common/yak/JS2ssa/... // remove this frontend 
              go test -timeout 1m ./common/yak/ssaapi/test/javascript
              go test -timeout 5m ./common/yak/java/...
              go test -timeout 3m ./common/yak/ssaapi/test/java
              go test -timeout 1m ./common/yak/typescript/frontend/tests/...
              go test -timeout 1m ./common/yak/typescript/js2ssa/tests/...
              go test -timeout 2m ./common/yak/php/...
              go test -timeout 2m ./common/yak/ssaapi/test/php
              go test -timeout 30s ./common/yak/go2ssa/...
              go test -timeout 30s ./common/yak/antlr4go/...
              go test -timeout 2m ./common/yak/ssaapi/test/golang
              go test -timeout 30s ./common/yak/c2ssa/...
              go test -timeout 30s ./common/yak/antlr4c/...
              go test -timeout 2m ./common/yak/ssaapi/test/c

          - name: Test lowhttp / DNSX
            run: |
              # lowhttp
              go test -timeout 2m -skip "TestComputeDigestResponseFromRequest|TestComputeDigestResponseFromRequestEx|TestLowhttpResponse2" ./common/utils/lowhttp
              # DNSX
              go test -timeout 20s ./common/facades/...

          - name: Test HttpTpl(YakTemplate)
            run: go test -timeout 1m ./common/yak/httptpl

          - name: Test MustPass - full yak scripts
            run: go test -timeout 3m ./common/yak/yaktest/mustpass

          - name: Test gRPC MUSTPASS MITM
            run: |
              go test -v -timeout 1m -run TestMUSTPASS ./common/yakgrpc/yakit 2>&1 | tee /tmp/yakit_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/yakit_test.log; }
              # Test gRPC MUSTPASS MITM
              go test -v -timeout 5m -run TestGRPCMUSTPASS_MITM_* ./common/yakgrpc/... 2>&1 | tee /tmp/mitm_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/mitm_test.log; }
              # Test gRPC MUSTPASS MITM V2
              go test -v -timeout 5m -run TestGRPCMUSTPASS_MITMV2_* ./common/yakgrpc/... 2>&1 | tee /tmp/mitmv2_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/mitmv2_test.log; }

          - name: Test gRPC MUSTPASS Fuzzer
            run: |
              go test -v -timeout 5m -run TestGRPCMUSTPASS_HTTPFuzzer ./common/yakgrpc/... 2>&1 | tee /tmp/fuzzer_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/fuzzer_test.log; }
              go test -v -timeout 5m -run TestGRPCMUSTPASS_HTTP_ ./common/yakgrpc/... 2>&1 | tee /tmp/http_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/http_test.log; }
              go test -v -timeout 5m -run TestGRPCMUSTPASS_PluginTrace ./common/yakgrpc/... 2>&1 | tee /tmp/plugin_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/plugin_test.log; }

          - name: Test gRPC MUSTPASS Language
            run: go test -v -timeout 5m -run TestGRPCMUSTPASS_LANGUAGE* ./common/yakgrpc/... 2>&1 | tee /tmp/language_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/language_test.log; }

          - name: Test gRPC MUSTPASS SyntaxFlow | SSA
            run: |
              go test -v -timeout 5m -run TestGRPCMUSTPASS_SyntaxFlow* ./common/yakgrpc/... 2>&1 | tee /tmp/syntaxflow_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/syntaxflow_test.log; }
              go test -v -timeout 5m -run TestGRPCMUSTPASS_SSA* ./common/yakgrpc/... 2>&1 | tee /tmp/ssa_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/ssa_test.log; }
              go test -v -timeout 4m ./common/sfweb/... 2>&1 | tee /tmp/sfweb_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/sfweb_test.log; }

          - name: Test gRPC In 2m
            run: |
              # Test gRPC MUSTPASS AnalyzeHTTPFlow
              go test -v -timeout 2m -run TestGRPCMUSTPASS_AnalyzeHTTPFlow* ./common/yakgrpc/... 2>&1 | tee /tmp/analyze_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/analyze_test.log; }
              # Test gRPC MUSTPASS Fingerprint
              go test -v -timeout 2m -run TestGRPCMUSTPASS_Fingerprint* ./common/yakgrpc/... 2>&1 | tee /tmp/fingerprint_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/fingerprint_test.log; }
              # Test gRPC gRPC(LIST)MUSTPASS
              go test -v -timeout 2m -run TestLARGEGRPCMUSTPASS* ./common/yakgrpc/... 2>&1 | tee /tmp/large_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/large_test.log; }
              # Test gRPC MUSTPASS COMMON
              go test -v -timeout 5m -run TestGRPCMUSTPASS_COMMON* ./common/yakgrpc/... 2>&1 | tee /tmp/common_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/common_test.log; }
              # Test AI gRPC
              go test -v -timeout 1m -run TestAITaskWith ./common/yakgrpc/... 2>&1 | tee /tmp/ai_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/ai_test.log; }

          - name: Test gRPC Other
            run:  |
              go test -v -timeout 10m -skip "^(TestGRPCMUSTPASS_PluginTrace*|TestGRPCMUSTPASS_AnalyzeHTTPFlow*|TestGRPCMUSTPASS_Fingerprint*|TestGRPC_Ai_List_Model|TestGRPCMUSTPASS_HTTP_*|TestAITaskWith*|TestGRPCMUSTPASS_MITM_*|TestGRPCMUSTPASS_HTTPFuzzer*|TestGRPCMUSTPASS_LANGUAGE*|TestGRPCMUSTPASS_COMMON*|TestLARGEGRPCMUSTPASS*|TestGRPCMUSTPASS_SyntaxFlow*|TestGRPCMUSTPASS_SSA*)" ./common/yakgrpc/... 2>&1 | tee /tmp/grpc_other_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/grpc_other_test.log; }

          - name: Test Integration MITM / SyntaxFlow
            run: |
              #  integration MITM
              go test -v -timeout 2m -run TestGRPCMUSTPASS_MITM ./common/coreplugin 2>&1 | tee /tmp/integration_mitm_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/integration_mitm_test.log; }
              # SyntaxFlow
              go test -timeout 20s  ./common/syntaxflow/tests
              go test -timeout 20s  ./common/syntaxflow/sfdb/...
              go test -timeout 20s  ./common/syntaxflow/sfvm/...

          - name: Test Vulinbox Coreplugin Fastjson
            run: go test -v -timeout 3m -run TestGRPCMUSTPASS_Fastjson ./common/coreplugin 2>&1 | tee /tmp/fastjson_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/fastjson_test.log; }

          - name: Test Vulinbox Coreplugin SQL Injection
            run: go test -v -timeout 5m -run TestGRPCMUSTPASS_SQL ./common/coreplugin 2>&1 | tee /tmp/sql_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/sql_test.log; }

          - name: Test Vulinbox Coreplugin (XSS/Shiro/SSRF/SSTI/SMUGGLE/CSRF/OPEN_REDIRECT)
            run: |
              go test -v -timeout 6m -run "^(TestGRPCMUSTPASS_XSS|TestGRPCMUSTPASS_Shiro|TestGRPCMUSTPASS_SSRF|TestGRPCMUSTPASS_SSTI|TestGRPCMUSTPASS_Smuggle|TestGRPCMUSTPASS_CSRF|TestGRPCMUSTPASS_OPEN_REDIRECT)$" ./common/coreplugin 2>&1 | tee /tmp/vuln_test.log | { grep -E -A3 -B3 "(FAIL|--- FAIL|panic:|test timed out)" || grep -E "(PASS|RUN|=== RUN|--- PASS|TestTemplate|panic:|goroutine.*\[(running|sleep)\]|test timed out|testing\..*panic|recovered)" /tmp/vuln_test.log; }

          - name: Test Crawler / Crawlerx (chromium based crawler)
            run: |
              # crawlerx
              go test --timeout 5m ./common/crawlerx/...
              # crawler
              go test -timeout 20s -run TestMUSTPASS ./common/crawler

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache YakLang Project
        uses: actions/cache/restore@v3
        id: cache-project
        with:
          path: |
            ~/yakit-projects
            ${{ github.workspace }}
          key: go-${{ github.event.pull_request.head.sha }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"
        id: go

      - name: GRPC
        env: 
          SKIP_SYNC_EMBED_RULE_IN_GITHUB: "true"
        run: |
          # 只要测试名称或测试内容包含 grpc (不区分大小写) 就启动 GRPC 服务
          echo "${{ matrix.name }}" > /tmp/test_name.txt
          echo '${{ matrix.run }}' > /tmp/test_run.txt
          if grep -qi grpc /tmp/test_name.txt || grep -qi grpc /tmp/test_run.txt; then
            echo "Starting GRPC server for test: ${{ matrix.name }}"
            nohup ./yak grpc > /tmp/grpc.log 2>&1 < /dev/null &
            echo "Waiting for GRPC server to start on port 8087..."
            for i in {1..30}; do
              if nc -z localhost 8087; then
                echo "GRPC server is ready on port 8087"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 1
            done
            if ! nc -z localhost 8087; then
              echo "GRPC server failed to start within 30 seconds"
              cat /tmp/grpc.log
              exit 1
            fi
          else
            echo "Skipping GRPC server start for test: ${{ matrix.name }}"
          fi

      - name: ${{ matrix.name }}
        run: |
          echo "Running test: ${{ matrix.name }}"
          set -o pipefail
          set -e
          ${{ matrix.run }}

      - name: Upload failure grpc log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: grpc.log
          path: /tmp/grpc.log
