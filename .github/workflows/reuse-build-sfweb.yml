name: Reuse-Build-SyntaxFlow-Web-Server

on:
  workflow_dispatch:
    inputs:
      os:
        description: "System to build"
        required: true
        type: choice
        options:
          - windows
          - windows7
          - macos-amd64 
          - macos-arm64
          - linux-amd64
          - linux-arm64
  workflow_call:
    inputs:
      os:
        description: "System to build"
        required: true
        type: string

jobs:
  build_and_upload_asset:
    runs-on: ${{ contains(inputs.os, 'windows') && 'windows-latest' || 'macos-14' }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "./go.mod"
        id: go

      - name: Go Patch for Win7
        if: inputs.os == 'windows7'
        run: |
          cd $(go env GOROOT)
          Get-Content "${{ github.workspace }}\.github\patch_go122\693def151adff1af707d82d28f55dba81ceb08e1.diff" | patch --verbose -R -p 1 
          Get-Content "${{ github.workspace }}\.github\patch_go122\7c1157f9544922e96945196b47b95664b1e39108.diff" | patch --verbose -R -p 1
          Get-Content "${{ github.workspace }}\.github\patch_go122\48042aa09c2f878c4faa576948b07fe625c4707a.diff" | patch --verbose -R -p 1
          cd ${{ github.workspace }}


      - name: Download CrossBuild GCC(Linux x64 / MacOS x64)
        if: inputs.os == 'linux-amd64' || inputs.os == 'macos-amd64'
        run: |
          brew tap messense/macos-cross-toolchains
          brew install x86_64-unknown-linux-gnu
          x86_64-linux-gnu-gcc -v

      - name: Download CrossBuild GCC(Linux arm64)
        if: inputs.os == 'linux-arm64' 
        run: |
          brew tap messense/macos-cross-toolchains
          brew install aarch64-unknown-linux-gnu
          aarch64-linux-gnu-gcc -v

      - name: Build for Windows
        if: contains(inputs.os, 'windows')
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $outputName = if ("${{ inputs.os }}" -eq "windows7") { "sfweb_windows_legacy_amd64.exe" } else { "sfweb_windows_amd64.exe" }
          go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -o $outputName -v common/sfwebrunner/main.go
          echo "OUTPUT_NAME=$outputName" >> $env:GITHUB_ENV

      - name: Build for Non-Windows
        if: ${{ !contains(inputs.os, 'windows') }}
        run: |
          export GOOS=$(echo ${{ inputs.os }} | cut -d'-' -f1)
          export GOARCH=$(echo ${{ inputs.os }} | cut -d'-' -f2)
          export OUTPUT_NAME="sfweb_${GOOS}_${GOARCH}"
          export CGO_ENABLED=1
          if [ "${{ inputs.os }}" = "linux-amd64" ]; then
            export CC=x86_64-linux-gnu-gcc
          elif [ "${{ inputs.os }}" = "linux-arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
          fi

          go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)'" -o $OUTPUT_NAME -v common/sfwebrunner/main.go && ls

          echo "OUTPUT_NAME=$OUTPUT_NAME" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: ./${{ env.OUTPUT_NAME }}