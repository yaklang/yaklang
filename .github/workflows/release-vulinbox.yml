name: Release Vulinbox(OSS Release)

on:
  pull_request:
    paths:
      - 'common/vulinbox/**'
      - 'common/vulinboxrunner/**'
      - '.github/workflows/release-vulinbox.yml'

jobs:
  build_and_release:
    strategy:
      matrix:
        os:
          - windows-latest
          - macos-13
          - ubuntu-20.04
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Version by Tag
        uses: mad9000/actions-find-and-replace-string@1
        id: fetchtag
        with:
          source: ${{ github.ref }}
          find: 'refs/tags/'
          replace: ''
      - name: Print RELEASE_VERSION
        run: |
          echo "github actions's env VERSION: ${{ steps.fetchtag.outputs.value }}"
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.20.3
      #      - name: Download Npcap SDK (Windows)
      #        run: |
      #          Invoke-WebRequest https://nmap.org/npcap/dist/npcap-sdk-1.07.zip -OutFile C:\NpcapSDK.zip
      #          Expand-Archive C:\NpcapSDK.zip -DestinationPath ..\wpdpack
      #        if: runner.os == 'Windows'
      - name: Install libpcap (macOS)
        run: |
          brew install libpcap
        if: runner.os == 'macOS'

      - name: Install libpcap (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install libpcap-dev=1.9.1-3
        if: runner.os == 'Linux'

      - name: Generate Document
        run: go run -gcflags=all=-l common/yak/yakdoc/generate_doc/generate_doc.go common/yak/yakdoc/doc/doc.gob.gzip

      - name: Initialize License Machine
        run: go run common/xlic/cmd/initializer.go --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }}

      - name: Build For Linux
        run: |
          go build -ldflags "-linkmode external -extldflags '-static' -s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ steps.fetchtag.outputs.value }}'" -o "./vulinbox_$(go env GOOS)_$(go env GOARCH)" -v common/vulinboxrunner/vulinbox.go
        if: runner.os == 'Linux'

      - name: Build For MacOS
        run: |
          go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ steps.fetchtag.outputs.value }}'" -o "./vulinbox_$(go env GOOS)_$(go env GOARCH)" -v common/vulinboxrunner/vulinbox.go
        if: runner.os == 'macOS'

      - name: Build For Windows
        run: |
          go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ steps.fetchtag.outputs.value }}'" -o ./vulinbox_windows_amd64.exe -v common/vulinboxrunner/vulinbox.go
        if: runner.os == 'Windows'

      - name: Upload Artifacts Windows
        uses: actions/upload-artifact@v4
        if: runner.os == 'Windows'
        with:
          name: vulinbox_windows_amd64.exe
          path: ./vulinbox_windows_amd64.exe


      - name: Upload Artifacts MacOS
        uses: actions/upload-artifact@v4
        if: runner.os == 'macOS'
        with:
          name: vulinbox_darwin_amd64
          path: ./vulinbox_darwin_amd64


      - name: Upload Artifacts Linux
        uses: actions/upload-artifact@v4
        if: runner.os == 'Linux'
        with:
          name: vulinbox_linux_amd64
          path: ./vulinbox_linux_amd64

  download_artifacts_and_release:
    needs:
      - build_and_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set Version by Tag
        uses: mad9000/actions-find-and-replace-string@1
        id: fetchtag_release
        with:
          source: ${{ github.ref }}
          find: 'refs/tags/v'
          replace: ''
      # 获取 latest 之前的 tag
      - name: Get previous version
        run: |
          echo "::set-output name=value::$(git tag --sort=-v:refname | awk 'NR==2 { sub(/^v/, "", $0); print }')"
        id: previous_version
      - name: Download Windows VULINBOX
        uses: actions/download-artifact@v2
        with:
          name: vulinbox_windows_amd64.exe
      - name: Download macOS VULINBOX
        uses: actions/download-artifact@v2
        with:
          name: vulinbox_darwin_amd64
      - name: Download Linux VULINBOX
        uses: actions/download-artifact@v2
        with:
          name: vulinbox_linux_amd64
      - name: Run
        run: ls
      - name: Update OSS latest file
        run: echo "vulinbox-${{ steps.fetchtag_release.outputs.value }}" > ./version.txt
      - name: Store previous version in a file
        run: echo "vulinbox-${{ steps.previous_version.outputs.value }}" > previous_version.txt
      - name: Upload vulinbox to oss Latest
        uses: tvrcgo/upload-to-oss@master
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: oss-accelerate
          bucket: yaklang
          assets: |
            ./version.txt:/vulinbox/latest/version.txt
            ./previous_version.txt:/vulinbox/previous/previous_version.txt
            vulinbox_windows_amd64.exe:/vulinbox/latest/vulinbox_windows_amd64.exe
            vulinbox_windows_amd64.exe:/vulinbox/${{ steps.fetchtag_release.outputs.value }}/vulinbox_windows_amd64.exe
            vulinbox_linux_amd64:/vulinbox/latest/vulinbox_linux_amd64
            vulinbox_linux_amd64:/vulinbox/${{ steps.fetchtag_release.outputs.value }}/vulinbox_linux_amd64
            vulinbox_darwin_amd64:/vulinbox/latest/vulinbox_darwin_amd64
            vulinbox_darwin_amd64:/vulinbox/${{ steps.fetchtag_release.outputs.value }}/vulinbox_darwin_amd64