name: Cross-Build

on:
  pull_request:
    paths:
      - '.github/workflows/exp-cross-build.yml'
#  workflow_call:
#    inputs:
#        release:
#            type: boolean
#            description: whether to true release
#            default: true

jobs:
  build_and_upload_to_oss:
    strategy:
        matrix:
          os:
            - windows
            - macos-amd64 
            - macos-arm64
            - linux-amd64
            - linux-arm64
          include:
            - os: windows
              binary: yak_windows_amd64.exe
              env: $env:GITHUB_ENV
            - os: macos-amd64
              binary: yak_darwin_amd64
              env: $GITHUB_ENV
            - os: macos-arm64
              binary: yak_darwin_arm64
              env: $GITHUB_ENV
            - os: linux-amd64
              binary: yak_linux_amd64
              env: $GITHUB_ENV
            - os: linux-arm64
              binary: yak_linux_arm64
              env: $GITHUB_ENV
    runs-on: ${{ contains(matrix.os, 'windows') && 'windows-latest' || 'macos-14' }}
    steps:
        # build
        - uses: actions/checkout@v2

        - name: Set up Go 1.x
          uses: actions/setup-go@v4
          with:
            go-version-file: "./go.mod"
          id: go

        - name: Get Repo tags
          run: |
            go run common/yak/cmd/yak.go repos-tag -o tags.txt
            echo "YAK_TAG=$(cat tags.txt)" >> ${{ matrix.env }} 
  
        - name: Download CrossBuild GCC(Linux x64)
          if: matrix.os == 'linux-amd64'
          run: |
            brew tap messense/macos-cross-toolchains
            brew install x86_64-unknown-linux-gnu
            x86_64-linux-gnu-gcc -v
  
        - name: Download CrossBuild GCC(Linux arm64)
          if: matrix.os == 'linux-arm64' 
          run: |
            brew tap messense/macos-cross-toolchains
            brew install aarch64-unknown-linux-gnu
            aarch64-linux-gnu-gcc -v
  
        - name: Generate Document
          run: go run common/yak/yakdoc/generate_doc/generate_doc.go common/yak/yakdoc/doc/doc.gob.gzip
  
        - name: Codec Methods Document
          run: go run common/yak/yaklib/codec/codegrpc/doc/codec_doc.go common/yak/yaklib/codec/codegrpc/codec.gob.gzip
  
        - name: Initialize License Machine
          run: go run common/xlic/cmd/initializer.go --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }}
  
        - name: Build For Linux(linux, amd64)
          run: |
            CGO_ENABLED=1 GOOS=linux GOARCH=amd64 CC=x86_64-linux-gnu-gcc go build -ldflags "-linkmode external -extldflags '-static' -s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ env.YAK_TAG }}'" -o "./yak_linux_amd64" -v common/yak/cmd/yak.go && ls
          if: matrix.os == 'linux-amd64'
  
        - name: Build For Linux(linux, arm64)
          run: |
            CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -ldflags "-linkmode external -extldflags '-static' -s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ env.YAK_TAG }}'" -o "./yak_linux_arm64" -v common/yak/cmd/yak.go && ls
          if: matrix.os == 'linux-arm64'
  
        - name: Build For MacOS(arm64)
          run: |
            CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ env.YAK_TAG }}'" -o "./yak_darwin_arm64" -v common/yak/cmd/yak.go && ls
          if: matrix.os == 'macos-arm64'
  
        - name: Build For MacOS(amd64)
          run: |
            CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ env.YAK_TAG }}'" -o "./yak_darwin_amd64" -v common/yak/cmd/yak.go && ls
          if: matrix.os == 'macos-amd64'
  
        - name: Build For Windows
          run: |
            go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ env.YAK_TAG }}'" -o ./yak_windows_amd64.exe -v common/yak/cmd/yak.go
          if: runner.os == 'Windows'  
        # release
        - name: Generate Checksums
          run: |
            go run common/yak/cmd/yak.go sha256 -f ${{ matrix.binary }}
            echo "SHA256=${{ matrix.binary }}.sha256.txt" >> ${{ matrix.env }}

        - name: debug info
          run: |
            echo "env.YAK_TAG PRODUCT_BINARY=${{ matrix.binary }}"
            echo "env.YAK_TAG YAK_TAG=${{ env.YAK_TAG }}"
            echo "env.YAK_TAG SHA256=${{ env.SHA256 }}"

        - name: Show Current Dir
          run: ls
          if: runner.os != 'Windows'
            
        - name: Upload Binaries To aliyun-oss
          run: |
            go run common/yak/cmd/yak.go upload-oss --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }} -t 5 -f '${{ matrix.binary }}:/yak/_/${{ env.YAK_TAG }}/${{ matrix.binary }};${{ env.SHA256 }}:/yak/_/${{ env.YAK_TAG }}/${{ env.SHA256 }}'
    
        # upload assets
        - name: Upload Artifacts Windows
          uses: actions/upload-artifact@v2
          if: runner.os == 'Windows'
          with:
              name: yak_windows_amd64.exe
              path: ./yak_windows_amd64.exe

        - name: Upload Artifacts MacOS(amd64)
          uses: actions/upload-artifact@v2
          if: matrix.os == 'macos-amd64'
          with:
            name: yak_darwin_amd64
            path: ./yak_darwin_amd64

        - name: Upload Artifacts MacOS(arm64)
          uses: actions/upload-artifact@v2
          if: matrix.os == 'macos-arm64'
          with:
            name: yak_darwin_arm64
            path: ./yak_darwin_arm64

        - name: Upload Artifacts CrossBuild Linux(amd64)
          uses: actions/upload-artifact@v2
          if: matrix.os == 'linux-amd64'
          with:
            name: yak_linux_amd64
            path: ./yak_linux_amd64

        - name: Upload Artifacts CrossBuild Linux(arm64)
          uses: actions/upload-artifact@v2
          if: matrix.os == 'linux-arm64'
          with:
            name: yak_linux_arm64
            path: ./yak_linux_arm64

  check_version_and_github_release:
    runs-on: ubuntu-latest
    needs: build_and_upload_to_oss
    steps:
      - name: Download Windows binary
        uses: actions/download-artifact@v2
        with:
          name: yak_windows_amd64.exe

      - name: Download macOS x64 binary
        uses: actions/download-artifact@v2
        with:
          name: yak_darwin_amd64

      - name: Download macOS arm64 binary
        uses: actions/download-artifact@v2
        with:
          name: yak_darwin_arm64

      - name: Download Linux x64 binary
        uses: actions/download-artifact@v2
        with:
          name: yak_linux_amd64

      - name: Download Linux arm64 binary
        uses: actions/download-artifact@v2
        with:
          name: yak_linux_arm64
    
      - uses: actions/checkout@v2

      - name: Get Repo tags
        run: |
          ./yak_linux_amd64 repos-tag -o tags.txt
          echo "YAK_TAG=$(cat tags.txt)" >> $GITHUB_ENV

      - name: Checkout Tags Version
        run: echo ${{ env.YAK_TAG }}

#      - name: Get previous version(Download From OSS)
#        run: |
#          echo "$(git tag --sort=-v:refname | awk 'NR==2 { sub(/^v/, "", $0); print }')" > previous_version.txt

#      - name: Upload version txt to Aliyun OSS
#        run: |
#          ./yak_linux_amd64 upload-oss -f tags.txt:/yak/latest/version.txt;previous_version.txt:/yak/previous/previous_version.txt -ak ${{ secrets.OSS_KEY_ID }} -sk ${{ secrets.OSS_KEY_SECRET }} -t 5

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.YAK_TAG }}
          release_name: ${{ env.YAK_TAG }}
          body: |
            Release ${{ env.YAK_TAG }}
          draft: false
          prerelease: false
    
      - name: Upload Release Asset Linux(amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./yak_linux_amd64
          asset_name: yak_linux_amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Linux(arm64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./yak_linux_arm64
          asset_name: yak_linux_arm64
          asset_content_type: application/octet-stream
  
      - name: Upload Release Asset macOS(amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./yak_darwin_amd64
          asset_name: yak_darwin_amd64
          asset_content_type: application/octet-stream
  
      - name: Upload Release Asset macOS(arm64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./yak_darwin_arm64
          asset_name: yak_darwin_arm64
          asset_content_type: application/octet-stream
  
      - name: Upload Release Asset Windows
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./yak_windows_amd64.exe
          asset_name: yak_windows_amd64.exe
          asset_content_type: application/octet-stream
    
    
    