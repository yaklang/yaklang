desc(
	title: "Check PHP simplexml_load_string for XXE Vulnerability"
	title_zh: "检测PHP simplexml_load_string XXE漏洞"
	level: high
	type: audit
	risk: "xxe"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   XXE（XML External Entity）漏洞是指应用程序解析XML输入时，未禁止外部实体引用，攻击者可通过构造恶意XML文件，引用外部实体加载本地或远程文件，甚至可以利用特定的协议进行内网探测或SSRF攻击。

   在PHP中，如果使用`simplexml_load_string`等函数解析XML且未禁用外部实体（如设置`LIBXML_NOENT`选项），攻击者可以在XML文档类型定义（DTD）中定义外部实体，例如`<!ENTITY xxe SYSTEM "file:///etc/passwd">`，当解析器处理该实体时，会将`/etc/passwd`文件的内容加载到XML文档中，从而导致敏感信息泄露。

2. **触发场景**
   当应用程序接收并解析用户提供的XML数据时，如果解析器支持并启用了外部实体，且未使用任何限制机制，就可能存在XXE漏洞。

   ```php
   <?php
   // 存在XXE漏洞的代码示例
   $xml_data = $_POST['xml_data']; // 接收用户输入的XML
   libxml_disable_entity_loader(false); // 通常默认开启，但为了演示明确设置为开启
   $xml = simplexml_load_string($xml_data); // 未设置 LIBXML_NOENT 或其他安全选项

   // 攻击者可以构造如下恶意XML:
   // <?xml version="1.0"?>
   // <!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
   // <root>&xxe;</root>
   ?>
   ```

3. **潜在影响**
    - 敏感文件读取：攻击者可以读取服务器上的任意文件，如配置文件、源代码、用户信息等。
    - 内网扫描：通过file、http、ftp等协议探测内部网络服务。
    - 拒绝服务：通过嵌套实体或引用超大文件导致服务器资源耗尽。
    - 远程代码执行：在特定配置下，结合其他漏洞或通过phar协议等可能导致远程代码执行。
DESC
	rule_id: "bf975bf6-f601-4eb3-9961-7b2ff7b6bacd"
	solution: <<<SOLUTION
### 修复建议

1. **禁用外部实体（推荐）**
   在解析XML时，明确禁止解析外部实体是防止XXE漏洞最有效的方法。对于使用libxml库的PHP函数（如`simplexml_load_string`, `DOMDocument::loadXML`等），应使用`libxml_disable_entity_loader(true)`来全局禁用外部实体加载。自PHP 5.2版本起，`libxml_disable_entity_loader`默认是启用的，但在旧版本或特定配置下需要明确设置。

   ```php
   <?php
   // 修复代码示例：使用 libxml_disable_entity_loader
   $xml_data = $_POST['xml_data'];
   libxml_disable_entity_loader(true); // 禁用外部实体加载
   $xml = simplexml_load_string($xml_data);
   // 处理$xml对象
   ?>
   ```

2. **设置安全的解析选项**
   对于`simplexml_load_string`和`DOMDocument::loadXML`等函数，可以使用具有安全含义的libxml常量，例如`LIBXML_NOENT`（处理实体）不应该被设置，而应考虑使用`LIBXML_NONET`（禁用网络访问）、`LIBXML_DTDLOAD` 和 `LIBXML_DTDATTR` 等选项，并谨慎处理DTD加载。然而，最安全的方式是完全禁用实体加载（方法1）。

   ```php
   <?php
   // 修复代码示例：使用安全的常量组合（次选方案，推荐方法1）
   $xml_data = $_POST['xml_data'];
   // 禁用实体加载（LIBXML_NOENT不应被设置）并禁用网络访问
   $xml = simplexml_load_string($xml_data, 'SimpleXMLElement', LIBXML_NONET);
   // 处理$xml对象
   ?>
   ```

3. **使用更安全的替代方案或数据格式**
   如果可能，考虑使用更安全的数据交换格式，如JSON，它不涉及实体引用问题。或者使用专门为安全解析未知XML设计的库。
SOLUTION
	reference: <<<REFERENCE
[CWE-611: Improper Restriction of XML External Entity Reference ('XXE')](https://cwe.mitre.org/data/definitions/611.html)
REFERENCE
)

LIBXML_NOENT<getCall><getCallee><name>?{have: simplexml_load_string} as $vuln;
check $vuln;
alert $vuln for {
	title: "Check PHP simplexml_load_string for XXE Vulnerability",
	title_zh: "检测PHP simplexml_load_string XXE漏洞",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "high",
}


desc(
	lang: php
	alert_min: 1
	'file://a.php': <<<CODE
<?php
$xml = file_get_contents('xxe.xml');
$doc = simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOENT); // Noncompliant
CODE
	'safefile://b.php': <<<CODE
<?php
$xml = file_get_contents('xxe.xml');
$doc = simplexml_load_string($xml, 'SimpleXMLElement'); // Noncompliant
CODE
)
