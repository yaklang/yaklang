desc(
	title: "Audit PHP Custom Extern Variable"
	type: audit
	lib: 'php-param'
	desc: <<<DESC
### 1.规则目的
该规则属于 `php-param` 库规则（`lib`类型），旨在审计PHP代码中对自定义外部变量（如 `$_POST`、`$_GET`、`$_REQUEST`、`$_COOKIE`）的使用情况。通过识别直接或间接使用这些用户可控外部变量的代码位置，为后续的数据流入跟踪和安全分析提供基础。

### 2.规则详细
1. **作为基础审计库**
该规则不直接报告漏洞，而是作为其他规则（如污点分析规则）的基础组件。它标记出代码中所有对 `$_POST`, `$_GET`, `$_REQUEST`, `$_COOKIE` 等全局变量的访问点。

2. **覆盖常见外部输入**
规则识别并跟踪以下常见的PHP自定义外部变量：
   - `$_POST`：通过 HTTP POST 方法传递的变量。
   - `$_GET`：通过 URL 参数（HTTP GET 方法）传递的变量。
   - `$_REQUEST`：默认包含 `$_GET`, `$_POST`, `$_COOKIE` 中的变量。
   - `$_COOKIE`：通过 HTTP Cookie 传递的变量。

3. **潜在安全风险**
尽管本规则本身不报告漏洞，但对外部变量的不当处理是许多PHP安全漏洞（如SQL注入、XSS、文件包含、命令执行等）的根本原因。后续的污点分析规则将利用本规则识别的源，追踪数据流程，判断是否存在安全风险。

4. **审计示例**
例如，以下代码片段中对 `$_POST["a"]` 的使用将被本规则标记：
```php
$a = $_POST["a"]; // 此处 $_POST["a"] 被标记为外部输入
$b = $_GET["b"];  // 此处 $_GET["b"] 被标记为外部输入
$c = $_REQUEST["c"]; // 此处 $_REQUEST["c"] 被标记为外部输入
$e = $_COOKIE["E"]; // 此处 $_COOKIE["E"] 被标记为外部输入
```
DESC
	rule_id: "83318452-912f-4761-9874-e3a10c4e8716"
	title_zh: "审计PHP自定义外部变量使用"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
[CWE-20](https://cwe.mitre.org/data/definitions/20.html)
REFERENCE
)
_POST.* as $param1
_GET.* as $param2
_REQUEST.* as $param3
_COOKIE.* as $param4


$param1 + $param2 + $param3 + $param4 + $extra as $output
alert $output for {
	level: "low",
	title: "Audit PHP Custom Extern Variable",
	title_zh: "审计PHP自定义外部变量使用",
}

desc(
	lang: php
	alert_min: '3'
	'file://param.php': <<<PARAM
<?php
    $a = $_POST["a"];
    $b = $_GET["b"];
    $c = $_REQUEST["c"];
    $e = $_COOKIE["E"];
PARAM
	"safefile://SafeInputHandling.php": <<<CODE
<?php
// 此文件不包含任何直接使用 $_POST, $_GET, $_REQUEST, $_COOKIE 的代码。
// 这是因为此规则的目标是审计这些变量的使用，而不是强制性要求使用或不使用。
// 因此，一个完全不触碰这些全局变量的代码示例是反向测试的最佳实践。

class SafeOperation {
    public function processData($data) {
        // 模拟对传入数据的安全处理，例如验证和过滤
        if (is_string($data) && !empty($data)) {
            return htmlspecialchars($data, ENT_QUOTES, 'UTF-8');
        } else {
            return "";
        }
    }
}

$obj = new SafeOperation();
$result = $obj->processData("some_static_data");
echo "Result: " . $result;
?>
CODE
	"safefile://NoGlobalVariableAccess.php": <<<CODE
<?php
// 这个例子展示了一个完全不访问 PHP 预定义全局变量（如 $_GET, $_POST 等）的代码库。
// 即使在函数或类方法中，也避免直接引用这些全局变量。

function process_static_value($value) {
    // 内部处理，不涉及外部输入
    return strtoupper($value);
}

class DataProcessor {
    private $internalData;

    public function __construct($data) {
        // 构造函数接收参数，而不是直接从全局变量获取
        $this->internalData = $data;
    }

    public function getProcessedData() {
        return md5($this->internalData);
    }
}

$staticValue = "hello world";
$processedStatic = process_static_value($staticValue);

$processor = new DataProcessor("secure data");
$processedObjectData = $processor->getProcessedData();

echo $processedStatic . "\n";
echo $processedObjectData . "\n";

?>
CODE
)
