desc(
	title: "Audit PHP XSS Methods"
	type: audit
	lib: 'php-xss-method'
	desc: <<<DESC
### 规则目的
该规则用于审计PHP代码中可能导致XSS（跨站脚本攻击）的安全漏洞。它通过识别直接输出用户输入的关键PHP函数（如`echo`、`print`等），定位未经验证/转义的数据输出点，防止攻击者注入恶意脚本窃取用户数据或劫持会话。

### 规则详细
1. **作为基础检测库**
   属于`php-xss-method`库规则（`lib`类型），需配合其他规则（如用户输入跟踪规则）共同检测XSS漏洞，提供核心函数识别能力。

2. **覆盖高危输出函数**
   检测以下10个PHP输出函数：
   `echo`, `print`, `print_r`, `exit`, `die`, `sprint`, `var_dump`, `var_export`, `show_source`, `highlight_file`。
DESC
	rule_id: "83111614-77e4-4376-996f-734c017a6e0a"
	title_zh: "审计PHP XSS相关方法"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用HTML实体编码
对所有用户可控的输出进行HTML实体编码，防止恶意脚本执行。
```php
// 修复代码示例
$userInput = htmlspecialchars($_GET['input'], ENT_QUOTES, 'UTF-8');
echo $userInput;
```

#### 2. 使用内容安全策略（CSP）
通过设置合理的CSP策略，限制页面中可以执行的脚本来源，降低XSS攻击风险。
```php
// 在HTTP头部设置CSP
header("Content-Security-Policy: default-src 'self'; script-src 'self'");
```

#### 3. 验证和过滤用户输入
对用户输入进行严格的验证和过滤，确保输入内容符合预期格式。
```php
// 示例：验证输入为合法的URL
if (!filter_var($userInput, FILTER_VALIDATE_URL)) {
    throw new InvalidArgumentException("Invalid URL");
}
```

#### 4. 使用模板引擎
使用模板引擎（如Twig、Smarty）自动处理输出内容的转义，减少手动编码错误。
```php
// Twig模板示例
{{ userInput|e('html') }}
```
SOLUTION
	reference: <<<REFERENCE
[PHP: 核心 PHP（或其他）扩展手册](https://www.php.net/manual/zh/funcref.php)
REFERENCE
)

/^(echo|print|print_r|exit|die|sprint|var_dump|var_export|show_source|highlight_file)$/ as $output

alert $output for {
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "info",
	title: "Audit PHP XSS Methods",
	title_zh: "审计PHP XSS相关方法",
}

desc(
	lang: php
	alert_min: 8
	'file://xss.php':<<<CODE
<?php
    echo(1);
    print(1);
    print_r(1);
    exit(1);
    die(1);
    sprint(1);
    var_dump(1);
    var_export(1);
CODE
	'safefile://safe.php':<<<CODE
<?php
    echox(1);
CODE
)
