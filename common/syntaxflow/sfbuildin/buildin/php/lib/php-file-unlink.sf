desc(
	title: "Detect PHP File Deletion Functions"
	type: audit
	lib: 'php-file-unlink'
	desc: <<<DESC
### 1.规则目的
该规则用于审计PHP代码中用于文件或目录删除的关键函数`unlink`和`rmdir`的使用情况。目的是识别出代码中所有调用这些函数的地方，以便人工审计其输入源是否经过充分的验证和过滤，防止因用户输入或外部不可信数据直接或间接影响删除路径，从而导致路径遍历、任意文件删除等安全问题，或因误用导致非预期的数据丢失。

### 2.规则详细
1. **作为基础检测库**
   属于`php-file-unlink`库规则（`lib`类型），需配合其他规则（如用户输入跟踪规则）共同检测潜在的文件操作漏洞，提供核心函数识别能力。

2. **覆盖关键文件/目录删除函数**
   检测以下两个PHP文件/目录删除函数：
   - `unlink()`: 用于删除文件。
   - `rmdir()`: 用于删除空目录。

3. **潜在风险**
   - **任意文件删除**: 如果删除路径受用户控制且未经严格过滤，攻击者可以删除敏感文件（如配置文件、日志文件）或系统文件，导致拒绝服务或进一步攻击。
   - **数据丢失**: 在业务逻辑中不当使用这些函数，可能导致用户数据、上传文件等被意外删除。
   - **路径遍历**: 结合路径遍历漏洞，攻击者可以删除应用根目录之外的文件。

### 示例代码
```php
<?php
    // 存在风险的代码示例：删除路径直接来自用户输入（未经验证）
    $user_supplied_path = $_GET['filepath'];
    if (!empty($user_supplied_path)) {
        // 潜在的任意文件删除风险
        @unlink($user_supplied_path);
        echo "尝试删除文件: " . htmlspecialchars($user_supplied_path) . "<br>";
    }

    // 存在风险的代码示例：删除目录路径来自用户输入（未经验证）
    $user_supplied_dir = $_POST['dirname'];
    if (!empty($user_supplied_dir)) {
        // 潜在的任意目录删除风险
        @rmdir($user_supplied_dir);
        echo "尝试删除目录: " . htmlspecialchars($user_supplied_dir) . "<br>";
    }

    // 安全的代码示例：删除固定路径的文件
    $fixed_file = '/path/to/temporary_file.log';
    if (file_exists($fixed_file)) {
        @unlink($fixed_file);
        echo "已删除临时文件: " . $fixed_file . "<br>";
    }
?>
```
DESC
	rule_id: "cdc4481e-2a74-4711-9eb6-cf4d2d1898c0"
	title_zh: "检测PHP文件删除函数"
	solution: <<<SOLUTION
### 安全建议

该规则属于审计规则，本身不涉及直接的漏洞检测，而是标记出可能存在风险的关键函数使用点。针对`unlink`和`rmdir`函数的使用，关键在于确保其操作的文件或目录路径是安全的，不受外部不可信输入的影响。主要的修复和预防措施包括：

1.  **避免将用户输入直接或间接用于文件或目录删除函数的路径参数**：
    - 如果需要根据用户输入进行文件操作，务必对输入进行**严格的白名单校验**，仅允许操作预定义或预期的文件/目录。
    - 绝不直接使用用户输入的路径字符串，防止路径遍历攻击。

2.  **限制文件操作的根目录 (Chroot)**：
    - 在可能的情况下，通过配置 (`open_basedir`) 或编程方式将PHP的文件操作限制在特定的安全目录内，阻止访问系统其他区域的文件。

3.  **权限控制**：
    - 确保运行PHP的系统用户只拥有执行必要文件操作所需的最低权限。不要使用高权限用户运行Web服务。
    - 在应用层面实现细粒度的权限控制，只有经过身份验证且授权的用户才能执行文件删除操作。

4.  **文件名和路径的验证与过滤**：
    - 使用安全的函数（如`basename()`）来处理文件名，剥离目录信息。
    - 对输入的路径进行规范化，去除相对路径和特殊字符。
    - 校验最终的文件路径是否位于允许操作的安全目录内。

5.  **使用唯一、难以猜测的文件名或目录名**：
    - 对于用户上传的文件或临时文件，使用随机生成或加密哈希作为文件名，降低被猜测或遍历删除的风险。

6.  **充分的错误处理和日志记录**：
    - 对文件删除操作进行错误检查，记录删除失败的事件。
    - 记录文件删除操作的详细信息，包括执行的用户、文件路径等，便于审计和追踪潜在的恶意行为。

7.  **备份机制**：
    - 建立完善的数据备份和恢复机制，即使发生意外删除，也能及时恢复数据。
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
)


/^(unlink|rmdir)$/ as $output

alert $output for {
	title: "Detect PHP File Deletion Functions",
	title_zh: "检测PHP文件删除函数",
	solution: <<<CODE
### 安全建议

该规则属于审计规则，本身不涉及直接的漏洞检测，而是标记出可能存在风险的关键函数使用点。针对`unlink`和`rmdir`函数的使用，关键在于确保其操作的文件或目录路径是安全的，不受外部不可信输入的影响。主要的修复和预防措施包括：

1.  **避免将用户输入直接或间接用于文件或目录删除函数的路径参数**：
    - 如果需要根据用户输入进行文件操作，务必对输入进行**严格的白名单校验**，仅允许操作预定义或预期的文件/目录。
    - 绝不直接使用用户输入的路径字符串，防止路径遍历攻击。

2.  **限制文件操作的根目录 (Chroot)**：
    - 在可能的情况下，通过配置 (`open_basedir`) 或编程方式将PHP的文件操作限制在特定的安全目录内，阻止访问系统其他区域的文件。

3.  **权限控制**：
    - 确保运行PHP的系统用户只拥有执行必要文件操作所需的最低权限。不要使用高权限用户运行Web服务。
    - 在应用层面实现细粒度的权限控制，只有经过身份验证且授权的用户才能执行文件删除操作。

4.  **文件名和路径的验证与过滤**：
    - 使用安全的函数（如`basename()`）来处理文件名，剥离目录信息。
    - 对输入的路径进行规范化，去除相对路径和特殊字符。
    - 校验最终的文件路径是否位于允许操作的安全目录内。

5.  **使用唯一、难以猜测的文件名或目录名**：
    - 对于用户上传的文件或临时文件，使用随机生成或加密哈希作为文件名，降低被猜测或遍历删除的风险。

6.  **充分的错误处理和日志记录**：
    - 对文件删除操作进行错误检查，记录删除失败的事件。
    - 记录文件删除操作的详细信息，包括执行的用户、文件路径等，便于审计和追踪潜在的恶意行为。

7.  **备份机制**：
    - 建立完善的数据备份和恢复机制，即使发生意外删除，也能及时恢复数据。
CODE
	desc: <<<CODE
### 1.规则目的
该规则用于审计PHP代码中用于文件或目录删除的关键函数`unlink`和`rmdir`的使用情况。目的是识别出代码中所有调用这些函数的地方，以便人工审计其输入源是否经过充分的验证和过滤，防止因用户输入或外部不可信数据直接或间接影响删除路径，从而导致路径遍历、任意文件删除等安全问题，或因误用导致非预期的数据丢失。

### 2.规则详细
1. **作为基础检测库**
   属于`php-file-unlink`库规则（`lib`类型），需配合其他规则（如用户输入跟踪规则）共同检测潜在的文件操作漏洞，提供核心函数识别能力。

2. **覆盖关键文件/目录删除函数**
   检测以下两个PHP文件/目录删除函数：
   - `unlink()`: 用于删除文件。
   - `rmdir()`: 用于删除空目录。

3. **潜在风险**
   - **任意文件删除**: 如果删除路径受用户控制且未经严格过滤，攻击者可以删除敏感文件（如配置文件、日志文件）或系统文件，导致拒绝服务或进一步攻击。
   - **数据丢失**: 在业务逻辑中不当使用这些函数，可能导致用户数据、上传文件等被意外删除。
   - **路径遍历**: 结合路径遍历漏洞，攻击者可以删除应用根目录之外的文件。

### 示例代码
```php
<?php
    // 存在风险的代码示例：删除路径直接来自用户输入（未经验证）
    $user_supplied_path = $_GET['filepath'];
    if (!empty($user_supplied_path)) {
        // 潜在的任意文件删除风险
        @unlink($user_supplied_path);
        echo "尝试删除文件: " . htmlspecialchars($user_supplied_path) . "<br>";
    }

    // 存在风险的代码示例：删除目录路径来自用户输入（未经验证）
    $user_supplied_dir = $_POST['dirname'];
    if (!empty($user_supplied_dir)) {
        // 潜在的任意目录删除风险
        @rmdir($user_supplied_dir);
        echo "尝试删除目录: " . htmlspecialchars($user_supplied_dir) . "<br>";
    }

    // 安全的代码示例：删除固定路径的文件
    $fixed_file = '/path/to/temporary_file.log';
    if (file_exists($fixed_file)) {
        @unlink($fixed_file);
        echo "已删除临时文件: " . $fixed_file . "<br>";
    }
?>
```
CODE
	level: "mid",
}

desc(
	lang: php
	alert_min: '2'
	'file://fileUnlink.php': <<<PARAM
<?php
    $file_path = 'path/to/file.txt';
    if (file_exists($file_path)) {
        @unlink($file_path);
        echo '文件删除成功';
    } else {
        echo '文件不存在';
    }
    $dir_path = 'path/to/directory';
    if (is_dir($dir_path)) {
        @rmdir($dir_path);
        echo '目录删除成功';
    } else {
        echo '目录不存在';
    }
PARAM
	'safefile://safe.php':<<<CODE
<?php
    unlinkx();
CODE
)
