desc(
	title: "Audit PHP File Write Methods"
	type: audit
	level: info
	lib: 'php-file-write'
	desc: <<<DESC
### 规则描述

#### 1. 规则目的
该规则用于审计PHP代码中文件写入功能的使用情况，主要关注 `fwrite` 和 `file_put_contents` 这两个核心函数。其目的是识别代码中可能存在的文件写入操作点，为后续的安全审计（如任意文件写入漏洞检测）提供基础数据。

#### 2. 规则详细
- **作为基础检测库**：属于 `php-file-write` 库规则 (`lib` 类型)，不直接报告漏洞，而是作为其他规则（如用户输入跟踪规则结合文件写入点）的辅助规则，用于精确定位潜在的危险 File Write 操作。
- **覆盖核心写入函数**：检测以下2个主要的PHP文件写入函数：
  - `fwrite()`: 用于向文件流写入数据。
  - `file_put_contents()`: 用于将字符串写入文件。

文件写入功能如果使用不当，可能导致任意文件写入漏洞。攻击者可以通过该漏洞向服务器写入恶意代码（如webshell）或篡改原有重要文件，进而控制服务器或执行恶意操作。因此，所有对文件写入函数的使用都需要进行严格的安全审计，确保：
- **文件路径可控性**：文件写入的目标路径是否可被用户输入控制。如果可控，攻击者可能指定任意路径进行写入（包括服务器配置文件、后端代码文件等）。
- **写入内容验证和清理**：写入文件的内容是否经过充分的验证和清理。如果未验证或清理，攻击者可能写入恶意代码。

此规则作为基础，帮助审计人员快速定位代码中的文件写入点，以便进一步分析是否符合安全规范，判断是否存在任意文件写入漏洞或其他相关的安全风险。

**潜在影响**：若基于此规则的审计进一步发现漏洞，可能导致：
- 服务器被植入后门或webshell，导致服务器完全失陷。
- 关键配置文件被恶意篡改，造成服务中断或安全配置失效。
- 敏感数据被篡改或覆盖。

因此，对文件写入函数的使用进行全面审计和严格的安全控制至关重要。
DESC
	rule_id: "7fd490e1-ce5a-42f0-8bf6-cb7c2f2cddce"
	reference: <<<REFERENCE
none
REFERENCE
	title_zh: "审计PHP文件写入方法"
	solution: <<<SOLUTION
### 修复建议\n\n#### 1. 使用安全的文件写入方法\n确保文件写入操作使用安全的API，并对文件路径和内容进行严格的验证和过滤。\n\n```php\n// 示例：安全写入文件\n$filePath = '/safe/path/' . basename($_POST['file_name']);\n$content = filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING);\nif (file_put_contents($filePath, $content) === false) {\n    throw new Exception('文件写入失败');\n}\n```\n\n#### 2. 验证文件路径\n确保文件路径不可被用户完全控制，避免路径穿越等安全问题。\n\n```php\n// 示例：验证文件路径\n$baseDir = '/safe/path/';\n$fileName = $_POST['file_name'];\nif (preg_match('/\.\./', $fileName)) {\n    throw new Exception('非法文件路径');\n}\n$filePath = $baseDir . $fileName;\n```\n\n#### 3. 清理和验证写入内容\n对写入文件的内容进行充分的验证和清理，防止恶意代码注入。\n\n```php\n// 示例：清理写入内容\n$content = $_POST['content'];\n$content = strip_tags($content); // 移除HTML标签\n$content = htmlspecialchars($content, ENT_QUOTES, 'UTF-8'); // 转义特殊字符\nif (file_put_contents($filePath, $content) === false) {\n    throw new Exception('文件写入失败');\n}\n```\n\n通过以上措施，可以有效防止任意文件写入漏洞的发生，保障系统的安全性。
SOLUTION
)


/^(fwrite|file_put_contents)$/ as $output
alert $output for {
	title: "Unvalidated PHP File Write",
	title_zh: "未验证的PHP文件写入",
	solution: <<<CODE
### 修复建议\n\n#### 1. 使用安全的文件写入方法\n确保文件写入操作使用安全的API，并对文件路径和内容进行严格的验证和过滤。\n\n```php\n// 示例：安全写入文件\n$filePath = '/safe/path/' . basename($_POST['file_name']);\n$content = filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING);\nif (file_put_contents($filePath, $content) === false) {\n    throw new Exception('文件写入失败');\n}\n```\n\n#### 2. 验证文件路径\n确保文件路径不可被用户完全控制，避免路径穿越等安全问题。\n\n```php\n// 示例：验证文件路径\n$baseDir = '/safe/path/';\n$fileName = $_POST['file_name'];\nif (preg_match('/\.\./', $fileName)) {\n    throw new Exception('非法文件路径');\n}\n$filePath = $baseDir . $fileName;\n```\n\n#### 3. 清理和验证写入内容\n对写入文件的内容进行充分的验证和清理，防止恶意代码注入。\n\n```php\n// 示例：清理写入内容\n$content = $_POST['content'];\n$content = strip_tags($content); // 移除HTML标签\n$content = htmlspecialchars($content, ENT_QUOTES, 'UTF-8'); // 转义特殊字符\nif (file_put_contents($filePath, $content) === false) {\n    throw new Exception('文件写入失败');\n}\n```\n\n通过以上措施，可以有效防止任意文件写入漏洞的发生，保障系统的安全性。
CODE
	desc: <<<CODE
### 漏洞描述

#### 1. 漏洞原理
由于应用程序未对文件写入操作进行严格的验证和控制，攻击者可能通过构造特殊输入控制文件写入路径和内容，导致任意文件写入漏洞。

#### 2. 触发场景
// 存在漏洞的代码示例
```php
$tpl_name = $_POST['tpl_name'];
$tpl_content = $_POST['tpl_content'];
$tpl = '/path/to/templates/' . $tpl_name;
file_put_contents($tpl, $tpl_content);
```
攻击者可以通过控制`$tpl_name`和`$tpl_content`，向服务器任意路径写入恶意文件。

#### 3. 潜在影响
- 服务器被植入后门或webshell，导致服务器完全失陷。
- 关键配置文件被恶意篡改，造成服务中断或安全配置失效。
- 敏感数据被篡改或覆盖。

通过严格的安全审计和控制文件写入操作，可以有效防止此类漏洞的发生。
CODE
	level: "info",
}

desc(
	lang: php
	alert_min: '2'
	'file://fileUnlink.php': <<<PARAM
<?php
$tpl_name = !empty($_POST['tpl_name']) ? trim($_POST['tpl_name']) : '';
 	$tpl_content = !empty($_POST['tpl_content']) ? deep_stripslashes($_POST['tpl_content']) : '';
 	if(empty($tpl_name)){
 		return false;
 	}
 	$tpl = BLUE_ROOT.'templates/default/'.$tpl_name;
 	if(!$handle = @fopen($tpl, 'wb')){
		showmsg("打开目标模版文件 $tpl 失败");
 	}
 	if(fwrite($handle, $tpl_content) === false){
 		showmsg('写入目标 $tpl 失败');
 	}
 	fclose($handle);
 	showmsg('编辑模板成功', 'tpl_manage.php');
 	file_put_contents("");
PARAM
)
