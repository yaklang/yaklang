desc(
	title: "Audit PHP File Write Methods"
	type: audit
	level: info
	lib: 'php-file-write'
	desc: <<<DESC
### 1.规则目的
该规则用于审计PHP代码中文件写入功能的使用情况，主要关注 `fwrite` 和 `file_put_contents` 这两个核心函数。其目的是识别代码中可能存在的文件写入操作点，为后续的安全审计（如任意文件写入漏洞检测）提供基础数据。

### 2.规则详细
1. **作为基础检测库**
   属于 `php-file-write` 库规则 (`lib` 类型)，不直接报告漏洞，而是作为其他规则（如用户输入跟踪规则结合文件写入点）的辅助规则，用于精确定位潜在的危险 File Write 操作。

2. **覆盖核心写入函数**
   检测以下2个主要的PHP文件写入函数：
   - `fwrite()`: 用于向文件流写入数据。
   - `file_put_contents()`: 用于将字符串写入文件。

文件写入功能如果使用不当，可能导致任意文件写入漏洞。攻击者可以通过该漏洞向服务器写入恶意代码（如webshell）或篡改原有重要文件，进而控制服务器或执行恶意操作。因此，所有对文件写入函数的使用都需要进行严格的安全审计，确保：

   - **文件路径可控性**：文件写入的目标路径是否可被用户输入控制。如果可控，攻击者可能指定任意路径进行写入（包括服务器配置文件、后端代码文件等）。
   - **写入内容验证和清理**：写入文件的内容是否经过充分的验证和清理。如果未验证或清理，攻击者可能写入恶意代码。

此规则作为基础，帮助审计人员快速定位代码中的文件写入点，以便进一步分析是否符合安全规范，判断是否存在任意文件写入漏洞或其他相关的安全风险。

**潜在影响**：若基于此规则的审计进一步发现漏洞，可能导致：

   - 服务器被植入后门或webshell，导致服务器完全失陷。
   - 关键配置文件被恶意篡改，造成服务中断或安全配置失效。
   - 敏感数据被篡改或覆盖。

因此，对文件写入函数的使用进行全面审计和严格的安全控制至关重要。
DESC
	rule_id: "7fd490e1-ce5a-42f0-8bf6-cb7c2f2cddce"
	reference: <<<REFERENCE
none
REFERENCE
	title_zh: "审计PHP文件写入方法"
	solution: <<<SOLUTION
none
SOLUTION
)


/^(fwrite|file_put_contents)$/ as $output
alert $output

desc(
	lang: php
	alert_min: '2'
	'file://fileUnlink.php': <<<PARAM
<?php
$tpl_name = !empty($_POST['tpl_name']) ? trim($_POST['tpl_name']) : '';
 	$tpl_content = !empty($_POST['tpl_content']) ? deep_stripslashes($_POST['tpl_content']) : '';
 	if(empty($tpl_name)){
 		return false;
 	}
 	$tpl = BLUE_ROOT.'templates/default/'.$tpl_name;
 	if(!$handle = @fopen($tpl, 'wb')){
		showmsg("打开目标模版文件 $tpl 失败");
 	}
 	if(fwrite($handle, $tpl_content) === false){
 		showmsg('写入目标 $tpl 失败');
 	}
 	fclose($handle);
 	showmsg('编辑模板成功', 'tpl_manage.php');
 	file_put_contents("");
PARAM
)
