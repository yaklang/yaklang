desc(
	title: "Unsafe File Upload in Controller Component"
	title_zh: "文件上传漏洞",
	type: vul
	desc: <<<CODE
       文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果.
CODE
	rule_id: "7138efeb-bd0b-4dd1-a728-a5d84c3bfa61"
)
<include('php-filter-function')> as $filter

<include('php-param')> as $params;
<include('php-tp-all-extern-variable-param-source')> as $params
<include('php-file-write')> as $source
_FILES.* as $params
_FILES as $params


move_uploaded_file(* as $source)
./move|putFile/?{<getFunc><getCurrentBlueprint><fullTypeName>?{any: "Controller","controller"}} as $source

$source?{<self> #{include: <<<CODE
* & $params
CODE}->} as $sink


$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode: call} as $__next__
CODE)> as $high

alert $high for {
    title: "Unsafe File Upload Without Validation",
    title_zh: "未经验证的高危文件上传",
    level: "high"
}

$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode:call && <self><getCallee> & $filter} as $__next__
CODE)> as $highAndMid

$highAndMid - $high as $mid
alert $mid for {
    title: "Insecure File Type Detection",
    title_zh: "不安全的文件类型检测",
    level: "mid"
}

$sink - $high - $mid as $low

alert $low for {
    title: "Potential File Storage Path Misconfiguration",
    title_zh: "潜在的文件存储路径配置问题",
    level: "low"
}
desc(
	lang: "php"
	alert_min: 1
	"file:///upload.php": <<<TEXT
<?php
    class UploadController {
        public function uploadFile() {
            $file = $_FILES['file'];
            $uploadDir = 'public/uploads/';  // 直接存储在Web可访问目录

            // 不安全的文件类型检测（仅依赖客户端MIME类型）
            if ($file['type'] === 'image/jpeg') {
                $targetPath = $uploadDir . $file['name'];
                move_uploaded_file($file['tmp_name'], $targetPath); // 直接使用原始文件名
                echo "文件上传成功！";
            }
        }
    }
TEXT
	"file:///upload2.php": <<<TEXT
<?php
    class uploads{
        public function upload(){
            $path = $_GET["path"];
            $file = $_GET["file"];
            validate($validate)->check(DataHelper::objToArray($file));
            $savename = \think\facade\Filesystem::disk('public')->putFile($path, $file);
        }
    }
TEXT
)
