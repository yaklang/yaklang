desc(
	title: "Check PHP Command Injection Vulnerability"
	title_zh: "检测PHP命令注入漏洞"
	type: audit
	level: mid
	risk:'rce'
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
命令注入（Command Injection）漏洞发生在应用程序将用户可控数据作为命令的一部分执行时，且未对数据进行充分过滤或转义。攻击者可以注入恶意命令，并通过应用程序的权限在服务器上执行，这可能导致敏感信息泄露、系统文件被修改甚至服务器被完全控制。

2. **触发场景**
该漏洞通常发生在当PHP脚本使用`system()`、`exec()`、`shell_exec()`、`` ` `` (反引号)等函数执行外部命令，并将用户输入直接或间接拼接到命令字符串中，而未对用户输入进行安全过滤或参数化。
例如，以下代码就存在明显的命令注入漏洞：

```php
<?php
$filename = $_GET['file'];
// 用户可以通过构造 filename 参数来执行任意命令
system("cat " . $filename);
?>
```
攻击者可以输入 `?file=test.txt; id`，使得最终执行的命令变为 `cat test.txt; id`，从而在服务器上执行 `id` 命令。

3. **潜在影响**
- **任意命令执行：** 攻击者可以在服务器上执行任何具有应用程序权限的系统命令。
- **数据泄露：** 攻击者可以读取、复制或删除服务器上的任意文件，包括敏感配置文件和数据库凭据。
- **服务器控制：** 通过执行提权命令、安装后门或创建新的系统用户，攻击者可能完全控制受影响的服务器。
- **拒绝服务：** 攻击者可以执行例如 `fork bomb` 等命令导致服务器资源耗尽，造成拒绝服务。
DESC
	rule_id: "0528aab2-8f17-40d9-a58a-fb83a632d377"
	solution: <<<SOLUTION
### 修复建议

#### 1. 避免执行外部命令
除非绝对必要，应尽量避免在应用程序中执行外部系统命令。许多常用的功能可以通过内置的PHP函数或库来实现，这样可以大大降低命令注入的风险。

#### 2. 使用安全的函数，如 `escapeshellarg()` 和 `escapeshellcmd()`
如果确实需要执行外部命令，应该使用PHP提供的安全函数来处理用户输入。`escapeshellarg()` 用于转义单个参数，确保参数被当作一个整体传递给命令；`escapeshellcmd()` 用于转义整个命令字符串，防止攻击者注入额外的命令或参数。

```php
<?php
$filename = $_GET['file'];
// 使用 escapeshellarg() 转义用户输入
$escapedFilename = escapeshellarg($filename);
system("cat " . $escapedFilename);
?>
```
请注意，`escapeshellcmd()` 函数虽然可以转义命令字符串，但并不能防止所有形式的命令注入，例如允许通过管道符 (`|`) 或重定向符 (`>`) 注入的攻击。因此，最好结合使用 `escapeshellarg()`。

#### 3. 使用白名单机制
如果需要执行的命令是固定的集合，可以采用白名单机制，只允许执行预定义的合法命令，并对参数进行严格验证。

#### 4. 限制命令执行权限
在操作系统层面，为运行PHP应用程序的用户配置最小权限，限制其可以执行的命令范围。

#### 5. 输入验证和过滤
对所有用户输入进行严格的输入验证和过滤，移除或转义所有可能导致命令注入的特殊字符，例如分号 (`;`)、管道符 (`|`)、与号 (`&`)、反引号 (` `) 等。
SOLUTION
	reference: <<<REFERENCE
[CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')](https://cwe.mitre.org/data/definitions/78.html)
REFERENCE
)
<include('php-os-exec')>(* as $sinkParams);
<include('php-param')> as $params;
<include('php-tp-all-extern-variable-param-source')> as $params
<include('php-filter-function')> as $filter;

$sinkParams?{<self> #{
include: <<<CODE
* & $params
CODE
}->} as $sink

$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
<self>?{opcode: call} as $__next__
CODE)> as $high

alert $high	for {
	title: "Unfiltered PHP Command Execution",
	title_zh: "PHP未过滤命令执行",
	solution: <<<CODE
### 修复建议

#### 1. 避免执行外部命令
除非绝对必要，应尽量避免在应用程序中执行外部系统命令。许多常用的功能可以通过内置的PHP函数或库来实现，这样可以大大降低命令注入的风险。

#### 2. 使用安全的函数，如 `escapeshellarg()` 和 `escapeshellcmd()`
如果确实需要执行外部命令，应该使用PHP提供的安全函数来处理用户输入。`escapeshellarg()` 用于转义单个参数，确保参数被当作一个整体传递给命令；`escapeshellcmd()` 用于转义整个命令字符串，防止攻击者注入额外的命令或参数。

```php
<?php
$filename = $_GET['file'];
// 使用 escapeshellarg() 转义用户输入
$escapedFilename = escapeshellarg($filename);
system("cat " . $escapedFilename);
?>
```
请注意，`escapeshellcmd()` 函数虽然可以转义命令字符串，但并不能防止所有形式的命令注入，例如允许通过管道符 (`|`) 或重定向符 (`>`) 注入的攻击。因此，最好结合使用 `escapeshellarg()`。

#### 3. 使用白名单机制
如果需要执行的命令是固定的集合，可以采用白名单机制，只允许执行预定义的合法命令，并对参数进行严格验证。

#### 4. 限制命令执行权限
在操作系统层面，为运行PHP应用程序的用户配置最小权限，限制其可以执行的命令范围。

#### 5. 输入验证和过滤
对所有用户输入进行严格的输入验证和过滤，移除或转义所有可能导致命令注入的特殊字符，例如分号 (`;`)、管道符 (`|`)、与号 (`&`)、反引号 (` `) 等。
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
命令注入（Command Injection）漏洞发生在应用程序将用户可控数据作为命令的一部分执行时，且未对数据进行充分过滤或转义。攻击者可以注入恶意命令，并通过应用程序的权限在服务器上执行，这可能导致敏感信息泄露、系统文件被修改甚至服务器被完全控制。

2. **触发场景**
该漏洞通常发生在当PHP脚本使用`system()`, `exec()`, `shell_exec()`, `` ` `` (反引号)等函数执行外部命令，并将用户输入直接或间接拼接到命令字符串中，而未对用户输入进行安全过滤或参数化。
例如，以下代码就存在明显的命令注入漏洞：

```php
<?php
$filename = $_GET['file'];
// 用户可以通过构造 filename 参数来执行任意命令
system("cat " . $filename);
?>
```
攻击者可以输入 `?file=test.txt; id`，使得最终执行的命令变为 `cat test.txt; id`，从而在服务器上执行 `id` 命令。

3. **潜在影响**
- **任意命令执行：** 攻击者可以在服务器上执行任何具有应用程序权限的系统命令。
- **数据泄露：** 攻击者可以读取、复制或删除服务器上的任意文件，包括敏感配置文件和数据库凭据。
- **服务器控制：** 通过执行提权命令、安装后门或创建新的系统用户，攻击者可能完全控制受影响的服务器。
- **拒绝服务：** 攻击者可以执行例如 `fork bomb` 等命令导致服务器资源耗尽，造成拒绝服务。
CODE
	level: "high",
	type: "vuln",
}
$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
<self>?{opcode: call && <self><getCallee> & $filter} as $__next__
CODE)> as $highAndMid

$highAndMid - $high as $mid

alert $mid	for {
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
命令注入（Command Injection）漏洞发生在应用程序将用户可控数据作为命令的一部分执行时，且未对数据进行充分过滤或转义。攻击者可以注入恶意命令，并通过应用程序的权限在服务器上执行，这可能导致敏感信息泄露、系统文件被修改甚至服务器被完全控制。

2. **触发场景**
该漏洞通常发生在当PHP脚本使用`system()`, `exec()`, `shell_exec()`, `` ` `` (反引号)等函数执行外部命令，并将用户输入直接或间接拼接到命令字符串中，而未对用户输入进行安全过滤或参数化。
例如，以下代码就存在明显的命令注入漏洞：

```php
<?php
$filename = $_GET['file'];
// 用户可以通过构造 filename 参数来执行任意命令
system("cat " . $filename);
?>
```
攻击者可以输入 `?file=test.txt; id`，使得最终执行的命令变为 `cat test.txt; id`，从而在服务器上执行 `id` 命令。

3. **潜在影响**
- **任意命令执行：** 攻击者可以在服务器上执行任何具有应用程序权限的系统命令。
- **数据泄露：** 攻击者可以读取、复制或删除服务器上的任意文件，包括敏感配置文件和数据库凭据。
- **服务器控制：** 通过执行提权命令、安装后门或创建新的系统用户，攻击者可能完全控制受影响的服务器。
- **拒绝服务：** 攻击者可以执行例如 `fork bomb` 等命令导致服务器资源耗尽，造成拒绝服务。
CODE
	level: "mid",
	type: "vuln",
	title: "Partially Filtered PHP Command Execution",
	title_zh: "PHP部分过滤命令执行",
	solution: <<<CODE
### 修复建议

#### 1. 避免执行外部命令
除非绝对必要，应尽量避免在应用程序中执行外部系统命令。许多常用的功能可以通过内置的PHP函数或库来实现，这样可以大大降低命令注入的风险。

#### 2. 使用安全的函数，如 `escapeshellarg()` 和 `escapeshellcmd()`
如果确实需要执行外部命令，应该使用PHP提供的安全函数来处理用户输入。`escapeshellarg()` 用于转义单个参数，确保参数被当作一个整体传递给命令；`escapeshellcmd()` 用于转义整个命令字符串，防止攻击者注入额外的命令或参数。

```php
<?php
$filename = $_GET['file'];
// 使用 escapeshellarg() 转义用户输入
$escapedFilename = escapeshellarg($filename);
system("cat " . $escapedFilename);
?>
```
请注意，`escapeshellcmd()` 函数虽然可以转义命令字符串，但并不能防止所有形式的命令注入，例如允许通过管道符 (`|`) 或重定向符 (`>`) 注入的攻击。因此，最好结合使用 `escapeshellarg()`。

#### 3. 使用白名单机制
如果需要执行的命令是固定的集合，可以采用白名单机制，只允许执行预定义的合法命令，并对参数进行严格验证。

#### 4. 限制命令执行权限
在操作系统层面，为运行PHP应用程序的用户配置最小权限，限制其可以执行的命令范围。

#### 5. 输入验证和过滤
对所有用户输入进行严格的输入验证和过滤，移除或转义所有可能导致命令注入的特殊字符，例如分号 (`;`)、管道符 (`|`)、与号 (`&`)、反引号 (` `) 等。
CODE
}
$sink - $mid - $high as $low

alert $low	for {
	title: "Filtered PHP Command Execution",
	title_zh: "PHP过滤命令执行",
	desc: <<<CODE
### 规则目的
该规则用于检查PHP代码中是否存在命令注入漏洞，但已针对用户输入进行了过滤。它通过识别经过一定过滤的用户输入并分析其是否仍然存在风险，帮助开发人员进一步确认程序的安全性。

### 规则详细
1. **覆盖高危命令执行函数**
检测以下PHP命令执行函数：
`system`, `exec`, `shell_exec`, `` ` `` (反引号)。

2. **过滤逻辑分析**
仅分析那些已包含过滤机制的代码路径，判断过滤逻辑是否足够有效，以防止命令注入漏洞。
CODE
	level: "low",
	type: "info",
}
desc(
	lang: 'php'
	alert_min: 3
	alert_low: 1
	alert_mid: 1
	alert_high: 1
	'file://test.php': <<<CODE
<?php
    $a = $_GET[1];
    system($a); //high

    $b = undefined($a);
    system($b);

    $c = filter($a);
    system($c); //low

CODE
)
