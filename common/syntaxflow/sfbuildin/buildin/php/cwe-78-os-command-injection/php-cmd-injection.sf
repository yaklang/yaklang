desc(
	title: "PHP Filtered Path Command Injection"
	title_zh: "命令注入",
	type: audit
	level: mid
	risk:'rce'
	desc: <<<TEXT
    在PHP代码中，如果用户输入的命令没有经过充分的过滤，可能会导致命令注入漏洞。攻击者可以通过构造恶意输入，执行系统命令，进而控制服务器。为了防止命令注入漏洞，需要对用户输入的命令进行严格的过滤，包括验证命令的合法性、长度、字符等，并尽量避免直接执行用户输入的命令。
TEXT
	rule_id: "0528aab2-8f17-40d9-a58a-fb83a632d377"
)
<include('php-os-exec')>(* as $sink);
<include('php-param')> as $params;
<include('php-tp-all-extern-variable-param-source')> as $params
<include('php-filter-function')> as $filter;

check $sink;

$sink #{
    include: `<self> & $params`,
    exclude: `<self>?{opcode: call}`
}-> as $high

check $high
alert $high for{
    title_zh: '检测到命令执行，且没有经过任何函数',
    type: 'vuln',
    level: 'high'
}

$sink#{
    include: `<self> & $params`,
    include: `<self>?{opcode: call && !<self><getCallee> & $filter}`
}-> as $middle

alert $middle for{
    title_zh: '检测到命令执行，经过函数过滤，但未检出过滤函数',
    type: 'vuln',
    level: 'mid'
}

$sink #{
include: `<self> & $params`,
include: `<self>?{opcode: call && <self><getCallee> & $filter}`
       }-> as $low
alert $low for{
    title_zh: '检测到命令执行，但是经过函数过滤',
    type:   'info',
    level: 'low'
}

desc(
	lang: 'php'
	alert_min: 3
	alert_low: 1
	alert_mid: 1
	alert_high: 1
	'file://test.php': <<<CODE
<?php
    $a = $_GET[1];
    system($a); //high

    $b = undefined($a);
    system($b);

    $c = filter($a);
    system($c); //low

CODE
)
