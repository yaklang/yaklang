desc(
    title: "Server-Side Request Forgery (SSRF)",
    title_zh: "SSRF漏洞，旨在获取内部服务信息或数据, 通过未经过滤的URL参数，攻击者可以探测内部服务或获取敏感数据",
    type: vul,
    risk: "ssrf",
    desc: <<<TEXT
检测到网络请求函数（curl_setopt/fsockopen/file_get_contents等）的参数未经过充分过滤验证。当参数包含未经验证的用户输入时，可能引发SSRF攻击导致内部服务探测或数据泄露。建议对URL参数进行协议白名单校验和域名限制。
TEXT
	rule_id: "61cd3ee5-20d0-4457-8e5f-f442e36296f6"
)

/^curl_init|curl_setopt|curl_exec|curl_close|fsockopen|file_get_contents|fopen$/ as $curlFunction;

check $curlFunction;
alert $curlFunction for{
    title: "ssrf function detected, please pay attention",
    title_zh: "检测到为ssrf函数，请注意关注",
    level: "info",
}

/$curl_setopt|fsockopen|file_get_contents^/as $ssrfFunction

<include('php-param')> as $params;
<include('php-tp-all-extern-variable-param-source')> as $params

$ssrfFunction(* as $allParams)
$allParams?{<self> #{include: <<<CODE
* & $params
CODE}->} as $sink

$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode: call} as $__next__
CODE)> as $high

alert $high for {
       title: 'Unvalidated SSRF Parameter Injection',
       title_zh: 'SSRF未验证参数注入风险',
       level: 'high',
}

$all<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode: call && <self><getCallee> & $filter} as $__next__
CODE)> as $highAndMid

$highAndMid - $high as $mid

alert $mid for {
    title: 'Insufficient SSRF Parameter Filtering',
    title_zh: 'SSRF参数过滤不充分',
    level: 'mid',
}

$sink - $high - $mid  as $low
alert $low for {
    title: 'Potential SSRF Access Control Bypass',
    title_zh: 'SSRF访问控制潜在绕过风险',
    level: 'low',
}

desc(
	lang: "php"
	alert_min: 2
	"file:///curl.php": <<<TEXT
<?php
function curl($url){
    $ch = curl_init();
    curl_setopt($ch,CURLOPT_URL,$url);
    #curl_setopt($ch,CUPLOPT_HEADER,1);
    curl_exec($ch);
    curl_close($ch);
}
$url = $_GET['url'];
curl($url);
?>
TEXT
	"file:///fsockopen.php": <<<TEXT
   <?php
   $host=$_GET['url'];
   $fp = fsockopen("$host", 80, $errno, $errstr, 30);
   if (!$fp) {
       echo "$errstr ($errno)<br />\n";
   } else {
       $out = "GET / HTTP/1.1\r\n";
       $out .= "Host: $host\r\n";
       $out .= "Connection: Close\r\n\r\n";
       fwrite($fp, $out);
       while (!feof($fp)) {
           echo fgets($fp, 128);
       }
       fclose($fp);
   }?>
TEXT
)