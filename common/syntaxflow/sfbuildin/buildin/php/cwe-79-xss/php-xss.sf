desc(
	title: "Check PHP XSS Vulnerability"
	title_zh: "检测PHP跨站脚本漏洞"
	risk:'xss'
	type: vul
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   跨站脚本攻击（XSS）是一种常见的安全漏洞，攻击者可以在受害者的浏览器中执行恶意脚本。当PHP应用程序直接将用户输入的数据输出到网页上，而没有进行适当的过滤或转义时，攻击者可以注入恶意脚本。这些脚本可以在受害者的浏览器中执行，窃取用户的敏感信息（如会话令牌、密码等），或者执行其他恶意操作，例如修改页面内容、篡改数据，甚至在某些情况下，重定向用户到恶意网站。

2. **触发场景**
   此漏洞通常发生在应用程序获取用户输入（例如通过`$_GET`、`$_POST`、`$_COOKIE`、`$_REQUEST`等超全局变量）后，直接或间接将输入内容作为HTML的一部分输出到浏览器，并且没有进行充分的安全处理（如HTML实体编码）。

   **存在漏洞的代码示例**
   ```php
   <?php
   echo "您的输入是：" . $_GET['data']; // 直接输出用户输入的$_GET['data']
   ?>
   ```
   攻击者可以通过构造类似 `?data=<script>alert('XSS')</script>` 的URL来触发此漏洞，在用户的浏览器中弹出一个警告框。更恶意的脚本可以用于窃取Cookie、会话信息，甚至利用其他客户端漏洞。

3. **潜在影响**
   - **窃取用户敏感信息**: 攻击者可以获取会话Cookie，进而劫持用户会话。
   - **网页内容篡改**: 攻击者可以改变网页的显示内容，误导用户。
   - **传播恶意软件**: 攻击者可能利用XSS漏洞重定向用户到恶意网站，下载恶意软件。
   - **钓鱼攻击**: 结合社会工程学手段，攻击者可以制作逼真的登录页面窃取用户凭证。
   - **客户端侧攻击**: 攻击者可以利用浏览器或其他客户端软件的漏洞。

DESC
	rule_id: "d54faf3f-f4a3-4d19-a882-c29abf9b7901"
	solution: <<<SOLUTION
### 修复建议

#### 1. 对用户输入进行适当的转义或编码
在将用户输入输出到HTML页面之前，必须对其进行适当的转义或编码，以防止浏览器将恶意脚本作为可执行代码解析。PHP提供了多种函数用于此目的。

   - **使用 `htmlspecialchars()`**: 这是防止反射型XSS的常用函数，将特殊字符转换为HTML实体。
     ```php
     <?php
     echo "您的输入是：" . htmlspecialchars($_GET['data'], ENT_QUOTES, 'UTF-8');
     ?>
     ```
     `ENT_QUOTES` 参数确保同时编码单引号和双引号，'UTF-8' 指定字符集。

   - **使用 `htmlentities()`**: 与 `htmlspecialchars()` 类似，但会转换所有具有HTML实体对应的字符。
     ```php
     <?php
     echo "您的输入是：" . htmlentities($_GET['data'], ENT_QUOTES, 'UTF-8');
     ?>
     ```

   - **针对不同上下文进行编码**: HTML实体编码适用于在HTML内容中输出变量，如果要在JavaScript代码中输出变量，需要使用JavaScript编码；如果要在URL中输出变量，需要进行URL编码。避免简单地使用一个函数进行编码，需要根据输出的上下文选择合适的编码方式。

#### 2. 使用成熟的模板引擎
许多现代的PHP模板引擎（如Twig、Blade等）内置了自动转义功能。使用这些模板引擎可以大大降低XSS的风险，它们通常会默认对输出的变量进行安全处理。

#### 3. 实施输入验证和过滤
虽然转义是必须的，但对用户输入进行验证和过滤也是重要的防御措施。根据预期的数据类型和格式，拒绝不合法或包含潜在恶意内容的输入。例如，如果预期输入是一个数字，就应该验证它是否确实是数字，而不是字符串。

#### 4. 设置HTTP响应头
   - **Content-Security-Policy (CSP)**: CSP 允许您定义浏览器可以加载哪些资源的策略（例如，只允许从特定域名加载脚本）。这可以有效地阻止大多数XSS攻击。
   - **X-XSS-Protection**: 虽然已被CSP取代，但在旧版浏览器中仍有作用。可以设置为 `1; mode=block` 来启用浏览器内置的XSS过滤器。

#### 5. 小心处理富文本输入
如果允许用户输入富文本（如HTML内容），简单的转义可能不够。应该使用成熟的白名单过滤库（如OWASP AntiSamy、HTML Purifier）来清理用户输入的HTML，只允许安全的标签和属性。
SOLUTION
	reference: <<<REFERENCE
[CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)
REFERENCE
)

<include('php-param')> as $extraValue;
<include('php-tp-all-extern-variable-param-source')> as $extraValue
<include('php-xss-method')> as $method;
<include('php-filter-function')> as $function;

$method(* as $param);

$param?{<self> #{include: <<<CODE
* & $extraValue
CODE}->} as $sink

$sink<dataflow(include=<<<CODE
* & $extraValue as $__next__
CODE,exclude=<<<CODE
*?{opcode: call} as $__next__
CODE)> as $high

alert $high	for {
	level: "high",
	type: "vuln",
	title: "Detect PHP Direct Input XSS Vulnerability",
	title_zh: "检测PHP直接输入XSS漏洞",
	solution: <<<CODE
### 修复建议

#### 1. 对用户输入进行适当的转义或编码
在将用户输入输出到HTML页面之前，必须对其进行适当的转义或编码，以防止浏览器将恶意脚本作为可执行代码解析。PHP提供了多种函数用于此目的。

   - **使用 `htmlspecialchars()`**: 这是防止反射型XSS的常用函数，将特殊字符转换为HTML实体。
     ```php
     <?php
     echo "您的输入是：" . htmlspecialchars($_GET['data'], ENT_QUOTES, 'UTF-8');
     ?>
     ```
     `ENT_QUOTES` 参数确保同时编码单引号和双引号，'UTF-8' 指定字符集。

   - **使用 `htmlentities()`**: 与 `htmlspecialchars()` 类似，但会转换所有具有HTML实体对应的字符。
     ```php
     <?php
     echo "您的输入是：" . htmlentities($_GET['data'], ENT_QUOTES, 'UTF-8');
     ?>
     ```

   - **针对不同上下文进行编码**: HTML实体编码适用于在HTML内容中输出变量，如果要在JavaScript代码中输出变量，需要使用JavaScript编码；如果要在URL中输出变量，需要进行URL编码。避免简单地使用一个函数进行编码，需要根据输出的上下文选择合适的编码方式。

#### 2. 使用成熟的模板引擎
许多现代的PHP模板引擎（如Twig、Blade等）内置了自动转义功能。使用这些模板引擎可以大大降低XSS的风险，它们通常会默认对输出的变量进行安全处理。

#### 3. 实施输入验证和过滤
虽然转义是必须的，但对用户输入进行验证和过滤也是重要的防御措施。根据预期的数据类型和格式，拒绝不合法或包含潜在恶意内容的输入。例如，如果预期输入是一个数字，就应该验证它是否确实是数字，而不是字符串。

#### 4. 设置HTTP响应头
   - **Content-Security-Policy (CSP)**: CSP 允许您定义浏览器可以加载哪些资源的策略（例如，只允许从特定域名加载脚本）。这可以有效地阻止大多数XSS攻击。
   - **X-XSS-Protection**: 虽然已被CSP取代，但在旧版浏览器中仍有作用。可以设置为 `1; mode=block` 来启用浏览器内置的XSS过滤器。

#### 5. 小心处理富文本输入
如果允许用户输入富文本（如HTML内容），简单的转义可能不够。应该使用成熟的白名单过滤库（如OWASP AntiSamy、HTML Purifier）来清理用户输入的HTML，只允许安全的标签和属性。
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   跨站脚本攻击（XSS）是一种常见的安全漏洞，攻击者可以在受害者的浏览器中执行恶意脚本。当PHP应用程序直接将用户输入的数据输出到网页上，而没有进行适当的过滤或转义时，攻击者可以注入恶意脚本。这些脚本可以在受害者的浏览器中执行，窃取用户的敏感信息（如会话令牌、密码等），或者执行其他恶意操作，例如修改页面内容、篡改数据，甚至在某些情况下，重定向用户到恶意网站。

2. **触发场景**
   此漏洞通常发生在应用程序获取用户输入（例如通过`$_GET`、`$_POST`、`$_COOKIE`、`$_REQUEST`等超全局变量）后，直接或间接将输入内容作为HTML的一部分输出到浏览器，并且没有进行充分的安全处理（如HTML实体编码）。

   **存在漏洞的代码示例**
   ```php
   <?php
   echo "您的输入是：" . $_GET['data']; // 直接输出用户输入的$_GET['data']
   ?>
   ```
   攻击者可以通过构造类似 `?data=<script>alert('XSS')</script>` 的URL来触发此漏洞，在用户的浏览器中弹出一个警告框。更恶意的脚本可以用于窃取Cookie、会话信息，甚至利用其他客户端漏洞。

3. **潜在影响**
   - **窃取用户敏感信息**: 攻击者可以获取会话Cookie，进而劫持用户会话。
   - **网页内容篡改**: 攻击者可以改变网页的显示内容，误导用户。
   - **传播恶意软件**: 攻击者可能利用XSS漏洞重定向用户到恶意网站，下载恶意软件。
   - **钓鱼攻击**: 结合社会工程学手段，攻击者可以制作逼真的登录页面窃取用户凭证。
   - **客户端侧攻击**: 攻击者可以利用浏览器或其他客户端软件的漏洞。
CODE
}
$sink<dataflow(include=<<<CODE
* & $extraValue as $__next__
CODE,exclude=<<<CODE
<self>?{opcode: call && <self><getCallee> & $function} as $__next__
CODE)> as $highAndMid

$highAndMid - $high as $middle

alert $middle	for {
	desc: <<<CODE
### 风险描述

1. **风险原理**
   当PHP应用程序处理用户输入后未进行适当过滤时，仍可能导致XSS漏洞。

2. **触发场景**
   如果输入经过部分处理但仍保留恶意代码片段，攻击者仍可能注入恶意脚本。

3. **潜在影响**
   - 窃取用户敏感信息。
   - 修改网页内容。
   - 传播恶意软件或发起钓鱼攻击。
CODE
	level: "mid",
	type: "mid",
	title: "Detect PHP Unfiltered Function Processed XSS Vulnerability",
	title_zh: "检测PHP函数处理后未过滤XSS漏洞",
	solution: <<<CODE
### 修复建议

#### 1. 对用户输入进行适当的转义或编码
在将用户输入输出到HTML页面之前，必须对其进行适当的转义或编码，以防止浏览器将恶意脚本作为可执行代码解析。

   - **使用 `htmlspecialchars()`**: 将特殊字符转换为HTML实体。
     ```php
     <?php
     echo "您的输入是：" . htmlspecialchars($_GET['data'], ENT_QUOTES, 'UTF-8');
     ?>
     ```

   - **使用 `htmlentities()`**: 与 `htmlspecialchars()` 类似，但会转换所有具有HTML实体对应的字符。
     ```php
     <?php
     echo "您的输入是：" . htmlentities($_GET['data'], ENT_QUOTES, 'UTF-8');
     ?>
     ```

#### 2. 设置HTTP响应头
   - **Content-Security-Policy (CSP)**: 定义浏览器可以加载哪些资源的策略。
   - **X-XSS-Protection**: 启用浏览器内置的XSS过滤器。

#### 3. 小心处理富文本输入
如果允许用户输入富文本，应使用白名单过滤库清理输入。
CODE
}

$sink - $high - $middle as $low

alert $low	for {
	desc: <<<CODE
### 规则目的
该规则用于审计PHP代码中已使用过滤函数处理过的用户输入，但仍可能存在未被完全过滤的风险。

### 规则详细
1. **覆盖已过滤的输入情况**
   - 检测经过过滤函数处理但仍可能引发XSS风险的场景。
   - 确保过滤函数无逻辑缺陷并有效阻止恶意输入。
CODE
	level: "low",
	type: "low",
	title: "Audit PHP Filtered Function Processed XSS Vulnerability",
	title_zh: "审计PHP过滤函数处理后XSS漏洞",
}


desc(
	language: php
	alert_min: 3
	alert_low: 1
	alert_mid: 1
	alert_high:1
	'file://high.php': <<<CODE
<?php
echo "您的输入是：" . $_POST['data'];
?>
CODE
	'file://mid.php':  <<<CODE
<?php
   echo "您的输入是：" . undefined($_POST['data']);
CODE
	'file://low.php':<<<CODE
<?php
   echo "您的输入是：" . filter($_POST['data']);
CODE
)
