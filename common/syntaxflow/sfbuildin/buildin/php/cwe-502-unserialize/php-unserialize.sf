desc(
    title: 'check php function unserialize',
    type: audit,
    level: low,
    risk:'unserialize'
)

<include('php-param')> as $params
<include('php-filter-function')> as $filter
unserialize(* as $sink)
$sink #{
    include: `<self> & $params`,
    exclude: `<self>?{opcode: call}`
}-> as $high
alert $high for {
    title: 'php deserialization is not filtered',
    type: 'vuln',
    level: 'high'
}
$sink #{
    include: `<self> & $params`,
    include: `<self>?{opcode: call && !<self><getCaller> & $filter}`
}-> as $mid

alert $mid for {
    title: 'php deserialization has function calls, but no filter function is checked out',
    title_zh: 'php反序列化中有函数调用，但未检出过滤函数',
    type: 'mid',
    level: 'mid'
}
$sink #{
    include: `<self> & $params`,
    include: `<self>?{opcode: call && <self><getCaller> & $filter}`
}-> as $low

alert $low for {
    title: 'php deserialization has function calls that check out filter functions',
    title_zh: 'php反序列化中有函数调用，检出过滤函数',
    type: 'low',
    level: 'low'
}
desc(
    lang: php,
    alert_min: 3,
    alert_low: 1,
    alert_mid: 1,
    alert_high: 1,
    'file://mid.php': <<<UNSAFE
<?php
function unserializex($a){
    unserialize("$a");
}
$a = $_GET["1"];
$a = trim($a);
unserializex($a);
UNSAFE,
    'file://high.php':<<<CODE
<?php
    $a = $_GET[1];
    unserialize($a);
CODE,
    'file://low.php':<<<CODE
<?php
    $a = $_GET[1];
    unserialize(filter($a));
CODE
)