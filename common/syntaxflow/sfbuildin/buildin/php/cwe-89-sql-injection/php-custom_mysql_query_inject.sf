desc(
    title: "mysql inject",
    type: audit,
    level: low,
    risk: "sqli",
    desc: <<<TEXT
SQL注入（SQL Injection，简称SQLI）是一种代码注入技术，攻击者通过在应用程序的输入栏中恶意插入或“注入”SQL命令，干扰正常的数据库查询执行。这种攻击可导致数据泄露、数据篡改、拒绝服务等严重后果。审计此规则旨在识别和防范在PHP代码中未经过滤或不当过滤直接拼接SQL查询的情况，从而降低应用程序遭受SQL注入攻击的风险。
TEXT
)
<include('php-param')> as $params;
<include('php-filter-function')> as $filter;

mysql_query(* as $query);

$query #{
    include: `<self> & $params`,
    exclude: `<self>?{opcode: call}`
}-> as $high;

alert $high for {
    title: "Direct mysql injection",
    title_zh: "直接的mysql注入不经过任何过滤",
    type: 'vuln',
    level: 'high',
};

$query #{
    include: `<self> & $params`,
    include: `<self>?{opcode: call && !<self><getCaller> & $filter}`
}-> as $middle

alert $middle for {
    title: 'Filtered sql injection, but no filter function detected',
    title_zh: '经过过滤的sql注入，但未检测到过滤函数',
    type: 'mid',
    level: 'mid'
};


$query #{
    include: `<self> & $params`,
    include: `<self>?{opcode: call && <self><getCaller> & $filter}`
}-> as $low

alert $low for {
    title: 'Filtered sql injection, filter function detected',
    title_zh: '经过过滤的sql注入，检测到过滤函数',
    type: 'low',
    level: 'low'
};


desc(
    alert_min: 3,
    alert_high: 1,
    lang: php,
    'file:///high.php': <<<UNSAFE
<?php
    $llink=$_GET['r'];
    $query = "SELECT * FROM nav WHERE link='$llink'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $navs = mysql_fetch_array($resul);
UNSAFE
)

desc(
    lang: php,
    alert_low: 1,
    'file:///low.php': <<<CODE
<?php
    $llink=addslashes($_GET['1']);
    $query = "SELECT * FROM nav WHERE link='$llink'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $navs = mysql_fetch_array($result);
CODE
)

desc(
    alert_mid: '1',
    lang: php,
    'file:///middle.php': <<<UNSAFE
<?php
    $llink=trim($_GET['1']);
    $query = "SELECT * FROM nav WHERE link='$llink'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $navs = mysql_fetch_array($result);
UNSAFE
)