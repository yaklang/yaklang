desc(
	title: "mysql inject"
	title_zh: "sql(mysql)注入漏洞",
	type: audit
	level: low
	risk: "sqli-inject"
	desc: <<<TEXT
SQL注入（SQL Injection，简称SQLI）是一种代码注入技术，攻击者通过在应用程序的输入栏中恶意插入或"注入"SQL命令，干扰正常的数据库查询执行。这种攻击可导致数据泄露、数据篡改、拒绝服务等严重后果。审计此规则旨在识别和防范在PHP代码中未经过滤或不当过滤直接拼接SQL查询的情况，从而降低应用程序遭受SQL注入攻击的风险。
TEXT
	rule_id: "746fdb55-f824-4633-a6f4-4d71fb471ea3"
)
/mysql_(p)?connect/ as $mysqlFunction;
/mysql_(query|(drop|create)_db)/ as $mysqlFunction;
mysql_db_query as $mysqlFunction;
/mysqli_(((multi_|real_)?query)|(stmt_)?prepare)/ as $mysqlFunction;
./exec|prepare|query/?{<getObject><fullTypeName>?{have: "PDO"}} as $mysqlFunction;

<include('php-param')> as $params;
<include('php-tp-all-extern-variable-param-source')> as $params
<include('php-filter-function')> as $filter;

$mysqlFunction(* as $source)

$source #{
    include:`<self> & $params`
}-> as $all
$source #{
    include: `<self> & $params`,
    exclude: `*?{opcode: call}`,
}-> as $high

alert $high for {
    title: 'Unvalidated MySQL Parameter Injection',
    title_zh: 'MySQL未验证参数注入风险',
    level: 'high',
}
$source #{
    include: `<self> & $params`,
    exclude: `*?{opcode: call && (<self><getCallee> & $filter)}`,
}-> as $mid

alert $mid for {
    title: 'Insufficient MySQL Parameter Filtering',
    title_zh: 'MySQL参数过滤不充分',
    level: 'mid',
}

$all - $high - $mid as $low

check $low
alert $low for {
    title: 'Potential MySQL Access Control Bypass',
    title_zh: 'MySQL访问控制潜在绕过风险',
    level: 'low',
}

desc(
	lang: php
	alert_low: 1
	'file:///low.php': <<<CODE
<?php
    $llink=addslashes($_GET['1']);
    $query = "SELECT * FROM nav WHERE link='$llink'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $navs = mysql_fetch_array($result);
CODE
)

desc(
	alert_mid: '1'
	lang: php
	'file:///middle.php': <<<UNSAFE
<?php
    $llink=undefined($_GET['1']);
    $query = "SELECT * FROM nav WHERE link='$llink'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $navs = mysql_fetch_array($result);
UNSAFE
)
