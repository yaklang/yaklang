desc(
	title: "Check PHP Insecure File Operations"
	title_zh: "检测PHP不安全的文件操作"
	type: vul
	risk: "file-operation"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
未经验证的用户输入（如通过GET或POST请求接收到的文件名、路径等）直接用于文件系统相关的函数（如`copy`, `link`, `symlink`, `rename`, `fopen`, `fread`, `file_get_contents`等），可能导致攻击者通过构造恶意输入，控制程序对任意文件进行读取、写入、删除、复制、移动、甚至是创建符号链接等操作。这可能导致敏感信息泄露、数据损坏、拒绝服务，甚至远程代码执行。

2. **触发场景**
当应用程序直接将用户提供的路径或文件名传递给文件操作函数时，如果没有进行充分的输入验证和过滤，攻击者就可以利用此漏洞。例如，用户可以输入`../../etc/passwd`来读取系统敏感文件，或者输入一个恶意文件的路径来覆盖现有文件。以下是一个存在风险的示例代码:
```php
<?php
    $origin = $_GET["origin"];
    $destination = $_GET["destination"];
    copy($origin,$destination);
?>
```
攻击者可以构造请求，例如:`?origin=../../etc/passwd&destination=./output.txt`，将系统密码文件复制到web可访问的目录，导致敏感信息泄露。

3. **潜在影响**
- **敏感信息泄露**: 攻击者可以读取配置文件、源代码、用户数据等敏感信息。
- **数据篡改或破坏**: 攻击者可以修改、删除甚至格式化服务器上的文件。
- **拒绝服务**: 攻击者可以通过删除关键文件或写入大量无用数据导致服务不可用。
- **权限绕过**: 通过创建符号链接或硬链接，攻击者可能绕过某些文件访问控制。
- **远程代码执行**: 在某些情况下，如果攻击者可以控制写入文件的内容，结合其他漏洞（如文件包含），可能导致远程代码执行。
DESC
	rule_id: "7e2c4412-9a6f-4095-a84f-beb680e56fbf"
	solution: <<<SOLUTION
### 修复建议

#### 1. 对所有用户输入进行严格验证和过滤
在将用户输入用于文件操作函数之前，务必进行严格的验证和过滤。这包括但不限于：
* **合法性检查**: 验证文件或路径是否存在，是否符合预期的命名规范（如不允许特殊字符、不允许`../`目录穿越符等）。
* **白名单或黑名单过滤**: 仅允许访问特定目录下的文件，或者禁止访问某些敏感文件和目录。
* **文件名规范化**: 使用函数如`realpath()`来解析用户输入的路径，获取其绝对路径，并检查该路径是否在允许的范围内。

#### 2. 避免用户直接控制整个文件路径
尽量不要让用户直接控制用于文件操作的完整路径。如果必须基于用户输入来确定文件，应该只允许用户提供文件名或部分路径，并将其与应用程序内部定义的安全目录相结合。

#### 3. 使用安全的API
了解和使用PHP提供的更安全的文件操作函数或库，这些函数可能内置了更多的安全检查。

#### 4. 设置合适的文件权限
确保Web服务器运行的用户只拥有访问必要文件和目录的最小权限，限制其对其他敏感系统文件的访问能力。

#### 5. 示例代码 - 使用白名单和`realpath`
```php
<?php
    $allowed_dirs = ['/var/www/data/', '/var/www/uploads/']; // 允许操作的目录白名单
    $filename = $_GET["filename"];

    // 使用realpath解析路径，检查是否在允许的目录内
    $real_filepath = realpath($allowed_dirs[0] . $filename);

    if ($real_filepath && strpos($real_filepath, $allowed_dirs[0]) === 0) {
        // 路径合法，执行文件操作
        // 例如: readfile($real_filepath);
        echo "Reading file: " . $real_filepath;
    } else {
        // 路径非法，拒绝请求
        die("Invalid file path!");
    }
?>
```

#### 6. 示例代码 - 过滤目录穿越符
```php
<?php
    $filename = $_GET["filename"];

    // 过滤目录穿越符
    $filtered_filename = str_replace(['../', './'], '', $filename);

    // 将过滤后的文件名与安全目录结合
    $safe_filepath = '/var/www/data/' . $filtered_filename;

    // 执行文件操作，但仍需谨慎考虑其他攻击向量
    // 例如: readfile($safe_filepath);
    echo "Attempting to read: " . $safe_filepath;
?>
```
SOLUTION
	reference: <<<REFERENCE
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')](https://cwe.mitre.org/data/definitions/22.html)
[CWE-73: External Control of File Name or Path](https://cwe.mitre.org/data/definitions/73.html)
[PHP manual for file system functions](https://www.php.net/manual/en/book.filesystem.php)
REFERENCE
)
/copy|(sym)?link|rename|fopen|fread|file_get_contents/ as $function

<include('php-param')> as $params;
<include('php-tp-all-extern-variable-param-source')> as $params

$function(* as $allParams)

$allParams?{<self> #{include: <<<CODE
* & $params
CODE}->} as $sink

$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode: call} as $__next__
CODE)> as $high

alert $high for {
	desc: <<<CODE
### 漏洞描述

1.  **漏洞原理**
    - 当应用程序未经充分验证或过滤地将用户提供的输入（如文件名或路径）直接传递给文件操作函数时，存在此风险。

2.  **触发场景**
    - 攻击者可以构造恶意输入，例如使用路径遍历字符 `../` 访问受限目录或文件。

3.  **潜在影响**
    - 敏感信息泄露，数据损坏，拒绝服务，远程代码执行。
CODE
	level: "high",
	title: "Direct File Operation Without Validation",
	title_zh: "未经验证的文件操作高危漏洞",
	solution: <<<CODE
### 修复建议

1.  **使用白名单验证**
    - 维护一个允许的文件和目录列表。用户输入必须与此列表中的项完全匹配才能被接受。

2.  **路径规范化**
    - 使用 `realpath()` 函数将用户提供的路径转换为绝对路径，然后验证此路径是否在允许的目录内。

3.  **输入过滤**
    - 移除或替换用户输入中的危险字符，例如 `../` 和 `./`，防止路径遍历攻击。
    ```php
    $filename = $_GET['filename'];
    $filename = str_replace(['../', './'], '', $filename);
    $safe_path = '/safe/directory/' . $filename;
    ```

4.  **权限控制**
    - 确保 Web 服务器进程仅具有访问必要文件和目录的最小权限。

**示例代码:**
```php
<?php

$allowed_paths = [
    '/var/www/safe/directory/',
    '/var/www/public/uploads/'
];

$user_path = $_GET['path'];

// 使用 realpath 规范化路径
$real_path = realpath($user_path);

// 检查路径是否在允许的列表中
if (in_array(dirname($real_path) . '/', $allowed_paths)) {
    echo "Accessing: " . $real_path;
    // 执行文件操作
} else {
    echo "Access Denied.";
}

?>
```
CODE
}
$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode: call && <self><getCallee> & $filter} as $__next__
CODE)> as $mid

alert $mid for {
	title: "Insufficient Parameter Filtering",
	title_zh: "参数过滤不完整风险",
	solution: <<<CODE
### 修复建议

1.  **强化输入过滤**
    - 使用更严格的过滤规则，例如正则表达式，来移除或替换用户输入中的危险字符和模式。

2.  **多层验证**
    - 在不同的处理阶段对用户输入执行多层验证，确保没有遗漏的危险输入。

3.  **使用安全的API**
    - 尽可能使用安全的 API，并确保它们具有内置的验证机制。

**示例代码:**
```php
<?php

$user_input = $_GET['input'];

// 使用正则表达式过滤
$safe_input = preg_replace('/[^a-zA-Z0-9_\-\.]/', '', $user_input);

// 确保结果不为空
if (empty($safe_input)) {
    die('Invalid input.');
}

// 执行操作
// ...

?>
```
CODE
	desc: <<<CODE
### 风险描述

1.  **风险原理**
    - 当应用程序对用户提供的输入执行了基本的过滤，但存在过滤规则不完整或易于绕过的风险时，可能导致安全漏洞。

2.  **触发场景**
    - 攻击者可能构造特殊输入，绕过现有的过滤规则。

3.  **潜在影响**
    - 可能导致敏感信息泄露，数据篡改，拒绝服务，远程代码执行。
CODE
	level: "mid",
}
$sink - $high - $mid  as $low

alert $low for {
	title: "Potential Access Control Bypass",
	title_zh: "潜在访问控制绕过风险",
	solution: <<<CODE
### 修复建议

1.  **代码审查**
    - 定期进行代码审查，寻找潜在的访问控制绕过风险。

2.  **安全审计**
    - 执行安全审计，检查访问控制机制是否按预期工作。

3.  **最小权限原则**
    - 实施最小权限原则，确保用户和进程仅具有执行其任务所需的最小权限。
```php
<?php

// 检查用户是否具有访问权限
if (!check_user_permission($user, $resource)) {
    die('Access Denied.');
}

// 执行操作
// ...

?>
```
CODE
	desc: <<<CODE
### 风险描述

1.  **风险原理**
    - 尽管应用层已实施一定的访问控制，但仍可能存在绕过这些控制的潜在方法。

2.  **触发场景**
    - 攻击者可能利用访问控制机制中的缺陷或漏洞绕过限制。

3.  **潜在影响**
    - 用户或进程可能未经授权访问受保护的资源。
CODE
	level: "low",
}
desc(
	lang: "php"
	alert_min: 1
	"file:///unsafe.php": <<<TEXT
<?php
    $origin = $_GET["origin"];
    $destination = $_GET["destination"];
    copy($origin,$destination);
TEXT
)
