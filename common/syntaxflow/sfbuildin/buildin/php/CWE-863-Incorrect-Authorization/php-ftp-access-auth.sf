desc(
	title: "Check PHP Unvalidated FTP Parameter"
	title_zh: "检测PHP未验证FTP参数"
	level: "low"
	type: vul
	risk: "unsafe-ftp-parameter-validation"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
当应用程序在调用FTP相关函数（如 `ftp_chdir`, `ftp_delete`, `ftp_put`, `ftp_get`, `ftp_rename` 等）时，未对用户提供的文件名、路径或参数进行充分的验证和过滤，攻击者可以构造恶意输入。
这可能导致以下问题：
- **路径穿越 (Path Traversal/Directory Traversal)**: 攻击者利用 `../` 等序列访问FTP服务器上预期目录之外的文件和目录。
- **文件覆盖/删除**: 攻击者通过操纵文件名或路径来覆盖或删除任意文件。
- **权限绕过/文件泄露**: 在某些情况下，恶意参数可能导致绕过FTP权限限制，访问敏感文件或执行未授权操作。

2. **触发场景**
该规则主要检测用户可控的输入（如来自 `$_GET`, `$_POST`, `$_REQUEST` 等超全局变量）直接或间接作为FTP函数参数的情况，并且缺乏有效的安全过滤措施。例如，直接将用户输入的路径字符串传递给 `ftp_delete` 函数，而未检查其中是否包含恶意构造的路径穿越字符。

```php
<?php
// 高风险案例（直接使用未过滤参数）
function deleteFile() {
    $file = $_GET['file']; // 直接接收用户输入
    ftp_delete($ftp_conn, $file); // 触发高风险告警
}

// 中风险案例（过滤不充分）
function uploadFile() {
    $path = $_POST['path'];
    $filtered = str_replace('../', '', $path); // 简单过滤（不足以防御URL编码的路径遍历）
    ftp_fput($ftp_conn, $filtered, $fp); // 触发中风险告警（可绕过）
}

// 低风险案例（存在潜在绕过，需审计过滤逻辑）
function createDir() {
    $dir = sanitizeInput($_GET['dir']);
    ftp_mkdir($ftp_conn, $dir); // 触发低风险告警
}

function sanitizeInput($input) {
    return preg_replace('/\.\.\//', '', $input); // 未处理URL编码路径
}
?>
```

3. **潜在影响**
- 攻击者可能在FTP服务器上读写、修改或删除任意文件，导致数据损坏、丢失或敏感信息泄露。
- 攻击者可能利用路径穿越漏洞访问受限目录，获取配置文件、日志或源代码等敏感信息。
- 在某些FTP配置和场景下，可能导致进一步的服务器访问权限绕过或远程代码执行。
DESC
	rule_id: "4e4aa781-f02e-48f2-9d71-2e17b89b218c"
	solution: <<<SOLUTION
### 修复建议

#### 1. 对用户输入进行严格验证和过滤
在将用户输入传递给FTP函数之前，进行严格的输入验证和过滤，只允许合法的字符和路径结构。使用白名单方法优于黑名单方法。

```php
<?php
// 修复代码示例：严格路径验证
function safeDeleteFile() {
    $file = $_GET['file'];
    if (isValidFtpPath($file)) { // 使用自定义函数验证路径合法性
        ftp_delete($ftp_conn, $file);
    } else {
        // 处理非法输入，如记录日志或返回错误
        error_log("Invalid FTP file path attempted: " . $file);
        echo "Error: Invalid file path.";
    }
}

function isValidFtpPath($path) {
    // 示例验证逻辑：
    // 1. 检查路径是否包含 '..' 进行路径穿越
    if (strpos($path, '..') !== false) {
        return false;
    }
    // 2. 根据实际需求添加更多验证，如只允许在特定目录下操作，或验证文件名/目录名符合预期格式
    // if (!preg_match('/^[a-zA-Z0-9_\/\-]+\.txt$/', $path)) { // 示例：只允许特定格式和扩展名的文件
    //     return false;
    // }
    return true;
}
?>
```

#### 2. 使用绝对路径或已严格控制的相対路径
尽量避免使用用户可控的相对路径。如果必须使用相对路径，确保其受限于一个已知的、受限的根目录，并且用户无法通过操纵输入逃离该目录。

#### 3. 对文件名和路径进行编码和解码
根据FTP协议和服务器的实际情况，对文件名和路径进行适当的URL编码或FTP特定的编码解码，以确保特殊字符被正确处理而不是被解释为路径分隔符或命令。

#### 4. 限制FTP用户权限
为进行文件操作的FTP用户配置最小必需的权限，限制其只能访问和操作特定目录下的文件，即使存在参数注入漏洞，也能限制潜在的危害范围。

#### 5. 定期更新和审计代码
定期对处理用户输入的代码进行安全审计，并及时应用框架和库的安全更新。
SOLUTION
	reference: <<<REFERENCE
[CWE-863: Incorrect Authorization](https://cwe.mitre.org/data/definitions/863.html)
REFERENCE
)

/^ftp_(chdir|delete|fput|mkdir|nb_fput|rmdir|size|chmod|fget)$/ as $function
/^ftp_(append|get|nb_fget|nb_get|nb_put|put|rename)$/ as $function
ftp_alloc as $function
ftp_login as $function


<include('php-param')> as $params;
<include('php-tp-all-extern-variable-param-source')> as $params
<include('php-filter-function')> as $filter;

$function(* as $source)

$source?{<self> #{include: <<<CODE
* & $params
CODE}->} as $sink

$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode: call} as $__next__
CODE)> as $high

alert $high for {
    title: 'Unvalidated FTP Parameter Injection',
    title_zh: 'FTP未验证参数注入风险',
    level: 'high',
}

$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode: call && <self><getCallee> & $filter} as $__next__
CODE)> as $highAndMid

$highAndMid - $high as $mid

alert $mid for {
    title: 'Insufficient FTP Parameter Filtering',
    title_zh: 'FTP参数过滤不充分',
    level: 'mid',
}
$sink - $high - $mid as $low

alert $low for {
    title: 'Potential FTP Access Control Bypass',
    title_zh: 'FTP访问控制潜在绕过风险',
    level: 'low',
}

desc(
	lang: "php"
	alert_min: 3
	alert_high: 1
	alert_low: 2
	"file:///unsafe.php": <<<TEXT
<?php
// 高风险案例（直接使用未过滤参数）
function deleteFile() {
    $file = $_GET['file']; // 直接接收用户输入
    ftp_delete($ftp_conn, $file); // 触发高风险告警
}

// 中风险案例（过滤不充分）
function uploadFile() {
    $path = $_POST['path'];
    $filtered = str_replace('../', '', $path); // 简单过滤
    ftp_fput($ftp_conn, $filtered, $fp); // 触发中风险告警（可绕过）
}

// 低风险案例（存在潜在绕过）
function createDir() {
    $dir = sanitizeInput($_GET['dir']);
    ftp_mkdir($ftp_conn, $dir); // 触发低风险告警（需审计过滤逻辑）
}

function sanitizeInput($input) {
    return preg_replace('/\.\.\//', '', $input); // 未处理URL编码路径
}
?>
TEXT
)
