desc(
	title: "Detect PHP Information Exposure Risk"
	title_zh: "检测PHP信息泄露风险"
	type: vul
	risk: "sql-information-exposure"
	desc: <<<DESC
### 风险描述

1. **风险原理**
应用程序在处理数据库操作或其他敏感任务时，如果未正确处理异常或未过滤函数输出，可能导致将本应仅供内部使用的敏感信息直接返回给客户端或记录在可公开访问的日志中。这些信息可能包括数据库连接信息、SQL错误信息、服务器配置、文件路径、堆栈跟踪等，攻击者可以利用这些信息来进一步了解系统架构、执行SQL注入、路径遍历或其他攻击。

2. **触发场景**
当应用程序在生产环境中开启调试模式或详细错误报告，或者直接调用能够输出敏感信息的API函数（如 `mysql_error()`、`pg_last_error()`、 `mysql_get_host_info()`、`pg_version()` 等），并将这些函数的返回值未经处理地输出到前端页面或日志文件。

例如，在数据库操作失败时直接将 `mysql_error()` 的返回值输出到页面，可能会暴露数据库的详细错误信息乃至部分SQL语句。
```php
<?php
$conn = mysql_connect("localhost", "wrong_user", "wrong_password");
if (!$conn) {
    die("连接失败: " . mysql_error()); // 直接输出详细错误信息
}
?>
```

3. **潜在影响**
- 攻击者获取数据库用户名、密码、主机地址等连接信息。
- 攻击者获取详细的错误信息，帮助其定向构建SQL注入或漏洞利用代码。
- 攻击者获取应用程序文件路径、服务器信息等，辅助进行其他攻击，如路径遍历或远程代码执行。
- 导致业务逻辑或敏感数据被攻击者猜测或发现。
DESC
	rule_id: "082ac5f8-c196-4312-8c0f-0244f7ffa8d1"
	solution: <<<SOLUTION
### 修复建议

#### 1. 关闭或限制详细错误报告
在生产环境中，应关闭PHP的 `display_errors` 配置，或将错误日志重定向到只有管理员可以访问的安全位置。 instead of displaying them to the client browser.
```ini
; 在php.ini中设置
display_errors = Off
log_errors = On
error_log = /var/log/php_errors.log
```

#### 2. 使用通用的错误消息
捕获数据库操作或其他可能产生敏感信息的函数调用的异常，并向用户显示通用的、不包含具体技术细节的错误消息。例如，可以显示“发生了一个错误，请稍后重试。”之类的信息。
```php
<?php
$conn = mysql_connect("localhost", "wrong_user", "wrong_password");
if (!$conn) {
    // die("连接失败: " . mysql_error()); // 不安全的写法
    error_log("数据库连接失败: " . mysql_error()); // 将详细错误记录在服务器端日志
    die("数据库服务暂时不可用，请稍后重试。"); // 向用户显示通用信息
}
?>
```

#### 3. 避免在生产环境输出敏感信息函数
在开发和测试阶段可以使用的用于调试或获取系统信息的函数（如`mysql_get_host_info()`、`pg_version()`等），应确保在生产环境中被删除或不会被调用，避免将这些信息暴露给外部用户。
SOLUTION
	reference: <<<REFERENCE
[CWE-200: Information Exposure](https://cwe.mitre.org/data/definitions/200.html)
REFERENCE
)

/^mysql_error|mysql_(db_name|field_(name|flag|type|table)|get_(client|host|server)_info|info|status|session_id|get(_current_user|cwd))$/ as $mysql_information;
/^pg_(last_error|result_error(_field)?)$/ as $pg_information;
/^pg_(dbname|field_name|field_table|host|last_notice|meta_data|options|port|tty|version)$/ as $pg_information;

<include("php-xss-method")> as $method

$method(* as $param)

$param?{<self> #{include: <<<CODE
* & $mysql_information
CODE}->} as $mysql_sink

alert $mysql_sink for {
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "low",
	title: "Detect PHP MySQL Information Exposure Risk",
	title_zh: "检测PHP MySQL数据库信息泄露风险",
}
$param?{<self> #{include: <<<CODE
* & $pg_information
CODE}->} as $pg_sink

alert $pg_sink for {
	title: "Detect PHP PostgreSQL Information Exposure Risk",
	title_zh: "检测PHP PostgreSQL数据库信息泄露风险",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "low",
}
desc(
	lang: "php"
	alert_low: 1
	'file:///high.php': <<<UNSAFE
<?php
    $host_info = mysql_get_host_info();
    echo "数据库主机信息：" . $host_info;
?>
UNSAFE
)
