desc(
	title: "Detect PHP ThinkPHP Authentication Bypass Vulnerability"
	title_zh: "检测PHP ThinkPHP认证绕过漏洞"
	risk: "Credential Hardcoding"
	type: vul
	level: "low"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   ThinkPHP框架中的认证绕过漏洞通常由于开发者未能正确实施身份验证和授权控制机制。攻击者可以通过操纵请求参数、利用逻辑缺陷或直接访问未经保护的端点来绕过认证流程。这种漏洞的核心在于应用程序对用户权限的验证不充分，导致未授权用户可以执行敏感操作。

2. **触发场景**
   在ThinkPHP应用中，认证绕过可能出现在以下场景：
   - 控制器方法未应用中间件进行权限校验
   - 直接从请求参数获取用户标识而未验证其合法性
   - 认证逻辑存在缺陷，如可预测的令牌或可绕过的条件检查

   ```php
   // 存在漏洞的代码示例
   namespace app\index\controller;
   use think\Controller;
   
   class User extends Controller {
       public function deleteUser() {
           $userId = input('user_id'); // 未经验证的用户输入
           // 直接执行删除操作，未检查当前用户权限
           $this->model->where('id', $userId)->delete();
       }
   }
   ```

3. **潜在影响**
   - 未授权访问敏感功能或数据
   - 恶意用户可提升自身权限
   - 系统关键功能被未授权操纵
   - 可能导致数据泄露或系统完整性破坏
DESC
	rule_id: "dbe0c15c-9321-4281-b9a1-937077a41efa"
	solution: <<<SOLUTION
### 修复建议

#### 1. 实施严格的中间件验证
在ThinkPHP中应当为所有需要认证的路由应用认证中间件：
```php
// 定义认证中间件
class AuthMiddleware {
    public function handle($request, \Closure $next) {
        if (!session('user_id')) {
            return redirect('/login');
        }
        return $next($request);
    }
}

// 路由中应用中间件
Route::rule('user/profile', 'user/profile')->middleware(AuthMiddleware::class);
```

#### 2. 实现权限控制系统
对于敏感操作应当实现细粒度的权限控制：
```php
// 在控制器中检查权限
public function deleteUser() {
    if (!auth()->user()->can('delete_users')) {
        throw new \think\exception\UnauthorizedException;
    }
    // 安全删除逻辑
}
```

#### 3. 参数安全处理
对所有的用户输入进行严格验证：
```php
// 使用验证器确保参数安全
$validate = Validate::rule('user_id', 'require|number|gt:0');
if (!$validate->check(input())) {
    throw new \think\exception\ValidateException;
}
```

#### 4. 定期安全审计
建议定期使用安全扫描工具检查应用中的认证缺陷，并及时更新框架版本以修复已知漏洞。
SOLUTION
	reference: <<<REFERENCE
[CWE-287: Improper Authentication](https://cwe.mitre.org/data/definitions/287.html)
[ThinkPHP Security Best Practices](https://www.thinkphp.cn/doc)
REFERENCE
)
ldap_bind(*<slice(start=2)>?{opcode: const} as $pass)
ldap_exop_passwd(,*?{opcode: const} as $pass,*?{opcode: const} as $pass)
ldap_bind_ext(,*?{opcode: const} as $pass)

$pass as $sink

alert $sink	for {
	level: "high",
	title: "Detect PHP ThinkPHP Authentication Bypass Vulnerability",
	title_zh: "检测PHP ThinkPHP认证绕过漏洞",
}

desc(
	lang: "php"
	alert_min: "1"
	"file:///unsafe.php": <<<UNSAFE
<?php
// 不安全示例：密码直接明文写入代码
$ldapconn = ldap_connect("ldap.example.com");
ldap_bind($ldapconn, "cn=admin", "Admin@123");
UNSAFE
)
