desc(
	title: "Check PHP Hardcoded LDAP Credential"
	title_zh: "检测PHP中硬编码的LDAP凭据"
	risk: "Credential Hardcoding"
	type: vul
	level: "low"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   LDAP硬编码凭据漏洞发生在当应用程序将用于连接或认证LDAP服务（如Active Directory）的用户名和密码直接以硬coded的形式存储在源代码中。这种做法违反了安全编码的最佳实践，一旦源代码泄露，攻击者可以直接获取到具有特定权限的LDAP账户凭据。这些凭据可能用于访问敏感的用户信息、目录结构，甚至可能被用于进一步的网络渗透。

2. **触发场景**
   当开发者在代码中直接定义并使用LDAP的绑定凭据时就会触发此漏洞。例如，使用`ldap_bind()`或`ldap_bind_ext()`函数时，将用户名和密码作为字符串常量直接传入。

   ```php
   <?php
   // 不安全示例：密码直接明文写入代码
   $ldapconn = ldap_connect("ldap.example.com");
   ldap_bind($ldapconn, "cn=admin,dc=example,dc=com", "Admin@123"); // 密码硬编码
   ?>
   ```

3. **潜在影响**
   - **凭据泄露风险：** 如果源代码仓库、备份或编译后的文件被访问，攻击者可以轻易提取出硬编码的LDAP账户信息。
   - **权限扩散：** 通常用于开发的硬编码凭据可能在多个环境（开发、测试、生产）中被复用，导致一个环境的凭据泄露影响到所有环境。
   - **未授权访问和控制：** 攻击者利用泄露的LDAP凭据可以执行绑定操作，未授权访问LDAP目录，获取用户列表、组信息、甚至对目录结构进行修改，导致敏感数据泄露或服务可用性受到影响。
   - **横向移动：** 如果LDAP账户在网络内拥有其他系统或服务的访问权限，凭据泄露将成为攻击者横向渗透的突破口。
DESC
	rule_id: "dbe0c15c-9321-4281-b9a1-937077a41efa"
	solution: <<<SOLUTION
### 修复建议

1. **避免在代码中硬编码敏感凭据**
   绝不应将LDAP用户名和密码直接写死在源代码文件中。这是最根本的修复措施。

2. **使用安全的配置管理方式**
   - **环境变量：** 将LDAP凭据存储在操作系统的环境变量中，应用程序启动时读取。这是简单且常用的方法。
   - **配置文件：** 使用专门的配置文件（如`.env`文件），将凭据存储在文件外部，并确保配置文件不被纳入版本控制系统，并且访问权限受限。
   - **配置管理系统/密钥管理服务（KMS）：** 考虑使用更专业的配置管理工具（如Ansible Vault, HashiCorp Vault, AWS Secrets Manager, Azure Key Vault, Google Cloud Secret Manager）来安全地存储和管理敏感信息。

3. **运行时获取凭据**
   应用程序运行时从安全位置（如环境变量、安全的配置文件、Vault服务等）读取LDAP凭据，而不是在编译期或代码中固定。

4. **实施最小权限原则**
   使用的LDAP账户应遵循最小权限原则，仅赋予执行必要操作所需的最低权限，限制即使凭据泄露后的潜在损害。

5. **定期更新凭据**
   无论使用何种安全存储方式，都应定期轮换LDAP账户的密码。

#### 修复代码示例 (使用环境变量)

```php
<?php
// 安全示例：从环境变量获取凭据
$ldap_host = getenv('LDAP_HOST');
$ldap_user = getenv('LDAP_USER');
$ldap_pass = getenv('LDAP_PASS');

if ($ldap_host && $ldap_user && $ldap_pass) {
    $ldapconn = ldap_connect($ldap_host);
    if ($ldapconn) {
        // 设置LDAP协议版本等选项
        ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);
        // 执行绑定
        $bind = ldap_bind($ldapconn, $ldap_user, $ldap_pass);

        if ($bind) {
            echo "LDAP绑定成功";
            // 执行LDAP操作
            // ...
            ldap_close($ldapconn);
        } else {
            echo "LDAP绑定失败: " . ldap_error($ldapconn);
        }
    } else {
        echo "无法连接到LDAP服务器";
    }
} else {
    echo "LDAP环境变量未设置完整";
}
?>
```

在服务器端设置环境变量：
```bash
export LDAP_HOST="ldap.example.com"
export LDAP_USER="cn=admin,dc=example,dc=com"
export LDAP_PASS="YourSecurePassword123"
```
SOLUTION
	reference: <<<REFERENCE
[CWE-259: Use of Hard-coded Password](https://cwe.mitre.org/data/definitions/259.html)
REFERENCE
)
ldap_bind(*<slice(start=2)>?{opcode: const} as $pass)
ldap_exop_passwd(,*?{opcode: const} as $pass,*?{opcode: const} as $pass)
ldap_bind_ext(,*?{opcode: const} as $pass)

$pass as $sink

alert $sink for {
   title: "Hardcoded LDAP Credentials Detected",
   title_zh: "检测到LDAP凭据硬编码"
   level: "low"
}

desc(
	lang: "php"
	alert_min: "1"
	"file:///unsafe.php": <<<UNSAFE
<?php
// 不安全示例：密码直接明文写入代码
$ldapconn = ldap_connect("ldap.example.com");
ldap_bind($ldapconn, "cn=admin", "Admin@123");
UNSAFE
)
