desc(
	title: "Detect PHP LDAP Hard-coded Password Vulnerability"
	title_zh: "检测PHP LDAP硬编码密码漏洞"
	risk: "Credential Hardcoding"
	type: vul
	level: "low"
	desc: <<<DESC
### 漏洞描述
1. **漏洞原理**
硬编码密码是一种常见的安全缺陷，开发人员在代码中直接写入敏感凭据（如LDAP绑定密码），而不是通过更安全的外部配置或环境变量加载。这种做法会导致以下问题：
- 如果攻击者获取了源代码，可以直接看到明文密码。
- 密码无法动态更新，导致运维复杂性增加。
- 在代码共享或版本控制中容易泄露敏感信息。

2. **触发场景**
```php
// 存在漏洞的代码示例
$ldapconn = ldap_connect("ldap.example.com");
ldap_bind($ldapconn, "cn=admin", "Admin@123"); // 直接写死密码
```
在此示例中，攻击者可以通过访问代码库直接提取出密码`Admin@123`，进而对LDAP服务器进行未授权访问。

3. **潜在影响**
- 攻击者可以使用提取到的密码非法访问敏感服务（如LDAP、数据库）。
- 可能被进一步利用来提升权限或窃取敏感数据。
- 如果该密码在多个系统中复用，危害将更加严重。
DESC
	rule_id: "dbe0c15c-9321-4281-b9a1-937077a41efa"
	solution: <<<SOLUTION
### 修复建议
#### 1. 使用环境变量存储密码
将密码从代码中移除，改为从环境变量中读取。例如：
```php
// 安全示例：从环境变量获取密码
$ldap_password = getenv('LDAP_PASSWORD');
if (!$ldap_password) {
    die("LDAP password not configured.");
}
$ldapconn = ldap_connect("ldap.example.com");
ldap_bind($ldapconn, "cn=admin", $ldap_password);
```

#### 2. 使用加密配置文件
密码也可以存储在加密的配置文件中，应用启动时解密并加载：
```php
// 安全示例：从加密配置文件中加载密码
$config = loadSecureConfig('config.enc');
$ldap_password = $config['ldap']['password'];
$ldapconn = ldap_connect("ldap.example.com");
ldap_bind($ldapconn, "cn=admin", $ldap_password);
```

#### 3. 强化LDAP连接安全性
除了避免硬编码外，还需设置LDAP协议版本和选项以增强安全性：
```php
ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);
ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);
```

#### 4. 定期审计代码
建议定期扫描代码库，查找是否有硬编码密码，并强制要求开发团队遵循安全编码规范。
SOLUTION
	reference: <<<REFERENCE
[CWE-259: Use of Hard-coded Password](https://cwe.mitre.org/data/definitions/259.html)
[ThinkPHP Security Best Practices](https://www.thinkphp.cn/doc)
REFERENCE
)
ldap_bind(*<slice(start=2)>?{opcode: const} as $pass)
ldap_exop_passwd(,*?{opcode: const} as $pass,*?{opcode: const} as $pass)
ldap_bind_ext(,*?{opcode: const} as $pass)

$pass as $sink

alert $sink for {
	level: "high",
	title: "Detect PHP ThinkPHP Authentication Bypass Vulnerability",
	title_zh: "检测PHP ThinkPHP认证绕过漏洞",
	solution: <<<SOLUTION
### 修复建议
#### 1. 实施严格的中间件验证
在ThinkPHP中应当为所有需要认证的路由应用认证中间件：
```php
// 定义认证中间件
class AuthMiddleware {
public function handle($request, \Closure $next) {
if (!session('user_id')) {
return redirect('/login');
}
return $next($request);
}
}
// 路由中应用中间件
Route::rule('user/profile', 'user/profile')->middleware(AuthMiddleware::class);
```
#### 2. 实现权限控制系统
对于敏感操作应当实现细粒度的权限控制：
```php
// 在控制器中检查权限
public function deleteUser() {
if (!auth()->user()->can('delete_users')) {
throw new \think\exception\UnauthorizedException;
}
// 安全删除逻辑
}
```
#### 3. 参数安全处理
对所有的用户输入进行严格验证：
```php
// 使用验证器确保参数安全
$validate = Validate::rule('user_id', 'require|number|gt:0');
if (!$validate->check(input())) {
throw new \think\exception\ValidateException;
}
```
#### 4. 定期安全审计
建议定期使用安全扫描工具检查应用中的认证缺陷，并及时更新框架版本以修复已知漏洞。
SOLUTION
	risk: "认证绕过",
	desc: <<<DESC
### 漏洞描述
1. **漏洞原理**
ThinkPHP框架中的认证绕过漏洞通常由于开发者未能正确实施身份验证和授权控制机制。攻击者可以通过操纵请求参数、利用逻辑缺陷或直接访问未经保护的端点来绕过认证流程。这种漏洞的核心在于应用程序对用户权限的验证不充分，导致未授权用户可以执行敏感操作。
2. **触发场景**
在ThinkPHP应用中，认证绕过可能出现在以下场景：
- 控制器方法未应用中间件进行权限校验
- 直接从请求参数获取用户标识而未验证其合法性
- 认证逻辑存在缺陷，如可预测的令牌或可绕过的条件检查
```php
// 存在漏洞的代码示例
namespace app\index\controller;
use think\Controller;
class User extends Controller {
public function deleteUser() {
$userId = input('user_id'); // 未经验证的用户输入
// 直接执行删除操作，未检查当前用户权限
$this->model->where('id', $userId)->delete();
}
}
```
3. **潜在影响**
- 未授权访问敏感功能或数据
- 恶意用户可提升自身权限
- 系统关键功能被未授权操纵
- 可能导致数据泄露或系统完整性破坏
DESC
	name: "sink",
	message: "检测到PHP ThinkPHP认证绕过漏洞，并且从数据源（source）到污染汇聚点（sink）间，没有发现任何过滤函数信息。",
}

desc(
	lang: "php"
	alert_min: "1"
	"file:///unsafe.php": <<<UNSAFE
<?php
// 不安全示例：密码直接明文写入代码
$ldapconn = ldap_connect("ldap.example.com");
ldap_bind($ldapconn, "cn=admin", "Admin@123");
UNSAFE
	"safefile://SecureLDAPConnection.php": <<<CODE
<?php
// 安全示例：从环境变量或配置文件中动态加载LDAP密码，而不是硬编码。
// 确保外部存储是安全的，并且应用启动时可以安全地读取。

$ldap_password = getenv('LDAP_PASSWORD'); // 从环境变量获取密码
// 或者 $ldap_password = getConfig('ldap.password'); // 从安全的配置文件获取密码

if (!$ldap_password) {
    die("LDAP password not configured.");
}

$ldapconn = ldap_connect("ldap.example.com");

if ($ldapconn) {
    // 设置LDAP版本和选项，增强安全性
    ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);
    ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);

    // 绑定到LDAP服务器
    $bind = @ldap_bind($ldapconn, "cn=admin,dc=example,dc=com", $ldap_password);

    if ($bind) {
        echo "LDAP Bind successful!";
        // 继续进行其他LDAP操作
    } else {
        echo "LDAP Bind failed: " . ldap_error($ldapconn);
    }
} else {
    echo "Could not connect to LDAP server.";
}

// 在脚本结束或不再需要时关闭连接
if (isset($ldapconn) && is_resource($ldapconn)) {
    ldap_close($ldapconn);
}
?>
CODE
	"safefile://SecureAuthenticationHandler.php": <<<CODE
<?php
// 安全示例：使用ThinkPHP的Auth组件或其他安全的认证机制处理用户凭证。
// 密码不应直接在代码中出现，而是通过验证表单输入并与数据库中存储的哈希密码进行比较。

namespace app\index\controller;
use think\facade\Request;
use think\facade\Session;

class AuthController {
    public function login() {
        if (Request::isPost()) {
            $username = Request::param('username');
            $password = Request::param('password');

            // 假设这里有一个User模型和authenticate方法
            if (auth()->attempt($username, $password)) { // 使用安全的认证方法，内部处理密码哈希比较
                Session::set('user_id', auth()->id());
                Session::set('username', auth()->user()->username);
                // 登录成功
                return json(['code' => 1, 'msg' => 'Login successful', 'redirect_url' => '/dashboard']);
            } else {
                // 登录失败
                return json(['code' => 0, 'msg' => 'Invalid username or password']);
            }
        }
        // 显示登录页面
        return view('login');
    }

    // 其他安全操作，如修改密码不应在代码中硬编码任何凭证
    public function changePassword() {
        // ... 安全的密码修改逻辑，通常涉及旧密码验证、新密码哈希存储等
    }

    // ... 其他认证相关的安全处理
}
?>
CODE
)
