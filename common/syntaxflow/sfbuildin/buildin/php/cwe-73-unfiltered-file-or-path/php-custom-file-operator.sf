desc(
    title: 'file operator',
    type: vul,
    level: low,
   risk:"path-traversal",
)

<include('php-file-read')> as $read
<include('php-file-unlink')> as $write
<include('php-file-write')> as $unlink
$read + $write + $unlink as $source

<include('php-param')> as $params
<include('php-filter-function')> as $filter

$source(* as $param)

$param#{
    include: `<self> & $params`,
    exclude: `<self>?{opcode: call}`
}-> as $high

alert $high for{
    title: 'Direct file manipulation,not call method',
    type: 'vuln',
    level: 'high'
}

$param #{
    include: `<self>& $params`,
    include: `*?{opcode: call && !<self><getCaller> & $filter}`
}-> as $middle

alert $middle for{
    title_zh: '存在文件操作，文件操作经过函数，但未检出过滤',
    title: 'File operations exist, file operations pass through functions, but no filter is checked out',
    type: 'mid',
    level: 'mid'
}

$param #{
    include: `<self> & $params`,
    include: `*?{opcode: call && <self><getCaller> & $filter}`
}-> as $low

alert $low for{
    title_zh: '存在文件操作，文件操作经过函数，检出过滤',
    title: 'File operations exist, file operations pass through functions,  filter is checked out',
    type: 'low',
    level: 'low'
}
desc(
    lang: php,
    alert_min: 3,
    alert_low: 1,
    alert_mid: 1,
    alert_high: 1,
    'file://high.php': <<<UNSAFE
<?php
    $a = $_GET[1];
    unlink($a);
UNSAFE,
    'file://mid.php':<<<CODE
<?php
    $a = $_GET[1];
    $a = trim($a);
    file_get_contents($a);
CODE,
    'file://low.php': <<<CODE
<?php
    $a = $_GET[1];
    $a = filter($a);
    file_put_contents("1.php",$a);
CODE
)