desc(
	title: "Audit PHP Unfiltered File or Path Operations"
	title_zh: "审计PHP未过滤文件或路径操作"
	risk: "audit"
	level: "low"
	desc: <<<DESC
### 1.规则目的

该规则集旨在检测PHP代码中可能存在的未过滤文件或路径操作，这些操作若未能对用户输入进行充分校验或过滤，可能导致严重的安全风险。攻击者可以利用这些未受限制的操作执行文件包含、目录遍历、文件删除、文件上传覆盖等恶意行为，从而获取敏感信息、执行任意代码甚至完全控制服务器。

规则通过静态分析，识别代码中调用文件或路径操作函数（如 `opendir`, `file_get_contents`, `file_put_contents`, `unlink`, `rename` 等）的位置，并追溯其参数的来源。特别关注来自外部输入的参数（如 `$_GET`, `$_POST`, `$_REQUEST`, `$_FILES`, `$_COOKIE`, `$_SERVER` 等），判断这些参数是否经过了有效的过滤或验证，以识别潜在的文件或路径注入漏洞。

### 2.规则详细

1. **检测范围广泛**：规则覆盖了PHP中常用的、涉及文件或目录操作的多种敏感函数，确保能够捕捉到不同类型的风险点。
2. **数据流分析**：通过强大的数据流分析引擎，精确跟踪外部输入数据如何流入敏感函数，有效识别直接或间接利用用户输入进行文件操作的高危场景。
3. **区分不同风险等级**：根据数据流分析的结果和过滤情况，规则可能区分出高、中、低不同风险等级的告警。
   - **高危**：未经过任何有效过滤的外部输入直接用于敏感文件操作函数。
   - **中危**：外部输入经过了部分过滤，但过滤机制可能不完善或存在绕过风险。
   - **低危**：外部输入用于文件操作，但可能在代码结构上存在潜在的配置问题或最佳实践违背，虽非直接漏洞，但增加风险。

示例代码：

```php
<?php
    $a = $_GET['filename'];
    // 存在漏洞的代码：直接使用未经任何过滤的GET参数打开目录
    opendir($a);
?>
```
DESC
	rule_id: "a6f3be4b-5f16-46d8-8e0b-9182e5078345"
	reference: <<<REFERENCE
[CWE-73: External Control of File Name or Path](https://cwe.mitre.org/data/definitions/73.html)
REFERENCE
	solution: <<<SOLUTION
### 修复建议

防止PHP中未过滤文件或路径操作漏洞的核心在于对所有用户输入进行严格的校验和过滤，确保文件路径或名称符合预期。

#### 1. 输入严格过滤与校验

*   **白名单校验**：如果可能，使用允许的文件名或路径的白名单列表进行严格匹配。这是最安全的方式。
*   **路径规范化**：在将用户输入的路径用于文件系统操作之前，使用`realpath()`或类似的函数来解析和规范化路径，消除其中的`..`，防止目录遍历攻击。并检查规范化后的路径是否处于预期的安全目录范围内。
*   **移除或禁止特殊字符**：过滤掉文件名或路径中可能导致问题的特殊字符，如斜杠`/`或`\`、点`.`、冒号`:`、空字节`\0`以及其他 shell 元字符。

```php
<?php
// 修复代码示例：使用 realpath() 和检查目录范围
$filename = $_GET['filename'];
$base_dir = '/var/www/html/uploads/'; // 限制文件操作在指定目录下

// 规范化用户提供的路径
$real_path = realpath($base_dir . $filename);

// 检查规范化后的路径是否仍然在预期的安全目录下
if ($real_path !== false && strpos($real_path, $base_dir) === 0) {
    // 文件路径安全，可以进行文件操作
    // 例如： stat($real_path);

    // 示例：安全地打开目录
    if (is_dir($real_path)) {
        $dir_handle = opendir($real_path);
        // ... 处理目录 ...
    }

} else {
    // 非法路径或路径超出范围
    die('非法文件或目录');
}
?>
```

#### 2. 限制文件操作范围

*   **工作目录限制**：使用`chroot()`函数将PHP进程的工作目录限定在一个安全的根目录中，限制其对文件系统的访问范围（注意：`chroot`需要root权限，且配置复杂，可能不适用于所有场景）。
*   **使用特定API**：优先使用专门处理用户上传文件或生成临时文件的APIs，如`move_uploaded_file()`，这些函数通常提供了更安全的处理机制。

#### 3. 文件上传的安全处理

*   **更改文件名**：上传文件时不要直接使用客户端提供的文件名和扩展名，应生成一个唯一且不可预测的新文件名，并存储原始文件名在数据库中。
*   **严格校验文件类型**：同时依靠MIME类型检查、文件内容签名检查和文件扩展名校验来判断文件的真实类型，避免通过更改扩展名绕过检查。

#### 4. 最小权限原则

确保运行PHP的操作系统用户只拥有执行所需操作的最小文件系统权限。
SOLUTION
)
<include('php-param')> as $params
<include('php-tp-all-extern-variable-param-source')> as $params
<include('php-filter-function')> as $filter

opendir(* as $allSink)

$allSink?{<self> #{include: <<<CODE
* & $params
CODE}->} as $sink

$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode: call} as $__next__
CODE)> as $high

alert $high for {
    title: "Unsafe File Operation Without Validation",
    title_zh: "未经验证的文件操作",
    level: "high"
}
$sink<dataflow(include=<<<CODE
* & $params as $__next__
CODE,exclude=<<<CODE
*?{opcode:call && <self><getCallee> & $filter} as $__next__
CODE)> as $highAndMid

$highAndMid - $high as $mid
alert $mid for {
    title: "Insecure File Type Detection",
    title_zh: "不安全的文件类型检测",
    level: "mid"
}
$all - $high - $mid as $low
alert $low for {
    title: "Potential File Storage Path Misconfiguration",
    title_zh: "潜在的文件存储路径配置问题",
    level: "low"
}

desc(
	lang: "php"
	alert_exact: 1
	'file:///unsafe.php': <<<CODE
<?php
    $a = $_GET[1];
    opendir($a);
CODE
)
