desc(
    title: "SEI ignore replaces return",
    ref: 'https://wiki.sei.cmu.edu/confluence/display/java/EXP00-J.+Do+not+ignore+values+returned+by+methods',
    type: audit,
    severity: low,
    desc: <<<TEXT
忽略方法返回的值可能导致逻辑错误或安全漏洞。在Java编程中，某些方法（如`replace()`, `replaceAll()`, `replaceFirst()`, `concat()`等）会返回一个新的字符串，而不是修改原始字符串。如果调用这些方法时忽略了它们的返回值，而继续使用原始字符串，则可能导致预期之外的行为。这种错误在安全性敏感的应用程序中尤为危险，因为它可能破坏数据完整性或导致逻辑上的漏洞。
TEXT
)

.replace() as $call;
.replaceAll() as $call;
.replaceFirst() as $call;
.concat() as $call;

$call?{!<self>->} as $result;
alert $result for "Return String is not used";

desc(
lang: java,
'safefile://b1.java': <<<REPLACE
package src.main.a;
public class Replace {
  public static void main(String[] args) {
    String original = "insecure";
    System.out.println(original.replace('i', '9'));
  }
}
REPLACE,
'safefile://b2.java': <<<REPLACE
package src.main.b;
public class Replace {
  public static void main(String[] args) {
    String original = "insecure";
    return original.replace('i', '9');
  }
}
REPLACE,

alert_min: 6,
'file://a1.java': <<<REPLACE
package src.main.c;
public class Replace {
  public static void main(String[] args) {
    String original = "insecure";
    original.replace('i', '9');
    System.out.println(original);
  }
}
REPLACE,
'file://a2.java': <<<REPLACE
package src.main.d;
public class Replace {
  public static void main(String[] args) {
    String original = "insecure";
    String c = original.replace('i', '9');
    System.out.println(original);
  }
}
REPLACE,
'file://a3.java': <<<REPLACE
package src.main.e;
public class Replace {
  public static void main(String[] args) {
    String original = "insecure";
    String c = original.concat("aaaaa");
    System.out.println(original);
  }
}
REPLACE,
'file://a4.java': <<<REPLACE
package src.main.f;
public class Replace {
  public static void main(String[] args) {
    String original = "insecure";
    String c = original.concat("aaaaa");
    String c = original.replaceAll("aaaaa", "BBBB");
    original.replaceFirst("CCC", "EEE");
    System.out.println(original);
  }
}
REPLACE,

)