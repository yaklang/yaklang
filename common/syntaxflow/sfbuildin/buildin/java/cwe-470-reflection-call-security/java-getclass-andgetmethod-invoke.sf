desc(
    title: "Find Java Reflection Call Security Vulnerability via getClass() and getMethod()",
    title_zh: "通过 getClass() 和 getMethod() 发现 Java 反射调用的潜在威胁",
    type: audit,
    severity: mid,
    risk: rce,
    desc: <<<TEXT
使用 Java 的反射机制，特别是通过 `getClass()` 和 `getMethod()` 方法，可以动态地调用类的方法。这种灵活性如果被恶意利用，可能导致远程代码执行（RCE）漏洞。攻击者可以通过精心构造的输入，触发不安全的反射调用，进而执行未经授权的代码。建议对反射调用进行严格的权限控制和输入验证，以防止潜在的安全威胁。
TEXT
)


getClass()<show>.getMethod(,* as $entry).invoke(,* as $entry);
$entry #{
    until: `*?{opcode: param}<var(params)> as $__next__`,
}->;
alert $params for {
    message: "Java Reflection Call Security Vulnerability via getClass() and getMethod()",
    level: mid,
    type: audit,
};


desc(
lang: java,
'file://demo.java': <<<EOF
package com.itstyle.quartz.job;

import com.itstyle.quartz.entity.*;
import com.itstyle.quartz.service.IDetailsBeanService;
import com.itstyle.quartz.service.IMogudingService;
import com.itstyle.quartz.service.ISignInLogService;
import com.itstyle.quartz.service.IUserinfoService;
import com.itstyle.quartz.utils.ApplicationContextUtil;
import com.itstyle.quartz.utils.DateUtil;
import org.quartz.*;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;

 /*
 * @DisallowConcurrentExecution 保证上一个任务执行完后，再去执行下一个任务，这里的任务是同一个任务
 */
@DisallowConcurrentExecution
public class ChickenJob implements Job, Serializable {

    private static final long serialVersionUID = 1L;

    @Override
    public void execute(JobExecutionContext context) {
        JobDetail jobDetail = context.getJobDetail();
        JobDataMap dataMap = jobDetail.getJobDataMap();
        /**
         * 获取任务中保存的方法名字，动态调用方法
         */
        String methodName = dataMap.getString("jobMethodName");
        try {
            ChickenJob job = new ChickenJob();
            Method method = job.getClass().getMethod(methodName);
            method.invoke(job);
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
    }
}
EOF,
)