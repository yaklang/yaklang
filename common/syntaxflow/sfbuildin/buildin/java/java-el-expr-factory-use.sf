desc(
    title: "Find EL Expression Factory basic use",
    type: audit,
    level: low,
    desc: <<<TEXT
使用 `ExpressionFactory` 创建和执行 EL（Expression Language）表达式可能会引发安全风险，尤其是当表达式的内容来自不受信任的输入时。EL 表达式注入攻击允许攻击者执行任意的 EL 代码，这可能导致数据泄露、数据篡改或执行未授权的操作。尽管此示例代码中的 EL 表达式是硬编码的，但审计时应警惕类似模式在更复杂或动态上下文中的滥用。
TEXT
)

ExpressionFactory.newInstance().createValueExpression(*?{!<typeName>?{any: ExpressionFactory,StandardELContext }} as $params) as $vuln;
check $params;
alert $params

desc(
    lang: java,
    'file://expr-use.java': <<<EXPRUSE
import javax.el.ExpressionFactory;
import javax.el.StandardELContext;
import javax.el.ValueExpression;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class ElExampleServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // 创建EL表达式工厂
        ExpressionFactory factory = ExpressionFactory.newInstance();
        StandardELContext context = new StandardELContext(factory);

        // 设置变量
        context.setVariable("x", factory.createValueExpression(10, Integer.class));
        context.setVariable("y", factory.createValueExpression(20, Integer.class));

        // 执行EL表达式
        ValueExpression expression = factory.createValueExpression(context, "${x + y}", Integer.class);
        Integer result = (Integer) expression.getValue(context);

        response.getWriter().write("结果: " + result); // 输出结果
    }
}
EXPRUSE
)