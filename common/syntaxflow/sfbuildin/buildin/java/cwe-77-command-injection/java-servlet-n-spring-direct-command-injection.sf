desc(
	title: "Check Java Command Injection from Servlet and SpringMVC"
	title_zh: "检测Java Servlet和SpringMVC中的命令注入漏洞"
	type: vuln
	risk:"命令注入",
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   命令注入（Command Injection）漏洞发生在应用程序将用户可控的数据拼接到系统命令中执行时，攻击者可以构造恶意输入，改变原始命令的逻辑或执行任意系统命令。当Java应用程序通过`Runtime.getRuntime().exec()`、`ProcessBuilder`等方法执行外部命令，并且命令字符串中直接或间接包含了来自用户请求（如Servlet或SpringMVC的参数）且未经充分过滤验证的数据时，就可能存在命令注入漏洞。

2. **触发场景**
   以下示例展示了在Servlet和SpringMVC中通过直接使用用户输入构建并执行命令的场景：

   **Servlet示例：**
   ```java
   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       String userInput = request.getParameter("command");
       // 直接使用用户输入拼接到命令中
       Process process = Runtime.getRuntime().exec(userInput);
       // ... 处理命令执行结果 ...
   }
   ```
   攻击者可以通过`command`参数注入恶意命令，例如输入`ls -l /; rm -rf /`。

   **SpringMVC示例：**
   ```java
   @GetMapping("/execute/{command}")
   public String executeCommand(@PathVariable String command) {
       try {
           // 直接使用路径变量作为命令
           Process process = Runtime.getRuntime().exec(command);
           // ... 处理命令执行结果 ...
       } catch (IOException e) {
           // ... 错误处理 ...
       }
       return "Output";
   }
   ```
   攻击者可以通过`{command}`路径变量注入恶意命令。

3. **潜在影响**
   - 执行任意系统命令，可能导致服务器被完全控制。
   - 读取、修改或删除系统文件。
   - 安装恶意软件或后门。
   - 窃取敏感数据。
   - 利用受感染服务器作为跳板攻击其他系统。
   - 拒绝服务攻击。
DESC
	rule_id: "31093d24-ee2b-448b-ba5a-111d99bbf77c"
	solution: <<<SOLUTION
### 修复建议

#### 1. 避免直接拼接外部输入到命令中
尽量避免将用户可控的、复杂的字符串直接作为命令的参数传递给命令执行函数。如果必须执行外部命令，应采用更安全的方式。

#### 2. 使用ProcessBuilder的参数列表形式
`ProcessBuilder`提供了一种更安全的执行命令的方式，即将命令和每个参数作为单独的字符串项传递给构造函数或`command()`方法，而不要将整个命令字符串传递给一个参数。这样系统会负责处理参数分隔，避免了命令注入。
```java
// 修复代码示例
String userInput = request.getParameter("arg");
// ProcessBuilder安全用法：命令和参数分开
ProcessBuilder pb = new ProcessBuilder("ls", "-l", userInput); // 假设只想列出特定文件
pb.redirectErrorStream(true);
Process process = pb.start();
```

#### 3. 对外部输入进行严格的白名单或强校验
如果需要基于用户输入动态构建命令，只允许执行白名单中的命令或参数，并对所有输入进行严格的格式、类型和内容校验，拒绝一切不符合预期的输入。例如，如果只允许执行ping命令，并且参数只能是IP地址或域名，则应对输入进行相应的格式校验。
```java
// 修复代码示例：白名单校验参数
String userInput = request.getParameter("target");
// 假设只允许ping一个合法的IP地址或域名
if (!isValidHostnameOrIp(userInput)) { // 实现isValidHostnameOrIp方法进行校验
    throw new IllegalArgumentException("Invalid ping target");
}
ProcessBuilder pb = new ProcessBuilder("ping", "-c 4", userInput);
Process process = pb.start();
```

#### 4. 最小化命令执行权限
运行应用程序的用户应具有执行外部命令的最低限度权限，以限制即使发生命令注入时攻击者能够造成的损害范围。

#### 5. 考虑替代方案
许多系统命令的功能可以通过Java标准库或第三方库来实现，例如使用Java的文件操作API代替`ls`或`rm`命令。尽量利用安全的API代替直接调用外部命令。
SOLUTION
	reference: <<<REFERENCE
[CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')](https://cwe.mitre.org/data/definitions/77.html)
REFERENCE
)



<include('java-servlet-param')> as $source;
<include('java-spring-mvc-param')> as $source;
check $source;

<include('java-runtime-exec-sink')> as $sink;
<include('java-command-exec-sink')> as $sink;
check $sink;

$sink #{
    until: "* & $source"
}-> as $controlled_source_site 

$controlled_source_site<dataflow(
    exclude: "*?{(opcode: call) && !(* & $source)}"
)> as $high_source_site 


alert $high_source_site	for {
	title: "Check Java Command Injection from Servlet and SpringMVC",
	title_zh: "检测Java Servlet和SpringMVC中的命令注入漏洞",
	solution: <<<CODE
### 修复建议

#### 1. 避免直接拼接外部输入到命令中
尽量避免将用户可控的、复杂的字符串直接作为命令的参数传递给命令执行函数。如果必须执行外部命令，应采用更安全的方式。

#### 2. 使用ProcessBuilder的参数列表形式
`ProcessBuilder`提供了一种更安全的执行命令的方式，即将命令和每个参数作为单独的字符串项传递给构造函数或`command()`方法，而不要将整个命令字符串传递给一个参数。这样系统会负责处理参数分隔，避免了命令注入。
```java
// 修复代码示例
String userInput = request.getParameter("arg");
// ProcessBuilder安全用法：命令和参数分开
ProcessBuilder pb = new ProcessBuilder("ls", "-l", userInput); // 假设只想列出特定文件
pb.redirectErrorStream(true);
Process process = pb.start();
```

#### 3. 对外部输入进行严格的白名单或强校验
如果需要基于用户输入动态构建命令，只允许执行白名单中的命令或参数，并对所有输入进行严格的格式、类型和内容校验，拒绝一切不符合预期的输入。例如，如果只允许执行ping命令，并且参数只能是IP地址或域名，则应对输入进行相应的格式校验。
```java
// 修复代码示例：白名单校验参数
String userInput = request.getParameter("target");
// 假设只允许ping一个合法的IP地址或域名
if (!isValidHostnameOrIp(userInput)) { // 实现isValidHostnameOrIp方法进行校验
    throw new IllegalArgumentException("Invalid ping target");
}
ProcessBuilder pb = new ProcessBuilder("ping", "-c 4", userInput);
Process process = pb.start();
```

#### 4. 最小化命令执行权限
运行应用程序的用户应具有执行外部命令的最低限度权限，以限制即使发生命令注入时攻击者能够造成的损害范围。

#### 5. 考虑替代方案
许多系统命令的功能可以通过Java标准库或第三方库来实现，例如使用Java的文件操作API代替`ls`或`rm`命令。尽量利用安全的API代替直接调用外部命令。
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   命令注入（Command Injection）漏洞发生在应用程序将用户可控的数据拼接到系统命令中执行时，攻击者可以构造恶意输入，改变原始命令的逻辑或执行任意系统命令。当Java应用程序通过`Runtime.getRuntime().exec()`、`ProcessBuilder`等方法执行外部命令，并且命令字符串中直接或间接包含了来自用户请求（如Servlet或SpringMVC的参数）且未经充分过滤验证的数据时，就可能存在命令注入漏洞。

2. **触发场景**
   以下示例展示了在Servlet和SpringMVC中通过直接使用用户输入构建并执行命令的场景：
   
   **Servlet示例：**
   ```java
   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       String userInput = request.getParameter("command");
       // 直接使用用户输入拼接到命令中
       Process process = Runtime.getRuntime().exec(userInput);
       // ... 处理命令执行结果 ...
   }
   ```
   攻击者可以通过`command`参数注入恶意命令，例如输入`ls -l /; rm -rf /`。
   
   **SpringMVC示例：**
   ```java
   @GetMapping("/execute/{command}")
   public String executeCommand(@PathVariable String command) {
       try {
           // 直接使用路径变量作为命令
           Process process = Runtime.getRuntime().exec(command);
           // ... 处理命令执行结果 ...
       } catch (IOException e) {
           // ... 错误处理 ...
       }
       return "Output";
   }
   ```
   攻击者可以通过`{command}`路径变量注入恶意命令。
   
   此外，规则还覆盖了其他常见的命令执行汇聚点，如Apache Commons Exec, Picocli, System-Command-Executor, zt-exec, NuProcess, org.apache.hadoop.util.Shell等，以及通过ProcessBuilder构建并执行命令的场景。

3. **潜在影响**
   - 执行任意系统命令，可能导致服务器被完全控制。
   - 读取、修改或删除系统文件。
   - 安装恶意软件或后门。
   - 窃取敏感数据。
   - 利用受感染服务器作为跳板攻击其他系统。
   - 拒绝服务攻击。
CODE
	level: "high",
	message: "发现Java代码中存在命令注入漏洞，并且数据流中间没有进行任何过滤。",
}


$controlled_source_site - $high_source_site as $normal_source_side 

alert $normal_source_side	for {
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   命令注入（Command Injection）漏洞发生在应用程序将用户可控的数据拼接到系统命令中执行时，攻击者可以构造恶意输入，改变原始命令的逻辑或执行任意系统命令。当Java应用程序通过`Runtime.getRuntime().exec()`、`ProcessBuilder`等方法执行外部命令，并且命令字符串中直接或间接包含了来自用户请求（如Servlet或SpringMVC的参数）且未经充分过滤验证的数据时，就可能存在命令注入漏洞。

2. **触发场景**
   以下示例展示了在Servlet和SpringMVC中通过直接使用用户输入构建并执行命令的场景：
   
   **Servlet示例：**
   ```java
   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       String userInput = request.getParameter("command");
       // 直接使用用户输入拼接到命令中
       Process process = Runtime.getRuntime().exec(userInput);
       // ... 处理命令执行结果 ...
   }
   ```
   攻击者可以通过`command`参数注入恶意命令，例如输入`ls -l /; rm -rf /`。
   
   **SpringMVC示例：**
   ```java
   @GetMapping("/execute/{command}")
   public String executeCommand(@PathVariable String command) {
       try {
           // 直接使用路径变量作为命令
           Process process = Runtime.getRuntime().exec(command);
           // ... 处理命令执行结果 ...
       } catch (IOException e) {
           // ... 错误处理 ...
       }
       return "Output";
   }
   ```
   攻击者可以通过`{command}`路径变量注入恶意命令。
   
   此外，规则还覆盖了其他常见的命令执行汇聚点，如Apache Commons Exec, Picocli, System-Command-Executor, zt-exec, NuProcess, org.apache.hadoop.util.Shell等，以及通过ProcessBuilder构建并执行命令的场景。

3. **潜在影响**
   - 执行任意系统命令，可能导致服务器被完全控制。
   - 读取、修改或删除系统文件。
   - 安装恶意软件或后门。
   - 窃取敏感数据。
   - 利用受感染服务器作为跳板攻击其他系统。
   - 拒绝服务攻击。
CODE
	level: "mid",
	message: "发现Java代码存在命令注入漏洞，数据流中存在过滤",
	title: "Check Java Command Injection from Servlet and SpringMVC",
	title_zh: "检测Java Servlet和SpringMVC中的命令注入漏洞",
	solution: <<<CODE
### 修复建议

#### 1. 避免直接拼接外部输入到命令中
尽量避免将用户可控的、复杂的字符串直接作为命令的参数传递给命令执行函数。如果必须执行外部命令，应采用更安全的方式。

#### 2. 使用ProcessBuilder的参数列表形式
`ProcessBuilder`提供了一种更安全的执行命令的方式，即将命令和每个参数作为单独的字符串项传递给构造函数或`command()`方法，而不要将整个命令字符串传递给一个参数。这样系统会负责处理参数分隔，避免了命令注入。
```java
// 修复代码示例
String userInput = request.getParameter("arg");
// ProcessBuilder安全用法：命令和参数分开
ProcessBuilder pb = new ProcessBuilder("ls", "-l", userInput); // 假设只想列出特定文件
pb.redirectErrorStream(true);
Process process = pb.start();
```

#### 3. 对外部输入进行严格的白名单或强校验
如果需要基于用户输入动态构建命令，只允许执行白名单中的命令或参数，并对所有输入进行严格的格式、类型和内容校验，拒绝一切不符合预期的输入。例如，如果只允许执行ping命令，并且参数只能是IP地址或域名，则应对输入进行相应的格式校验。
```java
// 修复代码示例：白名单校验参数
String userInput = request.getParameter("target");
// 假设只允许ping一个合法的IP地址或域名
if (!isValidHostnameOrIp(userInput)) { // 实现isValidHostnameOrIp方法进行校验
    throw new IllegalArgumentException("Invalid ping target");
}
ProcessBuilder pb = new ProcessBuilder("ping", "-c 4", userInput);
Process process = pb.start();
```

#### 4. 最小化命令执行权限
运行应用程序的用户应具有执行外部命令的最低限度权限，以限制即使发生命令注入时攻击者能够造成的损害范围。

#### 5. 考虑替代方案
许多系统命令的功能可以通过Java标准库或第三方库来实现，例如使用Java的文件操作API代替`ls`或`rm`命令。尽量利用安全的API代替直接调用外部命令。
CODE
}


$controlled_source_site<getPredecessors()>  as $controlled_sink_site 
$sink - $controlled_sink_site as $low_risk_sink 


alert $low_risk_sink	for {
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   命令注入（Command Injection）漏洞发生在应用程序将用户可控的数据拼接到系统命令中执行时，攻击者可以构造恶意输入，改变原始命令的逻辑或执行任意系统命令。当Java应用程序通过`Runtime.getRuntime().exec()`、`ProcessBuilder`等方法执行外部命令，并且命令字符串中直接或间接包含了来自用户请求（如Servlet或SpringMVC的参数）且未经充分过滤验证的数据时，就可能存在命令注入漏洞。

2. **触发场景**
   以下示例展示了在Servlet和SpringMVC中通过直接使用用户输入构建并执行命令的场景：
   
   **Servlet示例：**
   ```java
   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       String userInput = request.getParameter("command");
       // 直接使用用户输入拼接到命令中
       Process process = Runtime.getRuntime().exec(userInput);
       // ... 处理命令执行结果 ...
   }
   ```
   攻击者可以通过`command`参数注入恶意命令，例如输入`ls -l /; rm -rf /`。
   
   **SpringMVC示例：**
   ```java
   @GetMapping("/execute/{command}")
   public String executeCommand(@PathVariable String command) {
       try {
           // 直接使用路径变量作为命令
           Process process = Runtime.getRuntime().exec(command);
           // ... 处理命令执行结果 ...
       } catch (IOException e) {
           // ... 错误处理 ...
       }
       return "Output";
   }
   ```
   攻击者可以通过`{command}`路径变量注入恶意命令。
   
   此外，规则还覆盖了其他常见的命令执行汇聚点，如Apache Commons Exec, Picocli, System-Command-Executor, zt-exec, NuProcess, org.apache.hadoop.util.Shell等，以及通过ProcessBuilder构建并执行命令的场景。

3. **潜在影响**
   - 执行任意系统命令，可能导致服务器被完全控制。
   - 读取、修改或删除系统文件。
   - 安装恶意软件或后门。
   - 窃取敏感数据。
   - 利用受感染服务器作为跳板攻击其他系统。
   - 拒绝服务攻击。
CODE
	level: "low",
	message: "发现Java代码中可能存在命令注入，但并没有发现参数可控。",
	title: "Check Java Command Injection from Servlet and SpringMVC",
	title_zh: "检测Java Servlet和SpringMVC中的命令注入漏洞",
}


desc(
	language: java
	alert_min:1
	'file://directly.java': <<<EOF
package com.example;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import java.io.*;

public class CommandInjectionServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String otherInput = request.getParameter("ccc");
        String userInput = request.getParameter("command");
        String command = "cmd.exe /c " + userInput; // 直接使用用户输入
        Process process = Runtime.getRuntime().exec(userInput);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        PrintWriter out = response.getWriter();

        while ((line = reader.readLine()) != null) {
            out.println(line);
        }
    }
}
EOF
)

desc(
	language: java
	'safefile://a.java': <<<EOF
package com.example;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import java.io.*;

public class CommandInjectionServlet2 extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String otherInput = request.getParameter("ccc");
        String userInput = request.getParameter("cmd");
        String command = "cmd.exe /c";

        Process process = Runtime.getRuntime().exec(command);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        PrintWriter out = response.getWriter();

        while ((line = reader.readLine()) != null) {
            out.println(line);
        }
    }
}
EOF
)

desc(
	language: java
	alert_high:1
	'file://directly.java':<<<EOF
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

@SpringBootApplication
@RestController
public class CommandExecutionApplication {
    @GetMapping("/execute/{command}")
    public String executeCommand(@PathVariable String command) {
        StringBuilder output = new StringBuilder();
        try {
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append(System.lineSeparator());
            }

            int exitCode = process.waitFor();
            if (exitCode == 0) {
                return "Command executed successfully. Output: " + output.toString();
            } else {
                return "Command failed with exit code: " + exitCode;
            }
        } catch (IOException | InterruptedException e) {
            Thread.currentThread().interrupt();
            return "Error executing command: " + e.getMessage();
        }

    }
}
EOF
)

desc(
	lang:java
	alert_low:1
	"file://complexDemo1.java":<<<EOF
    package com.example;

    public class CmdObject {
        private String cmd1;
        private String cmd2;

        public void setCmd(String s) {
            this.cmd1 = s;
        }

        public void setCmd2(String s) {
            this.cmd2 = s;
        }

        public String getCmd() {
            return this.cmd1;
        }

        public String getCmd2() {
            return this.cmd2;
        }
    }
    @RestController()
    public class AstTaintCase001 {
    @PostMapping(value = "Cross_Class_Command_Injection-1")
          public Map<String, Object> CrossClassTest1(@RequestParam String cmd) {
              Map<String, Object> modelMap = new HashMap<>();
              try {
                  CmdObject simpleBean = new CmdObject();
                  simpleBean.setCmd(cmd);
                  simpleBean.setCmd2("cd /");
                  Runtime.getRuntime().exec(simpleBean.getCmd());
                  modelMap.put("status", "success");
              } catch (Exception e) {
                  modelMap.put("status", "error");
              }
              return modelMap;
          }

       @PostMapping(value = "Cross_Class_Command_Injection-2")
             public Map<String, Object> CrossClassTest2(@RequestParam String cmd) {
                 Map<String, Object> modelMap = new HashMap<>();
                 try {
                     CmdObject simpleBean = new CmdObject();
                     simpleBean.setCmd(cmd);
                     simpleBean.setCmd2("cd /");
                     Runtime.getRuntime().exec(simpleBean.getCmd2());
                     modelMap.put("status", "success");
                 } catch (Exception e) {
                     modelMap.put("status", "error");
                 }
                 return modelMap;
             }
    }
EOF
)

desc(
	lang:'java'
	alert_num:1
	'file://processExec.java':<<<EOF
   package org.example.moudels.rce.command;

   import io.swagger.annotations.Api;
   import io.swagger.annotations.ApiOperation;
   import lombok.extern.slf4j.Slf4j;
   import org.springframework.stereotype.Controller;
   import org.springframework.web.bind.annotation.CrossOrigin;
   import org.springframework.web.bind.annotation.RequestMapping;
   import org.springframework.web.bind.annotation.RequestParam;
   import org.springframework.web.bind.annotation.ResponseBody;
   import top.whgojp.common.utils.R;

   import java.io.BufferedReader;
   import java.io.IOException;
   import java.io.InputStream;
   import java.io.InputStreamReader;
   import java.lang.reflect.Method;
   import java.util.Arrays;
   import java.util.List;
   import java.util.Map;

   @Slf4j
   @Api(value = "CommandController", tags = "RCE - 命令注入")
   @Controller
   @CrossOrigin(origins = "*")
   @RequestMapping("/command")
   public class CommandController {

       @RequestMapping("/vul1")
       @ResponseBody
       public R vul1(@RequestParam("payload") String payload) throws IOException {
           String[] command = {"sh", "-c", payload};

           ProcessBuilder pb = new ProcessBuilder(command);
           pb.redirectErrorStream(true);

           Process process = pb.start();
           InputStream inputStream = process.getInputStream();
           BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
           String line;
           StringBuilder output = new StringBuilder();
           while ((line = reader.readLine()) != null) {
               output.append(line).append("\n");
           }
           return R.ok(output.toString());
       }
   }
EOF
)

desc(
	lang:java
	alert_num:1
	'file://processImplExec.java':<<<EOF
     package org.example.moudels.rce.command;

       import io.swagger.annotations.Api;
       import io.swagger.annotations.ApiOperation;
       import lombok.extern.slf4j.Slf4j;
       import org.springframework.stereotype.Controller;
       import org.springframework.web.bind.annotation.CrossOrigin;
       import org.springframework.web.bind.annotation.RequestMapping;
       import org.springframework.web.bind.annotation.RequestParam;
       import org.springframework.web.bind.annotation.ResponseBody;
       import top.whgojp.common.utils.R;

       import java.io.BufferedReader;
       import java.io.IOException;
       import java.io.InputStream;
       import java.io.InputStreamReader;
       import java.lang.reflect.Method;
       import java.util.Arrays;
       import java.util.List;
       import java.util.Map;
    @Slf4j
   @Api(value = "CommandController", tags = "RCE - 命令注入")
   @Controller
   @CrossOrigin(origins = "*")
   @RequestMapping("/command")
   public class CommandController {
           @RequestMapping("/vul3")
           @ResponseBody
           public R vul3(String payload) throws Exception {
               // 获取 ProcessImpl 类对象
               Class<?> clazz = Class.forName("java.lang.ProcessImpl");

               // 获取 start 方法
               Method method = clazz.getDeclaredMethod("start", String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, boolean.class);
               method.setAccessible(true);

               Process process = (Process) method.invoke(null, new String[]{payload}, null, null, null, false);
               try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                   StringBuilder output = new StringBuilder();
                   String line;
                   while ((line = reader.readLine()) != null) {
                       output.append(line).append("\n");
                   }
                   return R.ok(output.toString());
               }
           }
       }
EOF
)
