desc(
    title: "Springframework Paremeter Passed into Command Injection Sink",
    title_zh: 'Servlet & Springframework 基础参数命令注入',
    type: vuln,
    risk:"命令注入",
    desc: <<<TEXT
    该规则用于审计Java代码中以Servlet和Springframework传入命令注入的参数为污染源(source)，以命令执行为污染汇聚点(sink)的命令执行规则。
    规则覆盖的命令执行点包括：
    - Runtime.getRuntime().exec()
    - ProcessBuilder
    - Apache Commons Exec
    - Picocli
    - System-Command-Executor
    - zt-exec
    - NuProcess
    - org.apache.hadoop.util.Shell
TEXT
)

<include('java-servlet-param')> as $source;
<include('java-spring-mvc-param')> as $source;
check $source;

<include('java-runtime-exec-sink')> as $sink;
<include('java-command-exec-sink')> as $sink;
check $sink;

$sink #{
    include:`<self> & $source`,
    exclude:`<self>?{opcode:call}?{!<self> & $source}`
}->as $high;

alert $high for{
    message: "发现Java代码中存在命令注入漏洞，并且数据流中间没有进行任何过滤。",
    level: high,
};

$sink #{
    include:`<self> & $source`,
}->as $result;

$result - $high as $low;
alert $low for{
    message: "发现Java代码中可能存在命令注入漏洞。",
    level: low,
};

desc(
language: java,
alert_min:1,
'file://directly.java': <<<EOF
package com.example;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import java.io.*;

public class CommandInjectionServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String otherInput = request.getParameter("ccc");
        String userInput = request.getParameter("command");
        String command = "cmd.exe /c " + userInput; // 直接使用用户输入
        Process process = Runtime.getRuntime().exec(userInput);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        PrintWriter out = response.getWriter();

        while ((line = reader.readLine()) != null) {
            out.println(line);
        }
    }
}
EOF
)

desc(
language: java,
'safefile://a.java': <<<EOF
package com.example;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import java.io.*;

public class CommandInjectionServlet2 extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String otherInput = request.getParameter("ccc");
        String userInput = request.getParameter("cmd");
        String command = "cmd.exe /c";

        Process process = Runtime.getRuntime().exec(command);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        PrintWriter out = response.getWriter();

        while ((line = reader.readLine()) != null) {
            out.println(line);
        }
    }
}
EOF
)

desc(
language: java,
alert_high:1,
'file://directly.java':<<<EOF
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

@SpringBootApplication
@RestController
public class CommandExecutionApplication {
    @GetMapping("/execute/{command}")
    public String executeCommand(@PathVariable String command) {
        StringBuilder output = new StringBuilder();
        try {
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append(System.lineSeparator());
            }

            int exitCode = process.waitFor();
            if (exitCode == 0) {
                return "Command executed successfully. Output: " + output.toString();
            } else {
                return "Command failed with exit code: " + exitCode;
            }
        } catch (IOException | InterruptedException e) {
            Thread.currentThread().interrupt();
            return "Error executing command: " + e.getMessage();
        }

    }
}
EOF
)

desc(
    lang:java,
    alert_low:1,
    "file://complexDemo1.java":<<<EOF
    package com.example;

    public class CmdObject {
        private String cmd1;
        private String cmd2;

        public void setCmd(String s) {
            this.cmd1 = s;
        }

        public void setCmd2(String s) {
            this.cmd2 = s;
        }

        public String getCmd() {
            return this.cmd1;
        }

        public String getCmd2() {
            return this.cmd2;
        }
    }
    @RestController()
    public class AstTaintCase001 {
    @PostMapping(value = "Cross_Class_Command_Injection-1")
          public Map<String, Object> CrossClassTest1(@RequestParam String cmd) {
              Map<String, Object> modelMap = new HashMap<>();
              try {
                  CmdObject simpleBean = new CmdObject();
                  simpleBean.setCmd(cmd);
                  simpleBean.setCmd2("cd /");
                  Runtime.getRuntime().exec(simpleBean.getCmd());
                  modelMap.put("status", "success");
              } catch (Exception e) {
                  modelMap.put("status", "error");
              }
              return modelMap;
          }

       @PostMapping(value = "Cross_Class_Command_Injection-2")
             public Map<String, Object> CrossClassTest2(@RequestParam String cmd) {
                 Map<String, Object> modelMap = new HashMap<>();
                 try {
                     CmdObject simpleBean = new CmdObject();
                     simpleBean.setCmd(cmd);
                     simpleBean.setCmd2("cd /");
                     Runtime.getRuntime().exec(simpleBean.getCmd2());
                     modelMap.put("status", "success");
                 } catch (Exception e) {
                     modelMap.put("status", "error");
                 }
                 return modelMap;
             }
    }
EOF
)

desc(
    lang:'java',
    alert_num:1,
    'file://processExec.java':<<<EOF
   package org.example.moudels.rce.command;

   import io.swagger.annotations.Api;
   import io.swagger.annotations.ApiOperation;
   import lombok.extern.slf4j.Slf4j;
   import org.springframework.stereotype.Controller;
   import org.springframework.web.bind.annotation.CrossOrigin;
   import org.springframework.web.bind.annotation.RequestMapping;
   import org.springframework.web.bind.annotation.RequestParam;
   import org.springframework.web.bind.annotation.ResponseBody;
   import top.whgojp.common.utils.R;

   import java.io.BufferedReader;
   import java.io.IOException;
   import java.io.InputStream;
   import java.io.InputStreamReader;
   import java.lang.reflect.Method;
   import java.util.Arrays;
   import java.util.List;
   import java.util.Map;

   @Slf4j
   @Api(value = "CommandController", tags = "RCE - 命令注入")
   @Controller
   @CrossOrigin(origins = "*")
   @RequestMapping("/command")
   public class CommandController {

       @RequestMapping("/vul1")
       @ResponseBody
       public R vul1(@RequestParam("payload") String payload) throws IOException {
           String[] command = {"sh", "-c", payload};

           ProcessBuilder pb = new ProcessBuilder(command);
           pb.redirectErrorStream(true);

           Process process = pb.start();
           InputStream inputStream = process.getInputStream();
           BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
           String line;
           StringBuilder output = new StringBuilder();
           while ((line = reader.readLine()) != null) {
               output.append(line).append("\n");
           }
           return R.ok(output.toString());
       }
   }
EOF
)

desc(
    lang:java,
    alert_num:1,
    'file://processImplExec.java':<<<EOF
     package org.example.moudels.rce.command;

       import io.swagger.annotations.Api;
       import io.swagger.annotations.ApiOperation;
       import lombok.extern.slf4j.Slf4j;
       import org.springframework.stereotype.Controller;
       import org.springframework.web.bind.annotation.CrossOrigin;
       import org.springframework.web.bind.annotation.RequestMapping;
       import org.springframework.web.bind.annotation.RequestParam;
       import org.springframework.web.bind.annotation.ResponseBody;
       import top.whgojp.common.utils.R;

       import java.io.BufferedReader;
       import java.io.IOException;
       import java.io.InputStream;
       import java.io.InputStreamReader;
       import java.lang.reflect.Method;
       import java.util.Arrays;
       import java.util.List;
       import java.util.Map;
    @Slf4j
   @Api(value = "CommandController", tags = "RCE - 命令注入")
   @Controller
   @CrossOrigin(origins = "*")
   @RequestMapping("/command")
   public class CommandController {
           @RequestMapping("/vul3")
           @ResponseBody
           public R vul3(String payload) throws Exception {
               // 获取 ProcessImpl 类对象
               Class<?> clazz = Class.forName("java.lang.ProcessImpl");

               // 获取 start 方法
               Method method = clazz.getDeclaredMethod("start", String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, boolean.class);
               method.setAccessible(true);

               Process process = (Process) method.invoke(null, new String[]{payload}, null, null, null, false);
               try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                   StringBuilder output = new StringBuilder();
                   String line;
                   while ((line = reader.readLine()) != null) {
                       output.append(line).append("\n");
                   }
                   return R.ok(output.toString());
               }
           }
       }
EOF
)