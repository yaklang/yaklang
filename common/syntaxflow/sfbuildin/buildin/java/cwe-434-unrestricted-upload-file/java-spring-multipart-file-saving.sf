desc(
	title: "Audit Java Spring Framework Multipart File Saving"
	title_zh: "审计Java Spring Framework文件上传保存"
	risk:"rce"
	desc: <<<DESC
### 风险描述

1. **风险原理**
   该规则旨在识别 Java Spring Framework 应用中处理文件上传及潜在的文件保存操作。当应用程序允许用户上传文件时，如果未对上传的文件进行严格的类型、大小、内容等安全检查，且直接将文件保存到 Web 可访问的目录或与执行环境相关的目录中，就可能引入文件上传漏洞（CWE-434：Unrestricted Upload of File with Dangerous Type）。攻击者可以上传恶意文件（例如，包含 WebShell 的脚本文件、可执行文件或恶意文档），并通过访问该文件在服务器上执行任意代码、窃取敏感信息或进一步渗透系统。

2. **触发场景**
   规则检测到使用了 `org.springframework.web.multipart.MultipartFile` 等文件上传接口，并通过 `getInputStream()` 获取输入流后，调用了常见的表示文件保存或拷贝操作的方法，如 `save`、`copy`、`transfer`、`fileutil` 等。这表明存在文件上传的处理流程，但规则本身不判断是否存在漏洞，仅标记存在文件上传及保存的代码逻辑，需要进一步人工审计或结合其他规则（例如，用于检测文件类型校验、目录限制等）来确认是否存在实际的漏洞。以下是一个可能的触发场景示例（存在漏洞的代码，仅用于说明规则检测到文件上传和保存的行为）：

   ```java
   @PostMapping("/upload")
   public String handleFileUpload(@RequestParam("file") MultipartFile file, RedirectAttributes redirectAttributes) {
       if (!file.isEmpty()) {
           try {
               // 未进行文件类型校验，直接保存
               Path filepath = Paths.get("/path/to/uploadDir/", file.getOriginalFilename());
               
               // 直接使用transferTo保存文件，忽略安全检查
               file.transferTo(filepath.toFile()); 

               redirectAttributes.addFlashAttribute("message", "You successfully uploaded " + file.getOriginalFilename() + "!");
           } catch (Exception e) {
               redirectAttributes.addFlashAttribute("message", "Failed to upload " + file.getOriginalFilename() + " => " + e.getMessage());
           }
       } else {
           redirectAttributes.addFlashAttribute("message", "Failed to upload because the file was empty.");
       }

       return "redirect:/uploadStatus";
   }
   ```

3. **潜在影响**
   - **远程代码执行 (RCE)**：如果上传恶意脚本（如 `.jsp`, `.php` 文件）并保存到 Web 目录，攻击者可通过访问该文件执行任意服务器端代码。
   - **拒绝服务 (DoS)**：攻击者可能上传大量或超大文件，耗尽服务器存储空间或带宽。
   - **数据泄露或篡改**：上传恶意文件可能破坏现有数据或用于进一步获取敏感信息。

该规则属于审计性质，旨在帮助安全人员快速定位代码中处理文件上传的核心逻辑，以便进行有针对性的安全审计。
DESC
	rule_id: "5a5c7d06-ece9-4a26-879c-e6e91d73b01e"
	solution: <<<SOLUTION
### 修复建议

针对文件上传功能，应遵循以下安全实践来防止文件上传漏洞：

1. **严格的文件类型校验**
   - **白名单限制**：只允许特定类型的文件上传，例如只允许图片 (`.jpg`, `.png`) 或特定文档 (`.pdf`, `.doc`)。基于文件扩展名校验通常不够安全，应结合 MIME 类型和服务端文件内容魔数（Magic Bytes）进行校验，确保文件内容的真实类型符合预期。
   ```java
   // 示例：白名单校验文件扩展名（基础校验）
   String originalFilename = file.getOriginalFilename();
   String fileExtension = originalFilename.substring(originalFilename.lastIndexOf(".") + 1).toLowerCase();
   Set<String> allowedExtensions = new HashSet<>(Arrays.asList("jpg", "png", "gif", "pdf"));
   if (!allowedExtensions.contains(fileExtension)) {
       throw new IllegalArgumentException("不允许上传的文件类型: " + fileExtension);
   }
   
   // 示例：结合MIME类型校验（更可靠）
   String contentType = file.getContentType();
   Set<String> allowedContentTypes = new HashSet<>(Arrays.asList("image/jpeg", "image/png", "application/pdf"));
   if (!allowedContentTypes.contains(contentType)) {
       throw new IllegalArgumentException("不允许上传的内容类型: " + contentType);
   }
   // 更安全的做法还需要读取文件头部的魔数进一步确定文件类型
   ```

2. **限制文件大小**
   - 对上传文件的大小进行限制，防止 DoS 攻击。Spring Framework 通常可以在配置中设置最大文件大小。
   ```java
   // 在 application.properties 或 application.yml 中配置
   # application.properties
   spring.servlet.multipart.max-file-size=10MB
   spring.servlet.multipart.max-request-size=100MB
   ```

3. **安全的文件保存路径**
   - 将上传的文件保存到非 Web 可访问的目录，或者保存到 Web 可访问目录但通过程序重命名文件并进行访问控制。
   - 避免将文件名直接使用用户上传的文件名，应重新生成安全的文件名（例如，使用 UUID）或对文件名进行严格过滤，防止路径穿越攻击。
   ```java
   // 示例：生成UUID作为新文件名并保存到指定安全目录
   String uniqueFileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename(); // 可以在此基础上进一步过滤originalFilename
   Path uploadPath = Paths.get("/usr/local/app/uploads"); // 非Web可访问目录
   Path filepath = uploadPath.resolve(uniqueFileName);
   
   try {
       Files.createDirectories(uploadPath); // 创建目录如果不存在
       file.transferTo(filepath);
       // 记录文件路径并保存到数据库，通过应用程序进行访问控制
   } catch (IOException e) {
       // 处理异常
   }
   ```

4. **对文件内容进行安全扫描**
   - 对上传的文件进行病毒扫描、恶意代码扫描或敏感信息扫描。

5. **目录穿越防护**
   - 确保在构建文件保存路径时，对用户提供的任何与路径相关的输入（如文件名、目录名）进行严格的清理或过滤，防止攻击者通过 `../` 等方式进行目录穿越。

执行以上安全措施可以显著降低文件上传功能带来的安全风险。
SOLUTION
	reference: <<<REFERENCE
[CWE-434: Unrestricted Upload of File with Dangerous Type](https://cwe.mitre.org/data/definitions/434.html)
REFERENCE
)

<include('java-spring-mvc-param')>?{<typeName>?{have: "MultipartFile"}} as $entry;
$entry.getInputStream()<getCall>?{<getCallee><name>?{have: /(?i)save|copy|transfer|fileutil/}} as $result;
alert $result	for {
	title: "Audit Java Spring Framework Multipart File Saving",
	title_zh: "审计Java Spring Framework文件上传保存",
	level: "mid",
	message_zh: "识别到 Java Spring Framework 中处理文件上传的代码和可能的文件落地点",
	message: "Identified Java Spring Framework code handling file upload and possible file saving location",
}




//desc(
//lang: java,
//alert_min:1,
//'file://a.java': <<<CODE
//package com.ibeetl.admin.core.web;
//
//import java.io.IOException;
//import java.io.InputStream;
//import java.io.OutputStream;
//import java.net.URLEncoder;
//
//import javax.servlet.http.HttpServletResponse;
//
//import org.apache.commons.logging.Log;
//import org.apache.commons.logging.LogFactory;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Controller;
//import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.PathVariable;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.ResponseBody;
//import org.springframework.web.multipart.MultipartFile;
//import org.springframework.web.servlet.ModelAndView;
//
//import com.ibeetl.admin.core.entity.CoreOrg;
//import com.ibeetl.admin.core.entity.CoreUser;
//import com.ibeetl.admin.core.file.FileItem;
//import com.ibeetl.admin.core.file.FileService;
//import com.ibeetl.admin.core.service.CorePlatformService;
//import com.ibeetl.admin.core.util.FileUtil;
//
//@Controller
//public class FileSystemContorller {
//private final Log log = LogFactory.getLog(this.getClass());
//
//@Autowired
//CorePlatformService platformService ;
//
//private static final String MODEL = "/core/file";
//
///*附件类操作*/
//@PostMapping(MODEL + "/uploadAttachment.json")
//@ResponseBody
//public JsonResult uploadFile(@RequestParam("file") MultipartFile file,String batchFileUUID,String bizType,String bizId) throws IOException {
//if(file.isEmpty()) {
//return JsonResult.fail();
//}
//CoreUser user = platformService.getCurrentUser();
//CoreOrg  org = platformService.getCurrentOrg();
//FileItem fileItem = fileService.createFileItem(file.getOriginalFilename(), bizType, bizId, user.getId(), org.getId(), batchFileUUID,null);
//OutputStream os = fileItem.openOutpuStream();
//FileUtil.copy(file.getInputStream(), os);
//return JsonResult.success(fileItem);
//}
//
//@PostMapping(MODEL + "/deleteAttachment.json")
//@ResponseBody
//public JsonResult deleteFile(Long fileId,String batchFileUUID ) throws IOException {
//fileService.removeFile(fileId, batchFileUUID);
//return JsonResult.success();
//}
//
//@GetMapping(MODEL + "/download/{fileId}/{batchFileUUID}/{name}")
//public ModelAndView download(HttpServletResponse response,@PathVariable Long fileId,@PathVariable  String batchFileUUID ) throws IOException {
//FileItem item = fileService.getFileItemById(fileId,batchFileUUID);
//response.setHeader("Content-Disposition", "attachment; filename="+URLEncoder.encode(item.getName(),"UTF-8"));
//item.copy(response.getOutputStream());
//return null;
//}
//
//
///*execl 导入导出*/
//
//@Autowired
//FileService fileService;
//@GetMapping(MODEL + "/get.do")
//public ModelAndView index(HttpServletResponse response,String id) throws IOException {
//String path = id;
//response.setContentType("text/html; charset = UTF-8");
//FileItem fileItem = fileService.loadFileItemByPath(path);
//response.setHeader("Content-Disposition", "attachment; filename="+java.net.URLEncoder.encode(fileItem.getName(), "UTF-8"));
//fileItem.copy(response.getOutputStream());
//if(fileItem.isTemp()) {
//fileItem.delete();
//}
//return null;
//}
//
//@GetMapping(MODEL + "/downloadTemplate.do")
//public ModelAndView dowloadTemplate(HttpServletResponse response,String path) throws IOException {
//response.setContentType("text/html; charset = UTF-8");
//int start1 = path.lastIndexOf("\\");
//int start2 = path.lastIndexOf("/");
//if(start2>start1) {
//start1 = start2;
//}
//String file = path.substring(start1+1);
//response.setHeader("Content-Disposition", "attachment; filename="+java.net.URLEncoder.encode(file,"UTF-8"));
//InputStream input = Thread.currentThread().getContextClassLoader().getResourceAsStream("excelTemplates/"+path);
//FileUtil.copy(input, response.getOutputStream());
//return null;
//}
//
//@GetMapping(MODEL + "/simpleUpload.do")
//public ModelAndView simpleUploadPage(String uploadUrl,String templatePath,String fileType) throws IOException {
//ModelAndView view = new ModelAndView("/common/simpleUpload.html");
//view.addObject("uploadUrl",uploadUrl);
//view.addObject("templatePath",templatePath);
//view.addObject("fileType",fileType);
//
//return view;
//}
//}
//CODE
//)

desc(
	lang: java
	alert_min:1
	'file://a.java': <<<CODE
package com.ibeetl.admin.core.web;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.ibeetl.admin.core.entity.CoreOrg;
import com.ibeetl.admin.core.entity.CoreUser;
import com.ibeetl.admin.core.file.FileItem;
import com.ibeetl.admin.core.file.FileService;
import com.ibeetl.admin.core.service.CorePlatformService;
import com.ibeetl.admin.core.util.FileUtil;

@Controller
public class FileSystemContorller {
	private final Log log = LogFactory.getLog(this.getClass());

	@Autowired
	CorePlatformService platformService ;

	private static final String MODEL = "/core/file";

	/*附件类操作*/
	@PostMapping(MODEL + "/uploadAttachment.json")
    @ResponseBody
    public JsonResult uploadFile(@RequestParam("file") MultipartFile file,String batchFileUUID,String bizType,String bizId) throws IOException {
        CoreUser user = platformService.getCurrentUser();
        CoreOrg  org = platformService.getCurrentOrg();
        FileItem fileItem = fileService.createFileItem(file.getOriginalFilename(), bizType, bizId, user.getId(), org.getId(), batchFileUUID,null);
        OutputStream os = fileItem.openOutpuStream();
        FileUtil.copy(file.getInputStream(), os);
        return JsonResult.success(fileItem);
    }

    @PostMapping(MODEL + "/deleteAttachment.json")
    @ResponseBody
    public JsonResult deleteFile(Long fileId,String batchFileUUID ) throws IOException {
        fileService.removeFile(fileId, batchFileUUID);
        return JsonResult.success();
    }

    @GetMapping(MODEL + "/download/{fileId}/{batchFileUUID}/{name}")
    public ModelAndView download(HttpServletResponse response,@PathVariable Long fileId,@PathVariable  String batchFileUUID ) throws IOException {
        FileItem item = fileService.getFileItemById(fileId,batchFileUUID);
        response.setHeader("Content-Disposition", "attachment; filename="+URLEncoder.encode(item.getName(),"UTF-8"));
        item.copy(response.getOutputStream());
        return null;
    }


	/*execl 导入导出*/

	@Autowired
	FileService fileService;
	@GetMapping(MODEL + "/get.do")
	public ModelAndView index(HttpServletResponse response,String id) throws IOException {
	     String path = id;
		 response.setContentType("text/html; charset = UTF-8");
		 FileItem fileItem = fileService.loadFileItemByPath(path);
		 response.setHeader("Content-Disposition", "attachment; filename="+java.net.URLEncoder.encode(fileItem.getName(), "UTF-8"));
		 fileItem.copy(response.getOutputStream());
		 if(fileItem.isTemp()) {
		     fileItem.delete();
		 }
		 return null;
	}

	@GetMapping(MODEL + "/downloadTemplate.do")
    public ModelAndView dowloadTemplate(HttpServletResponse response,String path) throws IOException {
         response.setContentType("text/html; charset = UTF-8");
         int start1 = path.lastIndexOf("\\");
         int start2 = path.lastIndexOf("/");
         if(start2>start1) {
             start1 = start2;
         }
         String file = path.substring(start1+1);
         response.setHeader("Content-Disposition", "attachment; filename="+java.net.URLEncoder.encode(file,"UTF-8"));
         InputStream input = Thread.currentThread().getContextClassLoader().getResourceAsStream("excelTemplates/"+path);
         FileUtil.copy(input, response.getOutputStream());
         return null;
    }

   @GetMapping(MODEL + "/simpleUpload.do")
    public ModelAndView simpleUploadPage(String uploadUrl,String templatePath,String fileType) throws IOException {
       ModelAndView view = new ModelAndView("/common/simpleUpload.html");
       view.addObject("uploadUrl",uploadUrl);
       view.addObject("templatePath",templatePath);
       view.addObject("fileType",fileType);

       return view;
   }
}
CODE
)
