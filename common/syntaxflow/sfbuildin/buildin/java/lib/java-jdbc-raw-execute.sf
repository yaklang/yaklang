desc(
    title: "JDBC getConnection.createStatement.executeQuery SQL",
    title_zh: "JDBC getConnection.createStatement.executeQuery SQL 执行语句",
    type: audit,
    level: 'low',
    lib: 'java-jdbc-raw-execute-sink',
    desc: <<<TEXT
    使用 `DriverManager.getConnection().createStatement().executeQuery` 直接执行 SQL 查询可能会导致 SQL 注入漏洞。SQL 注入是一种攻击技术，攻击者可以通过在输入字段中插入恶意的 SQL 代码，从而操纵后端数据库执行未授权的查询或操作。这可能导致数据泄露、数据篡改或数据库损坏等严重后果。建议使用预处理语句（PreparedStatement）来替代直接执行 SQL 查询，以有效防止 SQL 注入攻击。
TEXT
)

DriverManager.getConnection().createStatement() as $stmt;
$stmt?{!.set*()} as $checkedStmt;
$checkedStmt.executeQuery(*<slice(start=1)> as $sink);
check $sink;

$sink as $output;
alert $output;

desc(
    lang: java,
"file:///unsafe.java": <<<UNSAFE
import java.sql.*;

public class JdbcExample {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/exampledb";
        String username = "root";
        String password = "password";

        try {
            // 加载和注册 JDBC 驱动
            Class.forName("com.mysql.cj.jdbc.Driver");

            // 建立连接
            Connection conn = DriverManager.getConnection(url, username, password);

            // 创建 Statement
            Statement stmt = conn.createStatement();

            // 执行查询
            ResultSet rs = stmt.executeQuery("SELECT * FROM users");

            // 处理 ResultSet
            while (rs.next()) {
                System.out.println(rs.getString("username"));
            }

            // 关闭连接
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
UNSAFE
)