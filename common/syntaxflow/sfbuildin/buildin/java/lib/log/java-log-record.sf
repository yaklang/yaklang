desc(
	title_zh: "查找Java日志记录方法"
	title: "Find Java Logging Method"
	type:audit
	lib:'java-log-record'
	reference: <<<REFERENCE
[Java Logging API](https://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html)
[Log4j API](https://logging.apache.org/log4j/2.x/javadoc/log4j-api/org/apache/logging/log4j/Logger.html)
REFERENCE
	description: <<<DESCRIPTION
该规则用于检测Java应用程序中的日志记录方法。日志记录是应用程序中重要的调试和监控工具，但不当的日志记录可能导致信息泄露或其他安全问题。此规则审计了可能受到用户输入影响的日志记录点，特别是那些使用`log.info()`、`log.error()`等方法进行日志记录的点。
DESCRIPTION
	rule_id: "78903daf-72e2-454b-8275-91771836659b"
	solution: <<<SOLUTION
none
SOLUTION
)

/(?i)log/./(?:errorf?|infof?|warn(ing)?|log(?:rb|p)?|debug|fatal|trace|^e$)/()  as $output;
alert $output for {
	title_zh: "查找Java日志记录方法",
	level: "info",
	title: "Find Java Logging Method",
}


desc(
	lang:java
	alert_num:2
	"file://demo.java":<<<CODE
   public class LogExample {
        private static final Logger logger = Logger.getLogger(LogExample.class.getName());

        public void logMessage(String message) {
            // 记录日志
            logger.info(message);
        }

        public void logError(String errorMessage) {
            // 记录错误日志
            logger.error(errorMessage);
        }
    }
CODE
	"safefile://SafeLoggingMethods.java": <<<CODE
// 安全的代码示例：避免使用被规则直接匹配的日志方法名进行自定义方法命名
public class SafeLoggingMethods {
    // 定义一个不会被规则直接捕获的方法名，例如 useInfo 而非 info
    public void useInfo(String message) {
        // 实际的日志记录可以通过一个私有辅助方法或其他库进行
        System.out.println("Info message: " + message); // 这是一个示例，实际中应使用日志库
    }

    // 定义一个类似但不会直接匹配规则中 'error' 系列的方法
    public void logErrorDetails(String details) {
        System.err.println("Error details: " + details);
    }

    // 使用日志框架时，避免硬编码直接匹配规则中的方法，而是通过参数化或更复杂的结构
    public void logWithLevel(String level, String message) {
        if ("INFO".equalsIgnoreCase(level)) {
            // logger.info(message); // 假设此处使用了实际的Logger实例
            System.out.println("INFO: " + message);
        } else if ("ERROR".equalsIgnoreCase(level)) {
            // logger.error(message); // 假设此处使用了实际的Logger实例
            System.err.println("ERROR: " + message);
        }
    }
}
CODE
	"safefile://NonLoggerClass.java": <<<CODE
// 这是一个不涉及日志操作的普通类，不应触发日志规则。
public class NonLoggerClass {
    public void doSomething(String data) {
        String result = data.toUpperCase();
        System.out.println("Processed data: " + result);
    }

    public int calculateSum(int a, int b) {
        return a + b;
    }
}
CODE
)

desc(
	lang:java
	alert_num:1
	"file://demo2.java":<<<CODE
   public class LogExample {
        public void logMessage(String message) {
            log.warn(message);
        }
    }
CODE
	"safefile://SafeLoggingMethods.java": <<<CODE
// 安全的代码示例：避免使用被规则直接匹配的日志方法名进行自定义方法命名
public class SafeLoggingMethods {
    // 定义一个不会被规则直接捕获的方法名，例如 useInfo 而非 info
    public void useInfo(String message) {
        // 实际的日志记录可以通过一个私有辅助方法或其他库进行
        System.out.println("Info message: " + message); // 这是一个示例，实际中应使用日志库
    }

    // 定义一个类似但不会直接匹配规则中 'error' 系列的方法
    public void logErrorDetails(String details) {
        System.err.println("Error details: " + details);
    }

    // 使用日志框架时，避免硬编码直接匹配规则中的方法，而是通过参数化或更复杂的结构
    public void logWithLevel(String level, String message) {
        if ("INFO".equalsIgnoreCase(level)) {
            // logger.info(message); // 假设此处使用了实际的Logger实例
            System.out.println("INFO: " + message);
        } else if ("ERROR".equalsIgnoreCase(level)) {
            // logger.error(message); // 假设此处使用了实际的Logger实例
            System.err.println("ERROR: " + message);
        }
    }
}
CODE
	"safefile://NonLoggerClass.java": <<<CODE
// 这是一个不涉及日志操作的普通类，不应触发日志规则。
public class NonLoggerClass {
    public void doSomething(String data) {
        String result = data.toUpperCase();
        System.out.println("Processed data: " + result);
    }

    public int calculateSum(int a, int b) {
        return a + b;
    }
}
CODE
)
