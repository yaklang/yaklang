desc(
    title: "Find The Filter That Contains The Hostname Prefix In Java",
    title_zh: "查找Java中含有主机名前缀的漏洞过滤器",
    lib: 'java-filter-hostname-prefix',
    type: audit,
    rule_id: 20000013,
    desc: <<<TEXT
    该规则用于查找输入的字符串常量是否包含，当不可信输入与主机名前缀连接时，将会对可能存在的漏洞风险进行限制。
    该规则会匹配包含URL的锚点`#`、URL的查询参数`?`以及单个路径分隔符的`/`主机名前缀。值得注意的是，该规则不会匹配URL的协议前缀`http://`、`https://`等，
因为这些协议并不会限制SSRF等漏洞的产生。
TEXT
)

$input<const(r="([?#]|[^?#:/\\\\][/\\\\])|^/$")> as $output;
alert $output;

desc(
    lang: 'java',
    alert_num: 3,
    "file://safe.java": <<<EOF
package com.example;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SSRFServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String url = request.getParameter("url");
        url1 = "https://example.com?" + url;
        url2=  "https://example.com#" + url;
        url3=  "/a/"+ url;
    }
}
EOF
)

desc(
    lang: 'java',
    "safefile://demo.java": <<<EOF
package com.example;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SSRFServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String url = request.getParameter("url");
        url1 = "https://" + url;
    }
}
EOF
)
