desc(
	title: "Audit Java Hostname Prefix Filter"
	title_zh: "审计Java主机名前缀过滤器"
	lib: 'java-filter-hostname-prefix'
	type: audit
	desc: <<<DESC
### 1. 规则目的
该规则属于审计（audit）类型的库规则（`lib`类型），名为`java-filter-hostname-prefix`，旨在识别Java代码中用于限制潜在SSRF（服务器端请求伪造）等漏洞的主机名前缀过滤器。它通过匹配用户输入的字符串常量中可能包含的特定字符（如URL的锚点`#`、URL的查询参数`?`以及单个路径分隔符`/`）来判断是否对不可信输入与主机名拼接的情况进行了过滤。

### 2. 规则详细
1. **作为基础检测库**
   本规则本身不直接检测漏洞，而是作为其他检测规则（例如SSRF检测规则）的基础库，提供识别特定过滤模式的能力。

2. **匹配模式识别**
   规则的核心逻辑在于匹配字符串常量中是否存在以下字符或模式：
   - `?`: URL查询参数的开始符号。
   - `#`: URL片段标识符（锚点）。
   - `[^?#:/\\][/\\]`: 非`?#:/\`字符后紧跟`/`或`\`，用于识别如`/path`这样的相对路径前缀。
   - `$^/$`: 匹配单个`/`字符。

   这些模式常被用于在不可信输入与一个基础URL（通常是内部或预期的主机名+路径）拼接时，通过添加额外的URL组件（查询参数、片段或子路径甚至根路径）来限制输入的范围或改变解析行为，从而防止攻击者控制整个URL进行任意请求。

3. **不匹配高危前缀**
   值得注意的是，该规则**不会**匹配`http://`、`https://`等协议前缀。这是因为直接允许输入以这些协议开头通常意味着没有对主机进行有效限制，仍然可能导致SSRF等漏洞。

通过识别代码中是否存在这些过滤器，安全审计人员可以快速定位可能存在安全控制的代码段，结合上下文判断这些控制是否足以防止相关的漏洞，或者它们是整体防御体系中的一部分。
DESC
	rule_id: "a1303bce-27c7-490b-a7c6-23a53f367f15"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
[CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)
REFERENCE
)

$input<const(r="([?#]|[^?#:/\\\\][/\\\\])|^/$")> as $output;
alert $output for {
	level: "mid",
	title: "Audit Java Hostname Prefix Filter",
	title_zh: "审计Java主机名前缀过滤器",
}


desc(
	lang: 'java'
	alert_num: 3
	"file://safe.java": <<<EOF
package com.example;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SSRFServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String url = request.getParameter("url");
        url1 = "https://example.com?" + url;
        url2=  "https://example.com#" + url;
        url3=  "/a/"+ url;
    }
}
EOF
)

desc(
	lang: 'java'
	"safefile://demo.java": <<<EOF
package com.example;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SSRFServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String url = request.getParameter("url");
        url1 = "https://" + url;
    }
}
EOF
)
