desc(
	title: "Find Java Common Filter Methods"
	title_zh: "查找Java过滤方法"
	lib: "java-common-filter"
	type: audit
	rule_id: "ec23bb9d-7756-4c8a-86ff-ce140f205209"
	desc: <<<DESC
### 1. 规则目的

该规则旨在识别 Java 代码中可能的安全过滤、验证或净化方法。通过匹配常见的方法命名模式（如 sanitize、filter、escape 等），该规则可以帮助安全审计人员或自动化工具快速定位可能处理用户输入或敏感数据的代码点。

### 2. 规则详细

1. **作为基础检测库**

   属于 `java-common-filter` 库规则 (`lib` 类型)，通常需要与其他规则（如污点跟踪规则）结合使用，以确定这些方法是否被用于有效防御常见的 Web 安全漏洞，例如跨站脚本 (XSS) 或 SQL 注入。

2. **覆盖常见方法命名模式**

   规则通过正则表达式 `/ (?i).*(sanitize|filter|escape|clean|validate|check|secure|scrub|strip|encode|decode|prevent|safe|block|remove|replace|purge|whitelist|blacklist|neutralize|defense|harden|mitigate).*/` 匹配方法名称，覆盖了大量表示过滤、验证或安全处理操作的英文单词。不区分大小写，提高了匹配范围。

   ```java
   // 示例代码：可能被规则识别的方法名
   String safeInput = SecurityUtil.sanitizeHtml(userInput);
   boolean isValid = InputValidator.validateEmail(email);
   String encodedUrl = URLEncoder.encode(rawUrl, "UTF-8");
   ```

通过识别这些潜在的安全处理方法，可以进一步分析其实现是否健壮，以及它们是否在关键位置被正确调用。
DESC
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
[CWE-20](https://cwe.mitre.org/data/definitions/20.html)
REFERENCE
)

/(?i).*(sanitize|filter|escape|clean|validate|check|secure|scrub|strip|encode|decode|prevent|safe|block|remove|replace|purge|whitelist|blacklist|neutralize|defense|harden|mitigate).*/ as  $output;
alert $output	for {
	level: "mid",
	title: "Find Java Common Filter Methods",
	title_zh: "查找Java过滤方法",
}
