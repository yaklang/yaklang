desc(
	title_zh: "查找Java Spring MVC 控制层用户可控输入参数"
	title: "Find Java Spring MVC Controller User Controllable Input Parameters"
	type: audit
	lib: 'java-spring-mvc-param'
	reference: <<<REFERENCE
[Spring Framework Documentation - Web on Servlet Stack](https://docs.spring.io/spring-framework/reference/web/webmvc.html)
[Jakarta Servlet Specification API - HttpServletRequest](https://jakarta.ee/specifications/platform/8/apidocs/?javax/servlet/http/HttpServletRequest.html)
REFERENCE
	desc: <<<DESC
### 规则目的
该规则用于识别Java Spring MVC框架中控制器（Controller）层处理方法的用户可控输入参数。这些参数是数据流分析的起点，对于检测多种Web安全漏洞至关重要。

### 规则详细
该规则属于查找代码或审计代码的规则，旨在全面覆盖Spring MVC中获取用户输入的常见方式，包括：

1. **声明式参数绑定（注解方式）**：识别通过 `@RequestParam`, `@PathVariable`, `@RequestHeader`, `@CookieValue`, `@RequestBody`, `@RequestPart`, `@MatrixVariable`, `@SessionAttribute`, `@RequestAttribute`, `@ModelAttribute` 等注解绑定到方法参数上的用户输入。这些注解简化了从HTTP请求中提取数据到Java方法参数的过程，但也是潜在的攻击入口点。
2. **原生请求处理（HttpServletRequest/ServletRequest）**：识别直接通过 `javax.servlet.http.HttpServletRequest` 或 `javax.servlet.ServletRequest` 对象获取用户输入的场景。这包括调用 `getParameter()`, `getParameterValues()`, `getParameterNames()`, `getHeader()`, `getHeaderNames()`, `getCookies()` 等方法。虽然Spring MVC鼓励使用注解方式，但在某些场景下，开发者仍可能直接操作原生请求对象获取更原始或复杂的输入。

这条规则作为基础性的“污染源”（source）查找规则，主要用于构建更复杂的Web漏洞（如SQL注入、XSS、命令注入、路径遍历等）的数据流分析链。通过准确识别所有可能的输入点，可以确保后续的流分析能够覆盖到应用程序处理用户输入的所有关键位置。
DESC
	rule_id: "1314089e-e030-4436-89d2-2aabe2758683"
	solution: <<<SOLUTION
none
SOLUTION
)

// 声明式参数绑定(注解方式)
*Mapping.__ref__?{opcode: function} as $start;
$start<getFormalParams>?{opcode: param && !have: this} as $params;
$params?{!<typeName>?{have:'javax.servlet.http'}} as $output;

// 原生请求处理(HttpServletRequest)
// getAuthType()
// getContextPath()
// getCookies()
// getDateHeader()
// getHeader()
// getHeaderNames()
// getHeaders()
// getIntHeader(String name)
// getPart(String name)
// getParts()
// getPathInfo()
// getPathTranslated()
// getQueryString()
// getRemoteUser()
// getRequestedSessionId()
// getRequestURI()
// getRequestURL()
// getServletPath()
// getSession()
// getSession(boolean create)
// getTrailerFields()
// getUserPrincipal()

// 包括从javax.servlet.ServletRequest继承的方法
// getParameter(),getHeader() etc...
$params?{<typeName>?{have:'javax.servlet.http.HttpServletRequest'}} as $request;
$request.get*() as $output;

alert $output for {
	title_zh: "查找Java Spring MVC 控制层用户可控输入参数",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "mid",
	title: "Find Java Spring MVC Controller User Controllable Input Parameters",
}


desc(
	lang: java
	alert_num: 10
	'file://parameterBinding.java': <<<TEXT
package org.example.moudels.userinput;

import io.swagger.annotations.*;
import lombok.extern.slf4j.Slf4j;
import org.example.common.util.R;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.Cookie;
import java.util.Map;

@Slf4j
@Api(value = "ParameterBindingExamples", tags = "Spring MVC参数绑定示例")
@Controller
@RequestMapping("/param-binding")
public class ParameterBindingExamples {

    // 1. @RequestParam基本用法
    @ApiOperation(value = "RequestParam基本用法", notes = "从请求参数中获取值")
    @GetMapping("/request-param/basic")
    @ResponseBody
    public R requestParamBasic(@RequestParam String username) {
        return R.ok("获取到的用户名: " + username);
    }

    // 2. @PathVariable基本用法
    @ApiOperation(value = "PathVariable基本用法", notes = "从URL路径中获取变量")
    @GetMapping("/path-variable/{id}")
    @ResponseBody
    public R pathVariableBasic(@PathVariable Integer id) {
        return R.ok("获取到的ID: " + id);
    }

    // 3. @RequestHeader基本用法
    @ApiOperation(value = "RequestHeader基本用法", notes = "获取请求头")
    @GetMapping("/request-header/basic")
    @ResponseBody
    public R requestHeaderBasic(@RequestHeader("User-Agent") String userAgent) {
        return R.ok("获取到的User-Agent: " + userAgent);
    }

    // 4. @CookieValue基本用法
    @ApiOperation(value = "CookieValue基本用法", notes = "获取Cookie值")
    @GetMapping("/cookie-value/basic")
    @ResponseBody
    public R cookieValueBasic(@CookieValue(value = "sessionId", required = false) String sessionId) {
        return R.ok("获取到的sessionId: " + (sessionId != null ? sessionId : "未提供"));
    }

    // 5. @RequestBody基本用法
    @ApiOperation(value = "RequestBody基本用法", notes = "获取JSON请求体并绑定到对象")
    @PostMapping("/request-body/basic")
    @ResponseBody
    public R requestBodyBasic(@RequestBody User user) {
        return R.ok("获取到的用户: " + user);
    }

    // 6. @RequestPart基本用法
    @ApiOperation(value = "RequestPart基本用法", notes = "处理文件上传")
    @PostMapping("/request-part")
    @ResponseBody
    public R requestPart(@RequestPart("file") MultipartFile file) {
        return R.ok("上传的文件: " + (file != null ? file.getOriginalFilename() : "未上传"));
    }

    // 7. @MatrixVariable基本用法
    @ApiOperation(value = "MatrixVariable基本用法", notes = "获取URL路径中的矩阵变量")
    @GetMapping("/matrix/{path}")
    @ResponseBody
    public R matrixVariable(@MatrixVariable(value = "param", required = false) String param) {
        return R.ok("矩阵变量param: " + (param != null ? param : "未提供"));
    }

    // 8. @SessionAttribute基本用法
    @ApiOperation(value = "SessionAttribute基本用法", notes = "获取会话属性")
    @GetMapping("/session-attribute")
    @ResponseBody
    public R sessionAttribute(@SessionAttribute(value = "userProfile", required = false) User user) {
        return R.ok("会话用户: " + (user != null ? user : "未登录"));
    }

    // 9. @RequestAttribute基本用法
    @ApiOperation(value = "RequestAttribute基本用法", notes = "获取请求属性")
    @GetMapping("/request-attribute")
    @ResponseBody
    public R requestAttribute(@RequestAttribute(value = "startTime", required = false) Long startTime) {
        return R.ok("请求开始时间: " + (startTime != null ? startTime : "未设置"));
    }

    // 10. @ModelAttribute基本用法
    @ApiOperation(value = "ModelAttribute基本用法", notes = "表单数据绑定到对象")
    @PostMapping("/model-attribute")
    @ResponseBody
    public R modelAttribute(@ModelAttribute User user) {
        return R.ok("通过模型属性获取的用户: " + user);
    }

}
TEXT
)

desc(
	lang: java
	alert_num: 9
	'file://servletDemo.java': <<<TEXT
package org.example.moudels.userinput;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.example.common.util.R;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;
import java.util.Locale;

@Slf4j
@Api(value = "ServletParamsExamples", tags = "Servlet参数注入示例")
@Controller
@RequestMapping("/servlet")
public class ServletParamsExamples {

    // 1. 获取请求方法
    @ApiOperation(value = "获取请求方法", notes = "使用request.getMethod()")
    @GetMapping("/method")
    @ResponseBody
    public R getMethod(HttpServletRequest request) {
        return R.ok("请求方法: " + request.getMethod());
    }

    // 2. 获取请求URL
    @ApiOperation(value = "获取请求URL", notes = "使用request.getRequestURL()")
    @GetMapping("/url")
    @ResponseBody
    public R getRequestURL(HttpServletRequest request) {
        return R.ok("请求URL: " + request.getRequestURL());
    }

    // 3. 获取请求URI
    @ApiOperation(value = "获取请求URI", notes = "使用request.getRequestURI()")
    @GetMapping("/uri")
    @ResponseBody
    public R getRequestURI(HttpServletRequest request) {
        return R.ok("请求URI: " + request.getRequestURI());
    }

    // 4. 获取请求协议
    @ApiOperation(value = "获取请求协议", notes = "使用request.getProtocol()")
    @GetMapping("/protocol")
    @ResponseBody
    public R getProtocol(HttpServletRequest request) {
        return R.ok("请求协议: " + request.getProtocol());
    }

    // 5. 获取请求参数
    @ApiOperation(value = "获取请求参数", notes = "使用request.getParameter()")
    @GetMapping("/parameter")
    @ResponseBody
    public R getParameter(HttpServletRequest request) {
        String username = request.getParameter("username");
        return R.ok("获取到的用户名: " + (username != null ? username : "未提供"));
    }

    // 6. 获取多个请求参数
    @ApiOperation(value = "获取多个请求参数", notes = "使用request.getParameterValues()")
    @GetMapping("/parameter-values")
    @ResponseBody
    public R getParameterValues(HttpServletRequest request) {
        String[] hobbies = request.getParameterValues("hobby");
        return R.ok("获取到的爱好: " + (hobbies != null ? String.join(", ", hobbies) : "未提供"));
    }

    // 7. 获取所有参数名
    @ApiOperation(value = "获取所有参数名", notes = "使用request.getParameterNames()")
    @GetMapping("/parameter-names")
    @ResponseBody
    public R getParameterNames(HttpServletRequest request) {
        StringBuilder params = new StringBuilder();
        Enumeration<String> paramNames = request.getParameterNames();
        while (paramNames.hasMoreElements()) {
            String paramName = paramNames.nextElement();
            params.append(paramName).append("\n");
        }
        return R.ok("所有参数名:\n" + params);
    }

    // 8. 获取请求头
    @ApiOperation(value = "获取请求头", notes = "使用request.getHeader()")
    @GetMapping("/header")
    @ResponseBody
    public R getHeader(HttpServletRequest request) {
        String userAgent = request.getHeader("User-Agent");
        return R.ok("User-Agent: " + (userAgent != null ? userAgent : "未提供"));
    }

    // 9. 获取所有请求头名
    @ApiOperation(value = "获取所有请求头名", notes = "使用request.getHeaderNames()")
    @GetMapping("/header-names")
    @ResponseBody
    public R getHeaderNames(HttpServletRequest request) {
        StringBuilder headers = new StringBuilder();
        Enumeration<String> headerNames = request.getHeaderNames();
        while (headerNames.hasMoreElements()) {
            headers.append(headerNames.nextElement()).append("\n");
        }
        return R.ok("所有请求头名:\n" + headers);
    }

}
TEXT
)
