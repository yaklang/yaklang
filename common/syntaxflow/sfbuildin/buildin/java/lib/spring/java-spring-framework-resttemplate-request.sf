desc(
	title: "Find Java Spring Framework RestTemplate Request API Sink Params"
	title_zh: "查找Java Spring Framework RestTemplate 请求API的Sink参数"
	type: audit
	lib: "java-spring-rest-template-request-params"
	reference: <<<REFERENCE
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html
REFERENCE
	description: <<<DESCRIPTION

DESCRIPTION
	rule_id: "a8705f0b-2e87-4a81-99da-2f2d0c7c25ea"
	solution: <<<SOLUTION
### 修复建议
#### 1. 使用安全的URL构造方法
通过使用`UriComponentsBuilder`或其他安全的URL构造方法，避免直接拼接URL参数。
```java
UriComponentsBuilder.fromHttpUrl("http://example.com/api").queryParam("param", userInput).build().toUriString();
```
#### 2. 对用户输入进行验证和过滤
在将用户输入用于URL构造之前，进行严格的验证和过滤，确保输入符合预期格式。
```java
if (!isValidUserInput(userInput)) {
    throw new IllegalArgumentException("Invalid input");
}
```
#### 3. 使用Whitelist机制限制请求目标
通过配置白名单机制，限制RestTemplate发起请求的目标域名或IP地址，防止向非预期的目标发起请求。
```java
if (!isWhitelisted(url)) {
    throw new SecurityException("URL is not whitelisted");
}
```
#### 4. 考虑使用更安全的HTTP客户端库
如Apache HttpClient或OkHttp，这些库提供了更丰富的安全特性和配置选项。
SOLUTION
)

RestTemplate()?{<typeName>?{have:'org.springframework.web.client.RestTemplate'}} as $rest

// delete(String url, Object... uriVariables)
// delete(String url, Map<String,?> uriVariables)
// delete(URI url)
$rest.delete(* <slice(index=1)> as $output)

// put(String url, Object request, Object... uriVariables)
// put(String url, Object request, Map<String,?> uriVariables)
// put(URI url, Object request)
$rest.put(* <slice(index=1)> as $output)

// exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)
// exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, Class<T> responseType, Map<String,?> uriVariables)
// exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, Object... uriVariables)
// exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, Map<String,?> uriVariables)
// exchange(URI url, HttpMethod method, HttpEntity<?> requestEntity, Class<T> responseType)
// exchange(URI url, HttpMethod method, HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)
// execute(String uriTemplate, HttpMethod method, RequestCallback requestCallback, ResponseExtractor<T> responseExtractor, Object... uriVariables)
// execute(String uriTemplate, HttpMethod method, RequestCallback requestCallback, ResponseExtractor<T> responseExtractor, Map<String,?> uriVariables)
// execute(URI url, HttpMethod method, RequestCallback requestCallback, ResponseExtractor<T> responseExtractor)
$rest.exchange(* <slice(index=1)> as $output)

// getForEntity(String url, Class<T> responseType, Object... uriVariables)
// getForEntity(String url, Class<T> responseType, Map<String,?> uriVariables)
// getForEntity(URI url, Class<T> responseType)
// getForObject(String url, Class<T> responseType, Object... uriVariables)
// getForObject(String url, Class<T> responseType, Map<String,?> uriVariables)
// getForObject(URI url, Class<T> responseType)
// headForHeaders(String url, Object... uriVariables)
// headForHeaders(String url, Map<String,?> uriVariables)
// headForHeaders(URI url)
// patchForObject(String url, Object request, Class<T> responseType, Object... uriVariables)
// patchForObject(String url, Object request, Class<T> responseType, Map<String,?> uriVariables)
// patchForObject(URI url, Object request, Class<T> responseType)
// postForEntity(String url, Object request, Class<T> responseType, Object... uriVariables)
// postForEntity(String url, Object request, Class<T> responseType, Map<String,?> uriVariables)
// postForEntity(URI url, Object request, Class<T> responseType)
// ...
$rest.*For*(* <slice(index=1)> as $output)

alert $output for {
	title: "Java Spring RestTemplate Request Sink Param",
	title_zh: "Java Spring RestTemplate 请求Sink参数",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "info",
}
