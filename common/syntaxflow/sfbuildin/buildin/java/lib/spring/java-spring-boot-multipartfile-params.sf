desc(
	title_zh: "审计 Java Spring MultipartFile TransferTo 目标"
	title: "Audit Java Spring MultipartFile TransferTo Target"
	type: audit
	lib: "java-spring-multipartfile-transferTo-target"
	reference: <<<REFERENCE
[Spring MultipartFile 官方文档](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html)
[CWE-434: Unrestricted Upload of File with Dangerous Type](https://cwe.mitre.org/data/definitions/434.html)
REFERENCE
	desc: <<<DESC
### 1. 规则目的
该规则旨在识别 Java 代码中 Spring Framework MultipartFile 库的 `transferTo` 方法的目标路径。`transferTo` 方法用于将上传的文件传输到指定的目标位置。通过分析此方法调用的目标文件路径，可以帮助安全审计人员追踪用户上传文件的存储位置，从而发现潜在的任意文件上传或其他文件操作相关的安全风险。

### 2. 规则详细
该规则属于 `java-spring-multipartfile-transferTo-target` 库规则（`lib` 类型），主要用于审计 `org.springframework.web.multipart.MultipartFile` 类中的 `transferTo` 方法。其核心功能是捕获该方法调用时传入的目标路径或文件对象，并进一步评估是否存在未授权访问或恶意文件覆盖等风险。

**该规则审计的类为:**
- `org.springframework.web.multipart.MultipartFile`

**该规则覆盖方法包括:**
- `void transferTo(File dest)`: 将接收到的文件传输到给定的目标文件。
- `void transferTo(Path dest)`: 将接收到的文件传输到给定的目标路径。

**触发场景示例代码：**
```java
@PostMapping("/upload")
public String uploadFile(@RequestParam("file") MultipartFile file) {
    try {
        // 潜在危险的目标路径
        File dest = new File("/var/www/uploads/" + file.getOriginalFilename());
        file.transferTo(dest);  // 直接使用原始文件名可能导致路径污染漏洞
        return "File uploaded successfully";
    } catch (IOException e) {
        return "File upload failed";
    }
}
```
在此示例中，攻击者可以通过构造恶意文件名（如 `../../etc/passwd`）覆盖系统关键文件。
DESC
	rule_id: "8577b8ff-aeab-4830-a21c-b5a342f0cbe3"
	solution: <<<SOLUTION
### 修复建议

#### 1. 验证目标路径的安全性
在调用 `transferTo` 方法之前，必须对目标路径进行严格验证，以确保不会出现路径穿越或其他非法操作。例如，禁止路径中包含 `../` 等特殊字符。
```java
@PostMapping("/upload")
public String uploadFile(@RequestParam("file") MultipartFile file) {
    String fileName = file.getOriginalFilename();
    if (fileName == null || fileName.contains("..")) {
        return "Invalid file name";
    }
    try {
        File dest = new File("/var/www/uploads/" + fileName);
        file.transferTo(dest);
        return "File uploaded successfully";
    } catch (IOException e) {
        return "File upload failed";
    }
}
```

#### 2. 使用安全的文件存储机制
避免直接使用用户提供的文件名作为存储目标，应生成随机唯一标识符作为文件名。
```java
@PostMapping("/upload")
public String uploadFile(@RequestParam("file") MultipartFile file) {
    String uniqueFileName = UUID.randomUUID().toString() + ".tmp";
    try {
        File dest = new File("/var/www/uploads/" + uniqueFileName);
        file.transferTo(dest);
        return "File uploaded successfully";
    } catch (IOException e) {
        return "File upload failed";
    }
}
```

#### 3. 设置文件上传目录权限
限制上传目录的写入权限，确保只有应用程序运行用户能够修改其中的内容。同时，定期清理过期文件以减少潜在风险。

#### 4. 日志记录与监控
对文件上传行为进行日志记录，并实时监控异常事件（如大文件上传、频繁上传等），以便快速响应潜在威胁。
SOLUTION
)

MultipartFile?{<typeName>?{have:'org.springframework.web.multipart.MultipartFile'}} as $multipartFile
// void transferTo(File dest)
// void transferTo(Path dest)
$multipartFile.transferTo(* <slice(index=1)> as $output)
alert $output for {
	level: "mid",
	title: "Audit Spring MultipartFile TransferTo Target",
	title_zh: "审计 Spring MultipartFile TransferTo 目标",
}
