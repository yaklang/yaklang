desc(
    title: "Find Java Image IO Read URL",
    type: audit,
    level: low,
    lib: "java-image-io-read-url",
    desc: <<<TEXT
直接从不受信任的URL读取图像数据可能会使应用程序容易受到多种安全威胁，包括远程代码执行（RCE）和服务器资源耗尽攻击。如果攻击者能够控制URL的内容，他们可能会构造恶意的图像文件，该文件在解析时触发漏洞，或者通过大量请求消耗服务器资源。建议对从URL读取的图像数据进行严格的验证和清理，或者通过受信任的代理服务器下载图像。
TEXT
)

ImageIO.read(*?{<typeName>?{have: URL}} as $params);
$params<getCaller>(,* as $output);
alert $output;

desc(
lang: java,
alert_min: 2,
'file://risk1.java': <<<TEXT
package src.main.a;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;

public class ImageDownloadExample {
    public static void main(String[] args) {
        try {
            BufferedImage image = ImageIO.read(new URL("http://example.com/image.jpg"));
        } catch (IOException e) {
            System.out.println("Error occurred while trying to read the image.");
        }
    }
}
TEXT,
'file://risk.java': <<<TEXT
package src.main.b;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;

public class ImageDownloadExample {
    public static void main(String[] args) {
        try {
            URL imageUrl = new URL("http://example.com/image.jpg");
            BufferedImage image = ImageIO.read(imageUrl);
        } catch (IOException e) {
            System.out.println("Error occurred while trying to read the image.");
        }
    }
}
TEXT
)