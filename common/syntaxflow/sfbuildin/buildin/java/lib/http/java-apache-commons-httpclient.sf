desc(
	title: "Audit Java Apache Commons HttpClient Usage"
	type: audit
	lib: "java-apache-commons-httpclient"
	rule_id: "d7419d7a-debf-403d-b581-7cd5f997590b"
	title_zh: "审计 Java Apache Commons HttpClient 使用"
	desc: <<<DESC
### 1.规则目的
该规则用于审计Java代码中对Apache Commons HttpClient库的使用情况，特别是识别`executeMethod`方法调用及其参数。

### 2.规则详细
1. **作为基础检测库**
   属于`java-apache-commons-httpclient`库规则（`lib`类型），用于识别`executeMethod`方法的调用点。

2. **覆盖方法类型**
   检测以下 HTTP 方法类型：
   `GetMethod`, `PostMethod`, `PutMethod`, `DeleteMethod`, `PatchMethod`, `OptionsMethod`, `HeadMethod`, `TraceMethod`。

3. **规则作用**
   主要用于辅助其他规则，通过识别HttpClient方法的调用来进一步进行数据流分析或安全审计，例如检测SSRF（服务器端请求伪造）漏洞时，此规则可作为识别请求发送点的基础。
DESC
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
[Apache Commons HttpClient documentation](https://hc.apache.org/httpclient-3.x/)
REFERENCE
)

*.executeMethod(,* as $arg);
$arg<getCallee()>?{<fullTypeName>?{have: /commons\.httpclient\.methods\.(Get|Post|Put|Delete|Patch|Options|Head|Trace)Method/}}(,* as $output);
<delete(arg)>
alert $output for {
	desc: <<<CODE
### 1.规则目的
该规则用于审计Java代码中对Apache Commons HttpClient库的使用情况，特别是识别`executeMethod`方法调用及其参数。

### 2.规则详细
1. **作为基础检测库**
   属于`java-apache-commons-httpclient`库规则（`lib`类型），用于识别`executeMethod`方法的调用点。

2. **覆盖方法类型**
   检测以下 HTTP 方法类型：
   `GetMethod`, `PostMethod`, `PutMethod`, `DeleteMethod`, `PatchMethod`, `OptionsMethod`, `HeadMethod`, `TraceMethod`。

3. **规则作用**
   主要用于辅助其他规则，通过识别HttpClient方法的调用来进一步进行数据流分析或安全审计，例如检测SSRF（服务器端请求伪造）漏洞时，此规则可作为识别请求发送点的基础。
CODE
	level: "mid",
	title: "Audit Java Apache Commons HttpClient Usage",
	title_zh: "审计 Java Apache Commons HttpClient 使用",
	solution: <<<CODE
none
CODE
}


desc(
	lang: java
	'file://risk.java': <<<TEXT
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;

import java.io.IOException;

public class HttpClientExample {
    public static void main(String[] args) {
        HttpClient client = new HttpClient();
        client.getHttpConnectionManager().getParams().setConnectionTimeout(5000);
        String url = "http://example.com";
        GetMethod method = new GetMethod(url);
        try {
            method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,
                new DefaultHttpMethodRetryHandler(3, false));

            // 执行请求，获取状态码
            int statusCode = client.executeMethod(method);

            if (statusCode != HttpStatus.SC_OK) {
                System.err.println("Method failed: " + method.getStatusLine());
            }
        } catch (HttpException e) {
        } catch (IOException e) {
        } finally {
        }
    }
}
TEXT
)
