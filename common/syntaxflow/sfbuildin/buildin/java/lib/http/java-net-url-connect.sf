desc(
	title: "Audit Java URL Connection Use"
	type: audit
	lib: "java-net-url-connect"
	desc: <<<DESC
### 1. 规则目的
该规则用于审计Java代码中使用`java.net.URL.openConnection()`或`java.net.URL.openStream()`方法的场景。这些方法用于建立网络连接，但也可能引入安全风险，需要审计其使用以确保采用了安全实践。

### 2. 规则详细
1. **作为基础审计库**
   属于`java-net-url-connect`库规则（`lib`类型），主要用于识别代码中调用了`openConnection()`或`openStream()`方法的关键点。

2. **潜在风险点**
   *   **未验证输入**: 如果URL是基于用户输入构造的，未经验证可能导致SSRF（服务器端请求伪造）或其他与网络相关的攻击。
   *   **未处理异常**: 缺乏适当的异常处理可能导致应用程序中断或泄露敏感信息。
   *   **未使用安全连接**: 默认使用HTTP而不是HTTPS连接可能导致敏感数据在传输过程中被窃取或篡改。
   *   **未设置连接超时**: 未设置超时参数可能导致应用程序长时间等待响应，引起拒绝服务问题。

3. **审计范围**
   规则重点审计`URL.openConnection()`和`URL.openStream()`方法的调用。

**触发场景示例:**
```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class HttpGetExample {
    public static void main(String[] args) {
        try {
            URL url = new URL("http://example.com"); // 潜在风险：使用了HTTP而非HTTPS
            HttpURLConnection connection = (HttpURLConnection) url.openConnection(); // 审计点
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Accept", "application/json");
            connection.connect(); // 未设置连接和读取超时

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            StringBuilder response = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                response.append(line);
                response.append('\r');
            }
            reader.close(); // 未在finally块中关闭资源
            System.out.println("Response: " + response.toString());

            connection.disconnect(); // 未在finally块中关闭连接
        } catch (IOException e) { // 未针对不同类型的异常进行精细处理
            e.printStackTrace();
        }
    }
}
```
```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;

public class SimpleWebReader {
    public static void main(String[] args) {
        try {
            URL url = new URL("http://example.com"); // 潜在风险：使用了HTTP而非HTTPS
            // 直接使用 URL.openStream() 获取输入流，审计点
            InputStream inputStream = url.openStream(); // 未设置连接和读取超时
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line;
            StringBuilder response = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                response.append(line);
                response.append('\n');  // 使用换行符来分隔每一行
            }
            reader.close(); // 未在finally块中关闭资源
            System.out.println("Web page content:\n" + response.toString());
        } catch (IOException e) { // 未针对不同类型的异常进行精细处理
            e.printStackTrace();
        }
    }
}
```
DESC
	rule_id: "ac4cd901-cba2-4e21-86fa-7eb6d68c834c"
	title_zh: "审计Java URL连接使用"
	solution: <<<SOLUTION
### 审计建议

#### 1. 优先使用HTTPS
建立连接时，优先使用`https://`协议，确保数据传输加密和安全。

#### 2. 验证用户提供的URL
如果URL是基于用户输入构建的，需要对输入进行严格校验和过滤，防止SSRF等攻击。

#### 3. 设置连接超时和读取超时
设置适当的超时时间，避免因为网络问题导致长时间等待，影响应用程序可用性。

```java
// 修复代码示例：设置超时时间
import java.net.HttpURLConnection;
import java.net.URL;

// ...
URL url = new URL("https://secure-example.com"); // 使用HTTPS
HttpURLConnection connection = (HttpURLConnection) url.openConnection();
connection.setConnectTimeout(5000); // 设置连接超时5秒
connection.setReadTimeout(5000);    // 设置读取超时5秒
// ...
```

#### 4. 完善异常处理
捕获并处理可能发生的各种IOException，或使用try-with-resources语句确保资源正确关闭。

```java
// 修复代码示例：使用try-with-resources关闭资源
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

// ...
try {
    URL url = new URL("https://secure-example.com");
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setConnectTimeout(5000); // 设置连接超时5秒
    connection.setReadTimeout(5000);    // 设置读取超时5秒
    connection.setRequestMethod("GET");
    connection.setRequestProperty("Accept", "application/json");

    try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
        String line;
        StringBuilder response = new StringBuilder();
        while ((line = reader.readLine()) != null) {
            response.append(line);
            response.append('\r');
        }
        System.out.println("Response: " + response.toString());
    } finally {
        if (connection != null) {
            connection.disconnect();
        }
    }
} catch (IOException e) {
    // 更精细的异常处理或记录日志
    e.printStackTrace();
}
// ...
```

#### 5. 使用更高级的HTTP客户端库
考虑使用功能更丰富且通常提供更多安全特性的第三方库，如Apache HttpClient、OkHttp等。

#### 6. 结合其他安全规则进行审计
结合检测SSRF、路径遍历等相关安全规则，对URL的构造来源和使用方式进行全面审计。
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
)

URL?{<getCall>?{.openConnection() || .openStream()}}(,* as $output);
alert $output;

desc(
	lang: java
	alert_min: 2
	'file://risk.java': <<<TEXT
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class HttpGetExample {
    public static void main(String[] args) {
        try {
            URL url = new URL("http://example.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Accept", "application/json");
            connection.connect();

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            StringBuilder response = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                response.append(line);
                response.append('\r');
            }
            reader.close();
            System.out.println("Response: " + response.toString());

            connection.disconnect();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
TEXT
	'file://risk2.java': <<<TEXT
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;

public class SimpleWebReader {
    public static void main(String[] args) {
        try {
            URL url = new URL("http://example.com");
            // 直接使用 URL.openStream() 获取输入流
            InputStream inputStream = url.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line;
            StringBuilder response = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                response.append(line);
                response.append('\n');  // 使用换行符来分隔每一行
            }
            reader.close();
            System.out.println("Web page content:\n" + response.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

TEXT
)
