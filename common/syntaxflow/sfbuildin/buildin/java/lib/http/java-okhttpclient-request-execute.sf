desc(
    title: "Find OkHttpClient Uses and Executing Request",
    rule_id: 20000036,
    type: audit,
    lib: "java-okhttpclient-request-execute",
)

Request.Builder()?{<typeName>?{have: 'okhttp'}}...url(,* as $output);
alert $output;

desc(
lang: java,
alert_num:1,
'file://a.java': <<<CODE
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class OkHttpClientExample {
    public static void main(String[] args) {
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder()
                .url("https://api.github.com/users/github")
                .build();
        try {
            // 执行请求
            Response response = client.newCall(request).execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
CODE,
)

desc(
lang: java,
alert_num:1,
'file://a.java': <<<CODE
public class OkHttpClientExample {
    @RequestMapping(value = "/three")
        public String Three(@RequestParam(value = "url") String imageUrl) {
            try {
                URL url = new URL(imageUrl);
                OkHttpClient client = new OkHttpClient();
                com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().get().url(url).build();
                Call call = client.newCall(request);
                Response response = call.execute();
                return response.toString();
            } catch (IOException var1) {
                System.out.println(var1);
                return "Hello";
            }
        }
}
CODE,
)