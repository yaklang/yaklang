desc(
	title_zh: "查找Java ProcessBuilder Sink点"
	title: "Find Java ProcessBuilder Sink Point"
	lib: 'java-process-builder-sink'
	type: audit
	reference: <<<REFERENCE
https://docs.oracle.com/javase/8/docs/api/java/lang/ProcessBuilder.html
REFERENCE
	desc: <<<DESC
### 规则目的
该规则用于在Java静态代码审计过程中，识别并标记出使用 `java.lang.ProcessBuilder` 类作为命令执行的敏感调用点（Sink Point）。此规则属于审计辅助性质的规则（`lib`类型），旨在帮助分析人员快速定位潜在的命令执行入口，以便于后续结合用户输入跟踪规则（Source Tracking Rules）共同判断是否存在命令注入漏洞或其他相关的安全风险。

### 规则详细
1. **作为基础检测库**
   属于 `java-process-builder-sink` 库规则（`lib`类型），需配合其他规则（如用户输入跟踪规则）共同检测命令注入漏洞。

2. **覆盖的 ProcessBuilder 调用方式**
   规则旨在捕获 `ProcessBuilder` 对象的以下两种常见初始化和命令设置方式：
   - 通过构造函数直接传入命令参数列表：`new ProcessBuilder(List<String> command)` 或 `new ProcessBuilder(String... command)`。
   - 通过 `command()` 方法设置命令参数列表：`ProcessBuilder.command(List<String> command)` 或 `ProcessBuilder.command(String... command)`。
   
3. **识别的 ProcessBuilder 执行点**
   规则进一步识别 `ProcessBuilder` 对象的执行调用，主要关注隐式或显式调用的 `start()` 方法。由于反射调用可能绕过直接的 `pb.start()` 识别，规则还包含了对通过反射方式调用 `java.lang.ProcessImpl` 的 `start` 方法的检测，以捕获更广泛的潜在执行路径。

4. **输出内容**
   本规则的重点在于识别并告警 `ProcessBuilder` 执行时所使用的具体命令参数内容。通过将这些命令参数标记为 `$output`，规则帮助安全人员直观地看到哪些用户输入或动态生成的字符串被用作了系统命令的一部分，从而更容易判断是否存在命令注入的风险。
DESC
	rule_id: "737c2b12-e8ac-4c72-a4e6-44196847059d"
	solution: <<<SOLUTION
### 修复建议
#### 1. 使用参数化查询（PreparedStatement）
通过预编译SQL语句并绑定用户输入，隔离代码与数据，避免恶意输入篡改逻辑。

```java
// 修复代码示例
String userInput = request.getParameter("id");
String sql = "SELECT * FROM users WHERE id = ?";  // 使用占位符
try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
    pstmt.setInt(1, Integer.parseInt(userInput));  // 强制类型转换并绑定参数
    ResultSet rs = pstmt.executeQuery();
    // 处理结果集
}
```

#### 2. 输入合法性校验
对用户输入实施类型、格式或范围限制，拒绝非法输入。

```java
// 示例：校验输入为数字且范围合法
if (!userInput.matches("^[0-9]+$")) {
    throw new IllegalArgumentException("输入必须为数字");
}
int id = Integer.parseInt(userInput);
if (id < 1 || id > 1000) {
    throw new IllegalArgumentException("ID超出有效范围");
}
```

#### 3. 使用ORM框架
通过ORM（如Hibernate、MyBatis）内置的安全机制自动处理参数化，避免手动拼接SQL。

```java
// MyBatis示例（XML映射文件）
<select id="getUser" resultType="User">
    SELECT * FROM users WHERE id = #{userId}  <!-- 安全参数占位符 -->
</select>

// 调用代码（避免直接拼接）
User user = sqlSession.selectOne("getUser", Long.parseLong(userInput));
```
SOLUTION
)

ProcessBuilder?{<typeName>?{have:'java.lang.ProcessBuilder'}} as $processBuilder;
$processBuilder(*<slice(start=1)> as $output)
$processBuilder.command(* <slice(start=1)> as $output)

Class?{<typeName>?{have:'java.lang'}}.forName(*<slice(index=1)>?{=='java.lang.ProcessImpl'}) as $clazz
$clazz.getDeclaredMethod?{*(*<slice(index=1)>?{=="start"})} as $method
$method<getCall()>?{.setAccessible(*<slice(index=1)>?{==true})}.invoke as $invoke
$invoke(,* ?{!=false && !have:"nil" }as $output)

alert $output for {
	title: "Unvalidated Command Execution",
	title_zh: "未验证的命令执行",
	solution: <<<CODE
### 修复建议
#### 1. 使用参数化查询（PreparedStatement）
通过预编译SQL语句并绑定用户输入，隔离代码与数据，避免恶意输入篡改逻辑。

```java
// 修复代码示例
String userInput = request.getParameter("id");
String sql = "SELECT * FROM users WHERE id = ?";  // 使用占位符
try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
    pstmt.setInt(1, Integer.parseInt(userInput));  // 强制类型转换并绑定参数
    ResultSet rs = pstmt.executeQuery();
    // 处理结果集
}
```

#### 2. 输入合法性校验
对用户输入实施类型、格式或范围限制，拒绝非法输入。

```java
// 示例：校验输入为数字且范围合法
if (!userInput.matches("^[0-9]+$")) {
    throw new IllegalArgumentException("输入必须为数字");
}
int id = Integer.parseInt(userInput);
if (id < 1 || id > 1000) {
    throw new IllegalArgumentException("ID超出有效范围");
}
```

#### 3. 使用ORM框架
通过ORM（如Hibernate、MyBatis）内置的安全机制自动处理参数化，避免手动拼接SQL。

```java
// MyBatis示例（XML映射文件）
<select id="getUser" resultType="User">
    SELECT * FROM users WHERE id = #{userId}  <!-- 安全参数占位符 -->
</select>

// 调用代码（避免直接拼接）
User user = sqlSession.selectOne("getUser", Long.parseLong(userInput));
```
CODE
	desc: <<<CODE
### 漏洞描述
1. **漏洞原理**
   由于应用程序未对用户输入进行严格的过滤或参数化处理，攻击者可通过构造特殊输入篡改原始命令的逻辑。这可能导致非预期的命令执行，例如数据泄露、数据篡改或权限绕过。

2. **触发场景**
   // 存在漏洞的代码示例
   ```java
   String userInput = request.getParameter("command");
   ProcessBuilder pb = new ProcessBuilder(userInput);
   pb.start();
   ```
   攻击者输入 `rm -rf /` 可导致系统文件被删除。

3. **潜在影响**
   - 系统敏感信息（如用户凭证、隐私数据）被窃取。
   - 执行任意命令（如删除文件、修改系统配置）。
   - 通过命令执行提权进一步渗透至服务器或其他系统组件。
CODE
	level: "high",
}


desc(
	lang: java
	alert_num: 2
	'file://risk1.java': <<<TEXT
package org.example.moudels.rce.command;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.example.common.util.R;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

@Slf4j
@Api(value="CommandController",tags = "RCE-远程命令执行")
@Controller
@CrossOrigin(origins = "*")
@RequestMapping("/command")
public class CommandController {
    @RequestMapping("")
    public String spel() {
        return "vul/rce/command";
    }

    @RequestMapping("/ProcessBuilder1")
    @ResponseBody
    @ApiOperation(value = "漏洞场景：命令注入-ProcessBuilder1",notes = "命令注入")
    @ApiImplicitParam(name = "payload", value = "命令", required = true, dataType = "String", paramType = "query")
   public R procesBuilder1(@RequestParam("payload") String payload) throws IOException {
        String[] command ={"sh","-c",payload};
        ProcessBuilder pb = new ProcessBuilder(command);
        pb.redirectErrorStream(true);

        Process process = pb.start();
        InputStream inputStream = process.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        String line;
        StringBuilder output = new StringBuilder();
        while ((line = reader.readLine()) != null) {
            output.append(line).append("\n");
        }
        return R.ok(output.toString());
   }

    @RequestMapping("/ProcessBuilder2")
    @ResponseBody
    @ApiOperation(value = "漏洞场景：命令注入-ProcessBuilder2",notes = "命令注入")
    @ApiImplicitParam(name = "payload", value = "命令", required = true, dataType = "String", paramType = "query")
    public R procesBuilder2(@RequestParam("payload") String payload) throws IOException {
          String[] command = {"sh", "-c", payload};

          ProcessBuilder pb = new ProcessBuilder();
          pb.redirectErrorStream(true);
          pb.command(command);
          Process process = pb.start();
          InputStream inputStream = process.getInputStream();
          BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
          String line;
          StringBuilder output = new StringBuilder();
          while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
          }
          return R.ok(output.toString());
    }
}
TEXT
)

desc(
	lang: java
	alert_num: 1
	'file://risk2_reflection.java': <<<TEXT
package top.org.example;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import top.whgojp.common.utils.R;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;


@Slf4j
@Api(value = "CommandController", tags = "RCE - 命令注入")
@Controller
@CrossOrigin(origins = "*")
@RequestMapping("/command")
public class CommandController {

    @RequestMapping("/vul3")
    @ResponseBody
    public R vul3(String payload) throws Exception {
        // 获取 ProcessImpl 类对象
        Class<?> clazz = Class.forName("java.lang.ProcessImpl");

        // 获取 start 方法
        Method method = clazz.getDeclaredMethod("start", String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, boolean.class);
        method.setAccessible(true);

        Process process = (Process) method.invoke(null, new String[]{payload}, null, null, null, false);
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            return R.ok(output.toString());
        }
    }

}
TEXT
)




