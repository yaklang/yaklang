desc(
	title: "Audit Java TCP Data Reception Point"
	title_zh: "审计Java TCP数据接收点"
	lib : "java-net-socket-read"
	type : audit
	desc: <<<DESC
### 规则目的

此审计规则旨在识别Java代码中TCP数据接收的位置。TCP数据接收点通常是潜在的攻击面，因为恶意数据可能会通过这些点进入应用程序。

### 规则详细

1. **作为基础审计库**
   属于`java-net-socket-read`库规则（`lib`类型），用于识别Java网络编程中数据流入的关键点，通常需要与其他规则（如数据流跟踪规则）配合使用，来检测更具体的漏洞（如反序列化、缓冲区溢出等）。

2. **检测的类库和函数**
   该规则主要识别使用了标准Java网络库（`java.net` 和 `java.nio`）中读取TCP数据的相关函数。

   - **`java.net.Socket` 的 `getInputStream()` 方法:** 通过Socket获取输入流，攻击者可以通过该流发送恶意数据。
   - **`java.net.ServerSocket` 的 `getInputStream()` 方法:** ServerSocket本身不直接读取数据，但此规则在此处可能是为了与 Socket 的 getInputStream() 区分或标记与 Socket 相关的数据流入点。实际数据读取通常发生在 accept() 接受连接后获得的 Socket 对象上。
   - **`java.nio.channels.SocketChannel` 的 `read()` 方法:** NIO中的 SocketChannel 用于非阻塞 I/O，`read()` 方法用于从通道读取数据到缓冲区，这也是一个重要的数据接收点。

确保这些接收点实施了适当的数据验证和清理措施，以防止诸如缓冲区溢出、注入攻击、不安全的反序列化等安全漏洞。
DESC
	rule_id: "4db64163-7c7a-4bc3-a627-c63dd1e8abde"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
https://owasp.org/www-community/vulnerabilities/Unvalidated_Input
https://cwe.mitre.org/data/definitions/20.html
REFERENCE
)

// java.net.Socket
// java.net.ServerSocket
.getInputStream()?{<typeName>?{have: 'java.net.Socket' || 'java.new.ServerSocket'}} as $output;
//java.nio.channels.SocketChannel
.read()?{<typeName>?{have: 'java.nio.channels.SocketChannel'}} as $output;

alert $output for {
	level: "mid",
	title: "Audit Java TCP Data Reception Point",
	title_zh: "审计Java TCP数据接收点",
}


desc(
	lang: java
	alert_min: 2
	'file://NioServer.java': <<<EOF
    import java.io.IOException;
    import java.net.InetSocketAddress;
    import java.nio.ByteBuffer;
    import java.nio.channels.SelectionKey;
    import java.nio.channels.Selector;
    import java.nio.channels.ServerSocketChannel;
    import java.nio.channels.SocketChannel;
    import java.util.Iterator;
    import java.util.Set;

    public class NioTcpServer {
        public static void main(String[] args) throws IOException {
            Selector selector = Selector.open();
            ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.bind(new InetSocketAddress(8080));
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);

            while (true) {
                if (selector.select() == 0) {
                    continue;
                }

                Set<SelectionKey> selectedKeys = selector.selectedKeys();
                Iterator<SelectionKey> keyIterator = selectedKeys.iterator();

                while (keyIterator.hasNext()) {
                    SelectionKey key = keyIterator.next();

                    if (key.isAcceptable()) {
                        SocketChannel clientChannel = serverSocketChannel.accept();
                        clientChannel.configureBlocking(false);
                        clientChannel.register(selector, SelectionKey.OP_READ);
                    } else if (key.isReadable()) {
                        SocketChannel clientChannel = (SocketChannel) key.channel();
                        ByteBuffer buffer = ByteBuffer.allocate(1024);
                        int bytesRead = clientChannel.read(buffer);

                        if (bytesRead == -1) {
                            clientChannel.close();
                        } else {
                            buffer.flip();
                            while (buffer.hasRemaining()) {
                                System.out.print((char) buffer.get());
                            }
                            buffer.clear();
                        }
                    }
                    keyIterator.remove();
                }
            }
        }
    }
EOF
	'file://SocketServer.java': <<<EOF
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class TcpServer {
        public static void main(String[] args) throws IOException {
            ServerSocket serverSocket = new ServerSocket(8080);
            Socket socket = serverSocket.accept();
            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
            reader.close();
            socket.close();
            serverSocket.close();
        }
    }
EOF
)
