desc(
	title_zh: "审计Java GroovyShell代码执行Sink点"
	title: "Audit Java GroovyShell Code Execution Sink"
	lib: 'java-groovy-lang-shell-sink'
	type: audit
	reference: <<<REFERENCE
[GroovyShell API文档](https://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyShell.html)
[CWE-94: Improper Control of Generation of Code ('Code Injection')](https://cwe.mitre.org/data/definitions/94.html)
REFERENCE
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   `GroovyShell`允许应用程序动态执行Groovy脚本，如果输入的脚本内容来自不可信的外部来源且未经充分校验和过滤，攻击者可以注入恶意代码，导致服务器执行任意命令。这种远程代码执行（RCE）漏洞可能引发严重后果。

2. **触发场景**
   // 存在漏洞的代码示例
   ```java
   String userInput = request.getParameter("script"); // 未过滤的用户输入
   GroovyShell shell = new GroovyShell();
   shell.evaluate(userInput); // 直接执行用户输入的脚本
   ```
   攻击者可以通过构造特殊的Groovy脚本，例如执行系统命令或访问敏感文件，从而控制服务器或窃取数据。

3. **潜在影响**
   - 执行任意系统命令，可能导致服务器被完全控制。
   - 泄露敏感信息，如数据库密码、用户数据等。
   - 通过服务器进一步渗透内网。


DESC
	rule_id: "0018c56b-b5f7-49fc-80f4-d1b9a5f718e5"
	solution: <<<SOLUTION
### 修复建议

#### 1. 避免使用 GroovyShell 执行不受信任的代码
如果可能，应彻底避免使用`GroovyShell`来执行来自终端用户的、未经严格验证和沙箱化的代码。考虑使用更安全的、专为执行表达式设计的库（如`AviatorScript`, `JEXL`）或采用更严格的代码沙箱机制。

#### 2. 对用户输入进行严格的过滤和校验
如果必须使用`GroovyShell`执行用户提供的代码，务必对输入内容进行极致的过滤和校验。仅允许执行白名单中的、已知安全的Groovy代码片段或结构，拒绝任何包含可执行系统命令、文件操作、网络访问等敏感操作的代码。

#### 3. 使用安全沙箱
配置`GroovyShell`的安全策略或使用Java的安全管理器 (`SecurityManager`) 对Groovy脚本的执行环境进行限制，例如限制文件访问、网络访问、系统属性读取等。请注意，构建一个足够安全的沙箱环境非常复杂且容易出错，需要深入理解Groovy的执行机制和潜在的逃逸技术。

#### 4. 最小权限原则
运行应用程序的系统用户应遵循最小权限原则，限制其对操作系统资源的访问权限，即使命令执行成功，也能最小化攻击的影响范围。

#### 示例代码 (仅为示意，沙箱机制实现复杂，需谨慎使用)：

```java
import java.security.Policy;
import java.security.Permission;
import java.security.Permissions;
import groovy.lang.GroovyShell;

// 创建一个简单的安全策略，严格限制权限
class RestrictedPolicy extends Policy {
    @Override
    public Permissions getPermissions(java.security.CodeSource codesource) {
        Permissions perms = new Permissions();
        // 仅允许读写位于特定路径的文件，具体路径需要根据应用实际情况调整
        perms.add(new java.io.FilePermission("/secure/path/-", "read,write"));
        return perms;
    }
}

// 设置安全策略
Policy.setPolicy(new RestrictedPolicy());

// 使用GroovyShell执行代码
GroovyShell shell = new GroovyShell();
shell.evaluate("println 'Hello, World'");
```

SOLUTION
)

GroovyShell()?{<typeName>?{have:'groovy.lang.GroovyShell'}} as $groovy;

// evaluate(GroovyCodeSource codeSource)
// evaluate(File file)
// evaluate(Reader in)
// evaluate(String scriptText)
// evaluate(Reader in, String fileName)
// evaluate(String scriptText, String fileName, String codeBase)
// evaluate(URI uri)
$groovy.evaluate(*<slice(index=1)> as $output);

// parse 用于解析一段脚本，解析完成后还需要调用run才能执行
// parse(GroovyCodeSource codeSource)
// parse(GroovyCodeSource codeSource, Binding binding)
// parse(File file)
// parse(Reader in)
// parse(Reader in, Binding binding)
// parse(Reader reader, String fileName)
// parse(Reader reader, String fileName, Binding binding)
// parse(String scriptText)
// parse(String scriptText, Binding binding)
// parse(String scriptText, String fileName)
// parse(String scriptText, String fileName, Binding binding)
// parse(URI uri)
$groovy.parse?{*().run}(*<slice(index=1)> as $output);

// run(File scriptFile, String[] args)
// run(File scriptFile, List<String> list)
// run(Reader in, String fileName, String[] args)
// run(Reader in, String fileName, List<String> list)
// run(String scriptText, String fileName, String[] args)
// run(String scriptText, String fileName, List<String> list)
// run(GroovyCodeSource source, String[] args)  # 不审计
// run(GroovyCodeSource source, List<String> args)  # 不审计
$groovy.run(*<slice(index=1)>?{<typeName>?{any:'File','Reader','String'}} as $output);
alert $output	for {
	level: "high",
	title: "Audit Java GroovyShell Code Execution Sink",
	title_zh: "审计Java GroovyShell 代码执行Sink点",
	solution: <<<CODE
### 修复建议

#### 1. 避免使用 GroovyShell 执行不受信任的代码
如果可能，应彻底避免使用`GroovyShell`来执行来自终端用户的、未经严格验证和沙箱化的代码。考虑使用更安全的、专为执行表达式设计的库（如`AviatorScript`, `JEXL`）或采用更严格的代码沙箱机制。

#### 2. 对用户输入进行严格的过滤和校验
如果必须使用`GroovyShell`执行用户提供的代码，务必对输入内容进行极致的过滤和校验。仅允许执行白名单中的、已知安全的Groovy代码片段或结构，拒绝任何包含可执行系统命令、文件操作、网络访问等敏感操作的代码。

#### 3. 使用安全沙箱
配置`GroovyShell`的安全策略或使用Java的安全管理器 (`SecurityManager`) 对Groovy脚本的执行环境进行限制，例如限制文件访问、网络访问、系统属性读取等。请注意，构建一个足够安全的沙箱环境非常复杂且容易出错，需要深入理解Groovy的执行机制和潜在的逃逸技术。

#### 4. 最小权限原则
运行应用程序的系统用户应遵循最小权限原则，限制其对操作系统资源的访问权限，即使命令执行成功，也能最小化攻击的影响范围。

#### 示例代码 (仅为示意，沙箱机制实现复杂，需谨慎使用)：

```java
import java.security.Policy;
import java.security.Permission;
import java.security.Permissions;
import java.security.AllPermission;
import groovy.lang.GroovyShell;

// 创建一个简单的安全策略，严格限制权限
class RestrictedPolicy extends Policy {
    @Override
    public Permissions getPermissions(java.security.CodeSource codesource) {
        Permissions perms = new Permissions();
        // 仅允许读写位于特定路径的文件，具体路径需要根据应用实际情况调整
        perms.add(new java.io.FilePermission("/secure/path/-", "read,write"));
        return perms;
    }
}

// 设置安全策略
Policy.setPolicy(new RestrictedPolicy());

// 使用GroovyShell执行代码
GroovyShell shell = new GroovyShell();
shell.evaluate("println 'Hello, World'");
```

CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   `GroovyShell`允许应用程序动态执行Groovy脚本，如果输入的脚本内容来自不可信的外部来源且未经充分校验和过滤，攻击者可以注入恶意代码，导致服务器执行任意命令。

2. **触发场景**
   // 存在漏洞的代码示例
   ```java
   String userInput = request.getParameter("script"); // 未过滤的用户输入
   GroovyShell shell = new GroovyShell();
   shell.evaluate(userInput); // 直接执行用户输入的脚本
   ```
   攻击者可以通过构造特殊的Groovy脚本，执行任意系统命令。

3. **潜在影响**
   - 执行任意系统命令，可能导致服务器被完全控制。
   - 泄露敏感信息，如数据库密码、用户数据等。
   - 通过服务器进一步渗透内网。
CODE
}


desc(
	lang:'java'
	alert_num:3
	"file://groovy.java": <<<CODE
package org.example.moudels.rce.code;

import groovy.lang.GroovyShell;
import groovy.lang.Script;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.example.common.util.R;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;

@Slf4j
@Api(value="CodeController",tags = "RCE-远程命令执行")
@Controller
@CrossOrigin(origins = "*")
@RequestMapping("/code")
public class CodeController {

    @GetMapping("/vulGroovy-evaluate")
    @ResponseBody
    @ApiOperation(value = "漏洞常见：RCE-Groovy(使用evaluate方法)",notes = "Groovy代码执行")
    @ApiImplicitParam(name = "payload", value = "Groovy代码", required = true, dataType = "String", paramType = "query")
    public R vulGroovyEvaluate(@ApiParam(name = "payload") String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Object result = shell.evaluate(payload);
            if (result instanceof Process) {
                Process process = (Process) result;
                String output = getProcessOutput(process);
                return R.ok("[+] Groovy代码执行，结果：" + output);
            } else {
                return R.ok("[+] Groovy代码执行，结果：" + result.toString());
            }
        }catch (Exception e){
            return R.error(e.getMessage());
        }
    }

    @GetMapping("/vulGroovy-parse")
    @ResponseBody
    @ApiOperation(value = "漏洞常见：RCE-Groovy(使用parse方法)",notes = "Groovy代码执行")
    public R vulGroovyParse(@ApiParam(name = "payload") String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Script script = shell.parse(payload);
            Object result = script.run();
            if (result instanceof Process) {
                Process process = (Process) result;
                String output = getProcessOutput(process);
                return R.ok("[+] Groovy代码执行，结果：" + output);
            } else {
                return R.ok("[+] Groovy代码执行，结果：" + result.toString());
            }
        }catch (Exception e){
            return R.error(e.getMessage());
        }
    }

    @GetMapping("/vulGroovy-run")
    @ResponseBody
    @ApiOperation(value = "漏洞常见：RCE-Groovy(使用run方法)",notes = "Groovy代码执行")
    public R vulGroovyRun(@ApiParam(name = "payload") String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Object result = shell.run(payload, "script.groovy", Arrays.asList());
            if (result instanceof Process) {
                Process process = (Process) result;
                String output = getProcessOutput(process);
                return R.ok("[+] Groovy代码执行，结果：" + output);
            } else {
                return R.ok("[+] Groovy代码执行，结果：" + (result != null ? result.toString() : "null"));
            }
        }catch (Exception e){
            return R.error(e.getMessage());
        }
    }

}
CODE
)
