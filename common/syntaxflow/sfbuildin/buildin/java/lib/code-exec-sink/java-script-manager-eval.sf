desc(
	title: "Detect Java ScriptEngineManager eval Risk"
	type: audit
	lib: "java-js-sink"
	rule_id: "f72c0172-5edc-4436-901f-c33606c18899"
	solution: <<<SOLUTION
### 修复建议
1. **避免直接使用用户输入**
   不应直接将用户输入传递给`eval`方法，而是应该首先验证输入的有效性和安全性。例如，可以使用白名单验证方法来确保输入仅包含允许的操作。

2. **使用安全替代方案**
   尽量使用安全的替代方案，例如，可以通过预定义的函数或方法来执行特定的操作，而不是动态执行用户提供的代码。

3. **输入验证和过滤**
   在将用户输入传递给`eval`之前，应对其进行严格的验证和过滤，以防止恶意代码的执行。可以考虑使用正则表达式或其他验证技术来实现这一点。

4. **沙箱环境**
   如果必须使用`eval`执行用户输入，应将其置于沙箱环境中，限制其执行权限，以减少潜在的风险。
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
	title_zh: "检测Java ScriptEngineManager eval 风险"
	desc: <<<DESC
### 1.规则目的
该规则用于查找Java代码中使用了`javax.script.*`包下的`ScriptEngineManager`类及其相关方法的代码片段。特别是关注`getEngineByName`, `getEngineByExtension`, `getEngineByMimeType`方法获取`ScriptEngine`对象后，对该对象的`eval`、`put`、`compile`等方法的使用。

### 2.规则详细
1. **作为基础检测库**
   属于`java-js-sink`库规则（`lib`类型），需配合其他规则（如用户输入跟踪规则）共同检测可能存在的代码执行漏洞，提供核心函数识别能力。

2. **覆盖关键方法**
   检测以下关键方法的调用：
   - `ScriptEngineManager.getEngineByName`
   - `ScriptEngineManager.getEngineByExtension`
   - `ScriptEngineManager.getEngineByMimeType`
   - `ScriptEngine.eval`
   - `ScriptEngine.put`
   - `ScriptEngine.compile`

3. **潜在风险**
   如果`eval`等方法的输入源（即代码中的`$params`变量）直接或间接来源于用户可控的外部输入且未经过严格的输入验证和沙箱隔离，攻击者可能注入恶意代码并使其在服务器端执行，导致远程代码执行（RCE）漏洞。

4. **示例**
   该规则能够识别类似如下代码结构，并标记存在输入流向`eval`方法的情况：
   ```java
   import javax.script.ScriptEngineManager;
   import javax.script.ScriptEngine;
   import javax.script.ScriptException;
   import javax.servlet.http.HttpServletRequest;

   public class CalculatorServlet {
       public Object executeOperation(HttpServletRequest request) throws ScriptException {
           ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
           ScriptEngine scriptEngine = scriptEngineManager.getEngineByExtension("js");
           String userOps = request.getParameter("operation"); // 用户输入
           return scriptEngine.eval(userOps); // 用户输入直接传入eval方法，存在风险
       }
   }
   ```
   本规则主要用于识别这种危险的代码模式，后续需要配合数据流分析规则来确认输入是否来自不受信任的源。
DESC
)

/(getEngineByName|getEngineByExtension|getEngineByMimeType)/<getCall> as $toCheck;
$toCheck?{<typeName>?{have:'javax.script'}} as $engine;
check $engine;

$engine.eval(,* as $params);
$engine.put(,* as $params);
$engine.compile(,* as $params);
check $params;
$params as $output;
alert $output for {
	title: "Detect Java ScriptEngineManager eval Risk",
	title_zh: "检测Java ScriptEngineManager eval 风险",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "high",
}



desc(
	lang: java
	alert_num:1
	"file://basic.java": <<<SCRIPT
import javax.script.*;

public class JavaScriptExample {
    public static void main(String[] args) throws ScriptException {
        // 创建一个ScriptEngine实例
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");

        // 定义JavaScript代码
        String script = "function add(a, b) { return a + b; }";

        // 在Java中执行JavaScript代码
        engine.eval(script);

        // 调用JavaScript方法
        Invocable invocable = (Invocable) engine;
        Object result = invocable.invokeFunction("add", 5, 3);

        // 输出结果
        System.out.println(result); // 输出：8
    }
}
SCRIPT
)

desc(
	lang: java
	alert_num:1
	"file://basic.java": <<<SCRIPT
package org.example;
import javax.script.ScriptEngineManager;
import javax.script.ScriptEngine;
import javax.script.ScriptException;
import javax.servlet.http.HttpServletRequest;

public class CalculatorServlet {
    public Object executeOperation(HttpServletRequest request) throws ScriptException {
        ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
        ScriptEngine scriptEngine = scriptEngineManager.getEngineByExtension("js");
        String userOps = request.getParameter("operation");
        return scriptEngine.eval(userOps);
    }
}
SCRIPT
)

