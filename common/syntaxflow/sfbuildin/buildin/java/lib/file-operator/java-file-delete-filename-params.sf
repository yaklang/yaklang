desc(
	title: "Find Java File Delete Sinks"
	title_zh: "查找 Java 文件删除接收点"
	type: audit
	lib: "java-delete-filename-sink"
	desc: <<<DESC
### 规则目的
该规则用于查找 Java 代码中可能被攻击者利用的文件删除操作的关键方法调用，识别潜在的文件删除接收点（sinks）。这些接收点是程序中执行文件删除操作的地方，如果其输入的文件名来源于不可信源（如用户输入、外部配置等），就可能导致任意文件删除漏洞。

### 规则详细
1. **作为基础检测库**
   属于 `java-delete-filename-sink` 库规则（`lib` 类型），主要用于标识执行文件删除的核心函数，需配合污点分析等其他规则（如用户输入跟踪规则）共同检测任意文件删除漏洞，其本身不直接报告漏洞，而是提供关键的污点传播终点。

2. **覆盖常见文件删除方法**
   规则检测以下 Java 中常用的文件删除相关方法调用：
   - `java.io.File.delete()`：删除由此抽象路径名表示的文件或目录。
   - `java.io.File.deleteOnExit()`：请求在虚拟机终止时删除由此抽象路径名表示的文件或目录。
   - `java.nio.file.Files.delete(Path path)`：删除指定的文件。
   - `java.nio.file.Files.deleteIfExists(Path path)`：删除指定的文件（如果存在）。

示例代码：
```java
// 使用 Files.delete() 删除文件
Path path = Paths.get("untrusted-input-path");
Files.delete(path);

// 使用 File.delete() 删除文件
File file = new File("untrusted-input-path");
file.delete();
```
攻击场景：如果上述代码中的路径来自用户输入且未经验证，攻击者可以构造恶意路径删除系统关键文件。
DESC
	rule_id: "63713c0b-d9c9-4720-a270-e4832cfd8dc5"
	solution: <<<SOLUTION
### 修复建议
#### 1. 验证文件路径来源
确保文件路径来源于可信源，避免直接使用用户输入作为文件路径。通过白名单或正则表达式校验路径合法性。
```java
String userInput = request.getParameter("filePath");
if (!userInput.matches("^[a-zA-Z0-9_\\-.]+$") || !userInput.startsWith("/safe/directory/")) {
    throw new IllegalArgumentException("非法路径");
}
```

#### 2. 使用安全的文件删除方法
尽量使用安全的文件删除方法，并在删除前进行必要的检查。例如，限制只能删除特定目录下的文件。
```java
Path path = Paths.get("/safe/directory/", userProvidedFileName);
if (path.startsWith(Paths.get("/safe/directory/"))) {
    Files.delete(path);
} else {
    throw new SecurityException("拒绝访问此路径");
}
```

#### 3. 限制文件删除操作的范围
对文件删除操作进行权限控制，限制只有特定用户或角色才能执行文件删除操作。
```java
if (!currentUser.hasRole("ADMIN")) {
    throw new SecurityException("无权执行文件删除操作");
}
```

#### 4. 日志记录
对文件删除操作进行日志记录，以便在发生问题时进行追踪和审计。
```java
try {
    Files.delete(path);
    log.info("File deleted: " + path.toString() + " by user " + currentUser.getName());
} catch (IOException e) {
    log.error("Failed to delete file: " + path.toString(), e);
}
```
SOLUTION
	reference: <<<REFERENCE
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')](https://cwe.mitre.org/data/definitions/22.html)
[Java File Deletion Documentation](https://docs.oracle.com/javase/8/docs/api/java/io/File.html#delete--)
REFERENCE
)

// File.delete
File?{*().delete()}(,* as $output);

// File.deleteOnExit
File?{*().deleteOnExit()}(,* as $output);

// java.nio.file.Files.delete
Files?{<typeName>?{have: 'java.nio'}}.delete(,* as $output);

// java.nio.file.Files.deleteIfExists
Files?{<typeName>?{have: 'java.nio'}}.deleteIfExists(,* as $output);

alert $output for {
	title: "Untrusted File Deletion",
	title_zh: "不信任的文件删除",
	level: "high",
}

desc(
	lang:java
	alert_num:2
	'file://demo1.java':<<<TEXT
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.IOException;

public class NioDeleteFileExample {
    public static void main(String[] args) {
        // 定义要删除的文件路径
        Path path1 = Paths.get("example.txt");

        // 方法1: 使用 Files.delete() - 文件不存在时会抛出异常
        try {
            Files.delete(path1);
            System.out.println("文件删除成功！");
        } catch (IOException e) {
            System.err.println("删除失败: " + e.getMessage());
        }

        // 方法2: 使用 Files.deleteIfExists() - 文件不存在时不会报错
        Path path2 = Paths.get("example.txt");

        try {
            boolean isDeleted = Files.deleteIfExists(path2);
            if (isDeleted) {
                System.out.println("文件删除成功！");
            } else {
                System.out.println("文件不存在，无需删除");
            }
        } catch (IOException e) {
            System.err.println("删除异常: " + e.getMessage());
        }
    }
}
TEXT
)

desc(
	lang:java
	alert_num:2
	'file://demo2.java':<<<TEXT
import java.io.File;

public class IoDeleteFileExample {
    public static void main(String[] args) {
        // 定义要删除的文件路径（相对路径或绝对路径）
        File file = new File("example.txt");

        // 方法1: 使用 delete() - 立即删除文件
        if (file.exists()) {
            boolean isDeleted = file.delete();
            if (isDeleted) {
                System.out.println("文件删除成功！");
            } else {
                System.out.println("删除失败（可能权限不足或文件被占用）");
            }
        } else {
            System.out.println("文件不存在");
        }

        // 方法2: 使用 deleteOnExit() - 程序退出时删除
        File tempFile = new File("temp_file.txt");
        try {
            tempFile.createNewFile();
            tempFile.deleteOnExit();
            System.out.println("程序退出时将自动删除临时文件");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
TEXT
)


