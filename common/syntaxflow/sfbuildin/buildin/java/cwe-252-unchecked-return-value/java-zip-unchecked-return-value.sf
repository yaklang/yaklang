desc(
	title: "Check Java Zip Unchecked Return Value"
	title_zh: "检测Java Zip未检查返回值的API"
	type:security
	desc: <<<DESC
### 规则描述

该规则用于检测 Java 代码中对 `java.util.zip.ZipFile` 和 `org.apache.commons.compress.archivers.zip.ZipFile` 类中返回对象的方法调用后，是否对返回值进行了后续处理，例如赋值给变量或进一步操作。如果调用的返回对象没有被使用，可能导致潜在的资源泄露或逻辑错误。

### 触发场景

在处理压缩文件时，开发者可能调用 ZipFile 类中的方法来获取特定条目（Entry）的输入流或其他信息。如果对这些方法的返回值（例如 `getInputStream()` 返回的 `InputStream` 对象）没有进行后续处理，如读取数据、关闭流，或者将返回值赋值给一个变量以便后续使用，就会触发此规则。

```java
package org.example;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.io.InputStream;
import java.io.IOException;

public class ZipFileExample {
    public static void main(String[] args) {
        String zipFilePath = "example.zip";
        try (ZipFile zipFile = new ZipFile(zipFilePath)) {
            java.util.Enumeration<? extends ZipEntry> entries = zipFile.entries();
            ZipEntry entry = entries.nextElement();
            zipFile.getInputStream(entry); // 未检查或使用返回值
            
            org.apache.commons.compress.archivers.zip.ZipFile commonsZipFile = new org.apache.commons.compress.archivers.zip.ZipFile("another.zip");
            commonsZipFile.getInputStream(entry); // 未检查或使用返回值
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### 潜在影响

未检查或使用返回值可能导致以下问题：

*   **资源泄露**: 某些方法返回的资源（如输入流）如果没有被正确关闭，可能导致文件句柄或其他系统资源的泄露，长期运行可能耗尽系统资源。
*   **逻辑错误**: 如果方法的返回值是操作结果或状态指示，未检查可能导致程序逻辑出现错误。
*   **性能问题**: 创建了对象或资源却没有使用，浪费计算资源。

因此，在调用这些返回对象的方法后，建议检查返回值并根据需要进行处理（例如，赋值给变量进行后续操作，确保资源被正确管理和释放）。
DESC
	rule_id: "dc9276ba-671d-4160-9544-51849fc6b72d"
	solution: <<<SOLUTION
### 修复建议

1.  **检查并使用返回值:** 对于返回对象的 API 调用，请确保将返回值赋值给一个变量，并在后续代码中使用该变量进行处理。对于返回流（如 `getInputStream`），请确保在使用完毕后关闭流，通常使用 try-with-resources 语句可以有效管理流的关闭。

    ```java
    // 修复代码示例
    package org.example;
    import java.util.zip.ZipEntry;
    import java.util.zip.ZipFile;
    import java.io.InputStream;
    import java.io.IOException;

    public class ZipFileExampleFixed {
        public static void main(String[] args) {
            String zipFilePath = "example.zip";
            try (ZipFile zipFile = new ZipFile(zipFilePath)) {
                java.util.Enumeration<? extends ZipEntry> entries = zipFile.entries();
                if (entries.hasMoreElements()) {
                    ZipEntry entry = entries.nextElement();
                    // 检查并使用返回值，使用 try-with-resources 确保流关闭
                    try (InputStream entryInputStream = zipFile.getInputStream(entry)) {
                        // 对 entryInputStream 进行处理，例如读取数据
                         int data = entryInputStream.read();
                         while(data != -1) {
                             System.out.print((char) data);
                             data = entryInputStream.read();
                         }
                    }
                }

                org.apache.commons.compress.archivers.zip.ZipFile commonsZipFile = new org.apache.commons.compress.archivers.zip.ZipFile("another.zip");
                if (commonsZipFile.entries().hasMoreElements()){
                     ZipEntry entry2 = commonsZipFile.entries().nextElement();
                    try (InputStream entryInputStream = commonsZipFile.getInputStream(entry2)) {
                        // 对 entryInputStream 进行处理
                        int data = entryInputStream.read();
                         while(data != -1) {
                             System.out.print((char) data);
                             data = entryInputStream.read();
                         }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    ```

2.  **仔细阅读 API 文档:** 在使用第三方库或标准库中的方法时，仔细阅读其 API 文档，了解方法的返回值及其含义，确保正确处理返回值。

3.  **代码审查:** 定期进行代码审查，以发现未检查返回值的潜在问题。
SOLUTION
	reference: <<<REFERENCE
[CWE-252: Unchecked Return Value](https://cwe.mitre.org/data/definitions/252.html)
REFERENCE
)

.getInputStream() as $toCheck;
$toCheck?{<typeName>?{have:'java.util.zip.ZipFile' }}?{!<getUsers>} as $weak1;
alert $weak1	for {
	title_zh: "检测Java Zip未检查返回值的API",
	solution: <<<CODE
### 修复建议

1.  **检查并使用返回值:** 对于返回对象的 API 调用，请确保将返回值赋值给一个变量，并在后续代码中使用该变量进行处理。对于返回流（如 `getInputStream`），请确保在使用完毕后关闭流，通常使用 try-with-resources 语句可以有效管理流的关闭。

    ```java
    // 修复代码示例
    package org.example;
    import java.util.zip.ZipEntry;
    import java.util.zip.ZipFile;
    import java.io.InputStream;
    import java.io.IOException;

    public class ZipFileExampleFixed {
        public static void main(String[] args) {
            String zipFilePath = "example.zip";
            try (ZipFile zipFile = new ZipFile(zipFilePath)) {
                java.util.Enumeration<? extends ZipEntry> entries = zipFile.entries();
                if (entries.hasMoreElements()) {
                    ZipEntry entry = entries.nextElement();
                    // 检查并使用返回值，使用 try-with-resources 确保流关闭
                    try (InputStream entryInputStream = zipFile.getInputStream(entry)) {
                        // 对 entryInputStream 进行处理，例如读取数据
                         int data = entryInputStream.read();
                         while(data != -1) {
                             System.out.print((char) data);
                             data = entryInputStream.read();
                         }
                    }
                }

                org.apache.commons.compress.archivers.zip.ZipFile commonsZipFile = new org.apache.commons.compress.archivers.zip.ZipFile("another.zip");
                if (commonsZipFile.entries().hasMoreElements()){
                     ZipEntry entry2 = commonsZipFile.entries().nextElement();
                    try (InputStream entryInputStream = commonsZipFile.getInputStream(entry2)) {
                        // 对 entryInputStream 进行处理
                        int data = entryInputStream.read();
                         while(data != -1) {
                             System.out.print((char) data);
                             data = entryInputStream.read();
                         }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    ```

2.  **仔细阅读 API 文档:** 在使用第三方库或标准库中的方法时，仔细阅读其 API 文档，了解方法的返回值及其含义，确保正确处理返回值。

3.  **代码审查:** 定期进行代码审查，以发现未检查返回值的潜在问题。
CODE
	desc: <<<CODE
### 规则描述

该规则用于检测 Java 代码中对 `java.util.zip.ZipFile` 和 `org.apache.commons.compress.archivers.zip.ZipFile` 类中返回对象的方法调用后，是否对返回值进行了后续处理，例如赋值给变量或进一步操作。如果调用的返回对象没有被使用，可能导致潜在的资源泄露或逻辑错误。

### 触发场景

在处理压缩文件时，开发者可能调用 ZipFile 类中的方法来获取特定条目（Entry）的输入流或其他信息。如果对这些方法的返回值（例如 `getInputStream()` 返回的 `InputStream` 对象）没有进行后续处理，如读取数据、关闭流，或者将返回值赋值给一个变量以便后续使用，就会触发此规则。

```java
package org.example;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.io.InputStream;
import java.io.IOException;

public class ZipFileExample {
    public static void main(String[] args) {
        String zipFilePath = "example.zip";
        try (ZipFile zipFile = new ZipFile(zipFilePath)) {
            java.util.Enumeration<? extends ZipEntry> entries = zipFile.entries();
            ZipEntry entry = entries.nextElement();
            zipFile.getInputStream(entry); // 未检查或使用返回值
            
            org.apache.commons.compress.archivers.zip.ZipFile commonsZipFile = new org.apache.commons.compress.archivers.zip.ZipFile("another.zip");
            commonsZipFile.getInputStream(entry); // 未检查或使用返回值
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### 潜在影响

未检查或使用返回值可能导致以下问题：

*   **资源泄露**: 某些方法返回的资源（如输入流）如果没有被正确关闭，可能导致文件句柄或其他系统资源的泄露，长期运行可能耗尽系统资源。
*   **逻辑错误**: 如果方法的返回值是操作结果或状态指示，未检查可能导致程序逻辑出现错误。
*   **性能问题**: 创建了对象或资源却没有使用，浪费计算资源。

因此，在调用这些返回对象的方法后，建议检查返回值并根据需要进行处理（例如，赋值给变量进行后续操作，或者确保资源被正确管理和释放）。
CODE
	level: "info",
	message: "发现Java java.util.zip.ZipFile未检查返回值的API",
	risk: "api-abuse",
	title: "Check Java Zip Unchecked Return Value",
}

$toCheck?{<typeName>?{have:'org.apache.commons.compress.archivers.zip.ZipFile'}}?{!<getUsers>} as $weak2;
alert $weak2	for {
	title: "Check Java Zip Unchecked Return Value",
	title_zh: "检测Java Zip未检查返回值的API",
	solution: <<<CODE
### 修复建议

1.  **检查并使用返回值:** 对于返回对象的 API 调用，请确保将返回值赋值给一个变量，并在后续代码中使用该变量进行处理。对于返回流（如 `getInputStream`），请确保在使用完毕后关闭流，通常使用 try-with-resources 语句可以有效管理流的关闭。

    ```java
    // 修复代码示例
    package org.example;
    import java.util.zip.ZipEntry;
    import java.util.zip.ZipFile;
    import java.io.InputStream;
    import java.io.IOException;

    public class ZipFileExampleFixed {
        public static void main(String[] args) {
            String zipFilePath = "example.zip";
            try (ZipFile zipFile = new ZipFile(zipFilePath)) {
                java.util.Enumeration<? extends ZipEntry> entries = zipFile.entries();
                if (entries.hasMoreElements()) {
                    ZipEntry entry = entries.nextElement();
                    // 检查并使用返回值，使用 try-with-resources 确保流关闭
                    try (InputStream entryInputStream = zipFile.getInputStream(entry)) {
                        // 对 entryInputStream 进行处理，例如读取数据
                         int data = entryInputStream.read();
                         while(data != -1) {
                             System.out.print((char) data);
                             data = entryInputStream.read();
                         }
                    }
                }

                org.apache.commons.compress.archivers.zip.ZipFile commonsZipFile = new org.apache.commons.compress.archivers.zip.ZipFile("another.zip");
                if (commonsZipFile.entries().hasMoreElements()){
                     ZipEntry entry2 = commonsZipFile.entries().nextElement();
                    try (InputStream entryInputStream = commonsZipFile.getInputStream(entry2)) {
                        // 对 entryInputStream 进行处理
                        int data = entryInputStream.read();
                         while(data != -1) {
                             System.out.print((char) data);
                             data = entryInputStream.read();
                         }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    ```

2.  **仔细阅读 API 文档:** 在使用第三方库或标准库中的方法时，仔细阅读其 API 文档，了解方法的返回值及其含义，确保正确处理返回值。

3.  **代码审查:** 定期进行代码审查，以发现未检查返回值的潜在问题。
CODE
	desc: <<<CODE
### 规则描述

该规则用于检测 Java 代码中对 `java.util.zip.ZipFile` 和 `org.apache.commons.compress.archivers.zip.ZipFile` 类中返回对象的方法调用后，是否对返回值进行了后续处理，例如赋值给变量或进一步操作。如果调用的返回对象没有被使用，可能导致潜在的资源泄露或逻辑错误。

### 触发场景

在处理压缩文件时，开发者可能调用 ZipFile 类中的方法来获取特定条目（Entry）的输入流或其他信息。如果对这些方法的返回值（例如 `getInputStream()` 返回的 `InputStream` 对象）没有进行后续处理，如读取数据、关闭流，或者将返回值赋值给一个变量以便后续使用，就会触发此规则。

```java
package org.example;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.io.InputStream;
import java.io.IOException;

public class ZipFileExample {
    public static void main(String[] args) {
        String zipFilePath = "example.zip";
        try (ZipFile zipFile = new ZipFile(zipFilePath)) {
            java.util.Enumeration<? extends ZipEntry> entries = zipFile.entries();
            ZipEntry entry = entries.nextElement();
            zipFile.getInputStream(entry); // 未检查或使用返回值
            
            org.apache.commons.compress.archivers.zip.ZipFile commonsZipFile = new org.apache.commons.compress.archivers.zip.ZipFile("another.zip");
            commonsZipFile.getInputStream(entry); // 未检查或使用返回值
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### 潜在影响

未检查或使用返回值可能导致以下问题：

*   **资源泄露**: 某些方法返回的资源（如输入流）如果没有被正确关闭，可能导致文件句柄或其他系统资源的泄露，长期运行可能耗尽系统资源。
*   **逻辑错误**: 如果方法的返回值是操作结果或状态指示，未检查可能导致程序逻辑出现错误。
*   **性能问题**: 创建了对象或资源却没有使用，浪费计算资源。

因此，在调用这些返回对象的方法后，建议检查返回值并根据需要进行处理（例如，赋值给变量进行后续操作，或者确保资源被正确管理和释放）。
CODE
	level: "low",
	risk: "api-abuse",
	message: "发现Java org.apache.commons.compress.archivers.zip.ZipFile未检查返回值的API",
}

desc(
	lang:'java'
	alert_num:1
	'file://demo.java':<<<TEXT
package org.example;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.io.InputStream;
import java.io.IOException;

public class ZipFileExample {
    public static void main(String[] args) {
        String zipFilePath = "example.zip";
        try (ZipFile zipFile = new ZipFile(zipFilePath)) {
            java.util.Enumeration<? extends ZipEntry> entries = zipFile.entries();
            ZipEntry entry = entries.nextElement();
            try (InputStream entryInputStream = zipFile.getInputStream(entry)) {
                // ...
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
TEXT
)

desc(
	lang:'java'
	alert_num:1
	'file://demo2.java':<<<TEXT
import java.io.InputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class ApacheCommonsZipFileExample {
    public static void main(String[] args) {
        String zipFilePath = "example.zip";
        try (ZipFile zipFile = new ZipFile(zipFilePath)) {
            try (InputStream entryInputStream = zipFile.getInputStream(entry)) {
                // ...
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
TEXT
)

