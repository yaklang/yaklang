desc(
  title_zh: "检测 xlsx-streamer 库直接解析与低版本风险",
  title: "检测 xlsx-streamer 库直接解析与低版本风险",
  type: vuln,
  level: high,
  risk: fileparse,
  harm_zh: "此漏洞可能导致 XML 外部实体注入（XXE）、内存溢出（OOM）或拒绝服务（DoS）攻击。如果直接使用 xlsx-streamer 库的 StreamingReader.builder().open() 方法解析来自用户的不可信输入流，且未进行安全过滤，攻击者可以构造恶意 XLSX 文件触发安全缺陷。同时，使用低于 1.2.0 的 xlsx-streamer 版本存在已知漏洞，可能被恶意文件利用。",
  harm: "This vulnerability may lead to XXE, OOM, or DoS attacks. Directly parsing untrusted input streams with xlsx-streamer's StreamingReader.builder().open() without proper validation can allow attackers to craft malicious XLSX files to exploit security flaws. Versions below 1.2.0 also have known vulnerabilities exploitable by malicious files.",
  fix_zh: "建议在解析 XLSX 文件前对输入进行严格的类型、大小、内容校验，避免直接解析不可信数据；同时升级 xlsx-streamer 至 1.2.0 及以上版本以修复已知漏洞。",
  fix: <<<FIX
修复建议：
1. 升级依赖至安全版本（至少 1.2.0）：
```xml
<dependency>
    <groupId>com.monitorjbl</groupId>
    <artifactId>xlsx-streamer</artifactId>
    <version>1.2.0</version>
</dependency>
	2.	在调用 StreamingReader.builder().open() 前，对输入流进行类型、大小、内容校验。
	3.	对上传文件进行白名单校验（扩展名、MIME 类型、文件头 Magic Number）。
	4.	限制内存和解析时间，防止拒绝服务攻击。
FIX
)

<include('java-spring-mvc-param')> as $entry;
<include('java-servlet-param')> as $entry;

StreamingReader.builder().open(* as $xssinput)
$xssinput#{include: '* & $entry'}->?{* & $entry} as $parseInput

alert $parseInput for {
  level: "mid",
  desc: "检测到直接使用 xlsx-streamer 解析用户输入流，可能导致 XXE、OOM 或拒绝服务等风险。"
}

__dependency__.*xlsx*streamer*.version as $ver;
$ver in (,1.2.0] as $vuln_xlsx;

check $vuln_xlsx

alert $vuln_xlsx for {
    level: high,
    desc: <<<DESC
    检测到使用的 xlsx-streamer 版本低于 1.2.0，存在已知安全漏洞，请尽快升级。
DESC
    fix: <<<FIX

FIX
}

