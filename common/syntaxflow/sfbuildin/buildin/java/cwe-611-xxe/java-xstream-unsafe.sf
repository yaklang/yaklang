desc(
	title: "Check Java XStream Unsafe Deserialization"
	title_zh: "检测 Java XStream 不安全反序列化"
	type: vuln
	risk: XXE
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   XStream 是一个流行的 Java 库，用于将 Java 对象序列化为 XML，并从 XML 反序列化为 Java 对象。当XStream在未明确设置安全策略的情况下处理来自不受信任来源的XML数据时，可能存在反序列化漏洞。攻击者可以构造恶意XML载荷，利用Java对象图中的gadget链，导致应用程序执行任意代码、拒绝服务或信息泄露。

2. **触发场景**
   当应用程序使用默认配置或宽松配置的XStream库从外部接收XML数据进行反序列化时（例如，处理用户上传的XML文件、解析来自外部服务的XML响应等），如果XML数据由攻击者控制，就可能触发漏洞。

   // 存在漏洞的代码示例
   ```java
   import com.thoughtworks.xstream.XStream;
   import com.thoughtworks.xstream.io.xml.DomDriver;
   import java.io.File;
   import java.io.FileInputStream;
   import java.io.FileNotFoundException;

   public class XStreamUnsafe {
       public void deserialize(String xmlPath) {
           // 未配置安全策略的XStream实例
           XStream xstream = new XStream(new DomDriver());
           try {
               // 从文件读取外部XML数据进行反序列化
               xstream.fromXML(new FileInputStream(new File(xmlPath)));
           } catch (FileNotFoundException e) {
               e.printStackTrace();
           } 
       }
   }
   ```

3. **潜在影响**
   - **远程代码执行 (RCE)**：攻击者执行任意系统命令，完全控制服务器。
   - **拒绝服务 (DoS)**：通过构造payload导致应用程序崩溃或资源耗尽。
   - **信息泄露**：读取系统文件或其他敏感信息。
   - **应用逻辑绕过或数据破坏**：反序列化恶意对象修改程序状态或数据。

该规则检测XStream对象在调用`fromXML`方法进行反序列化时，是否未设置关键的安全配置，如`setMode`、`allowType`、`setupDefaultSecurity`、`addPermission`、`allowTypeHierarchy`等，从而识别潜在的不安全使用点。
DESC
	rule_id: "c4ad6405-a9bc-468a-87be-06742472b623"
	solution: <<<SOLUTION
### 修复建议

#### 1. 明确设置XStream安全模式
使用`setMode(XStream.NO_REFERENCES)`禁用对象引用，防止反序列化图中引用的对象被恶意操纵。
```java
// 修复代码示例
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class XStreamSafe {
    public void deserialize(String xmlPath) {
        XStream xstream = new XStream(new DomDriver());
        // 设置安全模式，禁用引用
        xstream.setMode(XStream.NO_REFERENCES);
        try {
            xstream.fromXML(new FileInputStream(new File(xmlPath)));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    } 
}
```

#### 2. 配置严格的类型白名单（推荐）
只允许反序列化预期的安全类型，拒绝反序列化潜在危险的类。这是最推荐的安全加固措施。
```java
import com.thoughtworks.xstream.XStream;
import ... // 其他必要的导入

...
XStream xstream = new XStream();
// ... 其他配置

// 清除默认的禁用列表，重新配置
xstream.addPermission(com.thoughtworks.xstream.security.NoTypePermission.NONE);

// 允许反序列化特定的安全类型，例如只允许 String 和 Integer
xstream.addPermission(com.thoughtworks.xstream.security.AnyTypePermission.ANY);

// 允许反序列化特定的安全类型，例如，只允许反序列化 MySafeClass 类及其子类
xstream.allowTypes(new Class[]{MySafeClass.class});
// 或者更严格地允许一个类型列表
xstream.allowTypes(new Class[]{String.class, Integer.class, YourExpectedObject.class});

// 如果需要反序列化某个包下的所有类
xstream.allowTypesByWildcard(new String[]{"com.yourcompany.**"});

// 或者直接配置默认安全设置（XStream 1.4.10+）
xstream.setupDefaultSecurity(xstream);
xstream.allowTypes(new Class[]{YourExpectedObject.class});

// ... 反序列化操作
```

#### 3. 考虑升级XStream版本
高版本的XStream通常包含更多的安全加固措施和默认的安全配置。

#### 4. 避免反序列化来自不受信任来源的数据
如果可能，避免反序列化任何来自外部、不可信源的序列化数据。
SOLUTION
	reference: <<<REFERENCE
[CWE-611: Improper Restriction of XML External Entity Reference ('XXE')](https://cwe.mitre.org/data/definitions/611.html)
[XStream Security Notes](https://x-stream.github.io/security.html)
REFERENCE
)

fromXML as $fromXML;
$fromXML?{ <getObject>?{!.setMode && !.allowType* && !.setupDefaultSecurity && !.addPermission && !.allowTypeHierarchy && <typeName>?{have: XStream} } }() as $vuln;

check $vuln;
alert $vuln for {
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   XStream 是一个流行的 Java 库，用于将 Java 对象序列化为 XML，并从 XML 反序列化为 Java 对象。当XStream在未明确设置安全策略的情况下处理来自不受信任来源的XML数据时，可能存在反序列化漏洞。攻击者可以构造恶意XML载荷，利用Java对象图中的gadget链，导致应用程序执行任意代码、拒绝服务或信息泄露。

2. **触发场景**
   当应用程序使用默认配置或宽松配置的XStream库从外部接收XML数据进行反序列化时（例如，处理用户上传的XML文件、解析来自外部服务的XML响应等），如果XML数据由攻击者控制，就可能触发漏洞。

   // 存在漏洞的代码示例
   ```java
   import com.thoughtworks.xstream.XStream;
   import com.thoughtworks.xstream.io.xml.DomDriver;
   import java.io.File;
   import java.io.FileInputStream;
   import java.io.FileNotFoundException;

   public class XStreamUnsafe {
       public void deserialize(String xmlPath) {
           // 未配置安全策略的XStream实例
           XStream xstream = new XStream(new DomDriver());
           try {
               // 从文件读取外部XML数据进行反序列化
               xstream.fromXML(new FileInputStream(new File(xmlPath)));
           } catch (FileNotFoundException e) {
               e.printStackTrace();
           } 
       }
   }
   ```

3. **潜在影响**
   - **远程代码执行 (RCE)**：攻击者执行任意系统命令，完全控制服务器。
   - **拒绝服务 (DoS)**：通过构造payload导致应用程序崩溃或资源耗尽。
   - **信息泄露**：读取系统文件或其他敏感信息。
   - **应用逻辑绕过或数据破坏**：反序列化恶意对象修改程序状态或数据。

该规则检测XStream对象在调用`fromXML`方法进行反序列化时，是否未设置关键的安全配置，如`setMode`、`allowType`、`setupDefaultSecurity`、`addPermission`、`allowTypeHierarchy`等，从而识别潜在的不安全使用点。
CODE
	level: "high",
	message: "XStream Unsafe Use in Context Sink",
	title: "Check Java XStream Unsafe Deserialization",
	title_zh: "检测 Java XStream 不安全反序列化",
	solution: <<<CODE
### 修复建议

#### 1. 明确设置XStream安全模式
使用`setMode(XStream.NO_REFERENCES)`禁用对象引用，防止反序列化图中引用的对象被恶意操纵。
```java
// 修复代码示例
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class XStreamSafe {
    public void deserialize(String xmlPath) {
        XStream xstream = new XStream(new DomDriver());
        // 设置安全模式，禁用引用
        xstream.setMode(XStream.NO_REFERENCES);
        try {
            xstream.fromXML(new FileInputStream(new File(xmlPath)));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    } 
}
```

#### 2. 配置严格的类型白名单（推荐）
只允许反序列化预期的安全类型，拒绝反序列化潜在危险的类。这是最推荐的安全加固措施。
```java
import com.thoughtworks.xstream.XStream;
import ... // 其他必要的导入

...
XStream xstream = new XStream();
// ... 其他配置

// 清除默认的禁用列表，重新配置
xstream.addPermission(com.thoughtworks.xstream.security.NoTypePermission.NONE);

// 允许反序列化特定的安全类型，例如只允许 String 和 Integer
xstream.addPermission(com.thoughtworks.xstream.security.AnyTypePermission.ANY);

// 允许反序列化特定的安全类型，例如，只允许反序列化 MySafeClass 类及其子类
xstream.allowTypes(new Class[]{MySafeClass.class});
// 或者更严格地允许一个类型列表
xstream.allowTypes(new Class[]{String.class, Integer.class, YourExpectedObject.class});

// 如果需要反序列化某个包下的所有类
xstream.allowTypesByWildcard(new String[]{"com.yourcompany.**"});

// 或者直接配置默认安全设置（XStream 1.4.10+）
xstream.setupDefaultSecurity(xstream);
xstream.allowTypes(new Class[]{YourExpectedObject.class});

// ... 反序列化操作
```

#### 3. 考虑升级XStream版本
高版本的XStream通常包含更多的安全加固措施和默认的安全配置。

#### 4. 避免反序列化来自不受信任来源的数据
如果可能，避免反序列化任何来自外部、不可信源的序列化数据。
CODE
}

desc(
	lang: "java"
	alert_num: 1
	"file://unsafe.java": <<<UNSAFE
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class XStreamUnsafe {
    public void deserialize(String xml) {
        XStream xstream = new XStream(new DomDriver());
        try {
            xstream.fromXML(new FileInputStream(new File(xml)));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}
UNSAFE
)

desc(
	lang: "java"
	"safefile://safe.java": <<<SAFE
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class XStreamSafe {
    public void deserialize(String xml) {
        XStream xstream = new XStream(new DomDriver());
        xstream.setMode(XStream.NO_REFERENCES);
        try {
            xstream.fromXML(new FileInputStream(new File(xml)));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}
SAFE
)
