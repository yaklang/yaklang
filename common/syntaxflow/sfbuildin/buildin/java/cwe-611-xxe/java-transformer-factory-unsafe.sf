desc(
    title: "Find 'javax.xml.transform.Transformer' unsafe use in context sink",
    title_zh: "在上下文中查找 'javax.xml.transform.Transformer' 不安全使用",
    type: vuln,
    desc: <<<TEXT
此规则旨在检测在Java代码中使用`javax.xml.transform.Transformer`时的不安全实践。当Transformer被配置为解析不受信任的XML或XSLT输入时，如果没有适当的防护措施，攻击者可以利用外部实体引用（XXE）漏洞，从远程服务器加载恶意内容，执行服务器端请求伪造（SSRF）攻击，或暴露敏感的系统文件。XXE漏洞还可能被用来执行拒绝服务（DoS）攻击或绕过某些安全限制。因此，建议开发者在使用`Transformer`时，应确保禁用外部实体解析，或者只处理受信任的输入数据。
TEXT
)

TransformerFactory.newInstance() as $newInstance;
$newInstance?{!.setAttribute}.new*().transform() as $vuln;
check $vuln;
alert $vuln for {
    message: "Transformer Unsafe Use in Context Sink",
    risk: "xxe",
    level: "warning",
}

// ---------------------------------------CODE----------------------------------------------
desc(
    lang: java,
    "file:///unsafe.java": <<<UNSAFE
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.File;
import java.io.IOException;

public class XXEVulnerableExample {
    public static void main(String[] args) {
        try {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer(
                    new StreamSource(new File("vulnerable.xsl")));
            transformer.transform(
                    new StreamSource(new File("input.xml")),
                    new StreamResult(new File("output.xml")));
        } catch (TransformerException | IOException e) {
            e.printStackTrace();
        }
    }
}
UNSAFE,
    "safefile:///safe.java": <<<SAFE
import javax.xml.XMLConstants;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.sax.SAXTransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.File;
import java.io.IOException;

public class XXESecureExample {
    public static void main(String[] args) {
        try {
            SAXTransformerFactory transformerFactory = (SAXTransformerFactory) TransformerFactory.newInstance();
            transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
            transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");

            Transformer transformer = transformerFactory.newTransformer(
                    new StreamSource(new File("secure.xsl")));
            transformer.transform(
                    new StreamSource(new File("input.xml")),
                    new StreamResult(new File("output.xml")));
        } catch (TransformerConfigurationException | TransformerException | IOException e) {
            e.printStackTrace();
        }
    }
}
SAFE
)

