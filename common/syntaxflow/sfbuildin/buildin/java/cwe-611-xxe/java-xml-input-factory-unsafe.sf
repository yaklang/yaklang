desc(
	title: "Check Java STAX XMLInputFactory Unsafe Use"
	title_zh: "检测 Java STAX XMLInputFactory 不安全使用"
	type: vuln
	risk: XXE
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   使用 STAX（Streaming API for XML）处理 XML 数据时，`XMLInputFactory` 的默认配置可能支持外部实体加载（External Entities）和 DTD（Document Type Definition）。未禁用这些特性会导致应用程序容易受到 XML 外部实体（XXE）攻击。
   攻击者可以在恶意的 XML 文件中通过 `<!ENTITY>` 声明引用外部资源，`XMLInputFactory` 在解析时会尝试加载这些外部资源。这可能导致敏感文件被读取、向外部服务发起请求（SSRF）、甚至在某些配置下执行系统命令。

2. **触发场景**
   以下代码示例展示了使用 `XMLInputFactory.newInstance()` 创建工厂并直接解析输入流，而未禁用外部实体和 DTD 支持：
   ```java
   import javax.xml.stream.XMLInputFactory;
   import javax.xml.stream.XMLStreamException;
   import javax.xml.stream.XMLStreamReader;

   public class Example {
       public static void parseXml(InputStream stream, String charEncoding) throws XMLStreamException {
           final XMLInputFactory factory = XMLInputFactory.newInstance(); // 未设置安全属性
           final XMLStreamReader xmlReader;
           if (charEncoding != null) {
               xmlReader = factory.createXMLStreamReader(stream, charEncoding);
           } else {
               xmlReader = factory.createXMLStreamReader(stream);
           }
           // ... 后续解析逻辑 ...
       }
   }
   ```
   攻击者可以构造包含外部实体引用的恶意 XML 作为输入流，导致应用程序尝试加载外部资源。

3. **潜在影响**
   - **敏感文件泄露**: 攻击者可以通过文件协议（`file://`）读取服务器上的任意文件（例如 `/etc/passwd`）。
   - **服务端请求伪造 (SSRF)**: 攻击者可以通过 HTTP 等协议向内部网络或其他服务发起请求。
   - **拒绝服务 (DoS)**: 攻击者可以构造递归或无限循环的实体引用，导致解析器陷入死循环或消耗大量资源，造成服务不可用。
   - **端口扫描**: 通过错误信息或延迟差异，攻击者可以探测内部网络的开放端口。

DESC
	rule_id: "4b416d51-56a5-4424-a7e3-79514d453483"
	reference: <<<REFERENCE
[CWE-611: Information Exposure Through XML External Entity (XXE)](https://cwe.mitre.org/data/definitions/611.html)
[OWASP - XML External Entity (XXE) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)
REFERENCE
	solution: <<<SOLUTION
### 修复建议

#### 1. 禁用外部实体和 DTD 支持
最有效的防御措施是在创建 `XMLInputFactory` 实例后，立即通过 `setProperty()` 方法明确禁用可能导致 XXE 漏洞的特性。建议禁用外部实体支持 (`IS_SUPPORTING_EXTERNAL_ENTITIES`) 和 DTD 支持 (`SUPPORT_DTD`)。

```java
// 修复代码示例
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import java.io.InputStream;

public class Example {
    public static void parseXml(InputStream stream, String charEncoding) throws XMLStreamException {
        final XMLInputFactory factory = XMLInputFactory.newInstance();

        // 明确禁用外部实体支持
        factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
        // 明确禁用 DTD 支持 (虽然通常禁用外部实体后DTD中外部引用已无效，但作为防御深度推荐禁用)
        factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);

        final XMLStreamReader xmlReader;
        if (charEncoding != null) {
            xmlReader = factory.createXMLStreamReader(stream, charEncoding);
        } else {
            xmlReader = factory.createXMLStreamReader(stream);
        }
        // ... 后续解析逻辑 ...
    }
}
```

#### 2. 使用安全配置的工厂方法 (如果可用)
查看您使用的 STAX 实现是否提供了更安全的工厂创建方法或配置选项。有些库可能提供预先配置好的安全工厂。

#### 3. 输入验证和沙箱
对所有 XML 输入进行严格的合法性验证。如果必须处理包含外部引用的 XML，考虑使用沙箱环境或更严格的解析设置，限制解析器对外部资源的访问。

SOLUTION
)

XMLInputFactory.newInstance() as $factory;
check $factory;

$factory?{!.setProperty}...createXMLStreamReader() as $vulnCall;
$factory...createXMLStreamReader() as $allCall;

$allCall - $vulnCall as $toCheckCall;
$factory?{.setProperty?(,*?{=="javax.xml.stream.supportDTD"},*?{==false})} as $excludeFactory;
$factory?{.setProperty?(,*?{=="javax.xml.stream.isSupportingExternalEntities"},*?{==false})} as $excludeFactory;
$factory?{.setProperty?(,*?{=="javax.xml.stream.isSupportingExternalEntities"},*?{==false})}  as $excludeFactory;
$excludeFactory...createXMLStreamReader() as $excludeCall;
$toCheckCall - $excludeCall as $vulnCall;
check $vulnCall;

alert $vulnCall	for {
	level: "high",
	message: "STAX XMLInputFactory() Unsafe Use",
	title: "Check Java STAX XMLInputFactory Unsafe Use",
	title_zh: "检测 Java STAX XMLInputFactory 不安全使用",
	solution: <<<CODE
### 修复建议

#### 1. 禁用外部实体和 DTD 支持
最有效的防御措施是在创建 `XMLInputFactory` 实例后，立即通过 `setProperty()` 方法明确禁用可能导致 XXE 漏洞的特性。建议禁用外部实体支持 (`IS_SUPPORTING_EXTERNAL_ENTITIES`) 和 DTD 支持 (`SUPPORT_DTD`)。

```java
// 修复代码示例
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import java.io.InputStream;

public class Example {
    public static void parseXml(InputStream stream, String charEncoding) throws XMLStreamException {
        final XMLInputFactory factory = XMLInputFactory.newInstance();

        // 明确禁用外部实体支持
        factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
        // 明确禁用 DTD 支持 (虽然通常禁用外部实体后DTD中外部引用已无效，但作为防御深度推荐禁用)
        factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);

        final XMLStreamReader xmlReader;
        if (charEncoding != null) {
            xmlReader = factory.createXMLStreamReader(stream, charEncoding);
        } else {
            xmlReader = factory.createXMLStreamReader(stream);
        }
        // ... 后续解析逻辑 ...
    }
}
```

#### 2. 使用安全配置的工厂方法 (如果可用)
查看您使用的 STAX 实现是否提供了更安全的工厂创建方法或配置选项。有些库可能提供预先配置好的安全工厂。

#### 3. 输入验证和沙箱
对所有 XML 输入进行严格的合法性验证。如果必须处理包含外部引用的 XML，考虑使用沙箱环境或更严格的解析设置，限制解析器对外部资源的访问。
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   使用 STAX（Streaming API for XML）处理 XML 数据时，`XMLInputFactory` 的默认配置可能支持外部实体加载（External Entities）和 DTD（Document Type Definition）。未禁用这些特性会导致应用程序容易受到 XML 外部实体（XXE）攻击。
   攻击者可以在恶意的 XML 文件中通过 `<!ENTITY>` 声明引用外部资源，`XMLInputFactory` 在解析时会尝试加载这些外部资源。这可能导致敏感文件被读取、向外部服务发起请求（SSRF）、甚至在某些配置下执行系统命令。

2. **触发场景**
   以下代码示例展示了使用 `XMLInputFactory.newInstance()` 创建工厂并直接解析输入流，而未禁用外部实体和 DTD 支持：
   ```java
   import javax.xml.stream.XMLInputFactory;
   import javax.xml.stream.XMLStreamException;
   import javax.xml.stream.XMLStreamReader;

   public class Example {
       public static void parseXml(InputStream stream, String charEncoding) throws XMLStreamException {
           final XMLInputFactory factory = XMLInputFactory.newInstance(); // 未设置安全属性
           final XMLStreamReader xmlReader;
           if (charEncoding != null) {
               xmlReader = factory.createXMLStreamReader(stream, charEncoding);
           } else {
               xmlReader = factory.createXMLStreamReader(stream);
           }
           // ... 后续解析逻辑 ...
       }
   }
   ```
   攻击者可以构造包含外部实体引用的恶意 XML 作为输入流，导致应用程序尝试加载外部资源。

3. **潜在影响**
   - **敏感文件泄露**: 攻击者可以通过文件协议（`file://`）读取服务器上的任意文件（例如 `/etc/passwd`）。
   - **服务端请求伪造 (SSRF)**: 攻击者可以通过 HTTP 等协议向内部网络或其他服务发起请求。
   - **拒绝服务 (DoS)**: 攻击者可以构造递归或无限循环的实体引用，导致解析器陷入死循环或消耗大量资源，造成服务不可用。
   - **端口扫描**: 通过错误信息或延迟差异，攻击者可以探测内部网络的开放端口。
CODE
}

desc(
	lang: "java"
	alert_num: 2
	"file://cve_2018_15531.java": <<<UNSAFE
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.regex.Pattern;

import javax.servlet.ReadListener;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import net.bull.javamelody.internal.common.LOG;

public class PayloadNameRequestWrapper extends HttpServletRequestWrapper {
private static String parseSoapMethodName(InputStream stream, String charEncoding) {
		try {
			// newInstance() et pas newFactory() pour java 1.5 (issue 367)
			final XMLInputFactory factory = XMLInputFactory.newInstance();
			final XMLStreamReader xmlReader;
			if (charEncoding != null) {
				xmlReader = factory.createXMLStreamReader(stream, charEncoding);
			} else {
				xmlReader = factory.createXMLStreamReader(stream);
			}

			//best-effort parsing

			//start document, go to first tag
			xmlReader.nextTag();

			//expect first tag to be "Envelope"
			if (!"Envelope".equals(xmlReader.getLocalName())) {
				LOG.debug("Unexpected first tag of SOAP request: '" + xmlReader.getLocalName()
						+ "' (expected 'Envelope')");
				return null; //failed
			}

			//scan for body tag
			if (!scanForChildTag(xmlReader, "Body")) {
				LOG.debug("Unable to find SOAP 'Body' tag");
				return null; //failed
			}

			xmlReader.nextTag();

			//tag is method name
			return "." + xmlReader.getLocalName();
		} catch (final XMLStreamException e) {
			LOG.debug("Unable to parse SOAP request", e);
			//failed
			return null;
		}
	}
}
UNSAFE
)

desc(
	lang: "java"
	"safefile://cve_2018_15531_safe.java": <<<SAFE
    import java.util.NoSuchElementException;
    import java.util.Scanner;
    import java.util.regex.Pattern;

    import javax.servlet.ReadListener;
    import javax.servlet.ServletInputStream;
    import javax.servlet.ServletRequest;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletRequestWrapper;
    import javax.xml.stream.XMLInputFactory;
    import javax.xml.stream.XMLStreamException;
    import javax.xml.stream.XMLStreamReader;
    import net.bull.javamelody.internal.common.LOG;

    public class PayloadNameRequestWrapper extends HttpServletRequestWrapper {
    private static String parseSoapMethodName(InputStream stream, String charEncoding) {
    		try {
    			// newInstance() et pas newFactory() pour java 1.5 (issue 367)
    			final XMLInputFactory factory = XMLInputFactory.newInstance();
    			factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    			final XMLStreamReader xmlReader;
    			if (charEncoding != null) {
    				xmlReader = factory.createXMLStreamReader(stream, charEncoding);
    			} else {
    				xmlReader = factory.createXMLStreamReader(stream);
    			}

    			//best-effort parsing

    			//start document, go to first tag
    			xmlReader.nextTag();

    			//expect first tag to be "Envelope"
    			if (!"Envelope".equals(xmlReader.getLocalName())) {
    				LOG.debug("Unexpected first tag of SOAP request: '" + xmlReader.getLocalName()
    						+ "' (expected 'Envelope')");
    				return null; //failed
    			}

    			//scan for body tag
    			if (!scanForChildTag(xmlReader, "Body")) {
    				LOG.debug("Unable to find SOAP 'Body' tag");
    				return null; //failed
    			}

    			xmlReader.nextTag();

    			//tag is method name
    			return "." + xmlReader.getLocalName();
    		} catch (final XMLStreamException e) {
    			LOG.debug("Unable to parse SOAP request", e);
    			//failed
    			return null;
    		}
    	}
    }
SAFE
)


