desc(
	title: "Detect Java SQL String Append Vulnerability"
	type: audit
	level: low
	risk:sqli
	desc: <<<DESC
### 漏洞描述
1. **漏洞原理**
SQL注入是由于应用程序将用户提供的、未经充分过滤或转义的数据直接拼接到SQL查询字符串中，攻击者可以通过构造恶意输入来改变查询的逻辑，甚至执行非预期的数据库命令。

本文中的规则侧重于识别`StringBuilder`或`StringBuffer`对象的`append()`方法中用于SQL构建的部分，特别是当append的内容为非常量时，这增加了SQL注入的风险。

2. **触发场景**
当开发者使用`StringBuilder`或`StringBuffer`手动构建SQL查询，并将用户输入或其他可控变量直接或间接拼接到查询字符串中时，就可能触发此风险。例如：

```java
StringBuilder sqlString = new StringBuilder("SELECT * FROM users WHERE id = ");
String userId = request.getParameter("id"); // 用户输入
sqlString.append(userId); // 将用户输入直接拼接到SQL
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery(sqlString.toString());
```

在上述示例中，如果用户输入 `1 OR 1=1`，最终执行的SQL将变为 `SELECT * FROM users WHERE id = 1 OR 1=1`，导致绕過應用程序原有的查詢邏輯。

3. **潜在影响**
- 绕过身份验证或访问控制。
- 窃取、更改或删除数据库中的敏感数据。
- 在数据库服务器上执行系统命令（取决于数据库配置和权限）。
- 通过数据库作为跳板，对内部网络进行进一步攻击。
DESC
	rule_id: "e53aa369-2d16-445a-a9e9-fb2155791246"
	title_zh: "检测Java拼接SQL字符串漏洞"
	solution: <<<SOLUTION
### 修复建议

#### 1. 優先使用参数化查询（PreparedStatement）
使用参数化查询是防止SQL注入最有效的方法。通过预编译SQL语句，并将用户输入作为参数绑定，数据库能够区分代码和数据，从而避免恶意输入被解释为SQL命令。这是Java中最推荐的防御措施。

```java
// 修复代码示例 (使用 PreparedStatement)
String userId = request.getParameter("id");
String sql = "SELECT * FROM users WHERE id = ?"; // Placeholder "?"
try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
    // 强制类型转换并设置参数，防止注入
    pstmt.setInt(1, Integer.parseInt(userId)); 
    ResultSet rs = pstmt.executeQuery();
    // 处理结果集
}
```

#### 2. 使用ORM框架
利用现代ORM（Object-Relational Mapping）框架，如Hibernate、MyBatis等。这些框架通常内置了参数化查询的机制，可以自动处理SQL的安全构造。

```java
// MyBatis 示例
// Mapper XML
<select id="getUserById" resultType="User">
    SELECT * FROM users WHERE id = #{id}
</select>

// Java代码 (调用 Mapper)
String userId = request.getParameter("id");
// MyBatis 会自动处理 #{id} 的参数绑定
User user = sqlSession.selectOne("getUserById", Integer.parseInt(userId)); 
```

#### 3. 对所有用户输入进行严格的输入验证和过滤
尽管参数化查询是首选，但在某些情况下（如构建动态查询的WHERE子句），如果必须使用字符串拼接，必须对所有用户输入进行严格的验证和过滤。这包括检查数据类型、长度、格式，并对特殊字符进行转义或移除。**但请注意，这比参数化查询更容易出错，应尽量避免。**

```java
// 示例：简单校验是否为数字
String userId = request.getParameter("id");
if (!userId.matches("^[0-9]+$")) {
    // 处理非法输入，例如抛出异常或返回错误信息
    throw new IllegalArgumentException("Invalid user ID format.");
}
// 在校验通过后，如果实在无法使用参数化查询，才考虑谨慎拼接
// (但这仍然不推荐用于关键查询)
// StringBuilder sqlString = new StringBuilder("SELECT * FROM users WHERE id = ").append(userId); 
```
SOLUTION
	reference: <<<REFERENCE
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)
REFERENCE
)


*sql*.append(*<slice(start=1)> as $params);
check $params;

$params?{!opcode: const}#{
    hook: `*?{opcode: const && have: 'WHERE'}<show> as $flag`,
}->
alert $flag for {
	title_zh: "检测Java拼接SQL字符串漏洞",
	solution: <<<CODE
### 修复建议

#### 1. 優先使用参数化查询（PreparedStatement）
使用参数化查询是防止SQL注入最有效的方法。通过预编译SQL语句，并将用户输入作为参数绑定，数据库能够区分代码和数据，从而避免恶意输入被解释为SQL命令。这是Java中最推荐的防御措施。

```java
// 修复代码示例 (使用 PreparedStatement)
String userId = request.getParameter("id");
String sql = "SELECT * FROM users WHERE id = ?"; // Placeholder "?"
try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
    // 强制类型转换并设置参数，防止注入
    pstmt.setInt(1, Integer.parseInt(userId)); 
    ResultSet rs = pstmt.executeQuery();
    // 处理结果集
}
```

#### 2. 使用ORM框架
利用现代ORM（Object-Relational Mapping）框架，如Hibernate、MyBatis等。这些框架通常内置了参数化查询的机制，可以自动处理SQL的安全构造。

```java
// MyBatis 示例
// Mapper XML
<select id="getUserById" resultType="User">
    SELECT * FROM users WHERE id = #{id}
</select>

// Java代码 (调用 Mapper)
String userId = request.getParameter("id");
// MyBatis 会自动处理 #{id} 的参数绑定
User user = sqlSession.selectOne("getUserById", Integer.parseInt(userId)); 
```

#### 3. 对所有用户输入进行严格的输入验证和过滤
尽管参数化查询是首选，但在某些情况下（如构建动态查询的WHERE子句），如果必须使用字符串拼接，必须对所有用户输入进行严格的验证和过滤。这包括检查数据类型、长度、格式，并对特殊字符进行转义或移除。**但请注意，这比参数化查询更容易出错，应尽量避免。**

```java
// 示例：简单校验是否为数字
String userId = request.getParameter("id");
if (!userId.matches("^[0-9]+$")) {
    // 处理非法输入，例如抛出异常或返回错误信息
    throw new IllegalArgumentException("Invalid user ID format.");
}
// 在校验通过后，如果实在无法使用参数化查询，才考虑谨慎拼接
// (但这仍然不推荐用于关键查询)
// StringBuilder sqlString = new StringBuilder("SELECT * FROM users WHERE id = ").append(userId); 
```
CODE
	desc: <<<CODE
### 漏洞描述
1. **漏洞原理**
SQL注入是由于应用程序将用户提供的、未经充分过滤或转义的数据直接拼接到SQL查询字符串中，攻击者可以通过构造恶意输入来改变查询的逻辑，甚至执行非预期的数据库命令。

本文中的规则侧重于识别`StringBuilder`或`StringBuffer`对象的`append()`方法中用于SQL构建的部分，特别是当append的内容为非常量时，这增加了SQL注入的风险。

2. **触发场景**
当开发者使用`StringBuilder`或`StringBuffer`手动构建SQL查询，并将用户输入或其他可控变量直接或间接拼接到查询字符串中时，就可能触发此风险。例如：

```java
StringBuilder sqlString = new StringBuilder("SELECT * FROM users WHERE id = ");
String userId = request.getParameter("id"); // 用户输入
sqlString.append(userId); // 将用户输入直接拼接到SQL
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery(sqlString.toString());
```

在上述示例中，如果用户输入 `1 OR 1=1`，最终执行的SQL将变为 `SELECT * FROM users WHERE id = 1 OR 1=1`，导致绕過應用程序原有的查詢邏輯。

3. **潜在影响**
- 绕过身份验证或访问控制。
- 窃取、更改或删除数据库中的敏感数据。
- 在数据库服务器上执行系统命令（取决于数据库配置和权限）。
- 通过数据库作为跳板，对内部网络进行进一步攻击。
CODE
	level: "low",
	title: "Detect Java SQL String Append Vulnerability",
}



desc(
	lang: java
	'file://risk.java': <<<TEXT
package com.ruoyi.common.datascope.aspect;

import java.util.ArrayList;
import java.util.List;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;
import com.ruoyi.common.core.context.SecurityContextHolder;
import com.ruoyi.common.core.text.Convert;
import com.ruoyi.common.core.utils.StringUtils;
import com.ruoyi.common.core.web.domain.BaseEntity;
import com.ruoyi.common.datascope.annotation.DataScope;
import com.ruoyi.common.security.utils.SecurityUtils;
import com.ruoyi.system.api.domain.SysRole;
import com.ruoyi.system.api.domain.SysUser;
import com.ruoyi.system.api.model.LoginUser;

@Aspect
@Component
public class DataScopeAspect
{
    /**
     * 全部数据权限
     */
    public static final String DATA_SCOPE_ALL = "1";

    /**
     * 自定数据权限
     */
    public static final String DATA_SCOPE_CUSTOM = "2";

    /**
     * 部门数据权限
     */
    public static final String DATA_SCOPE_DEPT = "3";

    /**
     * 部门及以下数据权限
     */
    public static final String DATA_SCOPE_DEPT_AND_CHILD = "4";

    /**
     * 仅本人数据权限
     */
    public static final String DATA_SCOPE_SELF = "5";

    /**
     * 数据权限过滤关键字
     */
    public static final String DATA_SCOPE = "dataScope";

    @Before("@annotation(controllerDataScope)")
    public void doBefore(JoinPoint point, DataScope controllerDataScope) throws Throwable
    {
        clearDataScope(point);
        handleDataScope(point, controllerDataScope);
    }

    protected void handleDataScope(final JoinPoint joinPoint, DataScope controllerDataScope)
    {
        // 获取当前的用户
        LoginUser loginUser = SecurityUtils.getLoginUser();
        if (StringUtils.isNotNull(loginUser))
        {
            SysUser currentUser = loginUser.getSysUser();
            // 如果是超级管理员，则不过滤数据
            if (StringUtils.isNotNull(currentUser) && !currentUser.isAdmin())
            {
                String permission = StringUtils.defaultIfEmpty(controllerDataScope.permission(), SecurityContextHolder.getPermission());
                dataScopeFilter(joinPoint, currentUser, controllerDataScope.deptAlias(),
                        controllerDataScope.userAlias(), permission);
            }
        }
    }

    /**
     * 数据范围过滤
     *
     * @param joinPoint 切点
     * @param user 用户
     * @param deptAlias 部门别名
     * @param userAlias 用户别名
     * @param permission 权限字符
     */
    public static void dataScopeFilter(JoinPoint joinPoint, SysUser user, String deptAlias, String userAlias, String permission)
    {
        StringBuilder sqlString = new StringBuilder();
        List<String> conditions = new ArrayList<String>();
        List<String> scopeCustomIds = new ArrayList<String>();
        user.getRoles().forEach(role -> {
            if (DATA_SCOPE_CUSTOM.equals(role.getDataScope()) && StringUtils.containsAny(role.getPermissions(), Convert.toStrArray(permission)))
            {
                scopeCustomIds.add(Convert.toStr(role.getRoleId()));
            }
        });

        for (SysRole role : user.getRoles())
        {
            String dataScope = role.getDataScope();
            if (conditions.contains(dataScope))
            {
                continue;
            }
            if (!StringUtils.containsAny(role.getPermissions(), Convert.toStrArray(permission)))
            {
                continue;
            }
            if (DATA_SCOPE_ALL.equals(dataScope))
            {
                sqlString = new StringBuilder();
                conditions.add(dataScope);
                break;
            }
            else if (DATA_SCOPE_CUSTOM.equals(dataScope))
            {
                if (scopeCustomIds.size() > 1)
                {
                    // 多个自定数据权限使用in查询，避免多次拼接。
                    sqlString.append(StringUtils.format(" OR {}.dept_id IN ( SELECT dept_id FROM sys_role_dept WHERE role_id in ({}) ) ", deptAlias, String.join(",", scopeCustomIds)));
                }
                else
                {
                    sqlString.append(StringUtils.format(" OR {}.dept_id IN ( SELECT dept_id FROM sys_role_dept WHERE role_id = {} ) ", deptAlias, role.getRoleId()));
                }
            }
            else if (DATA_SCOPE_DEPT.equals(dataScope))
            {
                sqlString.append(StringUtils.format(" OR {}.dept_id = {} ", deptAlias, user.getDeptId()));
            }
            else if (DATA_SCOPE_DEPT_AND_CHILD.equals(dataScope))
            {
                sqlString.append(StringUtils.format(" OR {}.dept_id IN ( SELECT dept_id FROM sys_dept WHERE dept_id = {} or find_in_set( {} , ancestors ) )", deptAlias, user.getDeptId(), user.getDeptId()));
            }
            else if (DATA_SCOPE_SELF.equals(dataScope))
            {
                if (StringUtils.isNotBlank(userAlias))
                {
                    sqlString.append(StringUtils.format(" OR {}.user_id = {} ", userAlias, user.getUserId()));
                }
                else
                {
                    // 数据权限为仅本人且没有userAlias别名不查询任何数据
                    sqlString.append(StringUtils.format(" OR {}.dept_id = 0 ", deptAlias));
                }
            }
            conditions.add(dataScope);
        }

        // 角色都不包含传递过来的权限字符，这个时候sqlString也会为空，所以要限制一下,不查询任何数据
        if (StringUtils.isEmpty(conditions))
        {
            sqlString.append(StringUtils.format(" OR {}.dept_id = 0 ", deptAlias));
        }

        if (StringUtils.isNotBlank(sqlString.toString()))
        {
            Object params = joinPoint.getArgs()[0];
            if (StringUtils.isNotNull(params) && params instanceof BaseEntity)
            {
                BaseEntity baseEntity = (BaseEntity) params;
                baseEntity.getParams().put(DATA_SCOPE, " AND (" + sqlString.substring(4) + ")");
            }
        }
    }

    /**
     * 拼接权限sql前先清空params.dataScope参数防止注入
     */
    private void clearDataScope(final JoinPoint joinPoint)
    {
        Object params = joinPoint.getArgs()[0];
        if (StringUtils.isNotNull(params) && params instanceof BaseEntity)
        {
            BaseEntity baseEntity = (BaseEntity) params;
            baseEntity.getParams().put(DATA_SCOPE, "");
        }
    }
}
TEXT
)
