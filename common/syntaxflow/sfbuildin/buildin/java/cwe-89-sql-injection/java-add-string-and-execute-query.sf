desc(
	title: "Check Java SQL Statement Concatenation Vulnerability"
	title_zh: "检测 Java SQL 语句拼接漏洞"
	risk:sqli
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   SQL注入是由于应用程序未对用户输入进行严格的过滤或参数化处理，攻击者可通过构造特殊输入篡改原始SQL语句的逻辑。这可能导致非预期的数据库操作，例如数据泄露、数据篡改或权限绕过。

2. **触发场景**
   该规则识别Java代码中，疑似通过字符串拼接方式构造SQL语句，并将其用于数据库查询或执行操作的代码。例如，将用户可控的输入直接或间接拼接到SQL字符串中，可能导致SQL注入。

   ```java
   String userInput = request.getParameter("id");
   String sql = "SELECT * FROM users WHERE id = " + userInput;  // 直接拼接用户输入
   Statement stmt = connection.createStatement();
   ResultSet rs = stmt.executeQuery(sql);
   ```
   或
   ```java
   String countSql = "SELECT COUNT(*) FROM qrtz_cron_triggers";
   if(!StringUtils.isEmpty(quartz.getJobName())){
       countSql+=" AND job.JOB_NAME = "+quartz.getJobName(); // 在条件判断中拼接用户输入
   }
   Long totalCount = dynamicQuery.nativeQueryCount(countSql);
   ```
   攻击者输入 `1 OR 1=1` 可绕过业务逻辑，泄露所有用户数据；输入 `1; DROP TABLE users` 可能导致数据表被删除。
3. **潜在影响**
    - 数据库敏感信息（如用户凭证、隐私数据）被窃取。
    - 执行任意SQL语句（如插入、删除、修改数据或数据库结构）。
    - 通过数据库提权进一步渗透至服务器或其他系统组件。
DESC
	rule_id: "21d79f98-a435-4c84-81be-055ac21b94ef"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用参数化查询（PreparedStatement）
通过预编译SQL语句并绑定用户输入，隔离代码与数据，避免恶意输入篡改逻辑。这是防止SQL注入最有效的方法。

```java
// 修复代码示例
String userInput = request.getParameter("id");
String sql = "SELECT * FROM users WHERE id = ?";  // 使用占位符
try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
    // 对用户输入进行类型检查和转换，避免恶意输入导致异常
    try {
        pstmt.setInt(1, Integer.parseInt(userInput));  // 强制类型转换并绑定参数
    } catch (NumberFormatException e) {
        // 处理非数字输入，如抛出异常或返回错误信息
        throw new IllegalArgumentException("非法输入：ID 必须为数字", e);
    }
    ResultSet rs = pstmt.executeQuery();
    // 处理结果集
}
```

#### 2. 输入合法性校验
对用户输入实施严格的类型、格式、长度或范围限制，拒绝非法输入。这是一种补充性的安全措施，不能完全替代参数化查询。

```java
// 示例：校验输入为数字且范围合法
String userInput = request.getParameter("id");
if (!userInput.matches("^[0-9]+$")) {
    throw new IllegalArgumentException("输入必须为数字");
}
int id = Integer.parseInt(userInput);
if (id < 1 || id > 1000) {
    throw new IllegalArgumentException("ID超出有效范围");
}
// 继续使用安全的数据库访问方式（如PreparedStatement）处理合法输入
String sql = "SELECT * FROM users WHERE id = ?";
// ... 使用 PreparedStatement ...
```

#### 3. 使用ORM框架
利用ORM（如Hibernate、MyBatis）内置的安全机制，通常会默认使用参数化查询，从而抽象化数据库操作细节，降低SQL注入风险。

```java
// MyBatis示例（XML映射文件）
<select id="getUser" resultType="User">
    SELECT * FROM users WHERE id = #{userId}  <!-- 安全参数占位符 -->
</select>
```

```java
// 调用代码（避免直接拼接）
String userInput = request.getParameter("id");
// 对用户输入进行必要的校验和转换
try {
    User user = sqlSession.selectOne("getUser", Long.parseLong(userInput));
    // 处理查询结果
} catch (NumberFormatException e) {
    // 处理非数字输入
    throw new IllegalArgumentException("非法输入：ID 必须为数字", e);
}
```
SOLUTION
	reference: <<<REFERENCE
[OWASP SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection)
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)
REFERENCE
)

g"SELECT*" as $allConst;
g"select*" as $allConst;
// 搜索作为memberCall的key的const
$allConst<string()> as  $name
<fuzztag(".{{name}} as $filed")><eval()>  as $stmts
<delete("stmts")>
// 排除作为memberCall的key的const
$filed<getObject()> as $object
$allConst?{!<getUsers()> & $object} as $sqlConst

// 检测 SQL 字符串被传入到了某一个执行函数中，执行函数符合常见的 SQL 执行命名规范
$sqlConst -{
    until: `*?{opcode: call && <getCallee><name>?{have: /(?i)(query)|(execut)|(insert)|(native)|(update)/}}as $sink`
}->;
check $sink;

// 检测 SQL 字符串是否被 add 操作拼接，add 操作是字符串拼接的常见操作
// 这里虽然会不全面，但是可以作为一个案例，可以支持更多规则来实现这个细节检测
$sqlConst?{* #>?{opcode: add}<var(op)> || *->?{opcode: add}<var(op)>};
check $op;

alert $op	for {
	level: "mid",
	severity: "medium",
	type: "audit",
	title: "SQL Statement Concatenation Detected",
	title_zh: "SQL 字符串拼接位置：疑似 SQL 语句拼接并执行到数据库查询的代码",
}


desc(
	lang: java
	alert_num:1
	"file://a.java": <<<FILE
package com.itstyle.quartz.service.impl;


@Service("jobService")
public class JobServiceImpl implements IJobService {

	@Autowired
	private DynamicQuery dynamicQuery;
    @Autowired
    private Scheduler scheduler;
	@Override
	public Result listQuartzEntity(QuartzEntity quartz,
			Integer pageNo, Integer pageSize) throws SchedulerException {
	    String countSql = "SELECT COUNT(*) FROM qrtz_cron_triggers";
        if(!StringUtils.isEmpty(quartz.getJobName())){
            countSql+=" AND job.JOB_NAME = "+quartz.getJobName();
        }
        Long totalCount = dynamicQuery.nativeQueryCount(countSql);
        PageBean<QuartzEntity> data = new PageBean<>();
        if(totalCount>0){
            StringBuffer nativeSql = new StringBuffer();
            nativeSql.append("SELECT job.JOB_NAME as jobName,job.JOB_GROUP as jobGroup,job.DESCRIPTION as description,job.JOB_CLASS_NAME as jobClassName,");
            nativeSql.append("cron.CRON_EXPRESSION as cronExpression,tri.TRIGGER_NAME as triggerName,tri.TRIGGER_STATE as triggerState,");
            nativeSql.append("job.JOB_NAME as oldJobName,job.JOB_GROUP as oldJobGroup ");
            nativeSql.append("FROM qrtz_job_details AS job ");
            nativeSql.append("LEFT JOIN qrtz_triggers AS tri ON job.JOB_NAME = tri.JOB_NAME  AND job.JOB_GROUP = tri.JOB_GROUP ");
            nativeSql.append("LEFT JOIN qrtz_cron_triggers AS cron ON cron.TRIGGER_NAME = tri.TRIGGER_NAME AND cron.TRIGGER_GROUP= tri.JOB_GROUP ");
            nativeSql.append("WHERE tri.TRIGGER_TYPE = 'CRON'");
            Object[] params = new  Object[]{};
            if(!StringUtils.isEmpty(quartz.getJobName())){
                nativeSql.append(" AND job.JOB_NAME = ?");
                params = new Object[]{quartz.getJobName()};
            }
            Pageable pageable = PageRequest.of(pageNo-1,pageSize);
            List<QuartzEntity> list = dynamicQuery.nativeQueryPagingList(QuartzEntity.class,pageable, nativeSql.toString(), params);
            for (QuartzEntity quartzEntity : list) {
                JobKey key = new JobKey(quartzEntity.getJobName(), quartzEntity.getJobGroup());
                JobDetail jobDetail = scheduler.getJobDetail(key);
                quartzEntity.setJobMethodName(jobDetail.getJobDataMap().getString("jobMethodName"));
            }
            data = new PageBean<>(list, totalCount);
        }
        return Result.ok(data);
	}

	@Override
	public Long listQuartzEntity(QuartzEntity quartz) {
		StringBuffer nativeSql = new StringBuffer();
		nativeSql.append("SELECT COUNT(*)");
		nativeSql.append("FROM qrtz_job_details AS job LEFT JOIN qrtz_triggers AS tri ON job.JOB_NAME = tri.JOB_NAME ");
		nativeSql.append("LEFT JOIN qrtz_cron_triggers AS cron ON cron.TRIGGER_NAME = tri.TRIGGER_NAME ");
		nativeSql.append("WHERE tri.TRIGGER_TYPE = 'CRON'");
		return dynamicQuery.nativeQueryCount(nativeSql.toString(), new Object[]{});
	}

    @Override
    @Transactional
    public void save(QuartzEntity quartz) throws Exception{
        //如果是修改  展示旧的 任务
        if(quartz.getOldJobGroup()!=null){
            JobKey key = new JobKey(quartz.getOldJobName(),quartz.getOldJobGroup());
            scheduler.deleteJob(key);
        }
        Class cls = Class.forName(quartz.getJobClassName()) ;
        cls.newInstance();
        //构建job信息
        JobDetail job = JobBuilder.newJob(cls).withIdentity(quartz.getJobName(),
                quartz.getJobGroup())
                .withDescription(quartz.getDescription()).build();
        job.getJobDataMap().put("jobMethodName", quartz.getJobMethodName());
        // 触发时间点
        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(quartz.getCronExpression());
        Trigger trigger = TriggerBuilder.newTrigger().withIdentity("trigger"+quartz.getJobName(), quartz.getJobGroup())
                .startNow().withSchedule(cronScheduleBuilder).build();
        //交由Scheduler安排触发
        scheduler.scheduleJob(job, trigger);
    }
}
FILE
)
