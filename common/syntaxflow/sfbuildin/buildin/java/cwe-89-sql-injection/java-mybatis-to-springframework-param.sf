desc(
	title: "Find My(i)Batis XML Weak ('${...}') Params to Spring Params"
	title_zh: '找到 MyBatis/iBatis XML Mapper 不安全(${...})参数到 Springframework 可达路径',
	type: vuln
	level: middle
	risk: sqli
	desc: <<<TEXT
在 MyBatis/iBatis 中，XML Mapper 文件中的 `${...}` 语法用于直接文本替换，这可能会导致 SQL 注入漏洞。当这些不安全的 `${...}` 参数能够从 Spring 框架的控制器或其他可达路径中被注入时，攻击者可以构造恶意的输入来操纵 SQL 查询，进而执行未授权的数据库操作。建议避免在 MyBatis/iBatis XML Mapper 中使用 `${...}` 语法，而应使用 `#{...}` 语法，因为后者会对参数进行预编译，从而防止 SQL 注入。
TEXT
	rule_id: "5323c275-713f-4b22-a1cc-d22db1655fb2"
)

<include('java-spring-mvc-param')> as $source;
<include("java-common-filter")>() as $filter
<mybatisSink>#{
    until: `* &  $source`,
}-> as $result
$result?{<typeName>?{!any: Long,Integer, Boolean,Double}} as $all

$all<dataflow(
    include=`* & $filter`
)> as $mid

alert $mid for{
    message:"发现Mybatis SQL注入，但是数据流中有过滤函数。",
    level:mid,
}

$all - $mid as $high

alert $high for {
    message:"发现Mybatis SQL注入，并且数据流中没有过滤函数。",
    level:high,
}
desc(
	language: java,
	alert_num:1,
	'file://Controller.java': <<<TEXT
package com.mycompany.myapp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserMapper userMapper;

    @GetMapping("/{id}")
    public ResponseEntity<User> getUser(@PathVariable Long id) {
        User user = userMapper.getUser(id);
        return user != null ? ResponseEntity.ok(user) : ResponseEntity.notFound().build();
    }

    @PostMapping
    public ResponseEntity<User> insertUser(@RequestBody User user) {
        userMapper.insertUser(user);
        return ResponseEntity.ok(user);
    }

    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable Long id, @RequestBody User user) {
        user.setId(id); // 确保更新的用户 ID 是正确的
        userMapper.updateUser(user);
        return ResponseEntity.ok(user);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userMapper.deleteUser(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userMapper.getAllUsers();
        return ResponseEntity.ok(users);
    }
}
TEXT
	'file://UserMapper.java': <<<TEXT
package com.mycompany.myapp;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

@Mapper
public interface UserMapper {

    User getUser(@Param("id") Long id);

    void insertUser(User user);

    void updateUser(User user);

    void deleteUser(@Param("id") Long id);

    List<User> getAllUsers(); // 可选，获取所有用户
}
TEXT
	'file://sqlmap.xml': <<<TEXT
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mycompany.myapp.UserMapper">
    <resultMap id="UserResult" type="com.mycompany.myapp.User">
        <id property="id" column="id" />
        <result property="name" column="name" />
        <result property="email" column="email" />
    </resultMap>

    <select id="getUser" resultMap="UserResult">
        SELECT * FROM User WHERE id = #{id}
    </select>

    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO User (name, email) VALUES (#{name}, #{email})
    </insert>

    <update id="updateUser">
        UPDATE User SET name=#{name}, email=#{email} WHERE id=${id}
    </update>

    <delete id="deleteUser">
        DELETE FROM User WHERE id=#{id}
    </delete>
</mapper>
TEXT
)

desc(
    lang:java,
    alert_mid:1,
    alert_high:2,
    "file://SQLI.java": <<<TEXT
    package org.joychou.controller;

    import org.joychou.mapper.UserMapper;
    import org.joychou.dao.User;
    import org.joychou.security.SecurityUtil;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Value;
    import org.springframework.web.bind.annotation.*;

    import javax.annotation.Resource;
    import java.sql.*;
    import java.util.List;


    @SuppressWarnings("Duplicates")
    @RestController
    @RequestMapping("/sqli")
    public class SQLI {
        private static final Logger logger = LoggerFactory.getLogger(SQLI.class);

        // com.mysql.jdbc.Driver is deprecated. Change to com.mysql.cj.jdbc.Driver.
        private static final String driver = "com.mysql.cj.jdbc.Driver";

        @Value("${spring.datasource.url}")
        private String url;

        @Value("${spring.datasource.username}")
        private String user;

        @Value("${spring.datasource.password}")
        private String password;

        @Resource
        private UserMapper userMapper;

        @GetMapping("/mybatis/vuln02")
        public List<User> mybatisVuln02(@RequestParam("username") String username) {
            return userMapper.findByUserNameVuln02(username);
        }

        @GetMapping("/mybatis/orderby/vuln03")
        public List<User> mybatisVuln03(@RequestParam("sort") String sort) {
            return userMapper.findByUserNameVuln03(sort);
        }

        @GetMapping("/mybatis/orderby/sec04")
        public List<User> mybatisOrderBySec04(@RequestParam("sort") String sort) {
            return userMapper.findByUserNameVuln03(SecurityUtil.sqlFilter(sort));
        }
    }
TEXT
    "file://UserMapper.java":<<<TEXT
    package org.joychou.mapper;

    import org.apache.ibatis.annotations.Mapper;
    import org.apache.ibatis.annotations.Param;
    import org.apache.ibatis.annotations.Select;
    import org.joychou.dao.User;

    import java.util.List;

    @Mapper
    public interface UserMapper {

        @Select("select * from users where username = #{username}")
        User findByUserName(@Param("username") String username);

        @Select("select * from users where username = '${username}'")
        List<User> findByUserNameVuln01(@Param("username") String username);

        List<User> findByUserNameVuln02(String username);
        List<User> findByUserNameVuln03(@Param("order") String order);

        User findById(Integer id);

        User OrderByUsername();

    }
TEXT
    "file://UseMapper.xml":<<<TEXT
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <mapper namespace="org.joychou.mapper.UserMapper">

        <resultMap type="org.joychou.dao.User" id="User">
            <id column="id" property="id" javaType="java.lang.Integer" jdbcType="NUMERIC"/>
            <id column="username" property="username" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <id column="password" property="password" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </resultMap>

        <!--<select id="findByUserName" resultMap="User">-->
    	    <!--select * from users where username = #{username}-->
        <!--</select>-->

        <select id="findByUserNameVuln02" parameterType="String" resultMap="User">
            select * from users where username like '%${_parameter}%'
        </select>

        <select id="findByUserNameVuln03" parameterType="String" resultMap="User">
            select * from users
            <if test="order != null">
                order by ${order} asc
            </if>
        </select>

        <select id="findById" resultMap="User">
            select * from users where id = #{id}
        </select>


        <select id="OrderByUsername" resultMap="User">
            select * from users order by id asc limit 1
        </select>
    </mapper>
TEXT
)