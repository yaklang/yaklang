desc(
	title_zh:"检测Java java.sql 数据库Statement资源未释放",
	title:"Check Java java.sql Statement Unreleased Resource"
	risk:"资源泄漏",
	reference:<<<URL
    https://docs.oracle.com/javase/8/docs/api/java/sql/Connection.html
URL
	description:<<<TEXT
    应用程序通过 `Connection.createStatement()`、`Connection.prepareStatement()` 或 `Connection.prepareCall()` 创建了 JDBC Statement 对象后，未正确关闭这些资源。这些 Statement 对象在不再使用时必须显式关闭，否则会导致资源泄漏。

    即使关闭了父级 Connection 对象，最佳实践仍然要求显式关闭每个 Statement 对象，以确保及时释放资源，特别是在连接池环境中。

    ## 风险影响

    - 未关闭的 Statement 对象会占用数据库和应用程序内存资源
    - 可能导致游标泄漏，尤其在某些数据库系统中游标数量有限制
    - 在连接池环境中，未关闭的 Statement 可能会导致连接池资源管理问题
    - 大量未关闭的 Statement 会增加内存占用，可能导致内存溢出
    - 长时间运行的应用程序性能会因资源泄漏而逐渐下降

TEXT
	solution:<<<TEXT
    ### 1. 使用 try-with-resources 自动关闭 Statement (Java 7+)

    ```java
    try (
        Connection conn = dataSource.getConnection();
        Statement stmt = conn.createStatement()
    ) {
        // 使用 Statement 进行操作
        ResultSet rs = stmt.executeQuery("SELECT * FROM users");
        // 处理结果集...
    } // Statement 和 Connection 会自动关闭
    ```

    ### 2. 使用 try-finally 手动关闭 Statement

    ```java
    Connection conn = null;
    Statement stmt = null;
    try {
        conn = dataSource.getConnection();
        stmt = conn.createStatement();

        // 使用 Statement 进行操作
        // ...
    } finally {
        // 按照资源获取的逆序关闭
        if (stmt != null) try { stmt.close(); } catch (SQLException e) { /* 记录日志 */ }
        if (conn != null) try { conn.close(); } catch (SQLException e) { /* 记录日志 */ }
    }
    ```

    ### 3. 为 PreparedStatement 和 CallableStatement 应用相同原则

    ```java
    // PreparedStatement 示例
    try (
        Connection conn = dataSource.getConnection();
        PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM users WHERE id = ?")
    ) {
        pstmt.setInt(1, userId);
        // 使用 PreparedStatement...
    }

    // CallableStatement 示例
    try (
        Connection conn = dataSource.getConnection();
        CallableStatement cstmt = conn.prepareCall("{call get_user(?)}")
    ) {
        cstmt.setInt(1, userId);
        // 使用 CallableStatement...
    }
    ```

    ### 4. 使用数据访问框架自动管理资源

    ```java
    // 使用 Spring JdbcTemplate
    JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
    User user = jdbcTemplate.queryForObject(
        "SELECT * FROM users WHERE id = ?",
        new Object[]{userId},
        (rs, rowNum) -> new User(rs.getLong("id"), rs.getString("name"))
    );
    ```
TEXT
	rule_id: "195768f2-de1d-4e9f-9a72-7244efbc0abf"
)

./(createStatement|prepareStatement|prepareCall|prepareStatement)/()?{<typeName()>?{have:"java.sql"}} as $stmt;
// 这里不能在include配置项直接写`*.close`,
// 因为Statement可能会产生ResultSet,ResultSet也对调用close
// 参考测试案例的错误示例 2: PreparedStatement 未关闭
$stmt.close as $close;
$stmt -{
    include:`*.close & $close`
}-> as $safe

$safe<getPredecessors()> as $safeStmt;

$stmt - $safeStmt as $weak;
alert $weak for{
    message:"检测到java.sql.Statement未释放资源",
}

desc(
	lang:java
	alert_num:3
	"file://demo.java":<<<CODE
    /**
     * JDBC Statement 资源管理示例
     * 展示创建 Statement/PreparedStatement/CallableStatement 的正确和错误方式
     */
    import java.sql.*;
    import javax.sql.DataSource;

    public class JdbcStatementResourceExample {

        private DataSource dataSource; // 假设通过依赖注入获取

        /**
         * 错误示例 1: 未关闭 Statement
         */
        public void unsafeStatementUsage() throws SQLException {
            Connection conn = dataSource.getConnection();

            // 创建 Statement 但未关闭
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM employees");

            // 处理结果
            while (rs.next()) {
                System.out.println(rs.getString("name"));
            }

            // 关闭连接 (即使关闭了连接，也应显式关闭 Statement)
            conn.close();

            // 错误: 未调用 stmt.close()
        }

        /**
         * 错误示例 2: PreparedStatement 未关闭
         */
        public void unsafePreparedStatementUsage() throws SQLException {
            Connection conn = dataSource.getConnection();

            // 创建 PreparedStatement
            PreparedStatement pstmt = conn.prepareStatement(
                "SELECT * FROM products WHERE category = ?");
            pstmt.setString(1, "electronics");

            // 执行查询
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                // 处理结果...
            }

            // 关闭结果集和连接，但忘记关闭 PreparedStatement
            rs.close();
            conn.close();

            // 错误: 未调用 pstmt.close()
        }

        /**
         * 错误示例 3: CallableStatement 未关闭
         */
        public void unsafeCallableStatementUsage() throws SQLException {
            Connection conn = dataSource.getConnection();

            // 创建 CallableStatement
            CallableStatement cstmt = conn.prepareCall("{call get_employee_count(?)}");
            cstmt.setString(1, "IT");
            cstmt.execute();

            // 处理输出参数...

            // 关闭连接但忘记关闭 CallableStatement
            conn.close();

            // 错误: 未调用 cstmt.close()
        }

        /**
         * 正确示例 1: 使用 try-with-resources 自动关闭 Statement
         */
        public void safeStatementWithTryWithResources() throws SQLException {
            String sql = "SELECT * FROM employees";

            try (
                Connection conn = dataSource.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)
            ) {
                while (rs.next()) {
                    System.out.println(rs.getString("name"));
                }
            } // 自动关闭 rs、stmt 和 conn
        }

        /**
         * 正确示例 2: 使用 try-finally 手动关闭 PreparedStatement
         */
        public void safePreparedStatementWithTryFinally() throws SQLException {
            Connection conn = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;

            try {
                conn = dataSource.getConnection();
                pstmt = conn.prepareStatement("SELECT * FROM products WHERE category = ?");
                pstmt.setString(1, "electronics");

                rs = pstmt.executeQuery();
                while (rs.next()) {
                    // 处理结果...
                }
            } finally {
                // 按照创建顺序的逆序关闭资源
                if (rs != null) try { rs.close(); } catch (SQLException e) { /* 忽略 */ }
                if (pstmt != null) try { pstmt.close(); } catch (SQLException e) { /* 忽略 */ }
                if (conn != null) try { conn.close(); } catch (SQLException e) { /* 忽略 */ }
            }
        }

        /**
         * 正确示例 3: 使用工具类确保 CallableStatement 关闭
         */
        public void safeCallableStatementWithUtility() throws SQLException {
            Connection conn = null;
            CallableStatement cstmt = null;

            try {
                conn = dataSource.getConnection();
                cstmt = conn.prepareCall("{call update_employee_status(?, ?)}");

                cstmt.setInt(1, 101); // 员工ID
                cstmt.setString(2, "active"); // 新状态

                cstmt.execute();
            } finally {
                // 使用工具类关闭资源
                closeQuietly(cstmt);
                closeQuietly(conn);
            }
        }

        // 工具方法用于安全关闭资源
        private void closeQuietly(AutoCloseable resource) {
            if (resource != null) {
                try {
                    resource.close();
                } catch (Exception e) {
                    // 记录日志但不抛出异常
                }
            }
        }
    }
CODE
)
