desc(
	title_zh: "检测Java Hibernate 数据库Connection资源未释放"
	title: "Check Java Hibernate Connection Unreleased Resource"
	risk:"资源泄漏",
	reference: <<<REFERENCE
[Hibernate ConnectionProvider 文档](https://docs.atlassian.com/hibernate2/2.1.8/api/net/sf/hibernate/connection/ConnectionProvider.html)
[CWE-772: Missing Release of Resource after Effective Lifetime](https://cwe.mitre.org/data/definitions/772.html)
REFERENCE
	description: <<<DESCRIPTION

DESCRIPTION
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用 `try-with-resources` 自动关闭连接 (推荐，Java 7+)
利用 Java 的 try-with-resources 语法，确保 `Connection` 对象在使用完毕后自动调用其 `close()` 方法。
```java
// 修复代码示例
import net.sf.hibernate.SessionFactory;
import net.sf.hibernate.connection.ConnectionProvider;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;

public class SafeHibernateCode {
    private SessionFactory sessionFactory;

    public void safeConnectionWithTryWithResources() throws Exception {
        ConnectionProvider provider = sessionFactory.getConnectionProvider();

        try (Connection conn = provider.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM users")) {
            // 处理结果集...
        } // 所有资源在此处自动关闭
    }
}
```

#### 2. 使用 `try-finally` 块手动关闭连接
在 `finally` 块中确保调用 `Connection` 对象的 `close()` 方法。同时需要确保其他相关资源（如 `Statement` 和 `ResultSet`）也被关闭。
```java
// 修复代码示例
import net.sf.hibernate.SessionFactory;
import net.sf.hibernate.connection.ConnectionProvider;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;

public class SafeHibernateCode {
    private SessionFactory sessionFactory;

    public void safeConnectionWithTryFinally() throws Exception {
        ConnectionProvider provider = sessionFactory.getConnectionProvider();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = provider.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery("SELECT * FROM users");

            // 使用结果集...
        } finally {
            if (rs != null) { try { rs.close(); } catch (Exception e) { /* log error */ } }
            if (stmt != null) { try { stmt.close(); } catch (Exception e) { /* log error */ } }
            if (conn != null) { try { conn.close(); } catch (Exception e) { /* log error */ } }
        }
    }
}
```

#### 3. 避免直接使用 `ConnectionProvider` 获取连接
优先使用 Hibernate 提供的安全 API 来执行数据库操作。让 Hibernate 管理底层连接。
```java
// 推荐做法：使用 Hibernate Session
import net.sf.hibernate.Session;
import net.sf.hibernate.Transaction;
import net.sf.hibernate.SessionFactory;

public class RecommendedHibernateCode {
    private SessionFactory sessionFactory;

    public void recommendedHibernateSessionUsage() throws Exception {
        Session session = null;
        Transaction tx = null;

        try {
            session = sessionFactory.openSession();
            tx = session.beginTransaction();

            // 使用 Hibernate 原生 API 或 HQL/JPQL 查询
            List<?> users = session.createQuery("from User").list();

            // 处理结果...
            tx.commit();
        } catch (RuntimeException e) {
            if (tx != null && tx.isActive()) {
                tx.rollback();
            }
            throw e;
        } finally {
            if (session != null) {
                session.close();
            }
        }
    }
}
```

#### 4. 使用 Hibernate 的 `doWork` 方法安全访问底层连接 (如果确实需要直接使用 JDBC)
通过 `Session.doWork()` 方法，Hibernate 会在回调方法执行期间提供一个连接，并在方法返回后自动管理该连接的释放。
```java
// 推荐：使用 doWork 方法
import net.sf.hibernate.Session;
import net.sf.hibernate.HibernateException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class SafeDoWorkExample {
    private SessionFactory sessionFactory;

    public void safeConnectionWithDoWork() throws Exception {
        Session session = null;

        try {
            session = sessionFactory.openSession();

            session.doWork(connection -> {
                try (PreparedStatement stmt = connection.prepareStatement("SELECT * FROM products")) {
                    ResultSet rs = stmt.executeQuery();
                    // 处理结果集...
                } catch (Exception e) {
                    throw new HibernateException("JDBC operation failed", e);
                }
            });
        } finally {
            if (session != null) {
                session.close();
            }
        }
    }
}
```

SOLUTION
	rule_id: "40fc9df0-6e95-4b7a-b9f6-202b0356fef4"
)

*?{opcode:function}?{<getReturns()><typeName()>?{have:"net.sf.hibernate.Connection"}} as $fun;
// 方法调用点
$fun() as $getConnection;
// 直接调用
.getConnection()?{<typeName()>?{have:"net.sf.hibernate"}} as $getConnection;
$getConnection -{
    include:`*.close`
}-> as $safe

$safe<getPredecessors()> as $safeGetConnection;
$getConnection - $safeGetConnection as $weak;
alert $weak for {
	message: "检测到Hibernate Session 未释放资源",
}


desc(
	lang:java
	alert_num: 1
	"file://demo.java":<<<CODE
    /**
     * Hibernate ConnectionProvider 资源管理示例
     * 演示直接使用ConnectionProvider获取数据库连接的正确和错误方式
     */
    import java.sql.Connection;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.sql.ResultSet;
    import java.util.ArrayList;
    import java.util.List;

    import net.sf.hibernate.SessionFactory;
    import net.sf.hibernate.Session;
    import net.sf.hibernate.Transaction;
    import net.sf.hibernate.HibernateException;
    import net.sf.hibernate.connection.ConnectionProvider;
    import net.sf.hibernate.cfg.Configuration;

    public class HibernateConnectionProviderExample {

        private SessionFactory sessionFactory;

        public HibernateConnectionProviderExample() {
            try {
                // 初始化SessionFactory
                Configuration config = new Configuration().configure();
                sessionFactory = config.buildSessionFactory();
            } catch (HibernateException e) {
                throw new RuntimeException("初始化SessionFactory失败", e);
            }
        }

        /**
         * 错误示例：直接使用ConnectionProvider但未关闭连接
         */
        public List<String> unsafeDirectConnectionUsage() throws HibernateException, SQLException {
            List<String> results = new ArrayList<>();

            // 获取ConnectionProvider
            ConnectionProvider provider = sessionFactory.getConnectionProvider();

            // 获取底层JDBC连接
            Connection conn = provider.getConnection();

            // 使用连接
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT username FROM users");

            while (rs.next()) {
                results.add(rs.getString("username"));
            }

            // 错误：没有关闭ResultSet, Statement和Connection
            // 资源泄漏！连接不会返回到连接池

            return results;
        }

        /**
         * 正确示例1：使用try-finally确保连接关闭
         */
        public List<String> safeConnectionWithTryFinally() throws HibernateException, SQLException {
            List<String> results = new ArrayList<>();
            ConnectionProvider provider = sessionFactory.getConnectionProvider();

            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;

            try {
                // 获取连接
                conn = provider.getConnection();

                // 使用连接
                stmt = conn.createStatement();
                rs = stmt.executeQuery("SELECT username FROM users");

                while (rs.next()) {
                    results.add(rs.getString("username"));
                }
            } finally {
                // 按照获取顺序的逆序关闭资源
                if (rs != null) try { rs.close(); } catch (SQLException e) { /* 记录日志 */ }
                if (stmt != null) try { stmt.close(); } catch (SQLException e) { /* 记录日志 */ }
                if (conn != null) try { conn.close(); } catch (SQLException e) { /* 记录日志 */ }
            }

            return results;
        }

        /**
         * 正确示例2：使用try-with-resources自动关闭资源（Java 7+）
         */
        public List<String> safeConnectionWithTryWithResources() throws HibernateException, SQLException {
            List<String> results = new ArrayList<>();
            ConnectionProvider provider = sessionFactory.getConnectionProvider();

            try (
                Connection conn = provider.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT username FROM users")
            ) {
                while (rs.next()) {
                    results.add(rs.getString("username"));
                }
            } // 所有资源自动关闭

            return results;
        }

        /**
         * 推荐示例：避免直接使用ConnectionProvider，使用Hibernate Session API
         */
        public List<String> recommendedHibernateSessionUsage() throws HibernateException {
            List<String> results = new ArrayList<>();
            Session session = null;

            try {
                session = sessionFactory.openSession();
                Transaction tx = session.beginTransaction();

                try {
                    // 使用Hibernate API而不是直接使用连接
                    List<?> users = session.createQuery("from User").list();

                    for (Object user : users) {
                        // 假设User类有getUsername方法
                        results.add(((User)user).getUsername());
                    }

                    tx.commit();
                } catch (Exception e) {
                    if (tx != null) tx.rollback();
                    throw e;
                }
            } finally {
                if (session != null) {
                    session.close();
                }
            }

            return results;
        }

        /**
         * 替代方法：使用Hibernate的doWork方法安全地访问底层连接
         */
        public List<String> safeConnectionWithDoWork() throws HibernateException {
            final List<String> results = new ArrayList<>();
            Session session = null;

            try {
                session = sessionFactory.openSession();

                // Hibernate 3.x/4.x用法
                session.doWork(connection -> {
                    try (
                        Statement stmt = connection.createStatement();
                        ResultSet rs = stmt.executeQuery("SELECT username FROM users")
                    ) {
                        while (rs.next()) {
                            results.add(rs.getString("username"));
                        }
                    } catch (SQLException e) {
                        throw new HibernateException("执行SQL查询失败", e);
                    }
                });
            } finally {
                if (session != null) {
                    session.close();
                }
            }

            return results;
        }

        // User类简化定义
        public static class User {
            private String username;

            public String getUsername() {
                return username;
            }

            public void setUsername(String username) {
                this.username = username;
            }
        }
    }
CODE
)
