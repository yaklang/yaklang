desc(
	title_zh: "检测Java Hibernate 数据库Connection资源未释放"
	title: "Check Java Hibernate Connection Unreleased Resource"
	risk:"资源泄漏",
	reference: <<<REFERENCE
https://docs.atlassian.com/hibernate2/2.1.8/api/net/sf/hibernate/connection/ConnectionProvider.html
REFERENCE
	description: <<<DESCRIPTION
    ## 漏洞描述

    应用程序通过 Hibernate 的 `ConnectionProvider.getConnection()` 方法直接获取数据库连接后，未正确关闭这些连接资源。尽管 Hibernate 通常会管理自己的连接，但当直接使用 ConnectionProvider 接口获取连接时，应用程序需要负责关闭这些连接。

    此漏洞会导致数据库连接泄漏，随着时间推移耗尽连接池资源，最终可能导致应用程序无法与数据库建立新连接。

    ## 风险影响

    - 数据库连接持续泄漏，耗尽连接池配额
    - 应用长时间运行后可能出现 "Too many connections" 错误
    - 连接未及时归还池，导致其他操作无法获取连接
    - 服务器资源消耗增加，可能导致性能下降
    - 在高负载情况下，可能引发数据库服务拒绝服务

DESCRIPTION
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用 `try-with-resources` 自动关闭连接 (推荐，Java 7+)
利用 Java 的 try-with-resources 语法，确保 `Connection` 对象在使用完毕后自动调用其 `close()` 方法。

```java
// 修复代码示例
ConnectionProvider provider = sessionFactory.getConnectionProvider();

try (Connection conn = provider.getConnection()) {
    // 使用连接进行数据库操作 (例如 Statement, PreparedStatement, ResultSet)
    try (Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT * FROM users")) {
        // 处理结果集
    }
} // **Connection, Statement, ResultSet 在这里自动关闭**
```

#### 2. 使用 `try-finally` 块手动关闭连接
在 `finally` 块中确保调用 `Connection` 对象的 `close()` 方法。同时需要确保其他相关资源（如 `Statement` 和 `ResultSet`）也被关闭。

```java
// 修复代码示例
ConnectionProvider provider = sessionFactory.getConnectionProvider();
Connection conn = null;
Statement stmt = null;
ResultSet rs = null;

try {
    conn = provider.getConnection();
    stmt = conn.createStatement();
    rs = stmt.executeQuery("SELECT * FROM users");

    // 使用结果集...

} catch (SQLException e) {
    // 处理异常
} finally {
    // **按照获取顺序的逆序关闭资源，防止资源泄漏**
    if (rs != null) { try { rs.close(); } catch (SQLException e) { /* log error */ } }
    if (stmt != null) { try { stmt.close(); } catch (SQLException e) { /* log error */ } }
    if (conn != null) { try { conn.close(); } catch (SQLException e) { /* log error */ } }
}
```

#### 3. 避免直接使用 `ConnectionProvider` 获取连接
Hibnerate 提供更安全的 API 来执行数据库操作。优先使用 `Session` 和其提供的方法进行数据库交互，让 Hibernate 管理底层连接。

```java
// 推荐做法：使用 Hibernate Session
Session session = null;
Transaction tx = null;

try {
    session = sessionFactory.openSession();
    tx = session.beginTransaction();

    // 使用 Hibernate 原生 API 或 HQL/JPQL 查询
    List<?> users = session.createQuery("from User").list();
    // 处理结果...

    tx.commit();
} catch (RuntimeException e) {
    if (tx != null && tx.isActive()) {
        tx.rollback();
    }
    throw e;
} finally {
    if (session != null) {
        // **Hibernate Session 的 close 方法会确保底层连接被释放或归还连接池**
        session.close();
    }
}
```

#### 4. 使用 Hibernate 的 `doWork` 方法安全访问底层连接 (如果确实需要直接使用 JDBC)
如果必须访问底层的 `java.sql.Connection`，可以使用 `Session.doWork()` 方法。Hibernate 会在回调方法执行期间提供一个连接，并在方法返回后自动管理该连接的释放。

```java
// 推荐：使用 doWork 方法
Session session = null;

try {
    session = sessionFactory.openSession();

    session.doWork(connection -> {
        // **在这里安全地使用 connection 对象，Hibernate 会在 doWork 完成后处理连接**
        try (PreparedStatement stmt = connection.prepareStatement("SELECT * FROM products")) {
            ResultSet rs = stmt.executeQuery();
            // 处理结果集...
        } catch (SQLException e) {
            throw new HibernateException("JDBC operation failed", e);
        }
    });
} finally {
    if (session != null) {
        session.close();
    }
}
```
SOLUTION
	rule_id: "40fc9df0-6e95-4b7a-b9f6-202b0356fef4"
)

*?{opcode:function}?{<getReturns()><typeName()>?{have:"net.sf.hibernate.Connection"}} as $fun;
// 方法调用点
$fun() as $getConnection;
// 直接调用
.getConnection()?{<typeName()>?{have:"net.sf.hibernate"}} as $getConnection;
$getConnection -{
    include:`*.close`
}-> as $safe

$safe<getPredecessors()> as $safeGetConnection;
$getConnection - $safeGetConnection as $weak;
alert $weak for {
	level: "",
	message: "检测到Hibernate Session 未释放资源",
	title: "",
	title_zh: "",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
}


desc(
	lang:java
	alert_num: 1
	"file://demo.java":<<<CODE
    /**
     * Hibernate ConnectionProvider 资源管理示例
     * 演示直接使用ConnectionProvider获取数据库连接的正确和错误方式
     */
    import java.sql.Connection;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.sql.ResultSet;
    import java.util.ArrayList;
    import java.util.List;

    import net.sf.hibernate.SessionFactory;
    import net.sf.hibernate.Session;
    import net.sf.hibernate.Transaction;
    import net.sf.hibernate.HibernateException;
    import net.sf.hibernate.connection.ConnectionProvider;
    import net.sf.hibernate.cfg.Configuration;

    public class HibernateConnectionProviderExample {

        private SessionFactory sessionFactory;

        public HibernateConnectionProviderExample() {
            try {
                // 初始化SessionFactory
                Configuration config = new Configuration().configure();
                sessionFactory = config.buildSessionFactory();
            } catch (HibernateException e) {
                throw new RuntimeException("初始化SessionFactory失败", e);
            }
        }

        /**
         * 错误示例：直接使用ConnectionProvider但未关闭连接
         */
        public List<String> unsafeDirectConnectionUsage() throws HibernateException, SQLException {
            List<String> results = new ArrayList<>();

            // 获取ConnectionProvider
            ConnectionProvider provider = sessionFactory.getConnectionProvider();

            // 获取底层JDBC连接
            Connection conn = provider.getConnection();

            // 使用连接
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT username FROM users");

            while (rs.next()) {
                results.add(rs.getString("username"));
            }

            // 错误：没有关闭ResultSet, Statement和Connection
            // 资源泄漏！连接不会返回到连接池

            return results;
        }

        /**
         * 正确示例1：使用try-finally确保连接关闭
         */
        public List<String> safeConnectionWithTryFinally() throws HibernateException, SQLException {
            List<String> results = new ArrayList<>();
            ConnectionProvider provider = sessionFactory.getConnectionProvider();

            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;

            try {
                // 获取连接
                conn = provider.getConnection();

                // 使用连接
                stmt = conn.createStatement();
                rs = stmt.executeQuery("SELECT username FROM users");

                while (rs.next()) {
                    results.add(rs.getString("username"));
                }
            } finally {
                // 按照获取顺序的逆序关闭资源
                if (rs != null) try { rs.close(); } catch (SQLException e) { /* 记录日志 */ }
                if (stmt != null) try { stmt.close(); } catch (SQLException e) { /* 记录日志 */ }
                if (conn != null) try { conn.close(); } catch (SQLException e) { /* 记录日志 */ }
            }

            return results;
        }

        /**
         * 正确示例2：使用try-with-resources自动关闭资源（Java 7+）
         */
        public List<String> safeConnectionWithTryWithResources() throws HibernateException, SQLException {
            List<String> results = new ArrayList<>();
            ConnectionProvider provider = sessionFactory.getConnectionProvider();

            try (
                Connection conn = provider.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT username FROM users")
            ) {
                while (rs.next()) {
                    results.add(rs.getString("username"));
                }
            } // 所有资源自动关闭

            return results;
        }

        /**
         * 推荐示例：避免直接使用ConnectionProvider，使用Hibernate Session API
         */
        public List<String> recommendedHibernateSessionUsage() throws HibernateException {
            List<String> results = new ArrayList<>();
            Session session = null;

            try {
                session = sessionFactory.openSession();
                Transaction tx = session.beginTransaction();

                try {
                    // 使用Hibernate API而不是直接使用连接
                    List<?> users = session.createQuery("from User").list();

                    for (Object user : users) {
                        // 假设User类有getUsername方法
                        results.add(((User)user).getUsername());
                    }

                    tx.commit();
                } catch (Exception e) {
                    if (tx != null) tx.rollback();
                    throw e;
                }
            } finally {
                if (session != null) {
                    session.close();
                }
            }

            return results;
        }

        /**
         * 替代方法：使用Hibernate的doWork方法安全地访问底层连接
         */
        public List<String> safeConnectionWithDoWork() throws HibernateException {
            final List<String> results = new ArrayList<>();
            Session session = null;

            try {
                session = sessionFactory.openSession();

                // Hibernate 3.x/4.x用法
                session.doWork(connection -> {
                    try (
                        Statement stmt = connection.createStatement();
                        ResultSet rs = stmt.executeQuery("SELECT username FROM users")
                    ) {
                        while (rs.next()) {
                            results.add(rs.getString("username"));
                        }
                    } catch (SQLException e) {
                        throw new HibernateException("执行SQL查询失败", e);
                    }
                });
            } finally {
                if (session != null) {
                    session.close();
                }
            }

            return results;
        }

        // User类简化定义
        public static class User {
            private String username;

            public String getUsername() {
                return username;
            }

            public void setUsername(String username) {
                this.username = username;
            }
        }
    }
CODE
)
