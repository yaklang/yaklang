desc(
	title_zh: "检测Java Socket资源未释放"
	title: "Check Java Socket Unreleased Resource"
	risk:"资源泄漏",
	reference: <<<REFERENCE
https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html
https://cwe.mitre.org/data/definitions/772.html
REFERENCE
	description: <<<DESCRIPTION
## 漏洞描述

应用程序创建了 `java.net.Socket`、`java.net.ServerSocket` 或 `java.net.SocketImpl` 类的实例后，未在使用完毕时通过调用 `close()` 方法正确关闭这些网络资源。这属于 CWE-772（有效生命周期后未释放资源）漏洞，会导致网络端口和系统资源泄漏。

网络套接字比普通文件句柄更加关键，因为它们会占用有限的网络端口资源。如果套接字未正确关闭，对应的端口可能会长时间处于 TIME_WAIT 状态，无法被重新使用，直到操作系统的超时机制生效。

## 风险影响

- 网络端口资源泄漏，导致可用端口耗尽
- TCP 连接无法正常关闭，占用系统网络栈资源
- 应用可能遇到 "Address already in use" 或 "Too many open files" 错误
- 服务器性能随时间下降，尤其在高并发环境中
- 长时间运行的服务可能需要定期重启以释放资源
- 可能影响其他应用程序的网络连接能力
DESCRIPTION
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用 try-with-resources 自动关闭资源 (Java 7+，推荐)
**优点:** 最简洁、最安全的方式，确保资源在try块结束时无论是否发生异常都能被正确关闭。

```java
// 客户端 Socket
try (Socket socket = new Socket("hostname", 8080)) {
    // 使用套接字进行通信
    // ...
} // socket 会在此自动关闭

// 服务器 Socket
try (ServerSocket serverSocket = new ServerSocket(8080)) {
    // ...接受连接循环...
} // serverSocket 会在此自动关闭
```

#### 2. 使用 try-finally 手动关闭资源
**优点:** 适用于Java 7之前的版本，或者需要更精细控制关闭流程的场景。需要手动检查资源是否非空且未关闭。

```java
Socket socket = null;
try {
    socket = new Socket("hostname", 8080);
    // 使用套接字进行通信
    // ...
} catch (IOException e) {
    // ... 错误处理 ...
} finally {
    // 确保关闭资源，避免空指针异常
    if (socket != null && !socket.isClosed()) {
        try {
            socket.close();
        } catch (IOException e) {
            // 记录关闭时的错误
            System.err.println("关闭套接字时出错: " + e.getMessage());
        }
    }
}
```

#### 3. 对于并发服务器中的 Socket 管理
在使用线程池处理多个客户端连接时，确保在每个处理线程内部正确关闭对应的客户端 Socket。

```java
// 在线程池任务中处理客户端连接
executor.submit(() -> {
    // 使用 try-with-resources 确保在线程中关闭客户端 Socket
    try (Socket clientSocket = serverSocket.accept()) {
        // 处理客户端请求
        // ...
    } catch (IOException e) {
        System.err.println("处理客户端连接时出错: " + e.getMessage());
    }
});
```
并且，确保在应用程序关闭时或不再需要监听时，正确关闭 `ServerSocket` 以及关联的线程池。
SOLUTION
	rule_id: "4dd5053f-36a9-4f35-83a9-aeb40fc43094"
)

Socket() as $toCheck;
ServerSocket() as $toCheck;

$toCheck?{<typeName>?{have:"java.net"} && <name> ?{!have:"-constructor"}} as $socket;
$socket.close as $close
$socket -{
    include:`*.close & $close`,
}-> as $safe

$safe<getPredecessors()> as $safeSocket;
$socket - $safeSocket as $weak;
alert $weak for {
	title_zh: "",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "",
	message: "检测到java.io未释放的资源",
	title: "",
}

desc(
	lang:java
	alert_num: 2
	"file://demo.java":<<<CODE
    /**
     * 网络套接字资源管理示例
     * 演示 Socket 和 ServerSocket 的正确与错误使用方式
     */
    import java.io.*;
    import java.net.*;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;
    import java.util.concurrent.TimeUnit;

    public class SocketResourceExample {

        /**
         * 错误示例1：客户端 Socket 未关闭
         * 会导致网络端口和资源泄漏
         */
        public static void unsafeSocketClient(String host, int port) {
            try {
                // 创建套接字连接到服务器
                Socket socket = new Socket(host, port);

                // 获取输出流发送数据
                OutputStream out = socket.getOutputStream();
                PrintWriter writer = new PrintWriter(out, true);
                writer.println("Hello from client");

                // 获取输入流读取响应
                InputStream in = socket.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                String response = reader.readLine();
                System.out.println("服务器响应: " + response);

                // 错误：未关闭 socket
                // socket.close(); 应该在这里调用

            } catch (IOException e) {
                System.err.println("客户端通信错误: " + e.getMessage());
            }
        }

        /**
         * 错误示例2：服务器 ServerSocket 未关闭
         * 会导致端口持续被占用
         */
        public static void unsafeSocketServer(int port) {
            try {
                // 创建服务器套接字
                ServerSocket serverSocket = new ServerSocket(port);
                System.out.println("服务器启动，监听端口: " + port);

                // 接受一个客户端连接
                Socket clientSocket = serverSocket.accept();
                System.out.println("客户端连接: " + clientSocket.getInetAddress());

                // 处理客户端请求
                BufferedReader in = new BufferedReader(
                    new InputStreamReader(clientSocket.getInputStream()));
                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);

                String input = in.readLine();
                System.out.println("收到客户端消息: " + input);
                out.println("服务器回复: " + input);

                // 关闭客户端连接
                clientSocket.close();

                // 错误：未关闭 serverSocket
                // serverSocket.close(); 应该在这里调用

            } catch (IOException e) {
                System.err.println("服务器错误: " + e.getMessage());
            }
        }

        /**
         * 安全示例1：使用 try-with-resources 自动关闭客户端 Socket
         */
        public static void safeSocketClientWithTryWithResources(String host, int port) {
            try (
                // Socket 会在 try 块结束时自动关闭
                Socket socket = new Socket(host, port);

                // 获取输入/输出流
                PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))
            ) {
                // 发送请求
                out.println("Hello from safe client");

                // 读取响应
                String response = in.readLine();
                System.out.println("服务器响应: " + response);

            } catch (IOException e) {
                System.err.println("安全客户端通信错误: " + e.getMessage());
            }
            // socket 和流会在这里自动关闭
        }

        /**
         * 安全示例2：使用 try-finally 手动关闭 Socket
         */
        public static void safeSocketClientWithTryFinally(String host, int port) {
            Socket socket = null;
            PrintWriter out = null;
            BufferedReader in = null;

            try {
                // 创建套接字连接到服务器
                socket = new Socket(host, port);

                // 获取输入/输出流
                out = new PrintWriter(socket.getOutputStream(), true);
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                // 发送请求
                out.println("Hello from try-finally client");

                // 读取响应
                String response = in.readLine();
                System.out.println("服务器响应: " + response);

            } catch (IOException e) {
                System.err.println("客户端通信错误: " + e.getMessage());
            } finally {
                // 关闭资源，按照获取顺序的逆序关闭
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                    if (socket != null) socket.close();
                } catch (IOException e) {
                    System.err.println("关闭资源时出错: " + e.getMessage());
                }
            }
        }

        /**
         * 安全示例3：使用 try-with-resources 的完整服务器
         */
        public static void safeSocketServer(int port) {
            // 使用 try-with-resources 自动关闭 ServerSocket
            try (ServerSocket serverSocket = new ServerSocket(port)) {

                System.out.println("安全服务器启动，监听端口: " + port);

                // 设置接受连接的超时时间，避免永久阻塞
                serverSocket.setSoTimeout(60000);

                // 接受并处理一个客户端连接
                try (
                    // 接受客户端连接
                    Socket clientSocket = serverSocket.accept();

                    // 获取输入/输出流
                    PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
                    BufferedReader in = new BufferedReader(
                        new InputStreamReader(clientSocket.getInputStream()))
                ) {
                    System.out.println("客户端连接: " + clientSocket.getInetAddress());

                    // 读取客户端请求
                    String input = in.readLine();
                    System.out.println("收到客户端消息: " + input);

                    // 发送响应
                    out.println("安全服务器回复: " + input);

                } // clientSocket 和流会在这里自动关闭

            } catch (SocketTimeoutException e) {
                System.out.println("接受连接超时");
            } catch (IOException e) {
                System.err.println("安全服务器错误: " + e.getMessage());
            }
            // serverSocket 会在这里自动关闭
        }

        /**
         * 安全示例4：使用线程池处理多个客户端连接的服务器
         */
        public static void safeMultiClientServer(int port, int maxClients) {
            ExecutorService executor = Executors.newFixedThreadPool(maxClients);

            try (ServerSocket serverSocket = new ServerSocket(port)) {
                System.out.println("多客户端服务器启动，监听端口: " + port);

                // 设置超时，使服务器能够优雅关闭
                serverSocket.setSoTimeout(10000);

                // 循环接受连接，直到被中断
                while (!Thread.currentThread().isInterrupted()) {
                    try {
                        // 接受新的客户端连接
                        final Socket clientSocket = serverSocket.accept();

                        // 提交给线程池处理
                        executor.submit(() -> handleClientSafely(clientSocket));

                    } catch (SocketTimeoutException e) {
                        // 接受连接超时，继续循环
                        continue;
                    } catch (IOException e) {
                        System.err.println("接受连接时出错: " + e.getMessage());
                        break;
                    }
                }

            } catch (IOException e) {
                System.err.println("服务器初始化错误: " + e.getMessage());
            } finally {
                // 关闭线程池
                shutdownAndAwaitTermination(executor);
            }
        }

        /**
         * 安全处理客户端连接
         */
        private static void handleClientSafely(Socket clientSocket) {
            // 使用 try-with-resources 确保连接关闭
            try (
                Socket socket = clientSocket; // 明确在线程中关闭
                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                PrintWriter out = new PrintWriter(socket.getOutputStream(), true)
            ) {
                System.out.println("处理客户端: " + socket.getInetAddress());

                // 读取请求
                String input = in.readLine();
                System.out.println("线程 " + Thread.currentThread().getName() +
                                 " 收到: " + input);

                // 模拟处理时间
                Thread.sleep(1000);

                // 发送响应
                out.println("多线程服务器回复: " + input);

            } catch (IOException | InterruptedException e) {
                System.err.println("处理客户端时出错: " + e.getMessage());
            }
            // 客户端连接和流会在这里自动关闭
        }

        /**
         * 安全关闭线程池的辅助方法
         */
        private static void shutdownAndAwaitTermination(ExecutorService pool) {
            pool.shutdown(); // 禁止接受新任务
            try {
                // 等待现有任务完成
                if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
                    // 超时后，强制关闭
                    pool.shutdownNow();
                    // 等待任务响应中断
                    if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
                        System.err.println("线程池未能完全终止");
                    }
                }
            } catch (InterruptedException e) {
                // 如果当前线程被中断，重新取消未完成的任务
                pool.shutdownNow();
                // 保持中断状态
                Thread.currentThread().interrupt();
            }
        }

        /**
         * 主方法 - 演示各种Socket使用方式
         */
        public static void main(String[] args) {
            // 启动安全的多客户端服务器在后台线程
            int serverPort = 8088;
            Thread serverThread = new Thread(() -> safeMultiClientServer(serverPort, 5));
            serverThread.setDaemon(true); // 设为守护线程，主线程结束时会终止
            serverThread.start();

            try {
                // 等待服务器启动
                Thread.sleep(1000);

                // 使用安全的客户端连接到服务器
                safeSocketClientWithTryWithResources("localhost", serverPort);
                safeSocketClientWithTryFinally("localhost", serverPort);

                // 注意：实际应用中不要使用这些不安全的方法
                // unsafeSocketClient("localhost", serverPort);
                // unsafeSocketServer(8089);

            } catch (InterruptedException e) {
                System.err.println("主线程中断: " + e.getMessage());
            }

            System.out.println("示例完成");
        }
    }
CODE
)
