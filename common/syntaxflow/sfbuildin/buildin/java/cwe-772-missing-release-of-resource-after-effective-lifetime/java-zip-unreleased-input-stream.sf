desc(
	title_zh: "检测Java Zip GetInputStream资源未释放"
	title: "Check Java Zip GetInputStream Unreleased Resource"
	risk:"资源泄漏",
	level:high
	reference: <<<REFERENCE
[Effective Java, Third Edition - Item 9: Prefer try-with-resources to try-finally](https://livebook.manning.com/book/effective-java-third-edition/chapter-2/9)
[Java Tutorials - The try-with-resources Statement](https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html)
[CWE-772: Missing Release of Resource after Effective Lifetime](https://cwe.mitre.org/data/definitions/772.html)
[Java ZipFile API Documentation](https://docs.oracle.com/javase/8/docs/api/java/util/zip/ZipFile.html)
[Apache Commons Compress ZipFile API Documentation](https://commons.apache.org/proper/commons-compress/apidocs/org/apache/commons/compress/archivers/zip/ZipFile.html)
REFERENCE
	description: <<<DESCRIPTION

DESCRIPTION
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用 try-with-resources 自动关闭资源 (Java 7+，推荐)
这是最简洁和推荐的方法。`InputStream` 和 `ZipFile` 都实现了 `java.lang.AutoCloseable` 接口，可以放在 `try` 语句后的括号中，JVM 会确保它们在 `try` 块结束（无论正常完成或发生异常）时自动调用 `close()` 方法。
```java
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class SafeZipReadWithResources {
    public static void main(String[] args) throws IOException {
        String zipFilePath = "your_file.zip"; // 替换为实际ZIP文件路径
        try (ZipFile zipFile = new ZipFile(new File(zipFilePath))) {
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                if (!entry.isDirectory()) {
                    System.out.println("Safely processing " + entry.getName());
                    try (InputStream is = zipFile.getInputStream(entry)) {
                        byte[] buffer = new byte[1024];
                        int bytesRead;
                        while ((bytesRead = is.read(buffer)) != -1) {
                            // 处理数据...
                        }
                    } // InputStream自动在 try块结束时关闭
                }
            }
        } // ZipFile自动在 try块结束时关闭
    }
}
```

#### 2. 使用 try-finally 确保关闭资源
在 Java 7 之前的版本，或者在某些复杂场景下，可以使用 `try-finally` 结构来手动关闭资源。这要求在 `finally` 块中检查资源是否为 `null` 并调用 `close()` 方法，同时最好在 `close()` 调用周围加上 `try-catch` 以避免关闭过程中抛出的异常影响主逻辑或覆盖原始异常。
```java
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class SafeZipReadWithFinally {
    public static void main(String[] args) throws IOException {
        String zipFilePath = "your_file.zip"; // 替换为实际ZIP文件路径
        ZipFile zipFile = null;
        try {
            zipFile = new ZipFile(new File(zipFilePath));
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                if (!entry.isDirectory()) {
                    InputStream is = null;
                    try {
                        is = zipFile.getInputStream(entry);
                        byte[] buffer = new byte[1024];
                        int bytesRead;
                        while ((bytesRead = is.read(buffer)) != -1) {
                            // 处理数据...
                        }
                    } finally {
                        if (is != null) {
                            try { is.close(); } catch (IOException e) { /* Log or handle exception */ }
                        }
                    }
                }
            }
        } finally {
            if (zipFile != null) {
                try { zipFile.close(); } catch (IOException e) { /* Log or handle exception */ }
            }
        }
    }
}
```

#### 3. 封装资源处理逻辑
将 ZIP 条目处理逻辑封装到专门的方法或类中，确保在方法内部正确管理资源的生命周期。

#### 4. 使用 Apache Commons Compress 工具类
如果使用了 Apache Commons Compress 库，可以结合 `try-with-resources` 使用其工具类简化流的处理，但仍需确保 `InputStream` 被正确关闭。
```java
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.io.IOUtils;

public class SafeZipReadWithApacheCommons {
    public static void main(String[] args) throws IOException {
        String zipFilePath = "your_file.zip"; // 替换为实际ZIP文件路径
        try (ZipFile zipFile = new ZipFile(new File(zipFilePath))) {
            ZipArchiveEntry entry = zipFile.getEntry("some_entry.txt");
            if (entry != null && !entry.isDirectory()) {
                try (InputStream is = zipFile.getInputStream(entry)) {
                    byte[] content = IOUtils.toByteArray(is);
                    // 处理数据...
                } // InputStream自动关闭
            }
        } // ZipFile自动关闭
    }
}
```
SOLUTION
	rule_id: "8a2c763a-d909-4dd4-a44c-cad0f46b7041"
)

ZipFile?{<typeName()>?{any:"java.util.zip.ZipFile","org.apache.commons.compress.archivers.zip"}}.getInputStream() as $getInputStream
$getInputStream -{
    include:`*.close`
}-> as $safe

$safe<getPredecessors()> as $safeGetInputStream;
$getInputStream - $safeGetInputStream as $weak;
alert $weak	for {
	message: "检测到ZipFile.getInputStream()未释放资源",
}

desc(
	lang:java
	alert_num: 1
	"file://demo.java":<<<CODE
    /**
     * ZipFile.getInputStream() 资源泄漏示例
     * 演示从ZIP文件中读取内容时的资源管理
     */
    import java.io.File;
    import java.io.IOException;
    import java.io.InputStream;
    import java.util.Enumeration;
    import java.util.zip.ZipEntry;
    import java.util.zip.ZipFile;

    public class ZipFileResourceLeakExample {

        /**
         * 错误示例：未关闭从ZipFile.getInputStream()获取的InputStream
         * 这会导致资源泄漏
         */
        public static void unsafeReadZipFile(String zipFilePath) throws IOException {
            ZipFile zipFile = null;

            try {
                // 打开ZIP文件
                zipFile = new ZipFile(new File(zipFilePath));

                // 获取ZIP条目
                Enumeration<? extends ZipEntry> entries = zipFile.entries();

                while (entries.hasMoreElements()) {
                    ZipEntry entry = entries.nextElement();

                    if (!entry.isDirectory()) {
                        System.out.println("读取文件: " + entry.getName());

                        // 获取输入流读取ZIP条目内容
                        InputStream is = zipFile.getInputStream(entry);

                        // 读取数据
                        byte[] buffer = new byte[1024];
                        int bytesRead;
                        while ((bytesRead = is.read(buffer)) != -1) {
                            // 处理数据...
                            System.out.println("读取了 " + bytesRead + " 字节");
                        }

                        // 错误: 未关闭输入流
                        // 即使关闭了ZipFile，如果不关闭这些输入流，仍可能导致资源泄漏
                    }
                }
            } finally {
                // 关闭ZipFile
                if (zipFile != null) {
                    try {
                        zipFile.close();
                    } catch (IOException e) {
                        System.err.println("关闭ZipFile时出错: " + e.getMessage());
                    }
                }
            }
        }

        /**
         * 正确示例1：使用try-finally确保关闭InputStream
         */
        public static void safeReadZipFileWithTryFinally(String zipFilePath) throws IOException {
            ZipFile zipFile = null;

            try {
                zipFile = new ZipFile(new File(zipFilePath));
                Enumeration<? extends ZipEntry> entries = zipFile.entries();

                while (entries.hasMoreElements()) {
                    ZipEntry entry = entries.nextElement();

                    if (!entry.isDirectory()) {
                        System.out.println("安全读取文件: " + entry.getName());

                        // 声明输入流变量
                        InputStream is = null;

                        try {
                            // 获取输入流
                            is = zipFile.getInputStream(entry);

                            // 读取数据
                            byte[] buffer = new byte[1024];
                            int bytesRead;
                            while ((bytesRead = is.read(buffer)) != -1) {
                                // 处理数据...
                            }
                        } finally {
                            // 确保关闭每个输入流
                            if (is != null) {
                                try {
                                    is.close();
                                } catch (IOException e) {
                                    System.err.println("关闭输入流时出错: " + e.getMessage());
                                }
                            }
                        }
                    }
                }
            } finally {
                // 最后关闭ZipFile
                if (zipFile != null) {
                    try {
                        zipFile.close();
                    } catch (IOException e) {
                        System.err.println("关闭ZipFile时出错: " + e.getMessage());
                    }
                }
            }
        }

        /**
         * 正确示例2：使用try-with-resources自动关闭资源（Java 7+）
         */
        public static void safeReadZipFileWithTryWithResources(String zipFilePath) throws IOException {
            // 外层try-with-resources自动关闭ZipFile
            try (ZipFile zipFile = new ZipFile(new File(zipFilePath))) {
                Enumeration<? extends ZipEntry> entries = zipFile.entries();

                while (entries.hasMoreElements()) {
                    ZipEntry entry = entries.nextElement();

                    if (!entry.isDirectory()) {
                        System.out.println("使用try-with-resources读取: " + entry.getName());

                        // 内层try-with-resources自动关闭每个InputStream
                        try (InputStream is = zipFile.getInputStream(entry)) {
                            byte[] buffer = new byte[1024];
                            int bytesRead;
                            while ((bytesRead = is.read(buffer)) != -1) {
                                // 处理数据...
                            }
                        } // InputStream自动关闭
                    }
                }
            } // ZipFile自动关闭
        }

        /**
         * 实用方法示例：安全处理ZIP文件中的条目
         */
        public interface ZipEntryProcessor {
            void process(ZipEntry entry, InputStream entryStream) throws IOException;
        }

        /**
         * 安全处理ZIP文件的工具方法
         */
        public static void processZipEntries(String zipFilePath, ZipEntryProcessor processor) throws IOException {
            try (ZipFile zipFile = new ZipFile(new File(zipFilePath))) {
                Enumeration<? extends ZipEntry> entries = zipFile.entries();

                while (entries.hasMoreElements()) {
                    ZipEntry entry = entries.nextElement();

                    if (!entry.isDirectory()) {
                        try (InputStream is = zipFile.getInputStream(entry)) {
                            // 调用处理器处理每个条目
                            processor.process(entry, is);
                        }
                    }
                }
            }
        }

        /**
         * 主方法演示
         */
        public static void main(String[] args) {
            String zipPath = "example.zip";

            try {
                // 不要在生产环境使用这个不安全的方法
                // unsafeReadZipFile(zipPath);

                // 使用安全方法
                safeReadZipFileWithTryWithResources(zipPath);

                // 使用工具方法处理ZIP
                processZipEntries(zipPath, (entry, is) -> {
                    System.out.println("处理条目: " + entry.getName());
                    // 处理输入流...
                });

            } catch (IOException e) {
                System.err.println("处理ZIP文件时出错: " + e.getMessage());
            }
        }
    }
CODE
)
