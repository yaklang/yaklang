desc(
	title_zh: "检测Java Servlet Groovy Shell代码注入漏洞"
	title: "Check Java Servlet Groovy Shell Code Injection Vulnerability"
	type:"vuln"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   Java Servlet Groovy Shell 代码注入漏洞是指在基于 Java Servlet 的 Web 应用程序中，当应用程序直接或间接使用了 `groovy.lang.GroovyShell` 类来执行从用户输入获取的 Groovy 代码时，且未对用户输入进行充分的安全过滤和校验，攻击者可以构造恶意的 Groovy 代码并将其注入到应用程序中执行。由于 `GroovyShell` 默认在不受限的环境下执行代码，攻击者注入的代码可以执行任意的系统命令、访问敏感资源、修改数据或利用其他系统组件，从而导致严重的远程代码执行（RCE）漏洞。

2. **触发场景**
   当应用程序将用户通过 HTTP 请求（如 GET 参数、POST 数据）或其他外部输入直接或经过简单处理后传递给 `GroovyShell` 的 `evaluate()`, `parse()`, `run()` 等方法执行时，就可能存在此漏洞。例如，一个 Servlet 接收用户提交的 "script" 参数，并直接使用 `new GroovyShell().evaluate(request.getParameter("script"))` 执行。

   ```java
   // 存在漏洞的代码示例
   import groovy.lang.GroovyShell;
   import javax.servlet.ServletException;
   import javax.servlet.annotation.WebServlet;
   import javax.servlet.http.HttpServlet;
   import javax.servlet.http.HttpServletRequest;
   import javax.servlet.http.HttpServletResponse;
   import java.io.IOException;
   import java.io.PrintWriter;

   @WebServlet("/groovyExec")
   public class GroovyExecServlet extends HttpServlet {
       protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
           response.setContentType("text/html");
           PrintWriter out = response.getWriter();
           String script = request.getParameter("script"); // 直接获取用户输入的脚本

           if (script != null && !script.isEmpty()) {
               try {
                   GroovyShell shell = new GroovyShell();
                   Object result = shell.evaluate(script); // 直接执行用户输入的脚本
                   out.println("Result: " + result);
               } catch (Exception e) {
                   out.println("Error: " + e.getMessage());
               }
           } else {
               out.println("Please provide a script parameter.");
           }
       }
   }
   ```
   攻击者可以通过发送类似 `?script='calc'.execute().text` 的请求来执行系统命令。

3. **潜在影响**
   - **远程代码执行 (RCE):** 最严重的后果，攻击者可以在服务器上执行任意操作系统命令。
   - **敏感数据泄露:** 攻击者可以执行代码读取服务器上的任意文件，获取数据库连接信息、私钥等敏感数据。
   - **系统破坏:** 攻击者可以执行删除文件、格式化磁盘等破坏性操作。
   - **权限提升:** 攻击者可能利用服务器上的其他漏洞或配置错误来提升权限。
   - **作为攻击跳板:** 受感染的服务器可能被用于发起对内部网络或其他外部目标的攻击。


DESC
	fix: <<<FIX
在使用Groovy脚本引擎时，确保对输入进行严格的验证和过滤。避免直接执行用户输入的Groovy代码，或者使用安全的沙箱环境来限制代码的执行权限。此外，可以考虑使用其他更安全的脚本语言或框架来实现动态脚本执行的需求。
FIX
	ref: <<<REF
https://docs.groovy-lang.org/next/html/api/groovy/lang/GroovyShell.html
REF
	rule_id: "2446f3b6-3db3-4414-b593-4219073220c4"
)

<include('java-servlet-param')> as $source;
<include('java-groovy-lang-shell-sink')> as $sink;

$sink #{
    include:`* & $source`,
    exclude:`*?{opcode:call}?{!<self> & $source}?{!<self> & $sink}`,
    exclude:`*?{opcode:phi}`,
}-> as $high;

alert $high for {
	message: "发现Java Servlet Boot Groovy Shell代码注入漏洞,并且没有任何数据流过滤。",
	risk: "Groovy-Shell代码执行漏洞",
	title: "",
	title_zh: "",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "high",
}

$sink #{
    include: `<self> & $source`,
}-> as  $result;
$result - $high as $low;

alert $low for {
	risk: "Groovy-Shell代码执行漏洞",
	title: "",
	title_zh: "",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "low",
	message: "发现Java Servlet Boot Groovy Shell代码注入漏洞,并且没有任何数据流过滤。",
}

desc(
	lang: java
	alert_min: 3
	'file://risk1.java': <<<TEXT
package org.example.servlet.rce;

import groovy.lang.GroovyShell;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;

@WebServlet(name = "GroovyEvaluateServlet", urlPatterns = {"/groovy/evaluate"})
public class GroovyEvaluateServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        String payload = request.getParameter("payload");
        
        try (PrintWriter out = response.getWriter()) {
            String result = "No result";
            if (payload != null && !payload.isEmpty()) {
                result = evaluateGroovy(payload);
            }
            out.println("<p>Result: " + result + "</p>");

        } catch (Exception e) {
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error processing Groovy code: " + e.getMessage());
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }
    
    private String evaluateGroovy(String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Object result = shell.evaluate(payload);
            if (result instanceof Process) {
                Process process = (Process) result;
                return getProcessOutput(process);
            } else {
                return result != null ? result.toString() : "null";
            }
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }
    
    private String getProcessOutput(Process process) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        StringBuilder output = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            output.append(line).append("\n");
        }
        return output.toString();
    }
}
TEXT
	'file://risk2.java': <<<TEXT
package org.example.servlet.rce;

import groovy.lang.GroovyShell;
import groovy.lang.Script;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;

@WebServlet(name = "GroovyParseServlet", urlPatterns = {"/groovy/parse"})
public class GroovyParseServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        String payload = request.getParameter("payload");
        
        try (PrintWriter out = response.getWriter()) {
            String result = "No result";
            if (payload != null && !payload.isEmpty()) {
                result = parseGroovy(payload);
            }
            
            out.println("<p>Result: " + result + "</p>");
        } catch (Exception e) {
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error processing Groovy code: " + e.getMessage());
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }
    
    private String parseGroovy(String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Script script = shell.parse(payload);
            Object result = script.run();
            if (result instanceof Process) {
                Process process = (Process) result;
                return getProcessOutput(process);
            } else {
                return result != null ? result.toString() : "null";
            }
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }
    
    private String getProcessOutput(Process process) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        StringBuilder output = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            output.append(line).append("\n");
        }
        return output.toString();
    }
}
TEXT
	'file://risk3.java': <<<TEXT
package org.example.servlet.rce;

import groovy.lang.GroovyShell;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;

@WebServlet(name = "GroovyRunServlet", urlPatterns = {"/groovy/run"})
public class GroovyRunServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        String payload = request.getParameter("payload");
        
        try (PrintWriter out = response.getWriter()) {
            String result = "No result";
            if (payload != null && !payload.isEmpty()) {
                result = runGroovy(payload);
            }
            out.println("<p>Result: " + result + "</p>");

        } catch (Exception e) {
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error processing Groovy code: " + e.getMessage());
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }
    
    private String runGroovy(String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Object result = shell.run(payload, "script.groovy", Arrays.asList());
            if (result instanceof Process) {
                Process process = (Process) result;
                return getProcessOutput(process);
            } else {
                return result != null ? result.toString() : "null";
            }
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }
    
    private String getProcessOutput(Process process) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        StringBuilder output = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            output.append(line).append("\n");
        }
        return output.toString();
    }
}
TEXT
)
