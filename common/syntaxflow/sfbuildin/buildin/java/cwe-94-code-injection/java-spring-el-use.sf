desc(
	title: "Audit Java Spring EL Use"
	type: audit
	level: middle
	desc: <<<DESC
### 规则目的

该规则用于审计Java代码中Spring Expression Language (SpEL) 的使用情况，特别是关注 `SpelExpressionParser` 的实例化和 `parseExpression` 方法的调用。旨在识别可能存在的EL表达式注入风险点，从而防止攻击者通过构造恶意表达式执行任意代码或访问敏感信息。此规则作为审计类规则，用于辅助人工或自动化工具识别潜在的EL注入入口。

### 规则详细

1. **作为审计基础**
   此规则本身不直接检测漏洞，而是作为一种审计工具，标记出代码中使用了 `SpelExpressionParser` 的关键位置。后续需要结合污点分析或人工审计，判断传入 `parseExpression` 方法的表达式是否来源于不可信的用户输入。

2. **覆盖关键类和方法**
   规则核心在于识别 `SpelExpressionParser` 类的实例化以及对其 `parseExpression` 方法的调用，这两个是SpEL表达式解析和执行的起点，也是潜在的注入风险点。

3. **识别潜在风险**
   如果 `parseExpression` 方法的参数（即EL表达式字符串）直接或间接来源于用户可控的输入且未经充分的安全校验（如限制表达式语法、白名单机制等），则存在EL表达式注入漏洞的风险。攻击者可以构造包含恶意代码的EL表达式，一旦这些表达式被解析和执行，可能导致诸如远程代码执行、信息泄露、沙箱逃逸等严重后果。

```java
// 示例：存在EL注入风险的代码
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;

public class VulnerableCode {
    public static void main(String[] args) {
        String userInput = "T(java.lang.Runtime).getRuntime().exec('calc')"; // 模拟用户输入
        ExpressionParser parser = new SpelExpressionParser();
        parser.parseExpression(userInput).getValue(); // 执行恶意表达式
    }
}
```

DESC
	rule_id: "74115441-8b30-4f9c-98d5-491b13b80713"
	title_zh: "审计Java Spring EL使用"
	solution: <<<SOLUTION
### 修复建议

#### 1. 避免解析和执行不可信来源的表达式
最根本的解决方案是确保 `SpelExpressionParser` 解析的表达式字符串**绝对不允许**来源于外部不可信的用户输入。如果必须使用用户输入构建表达式，需要进行严格的沙箱隔离或采用其他安全的表达式引擎。

#### 2. 使用简化的表达式解析器
Spring EL 提供 `SimpleEvaluationContext`，它限制了表达式执行的能力，仅允许访问Properties和Method，并且不能创建新的对象或调用静态方法。这可以大大降低风险。

```java
// 修复代码示例：使用 SimpleEvaluationContext
ExpressionParser parser = new SpelExpressionParser();
// 只允许访问 properties 和 method
EvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();

// 假设 userInput 来源于外部，使用此 context 可以避免执行危险的表达式
String sanitizedInput = "'safe string' + ' from input' + userInput;"; // 不安全的用法，仅为示例
Expression expression = parser.parseExpression(sanitizedInput);
String result = expression.getValue(context, String.class);
System.out.println(result);
```

#### 3. 对用户输入进行严格的白名单过滤或限制
如果业务需求必须允许有限的动态表达式，应对用户输入进行极其严格的白名单校验，仅允许特定、无害的语法结构和函数调用。完全禁用可能导致代码执行、系统访问等的特性。

#### 4. 使用安全沙箱或独立环境
对于高风险场景，考虑在独立的、资源受限的环境（如沙箱）中执行EL表达式，即使发生注入也仅影响沙箱环境，不影响核心系统。

#### 5. 升级Spring Framework版本
确保使用的Spring Framework版本没有已知的SpEL相关的安全漏洞。
SOLUTION
	reference: <<<REFERENCE
[CWE-94: Improper Control of Generation of Code ('Code Injection')](https://cwe.mitre.org/data/definitions/94.html)
REFERENCE
)


SpelExpressionParser().parseExpression(,* as $params) as $call;
check $call;
check $params;
alert $params	for {
	title_zh: "审计Java Spring EL使用",
	level: "middle",
	title: "Audit Java Spring EL Use",
}

alert $call	for {
	title_zh: "审计Java Spring EL使用",
	level: "middle",
	title: "Audit Java Spring EL Use",
}





desc(
	lang: java
	'file:///speluse.java': <<<USE
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;

public class SpringElExample {
    public static void main(String[] args) {
        ExpressionParser parser = new SpelExpressionParser();
        StandardEvaluationContext context = new StandardEvaluationContext();

        // 设置变量
        context.setVariable("name", "World");

        // 执行EL表达式
        String greeting = parser.parseExpression("'Hello, ' + #name").getValue(context, String.class);
        System.out.println(greeting); // 输出: Hello, World
    }
}
USE
)
