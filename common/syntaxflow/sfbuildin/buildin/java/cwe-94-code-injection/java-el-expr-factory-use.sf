desc(
	title: "Audit Java EL Expression Factory Use"
	type: audit
	level: low
	desc: <<<DESC
### 规则描述

#### 1. 规则目的
该规则用于审计 Java 代码中 `javax.el.ExpressionFactory` 的使用情况。特别是关注通过 `ExpressionFactory.newInstance().createValueExpression()` 方法创建表达式的代码，以识别潜在的 EL 表达式注入风险。

#### 2. 规则详细
该规则属于审计（audit）类型，旨在查找代码中实例化 `ExpressionFactory` 并调用 `createValueExpression` 方法创建 EL 表达式的模式。尽管规则文件中的描述提到了硬编码的表达式，但在实际代码审计中，更重要的关注点是 `createValueExpression` 方法的第二个参数（表示 EL 表达式字符串）是否来自用户可控的不可信输入。如果 EL 表达式字符串可被外部控制，则可能导致EL表达式注入漏洞，允许攻击者执行任意 EL 代码，进而危及应用程序安全。因此，本规则作为基础审计，用于定位可能存在EL表达式注入风险的代码位置，后续需要人工或更复杂的流分析规则进一步判断是否存在风险。
DESC
	rule_id: "0ec1f11c-7559-4d8f-b711-40e9e7b4338a"
	title_zh: "审计Java EL Expression Factory使用"
	solution: <<<SOLUTION
### 修复建议

#### 1. 避免使用用户输入构造 EL 表达式
最安全的做法是避免将用户输入直接或间接拼接到 `createValueExpression` 方法的 EL 表达式字符串中。如果必须使用用户输入影响 EL 表达式的执行，应考虑使用安全的方式传递数据。

```java
// 修复代码示例：避免直接使用用户输入构造 EL 表达式
// 假设需要根据用户输入决定某个变量的值，而不是直接注入表达式
String userInput = request.getParameter("param");
Integer value = Integer.parseInt(userInput); // 对输入进行严格校验和转换

context.setVariable("userInputControlledValue", factory.createValueExpression(value, Integer.class));
ValueExpression expression = factory.createValueExpression(context, "${fixedExpression + userInputControlledValue}", Integer.class); // 使用固定的表达式和受控的变量
Integer result = (Integer) expression.getValue(context);
response.getWriter().write("结果: " + result);
```

#### 2. 对 EL 表达式输入进行严格的验证和过滤
如果无法完全避免用户输入，则必须对用于构造 EL 表达式的输入进行极其严格的验证和过滤。这包括：

*   **白名单机制:** 只允许非常有限且明确定义的字符集、函数或结构出现在表达式中。
*   **上下文隔离:** 确保用户输入仅作为数据值传递到 EL 上下文中，而不是作为可执行的表达式部分。
*   **沙箱环境:** 如果可能，考虑在受限的、沙箱化的环境中执行表达式。

```java
// 示例：对用户输入进行简单的白名单过滤（通常不够健壮，仅作示例）
String userInputExpressionPart = request.getParameter("expr");
// 假设只允许数字和基本的数学运算符（+ - * /）
if (!userInputExpressionPart.matches("^[0-9+\-*/()\s]*$")) {
    throw new IllegalArgumentException("非法字符在表达式中");
}
String fullExpression = "${fixedPart + " + userExpressionPart + "}";
ValueExpression expression = factory.createValueExpression(context, fullExpression, Object.class);
// ... 执行和处理结果，并对结果进行二次验证
```

#### 3. 升级和使用安全的 EL 实现
确保使用的 EL 实现是最新且已修复已知漏洞的版本。一些框架或库可能提供更安全的表达式处理方式。
SOLUTION
	reference: <<<REFERENCE
[CWE-94: Improper Control of Generation of Code ('Code Injection')](https://cwe.mitre.org/data/definitions/94.html)
REFERENCE
)

ExpressionFactory.newInstance().createValueExpression(*?{!<typeName>?{any: ExpressionFactory,StandardELContext }} as $params) as $vuln;
check $params;
alert $params for {
	title: "Unvalidated EL Expression Injection",
	title_zh: "未验证的EL表达式注入风险",
	solution: <<<CODE
### 修复建议

#### 1. 避免使用用户输入构造 EL 表达式
最安全的做法是避免将用户输入直接或间接拼接到 `createValueExpression` 方法的 EL 表达式字符串中。如果必须使用用户输入影响 EL 表达式的执行，应考虑使用安全的方式传递数据。

```java
// 修复代码示例：避免直接使用用户输入构造 EL 表达式
// 假设需要根据用户输入决定某个变量的值，而不是直接注入表达式
String userInput = request.getParameter("param");
Integer value = Integer.parseInt(userInput); // 对输入进行严格校验和转换

context.setVariable("userInputControlledValue", factory.createValueExpression(value, Integer.class));
ValueExpression expression = factory.createValueExpression(context, "${fixedExpression + userInputControlledValue}", Integer.class); // 使用固定的表达式和受控的变量
Integer result = (Integer) expression.getValue(context);
response.getWriter().write("结果: " + result);
```

#### 2. 对 EL 表达式输入进行严格的验证和过滤
如果无法完全避免用户输入，则必须对用于构造 EL 表达式的输入进行极其严格的验证和过滤。这包括：

*   **白名单机制:** 只允许非常有限且明确定义的字符集、函数或结构出现在表达式中。
*   **上下文隔离:** 确保用户输入仅作为数据值传递到 EL 上下文中，而不是作为可执行的表达式部分。
*   **沙箱环境:** 如果可能，考虑在受限的、沙箱化的环境中执行表达式。

```java
// 示例：对用户输入进行简单的白名单过滤（通常不够健壮，仅作示例）
String userInputExpressionPart = request.getParameter("expr");
// 假设只允许数字和基本的数学运算符（+ - * /）
if (!userInputExpressionPart.matches("^[0-9+\-*/()\s]*$")) {
    throw new IllegalArgumentException("非法字符在表达式中");
}
String fullExpression = "${fixedPart + " + userExpressionPart + "}";
ValueExpression expression = factory.createValueExpression(context, fullExpression, Object.class);
// ... 执行和处理结果，并对结果进行二次验证
```

#### 3. 升级和使用安全的 EL 实现
确保使用的 EL 实现是最新且已修复已知漏洞的版本。一些框架或库可能提供更安全的表达式处理方式。
CODE
	desc: <<<CODE
### 漏洞描述

#### 1. 漏洞原理
由于应用程序未对用户输入进行严格的过滤或参数化处理，攻击者可通过构造特殊输入篡改原始EL表达式的逻辑。这可能导致非预期的EL表达式执行，例如数据泄露、数据篡改或权限绕过。

#### 2. 触发场景
// 存在漏洞的代码示例
```java
String userInput = request.getParameter("id"); // 未过滤的用户输入
ValueExpression expression = factory.createValueExpression(context, "${userInput}", Object.class); // 直接拼接用户输入
Object result = expression.getValue(context);
```
攻击者输入 `1 OR 1=1` 可绕过业务逻辑，泄露所有用户数据；输入 `1; DROP TABLE users` 可能导致数据表被删除。

#### 3. 潜在影响
- 数据库敏感信息（如用户凭证、隐私数据）被窃取。
- 执行任意EL表达式（如插入、删除、修改数据或数据库结构）。
- 通过数据库提权进一步渗透至服务器或其他系统组件。
CODE
	level: "low",
}

desc(
	lang: java
	'file://expr-use.java': <<<EXPRUSE
import javax.el.ExpressionFactory;
import javax.el.StandardELContext;
import javax.el.ValueExpression;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class ElExampleServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // 创建EL表达式工厂
        ExpressionFactory factory = ExpressionFactory.newInstance();
        StandardELContext context = new StandardELContext(factory);

        // 设置变量
        context.setVariable("x", factory.createValueExpression(10, Integer.class));
        context.setVariable("y", factory.createValueExpression(20, Integer.class));

        // 执行EL表达式
        ValueExpression expression = factory.createValueExpression(context, "${x + y}", Integer.class);
        Integer result = (Integer) expression.getValue(context);

        response.getWriter().write("结果: " + result); // 输出结果
    }
}
EXPRUSE
)
