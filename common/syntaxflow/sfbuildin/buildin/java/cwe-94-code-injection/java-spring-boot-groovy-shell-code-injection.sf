desc(
	title_zh: "检测Java Spring Boot Groovy Shell代码注入漏洞"
	title: "Detect Java Spring Boot Groovy Shell Code Injection Vulnerability"
	type: vuln
	risk: "code-execution"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   Java Spring Boot Groovy Shell代码注入漏洞是指在Java Spring Boot应用程序中，当应用程序使用Groovy脚本引擎（如 `groovy.lang.GroovyShell` 或 `groovy.script.GroovyScriptEngine`）执行动态生成的Groovy代码时，如果未对来自外部（如用户输入）的数据进行充分的验证和过滤，攻击者可以通过构造恶意的Groovy脚本 payload，将其注入到待执行的代码中。Groovy引擎会解析并执行这些恶意脚本，从而导致在服务器端执行任意代码。

2. **触发场景**
   当应用程序直接或间接将用户可控的输入作为参数传递给 `GroovyShell.evaluate()`、`GroovyShell.parse()` 后调用 `Script.run()` 或 `GroovyShell.run()` 等方法时，会触发此漏洞。常见的触发场景包括：
   * 动态执行用户提供的 Groovy 代码片段。
   * 基于用户输入构建动态脚本内容。
   * 在特定功能模块（如规则引擎、表达式计算）中使用了 Groovy 且未对输入进行安全处理。

   以下是示例代码，展示了直接将用户输入 `$payload` 传递给 `GroovyShell.evaluate()` 方法的场景：
   ```java
   import groovy.lang.GroovyShell;
   import org.springframework.web.bind.annotation.GetMapping;
   import org.springframework.web.bind.annotation.RequestParam;
   import org.springframework.web.bind.annotation.RestController;

   @RestController
   public class GroovyController {
       @GetMapping("/execute")
       public String executeGroovy(@RequestParam String payload) {
           GroovyShell shell = new GroovyShell();
           Object result = shell.evaluate(payload); // 漏洞点：直接执行用户输入的payload
           return "Result: " + result.toString();
       }
   }
   ```
   攻击者可以提交类似 `payload=println('Hello from injected code!')` 或 `payload=''.execute('ls -l').text` 的输入，导致服务器执行相应的 Groovy 或系统命令。

3. **潜在影响**
   * **远程代码执行 (RCE):** 攻击者可以在服务器上执行任意操作系统命令，获得对服务器的完全控制。
   * **数据泄露:** 攻击者可以读取、修改或删除服务器上的敏感文件和数据。
   * **拒绝服务 (DoS):** 攻击者可以执行资源消耗型操作，导致服务不可用。
   * **进一步渗透:** 攻击者可以利用受控服务器作为跳板，对内网其他系统进行攻击。
DESC
	fix: <<<FIX

FIX
	ref: <<<REF

REF
	rule_id: "44a473d8-3763-44c3-9819-17100cf17ad6"
)

<include('java-spring-mvc-param')> as $source;
<include('java-groovy-lang-shell-sink')> as $sink;

$sink #{
    include:`* & $source`,
    exclude:`*?{opcode:call}?{!<self> & $source}?{!<self> & $sink}`,
    exclude:`*?{opcode:phi}`,
}-> as $high;

alert $high	for {
	title_zh: "检测Java Spring Boot Groovy Shell代码注入漏洞",
	solution: <<<CODE
### 修复建议

#### 1. 验证和过滤输入
在使用Groovy脚本引擎时，应对所有用户可控的输入进行严格的验证和过滤。避免直接执行未经验证的用户输入。

```java
// 示例：通过白名单机制限制允许的字符集
public static boolean isValidInput(String input) {
    return input.matches("[a-zA-Z0-9\s]+\");
}

@GetMapping("/execute")
public String executeGroovy(@RequestParam String payload) {
    if (!isValidInput(payload)) {
        return "Invalid input";
    }
    GroovyShell shell = new GroovyShell();
    Object result = shell.evaluate(payload);
    return "Result: " + result.toString();
}
```

#### 2. 使用沙箱环境
为Groovy脚本引擎创建一个安全的沙箱环境，限制其可访问的方法、类或变量。

```java
// 示例：配置自定义的GroovyClassLoader以限制权限
import groovy.lang.GroovyClassLoader;

public class SafeGroovyShell {
    public static void main(String[] args) throws Exception {
        GroovyClassLoader loader = new GroovyClassLoader();
        loader.setAllowedClasses(new Class[]{String.class, Integer.class}); // 设置允许加载的类
        Class<?> scriptClass = loader.parseClass("println 'Hello World' from Safe Environment");
        Script script = (Script) scriptClass.getDeclaredConstructor().newInstance();
        script.run();
    }
}
```

#### 3. 替换危险方法
如果业务逻辑需要动态执行脚本，请考虑替换更安全的实现方式，例如使用表达式求值库（如SpEL）而非Groovy。

```java
// 示例：使用Spring Expression Language (SpEL)
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;

@GetMapping("/safe-evaluate")
public String safeEvaluate(@RequestParam String expression) {
    ExpressionParser parser = new SpelExpressionParser();
    Object result = parser.parseExpression(expression).getValue();
    return "Result: " + result.toString();
}
```
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   Java Spring Boot Groovy Shell代码注入漏洞是指在Java Spring Boot应用程序中，当应用程序使用Groovy脚本引擎（如 `groovy.lang.GroovyShell` 或 `groovy.script.GroovyScriptEngine`）执行动态生成的Groovy代码时，如果未对来自外部（如用户输入）的数据进行充分的验证和过滤，攻击者可以通过构造恶意的Groovy脚本 payload，将其注入到待执行的代码中。Groovy引擎会解析并执行这些恶意脚本，从而导致在服务器端执行任意代码。

2. **触发场景**
   当应用程序直接或间接将用户可控的输入作为参数传递给 `GroovyShell.evaluate()`、`GroovyShell.parse()` 后调用 `Script.run()` 或 `GroovyShell.run()` 等方法时，会触发此漏洞。常见的触发场景包括：
   * 动态执行用户提供的 Groovy 代码片段。
   * 基于用户输入构建动态脚本内容。
   * 在特定功能模块（如规则引擎、表达式计算）中使用了 Groovy 且未对输入进行安全处理。

   以下是示例代码，展示了直接将用户输入 `$payload` 传递给 `GroovyShell.evaluate()` 方法的场景：
   ```java
   import groovy.lang.GroovyShell;
   import org.springframework.web.bind.annotation.GetMapping;
   import org.springframework.web.bind.annotation.RequestParam;
   import org.springframework.web.bind.annotation.RestController;

   @RestController
   public class GroovyController {
       @GetMapping("/execute")
       public String executeGroovy(@RequestParam String payload) {
           GroovyShell shell = new GroovyShell();
           Object result = shell.evaluate(payload); // 漏洞点：直接执行用户输入的payload
           return "Result: " + result.toString();
       }
   }
   ```
   攻击者可以提交类似 `payload=println('Hello from injected code!')` 或 `payload=''.execute('ls -l').text` 的输入，导致服务器执行相应的 Groovy 或系统命令。

3. **潜在影响**
   * **远程代码执行 (RCE):** 攻击者可以在服务器上执行任意操作系统命令，获得对服务器的完全控制。
   * **数据泄露:** 攻击者可以读取、修改或删除服务器上的敏感文件和数据。
   * **拒绝服务 (DoS):** 攻击者可以执行资源消耗型操作，导致服务不可用。
   * **进一步渗透:** 攻击者可以利用受控服务器作为跳板，对内网其他系统进行攻击。
CODE
	level: "high",
	message: "发现Java Spring Boot Groovy Shell代码注入漏洞,并且没有任何数据流过滤。",
	risk: "Groovy-Shell代码执行",
	title: "Detect Java Spring Boot Groovy Shell Code Injection Vulnerability",
}

$sink #{
    include: `<self> & $source`,
}-> as  $result;
$result - $high as $low;

alert $low	for {
	message: "发现Java Spring Boot Groovy Shell代码注入漏洞,并且没有任何数据流过滤。",
	title: "Detect Java Spring Boot Groovy Shell Code Injection Vulnerability with Limited Risk",
	title_zh: "检测具有有限风险的Java Spring Boot Groovy Shell代码注入漏洞",
	solution: <<<CODE
### 修复建议

由于该路径已包含一定的过滤机制，但仍然存在潜在风险，因此建议检查现有的过滤函数是否存在缺陷，并进一步加强安全措施。

#### 1. 审查当前过滤逻辑
确保现有过滤逻辑覆盖所有可能的恶意输入模式，尤其是针对系统命令、反射调用等高危行为。

```java
// 示例：增强现有的过滤器逻辑
public static boolean isSafePayload(String payload) {
    List<String> dangerousPatterns = Arrays.asList("execute", "Runtime", "Process", "getClass");
    for (String pattern : dangerousPatterns) {
        if (payload.contains(pattern)) {
            return false;
        }
    }
    return true;
}

@GetMapping("/filtered-execute")
public String filteredExecute(@RequestParam String payload) {
    if (!isSafePayload(payload)) {
        return "Unsafe input detected";
    }
    GroovyShell shell = new GroovyShell();
    Object result = shell.evaluate(payload);
    return "Result: " + result.toString();
}
```

#### 2. 引入日志监控
添加对Groovy脚本执行的日志记录功能，以便及时发现异常活动。

```java
// 示例：启用日志监控
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
public class MonitoredGroovyController {
    @GetMapping("/monitored-execute")
    public String monitoredExecute(@RequestParam String payload) {
        log.info("Executing Groovy script: {}", payload);
        GroovyShell shell = new GroovyShell();
        Object result = shell.evaluate(payload);
        return "Result: " + result.toString();
    }
}
```
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   尽管路径已包含一定的过滤机制，但由于过滤不全面或存在绕过手段，仍可能导致攻击者利用Groovy脚本引擎执行恶意代码。

2. **触发场景**
   如果过滤规则未能阻止特定的危险模式（如系统命令、反射调用），则攻击者可能通过精心构造的输入绕过防护。

   以下是一个示例代码，展示如何通过模糊测试找到过滤规则中的盲点：
   ```java
   String payload = "''.execute('whoami').text";
   if (isSafePayload(payload)) {
       GroovyShell shell = new GroovyShell();
       Object result = shell.evaluate(payload);
       System.out.println(result);
   } else {
       System.out.println("Payload blocked by filter.");
   }
   ```

3. **潜在影响**
   * **部分远程代码执行 (RCE):** 攻击者可能仅能执行有限的操作，但仍足以造成一定危害。
   * **信息泄露:** 可能暴露关键系统信息。
   * **隐蔽攻击:** 攻击者可能利用低风险路径作为突破口，逐步扩大攻击范围。
CODE
	level: "low",
	risk: "Groovy-Shell代码执行",
}

desc(
	lang: java
	alert_num: 3
	'file://risk1.java': <<<TEXT
package org.example.moudels.rce.code;

import groovy.lang.GroovyShell;
import groovy.lang.Script;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.example.common.util.R;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;

@Slf4j
@Api(value="CodeController",tags = "RCE-远程命令执行")
@Controller
@CrossOrigin(origins = "*")
@RequestMapping("/code")
public class CodeController {

    @GetMapping("/vulGroovy-evaluate")
    @ResponseBody
    @ApiOperation(value = "漏洞常见：RCE-Groovy(使用evaluate方法)",notes = "Groovy代码执行")
    @ApiImplicitParam(name = "payload", value = "Groovy代码", required = true, dataType = "String", paramType = "query")
    public R vulGroovyEvaluate(@ApiParam(name = "payload") String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Object result = shell.evaluate(payload);
            if (result instanceof Process) {
                Process process = (Process) result;
                String output = getProcessOutput(process);
                return R.ok("[+] Groovy代码执行，结果：" + output);
            } else {
                return R.ok("[+] Groovy代码执行，结果：" + result.toString());
            }
        }catch (Exception e){
            return R.error(e.getMessage());
        }
    }

    @GetMapping("/vulGroovy-parse")
    @ResponseBody
    @ApiOperation(value = "漏洞常见：RCE-Groovy(使用parse方法)",notes = "Groovy代码执行")
    public R vulGroovyParse(@ApiParam(name = "payload") String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Script script = shell.parse(payload);
            Object result = script.run();
            if (result instanceof Process) {
                Process process = (Process) result;
                String output = getProcessOutput(process);
                return R.ok("[+] Groovy代码执行，结果：" + output);
            } else {
                return R.ok("[+] Groovy代码执行，结果：" + result.toString());
            }
        }catch (Exception e){
            return R.error(e.getMessage());
        }
    }

    @GetMapping("/vulGroovy-run")
    @ResponseBody
    @ApiOperation(value = "漏洞常见：RCE-Groovy(使用run方法)",notes = "Groovy代码执行")
    public R vulGroovyRun(@ApiParam(name = "payload") String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Object result = shell.run(payload, "script.groovy", Arrays.asList());
            if (result instanceof Process) {
                Process process = (Process) result;
                String output = getProcessOutput(process);
                return R.ok("[+] Groovy代码执行，结果：" + output);
            } else {
                return R.ok("[+] Groovy代码执行，结果：" + (result != null ? result.toString() : "null"));
            }
        }catch (Exception e){
            return R.error(e.getMessage());
        }
    }
}
TEXT
)
