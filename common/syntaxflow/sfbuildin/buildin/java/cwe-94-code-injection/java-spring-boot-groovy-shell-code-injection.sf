desc(
    title_zh:"查找Java Spring Boot Groovy Shell代码注入漏洞",
    title:"Find Java Spring Boot Groovy Shell Code Injection Vulnerability",
    type:"vuln",
    desc:<<<TEXT
Java Spring Boot Groovy Shell代码注入漏洞是指在Java Spring Boot应用程序中，使用Groovy脚本引擎执行动态生成的Groovy代码时，未对输入进行充分验证和过滤，导致攻击者可以注入恶意代码并执行任意操作。这种漏洞通常发生在使用GroovyShell或GroovyScriptEngine等类时，攻击者可以通过构造恶意的Groovy脚本来执行任意命令、访问敏感数据或进行其他恶意操作。
TEXT
    fix:<<<TEXT
在使用Groovy脚本引擎时，确保对输入进行严格的验证和过滤。避免直接执行用户输入的Groovy代码，或者使用安全的沙箱环境来限制代码的执行权限。此外，可以考虑使用其他更安全的脚本语言或框架来实现动态脚本执行的需求。
TEXT
    ref:<<<TEXT
https://docs.groovy-lang.org/next/html/api/groovy/lang/GroovyShell.html
TEXT
)

<include('java-spring-mvc-param')> as $source;
<include('java-groovy-lang-shell-sink')> as $sink;

$sink #{
    include:`* & $source`,
    exclude:`*?{opcode:call}?{!<self> & $source}?{!<self> & $sink}`,
    exclude:`*?{opcode:phi}`,
}-> as $high;

alert $high for {
    message: "发现Java Spring Boot Groovy Shell代码注入漏洞,并且没有任何数据流过滤。",
    risk: "Groovy-Shell代码执行",
    level: high,
}

$sink #{
    include: `<self> & $source`,
}-> as  $result;
$result - $high as $low;

alert $low for {
    message: "发现Java Spring Boot Groovy Shell代码注入漏洞,并且没有任何数据流过滤。",
    risk: "Groovy-Shell代码执行",
    level: low,
}

desc(
    lang: java,
    alert_num: 3,
    'file://risk1.java': <<<TEXT
package org.example.moudels.rce.code;

import groovy.lang.GroovyShell;
import groovy.lang.Script;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.example.common.util.R;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;

@Slf4j
@Api(value="CodeController",tags = "RCE-远程命令执行")
@Controller
@CrossOrigin(origins = "*")
@RequestMapping("/code")
public class CodeController {

    @GetMapping("/vulGroovy-evaluate")
    @ResponseBody
    @ApiOperation(value = "漏洞常见：RCE-Groovy(使用evaluate方法)",notes = "Groovy代码执行")
    @ApiImplicitParam(name = "payload", value = "Groovy代码", required = true, dataType = "String", paramType = "query")
    public R vulGroovyEvaluate(@ApiParam(name = "payload") String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Object result = shell.evaluate(payload);
            if (result instanceof Process) {
                Process process = (Process) result;
                String output = getProcessOutput(process);
                return R.ok("[+] Groovy代码执行，结果：" + output);
            } else {
                return R.ok("[+] Groovy代码执行，结果：" + result.toString());
            }
        }catch (Exception e){
            return R.error(e.getMessage());
        }
    }

    @GetMapping("/vulGroovy-parse")
    @ResponseBody
    @ApiOperation(value = "漏洞常见：RCE-Groovy(使用parse方法)",notes = "Groovy代码执行")
    public R vulGroovyParse(@ApiParam(name = "payload") String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Script script = shell.parse(payload);
            Object result = script.run();
            if (result instanceof Process) {
                Process process = (Process) result;
                String output = getProcessOutput(process);
                return R.ok("[+] Groovy代码执行，结果：" + output);
            } else {
                return R.ok("[+] Groovy代码执行，结果：" + result.toString());
            }
        }catch (Exception e){
            return R.error(e.getMessage());
        }
    }

    @GetMapping("/vulGroovy-run")
    @ResponseBody
    @ApiOperation(value = "漏洞常见：RCE-Groovy(使用run方法)",notes = "Groovy代码执行")
    public R vulGroovyRun(@ApiParam(name = "payload") String payload) {
        try {
            GroovyShell shell = new GroovyShell();
            Object result = shell.run(payload, "script.groovy", Arrays.asList());
            if (result instanceof Process) {
                Process process = (Process) result;
                String output = getProcessOutput(process);
                return R.ok("[+] Groovy代码执行，结果：" + output);
            } else {
                return R.ok("[+] Groovy代码执行，结果：" + (result != null ? result.toString() : "null"));
            }
        }catch (Exception e){
            return R.error(e.getMessage());
        }
    }
}
TEXT
)
