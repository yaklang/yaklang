desc(
    title: "SpringFramework SPEL Parser Injection",
    type: vuln,
    level: high,
    desc: <<<TEXT
Spring Framework 的 Spring Expression Language (SPEL) 解析器存在注入漏洞。当应用程序不安全地解析用户提供的SPEL表达式时，攻击者可以构造恶意的表达式来访问或修改应用程序中的敏感数据，执行任意代码，甚至可能导致远程代码执行。这严重威胁到应用程序的数据完整性和安全性。建议对SPEL表达式的解析进行严格的输入验证和消毒，以防止此类注入攻击。
TEXT
)

<include('java-spring-param')> as $params;
check $params;

SpelExpressionParser().parseExpression(* as $sinks);
$sinks #{
    hook: `* & $params as $result`,
}->;
check $result;
alert $result;

desc(
    lang: java,
    'file:///spel-inject.java': <<<UNSAFE
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class SpelInjectionController {

    private static final ExpressionParser parser = new SpelExpressionParser();

    @PostMapping("/evaluate")
    public String evaluate(@RequestBody String expression) {
        // 直接使用用户输入的表达式
        return parser.parseExpression(expression).getValue().toString();
    }
}
UNSAFE
)