desc(
	title: "Check Java Insecure Byte Array to String Conversion"
	title_zh: "检测Java不安全的字节数组到字符串转换"
	type: Vulnerability
	severity: Medium
	risk: "data-convert"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
将可能包含非字符数据的字节数组直接转换为字符串（String）是一种不安全的操作，例如文件内容、加密数据或原始二进制数据。这种转换会使用平台的默认字符集，如果原始字节序列在该字符集中无法正确表示，或者压根不是字符数据，就会导致数据丢失、乱码，影响数据的完整性和后续处理的正确性。这可能导致程序逻辑错误、功能异常，甚至在某些依赖数据完整性的安全场景下（如文件类型验证、哈希校验）产生安全风险。

2. **触发场景**
当程序读取文件内容、网络数据或接收其他形式的字节数据，并在未指定字符集或未判断数据类型的情况下，直接通过 `new String(byte[])` 构造字符串时，就会触发该问题。

例如，读取一个二进制文件或一个使用非默认字符集编码的文本文件，然后直接转换为字符串：

```java
FileInputStream fis = new FileInputStream("binary_file.dat");
byte[] byteArr = new byte[1024];
int count = fis.read(byteArr);

String fileString = new String(byteArr); // 存在风险，未指定字符集，可能处理二进制数据
String fileSHA256Hex = DigestUtils.sha256Hex(fileString); // 基于损坏数据的哈希
```
或者在处理 Base64 编码的二进制数据解码后，直接转换为字符串：
```java
byte[] b = java.util.Base64.getDecoder().decode(base64EncodedBinary);
String jdbcUrl = new String(b); // 存在风险，解码的是二进制数据，直接转字符串不正确
```

3. **潜在影响**
- **数据丢失与损坏：** 原始字节数据无法正确还原，导致信息丢失或变为乱码。
- **程序逻辑错误：** 基于损坏字符串进行的后续操作（如解析、比较、进一步处理）产生非预期结果。
- **哈希校验失败/冲突：** 基于损坏字符串计算的哈希值不正确，影响数据完整性验证，甚至可能在特定情况下增加哈希冲突的风险。
- **安全功能绕过：** 在依赖于正确数据解析的安全检查（如文件类型魔术字节检查、输入格式验证）中，错误的字符串转换可能导致安全功能被绕过。
- **调试困难：** 错误隐藏在数据转换过程中，难以快速定位问题根源。
DESC
	solution: <<<SOLUTION
### 修复建议

#### 1. 明确数据类型，避免不必要的字符串转换
首先确定你处理的是文本数据还是二进制数据。如果数据本身是二进制的（如图片、音频、加密内容），则应直接以字节数组形式进行处理，避免转换为字符串。

```java
// 对于二进制数据，直接使用字节数组进行操作
byte[] binaryData = getBinaryData();
processBinaryData(binaryData);
// 避免：String s = new String(binaryData);
```

#### 2. 指定明确的字符集进行文本转换
如果确定字节数据是文本，**必须**显式指定正确的字符集进行转换，而不是依赖平台的默认字符集。常用的字符集包括 UTF-8、GBK 等。

```java
FileInputStream fis = new FileInputStream("text_file.txt");
byte[] byteArr = new byte[1024];
int count = fis.read(byteArr);

// 修复代码示例：显式指定字符集（例如 UTF-8）
String fileString = new String(byteArr, StandardCharsets.UTF_8);
String fileSHA256Hex = DigestUtils.sha256Hex(fileString);
```

#### 3. 对二进制数据使用 Base64 等编码
如果确实需要将二进制数据以文本形式存储或传输，应使用 Base64 或其他适当的编码方式将其转换为字符串，并在使用时首先进行解码，获取原始字节数组。

```java
// 原始二进制数据
byte[] binaryData = getBinaryData();

// 使用 Base64 编码为字符串进行存储或传输
String encodedData = Base64.getEncoder().encodeToString(binaryData);

// 在使用时，先解码回字节数组
byte[] decodedData = Base64.getDecoder().decode(encodedData);
processBinaryData(decodedData);
```

#### 4. 对敏感数据（如密码）使用字符数组
对于密码等敏感信息，应优先使用 `char[]` 存储，并在不再需要时清零，避免转换为不可变的 `String` 对象，降低内存中敏感信息泄露的风险。虽然这与字节数组转换直接相关不大，但在安全数据处理中是重要的最佳实践。
SOLUTION
	rule_id: "d8a2e488-f0d9-4e74-b2fb-3d9e41c198d5"
	reference: <<<REFERENCE
[CWE-1341: Insecure Conversion between Numeric Formats](https://cwe.mitre.org/data/definitions/1341.html)
[CWE-703: Improper Check for Unusual or Exceptional Conditions](https://cwe.mitre.org/data/definitions/703.html)
REFERENCE
)


// get call site 
String() as $string_constructor 
$string_constructor?{<getActualParams()>* <fullTypeName()>?{have:"byte"}} as $target 

alert $target for {
	title: "Check Java Insecure Byte Array to String Converion",
	title_zh: "检测Java不安全的字节数组到字符串转换",
	level: "mid",
}



desc(
	"file://a.java": <<<CODE
public class Jdbc {

    /**
     * <a href="https://github.com/JoyChou93/java-sec-code/wiki/CVE-2022-21724">CVE-2022-21724</a>
     */
    @RequestMapping("/postgresql")
    public void postgresql(String jdbcUrlBase64) throws Exception{
        byte[] b = java.util.Base64.getDecoder().decode(jdbcUrlBase64);
        String jdbcUrl = new String(b);
        log.info(jdbcUrl);
        DriverManager.getConnection(jdbcUrl);
    }

    private String getImgBase64(String imgFile) throws IOException {
        File f = new File(imgFile);
        byte[] data = Files.readAllBytes(Paths.get(imgFile)); //FIXME: this not match 
        return new String(Base64.encodeBase64(data));
    }
}

CODE
)

