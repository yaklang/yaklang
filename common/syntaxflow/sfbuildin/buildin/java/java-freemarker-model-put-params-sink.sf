desc(
  title: 'checking [freeMarker.Template.Process directly] audit prompt',
  type: audit,
  level: warning,
  desc: <<<TEXT
   检查Freemarker模板中的process方法，以确保不会直接将用户输入作为参数传递给process方法。如果用户输入未经过充分的过滤，可能会导致Freemarker模板注入漏洞。攻击者可以通过构造恶意输入，执行Freemarker模板中的代码，进而控制服务器。为了防止Freemarker模板注入漏洞，需要对用户输入进行严格的过滤，包括验证输入的合法性、长度、字符等，并尽量避免直接将用户输入作为参数传递给Freemarker模板的process方法。
TEXT
)
getTemplate(,*?{!opcode: const} as $sink).process(,* as $params,);
check $params;
$params.put(,,* as $sink);
check $sink then "Found Freemarker Process Using" else "No Freemarker Process Simple";
alert $sink;

desc(
    lang: java,
    'file://basic.java': <<<BASIC
import freemarker.template.*;

import java.io.*;
import java.util.*;

public class FreemarkerExample {
    public static void main(String[] args) {
        // 配置 Freemarker
        Configuration cfg = new Configuration(Configuration.VERSION_2_3_31);
        try {
            cfg.setDirectoryForTemplateLoading(new File("src/main/resources/templates"));
            cfg.setDefaultEncoding("UTF-8");
            cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
            cfg.setLogTemplateExceptions(false);
            cfg.setWrapUncheckedExceptions(true);

            // 加载模板
            Template template = cfg.getTemplate("welcome.ftl");

            // 数据模型
            Map<String, Object> templateData = new HashMap<>();
            templateData.put("user", "John Doe");

            // 渲染模板
            Writer out = new StringWriter();
            template.process(templateData, out);

            // 输出渲染后的文本
            System.out.println(out.toString());

        } catch (IOException | TemplateException e) {
            e.printStackTrace();
        }
    }
}
BASIC
)