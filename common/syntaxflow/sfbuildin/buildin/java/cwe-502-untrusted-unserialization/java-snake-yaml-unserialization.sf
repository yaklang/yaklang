desc(
    title_zh:"检测Java SnakeYAML反序列化漏洞",
    title:"Check Java SnakeYAML Unserialization",
    type:vul,
    reference:<<<URL
   https://javadoc.io/doc/org.yaml/snakeyaml/latest/org/yaml/snakeyaml/Yaml.html
URL
    desc: <<<TEXT
反序列化漏洞允许攻击者通过发送恶意构造的序列化对象，远程执行任意代码。当应用程序使用`SnakeYAML`库的`load()`等方法从不受信任的来源反序列化对象时，如果未进行适当的安全措施，攻击者可以利用此漏洞执行任意代码，造成敏感数据泄露、服务器被控等严重后果。
规则审计的类:
- org.yaml.snakeyaml.Yaml
审计的方法:
- load()
- loadAll()
- loadAs()
TEXT
)

// load()
// loadAll()
// loadAs()
Yaml()?{<typeName>?{have:'org.yaml.snakeyaml.Yaml'}} as $yaml;
$yaml.load*(*<slice(index=1)> as $sink);

<include('java-spring-mvc-param')> as $source;
<include('java-servlet-param')> as $source;

$sink #{
    until: `* & $source`,
    exclude: `*?{opcode:call}?{!* & $source}?{!* & $sink}`,
}->as  $high;

alert $high for {
    message: "发现Java SnakeYAML反序列化漏洞,并且没有任何数据流过滤。",
    level: high,
}

$sink #{
    until: `* & $source`,
}->as  $result;

$result - $high as $low;
alert $low for {
    message: "发现Java SnakeYAML反序列化漏洞,但是有数据流过滤。",
    level: low,
}

desc(
    lang:java,
    alert_num:1,
    'file://risk1.java': <<<TEXT
import groovy.sql.Sql;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.SafeConstructor;

@Slf4j
@Api(value = "SnakeYamlController", tags = "反序列化 - SnakeYaml")
@Controller
@CrossOrigin(origins = "*")
@RequestMapping("/snakeYaml")
public class SnakeYamlController {
    @RequestMapping("")
    public String snakeYaml(){
        return "vul/deserialize/snakeYaml";
    }

    @RequestMapping("/vul")
    @ResponseBody
    public R vul(String payload) {
        log.info("payload："+payload);
        Yaml y = new Yaml();
        y.load(payload);
        return R.ok("[+]Java反序列化：SnakeYaml原生漏洞");
    }

}
TEXT
)

