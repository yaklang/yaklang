desc(
	title_zh:"检测Java通过ObjectInputStream的原生反序列化漏洞",
	title: "Check Java Native Deserialization Vulnerability via ObjectInputStream"
	type: audit
	lang: java
	risk: '反序列化漏洞',
	desc: <<<TEXT
反序列化漏洞允许攻击者通过发送恶意构造的序列化对象，远程执行任意代码。当应用程序使用`ObjectInputStream`的`readObject()`方法从不受信任的来源反序列化对象时，如果未进行适当的安全措施，攻击者可以利用此漏洞执行任意代码，造成敏感数据泄露、服务器被控等严重后果。因此，应严格限制或避免从不受信任的输入源进行反序列化操作。
TEXT
	rule_id: "faa71bd7-8156-4997-b0c3-aa53f6b71d5a"
)

.readObject?{<typeName>?{have: "java.io.ObjectInputStream"} } as $readObj;
check $readObj;

alert $readObj for {
    message: "发现使用ObjectInputStream的readObject()方法进行反序列化操作，可能存在反序列化漏洞",
    level: info,
};

$readObj<getObject()> as $sink

<include('java-spring-mvc-param')> as $source;
<include('java-servlet-param')> as $source;
$sink #{
    until: `* & $source`,
}-> as $mid;

alert $mid for {
    message: "发现从用户可控输入到ObjectInputStream的readObject的数据流，可能存在反序列化漏洞",
    level: mid,
};


desc(
	lang: java
	alert_middle: 3
	alert_min: 5
	'file://demo.java': <<<EOF
import java.io.*;

public class VulnerableClass {
    public static void main(String[] args) {
        try {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("data.bin"));
            Object obj = ois.readObject();
            ois.close();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();    
        }
    }
}
EOF
	'file://demo2.java': <<<EOF
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import java.io.*;

@RestController
public class VulnerableController {

    @PostMapping("/deserialize")
    public String deserializeObject(@RequestBody byte[] data) {
        try {
            ByteArrayInputStream bis = new ByteArrayInputStream(data);
            ObjectInputStream ois = new ObjectInputStream(bis);
            Object obj = ois.readObject();
            ois.close();
            return "Deserialization successful: " + obj.toString();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
            return "Error during deserialization: " + e.getMessage();
        }
    }
}
EOF
	'file://demo3.java': <<<EOF
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;

@WebServlet("/vulnerable")
public class VulnerableServlet extends HttpServlet {

    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        try {
            ObjectInputStream ois = new ObjectInputStream(request.getInputStream());
            Object obj = ois.readObject();
            ois.close();
            
            response.getWriter().println("Deserialization successful: " + obj.toString());
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            response.getWriter().println("Error during deserialization: " + e.getMessage());
        }
    }
}
EOF
)
