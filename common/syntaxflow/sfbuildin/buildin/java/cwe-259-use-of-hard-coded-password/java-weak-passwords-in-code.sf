desc(
	title_zh: "检测Java硬编码弱密码漏洞"
	title: "Check Java Hardcoded Weak Password Vulnerability"
	type: vuln
	level: high
	risk: hardcodedpassword
	harm_zh: "在代码中直接硬编码弱密码（如仅包含字母或数字且长度较短）会带来严重安全风险。一旦代码被泄露或反编译，攻击者可以轻易获取密码，从而直接访问系统、数据库或其他受保护资源。",
	harm: "Hardcoding weak passwords (e.g., short alphanumeric only) in source code poses a severe security risk. If the code is leaked or reverse-engineered, attackers can easily obtain the password and gain unauthorized access to systems, databases, or other protected resources."
	fix_zh: "建议移除代码中的硬编码密码，改为从安全的配置文件或环境变量中读取，并确保使用强密码策略（长度≥12位，包含大小写字母、数字和特殊字符）。",
	fix: <<<FIX
修复建议：
1. 不要在代码中硬编码任何密码或密钥。
2. 从安全的配置文件、环境变量或密钥管理系统中读取密码。
3. 使用强密码策略（至少 12 位，包含大小写字母、数字和特殊字符）。
4. 定期更换密码，并启用多因素认证（MFA）。
FIX
	rule_id: "cf5bbdfd-fd95-4e50-8adc-119e7629fd38"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   在代码中直接硬编码弱密码（例如仅包含字母或数字且长度较短的密码）会带来严重的安全风险。攻击者一旦通过反编译或其他方式获取到源码，便可轻松提取出这些密码，从而获得未经授权的系统、数据库或其他受保护资源的访问权限。

2. **触发场景**
   ```java
   public class DatabaseConnection {
       private static final String DB_PASSWORD = "password123"; // 硬编码弱密码

       public void connect() {
           // 使用硬编码密码连接数据库
           System.out.println("Connecting with password: " + DB_PASSWORD);
       }
   }
   ```
   上述代码片段展示了在Java中直接将弱密码硬编码在源码中的情况。如果攻击者获得了这段代码，他们可以轻易利用该密码访问数据库。

3. **潜在影响**
   - 攻击者可以通过泄露的密码直接访问系统或敏感数据。
   - 数据库被恶意篡改或删除，导致业务中断。
   - 攻击者可能进一步利用此入口进行横向渗透，危害整个IT基础设施。

### 规则目的
   该规则旨在扫描Java代码中是否存在硬编码的弱密码，并提醒开发人员采取更安全的密码管理实践，以降低潜在的安全风险。
DESC
	reference: <<<REFERENCE
[CWE-259: Use of Hard-coded Password](https://cwe.mitre.org/data/definitions/259.html)
[OWASP: Hardcoded Password](https://owasp.org/www-community/vulnerabilities/Use_of_Hard-coded_Password)
REFERENCE
)

/(?i)(SECRET|PASSWD|PASSWORD)/ ?{opcode: const} as $constSecret
$constSecret?{have:/^[a-zA-Z0-9]+$/} as $week

alert $week for {
	level: "high",
	name: "week",
	title: "Java Hardcoded Weak Password Vulnerability Was Detected",
	title_zh: "检测到Java硬编码弱密码漏洞",
	message: "检测到Java代码中存在硬编码的弱密码，并且从数据源（source）到污染汇聚点（sink）间，没有发现任何过滤函数信息。",
	solution: <<<SOLUTION
### 修复建议
#### 1. 不要在代码中硬编码任何密码或密钥。
```java
// 示例：避免硬编码密码
String password = System.getenv("DB_PASSWORD"); // 从环境变量读取
```

#### 2. 从安全的配置文件、环境变量或密钥管理系统中读取密码。
```java
// 示例：使用配置文件读取密码
Properties prop = new Properties();
prop.load(new FileInputStream("config.properties"));
String password = prop.getProperty("db.password");
```

#### 3. 使用强密码策略（至少 12 位，包含大小写字母、数字和特殊字符）。
```java
// 示例：验证密码强度
if (!password.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{12,}$")) {
    throw new IllegalArgumentException("密码不符合强密码策略");
}
```

#### 4. 定期更换密码，并启用多因素认证（MFA）。
```java
// 示例：定期更新密码逻辑
ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
scheduler.scheduleAtFixedRate(() -> updatePassword(), 0, 90, TimeUnit.DAYS);
```
SOLUTION
	risk: "硬编码密码",
}

desc(
    "file://demo.java":<<<CODE
    public class JwtUtils {
        private static final long EXPIRE = 1440 * 60 * 1000;  // 1440 Minutes, 1 DAY
        private static final String SECRET = "123456";
        private static final String B64_SECRET = Base64.getEncoder().encodeToString(SECRET.getBytes(StandardCharsets.UTF_8));
}
CODE
    "safefile://demo.java":<<<CODE
        public class JwtUtils {
            private static final long EXPIRE = 1440 * 60 * 1000;  // 1440 Minutes, 1 DAY
            private static final String B64_SECRET = Base64.getEncoder().encodeToString(SECRET.getBytes(StandardCharsets.UTF_8));
    }
CODE
)
