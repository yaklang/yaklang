desc(
	title: "Check Java XPath Injection Vulnerability"
	title_zh: "检测Java XPath注入漏洞"
	type: vuln
	risk_type: "xpath-injection"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   XPath注入漏洞发生在应用程序使用用户提供的数据构建XPath查询表达式时，未对输入进行适当的验证或转义。攻击者可以通过构造恶意的输入来修改XPath表达式的逻辑，从而控制应用程序对XML数据的查询行为。
2. **触发场景**
   在Java应用程序中，当使用`javax.xml.xpath.XPath`等API处理XML数据并通过字符串拼接的方式构建包含用户输入的XPath表达式时，就可能引入XPath注入漏洞。

   // 存在漏洞的代码示例
   ```java
   String bookAuthor = request.getParameter("bookAuthor");
   String expression = "/books/book[author='" + bookAuthor + "']"; // 用户输入直接拼接
   XPathFactory xPathfactory = XPathFactory.newInstance();
   XPath xpath = xPathfactory.newXPath();
   XPathExpression compiledExpression = xpath.compile(expression);
   NodeList nodeList = (NodeList) compiledExpression.evaluate(document, XPathConstants.NODESET);
   ```
   攻击者可以输入 `' OR '1'='1` 来查询所有书籍，或者通过构造更复杂的表达式来遍历或提取未授权的XML数据。
3. **潜在影响**
   - 泄露XML数据中的敏感信息，例如用户凭证、配置信息或业务数据。
   - 未授权修改XML数据（如果应用程序逻辑支持）。
   - 使应用程序处理非预期的XPath表达式，可能导致性能问题或拒绝服务。
DESC
	rule_id: "9f04beb1-fc2d-40b3-b75f-9ea63e9a4338"
	solution: <<<SOLUTION
### 修复建议

#### 1. 参数化查询
对于用户输入的数据，不建议直接拼接到XPath表达式中。尽可能使用参数化查询或绑定变量的方式来构建XPath表达式，将用户输入作为参数传递，而不是直接作为表达式的一部分。

目前标准的Java XPath API (`javax.xml.xpath`) 没有直接的参数化查询机制。对于需要处理用户输入的场景，可以考虑以下替代方案：

#### 2. 输入验证和过滤
在将用户输入用于构建XPath表达式之前，对输入进行严格的验证和过滤。根据预期的输入类型和格式，只允许合法的字符、数字或其他白名单内容。

```java
// 示例：简单过滤，仅允许字母和数字
String bookAuthor = request.getParameter("bookAuthor");
if (!bookAuthor.matches("^[a-zA-Z0-9 ]+$")) {
    throw new IllegalArgumentException("Invalid author name");
}
String expression = "/books/book[author='" + bookAuthor + "']"; // 过滤后再拼接
```

#### 3. 黑名单过滤
过滤或转义在XPath语法中有特殊含义的字符，例如`'` (单引号)，`"` (双引号)，`/`，`[`, `]`, `@`, `*`, `|`, `and`, `or`等。这有助于防止攻击者注入恶意XPath语法。

```java
// 示例：简单转义单引号
String bookAuthor = request.getParameter("bookAuthor");
String escapedAuthor = bookAuthor.replace("'", "''"); // 将单引号转义为两个单引号
String expression = "/books/book[author='" + escapedAuthor + "']";
```

#### 4. 使用安全的XML处理库
考虑使用提供更高级别抽象和安全性特性的XML处理库，这些库可能内置了针对XPath注入的防护机制。

#### 5. 限制XPath返回结果范围
在可能的情况下，限制XPath表达式能访问的数据范围和类型，降低潜在攻击的影响。
SOLUTION
	reference: <<<REFERENCE
[CWE-643: Exposure of XML Entity Expanded Content](https://cwe.mitre.org/data/definitions/643.html)
REFERENCE
)

<include('java-spring-mvc-param')> as $source;
<include('java-servlet-param')> as $source;

.evaluate?{<typeName>?{have:'javax.xml.xpath.XPath'}}(* as $sink);
check $sink;

$sink #{
    include:`<self> & $source`,
    exclude:`<self>?{opcode:call}?{!<self> & $source}?{!<self> & $sink}`
}->as $high;

alert $high for {
	message: "Find LDAP direct injection vulnerability",
	title: "Check Java XPath Injection Vulnerability",
	title_zh: "检测Java XPath注入漏洞",
	solution: <<<CODE
### 修复建议

#### 1. 参数化查询
对于用户输入的数据，不建议直接拼接到XPath表达式中。尽可能使用参数化查询或绑定变量的方式来构建XPath表达式，将用户输入作为参数传递，而不是直接作为表达式的一部分。

目前标准的Java XPath API (`javax.xml.xpath`) 没有直接的参数化查询机制。对于需要处理用户输入的场景，可以考虑以下替代方案：

#### 2. 输入验证和过滤
在将用户输入用于构建XPath表达式之前，对输入进行严格的验证和过滤。根据预期的输入类型和格式，只允许合法的字符、数字或其他白名单内容。

```java
// 示例：简单过滤，仅允许字母和数字
String bookAuthor = request.getParameter("bookAuthor");
if (!bookAuthor.matches("^[a-zA-Z0-9 ]+$")) {
    throw new IllegalArgumentException("Invalid author name");
}
String expression = "/books/book[author='" + bookAuthor + "']"; // 过滤后再拼接
```

#### 3. 黑名单过滤
过滤或转义在XPath语法中有特殊含义的字符，例如`'` (单引号)，`"` (双引号)，`/`，`[`, `]`, `@`, `*`, `|`, `and`, `or`等。这有助于防止攻击者注入恶意XPath语法。

```java
// 示例：简单转义单引号
String bookAuthor = request.getParameter("bookAuthor");
String escapedAuthor = bookAuthor.replace("'", "''"); // 将单引号转义为两个单引号
String expression = "/books/book[author='" + escapedAuthor + "']";
```

#### 4. 使用安全的XML处理库
考虑使用提供更高级别抽象和安全性特性的XML处理库，这些库可能内置了针对XPath注入的防护机制。

#### 5. 限制XPath返回结果范围
在可能的情况下，限制XPath表达式能访问的数据范围和类型，降低潜在攻击的影响。
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   XPath注入漏洞发生在应用程序使用用户提供的数据构建XPath查询表达式时，未对输入进行适当的验证或转义。攻击者可以通过构造恶意的输入来修改XPath表达式的逻辑，从而控制应用程序对XML数据的查询行为。
2. **触发场景**
   在Java应用程序中，当使用`javax.xml.xpath.XPath`等API处理XML数据并通过字符串拼接的方式构建包含用户输入的XPath表达式时，就可能引入XPath注入漏洞。

   // 存在漏洞的代码示例
   ```java
   String bookAuthor = request.getParameter("bookAuthor");
   String expression = "/books/book[author='" + bookAuthor + "']"; // 用户输入直接拼接
   XPathFactory xPathfactory = XPathFactory.newInstance();
   XPath xpath = xPathfactory.newXPath();
   XPathExpression compiledExpression = xpath.compile(expression);
   NodeList nodeList = (NodeList) compiledExpression.evaluate(document, XPathConstants.NODESET);
   ```
   攻击者可以输入 `' OR '1'='1` 来查询所有书籍，或者通过构造更复杂的表达式来遍历或提取未授权的XML数据。
3. **潜在影响**
   - 泄露XML数据中的敏感信息，例如用户凭证、配置信息或业务数据。
   - 未授权修改XML数据（如果应用程序逻辑支持）。
   - 使应用程序处理非预期的XPath表达式，可能导致性能问题或拒绝服务。
CODE
	level: "high",
}


desc(
	alert_min: 2
	language: java
	'file://XPathInjection.java': <<<EOF
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

@RestController
public class XPathInjectionExample {

    @GetMapping("/searchBooks")
    public String searchBooks(@RequestParam String bookAuthor) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(getClass().getResourceAsStream("/books.xml"));

        XPathFactory xPathfactory = XPathFactory.newInstance();
        XPath xpath = xPathfactory.newXPath();

        String expression = "/books/book[author='" + bookAuthor + "']";//source
        XPathExpression compiledExpression = xpath.compile(expression); //sink

        NodeList nodeList = (NodeList) compiledExpression.evaluate(document, XPathConstants.NODESET);

        StringBuilder result = new StringBuilder();
        for (int i = 0; i < nodeList.getLength(); i++) {
            result.append(nodeList.item(i).getTextContent()).append("\n");
        }
        return result.toString();
    }


}
EOF
	'file://XPathInjection2.java': <<<EOF
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.ResponseEntity;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPath;
import org.w3c.dom.Document;
import org.springframework.beans.factory.annotation.Autowired;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.InputStream;
import org.springframework.core.io.ClassPathResource;

@RestController
public class VulnerableXPathController {

    private final XPath xpath = XPathFactory.newInstance().newXPath();

    @Autowired
    private DocumentBuilderFactory documentBuilderFactory;

    @GetMapping("/searchByUsername")
    public ResponseEntity<String> searchByUsername(@RequestParam String username) {
        try {
            InputStream inputStream = new ClassPathResource("users.xml").getInputStream();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document document = documentBuilder.parse(inputStream);

            String expression = "//user[username='" + username + "']";//source

            String result = (String) xpath.evaluate(expression, document, XPathConstants.STRING);//sink

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body("Error processing request");
        }
    }
}
EOF
)
