desc(
    title:"Check Java Privacy Violation - Shoulder Surfing",
    title_zh:"检查Java隐私泄露 - 肩窥",
    type:security,
    risk:'info-exposure',
    level:low,
    rule_id: 21188001,
    desc:<<<TEXT
    该规则用于检测Java代码中是否含有"肩窥"问题，"肩窥"是一种安全威胁，指的是攻击者通过观察用户的屏幕或键盘输入来获取敏感信息，例如密码。
TEXT
)

// new PasswordCallback("Password: ", true)
PasswordCallback?{<typeName>?{have:'javax.security.auth.callback.PasswordCallback'}}(,,* as $toCheck);
$toCheck ?{* #{
    include:`* ?{opcode:const && have:'true'} `
}->} as $risk;
alert $risk for{
    message:"发现Java代码中PasswordCallback方法存在隐私泄露的风险"
}

desc(
    lang:'java',
    alert_num:1,
    "file://unsafe.java":<<<TEXT
package net.jradius.security.auth;
import java.io.IOException;
import java.util.Map;
import javax.security.auth.Subject;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.NameCallback;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.security.auth.login.CredentialExpiredException;
import javax.security.auth.login.LoginException;
import javax.security.auth.spi.LoginModule;

import net.jradius.client.RadiusClient;
import net.jradius.log.RadiusLog;
import net.jradius.packet.AccessAccept;
import net.jradius.packet.AccessRequest;
import net.jradius.packet.RadiusResponse;
import net.jradius.packet.attribute.AttributeFactory;
import net.jradius.packet.attribute.AttributeList;
import net.jradius.security.JRadiusPrincipal;
public class JRadiusModule implements LoginModule
{
    public boolean login() throws LoginException
    {
        if (callbackHandler == null)
        {
            throw new LoginException("No CallbackHandler for this JRadius LoginModule.");
        }

        if (radiusClient == null)
        {
            try {
				radiusClient = new RadiusClient();
			} catch (Exception e) {
				throw new LoginException();
			}
        }

        NameCallback nameCallback = new NameCallback("User Name: ");
        PasswordCallback passwordCallback = new PasswordCallback("Password: ", true);
        JRadiusCallback radiusCallback = new JRadiusCallback(radiusClient);

        Callback[] callbacks = new Callback[3];
        callbacks[0] = nameCallback;
        callbacks[1] = passwordCallback;
        callbacks[2] = radiusCallback;

        try
        {
            callbackHandler.handle(callbacks);
        }
        catch (IOException ioex)
        {
            throw new LoginException(ioex.getMessage());
        }
        catch (UnsupportedCallbackException uscbex)
        {
            StringBuffer sb = new StringBuffer("Error: Callback ");
            sb.append(uscbex.getCallback().toString());
            sb.append(" not supported.");
            throw new LoginException(sb.toString());
        }

        userName = nameCallback.getName();
        String password = new String(passwordCallback.getPassword());

        try
        {
            AccessRequest request = new AccessRequest(radiusClient, radiusCallback.getAuthAttributes());
            request.addAttribute(AttributeFactory.newAttribute("User-Name", userName, "="));
            request.addAttribute(AttributeFactory.newAttribute("User-Password", password, "="));
            if (debug)
            {
                RadiusLog.debug("Sending:\n" + request.toString());
            }
            RadiusResponse reply = radiusClient.authenticate(request, radiusCallback.getRadiusAuthenticator(), retries);
            if (reply == null) throw new LoginException("no reply from remote RADIUS server");
            if (debug)
            {
                RadiusLog.debug("Received:\n" + reply.toString());
            }
            if (!(reply instanceof AccessAccept)) throw new CredentialExpiredException("authentication failed");
        }
        catch (Exception ioex)
        {
            throw new LoginException(ioex.getMessage());
        }

        authenticated = true;
        return true;
    }
}
TEXT
)

desc(
    lang:'java',
    "safefile://safe.java":<<<TEXT
package net.jradius.security.auth;
import java.io.IOException;
import java.util.Map;
import javax.security.auth.Subject;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.NameCallback;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.security.auth.login.CredentialExpiredException;
import javax.security.auth.login.LoginException;
import javax.security.auth.spi.LoginModule;

import net.jradius.client.RadiusClient;
import net.jradius.log.RadiusLog;
import net.jradius.packet.AccessAccept;
import net.jradius.packet.AccessRequest;
import net.jradius.packet.RadiusResponse;
import net.jradius.packet.attribute.AttributeFactory;
import net.jradius.packet.attribute.AttributeList;
import net.jradius.security.JRadiusPrincipal;
public class JRadiusModule implements LoginModule
{
    public boolean login() throws LoginException
    {
        if (callbackHandler == null)
        {
            throw new LoginException("No CallbackHandler for this JRadius LoginModule.");
        }

        if (radiusClient == null)
        {
            try {
				radiusClient = new RadiusClient();
			} catch (Exception e) {
				throw new LoginException();
			}
        }

        NameCallback nameCallback = new NameCallback("User Name: ");
        PasswordCallback passwordCallback = new PasswordCallback("Password: ", false);
        JRadiusCallback radiusCallback = new JRadiusCallback(radiusClient);

        Callback[] callbacks = new Callback[3];
        callbacks[0] = nameCallback;
        callbacks[1] = passwordCallback;
        callbacks[2] = radiusCallback;

        try
        {
            callbackHandler.handle(callbacks);
        }
        catch (IOException ioex)
        {
            throw new LoginException(ioex.getMessage());
        }
        catch (UnsupportedCallbackException uscbex)
        {
            StringBuffer sb = new StringBuffer("Error: Callback ");
            sb.append(uscbex.getCallback().toString());
            sb.append(" not supported.");
            throw new LoginException(sb.toString());
        }

        userName = nameCallback.getName();
        String password = new String(passwordCallback.getPassword());

        try
        {
            AccessRequest request = new AccessRequest(radiusClient, radiusCallback.getAuthAttributes());
            request.addAttribute(AttributeFactory.newAttribute("User-Name", userName, "="));
            request.addAttribute(AttributeFactory.newAttribute("User-Password", password, "="));
            if (debug)
            {
                RadiusLog.debug("Sending:\n" + request.toString());
            }
            RadiusResponse reply = radiusClient.authenticate(request, radiusCallback.getRadiusAuthenticator(), retries);
            if (reply == null) throw new LoginException("no reply from remote RADIUS server");
            if (debug)
            {
                RadiusLog.debug("Received:\n" + reply.toString());
            }
            if (!(reply instanceof AccessAccept)) throw new CredentialExpiredException("authentication failed");
        }
        catch (Exception ioex)
        {
            throw new LoginException(ioex.getMessage());
        }

        authenticated = true;
        return true;
    }
}
TEXT
)