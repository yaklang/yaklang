desc(
	title: "Check Java Privacy Violation - Shoulder Surfing"
	title_zh: "检查Java隐私泄露 - 肩窥"
	type:security
	risk:'info-exposure'
	level:low
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   该规则检测 Java 代码中是否存在隐私泄露的风险，特别针对 “肩窥”（Shoulder Surfing）这种安全威胁。当使用 `javax.security.auth.callback.PasswordCallback` 类实例化对象时，如果构造函数的第二个参数 `echoOn` 被设置为 `true`，则在用户输入密码时，密码会在屏幕上以明文形式显示。攻击者可以通过直接观察屏幕来获取敏感信息（如密码），从而导致用户凭据泄露。

2. **触发场景**
   当在 Java 应用程序中需要通过 `PasswordCallback` 提示用户输入密码时，如果代码中使用了 `new PasswordCallback("Password: ", true)` 类似的方式进行实例化，即 `echoOn` 参数为 `true`，就会触发此风险。例如，在某些命令行工具或图形界面应用中，如果未正确配置此参数，攻击者在用户输入密码时即可通过肉眼观察到明文密码。

   ```java
   // 存在隐私泄露风险的代码示例
   import javax.security.auth.callback.PasswordCallback;

   public class UnsafePasswordInput {
       public static void main(String[] args) {
           // ... 其他代码
           PasswordCallback passwordCallback = new PasswordCallback("Password: ", true); 
           // ... 处理 callback
       }
   }
   ```
3. **潜在影响**
   - 用户输入的敏感信息（如密码）被窃取。
   - 攻击者利用窃取的凭据进行未经授权的访问或恶意操作。
   - 导致账户被盗用、数据泄露等更严重的安全问题。
DESC
	rule_id: "6f1eb106-9ac3-440f-817d-3701282b74f7"
	solution: <<<SOLUTION
### 修复建议

#### 1. 将 `PasswordCallback` 的 `echoOn` 参数设置为 `false`
   这是最直接且有效的修复方法。通过将 `echoOn` 参数设置为 `false`，可以在用户输入密码时，终端或界面不再显示用户输入的字符，从而防止肩窥。

   ```java
   // 安全的代码示例
   import javax.security.auth.callback.PasswordCallback;

   public class SafePasswordInput {
       public static void main(String[] args) {
           // ... 其他代码
           PasswordCallback passwordCallback = new PasswordCallback("Password: ", false);
           // ... 处理 callback
       }
   }
   ```

#### 2. 考虑使用更安全的密码输入方式
   在某些场景下，可以考虑使用更安全的密码输入机制，例如：
   - 在命令行应用中，使用 `System.console().readPassword()` 方法，它可以屏蔽用户输入。
   - 在图形界面应用中，使用 `JPasswordField` 组件，它会自动隐藏用户输入的字符。
SOLUTION
	reference: <<<REFERENCE
[CWE-1188: Shoulder Surfing](https://cwe.mitre.org/data/definitions/1188.html)
REFERENCE
)

// new PasswordCallback("Password: ", true)
PasswordCallback?{<typeName>?{have:'javax.security.auth.callback.PasswordCallback'}}(,,* as $toCheck);
$toCheck ?{* #{
    include:`* ?{opcode:const && have:'true'} `
}->} as $risk;
alert $risk	for {
	title: "Check Java Privacy Violation - Shoulder Surfing",
	title_zh: "检查Java隐私泄露 - 肩窥",
	level: "low",
	message: "发现Java代码中PasswordCallback方法存在隐私泄露的风险",
}

desc(
	lang:'java'
	alert_num:1
	"file://unsafe.java":<<<TEXT
package net.jradius.security.auth;
import java.io.IOException;
import java.util.Map;
import javax.security.auth.Subject;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.NameCallback;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.security.auth.login.CredentialExpiredException;
import javax.security.auth.login.LoginException;
import javax.security.auth.spi.LoginModule;

import net.jradius.client.RadiusClient;
import net.jradius.log.RadiusLog;
import net.jradius.packet.AccessAccept;
import net.jradius.packet.AccessRequest;
import net.jradius.packet.RadiusResponse;
import net.jradius.packet.attribute.AttributeFactory;
import net.jradius.packet.attribute.AttributeList;
import net.jradius.security.JRadiusPrincipal;
public class JRadiusModule implements LoginModule
{
    public boolean login() throws LoginException
    {
        if (callbackHandler == null)
        {
            throw new LoginException("No CallbackHandler for this JRadius LoginModule.");
        }

        if (radiusClient == null)
        {
            try {
				radiusClient = new RadiusClient();
			} catch (Exception e) {
				throw new LoginException();
			}
        }

        NameCallback nameCallback = new NameCallback("User Name: ");
        PasswordCallback passwordCallback = new PasswordCallback("Password: ", true);
        JRadiusCallback radiusCallback = new JRadiusCallback(radiusClient);

        Callback[] callbacks = new Callback[3];
        callbacks[0] = nameCallback;
        callbacks[1] = passwordCallback;
        callbacks[2] = radiusCallback;

        try
        {
            callbackHandler.handle(callbacks);
        }
        catch (IOException ioex)
        {
            throw new LoginException(ioex.getMessage());
        }
        catch (UnsupportedCallbackException uscbex)
        {
            StringBuffer sb = new StringBuffer("Error: Callback ");
            sb.append(uscbex.getCallback().toString());
            sb.append(" not supported.");
            throw new LoginException(sb.toString());
        }

        userName = nameCallback.getName();
        String password = new String(passwordCallback.getPassword());

        try
        {
            AccessRequest request = new AccessRequest(radiusClient, radiusCallback.getAuthAttributes());
            request.addAttribute(AttributeFactory.newAttribute("User-Name", userName, "="));
            request.addAttribute(AttributeFactory.newAttribute("User-Password", password, "="));
            if (debug)
            {
                RadiusLog.debug("Sending:\n" + request.toString());
            }
            RadiusResponse reply = radiusClient.authenticate(request, radiusCallback.getRadiusAuthenticator(), retries);
            if (reply == null) throw new LoginException("no reply from remote RADIUS server");
            if (debug)
            {
                RadiusLog.debug("Received:\n" + reply.toString());
            }
            if (!(reply instanceof AccessAccept)) throw new CredentialExpiredException("authentication failed");
        }
        catch (Exception ioex)
        {
            throw new LoginException(ioex.getMessage());
        }

        authenticated = true;
        return true;
    }
}
TEXT
)

desc(
	lang:'java'
	"safefile://safe.java":<<<TEXT
package net.jradius.security.auth;
import java.io.IOException;
import java.util.Map;
import javax.security.auth.Subject;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.NameCallback;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.security.auth.login.CredentialExpiredException;
import javax.security.auth.login.LoginException;
import javax.security.auth.spi.LoginModule;

import net.jradius.client.RadiusClient;
import net.jradius.log.RadiusLog;
import net.jradius.packet.AccessAccept;
import net.jradius.packet.AccessRequest;
import net.jradius.packet.RadiusResponse;
import net.jradius.packet.attribute.AttributeFactory;
import net.jradius.packet.attribute.AttributeList;
import net.jradius.security.JRadiusPrincipal;
public class JRadiusModule implements LoginModule
{
    public boolean login() throws LoginException
    {
        if (callbackHandler == null)
        {
            throw new LoginException("No CallbackHandler for this JRadius LoginModule.");
        }

        if (radiusClient == null)
        {
            try {
				radiusClient = new RadiusClient();
			} catch (Exception e) {
				throw new LoginException();
			}
        }

        NameCallback nameCallback = new NameCallback("User Name: ");
        PasswordCallback passwordCallback = new PasswordCallback("Password: ", false);
        JRadiusCallback radiusCallback = new JRadiusCallback(radiusClient);

        Callback[] callbacks = new Callback[3];
        callbacks[0] = nameCallback;
        callbacks[1] = passwordCallback;
        callbacks[2] = radiusCallback;

        try
        {
            callbackHandler.handle(callbacks);
        }
        catch (IOException ioex)
        {
            throw new LoginException(ioex.getMessage());
        }
        catch (UnsupportedCallbackException uscbex)
        {
            StringBuffer sb = new StringBuffer("Error: Callback ");
            sb.append(uscbex.getCallback().toString());
            sb.append(" not supported.");
            throw new LoginException(sb.toString());
        }

        userName = nameCallback.getName();
        String password = new String(passwordCallback.getPassword());

        try
        {
            AccessRequest request = new AccessRequest(radiusClient, radiusCallback.getAuthAttributes());
            request.addAttribute(AttributeFactory.newAttribute("User-Name", userName, "="));
            request.addAttribute(AttributeFactory.newAttribute("User-Password", password, "="));
            if (debug)
            {
                RadiusLog.debug("Sending:\n" + request.toString());
            }
            RadiusResponse reply = radiusClient.authenticate(request, radiusCallback.getRadiusAuthenticator(), retries);
            if (reply == null) throw new LoginException("no reply from remote RADIUS server");
            if (debug)
            {
                RadiusLog.debug("Received:\n" + reply.toString());
            }
            if (!(reply instanceof AccessAccept)) throw new CredentialExpiredException("authentication failed");
        }
        catch (Exception ioex)
        {
            throw new LoginException(ioex.getMessage());
        }

        authenticated = true;
        return true;
    }
}
TEXT
)
