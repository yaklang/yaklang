desc(
	title_zh:"检测Java 日志伪造攻击",
	title:"Check Java Log Forging Attack"
	type:security
	risk:"日志伪造",
	level:low
	description:<<<TEXT
    该规则检测Java应用程序中的日志伪造攻击。日志伪造攻击是指攻击者通过操纵日志记录的输入数据，导致生成的日志信息被篡改或伪造，从而误导系统管理员或安全分析人员。此规则审计了可能受到用户输入影响的日志记录点，特别是那些使用`log.info()`、`log.error()`等方法进行日志记录的点。
TEXT
	solution:<<<TEXT
    在日志记录时，确保对用户输入进行适当的验证和清理，以防止日志伪造攻击。可以使用日志库提供的安全编码功能，或手动对输入数据进行转义和过滤。
TEXT
	rule_id: "235e953b-955c-43bc-9ef8-0e87715330a3"
)

<include("java-servlet-param")> as $source;
<include("java-spring-mvc-param")> as $source;
<include("java-log-record")> as $log;
$log#{include:`* & $source`}-> as $dest;
$dest<getPredecessors> as $sink;

alert $sink for {
    message:"发现可能存在Java 日志伪造攻击",
}

desc(
	lang:java
	alert_num: 2
	"file://demo.java":<<<CODE
import javax.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ParameterProcessor {

    private static final Logger log = LoggerFactory.getLogger(ParameterProcessor.class);

    public void processRequest(HttpServletRequest request) {
        String val = request.getParameter("val");
        int value = 0;

        try {
            value = Integer.parseInt(val);
            log.debug("Successfully parsed value: {}", value);
        } catch (NumberFormatException e) {
            log.error("Failed to parse val = '{}'", val, e);
            // throw new InvalidParameterException("Invalid numeric value: " + val);
        } finally {
        }
    }
}
CODE
)
