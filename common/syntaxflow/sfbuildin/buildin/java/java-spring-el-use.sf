desc(
    title: "Spring EL (SpelExpressionParser) basic use",
    type: audit,
    level: middle,
    desc: <<<TEXT
Spring Expression Language (SpEL) 允许在运行时查询和操作对象图。如果SpelExpressionParser的使用不当，特别是在解析和执行不受信任的表达式时，可能会引发安全漏洞。攻击者可能会利用SpEL表达式注入漏洞，绕过安全限制，执行任意代码或访问敏感数据。因此，审计SpelExpressionParser的使用，确保表达式的来源是可信的，并避免在解析和执行表达式时引入潜在的安全风险，是至关重要的。
TEXT
)


SpelExpressionParser().parseExpression(,* as $params) as $call;
check $call;
check $params;
alert $params;
alert $call;




desc(
    lang: java,
    'file:///speluse.java': <<<USE
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;

public class SpringElExample {
    public static void main(String[] args) {
        ExpressionParser parser = new SpelExpressionParser();
        StandardEvaluationContext context = new StandardEvaluationContext();

        // 设置变量
        context.setVariable("name", "World");

        // 执行EL表达式
        String greeting = parser.parseExpression("'Hello, ' + #name").getValue(context, String.class);
        System.out.println(greeting); // 输出: Hello, World
    }
}
USE
)