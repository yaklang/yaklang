desc(
	title: "SCA: Check Java vaadin-server Vulnerability"
	type: vuln
	risk: sca
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   此规则旨在检测Java项目中引入的 `vaadin-server` 库是否使用了存在已知漏洞的版本。`vaadin-server` 是一个用于构建Web应用程序的Java框架。特定版本的 `vaadin-server` 中存在跨站脚本攻击（XSS）漏洞。XSS 漏洞是由于应用程序未能对用户提供的输入进行充分的过滤或转义，导致恶意脚本被嵌入到网页中并在用户浏览器上执行。攻击者可以利用此漏洞窃取用户的 cookie、会话令牌或其他敏感信息，执行恶意操作，甚至劫持用户会话。

2. **触发场景**
   当应用程序使用了存在漏洞的 `vaadin-server` 版本（例如 7.7.14 及以下版本），并且在生成页面时直接或间接使用了未经验证或转义的用户输入时，攻击者可以通过构造包含恶意脚本的输入触发漏洞。恶意脚本会在访问受影响页面的用户浏览器中执行。

   ```java
   // 示例：假设存在漏洞的vaadin版本中，某个组件直接输出了用户输入
   TextField userInputField = new TextField("Your Input");
   Layout layout = new VerticalLayout(userInputField);
   // ... 在特定操作中，直接将 userInputField 的值显示到页面上，且vaadin版本存在XSS漏洞
   ```
   攻击者可以在 `userInputField` 中输入 `<script>alert('XSS')</script>` 等恶意代码，当其他用户访问包含此组件的页面时，恶意脚本就会执行。

3. **潜在影响**
   - **敏感信息泄露:** 攻击者可以窃取用户的 cookie、会话令牌、登录凭证等信息。
   - **会话劫持:** 攻击者可以使用窃取的会话令牌冒充合法用户进行操作。
   - **内容篡改:** 攻击者可以修改网页内容，进行钓鱼或其他欺诈活动。
   - **恶意软件传播:** 在某些情况下，攻击者可以利用XSS漏洞诱导用户下载或执行恶意软件。
   - **客户端重定向:** 将用户浏览器重定向到恶意网站。

DESC
	rule_id: "90d07a66-fa5c-43f0-a203-1b4c9dcf5c70"
	solution: <<<SOLUTION
### 修复建议

#### 1. 升级 `vaadin-server` 库 

尽快将 `vaadin-server` 库升级到没有已知XSS漏洞的最新安全版本。查阅 Vaadin 的官方安全公告和发布说明，了解修复了该漏洞的具体版本号，并根据您的项目构建工具进行升级。

**使用 Maven:**

在 `pom.xml` 文件中修改 `vaadin-server` 的版本号：

```xml
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-server</artifactId>
    <version>YOUR_SAFE_VERSION</version> <!-- 将 YOUR_SAFE_VERSION 替换为安全版本 -->
</dependency>
```

**使用 Gradle:**

在 `build.gradle` 文件中修改 `vaadin-server` 的版本号：

```gradle
implementation 'com.vaadin:vaadin-server:YOUR_SAFE_VERSION' // 将 YOUR_SAFE_VERSION 替换为安全版本
```

#### 2. 对用户输入进行严格的验证和转义

在任何将用户输入呈现到网页上的地方，都应该对输入进行严格的验证和适当的上下文转义。Vaadin 框架通常会提供内置的安全机制来处理输出转义，但确保您正确使用了这些机制。

*   **输入验证:** 校验用户输入的数据类型、格式、长度等是否符合预期，拒绝或净化不合法的输入。
*   **使用安全的 Vaadin 组件:** 优先使用 Vaadin 提供的标准组件，这些组件通常已经内置了对抗 XSS 的保护措施。
*   **避免直接使用 `Element.setInnerHTML()` 或类似的未经转义的输出方法:** 如果必须直接操作 DOM 或输出 HTML/JavaScript，请务必对数据进行充分的转义，使用 Vaadin 提供的 `Html.escape()` 或其他安全的转义方法。

SOLUTION
	reference: <<<REFERENCE
[CVE-2021-37714](https://nvd.nist.gov/vuln/detail/CVE-2021-37714)
REFERENCE
	title_zh: "SCA: 检测Java vaadin-server依赖漏洞"
)

__dependency__.*vaadin*server.version as $ver;
$ver in (,7.7.14] as $vuln_vaadin_server;
alert $vuln_vaadin_server	for {
	cve: "CVE-2021-37714",
	title: "SCA: Check Java vaadin-server Vulnerability",
	title_zh: "SCA: 检测Java vaadin-server依赖漏洞",
	solution: <<<CODE
### 修复建议

#### 1. 升级 `vaadin-server` 库 

尽快将 `vaadin-server` 库升级到没有已知XSS漏洞的最新安全版本。查阅 Vaadin 的官方安全公告和发布说明，了解修复了该漏洞的具体版本号，并根据您的项目构建工具进行升级。

**使用 Maven:**

在 `pom.xml` 文件中修改 `vaadin-server` 的版本号：

```xml
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-server</artifactId>
    <version>YOUR_SAFE_VERSION</version> <!-- 将 YOUR_SAFE_VERSION 替换为安全版本 -->
</dependency>
```

**使用 Gradle:**

在 `build.gradle` 文件中修改 `vaadin-server` 的版本号：

```gradle
implementation 'com.vaadin:vaadin-server:YOUR_SAFE_VERSION' // 将 YOUR_SAFE_VERSION 替换为安全版本
```

#### 2. 对用户输入进行严格的验证和转义

在任何将用户输入呈现到网页上的地方，都应该对输入进行严格的验证和适当的上下文转义。Vaadin 框架通常会提供内置的安全机制来处理输出转义，但确保您正确使用了这些机制。

*   **输入验证:** 校验用户输入的数据类型、格式、长度等是否符合预期，拒绝或净化不合法的输入。
*   **使用安全的 Vaadin 组件:** 优先使用 Vaadin 提供的标准组件，这些组件通常已经内置了对抗 XSS 的保护措施。
*   **避免直接使用 `Element.setInnerHTML()` 或类似的未经转义的输出方法:** 如果必须直接操作 DOM 或输出 HTML/JavaScript，请务必对数据进行充分的转义，使用 Vaadin 提供的 `Html.escape()` 或其他安全的转义方法。
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   此规则旨在检测Java项目中引入的 `vaadin-server` 库是否使用了存在已知漏洞的版本。`vaadin-server` 是一个用于构建Web应用程序的Java框架。特定版本的 `vaadin-server` 中存在跨站脚本攻击（XSS）漏洞。XSS 漏洞是由于应用程序未能对用户提供的输入进行充分的过滤或转义，导致恶意脚本被嵌入到网页中并在用户浏览器上执行。攻击者可以利用此漏洞窃取用户的 cookie、会话令牌或其他敏感信息，执行恶意操作，甚至劫持用户会话。

2. **触发场景**
   当应用程序使用了存在漏洞的 `vaadin-server` 版本（例如 7.7.14 及以下版本），并且在生成页面时直接或间接使用了未经验证或转义的用户输入时，攻击者可以通过构造包含恶意脚本的输入触发漏洞。恶意脚本会在访问受影响页面的用户浏览器中执行。

   ```java
   // 示例：假设存在漏洞的vaadin版本中，某个组件直接输出了用户输入
   TextField userInputField = new TextField("Your Input");
   Layout layout = new VerticalLayout(userInputField);
   // ... 在特定操作中，直接将 userInputField 的值显示到页面上，且vaadin版本存在XSS漏洞
   ```
   攻击者可以在 `userInputField` 中输入 `<script>alert('XSS')</script>` 等恶意代码，当其他用户访问包含此组件的页面时，恶意脚本就会执行。

3. **潜在影响**
   - **敏感信息泄露:** 攻击者可以窃取用户的 cookie、会话令牌、登录凭证等信息。
   - **会话劫持:** 攻击者可以使用窃取的会话令牌冒充合法用户进行操作。
   - **内容篡改:** 攻击者可以修改网页内容，进行钓鱼或其他欺诈活动。
   - **恶意软件传播:** 在某些情况下，攻击者可以利用XSS漏洞诱导用户下载或执行恶意软件。
   - **客户端重定向:** 将用户浏览器重定向到恶意网站。
CODE
	level: "mid",
	message: "SCA: vaadin-server version 7.7.14 has an XSS vulnerability",
}
