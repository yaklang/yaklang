desc(
    title: "Check The Use Of Broken Or Risky Encryption Algorithm",
    type: vuln,
    level: low,
    risk : "risky_crypt",
)

SecretKeySpec(* as $algorithm);
$algorithm?{have:'DES'||'DESede'||'RC4'||'RC2'} as $sink;
alert $sink for {
    message:"Find the use of broken or risky encryption algorithm",
    type: vuln,
    level:low,
}

desc(
    lang:java,
    alert_min:4,
    'file://unsafe.java':<<<EOF
    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;
    import java.util.Base64;

    public class RC4Cipher {

        private static final String ALGORITHM1 = "RC4";
        private static final String ALGORITHM2 = "RC2";
        private static final String ALGORITHM3 = "DES";
        private static final String ALGORITHM4 = "DESede";


        public static String encrypt1(String key, String data) throws Exception {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM1);
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] encrypted = cipher.doFinal(data.getBytes());
            return Base64.getEncoder().encodeToString(encrypted);
        }

         public static String encrypt2(String key, String data) throws Exception {
                    Cipher cipher = Cipher.getInstance(ALGORITHM);
                    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM2);
                    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                    byte[] encrypted = cipher.doFinal(data.getBytes());
                    return Base64.getEncoder().encodeToString(encrypted);
           }
         public static String encrypt3(String key, String data) throws Exception {
                   Cipher cipher = Cipher.getInstance(ALGORITHM);
                   SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM3);
                   cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                   byte[] encrypted = cipher.doFinal(data.getBytes());
                   return Base64.getEncoder().encodeToString(encrypted);
                  }

          public static String encrypt4(String key, String data) throws Exception {
                 Cipher cipher = Cipher.getInstance(ALGORITHM);
                 SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM4);
                 cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                 byte[] encrypted = cipher.doFinal(data.getBytes());
                 return Base64.getEncoder().encodeToString(encrypted);
           }
        }
    }
EOF
)