desc(
	title_zh: "检测Java javax.crypto.KEM.Encapsulator使用不安全的加密算法"
	title: "Check Java javax.crypto.KEM.Encapsulator The Use Of Broken Or Risky Encryption Algorithm"
	risk:"不安全加密算法",
	reference: <<<REFERENCE
[CWE-327](https://cwe.mitre.org/data/definitions/327.html)
[Oracle 官方文档: javax.crypto.KEM.Encapsulator](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/javax/crypto/KEM.Encapsulator.html)
REFERENCE
	desc: <<<DESCRIPTION
 该规则用于检测Java代码中是否使用了不安全的加密算法。使用已破解或存在风险的加密算法可能会使敏感数据面临泄露的风险。这些算法由于存在已知的漏洞或弱点，可能无法为数据提供足够的安全性。
- 规则审计的类：
    javax.crypto.KEM.Encapsulator
- 规则审计的方法：
    encapsulate()
DESCRIPTION
	rule_id: "99bd33d2-7b63-4980-b70f-33ea3b69f553"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用高强度、现代的加密算法
   避免使用已知的弱加密算法，如 DES、3DES、RC4、RC2 等。优先选择使用被证明安全且目前未被有效破解的现代加密算法，例如：

   *   AES（Advanced Encryption Standard）：推荐使用 AES-128、AES-192 或 AES-256。
   *   ChaCha20-Poly1305 (RFC 7539)：结合流密码 ChaCha20 和消息认证码 Poly1305。
   *   Post-Quantum Cryptography (PQC) 算法：随着量子计算威胁的临近，考虑采用 NIST 标准化的 PQC 算法，如 Dilithium、Kyber 等（如果 JDK 版本支持）。

   ```java
   // 修复代码示例：使用 AES 算法
   import javax.crypto.KEM;
   import java.security.KeyPair;
   import java.security.KeyPairGenerator;
   import java.security.PublicKey;
   import java.security.SecureRandom;

   public class SecureKEMExample {
       public static void main(String[] args) {
           try {
               // 生成密钥对，使用高强度的 RSA 或 EC 算法（KEM 通常搭配非对称算法）
               KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA"); // 或者 "EC"
               keyPairGenerator.initialize(2048); // 推荐 2048 位或更高
               KeyPair keyPair = keyPairGenerator.generateKeyPair();
               PublicKey publicKey = keyPair.getPublic();

               // 创建 KEM 实例，使用高强度的 KEM 算法，如基于 AES 或 PQC 的 KEM 算法
               KEM kem = KEM.getInstance("AES/GCM/NoPadding"); // <-- 修复点：使用安全算法名称

               // 创建封装器
               KEM.Encapsulator encapsulator = kem.newEncapsulator(publicKey);

               // 执行密钥封装
               KEM.Encapsulated encapsulated = encapsulator.encapsulate();

               // 获取封装的密钥和密文
               byte[] encapsulatedKey = encapsulated.key();
               byte[] encapsulatedSecret = encapsulated.encapsulation();

           } catch (Exception e) {
               e.printStackTrace();
           }
       }
   }
   ```

#### 2. 更新 JDK 版本和安全提供者
   确保使用的 Java Development Kit (JDK) 版本是最新的，并且更新了安全提供者（如 Bouncy Castle Provider），以便支持最新的加密算法和协议标准，同时修复已知的漏洞。旧版本的 JDK 或安全提供者可能默认启用或支持不安全的算法。

#### 3. 参考官方文档和行业标准
   查阅 Oracle 官方的 Java Cryptography Architecture (JCA) 文档以及相关的行业标准（如 NIST、RFC），了解当前推荐使用的 KEM 算法和密钥大小，并根据这些推荐来配置应用程序使用的加密算法。

#### 4. 配置应用程序和服务以废弃弱算法
   在应用程序的配置文件、TLS/SSL 配置中，明确禁用所有已知的弱加密算法，只启用强壮的、高强度算法。例如，在配置 TLS 协议时，只允许 TLS 1.2 或 TLS 1.3，并配置安全的加密套件。
SOLUTION
)

KEM?{<typeName>?{have:"avax.crypto.KEM"}}.getInstance(*<slice(index=1)> as $algorithm);

$algorithm#{
    until:`*?{opcode:const && have:/DES|DESede|3DES|TripleDES|ARCFOUR|RC4|RC2/}`
}-> as $sink;

alert $sink	for {
	message: "发现Java代码中使用了不安全的加密算法",
	level: "low",
}

desc(
	lang:java
	alert_num:1
	"file://demo.java":<<<CODE
    import javax.crypto.KEM;
    import java.security.KeyPair;
    import java.security.KeyPairGenerator;
    import java.security.PublicKey;
    import java.security.SecureRandom;

    public class WeakKEMExample {
        public static void main(String[] args) {
            try {
                // 生成密钥对
                KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DES");
                keyPairGenerator.initialize(56); // DES 使用 56 位密钥
                KeyPair keyPair = keyPairGenerator.generateKeyPair();
                PublicKey publicKey = keyPair.getPublic();

                // 创建 KEM 实例
                KEM kem = KEM.getInstance("DES");

                // 创建封装器 - 这里会触发规则检查
                KEM.Encapsulator encapsulator = kem.newEncapsulator(publicKey);

                // 执行密钥封装
                KEM.Encapsulated encapsulated = encapsulator.encapsulate();

                // 获取封装的密钥和密文
                byte[] encapsulatedKey = encapsulated.key();
                byte[] encapsulatedSecret = encapsulated.encapsulation();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
CODE
)
