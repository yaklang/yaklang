desc(
	title_zh: "检测Java Cipher使用不安全或有风险的加密算法"
	title: "Check Java Cipher Weak Encryption Algorithm"
	type: security
	level: low
	risk : '不安全加密算法',
	reference: <<<REFERENCE
[CWE-327: Use of a Broken or Risky Cryptographic Algorithm](https://cwe.mitre.org/data/definitions/327.html)
[Oracle Java SE 8 Dokumentation: SecretKeySpec](https://docs.oracle.com/javase/8/docs/api/javax/crypto/spec/SecretKeySpec.html)
[Oracle Java SE 8 Dokumentation: Cipher](https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html)
REFERENCE
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
使用已破解或存在风险的加密算法（如 DES, 3DES-Ede, ARCFOUR/RC4, RC2）可能会使敏感数据面临泄露的风险。这些算法由于存在已知的漏洞或弱点，计算效率低且安全性低，可能无法为数据提供足够的安全性，且在现代计算能力下容易被暴力破解。

2. **触发场景**
攻击者可能通过分析加密数据、截获通信或利用已知加密算法的弱点来破解使用不安全或有风险算法加密的数据。例如，在文件存储、数据库加密或网络通信中使用这些算法的场景都可能成为攻击目标。

```java
// 存在风险的代码示例
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class WeakCipher {

    private static final String ALGORITHM_DES = "DES/ECB/PKCS5Padding";
    private static final String ALGORITHM_RC4 = "RC4";

    public static String encryptDES(String key, String data) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM_DES);
        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), "DES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        byte[] encrypted = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String encryptRC4(String key, String data) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM_RC4);
        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), "RC4");
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        byte[] encrypted = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }
}
```

3. **潜在影响**
使用弱加密算法可能导致：
- 敏感信息（如用户凭证、隐私数据、商业机密）被轻易解密并泄露。
- 数据完整性被破坏，攻击者可以在不被察觉的情况下修改加密数据。
- 系统或应用因为加密算法的弱点而更容易受到其他类型的密码学攻击。
- 不符合行业标准和合规性要求，导致法律和商业风险。
DESC
	rule_id: "f6e60690-fd58-4130-bef5-ff86b1fd3ec4"
	solution: <<<SOLUTION
### 修复建议

#### 1. 升级到更强的加密算法
建议采用经过时间验证且广泛认可的、具有更高安全强度的对称加密算法，如 AES（高级加密标准）。AES 提供了更长的密钥长度（128, 192 或 256位）和更强的安全性。

```java
// 修复代码示例：使用 AES 加密算法
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.security.Key;

public class SecureCipher {

    private static final String ALGORITHM_AES = "AES/ECB/PKCS5Padding"; // 或者使用其他合适的模式如 CBC, GCM

    public static String encryptAES(String key, String data) throws Exception {
        // 对于 AES 密钥长度通常为 16, 24 或 32 字节 (128, 192, 256 bits)
        // 确保密钥长度正确且安全生成
        Key aesKey = new SecretKeySpec(key.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance(ALGORITHM_AES);
        cipher.init(Cipher.ENCRYPT_MODE, aesKey);
        byte[] encrypted = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }

    // 注意：生产环境密钥应妥善管理，不应硬编码或以不安全的方式存储和传输
}
```

#### 2. 选用合适的加密模式和填充方式
除了算法本身，加密模式（如 CBC, GCM）和填充方式（如 PKCS5Padding, PKCS7Padding）的选择也对安全性至关重要。确保选择适合应用场景的、安全的模式和填充。

#### 3. 安全的密钥管理
加密强度也取决于密钥的安全性。确保密钥的生成、存储、分发和使用都符合安全最佳实践，避免使用弱密钥或重复使用密钥。

#### 4. 及时更新加密库和依赖
使用最新版本的加密库和相关的依赖，以获取最新的安全修复和性能改进。
SOLUTION
)

SecretKeySpec?{<typeName>?{have:'javax.crypto.spec.SecretKeySpec'}}(,* as $algorithm);

$algorithm#{
    until:`* ?{opcode:const && have:/(DES|3?DES((-|_)?ede)?|3DES|TRIPLE(-|_)?DES|ARCFOUR|RC[24])/}`,
}-> as $sink;

alert $sink	for {
	title: "Check Java Cipher Weak Encryption Algorithm",
	title_zh: "检测Java Cipher使用不安全或有风险的加密算法",
	level: "low",
	message: "发现Java代码中使用了不安全的加密算法",
}

desc(
	lang:java
	alert_num:6
	'file://unsafe.java':<<<EOF
    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;
    import java.util.Base64;

    public class RC4Cipher {

        private static final String ALGORITHM = "DES/ECB/PKCS5Padding";
        private static final String ALGORITHM1 = "DES/ECB/PKCS5Padding";
        private static final String ALGORITHM2 = "RC4";
        private static final String ALGORITHM3 = "RC2";
        private static final String ALGORITHM4 = "DES";


        public static String encrypt1(String key, String data) throws Exception {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM1);
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] encrypted = cipher.doFinal(data.getBytes());
            return Base64.getEncoder().encodeToString(encrypted);
        }

         public static String encrypt2(String key, String data) throws Exception {
                    Cipher cipher = Cipher.getInstance(ALGORITHM);
                    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM2);
                    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                    byte[] encrypted = cipher.doFinal(data.getBytes());
                    return Base64.getEncoder().encodeToString(encrypted);
           }
         public static String encrypt3(String key, String data) throws Exception {
                   Cipher cipher = Cipher.getInstance(ALGORITHM);
                   SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM3);
                   cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                   byte[] encrypted = cipher.doFinal(data.getBytes());
                   return Base64.getEncoder().encodeToString(encrypted);
                  }

          public static String encrypt4(String key, String data) throws Exception {
                 Cipher cipher = Cipher.getInstance(ALGORITHM);
                 SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM4);
                 cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                 byte[] encrypted = cipher.doFinal(data.getBytes());
                 return Base64.getEncoder().encodeToString(encrypted);
           }

            private static String encrypt(String algorithm, String key, String data) throws Exception {
                Cipher cipher = Cipher.getInstance(ALGORITHM);
                SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), algorithm);
                cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                byte[] encrypted = cipher.doFinal(data.getBytes());
                return Base64.getEncoder().encodeToString(encrypted);
            }

            private static MessageDigest getDESMessageDigest() throws NoSuchAlgorithmException {
                return encrypt("DES", "key", "data");
            }

            private static MessageDigest get3DESMessageDigest() throws NoSuchAlgorithmException {
                            return encrypt("3"+"DES", "key", "data");
            }
    }
EOF
)
