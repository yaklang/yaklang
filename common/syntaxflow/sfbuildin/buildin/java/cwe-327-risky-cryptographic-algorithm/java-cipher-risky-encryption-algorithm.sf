desc(
    title_zh:"检测Java javax.crypto.Cipher不安全或有风险的加密算法的使用",
    title: "Check Java javax.crypto.Cipher The Use Of Broken Or Risky Encryption Algorithm",
    type: security,
    level: low,
    risk : '不安全加密算法',
    rule_id: 20327002,
    reference: <<<URL
    https://cwe.mitre.org/data/definitions/327.html
    https://docs.oracle.com/javase/8/docs/api/javax/crypto/spec/SecretKeySpec.html
    https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html
URL
    desc: <<<TEXT
使用已破解或存在风险的加密算法可能会使敏感数据面临泄露的风险。这些算法由于存在已知的漏洞或弱点，可能无法为数据提供足够的安全性。建议采用经过时间验证且广泛认可的加密算法，如AES，以确保数据的机密性和完整性。
TEXT
)

SecretKeySpec?{<typeName>?{have:'javax.crypto.spec.SecretKeySpec'}}(,* as $algorithm);

$algorithm#{
    include:`*?{opcode:const}`,
    until:`* ?{have:/3?DES((-|_)?ede)?|TRIPLE(-|_)?DES|RC[24]/}`
    until:`* ?{have:/^(?=RSA)[A-Z0-9_]*(/(ECB|CBC)$|/(ECB|CBC)/(?!OAEPWithSHA.*Padding)|$)/`,
}-> as $sink;

alert $sink for {
    message:"发现Java代码中使用了不安全的加密算法",
}

desc(
    lang:java,
    alert_num:6,
    'file://unsafe.java':<<<EOF
    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;
    import java.util.Base64;

    public class RC4Cipher {

        private static final String ALGORITHM = "DES/ECB/PKCS5Padding";
        private static final String ALGORITHM1 = "DES/ECB/PKCS5Padding";
        private static final String ALGORITHM2 = "RC4";
        private static final String ALGORITHM3 = "RC2";
        private static final String ALGORITHM4 = "DES";


        public static String encrypt1(String key, String data) throws Exception {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM1);
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] encrypted = cipher.doFinal(data.getBytes());
            return Base64.getEncoder().encodeToString(encrypted);
        }

         public static String encrypt2(String key, String data) throws Exception {
                    Cipher cipher = Cipher.getInstance(ALGORITHM);
                    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM2);
                    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                    byte[] encrypted = cipher.doFinal(data.getBytes());
                    return Base64.getEncoder().encodeToString(encrypted);
           }
         public static String encrypt3(String key, String data) throws Exception {
                   Cipher cipher = Cipher.getInstance(ALGORITHM);
                   SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM3);
                   cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                   byte[] encrypted = cipher.doFinal(data.getBytes());
                   return Base64.getEncoder().encodeToString(encrypted);
                  }

          public static String encrypt4(String key, String data) throws Exception {
                 Cipher cipher = Cipher.getInstance(ALGORITHM);
                 SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM4);
                 cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                 byte[] encrypted = cipher.doFinal(data.getBytes());
                 return Base64.getEncoder().encodeToString(encrypted);
           }

            private static String encrypt(String algorithm, String key, String data) throws Exception {
                Cipher cipher = Cipher.getInstance(ALGORITHM);
                SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), algorithm);
                cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                byte[] encrypted = cipher.doFinal(data.getBytes());
                return Base64.getEncoder().encodeToString(encrypted);
            }

            private static MessageDigest getDESMessageDigest() throws NoSuchAlgorithmException {
                return encrypt("DES", "key", "data");
            }

            private static MessageDigest get3DESMessageDigest() throws NoSuchAlgorithmException {
                            return encrypt("3"+"DES", "key", "data");
            }
    }
EOF
)