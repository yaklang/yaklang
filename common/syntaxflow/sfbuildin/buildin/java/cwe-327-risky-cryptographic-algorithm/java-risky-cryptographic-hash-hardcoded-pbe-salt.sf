desc(
	title: "Detect Java Risky Hardcoded PBE Salt"
	title_zh: "检测Java 哈希算法使用硬编码的PBE盐值"
	type: security
	level: low
	risk:'不安全加密算法',
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   PBE（Password-Based Encryption）是一种基于密码的加密算法，通过将用户提供的密码与一个随机的盐（Salt）结合，并经过多次迭代生成加密密钥。盐的目的是为了增加密码的复杂性，防止攻击者通过预先计算的哈希表（如彩虹表）进行破解。硬编码的盐意味着所有使用该代码的用户或系统都共享同一个固定盐值。一旦攻击者获取了该盐值，将极大地降低破解密文所需的时间和计算资源。

2. **触发场景**
   当 Java 代码中使用 `javax.crypto.spec.PBEParameterSpec` 类，并且其构造函数中传入的 `salt` 参数是一个硬编码为常量、字面量数组或未经过随机生成器初始化的 byte 数组时，就会触发此规则。例如：
   ```java
   private static final byte[] FIXED_SALT = { ... }; // 硬编码的盐值
   AlgorithmParameterSpec paramSpec = new PBEParameterSpec(FIXED_SALT, ITERATION_COUNT);
   ```
   在这种情况下，`FIXED_SALT` 的值在编译时就已经确定且无法改变，任何拥有代码或者了解系统内部实现细节的攻击者都可以轻易获得这个盐值。

3. **潜在影响**
   - **降低密码破解难度:** 攻击者可以利用已知的硬编码盐值对截获的密文进行离线攻击，结合弱密码策略，可以大幅度提高破解速度和成功率。
   - **影响系统安全性:** 如果PBE用于加密敏感数据（如用户凭证、秘密密钥、配置文件），硬编码盐值使得这些敏感信息更容易被解密，导致数据泄露、身份冒用等严重安全问题。
   - **违反安全最佳实践:** 硬编码密码学参数违反了机密性和完整性的安全原则，不符合现代加密实践的要求。

### 规则目的

该规则的目的在于识别并标记 Java 项目中使用了硬编码 PBE 盐值的情况，提醒开发者修复这一安全弱点，鼓励使用随机生成的盐值来增强密码学操作的安全性。
DESC
	rule_id: "195c4be8-ab65-4755-9369-67df5911d6b3"
	solution: <<<SOLUTION
### 修复建议

解决硬编码PBE盐值问题的核心是使用随机、唯一的盐值。对于PBE加密的每一次操作，都应该生成一个新的、随机的盐值。

#### 1. 使用安全的随机数生成器生成盐值

在 Java 中，推荐使用 `java.security.SecureRandom` 类来生成加密所需的随机盐值。`SecureRandom` 提供了密码学上强的随机数生成器。
```java
import java.security.SecureRandom;
import javax.crypto.spec.PBEParameterSpec;

private static final int SALT_LENGTH = 8; // 建议盐值长度至少为8字节
private static final int ITERATION_COUNT = 65536; // 增加迭代次数提高安全性

public AlgorithmParameterSpec createPBEParameters(int iterationCount) {
    byte[] salt = new byte[SALT_LENGTH];
    SecureRandom random = new SecureRandom(); // 使用安全的随机数生成器
    random.nextBytes(salt); // 生成随机盐
    return new PBEParameterSpec(salt, iterationCount);
}
```

#### 2. 将盐值与密文一起存储
由于盐值是公开的（不需要保密），并且解密时需要使用与加密时相同的盐值，因此通常将生成的随机盐值与对应的密文一起存储。

#### 3. 增加迭代次数
更高的迭代次数会显著增加密钥派生所需的时间和计算资源，这使得暴力破解更加困难，即使攻击者知道了盐值。现代推荐的迭代次数通常在数万到数十万之间，具体取决于可接受的计算延迟。
SOLUTION
	reference: <<<REFERENCE
[CWE-327: Use of a Broken or Risky Cryptographic Algorithm](https://cwe.mitre.org/data/definitions/327.html)
REFERENCE
)

// AlgorithmParameterSpec paramSpec = new PBEParameterSpec(SALT, ITERATION_COUNT);
PBEParameterSpec?{<typeName>?{have:'javax.crypto.spec.PBEParameterSpec'}}(*<slice(index=1)> as $salt);
// Make元素全部为const那么就认为可能存在硬编码
$salt?{!(.*#{exclude:`* ?{opcode:const}`}->)} as $toCheck;
// salt没有被如random.nextBytes(salt)这样的函数修正过
$toCheck?{!<getCall>?{have:/(?i)(random|next)/}} as $risk

alert $risk for {
	level: "low",
	message: "发现Java代码中使用硬编码的PBE盐值",
	title: "Detect Java Risky Hardcoded PBE Salt",
	title_zh: "检测Java 哈希算法使用硬编码的PBE盐值",
}

desc(
	lang:java
	alert_num:1
	'file://unsafe.java': <<<EOF
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.PBEParameterSpec;
import java.security.spec.AlgorithmParameterSpec;

public class HardcodedSaltExample {

    // 硬编码的盐值
    private static final byte[] SALT = {
        (byte) 0x43, (byte) 0x76, (byte) 0x95, (byte) 0xc7,
        (byte) 0x5b, (byte) 0xd7, (byte) 0x45, (byte) 0x17
    };

    // 硬编码的迭代次数
    private static final int ITERATION_COUNT = 1000;

    public static void main(String[] args) throws Exception {
        // 假设的密码
        char[] password = "secretPassword".toCharArray();

        // 创建PBEKeySpec
        PBEKeySpec keySpec = new PBEKeySpec(password);

        // 获取SecretKeyFactory实例
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");

        // 生成SecretKey
        SecretKey key = keyFactory.generateSecret(keySpec);

        // 创建PBEParameterSpec
        AlgorithmParameterSpec paramSpec = new PBEParameterSpec(SALT, ITERATION_COUNT);

        // 获取Cipher实例
        Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");

        // 初始化Cipher为加密模式
        cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);

        // 加密数据
        byte[] encryptedData = cipher.doFinal("Hello, World!".getBytes());

        // 输出加密后的数据
        System.out.println("Encrypted Data: " + new String(encryptedData));
    }
}
EOF
)

desc(
	lang:java
	'safefile://safe.java': <<<EOF
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.PBEParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Base64;

public class SecureEncryptionExample {

    private static final int SALT_LENGTH = 8;
    private static final int ITERATION_COUNT = 65536;
    private static final int KEY_LENGTH = 256;

    public static void main(String[] args) throws Exception {
        char[] password = "secretPassword".toCharArray();

        // 生成随机盐
        byte[] salt = new byte[SALT_LENGTH];
        SecureRandom random = new SecureRandom();
        random.nextBytes(salt);

        // 使用PBKDF2密钥派生函数
        PBEKeySpec keySpec = new PBEKeySpec(password, salt, ITERATION_COUNT, KEY_LENGTH);
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        byte[] keyBytes = keyFactory.generateSecret(keySpec).getEncoded();
        SecretKey key = new SecretKeySpec(keyBytes, "AES");

        // 初始化加密参数
        AlgorithmParameterSpec paramSpec = new PBEParameterSpec(salt, ITERATION_COUNT);

        // 使用AES加密算法
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);

        byte[] encryptedData = cipher.doFinal("Hello, World!".getBytes());

        // 输出加密数据和盐（用于解密）
        System.out.println("Encrypted Data: " + Base64.getEncoder().encodeToString(encryptedData));
        System.out.println("Salt: " + Base64.getEncoder().encodeToString(salt));
    }
}
EOF
)
