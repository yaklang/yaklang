desc(
	title_zh: "检测Java java.security使用不安全的哈希算法"
	title: "Check Java java.security use of broken or risky hash algorithm"
	type: security
	level: low
	risk : '不安全加密算法',
	reference: <<<REFERENCE
[CWE-327](https://cwe.mitre.org/data/definitions/327.html)
REFERENCE
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   在使用`java.security.MessageDigest`进行哈希计算时，如果指定了已知的不安全或已废弃的哈希算法（如MD2、MD4、MD5、SHA-0、SHA-1、RIPEMD160、SHA等），这些算法由于其固有的密码学弱点，可能存在碰撞、预映像攻击等风险。攻击者可能伪造数据使其具有与原始数据相同的哈希值，从而绕过完整性校验。

2. **触发场景**
   当在 Java 代码中通过 `MessageDigest.getInstance()` 方法使用了不安全的哈希算法时，例如：
   ```java
   import java.security.MessageDigest;
   import java.security.NoSuchAlgorithmException;

   public class UnsafeHashExample {
       public static void main(String[] args) throws NoSuchAlgorithmException {
           // 使用不安全的MD5算法
           MessageDigest md5 = MessageDigest.getInstance("MD5");

           // 使用不安全的SHA-1算法
           MessageDigest sha1 = MessageDigest.getInstance("SHA-1");

           // 使用不安全的MD4算法 (如果JCA提供者支持)
           // MessageDigest md4 = MessageDigest.getInstance("MD4");
       }
   }
   ```

3. **潜在影响**
   * 数据篡改：攻击者可能伪造数据使其具有与原始数据相同的哈希值，从而绕过完整性校验。
   * 密码破解：对于使用不安全哈希算法存储的用户密码，攻击者可能更容易通过彩虹表、碰撞等方式进行破解。
   * 电子签名伪造：如果电子签名使用了不安全哈希算法，签名可能被伪造。

### 风险描述

使用不安全的加密算法，特别是哈希算法，是潜在的安全风险。尽管某些场景下可能只是用于非安全相关的用途（例如，作为唯一的ID），但在涉及数据完整性、身份验证或密钥派生等安全敏感的应用中，使用这些算法将引入严重漏洞。
DESC
	rule_id: "225be977-0ab7-4f04-af7f-b8ba50fb529f"
	solution: <<<SOLUTION
### 修复建议

1. **使用安全的哈希算法**
   替换代码中使用的不安全哈希算法，选用目前被认为是安全的算法，如 SHA-256, SHA-384, SHA-512。
   ```java
   // 修复代码示例
   import java.security.MessageDigest;
   import java.security.NoSuchAlgorithmException;

   public class SafeHashExample {
       public static void main(String[] args) throws NoSuchAlgorithmException {
           // 使用安全的SHA-256算法
           MessageDigest sha256 = MessageDigest.getInstance("SHA-256");

           // 使用安全的SHA-512算法
           MessageDigest sha512 = MessageDigest.getInstance("SHA-512");
       }
   }
   ```
2. **升级安全库或框架**
   确保项目使用的 Java 加密架构 (JCA) 提供者是最新的版本，可能禁用了已知的弱算法。
3. **审视算法使用场景和目的**
   如果哈希算法用于安全敏感的目的（如密码存储、数字签名、完整性校验），必须使用强算法。如果仅用于非安全目的（如简单的唯一标识），可以考虑MD5等，但仍需警惕可能的冲突风险。
4. **对于密码存储，使用加盐（Salting）和迭代（Hashing Iterations）**
   即使使用了安全的哈希算法，对于密码存储，也应该结合随机的盐值（Salting）和足够的迭代次数（Hashing Iterations），进一步增强安全性，抵御彩虹表攻击和暴力破解。
SOLUTION
)

.getInstance?{<typeName>?{have:'java.security'}}(*<slice(index=1)>as $algorithm);
$algorithm#{
    until:`*?{ opcode:const && have:/MD2|MD4|MD5|SHA(-)?1|SHA(-)?0|RIPEMD160|^SHA$/}`,
    exclude:`*?{any:'SHA256','SHA384','SHA512' }`
}-> as $sink;

alert $sink	for {
	level: "low",
	message: "Find the use of broken or risky encryption algorithm",
	title: "Check Java java.security use of broken or risky hash algorithm",
	title_zh: "检测Java java.security使用不安全的哈希算法",
}

desc(
	lang:java
	alert_num:6
	'file://unsafe.java': <<<EOF
     import java.security.MessageDigest;
     import java.security.NoSuchAlgorithmException;
     import java.util.Formatter;
     public class UnsafeHashExample {
          public static String md4(String input) throws NoSuchAlgorithmException {
                             MessageDigest md = MessageDigest.getInstance("MD4");
                             byte[] messageDigest = md.digest(input.getBytes());

                             Formatter formatter = new Formatter();
                             for (byte b : messageDigest) {
                                 formatter.format("%02x", b);
                             }
                             String result = formatter.toString();
                             formatter.close();
                             return result;
                         }
        public static String md5(String input) throws NoSuchAlgorithmException {
                     MessageDigest md = MessageDigest.getInstance("MD5");
                     byte[] messageDigest = md.digest(input.getBytes());

                     Formatter formatter = new Formatter();
                     for (byte b : messageDigest) {
                         formatter.format("%02x", b);
                     }
                     String result = formatter.toString();
                     formatter.close();
                     return result;
                 }
          public static String sha0(String input) throws NoSuchAlgorithmException {
                  MessageDigest md = MessageDigest.getInstance("SHA-0");
                  byte[] messageDigest = md.digest(input.getBytes());

                  Formatter formatter = new Formatter();
                  for (byte b : messageDigest) {
                      formatter.format("%02x", b);
                  }
                  String result = formatter.toString();
                  formatter.close();
                  return result;
              }

         public static String sha1(String input) throws NoSuchAlgorithmException {
             MessageDigest md = MessageDigest.getInstance("SHA-1");
             byte[] messageDigest = md.digest(input.getBytes());

             Formatter formatter = new Formatter();
             for (byte b : messageDigest) {
                 formatter.format("%02x", b);
             }
             String result = formatter.toString();
             formatter.close();
             return result;
         }
         static MessageDigest getDigest(String algorithm) throws ServiceException {
                     try {
                         return MessageDigest.getInstance(algorithm);
                     } catch (NoSuchAlgorithmException e) {
                         throw new ServiceException(e.getMessage());
                     }
                 }
             private static MessageDigest getMd5Digest() throws ServiceException {
                 return getDigest("MD5");
             }
             private static MessageDigest getShaDigest() throws ServiceException {
                 return getDigest("SHA");
             }
              private static MessageDigest getShs256Digest() throws ServiceException {
                              return getDigest("SHA"+"256");
              }

     }
EOF
)
