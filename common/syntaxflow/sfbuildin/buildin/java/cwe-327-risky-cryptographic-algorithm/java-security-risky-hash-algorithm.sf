desc(
    title_zh:"检测Java java.security使用不安全的哈希算法",
    title: "Check Java java.security use of broken or risky hash algorithm",
    type: security,
    level: low,
    risk : '不安全加密算法',
    rule_id: 20327003,
    reference:<<<URL
    https://cwe.mitre.org/data/definitions/327.html
URL
    desc: <<<TEXT
    检测代码中是否使用了已知的不安全或易受攻击的哈希算法。在加密算法中，如果使用了已知的不安全或易受攻击的哈希算法，可能会导致信息泄露、数据篡改等安全问题。建议开发者使用安全的哈希算法，如SHA-256、SHA-3等，避免使用已知的不安全或易受攻击的哈希算法。
TEXT
)

.getInstance?{<typeName>?{have:'java.security'}}(*<slice(index=1)>as $algorithm);
$algorithm#{
    include:`*?{opcode:const}`,
    until:`*?{have:/MD2|MD4|MD5|SHA(-)?1|SHA(-)?0|RIPEMD160|^SHA$/}`,
    exclude:`*?{any:'SHA256','SHA384','SHA512' }`
}-> as $sink;

alert $sink for{
    message:"Find the use of broken or risky encryption algorithm",
    level:low,
}

desc(
    lang:java,
    alert_num:6,
    'file://unsafe.java': <<<EOF
     import java.security.MessageDigest;
     import java.security.NoSuchAlgorithmException;
     import java.util.Formatter;
     public class UnsafeHashExample {
          public static String md4(String input) throws NoSuchAlgorithmException {
                             MessageDigest md = MessageDigest.getInstance("MD4");
                             byte[] messageDigest = md.digest(input.getBytes());

                             Formatter formatter = new Formatter();
                             for (byte b : messageDigest) {
                                 formatter.format("%02x", b);
                             }
                             String result = formatter.toString();
                             formatter.close();
                             return result;
                         }
        public static String md5(String input) throws NoSuchAlgorithmException {
                     MessageDigest md = MessageDigest.getInstance("MD5");
                     byte[] messageDigest = md.digest(input.getBytes());

                     Formatter formatter = new Formatter();
                     for (byte b : messageDigest) {
                         formatter.format("%02x", b);
                     }
                     String result = formatter.toString();
                     formatter.close();
                     return result;
                 }
          public static String sha0(String input) throws NoSuchAlgorithmException {
                  MessageDigest md = MessageDigest.getInstance("SHA-0");
                  byte[] messageDigest = md.digest(input.getBytes());

                  Formatter formatter = new Formatter();
                  for (byte b : messageDigest) {
                      formatter.format("%02x", b);
                  }
                  String result = formatter.toString();
                  formatter.close();
                  return result;
              }

         public static String sha1(String input) throws NoSuchAlgorithmException {
             MessageDigest md = MessageDigest.getInstance("SHA-1");
             byte[] messageDigest = md.digest(input.getBytes());

             Formatter formatter = new Formatter();
             for (byte b : messageDigest) {
                 formatter.format("%02x", b);
             }
             String result = formatter.toString();
             formatter.close();
             return result;
         }
         static MessageDigest getDigest(String algorithm) throws ServiceException {
                     try {
                         return MessageDigest.getInstance(algorithm);
                     } catch (NoSuchAlgorithmException e) {
                         throw new ServiceException(e.getMessage());
                     }
                 }
             private static MessageDigest getMd5Digest() throws ServiceException {
                 return getDigest("MD5");
             }
             private static MessageDigest getShaDigest() throws ServiceException {
                 return getDigest("SHA");
             }
              private static MessageDigest getShs256Digest() throws ServiceException {
                              return getDigest("SHA"+"256");
              }

     }
EOF
)
