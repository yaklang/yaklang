desc(
	title_zh: "检测Java java.security.AlgorithmParameters使用不安全的加密算法"
	title: "Detect Java java.security.AlgorithmParameters Use of Broken or Risky Encryption Algorithm"
	risk:"不安全加密算法",
	reference: <<<REFERENCE
[CWE-327](https://cwe.mitre.org/data/definitions/327.html)
[Java AlgorithmParameters Documentation](https://docs.oracle.com/javase/8/docs/api/java/security/AlgorithmParameters.html)
REFERENCE
	desc: <<<DESCRIPTION
该规则用于检测Java代码中是否使用了不安全的加密算法。使用已破解或存在风险的加密算法可能会使敏感数据面临泄露的风险。这些算法由于存在已知的漏洞或弱点，可能无法为数据提供足够的安全性。
- 规则审计的类：
    java.security.AlgorithmParameters
- 规则审计的方法：
    getInstance()
DESCRIPTION
	rule_id: "fa6435fb-0def-4db7-9201-6223941859d4"
	solution: <<<SOLUTION
### 修复建议

#### 1. 弃用弱加密算法
停止使用被认为不安全或已被破解的加密算法。避免在 `AlgorithmParameters.getInstance()` 方法中指定此类算法。

#### 2. 采用现代强加密算法
改用当前业界推荐的强加密算法，例如高级加密标准（AES）。在选择算法时，应考虑算法的强度、密钥长度、工作模式以及Padding方案。
```java
// 修复代码示例：使用更安全的 AES 算法
import java.security.AlgorithmParameters;

public class SecureAlgorithmParametersExample {
    public static void main(String[] args) {
        try {
            // 使用更安全的 AES 算法，并指定合适的模式和Padding（例如 AES/CBC/PKCS5Padding）
            AlgorithmParameters params = AlgorithmParameters.getInstance("AES"); 
            System.out.println("Using Algorithm: " + params.getAlgorithm());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

#### 3. 保持依赖更新
及时更新Java运行时环境(JRE)以及相关的安全提供者库，以确保使用了最新的、已知无弱点的密码学实现。

#### 4. 安全配置审计
定期审计应用程序中使用的加密算法和配置，确保符合最新的安全标准和最佳实践。
SOLUTION
)

AlgorithmParameters?{<typeName>?{have:"java.security.AlgorithmParameters"}}.getInstance(*<slice(index=1)> as $algorithm);

$algorithm#{
    until:`* ?{opcode:const && have:/DES|DESede|3DES|TripleDES|ARCFOUR|RC4|RC2/}`
}-> as $sink;

alert $sink	for {
	title: "Detect Java java.security.AlgorithmParameters use of broken or risky encryption algorithm",
	title_zh: "检测Java java.security.AlgorithmParameters使用不安全的加密算法",
	level: "low",
	message: "发现Java代码中使用了不安全的加密算法",
}

desc(
	lang:java
	alert_num:1
	"file://demo.java":<<<CODE
    import javax.crypto.spec.IvParameterSpec;
    import java.security.AlgorithmParameters;
    import java.security.SecureRandom;

    public class WeakAlgorithmParametersExample {
        public static void main(String[] args) {
            try {
                // 创建 DES 算法参数实例
                AlgorithmParameters params = AlgorithmParameters.getInstance("DES"); // 使用不安全的 DES 算法

                // 创建初始化向量
                byte[] iv = new byte[8]; // DES 使用 8 字节的初始化向量
                new SecureRandom().nextBytes(iv);
                IvParameterSpec ivSpec = new IvParameterSpec(iv);

                // 初始化算法参数 - 这里会触发规则检查
                params.init(ivSpec);

                // 获取参数编码
                byte[] encodedParams = params.getEncoded();

                // 使用这些参数
                System.out.println("Algorithm: " + params.getAlgorithm());
                System.out.println("Parameter encoding length: " + encodedParams.length);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
CODE
)
