desc(
    title_zh:"检测Java java.security.AlgorithmParameters使用不安全的加密算法",
    title:"Check Java java.security.AlgorithmParameters use of broken or risky encryption algorithm",
    rule_id:10327006
    risk:"不安全加密算法",
    reference:<<<URL
    https://cwe.mitre.org/data/definitions/327.html
    https://docs.oracle.com/javase/8/docs/api/java/security/AlgorithmParameters.html
URL
    description:<<<TEXT
    该规则用于检测Java代码中是否使用了不安全的加密算法。使用已破解或存在风险的加密算法可能会使敏感数据面临泄露的风险。这些算法由于存在已知的漏洞或弱点，可能无法为数据提供足够的安全性。
    - 规则审计的类：
    java.security.AlgorithmParameters
    - 规则审计的方法：
    getInstance()
TEXT
)

AlgorithmParameters?{<typeName>?{have:"java.security.AlgorithmParameters"}}.getInstance(*<slice(index=1)> as $algorithm);

$algorithm#{
    include:`*?{opcode:const}`,
    until:`* ?{have:/DES|DESede|3DES|TripleDES|ARCFOUR|RC4|RC2/}`
}-> as $sink;

alert $sink for {
    message:"发现Java代码中使用了不安全的加密算法",
    level:low,
}

desc{
    lang:java,
    alert_num:1 ,
    "file://demo.java":<<<CODE
    import javax.crypto.spec.IvParameterSpec;
    import java.security.AlgorithmParameters;
    import java.security.SecureRandom;

    public class WeakAlgorithmParametersExample {
        public static void main(String[] args) {
            try {
                // 创建 DES 算法参数实例
                AlgorithmParameters params = AlgorithmParameters.getInstance("DES"); // 使用不安全的 DES 算法

                // 创建初始化向量
                byte[] iv = new byte[8]; // DES 使用 8 字节的初始化向量
                new SecureRandom().nextBytes(iv);
                IvParameterSpec ivSpec = new IvParameterSpec(iv);

                // 初始化算法参数 - 这里会触发规则检查
                params.init(ivSpec);

                // 获取参数编码
                byte[] encodedParams = params.getEncoded();

                // 使用这些参数
                System.out.println("Algorithm: " + params.getAlgorithm());
                System.out.println("Parameter encoding length: " + encodedParams.length);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
CODE
}