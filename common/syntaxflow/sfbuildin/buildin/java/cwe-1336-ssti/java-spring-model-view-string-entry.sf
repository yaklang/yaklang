desc(
    title_zh: "识别到 Java Spring Framework 中处理 ModelAndView 时直接传入 String 类型参数",
    title: "Recognize Java Spring Framework code handling ModelAndView with String type parameter",
    type: audit,
    level: mid,
    risk:ssti,
    desc: <<<TEXT
    在Java Spring Framework中，如果处理ModelAndView时直接传入String类型参数，可能会导致SSTI漏洞。攻击者可以通过构造恶意输入，执行模板注入，进而控制服务器。为了防止SSTI漏洞，需要对用户输入的参数进行严格的过滤，包括验证参数的合法性、长度、字符等，并尽量避免直接将用户输入的参数传递给模板执行函数。
TEXT
)

<include('java-spring-param')>?{<typeName>?{have: "String"}} as $param;
$param<getFunc><getReturns> as $returns;
$returns?{<typeName>?{have: "ModelAndView"}} as $result;
$result.addObject(,,* as $sourceEntry);
$sourceEntry<show> #{
    until: `* & $param as $source`,
}->;
$source<dataflow(exclude=<<<CODE
*?{opcode: call}
CODE)> as $filteredSource
<delete(param)>
alert $filteredSource for {
    message_zh: "识别到 Java Spring Framework 中处理 ModelAndView 时直接传入 String 类型参数",
    message: "Identified Java Spring Framework code handling ModelAndView with String type parameter",
};

desc(
lang: java,
'file://a.java': <<<CODE
package com.ibeetl.admin.console.web;

@Controller
public class OrgConsoleController {
    @GetMapping(MODEL + "/edit.do")
    @Function("org.edit")
    public ModelAndView edit(String id) {
    	ModelAndView view = new ModelAndView("/admin/org/edit.html");
        CoreOrg org = orgConsoleService.queryById(id);
        view.addObject("org", org);
        return view;
    }
    
    @GetMapping(MODEL + "/edit.do")
    @Function("org.edit")
    public ModelAndView edit2(String id) {
    	ModelAndView view = new ModelAndView("/admin/org/edit2.html");
        view.addObject("org", id);
        return view;
    }
}
CODE
)