desc(
	title: "Poor Error Handling: Avoid Catching NullPointerException"
	title_zh: "不当的错误处理：避免捕获 NullPointerException",
	type: "Code Vulnerability"
	severity: "Medium"
	risk: "Moderate"
	cwe: "CWE-397"
	desc: <<<TEXT
在软件开发中，异常处理是确保代码可靠性和安全性的重要机制。然而，捕获 `NullPointerException` 通常不是一个好的做法（对应 CWE-397: Declaration of Throws for Generic Exception）。程序员通常会在以下三种情况下捕获 `NullPointerException`：
1. 程序中存在 `null` 指针间接引用，捕获生成的异常比修复底层问题（如添加 `null` 检查）更容易。
2. 程序显式地抛出 `NullPointerException` 来标记错误状况，而不是使用更合适的异常类型。
3. 代码是测试代码的一部分，捕获 `NullPointerException` 是为了测试特定类的异常输入行为。

在这三种情况中，只有最后一种（测试代码）是可接受的，因为测试代码的目的是模拟各种异常情况。而在生产代码中，捕获 `NullPointerException` 通常意味着代码中存在设计缺陷或未解决的 `null` 指针问题，可能导致程序处于意外或非法状态，进而影响安全性和可靠性。

示例代码（不推荐的做法）：
```java
try {
    mysteryMethod();
} catch (NullPointerException npe) {
    // 空 catch 块，未处理异常
}
```
在上述代码中，捕获了 `NullPointerException`，但未采取任何有意义的处理措施。这种做法掩盖了潜在的 `null` 指针问题，可能导致程序在未预期的状态下继续运行，增加调试难度并可能引入安全漏洞。
TEXT
	solution: <<<TEXT
1. **避免捕获 NullPointerException**：在生产代码中，不应捕获 `NullPointerException`，而应通过代码审查和测试，根除导致 `null` 指针间接引用的根本原因。例如，在访问对象或调用方法之前，添加明确的 `null` 检查。
2. **修复底层问题**：如果无法完全消除 `null` 指针间接引用的可能性，必须仔细检查相关代码，确保妥善处理 `null` 情况，以避免程序进入意外或非法状态。例如，使用条件语句或默认值来处理 `null`。
3. **使用合适的异常类型**：如果程序需要显式抛出异常来标记错误状况，应抛出更合适的异常类型，如 `IllegalArgumentException`、`IllegalStateException` 或自定义的 `RuntimeException` 子类，而不是 `NullPointerException`。
4. **限制捕获范围**：只有在测试代码中，捕获 `NullPointerException` 是可接受的，用于验证被测试类的行为。在这种情况下，应在代码注释中明确说明捕获的原因。
5. **使用静态代码分析工具**：配置静态代码分析工具以检测捕获 `NullPointerException` 的情况，并强制执行异常处理的最佳实践。
6. **代码审查**：在代码审查过程中，重点检查异常处理逻辑，确保未捕获 `NullPointerException`，并验证所有潜在的 `null` 指针问题已被解决。
TEXT
	rule_id: "99ae5b5c-905a-412c-bbbf-a14bfd488563"
)

*?{opcode:catch}.exception as $exception 
$exception?{<typeName()>?{have:/^NullPointerException$/}} as $null_pointer_exception

alert $null_pointer_exception


desc(
	lang:java
	alert_num: 1
	"file://a.java": <<<CODE
package org.joychou.config;
public class WebSocketsProxyEndpoint extends Endpoint {
	public void onMessage2(ByteBuffer b) {
		try {
			process(b, session);
		} catch (NullPointerException eeeeee) {
			eeeeee.printStackTrace();
		}
	}
}
CODE
)

desc(
	lang:java
	"safefile://safe.java": <<<CODE
package org.joychou.config;
public class WebSocketsProxyEndpoint extends Endpoint {
	public void onMessage2(ByteBuffer b) {
		try {
			process(b, session);
		} catch (InvalidClassException eeeeee) {
			eeeeee.printStackTrace();
		}
	}
}
CODE
)
