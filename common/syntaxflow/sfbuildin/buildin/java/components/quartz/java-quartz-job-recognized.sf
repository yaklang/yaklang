desc(
	title: "Audit Java Quartz Job Class Identification"
	title_zh: "审计 Java Quartz Job 类识别"
	type: audit
	severity: mid
	desc: <<<DESC
### 规则目的
Quartz 是一个开源的作业调度框架，用于在 Java 应用程序中定时执行任务。此规则旨在识别 Java 应用程序中实现 `org.quartz.Job` 接口的类，这些类代表了 Quartz 框架中的具体调度任务。识别这些 Job 类的位置对于全面审计 Quartz 作业的配置、逻辑和潜在的安全风险至关重要。

### 规则详细
1. **识别 Job 实现类**
   该规则通过检查类是否实现了 `org.quartz.Job` 接口来 pinpoint 所有 Quartz Job 类。这些类包含了实现 Quartz 调度逻辑的核心代码。

2. **审计焦点**
   识别出 Job 类后，后续的审计工作可以进一步关注这些类的具体实现，例如：
   - **任务逻辑的安全性**：检查 `execute` 方法中的业务逻辑，是否存在 Command Injection, SQL Injection, Path Traversal 等漏洞。
   - **参数处理的安全性**：审计如何从 `JobDataMap` 中获取和使用参数，防止通过 Job 参数注入恶意数据。
   - **依赖与资源访问**：检查 Job 类访问的外部资源（数据库、文件系统、网络服务）是否安全，是否存在权限不足或过度授权的问题。
   - **动态方法调用**：特别关注使用反射机制动态调用方法的场景（如示例代码中的 `Method method = job.getClass().getMethod(methodName); method.invoke(job);`），这可能引入严重的安全风险（如远程代码执行），需要严格控制输入 `methodName` 的来源和合法性。
   - **并发控制**：检查 `@DisallowConcurrentExecution` 等注解的使用是否符合预期，防止并发执行导致的问题。

3. **作为审计基础**
   此规则是 Quartz 框架审计的基础，后续的规则可以基于识别出的 Job 类进一步分析具体的安全脆弱点，例如检测动态方法调用、敏感操作等。
DESC
	rule_id: "dc04c45c-e7e3-484e-8683-2682f0ece312"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
https://www.quartz-scheduler.org/
REFERENCE
)

.execute as $execute;
$execute?{<getObject>.__interface__?{have: 'Job'}} as $jobClass;
check $jobClass;
$jobClass(*<show>);
alert $jobClass for {
	title: "Audit Java Quartz Job Class Identification",
	title_zh: "审计 Java Quartz Job 类识别",
	level: "mid",
	message: " Found Java Quartz Job Class",
}

desc(
	lang: java
	'file://demo.java': <<<EOF
package com.itstyle.quartz.job;

import com.itstyle.quartz.entity.*;
import com.itstyle.quartz.service.IDetailsBeanService;
import com.itstyle.quartz.service.IMogudingService;
import com.itstyle.quartz.service.ISignInLogService;
import com.itstyle.quartz.service.IUserinfoService;
import com.itstyle.quartz.utils.ApplicationContextUtil;
import com.itstyle.quartz.utils.DateUtil;
import org.quartz.*;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;

 /*
 * @DisallowConcurrentExecution 保证上一个任务执行完后，再去执行下一个任务，这里的任务是同一个任务
 */
@DisallowConcurrentExecution
public class ChickenJob implements Job, Serializable {

    private static final long serialVersionUID = 1L;

    @Override
    public void execute(JobExecutionContext context) {
        JobDetail jobDetail = context.getJobDetail();
        JobDataMap dataMap = jobDetail.getJobDataMap();
        /**
         * 获取任务中保存的方法名字，动态调用方法
         */
        String methodName = dataMap.getString("jobMethodName");
        try {
            ChickenJob job = new ChickenJob();
            Method method = job.getClass().getMethod(methodName);
            method.invoke(job);
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
    }
}
EOF
)
