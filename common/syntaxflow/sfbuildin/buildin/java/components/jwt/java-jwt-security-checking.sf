desc(
	title: "Check Java JWT Security Problem"
	title_zh: "检查 Java JWT 安全问题"
	type: vuln
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
JWT（JSON Web Tokens）是一种用于在各方之间安全传输信息的开放标准。尽管 JWT 本身是格式化的，但其安全性依赖于正确的使用和配置。本规则检测 Java 应用中在使用 JWT 时可能导致的安全漏洞，主要包括：
- **不安全的解析方法（Unsafe Parsing）**：一些 JWT 库允许使用不安全的解析方法，例如直接调用 `Jwts.parser().setSigningKey().parse()` 方法，而没有对签名算法进行严格验证。这使得攻击者可能通过修改 JWT 的 header，将签名算法改为 `none` 或其他弱算法，从而伪造合法的 JWT，绕过身份验证和授权。
- **硬编码密钥（Hardcoded Keys）**：将用于签名和验证 JWT 的密钥直接硬编码在代码中，极易被泄露。一旦密钥泄露，攻击者就可以轻松地伪造有效的 JWT，从而窃取敏感信息、获取未授权访问权限或执行其他恶意操作。
- **不安全的密钥管理（Insecure Key Management）**：从不安全或易于访问的位置（如未加密的配置文件、环境变量以外的非安全存储）获取 JWT 密钥。这增加了密钥被未经授权访问的风险，与硬编码密钥类似，可能导致密钥泄露和相关的安全漏洞。

2. **触发场景**
这些漏洞通常在使用 `io.jsonwebtoken` 等 JWT 库处理 JWT 的解析、签名和验证过程中产生。例如：
- 直接使用 `Jwts.parser().setSigningKey(SigningKey).parse(token)` 而未对 JWT 的 header 进行额外的验证。
- 将密钥定义为代码中的常量字符串，如 `private static final String JWT_PASSWORD = "your_secret_key";`。
- 从不安全的配置文件或环境变量中读取密钥。

以下为存在硬编码密钥的示例代码：
```java
package org.owasp.aaa;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwt;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.impl.TextCodec;

public class JWTVotesEndpoint extends AssignmentEndpoint {
    private static final String JWT_PASSWORD = "bm5n3SkxCX4kKRy4"; // 硬编码的JWT密钥
}
```

3. **潜在影响**
这些 JWT 安全问题可能导致严重的后果，包括：
- **身份验证绕过（Authentication Bypass）**：攻击者可以伪造有效的 JWT，无需提供正确的凭证即可访问受保护的资源或API。
- **授权绕过（Authorization Bypass）**：攻击者可以修改 JWT 中的权限信息，获得超出其应有权限的访问能力。
- **数据泄露或篡改**：攻击者可以通过伪造 JWT 获取或修改敏感数据。

总而言之，不当的 JWT 使用可能严重破坏应用程序的安全性，允许攻击者获取未授权访问和控制。
DESC
	rule_id: "98a8cf55-3355-463f-ad5d-9bbe8349e6c6"
	solution: <<<SOLUTION
### 修复建议

#### 1. 强制验证签名算法
在解析 JWT 时，务必验证其签名算法是否为预期的安全强度算法（如 HS256, RS256 等），拒绝使用 `none` 或其他弱算法签名的 JWT。
```java
// 修复代码示例：明确指定允许的签名算法
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

import java.security.Key;

public class JwtValidator {
    private final Key signingKey;

    public JwtValidator(String base64Secret) {
        this.signingKey = Keys.hmacShaKeyFor(base64Secret.getBytes());
    }

    public Claims validateToken(String token) throws JwtException {
        return Jwts.parserBuilder()
                   .setSigningKey(signingKey)
                   .requireSignatureAlgorithm(SignatureAlgorithm.HS256) // 强制指定签名算法
                   .build()
                   .parseClaimsJws(token)
                   .getBody;
    }
}
```

#### 2. 安全管理密钥
避免在代码中硬编码密钥。密钥应存储在安全的位置，例如：
- **环境变量**：在应用程序外部配置密钥，避免将其直接包含在源代码中。
- **秘钥管理服务（KMS）**：使用专业的云服务或内部系统来安全地存储、管理和轮换密钥。
- **安全配置文件**：将密钥存储在受适当权限保护的配置文件中，并确保文件不被意外泄露。
```java
// 修复代码示例：从环境变量读取密钥
public class JwtService {
    private static final String JWT_SECRET = System.getenv("JWT_SECRET_KEY"); // 从环境变量获取密钥
}
```

#### 3. 验证 JWT 的 Claims
除了签名验证外，还应验证 JWT 的其他 Claims，例如：
- **过期时间 (exp)**：确保 JWT 未过期。
- **发行者 (iss)**：验证 JWT 的发行者是否可信。
- **接收者 (aud)**：验证 JWT 的intended audience 是否是当前应用。
- **主题 (sub)**：验证 JWT 的主题。
```java
// 修复代码示例：验证 JWT claims
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;

import java.security.Key;
import java.util.Date;

public class JwtValidator {
    private final Key signingKey;
    private final String expectedIssuer = "your_issuer";
    private final String expectedAudience = "your_audience";

    public JwtValidator(String base64Secret) {
        this.signingKey = Keys.hmacShaKeyFor(base64Secret.getBytes());
    }

    public Claims validateToken(String token) throws JwtException {
        Claims claims = Jwts.parserBuilder()
                           .setSigningKey(signingKey)
                           .build()
                           .parseClaimsJws(token)
                           .getBody;

        if (claims.getExpiration() != null && claims.getExpiration().before(new Date())) {
            throw new JwtException("JWT has expired");
        }
        if (!expectedIssuer.equals(claims.getIssuer())) {
            throw new JwtException("Invalid JWT issuer");
        }
        if (!claims.getAudience().contains(expectedAudience)) {
             throw new JwtException("Invalid JWT audience");
        }

        return claims;
    }
}
```
SOLUTION
	reference: <<<REFERENCE
[OWASP JWT Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html)
[CWE-287: Improper Authentication](https://cwe.mitre.org/data/definitions/287.html)
[io.jsonwebtoken Documentation](https://github.com/jwtk/jjwt)
REFERENCE
)

Jwts?{<typeName>?{have: 'io.jsonwebtoken'}} as $jwt;
check $jwt;
$jwt.parser().setSigningKey().parse() as $riskParse;

alert $riskParse for {
	title_zh: "检查 Java JWT 不安全的解析方法",
	type: "vuln",
	title: "Check Java JWT Unsafe Parse Method",
	solution: <<<CODE
### 修复建议

#### 1. 强制验证签名算法

在解析 JWT 时，务必验证其签名算法是否为预期的安全强度算法（如 HS256, RS256 等），拒绝使用 `none` 或其他弱算法签名的 JWT。

```java
// 修复代码示例：明确指定允许的签名算法
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

import java.security.Key;

public class JwtValidator {
    private final Key signingKey;

    public JwtValidator(String base64Secret) {
        this.signingKey = Keys.hmacShaKeyFor(base64Secret.getBytes());
    }

    public Claims validateToken(String token) throws JwtException {
        return Jwts.parserBuilder()
                   .setSigningKey(signingKey)
                   .requireSignatureAlgorithm(SignatureAlgorithm.HS256) // 强制指定签名算法
                   .build()
                   .parseClaimsJws(token)
                   .getBody;
    }
}
```
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
JWT（JSON Web Tokens）是一种用于在各方之间安全传输信息的开放标准。尽管 JWT 本身是格式化的，但其安全性依赖于正确的使用和配置。本规则检测 Java 应用中在使用 JWT 时可能导致的安全漏洞，主要包括：
- **不安全的解析方法（Unsafe Parsing）**：一些 JWT 库允许使用不安全的解析方法，例如直接调用 `Jwts.parser().setSigningKey().parse()` 方法，而没有对签名算法进行严格验证。这使得攻击者可能通过修改 JWT 的 header，将签名算法改为 `none` 或其他弱算法，从而伪造合法的 JWT，绕过身份验证和授权。

2. **触发场景**
这些漏洞通常在使用 `io.jsonwebtoken` 等 JWT 库处理 JWT 的解析、签名和验证过程中产生。例如：
- 直接使用 `Jwts.parser().setSigningKey(SigningKey).parse(token)` 而未对 JWT 的 header 进行额外的验证。

3. **潜在影响**
这些 JWT 安全问题可能导致严重的后果，包括：
- **身份验证绕过（Authentication Bypass）**：攻击者可以伪造有效的 JWT，无需提供正确的凭证即可访问受保护的资源或API。
- **授权绕过（Authorization Bypass）**：攻击者可以修改 JWT 中的权限信息，获得超出其应有权限的访问能力。
- **数据泄露或篡改**：攻击者可以通过伪造 JWT 获取或修改敏感数据。

总而言之，不当的 JWT 使用可能严重破坏应用程序的安全性，允许攻击者获取未授权访问和控制。
CODE
	level: "mid",
	risk: "auth-bypass",
	message: "JWT uses the unsafe parse method",
	message_zh: "JWT 使用了不安全的 parse 方法",
}

.signWith?{<typeName>?{have:'io.jsonwebtoken'}}(,,*  as $key)
$key?{opcode:const} as $simpleKey;
$key?{opcode: call && <getCallee>?{<getObject><name>?{have:base64 || BASE64  || Base64}}(*<slice(index=1)>*?{opcode: const}<var(base64EncodedKey)>) } as $sink;
$simpleKey + $base64EncodedKey as $hardcodedKey;
alert $hardcodedKey for {
	message_zh: "JWT 使用了硬编码的密钥",
	title_zh: "检查 Java JWT 硬编码的密钥",
	solution: <<<CODE
### 修复建议

#### 1. 安全管理密钥

避免在代码中硬编码密钥。密钥应存储在安全的位置，例如：
- **环境变量**：在应用程序外部配置密钥，避免将其直接包含在源代码中。
- **秘钥管理服务（KMS）**：使用专业的云服务或内部系统来安全地存储、管理和轮换密钥。
- **安全配置文件**：将密钥存储在受适当权限保护的配置文件中，并确保文件不被意外泄露。

```java
// 修复代码示例：从环境变量读取密钥
public class JwtService {
    private static final String JWT_SECRET = System.getenv("JWT_SECRET_KEY"); // 从环境变量获取密钥

    // ... 其他代码使用 JWT_SECRET
}
```
CODE
	level: "high",
	message: "JWT uses the hardcoded key",
	risk: "auth-bypass",
	title: "Check Java JWT Hardcoded Key",
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
JWT（JSON Web Tokens）是一种用于在各方之间安全传输信息的开放标准。尽管 JWT 本身是格式化的，但其安全性依赖于正确的使用和配置。本规则检测 Java 应用中在使用 JWT 时可能导致的安全漏洞，主要包括：
- **硬编码密钥（Hardcoded Keys）**：将用于签名和验证 JWT 的密钥直接硬编码在代码中，极易被泄露。一旦密钥泄露，攻击者就可以轻松地伪造有效的 JWT，从而窃取敏感信息、获取未授权访问权限或执行其他恶意操作。

2. **触发场景**
这些漏洞通常在使用 `io.jsonwebtoken` 等 JWT 库处理 JWT 的解析、签名和验证过程中产生。例如：
- 将密钥定义为代码中的常量字符串，如 `private static final String JWT_PASSWORD = "your_secret_key";`。

以下为存在硬编码密钥的示例代码：
```java
package org.owasp.aaa;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwt;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.impl.TextCodec;

// ... 其他导入和类定义

public class JWTVotesEndpoint extends AssignmentEndpoint {
    private static final String JWT_PASSWORD = "bm5n3SkxCX4kKRy4"; // 硬编码的JWT密钥
    // ... 其他代码
}
```

3. **潜在影响**
这些 JWT 安全问题可能导致严重的后果，包括：
- **身份验证绕过（Authentication Bypass）**：攻击者可以伪造有效的 JWT，无需提供正确的凭证即可访问受保护的资源或API。
- **授权绕过（Authorization Bypass）**：攻击者可以修改 JWT 中的权限信息，获得超出其应有权限的访问能力。
- **数据泄露或篡改**：攻击者可以通过伪造 JWT 获取或修改敏感数据。

总而言之，不当的 JWT 使用可能严重破坏应用程序的安全性，允许攻击者获取未授权访问和控制。
CODE
	type: "vuln",
}

alert $sink for {
	message_zh: "JWT 使用了不安全的密钥",
	type: "vuln",
	title: "Check Java JWT Insecure Key Usage",
	solution: <<<CODE
### 修复建议

#### 1. 安全管理密钥

避免在代码中硬编码密钥。密钥应存储在安全的位置，例如：
- **环境变量**：在应用程序外部配置密钥，避免将其直接包含在源代码中。
- **秘钥管理服务（KMS）**：使用专业的云服务或内部系统来安全地存储、管理和轮换密钥。
- **安全配置文件**：将密钥存储在受适当权限保护的配置文件中，并确保文件不被意外泄露。

```java
// 修复代码示例：从环境变量读取密钥
public class JwtService {
    private static final String JWT_SECRET = System.getenv("JWT_SECRET_KEY"); // 从环境变量获取密钥

    // ... 其他代码使用 JWT_SECRET
}
```
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
JWT（JSON Web Tokens）是一种用于在各方之间安全传输信息的开放标准。尽管 JWT 本身是格式化的，但其安全性依赖于正确的使用和配置。本规则检测 Java 应用中在使用 JWT 时可能导致的安全漏洞，主要包括：
- **不安全的密钥管理（Insecure Key Management）**：从不安全或易于访问的位置（如未加密的配置文件、环境变量以外的非安全存储）获取 JWT 密钥。这增加了密钥被未经授权访问的风险，与硬编码密钥类似，可能导致密钥泄露和相关的安全漏洞。

2. **触发场景**
这些漏洞通常在使用 `io.jsonwebtoken` 等 JWT 库处理 JWT 的解析、签名和验证过程中产生。例如：
- 从不安全的配置文件或环境变量中读取密钥。

3. **潜在影响**
这些 JWT 安全问题可能导致严重的后果，包括：
- **身份验证绕过（Authentication Bypass）**：攻击者可以伪造有效的 JWT，无需提供正确的凭证即可访问受保护的资源或API。
- **授权绕过（Authorization Bypass）**：攻击者可以修改 JWT 中的权限信息，获得超出其应有权限的访问能力。
- **数据泄露或篡改**：攻击者可以通过伪造 JWT 获取或修改敏感数据。

总而言之，不当的 JWT 使用可能严重破坏应用程序的安全性，允许攻击者获取未授权访问和控制。
CODE
	level: "mid",
	message: "JWT uses the unsafe key",
	title_zh: "检查 Java JWT 不安全的密钥使用",
	risk: "auth-bypass",
}

desc(
	alert_min: 2
	lang:java
	"file://JWTSecurity.java": <<<EOF
package org.owasp.aaa;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwt;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.impl.TextCodec;


public class JWTVotesEndpoint extends AssignmentEndpoint {
    private static final String JWT_PASSWORD = "bm5n3SkxCX4kKRy4";
    public static final String[] SECRETS = {
            "victory", "business", "available", "shipping", "washington"
    };
    public static final String JWT_SECRET =
            TextCodec.BASE64.encode(SECRETS[new Random().nextInt(SECRETS.length)]);
    @GetMapping("/JWT/votings")
    @ResponseBody
    public MappingJacksonValue getVotes(
            @CookieValue(value = "access_token", required = false) String accessToken) {
        MappingJacksonValue value =
                new MappingJacksonValue(
                        votes.values().stream()
                                .sorted(comparingLong(Vote::getAverage).reversed())
                                .collect(toList()));
        if (StringUtils.isEmpty(accessToken)) {
            value.setSerializationView(Views.GuestView.class);
        } else {
            try {
                Jwt jwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parse(accessToken);
                Claims claims = (Claims) jwt.getBody();
                String user = (String) claims.get("user");
                if ("Guest".equals(user) || !validUsers.contains(user)) {
                    value.setSerializationView(Views.GuestView.class);
                } else {
                    value.setSerializationView(Views.UserView.class);
                }
            } catch (JwtException e) {
                value.setSerializationView(Views.GuestView.class);
            }
        }
        return value;
    }

    private Map<String, Object> createNewTokens(String user) {
        Map<String, Object> claims = Map.of("admin", "false", "user", user);
        String token =
                Jwts.builder()
                        .setIssuedAt(new Date(System.currentTimeMillis() + TimeUnit.DAYS.toDays(10)))
                        .setClaims(claims)
                        .signWith(io.jsonwebtoken.SignatureAlgorithm.HS512, JWT_PASSWORD)
                        .compact();
        Map<String, Object> tokenJson = new HashMap<>();
        String refreshToken = RandomStringUtils.randomAlphabetic(20);
        validRefreshTokens.add(refreshToken);
        tokenJson.put("access_token", token);
        tokenJson.put("refresh_token", refreshToken);
        return tokenJson;
    }

    @RequestMapping(path = "/JWT/secret/gettoken", produces = MediaType.TEXT_HTML_VALUE)
    @ResponseBody
    public String getSecretToken() {
        return Jwts.builder()
                .setIssuer("WebGoat Token Builder")
                .setAudience("webgoat.org")
                .setIssuedAt(Calendar.getInstance().getTime())
                .setExpiration(Date.from(Instant.now().plusSeconds(60)))
                .setSubject("tom@webgoat.org")
                .claim("username", "Tom")
                .claim("Email", "tom@webgoat.org")
                .claim("Role", new String[] {"Manager", "Project Administrator"})
                .signWith(SignatureAlgorithm.HS256, JWT_SECRET)
                .compact();
    }
}
EOF
)


