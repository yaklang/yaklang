desc(
	title_zh: "SCA: 检测Java xlsx-streamer依赖漏洞"
	title: "SCA: Check Java xlsx-streamer Vulnerability"
	type: vuln
	level: high
	harm_zh: "此漏洞可能导致 XML 外部实体注入（XXE）、内存溢出（OOM）或拒绝服务（DoS）攻击。如果直接使用 xlsx-streamer 库的 StreamingReader.builder().open() 方法解析来自用户的不可信输入流，且未进行安全过滤，攻击者可以构造恶意 XLSX 文件触发安全缺陷。同时，使用低于 1.2.0 的 xlsx-streamer 版本存在已知漏洞，可能被恶意文件利用。",
	harm: "This vulnerability may lead to XXE, OOM, or DoS attacks. Directly parsing untrusted input streams with xlsx-streamer's StreamingReader.builder().open() without proper validation can allow attackers to craft malicious XLSX files to exploit security flaws. Versions below 1.2.0 also have known vulnerabilities exploitable by malicious files."
	fix_zh: "建议在解析 XLSX 文件前对输入进行严格的类型、大小、内容校验，避免直接解析不可信数据；同时升级 xlsx-streamer 至 1.2.0 及以上版本以修复已知漏洞。",
	fix: <<<FIX
修复建议：
1. 升级依赖至安全版本（至少 1.2.0）：
```xml
<dependency>
    <groupId>com.monitorjbl</groupId>
    <artifactId>xlsx-streamer</artifactId>
    <version>1.2.0</version>
</dependency>
	2.	在调用 StreamingReader.builder().open() 前，对输入流进行类型、大小、内容校验。
	3.	对上传文件进行白名单校验（扩展名、MIME 类型、文件头 Magic Number）。
	4.	限制内存和解析时间，防止拒绝服务攻击。
FIX
	rule_id: "cd3632dd-a25c-49c4-bf53-7f53fc7610ae"
	desc: <<<DESC
### 漏洞描述
1. **漏洞原理**
XML外部实体注入（XXE）是由于应用程序在解析XML文件时未禁用外部实体的加载，攻击者可以通过构造恶意的XML文档访问服务器上的敏感文件、执行远程代码或导致拒绝服务。xlsx-streamer库作为处理Excel XLSX文件的工具，如果直接解析不受信任的输入流且缺乏安全过滤机制，则可能成为XXE攻击的目标。
2. **触发场景**
```java
import com.monitorjbl.xlsx.StreamingReader;
import java.io.InputStream;
InputStream untrustedInput = request.getInputStream();
StreamingReader.builder().open(untrustedInput); // 直接解析用户输入流
```
在上述代码中，如果用户上传了一个包含恶意DTD声明的XLSX文件，可能导致XXE漏洞，进而泄露系统敏感信息或引发其他安全问题。
3. **潜在影响**
- 攻击者可以读取服务器上的任意文件（例如`/etc/passwd`）。
- 可能被利用进行服务器端请求伪造（SSRF）。
- 引发内存溢出（OOM）或拒绝服务（DoS），影响系统稳定性。
- 使用低于1.2.0版本的xlsx-streamer还存在已知漏洞，进一步扩大风险面。
DESC
	reference: <<<REFERENCE
[CWE-611](https://cwe.mitre.org/data/definitions/611.html)
[OWASP XXE Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)
REFERENCE
	cwe: 611
)

<include('java-spring-mvc-param')> as $entry;
<include('java-servlet-param')> as $entry;

StreamingReader?{<typeName>?{have:"com.monitorjbl.xlsx.StreamingReader"}}.builder().open(* as $xssinput)
$xssinput#{
    until: '* & $entry',
    exclude: "*?{opcode:phi}"
}->as $result

alert $result for {
	level: "mid",
	title: "Java xlsx-streamer Parsing Vulnerability Was Detected",
	title_zh: "检测到Java xlsx-streamer解析漏洞",
	message: "检测到直接使用 xlsx-streamer 解析用户输入流，可能导致 XXE、OOM 或拒绝服务等风险。",
	solution: <<<SOLUTION
### 修复建议
1. **升级依赖至安全版本（至少 1.2.0）**
```xml
<dependency>
<groupId>com.monitorjbl</groupId>
<artifactId>xlsx-streamer</artifactId>
<version>1.2.0</version>
</dependency>
```
2. **在调用 StreamingReader.builder().open() 前，对输入流进行类型、大小、内容校验。**
3. **对上传文件进行白名单校验（扩展名、MIME 类型、文件头 Magic Number）。**
4. **限制内存和解析时间，防止拒绝服务攻击。**
SOLUTION
	risk: "XXE",
	name: "result",
	desc: <<<DESC
### 漏洞描述
1. **漏洞原理**
XML外部实体注入（XXE）是由于应用程序在解析XML文件时未禁用外部实体的加载，攻击者可以通过构造恶意的XML文档访问服务器上的敏感文件、执行远程代码或导致拒绝服务。xlsx-streamer库作为处理Excel XLSX文件的工具，如果直接解析不受信任的输入流且缺乏安全过滤机制，则可能成为XXE攻击的目标。
2. **触发场景**
```java
import com.monitorjbl.xlsx.StreamingReader;
import java.io.InputStream;
InputStream untrustedInput = request.getInputStream();
StreamingReader.builder().open(untrustedInput); // 直接解析用户输入流
```
在上述代码中，如果用户上传了一个包含恶意DTD声明的XLSX文件，可能导致XXE漏洞，进而泄露系统敏感信息或引发其他安全问题。
3. **潜在影响**
- 攻击者可以读取服务器上的任意文件（例如`/etc/passwd`）。
- 可能被利用进行服务器端请求伪造（SSRF）。
- 引发内存溢出（OOM）或拒绝服务（DoS），影响系统稳定性。
- 使用低于1.2.0版本的xlsx-streamer还存在已知漏洞，进一步扩大风险面。
DESC
}

__dependency__.*xlsx*streamer*.version as $ver;
$ver in (,1.2.0] as $vuln_xlsx;

check $vuln_xlsx

alert $vuln_xlsx for {
	level: "high",
	solution: <<<SOLUTION
### 修复建议
1. **升级依赖至安全版本（至少 1.2.0）：**
```xml
<dependency>
<groupId>com.monitorjbl</groupId>
<artifactId>xlsx-streamer</artifactId>
<version>1.2.0</version>
</dependency>
```
2. **检查并测试升级后的版本是否完全兼容当前项目环境。**
3. **参考官方文档或安全公告以获取更多信息。**
SOLUTION
	title: "SCA: Java xlsx-streamer Dependency Vulnerability Was Detected",
	title_zh: "SCA: 检测到Java xlsx-streamer依赖漏洞",
	message: "检测到使用的 xlsx-streamer 版本低于 1.2.0，存在已知安全漏洞，请尽快升级。",
	risk: "SCA",
	name: "vuln_xlsx",
	desc: <<<DESC
该规则用于检测xlsx-streamer依赖是否低于1.2.0版本，若低于1.2.0则可能存在已知的安全缺陷，包括但不限于XXE、内存溢出（OOM）、拒绝服务（DoS）等风险。建议升级至最新稳定版本以消除隐患。
DESC
}

desc(
	lang:java
	alert_num:2
	"file://demo.java":<<<CODE
    package org.joychou.controller.othervulns;

    import com.monitorjbl.xlsx.StreamingReader;

    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.multipart.MultipartFile;

    import java.io.FileInputStream;
    import java.io.IOException;

    @Controller
    @RequestMapping("xlsx-streamer")
    public class xlsxStreamerXXE {


        @GetMapping("/upload")
        public String index() {
            return "xxe_upload"; // return xxe_upload.html page
        }


        @PostMapping("/readxlsx")
        public void xllx_streamer_xxe(MultipartFile file) throws IOException {
            StreamingReader.builder().open(file.getInputStream());
        }


        public static void main(String[] args) throws Exception {
            StreamingReader.builder().open((new FileInputStream("poc.xlsx")));
        }
    }
CODE
	"file://pom.xml":<<<TEXT
    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>

        <groupId>sec</groupId>
        <artifactId>java-sec-code</artifactId>
        <version>1.0.0</version>
        <packaging>jar</packaging>

        <properties>
            <maven.compiler.source>1.8</maven.compiler.source> <!-- mvn clean package-->
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>


        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>1.5.1.RELEASE</version>
        </parent>
    <dependencies>
        <dependency>
                    <groupId>com.monitorjbl</groupId>
                    <artifactId>xlsx-streamer</artifactId>
                    <version>1.2.0</version>
                </dependency>
    </dependencies>
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-dependencies</artifactId>
                    <version>Camden.RELEASE</version>
                    <type>pom</type>
                    <scope>import</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>

        <!-- jar -->
        <build>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
            </plugins>
        </build>
    </project>
TEXT
	"safefile://demo2.java":<<<CODE
    package org.joychou.controller.othervulns;

    import com.monitorjbl.xlsx.StreamingReader;

    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.multipart.MultipartFile;

    import java.io.FileInputStream;
    import java.io.IOException;

    @Controller
    @RequestMapping("xlsx-streamer")
    public class xlsxStreamerXXE {


        @GetMapping("/upload")
        public String index() {
            return "xxe_upload";
        }

        public static void main(String[] args) throws Exception {
            StreamingReader.builder().open((new FileInputStream("poc.xlsx")));
        }
    }
CODE
	"file://pom.xml":<<<TEXT
    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>

        <groupId>sec</groupId>
        <artifactId>java-sec-code</artifactId>
        <version>1.0.0</version>
        <packaging>jar</packaging>

        <properties>
            <maven.compiler.source>1.8</maven.compiler.source> <!-- mvn clean package-->
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>


        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>1.5.1.RELEASE</version>
        </parent>
    <dependencies>
        <dependency>
                    <groupId>com.monitorjbl</groupId>
                    <artifactId>xlsx-streamer</artifactId>
                    <version>1.2.0</version>
                </dependency>
    </dependencies>
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-dependencies</artifactId>
                    <version>Camden.RELEASE</version>
                    <type>pom</type>
                    <scope>import</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>

        <!-- jar -->
        <build>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
            </plugins>
        </build>
    </project>
TEXT
)
