desc(
	title: "Audit Java Thymeleaf Configuration"
	type: audit
	severity: low
	desc: <<<DESC
### 1. 规则目的
该规则用于审计Java应用中Thymeleaf模板引擎的配置，特别是检查`SpringResourceTemplateResolver`的使用情况。了解Thymeleaf模板解析器的配置对于评估潜在的安全风险至关重要，尤其是与模板注入相关的风险。通过审计配置，可以帮助开发者和安全人员识别可能导致攻击者控制模板内容或文件路径的配置项。

### 2. 规则详细
1. **关注TemplateResolver**
   规则主要关注Thymeleaf使用的`TemplateResolver`实现类，`SpringResourceTemplateResolver`是Spring集成Thymeleaf时常用的解析器，负责加载模板文件。

2. **识别关键配置属性**
   规则进一步检查`SpringResourceTemplateResolver`的各种配置方法（以`set`开头的方法，如`setPrefix`、`setSuffix`、`setTemplateMode`等）及其常量参数的使用。这些配置直接影响模板文件的定位和解析方式。例如，`setPrefix`定义模板文件所在的目录，`setSuffix`定义模板文件的扩展名。不当的配置（如允许任意前缀或后缀）可能被攻击者利用进行目录遍历或注入恶意模板。

3. **辅助安全审计**
   虽然此规则本身不直接检测漏洞，但它提供了重要的上下文信息。结合其他规则（如检测用户输入是否直接或间接影响模板名称或参数的规则），可以更有效地发现Thymeleaf模板注入（Server-Side Template Injection, SSTI）等漏洞。审计配置也是了解应用如何处理模板、评估其安全健壮性的必要步骤。
DESC
	rule_id: "70226437-3bb9-4902-b30a-da4e2820bd63"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
	title_zh: "审计Java Thymeleaf配置"
)

SpringResourceTemplateResolver() as $templateResolver;
alert $templateResolver for "SpringResourceTemplateResolver is used";
$templateResolver.set*(*?{opcode: const} as $params);
alert $params for {
    message: "SpringResourceTemplateResolver is used with some params",
};

desc(
	lang: java
	alert_min: 3
	'file://config.java': <<<EOF
@Configuration
public class ThymeleafConfig {
    @Bean
    public SpringTemplateEngine templateEngine() {
        SpringTemplateEngine templateEngine = new SpringTemplateEngine();
        templateEngine.setTemplateResolver(templateResolver());
        return templateEngine;
    }

    @Bean
    public SpringResourceTemplateResolver templateResolver() {
        SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();
        templateResolver.setPrefix("classpath:/templates/");
        templateResolver.setSuffix(".html");
        templateResolver.setTemplateMode(TemplateMode.HTML);
        return templateResolver;
    }
}
EOF
)

