desc(
	title: "Audit Java Thymeleaf Configuration"
	type: audit
	severity: low
	desc: <<<DESC
### 规则描述

#### 1. 漏洞原理
Thymeleaf 是一种流行的服务器端模板引擎，广泛用于基于 Spring 的现代 Java 应用程序。如果未正确配置 Thymeleaf 模板解析器（例如 `SpringResourceTemplateResolver`），可能会导致攻击者利用模板注入漏洞（Server-Side Template Injection, SSTI）控制模板内容或文件路径，从而执行任意代码或访问敏感文件。

#### 2. 触发场景
以下代码展示了如何不当配置可能导致安全风险的示例：
```java
SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();
templateResolver.setPrefix("classpath:/templates/" + userInput);
templateResolver.setSuffix(".html");
```
在上述示例中，`setPrefix` 方法允许动态参数（如用户输入），这可能被攻击者利用进行目录遍历或注入恶意模板。

#### 3. 潜在影响
- **远程代码执行**：攻击者可以通过注入恶意模板执行任意代码。
- **敏感信息泄露**：通过控制模板路径，攻击者可以读取系统上的敏感文件。
- **数据篡改**：未经授权修改应用程序行为或数据库内容。

DESC
	rule_id: "70226437-3bb9-4902-b30a-da4e2820bd63"
	solution: <<<SOLUTION
### 修复建议

#### 1. 严格配置模板路径
确保 `setPrefix` 和 `setSuffix` 的配置严格限制模板文件的路径和扩展名，避免使用可能导致目录遍历的配置。
```java
// 示例：严格配置模板路径
SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();
templateResolver.setPrefix("classpath:/secure/templates/");
templateResolver.setSuffix(".html");
```

#### 2. 避免使用动态路径
避免在模板路径中使用动态参数，确保路径的静态性和可预测性。
```java
// 避免示例：动态路径配置
// templateResolver.setPrefix("classpath:/templates/" + userInput);
```

#### 3. 使用安全的模板模式
确保 `setTemplateMode` 配置为安全的模式，如 `TemplateMode.HTML`，避免使用可能导致执行恶意代码的模式。
```java
// 示例：使用安全的模板模式
templateResolver.setTemplateMode(TemplateMode.HTML);
```

#### 4. 定期审计模板配置
定期审计模板配置文件，确保没有不当的配置项，及时发现潜在的安全风险。
SOLUTION
	reference: <<<REFERENCE
[CWE-94: Improper Control of Generation of Code ('Code Injection')](https://cwe.mitre.org/data/definitions/94.html)
[OWASP: Server-Side Template Injection](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/06-Testing_for_Server_Side_Template_Injection)
REFERENCE
	title_zh: "审计Java Thymeleaf配置"
)

SpringResourceTemplateResolver() as $templateResolver;
alert $templateResolver for {
	level: "info",
	title: "Audit Java Thymeleaf Configuration",
	title_zh: "审计Java Thymeleaf配置",
}

$templateResolver.set*(*?{opcode: const} as $params);
alert $params for {
	level: "info",
	message: "SpringResourceTemplateResolver is used with some params",
	title: "Audit Java Thymeleaf Configuration Parameters",
	title_zh: "审计Java Thymeleaf配置参数",
}


desc(
	lang: java
	alert_min: 3
	'file://config.java': <<<EOF
@Configuration
public class ThymeleafConfig {
    @Bean
    public SpringTemplateEngine templateEngine() {
        SpringTemplateEngine templateEngine = new SpringTemplateEngine();
        templateEngine.setTemplateResolver(templateResolver());
        return templateEngine;
    }

    @Bean
    public SpringResourceTemplateResolver templateResolver() {
        SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();
        templateResolver.setPrefix("classpath:/templates/");
        templateResolver.setSuffix(".html");
        templateResolver.setTemplateMode(TemplateMode.HTML);
        return templateResolver;
    }
}
EOF
)
