desc(
	title: "Check Java EE XSS Vulnerability"
	title_zh: "检测Java EE的XSS漏洞"
	type: vuln
	risk: XSS
	level: high
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   跨站脚本攻击（XSS）是一种常见的安全漏洞，攻击者通过在应用程序中注入恶意脚本，能够在其他用户的浏览器中执行这些脚本。在Java EE应用程序中，如果开发者未对用户输入进行适当的转义处理，直接将其输出到HTML页面中（例如在JSP中使用`${}`或`<%=%>`直接输出用户可控数据），就会导致XSS漏洞。

2. **触发场景**
   当用户提交的包含恶意脚本的数据未经充分过滤或转义，被直接嵌入到动态生成的HTML页面中并返回给浏览器时，漏洞就会被触发。常见的场景包括：
   - 用户输入（如通过`request.getParameter()`获取的参数）未经处理直接输出到JSP页面。
   - 从数据库或其他地方读取的用户控制数据未经处理输出到页面。
   - 存储型XSS：恶意数据存储到数据库，后续查询并显示时触发。
   以下是一个示例代码片段，展示了如何在JSP页面中直接输出未经验证的用户输入，从而导致XSS漏洞：

   ```jsp
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>XSS Vulnerability Example</title>
   </head>
   <body>
       <h2>User Input:</h2>
       <div>${sessionScope.userInput}</div> <%-- 直接输出session中的用户输入，存在XSS风险 --%>
   </body>
   </html>
   ```
   攻击者可以构造恶意的`userInput`，例如`<script>alert('XSS')</script>`，这段脚本将在其他用户访问该页面时执行。

3. **潜在影响**
   攻击者可以利用这个漏洞窃取用户的敏感信息（如Cookie、Session ID）、进行会话劫持、欺骗用户执行恶意操作、篡改页面内容、进行钓鱼攻击，甚至进一步渗透到应用的其他部分或客户端计算机。
DESC
	rule_id: "00b097ac-f408-4a9b-b2e3-88b5c2a0fe3e"
	solution: <<<SOLUTION
### 修复建议

#### 1. 对用户输入进行严格的输出转义
在将用户控制的数据输出到HTML页面时，务必对其进行转义，将"<", ">", "&", "'", """等可能改变HTML结构的特殊字符转换为HTML实体。Java EE提供了多种方法进行转义：

- **使用JSTL的`<c:out>`标签**：这是推荐的方式，它默认会对输出进行HTML转义。
  ```jsp
  <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
  ...
  <div><c:out value="${sessionScope.userInput}"/></div> <%-- JSTL <c:out> 标签自动进行转义 --%>
  ```

- **手动使用转义工具类**：部分第三方库（如OWASP ESAPI, Apache Commons Text）提供了专门用于各种上下文（HTML、JavaScript、CSS等）的安全转义函数。
  ```java
  import org.owasp.esapi.ESAPI;
  ...
  String escapedInput = ESAPI.encoder().encodeForHTML(userInput); // 在Servlet中转义
  request.setAttribute("userInput", escapedInput);
  request.getRequestDispatcher("/xss-vulnerable.jsp").forward(request, response);
  ```
  或者在JSP中使用EL函数：
  ```jsp
  <%@ taglib uri="/WEB-INF/tlds/myfunctions.tld" prefix="my" %>
  ...
  <div>${my:escapeHtml(sessionScope.userInput)}</div> <%-- 自定义转义EL函数 --%>
  ```

#### 2. 采用安全的模板引擎或UI框架
许多现代的Java Web框架和模板引擎（如Thymeleaf, FreeMarker）默认或通过简单配置即可实现安全的输出上下文感知转义，大大降低了XSS风险。

#### 3. 输入验证
虽然输出转义是防止XSS的关键，但输入验证也是重要的补充。根据业务需求，对用户输入的数据类型、格式、长度等进行检查，拒绝明显恶意的或不符合预期的输入。
SOLUTION
	reference: <<<REFERENCE
[CWE-79: Improper neutralization of input during web page generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)
REFERENCE
)

<javaUnescapeOutput> as $sink;
check $sink then "发现JSP中存在未转义的输出"
<include("java-servlet-param")> as $source;
<include('java-escape-method')> as $filter

$source<getCallee()><getObject()>as $req;
$sink #{
    include: `* & $req`,
    include:`*...setAttribute(,* as $attribute)`,
    exclude:`* <getCallee> & $filter`
}-> as $result;
alert $result for {
    message: "Find Java EE's XSS Vulnerability",
    type: vuln,
    level: high,
};

desc(
	alert_min:1
	lang: "java"
	'file://xss-vulnerable.jsp': <<<EOF
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>XSS Vulnerability Example</title>
</head>
<body>
    <h2>User Input:</h2>
    <div>${sessionScope.userInput}</div>
</body>
</html>
EOF
	'file://servletDemo.java': <<<EOF
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class XSSVulnerableServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String userInput = request.getParameter("input");
        request.setAttribute("userInput", userInput);
       request.getRequestDispatcher("/xss-vulnerable.jsp").forward(request, response);
    }
}
EOF
)



desc(
	alert_num:1
	lang: "java"
	'file://web/jsp/messages/seemessages.jsp': <<<EOF
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@page import="java.util.Iterator" %>
<%@page import="java.util.ArrayList" %>
<%@page import="entity.Message" %>
<%@page import="java.util.ArrayList" %>
<html>
<head>
    <title>showmessages</title>
</head>
<body>
<h2>Show Messages</h2>
<table border=1 cellspacing="0">
    <tr>
        <th>留言人姓名</th>
        <th>留言时间</th>
        <th>留言标题</th>
        <th>留言内容</th>
    </tr>
    <%
        ArrayList<Message> all = new ArrayList();
        all = (ArrayList) session.getAttribute("all_messages");
        if (all != null) {
            Iterator it = all.iterator();
            while (it.hasNext()) {
                Message ms = (Message) it.next();
    %>
    <tr>
        <td><%= ms.getUsername() %>
        </td>
        <td><%= ms.getTime().toString() %>
        </td>
        <td><%= ms.getTitle() %>
        </td>
        <td><%= ms.getMessage() %>
        </td>
    </tr>
    <%
            }
        }
    %>
</table>
</body>
</html>
EOF
	'file://web/servlet/ShowMessagesServlet.java': <<<EOF
 package org.example;


 import dao.MessagesDao;
 import entity.Message;

 import javax.servlet.ServletException;
 import javax.servlet.annotation.WebServlet;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 import java.io.IOException;
 import java.util.ArrayList;

 @WebServlet(name = "ShowMessagesServlet")
 public class ShowMessagesServlet extends HttpServlet {
     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         // 解决乱码
         request.setCharacterEncoding("UTF-8");
         response.setContentType("text/html;charset=UTF-8");

         // 创建session Dao模型
         HttpSession session = request.getSession();
         MessagesDao messagesDao = new MessagesDao();

         //获取留言板表中全部数据 装在list里面，并放到Session中
         ArrayList<Message> all_messages = messagesDao.getAllMessages();
         session.setAttribute("all_messages", all_messages);


         //get path
         String servletPath = request.getServletPath();

         if(servletPath.equals("/ShowMessagesServlet")){
             request.getRequestDispatcher("/jsp/messages/seemessages.jsp").forward(request, response);
         }else if(servletPath.equals("/ShowMessagesServlet2")){
             request.getRequestDispatcher("/jsp/messages/seemessages2.jsp").forward(request, response);
         }
     }
     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         doPost(request,response);
     }
 }
EOF
)

