desc(
    title:"Check Java SQL Improper Password Config",
    title_zh:"检测Java SQL不当的密码配置",
    type:config,
    desc:<<<TEXT
    该规则用于检测Java代码中SQL不当的密码配置。在Java中，SQL密码配置是指对密码进行存储、传输、验证等操作的方式。不当的SQL密码配置可能会导致一些潜在的安全风险，例如密码泄露、密码破解、身份盗用等。因此，建议采用安全的SQL密码配置方式，以提高系统安全性。
TEXT,
)

DriverManager.getConnection?{<typeName>?{have:'java.sql'}} as $connect
check $connect then "发现Java代码中使用了SQL连接";

// DriverManager.getConnection(String url, String user, String password)
$connect<getActualParams><slice(index=3)> as $passwd;
$passwd?{opcode:const} as $const;
check $const then "发现使用硬编码的密码"

alert $const for {
    message:"发现Java SQL DriverManager.getConnection进行SQL连接的时候使用硬编码。",
    risk:'auth-bypass',
    level:low,
    solution:<<<TEXT
    SQL连接时，不应该使用硬编码，应该使用配置文件、环境变量等方式进行密码配置。
TEXT
}

$const?{have:'nil'} as $null
alert $null for {
    message:"发现Java SQL DriverManager.getConnection进行SQL连接的时候没有设置密码。",
    risk:'auth-bypass',
    level:middle,
    solution:<<<TEXT
    SQL连接时，应该设置密码，以提高系统的安全性。
TEXT
}

desc{
    lang:'java',
    alert_num:2,
    "file://demo.java":<<<TEXT
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;

    public class DatabaseConnection {
        /**
         * 漏洞点：明文传递 null 作为密码
         */
        public Connection connect() throws SQLException {
            String url = "jdbc:mysql://localhost:3306/mydb";
            String user = "root";
            // 触发规则：密码参数显式设置为 null
            Connection conn = DriverManager.getConnection(url, user, null);
            return conn;
        }

        public static void main(String[] args) {
            DatabaseConnection db = new DatabaseConnection();
            try {
                Connection conn = db.connect();
                System.out.println("Connected to database.");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
TEXT
}

desc{
    lang:'java',
    alert_num:1,
    "file://demo.java":<<<TEXT
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;

    public class DatabaseConnection {
        /**
         * 漏洞点：使用硬编码的密码
         */
        public Connection connect() throws SQLException {
            String url = "jdbc:mysql://localhost:3306/mydb";
            String user = "root";
            // 触发规则：密码参数使用硬编码
            Connection conn = DriverManager.getConnection(url, user, "password");
            return conn;
        }

        public static void main(String[] args) {
            DatabaseConnection db = new DatabaseConnection();
            try {
                Connection conn = db.connect();
                System.out.println("Connected to database.");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
TEXT
}

desc{
    lang:'java',
    "safefile://demo.java":<<<TEXT
  import java.sql.Connection;
  import java.sql.DriverManager;
  import java.sql.SQLException;
  import java.util.Objects;

  public class SecureDatabaseConnection {
      private final String password;

      /**
       * 安全设计：通过构造函数注入密码（从安全来源获取）
       */
      public SecureDatabaseConnection(String password) {
          this.password = Objects.requireNonNull(password, "Database password cannot be null");
      }

      public Connection connect() throws SQLException {
          String url = "jdbc:mysql://localhost:3306/mydb";
          String user = "root";
          // 修复点：使用动态获取的密码
          Connection conn = DriverManager.getConnection(url, user, password);
          return conn;
      }

      public static void main(String[] args) {
          // 从环境变量或加密配置中获取密码
          String password = System.getenv("DB_PASSWORD");
          if (password == null || password.isEmpty()) {
              throw new SecurityException("Database password is not configured.");
          }

          SecureDatabaseConnection db = new SecureDatabaseConnection(password);
          try {
              Connection conn = db.connect();
              System.out.println("Connected to database securely.");
          } catch (SQLException e) {
              e.printStackTrace();
          }
      }
  }
TEXT
}
