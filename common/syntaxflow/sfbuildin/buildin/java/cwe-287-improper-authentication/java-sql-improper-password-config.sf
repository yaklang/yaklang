desc(
	title: "Audit Java SQL Improper Password Configuration"
	title_zh: "审计Java SQL不当的密码配置"
	type:config
	desc: <<<DESC
### 风险描述

1. **风险原理**
   该规则用于审计Java应用中使用`DriverManager.getConnection()`方法进行数据库连接时，密码配置不当的问题。具体包括两种常见的不安全配置方式：
   - **硬编码密码：** 将数据库连接密码直接以明文字符串的形式写在代码中。这种方式极易导致密码泄露，一旦源代码被访问或反编译，攻击者即可轻易获取数据库凭据，从而直接访问敏感数据或进一步渗透系统。
   - **密码参数为null：** 在建立数据库连接时，将密码参数设置为`null`。虽然某些数据库或配置允许无密码连接，但这通常仅限于开发或测试环境。在生产环境中无密码连接数据库会带来严重的安全风险，任何能够访问到数据库端口的用户都可以在无需身份验证的情况下执行任意数据库操作。

2. **触发场景**
   当Java代码使用`DriverManager.getConnection(url, user, password)`方法进行数据库连接时，如果`password`参数是一个硬编码的字符串常量，或者被显式设置为`null`。
   
   以下是硬编码密码的示例：
   ```java
   import java.sql.Connection;
   import java.sql.DriverManager;
   import java.sql.SQLException;

   public class DatabaseConnection {
       // 触发规则：密码参数使用硬编码
       public Connection connect() throws SQLException {
           String url = "jdbc:mysql://localhost:3306/mydb";
           String user = "root";
           Connection conn = DriverManager.getConnection(url, user, "password123"); // 硬编码的密码
           return conn;
       }
   }
   ```
   
   以下是密码参数为null的示例：
   ```java
   import java.sql.Connection;
   import java.sql.DriverManager;
   import java.sql.SQLException;

   public class DatabaseConnection {
       // 触发规则：密码参数显式设置为 null
       public Connection connect() throws SQLException {
           String url = "jdbc:mysql://localhost:3306/mydb";
           String user = "root";
           Connection conn = DriverManager.getConnection(url, user, null); // 密码为 null
           return conn;
       }
   }
   ```

3. **潜在影响**
   - **数据泄露和篡改：** 攻击者获取数据库凭据后，可以直接读取、修改或删除数据库中的敏感数据（如用户信息、订单数据、财务数据等）。
   - **权限绕过和垂直/水平越权：** 攻击者可能利用获取的数据库权限绕过应用层的访问控制，甚至利用数据库系统的漏洞进行提权。
   - **拒绝服务：** 攻击者可能恶意删除或修改关键数据，导致应用程序无法正常运行。
   - **进一步渗透：** 数据库往往是内部网络中的关键资源，通过控制数据库，攻击者可能以此为跳板，对内部其他主机或服务发起攻击。
DESC
	rule_id: "1220e13b-8030-4ee5-8886-32ecbff51dbc"
	solution: <<<SOLUTION
### 修复建议

#### 1. 避免硬编码密码，使用安全配置方式
切勿将数据库密码直接写在源代码中。应将敏感配置信息（如数据库URL、用户名、密码）存储在外部配置文件、环境变量、或者配置服务中，并在应用程序启动时动态读取。对于配置文件，应确保其访问权限受到严格控制，并且避免将其纳入版本控制系统（如Git）。

```java
// 修复代码示例：从环境变量或配置文件读取密码
public class SecureDatabaseConnection {
    private final String password;

    public SecureDatabaseConnection(String password SettingSource) {
        // 从安全来源（如配置服务、环境变量）获取密码
        this.password = SettingSource.getPassword("db.password"); 
    }

    public Connection connect() throws SQLException {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String user = "root";
        // 使用动态获取的密码
        Connection conn = DriverManager.getConnection(url, user, password);
        return conn;
    }
    
    // 示例：从环境变量加载密码
    public static void main(String[] args) {
        String password = System.getenv("DB_PASSWORD");
        if (password == null || password.isEmpty()) {
            throw new SecurityException("Database password is not configured.");
        }
        SecureDatabaseConnection db = new SecureDatabaseConnection(() -> password); // 示例性地传递密码
        try {
            Connection conn = db.connect();
            System.out.println("Connected to database securely.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    // 简单的接口示例用于说明配置来源
    interface PasswordSettingSource {
        String getPassword(String key);
    }
}
```

#### 2. 确保数据库需要密码认证
对于生产环境的数据库，必须配置并要求连接时提供密码。检查数据库服务端的配置，确保不允许匿名连接或空密码连接。设置强密码，并定期更换。

#### 3. 考虑使用密码管理工具或服务
对于复杂的应用或微服务架构，可以考虑使用专门的密码管理工具或服务（如HashiCorp Vault, AWS Secrets Manager, CyberArk等）来集中、安全地存储和分发敏感凭据，进一步降低泄露风险。
SOLUTION
	reference: <<<REFERENCE
[CWE-287: Improper Authentication](https://cwe.mitre.org/data/definitions/287.html)
REFERENCE
)

DriverManager.getConnection?{<typeName>?{have:'java.sql'}} as $connect
check $connect then "发现Java代码中使用了SQL连接";

$connect(*<slice(index=3)> as $passwd)
$passwd?{opcode:const} as $const
check $const then "发现使用硬编码的密码"

alert $const for {
	level: "low",
	message: "发现Java SQL DriverManager.getConnection进行SQL连接的时候使用硬编码。",
	risk: "auth-bypass",
	title: "Audit Java SQL Improper Password Configuration",
	title_zh: "审计Java SQL不当的密码配置",
}

$const?{have:'nil'} as $null
alert $null for {
	level: "mid",
	message: "发现Java SQL DriverManager.getConnection进行SQL连接的时候没有设置密码。",
	risk: "auth-bypass",
	title: "Audit Java SQL Improper Password Configuration",
	title_zh: "审计Java SQL不当的密码配置",
}

desc(
	lang:'java'
	alert_num:2
	"file://demo.java":<<<TEXT
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;

    public class DatabaseConnection {
        /**
         * 漏洞点：明文传递 null 作为密码
         */
        public Connection connect() throws SQLException {
            String url = "jdbc:mysql://localhost:3306/mydb";
            String user = "root";
            // 触发规则：密码参数显式设置为 null
            Connection conn = DriverManager.getConnection(url, user, null);
            return conn;
        }

        public static void main(String[] args) {
            DatabaseConnection db = new DatabaseConnection();
            try {
                Connection conn = db.connect();
                System.out.println("Connected to database.");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
TEXT
)

desc(
	lang:'java'
	alert_num:1
	"file://demo.java":<<<TEXT
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;

    public class DatabaseConnection {
        /**
         * 漏洞点：使用硬编码的密码
         */
        public Connection connect() throws SQLException {
            String url = "jdbc:mysql://localhost:3306/mydb";
            String user = "root";
            // 触发规则：密码参数使用硬编码
            Connection conn = DriverManager.getConnection(url, user, "password");
            return conn;
        }

        public static void main(String[] args) {
            DatabaseConnection db = new DatabaseConnection();
            try {
                Connection conn = db.connect();
                System.out.println("Connected to database.");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
TEXT
)

desc(
	lang:'java'
	"safefile://demo.java":<<<TEXT
  import java.sql.Connection;
  import java.sql.DriverManager;
  import java.sql.SQLException;
  import java.util.Objects;

  public class SecureDatabaseConnection {
      private final String password;

      /**
       * 安全设计：通过构造函数注入密码（从安全来源获取）
       */
      public SecureDatabaseConnection(String password) {
          this.password = Objects.requireNonNull(password, "Database password cannot be null");
      }

      public Connection connect() throws SQLException {
          String url = "jdbc:mysql://localhost:3306/mydb";
          String user = "root";
          // 修复点：使用动态获取的密码
          Connection conn = DriverManager.getConnection(url, user, password);
          return conn;
      }

      public static void main(String[] args) {
          // 从环境变量或加密配置中获取密码
          String password = System.getenv("DB_PASSWORD");
          if (password == null || password.isEmpty()) {
              throw new SecurityException("Database password is not configured.");
          }

          SecureDatabaseConnection db = new SecureDatabaseConnection(password);
          try {
              Connection conn = db.connect();
              System.out.println("Connected to database securely.");
          } catch (SQLException e) {
              e.printStackTrace();
          }
      }
  }
TEXT
)
