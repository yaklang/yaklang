desc(
	title: "Check Java Improper Password Configuration in Config File"
	title_zh: "检测Java配置文件中不当的密码配置"
	type:config
	desc: <<<DESC
### 风险描述

1. **风险原理**

本规则旨在检测 Java 项目配置文件（如 `.yml`, `.properties`, `.xml` 等）中明文存储的密码。直接在配置文件中硬编码数据库、API、服务等敏感凭证，一旦配置文件泄露（例如代码仓库公开、服务器被入侵、误上传等），将直接导致敏感信息泄露，攻击者可以利用这些凭证访问受保护的资源，造成严重后果。

2. **触发场景**

项目配置文件中存在 `password` 关键字，且其值直接设置为明文密码或空字符串。

```yaml
spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/test
    username: root
    password: yoursecretpassword  # 明文密码
```
或者
```properties
database.username=admin
database.password=
```

3. **潜在影响**

- 攻击者获取数据库或其他服务的访问权限。
- 敏感业务数据泄露、被篡改或删除。
- 服务被非法访问和滥用。
- 系统遭受进一步的攻击和渗透，可能导致整个基础设施沦陷。
DESC
	rule_id: "50d74e0f-2353-4367-a53c-18e8d48d22e1"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用环境变量或外部配置服务

将敏感配置（如密码）从代码库中移除，通过操作系统环境变量、Kubernetes Secrets、HashiCorp Vault 或其他安全配置管理工具注入到应用程序中。

```java
// 从环境变量读取密码
String password = System.getenv("DATABASE_PASSWORD");
// 从配置服务读取密码 (示例，具体实现依赖所用工具)
String password = configService.getSecret("database.password");
```

#### 2. 使用加密配置或密钥管理系统

如果必须将配置写在文件中，可以使用加密工具对敏感信息进行加密，并在应用程序启动时解密。更安全的做法是使用密钥管理系统（KMS），将敏感密钥存储在受保护的环境中，应用程序通过调用 KMS API 获取密钥。

#### 3. 遵循安全编程规范

在团队内部建立强制性的安全开发规范，禁止在任何配置文件中明文存储密码。对代码进行安全 review 或使用自动安全审计工具检查配置文件。

#### 4. 最小化权限原则

即使配置泄露，通过为数据库用户、API 密钥等设置最小必要的权限，可以限制潜在损害的范围。
SOLUTION
	reference: <<<REFERENCE
[CWE-287: Improper Authentication](https://cwe.mitre.org/data/definitions/287.html)
REFERENCE
)

__projectConfig__.*password* as $toCheck;
check $toCheck then "发现Java配置文件中包含密码的配置";
$toCheck?{have:"<nil>"} as $weak;

alert $weak	for {
	title: "Check Java Improper Password Configuration in Config File",
	title_zh: "检测Java配置文件中不当的密码配置",
	level: "middle",
	message: "发现Java不当的密码配置",
	risk: "config",
}

desc(
	lang:'java'
	alert_num:1
	"file://demo.yml":<<<TEXT
server:
  port: 80
spring:
  application:
    name: MyApplication
  ##数据库连接信息
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/test?useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: root
    password:
TEXT
)
