desc(
	title: "Check Java Password Management Using Null Password"
	title_zh: "检测Java密码管理中使用空密码"
	type: security
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   该规则旨在识别Java代码中将`null`作为密码使用的场景。在涉及身份验证或受保护资源的访问时，如果系统允许使用`null`值作为密码，将绕过正常的密码验证机制。

2. **触发场景**
   - 在创建`PasswordCredential`、`PasswordAuthentication`等身份认证凭据对象时，将密码参数设置为`null`。
   - 在设置系统属性（如`System.setProperty`）时，将表示密码的属性值设置为`null`。
   - 在使用`KeyStore`相关的 API（如`getKey`, `load`, `store`, `setKeyEntry`, `getInstance`等）时，将密码参数设置为`null`。

   ```java
   // 存在漏洞的代码示例
   new PasswordCredential("user", null); // 使用null密码创建凭据
   System.setProperty("db.password", null); // 设置null密码系统属性
   KeyStore keyStore = KeyStore.getInstance("JKS");
   keyStore.load(new FileInputStream("keystore"), null); // 使用null密码加载KeyStore
   ```

3. **潜在影响**
   攻击者无需知道实际密码即可访问受null密码保护的资源或绕过身份验证流程，导致敏感信息泄露、未授权访问或系统被破坏。
DESC
	rule_id: "b717bf17-1dee-4b38-b048-61aaaf1957a1"
	solution: <<<SOLUTION
### 修复建议

1. **强制密码非空**
   在代码逻辑中，对所有涉及密码设置或使用的参数进行检查，确保密码参数不为`null`或空字符串。
   ```java
   // 修复代码示例
   String password = getUserSuppliedPassword(); // 获取用户输入的密码
   if (password == null || password.isEmpty()) {
       throw new IllegalArgumentException("密码不能为空");
   }
   new PasswordCredential("user", password.toCharArray()); // 使用非空密码创建凭据
   ```

2. **使用安全的密码处理方式**
   - 对于用户输入的密码，应使用安全的哈希算法（如BCrypt, SCrypt）进行加盐哈希存储，而非直接存储或使用明文密码。
   - 在内存中处理密码时，尽量使用`char[]`数组而非`String`，并在使用完毕后清零，以降低敏感信息泄露的风险。
   - 对于配置文件中的密码，应进行加密存储，并在使用时解密，避免以明文形式存储或硬编码。

3. **Review相关API的使用**
   仔细检查代码中所有使用到`javax.security.auth.callback.PasswordCredential`, `java.net.PasswordAuthentication`, `java.security.KeyStore`等涉及密码管理的API的调用，确保密码参数被正确、安全地处理，而不是传递`null`。
SOLUTION
	reference: <<<REFERENCE
[CWE-287: Improper Authentication](https://cwe.mitre.org/data/definitions/287.html)
REFERENCE
)

// new PasswordCredential(null, "user_password");
PasswordCredential?{<typeName>?{have:'javax.security.auth.callback.PasswordCredential'}}(*<slice(index=2)> as $password);

// System.setProperty("password", null);
System.setProperty?{<typeName>?{have:'java.lang'}}(*<slice(index=2)> as $password);

// new PasswordAuthentication(null, "user_password");
PasswordAuthentication?{<typeName>?{have:'java.net.PasswordAuthentication'}}(*<slice(index=2)> as $password);

// PasswordCallback.setPassword(null);
PasswordCallback.setPassword?{<typeName>?{have:'javax.security.auth.callback.PasswordCallback'}}(*<slice(index=1)> as $password);

// KeyStore.getKey("password", null);
// KeyStore.engineGetKey("password", null);
.engineGetKey?{<typeName>?{have:'java.security'}}(*<slice(index=2)> as $password);
.getKey?{<typeName>?{have:'java.security'}}(*<slice(index=2)> as $password);

// KeyStore.load(inputStream, null);
// KeyStore.engineLoad(inputStream, null);
.engineLoad?{<typeName>?{have:'java.security'}}(*<slice(index=2)> as $password);
.load?{<typeName>?{have:'java.security'}}(*<slice(index=2)> as $password);

// KeyStore.store(outputStream, null);
// KeyStore.engineStore(outputStream, null);
.engineStore?{<typeName>?{have:'java.security'}}(*<slice(index=2)> as $password);
.store?{<typeName>?{have:'java.security'}}(*<slice(index=2)> as $password);

// KeyStore.setKeyEntry("alias", null, null);
// KeyStore.engineSetKeyEntry("alias", null, null);
.engineSetKeyEntry?{<typeName>?{have:'java.security'}}(*<slice(index=2)> as $password);
.setKeyEntry?{<typeName>?{have:'java.security'}}(*<slice(index=2)> as $password);

// KeyStore.getInstance(new File("path/to/keystore"), null);
.getInstance?{<typeName>?{have:'java.security'}}(*<slice(index=2)> as $password)

$password ?{*#{
    include:`*?{opcode:const}?{have:'nil'}`
}->} as $risk;

alert $risk for {
	solution: <<<CODE
### 修复建议

1. **强制密码非空**
   在代码逻辑中，对所有涉及密码设置或使用的参数进行检查，确保密码参数不为`null`或空字符串。
   ```java
   // 修复代码示例
   String password = getUserSuppliedPassword(); // 获取用户输入的密码
   if (password == null || password.isEmpty()) {
       throw new IllegalArgumentException("密码不能为空");
   }
   new PasswordCredential("user", password.toCharArray()); // 使用非空密码创建凭据
   ```

2. **使用安全的密码处理方式**
   - 对于用户输入的密码，应使用安全的哈希算法（如BCrypt, SCrypt）进行加盐哈希存储，而非直接存储或使用明文密码。
   - 在内存中处理密码时，尽量使用`char[]`数组而非`String`，并在使用完毕后清零，以降低敏感信息泄露的风险。
   - 对于配置文件中的密码，应进行加密存储，并在使用时解密，避免以明文形式存储或硬编码。

3. **Review相关API的使用**
   仔细检查代码中所有使用到`javax.security.auth.callback.PasswordCredential`, `java.net.PasswordAuthentication`, `java.security.KeyStore`等涉及密码管理的API的调用，确保密码参数被正确、安全地处理，而不是传递`null`。
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   该规则旨在识别Java代码中将`null`作为密码使用的场景。在涉及身份验证或受保护资源的访问时，如果系统允许使用`null`值作为密码，将绕过正常的密码验证机制。

2. **触发场景**
   - 在创建`PasswordCredential`、`PasswordAuthentication`等身份认证凭据对象时，将密码参数设置为`null`。
   - 在设置系统属性（如`System.setProperty`）时，将表示密码的属性值设置为`null`。
   - 在使用`KeyStore`相关的 API（如`getKey`, `load`, `store`, `setKeyEntry`, `getInstance`等）时，将密码参数设置为`null`。

   ```java
   // 存在漏洞的代码示例
   new PasswordCredential("user", null); // 使用null密码创建凭据
   System.setProperty("db.password", null); // 设置null密码系统属性
   KeyStore keyStore = KeyStore.getInstance("JKS");
   keyStore.load(new FileInputStream("keystore"), null); // 使用null密码加载KeyStore
   ```

3. **潜在影响**
   攻击者无需知道实际密码即可访问受null密码保护的资源或绕过身份验证流程，导致敏感信息泄露、未授权访问或系统被破坏。
CODE
	level: "middle",
	message: "发现Java代码中使用空密码",
	risk: "auth-bypass",
	title: "Check Java Password Management Using Null Password",
	title_zh: "检测Java密码管理中使用空密码",
}

desc(
	lang:'java'
	alert_num:13
	"file://unsafe.java":<<<EOF
package com.example;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.PasswordCredential;
import java.net.PasswordAuthentication;
import java.security.KeyStore;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

class Demo{
    public void test(){
        // 漏洞点：明文传递 null 作为密码
        new PasswordCredential("a", null);
        System.setProperty("password", null);
        new PasswordAuthentication("a", null);
        PasswordCallback.setPassword(null);
        KeyStore keyStore = KeyStore.getInstance("JKS");
        keyStore.getKey("password", null);
        keyStore.engineGetKey("password", null);
        keyStore.load(new FileInputStream("keystore"), null);
        keyStore.engineLoad(new FileInputStream("keystore"), null);
        keyStore.store(new FileOutputStream("keystore"), null);
        keyStore.engineStore(new FileOutputStream("keystore"), null);
        keyStore.setKeyEntry("alias", null, null);
        keyStore.engineSetKeyEntry("alias", null, null);
        keyStore.getInstance(new File("path/to/keystore"), null);
    }
}
EOF
)
