desc(
	title_zh: "检测Java J2EE 使用DriverManager getConnection"
	title: "Check Java J2EE Usage of DriverManager getConnection"
	risk:"代码风格",
	level: info
	reference: <<<REFERENCE
https://docs.oracle.com/javase/8/docs/api/java/sql/DriverManager.html
REFERENCE
	desc: <<<DESC
### 规则描述
1. **规则目的**
该规则用于检测Java代码中直接使用`DriverManager.getConnection()`方法获取数据库连接的代码片段。J2EE开发中推荐使用JNDI或依赖注入框架（例如Spring）来管理数据源，而非直接硬编码数据库连接信息。直接调用`DriverManager.getConnection()`可能带来诸如配置泄漏、连接池缺乏优化等风险。
2. **触发场景**
当开发者在代码中直接通过`DriverManager.getConnection()`方法传入数据库URL、用户名和密码时，就会触发该规则。
**示例代码 (存在风险):**
```java
import java.sql.Connection;
import java.sql.DriverManager;
public class UnsafeDatabaseConnection {
public static void main(String[] args) {
try {
Connection conn = DriverManager.getConnection(
"jdbc:mysql://localhost:3306/mydb", "user", "password"
);
// ... 执行数据库操作 ...
conn.close();
} catch (Exception e) {
e.printStackTrace();
}
}
}
```
3. **潜在影响**
- **配置泄露:** 硬编码数据库连接信息可能导致敏感信息（如用户名、密码）被暴露。
- **性能问题:** 直接使用`DriverManager`无法利用连接池优化，可能导致性能瓶颈。
- **维护困难:** 数据库连接信息散落在代码中，增加了维护难度，且容易导致错误。
- **缺乏灵活性:** 不使用容器托管的数据源，应用程序难以在不同的环境（开发、测试、生产）之间切换。
DESC
	rule_id: "219b8265-213b-474f-8a71-a86bfb3d3929"
	solution: <<<SOLUTION
### 修复建议
#### 1. 使用JNDI获取数据源
将数据库连接配置交由应用服务器或容器管理，通过JNDI查找并使用容器配置好的`DataSource`。
```java
import javax.naming.InitialContext;
import javax.sql.DataSource;
import java.sql.Connection;
public class SafeJndiDataSource {
private static final String DATA_SOURCE_JNDI_NAME = "java:comp/env/jdbc/MyDataSource";
public void useDataSource() {
Connection conn = null;
try {
InitialContext ctx = new InitialContext();
DataSource dataSource = (DataSource) ctx.lookup(DATA_SOURCE_JNDI_NAME);
conn = dataSource.getConnection();
System.out.println("Connection obtained via JNDI DataSource.");
// 执行数据库操作...
} catch (Exception e) {
e.printStackTrace();
} finally {
if (conn != null) {
try {
conn.close();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
}
```
#### 2. 使用Spring等框架管理数据源
如果使用Spring框架，应通过Spring的依赖注入机制配置`DataSource` Bean，并在DAO层注入使用。
```java
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import javax.sql.DataSource;
import java.sql.Connection;
public class SafeSpringDataSource {
private DataSource dataSource;
public void setDataSource(DataSource dataSource) {
this.dataSource = dataSource;
}
public void useDataSource() {
Connection conn = null;
try {
conn = dataSource.getConnection();
System.out.println("Connection obtained via Spring managed DataSource.");
// 执行数据库操作...
} catch (Exception e) {
e.printStackTrace();
} finally {
if (conn != null) {
try {
conn.close();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
}
```
#### 3. 避免硬编码数据库连接信息
应将数据库连接URL、用户名、密码等敏感信息从代码中移除，配置在应用服务器、properties文件或环境变量中，通过配置方式获取。
SOLUTION
	cwe: 676
)

DriverManager?{<typeName>?{have:'java.sql.DriverManager'}}.getConnection() as $get;
alert $get for {
	level: "info",
	message: "检测到Java项目中使用了DriverManager.getConnection()方法",
	title: "Unvalidated DriverManager getConnection Usage",
	title_zh: "未验证的DriverManager getConnection使用",
	solution: <<<SOLUTION
### 修复建议
#### 1. 使用JNDI获取数据源
将数据库配置交由应用服务器或容器管理，通过JNDI查找并使用容器配置好的`DataSource`。
```java
// 修复代码示例：使用 JNDI 获取 DataSource
import javax.naming.InitialContext;
import javax.sql.DataSource;
import java.sql.Connection;
public class SomeDao {
private static final String DATA_SOURCE_JNDI_NAME = "jdbc/mydb"; // 容器中配置的JNDI名称
public void accessDatabase() {
Connection conn = null;
try {
InitialContext ctx = new InitialContext();
DataSource dataSource = (DataSource) ctx.lookup(DATA_SOURCE_JNDI_NAME);
conn = dataSource.getConnection();
// ... 数据库操作 ...
} catch (Exception e) {
e.printStackTrace();
} finally {
if (conn != null) {
try {
conn.close();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
}
```
#### 2. 使用Spring等框架管理数据源
如果使用Spring框架，应通过Spring的依赖注入机制配置`DataSource` Bean，并在DAO层注入使用。
```java
// Spring配置示例 (applicationContext.xml 或 Java Config)
/*
<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
<property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
<property name="username" value="user"/>
<property name="password" value="password"/>
<property name="initialSize" value="5"/>
<property name="maxTotal" value="10"/>
</bean>
<bean id="someDao" class="com.example.SomeDao">
<property name="dataSource" ref="dataSource"/>
</bean>
*/
// 修复代码示例：在DAO中注入使用 Spring 管理的 DataSource
import javax.sql.DataSource;
import java.sql.Connection;
public class SomeDao {
private DataSource dataSource;
public void setDataSource(DataSource dataSource) {
this.dataSource = dataSource;
}
public void accessDatabase() {
Connection conn = null;
try {
conn = dataSource.getConnection();
// ... 数据库操作 ...
} catch (Exception e) {
e.printStackTrace();
} finally {
if (conn != null) {
try {
conn.close();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
}
```
#### 3. 避免硬编码数据库连接信息
无论使用JNDI还是Spring管理，均应将数据库连接URL、用户名、密码等敏感信息从代码中移除，配置在应用服务器、properties文件或环境变量中，通过配置方式获取。
SOLUTION
	risk: "代码风格",
	desc: <<<DESC
### 漏洞描述
1. **漏洞原理**
由于应用程序未对用户输入进行严格的过滤或参数化处理，攻击者可通过构造特殊输入篡改原始SQL语句的逻辑。这可能导致非预期的数据库操作，例如数据泄露、数据篡改或权限绕过。
2. **触发场景**
// 存在漏洞的代码示例
```java
$id = $_GET['id']; // 未过滤的用户输入
$query = "SELECT * FROM users WHERE id = " . $id; // 直接拼接
$result = mysql_query($query);
```
攻击者输入 `1 OR 1=1` 可绕过业务逻辑，泄露所有用户数据；输入 `1; DROP TABLE users` 可能导致数据表被删除。
3. **潜在影响**
- 数据库敏感信息（如用户凭证、隐私数据）被窃取。
- 执行任意SQL语句（如插入、删除、修改数据或数据库结构）。
- 通过数据库提权进一步渗透至服务器或其他系统组件。
DESC
	name: "get",
}

desc(
	lang:java
	alert_num:1
	"file://demo.java":<<<CODE
    import java.sql.Connection;
    import java.sql.DriverManager;
    import javax.servlet.http.HttpServlet;

    public class MyServlet extends HttpServlet {
        protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp) {
            try {
                // 直接用 DriverManager 获取连接（不推荐）
                Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/mydb", "user", "password"
                );
                // ... 业务逻辑 ...
                conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
CODE
	"safefile://SafeJndiDataSource.java": <<<CODE
// 推荐做法：通过JNDI获取DataSource，由应用服务器管理连接
import javax.naming.InitialContext;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

public class SafeJndiDataSource {
    private static final String DATA_SOURCE_JNDI_NAME = "java:comp/env/jdbc/MyDataSource"; // 示例JNDI名称

    public void useDataSource() {
        Connection conn = null;
        try {
            // 从JNDI查找DataSource
            InitialContext ctx = new InitialContext();
            DataSource dataSource = (DataSource) ctx.lookup(DATA_SOURCE_JNDI_NAME);
            
            // 从DataSource获取连接
            conn = dataSource.getConnection();
            System.out.println("Connection obtained via JNDI DataSource.");
            // 执行数据库操作...
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                    System.out.println("Connection closed.");
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    // 模拟应用服务器配置的DataSource启动方法
    public static void main(String[] args) {
        // 实际场景中，DataSource由应用服务器如Tomcat, JBoss等配置和提供
        // 这里只是为了示例编译通过，不代表真正的JNDI实现
        // 通常不需要在main方法中手动注册JNDI
        // System.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.naming.java.javaURLContextFactory");
        // System.setProperty(Context.URL_PKG_PREFIXES, "org.apache.naming");
        // InitialContext ic = new InitialContext();
        // ic.createSubcontext("java:");
        // ic.createSubcontext("java:comp");
        // ic.createSubcontext("java:comp/env");
        // ic.createSubcontext("java:comp/env/jdbc");
        // BasicDataSource ds = new BasicDataSource();
        // ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
        // ds.setUrl("jdbc:mysql://localhost:3306/testdb");
        // ds.setUsername("user");
        // ds.setPassword("password");
        // ic.bind("java:comp/env/jdbc/MyDataSource", ds);

        SafeJndiDataSource app = new SafeJndiDataSource();
        app.useDataSource();
    }
}
CODE
	"safefile://SafeSpringDataSource.java": <<<CODE
// 推荐做法：使用Spring框架管理DataSource，通过依赖注入获取连接
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

public class SafeSpringDataSource {
    private DataSource dataSource;

    // 由Spring自动注入dataSource
    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public void useDataSource() {
        Connection conn = null;
        if (dataSource == null) {
            System.err.println("DataSource not injected. Check Spring configuration.");
            return;
        }
        try {
            conn = dataSource.getConnection();
            System.out.println("Connection obtained via Spring managed DataSource.");
            // 执行数据库操作...
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                    System.out.println("Connection closed.");
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) {
        // 加载Spring配置
        // 假设有一个 applicationContext.xml 文件在 classpath 中
        // 定义了一个名为 'dataSource' 的bean和名为 'springBean' 的 SafeSpringDataSource Bean
        /*
         * applicationContext.xml 示例内容:
         * <?xml version="1.0" encoding="UTF-8"?>
         * <beans xmlns="http://www.springframework.org/schema/beans"
         *        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         *        xsi:schemaLocation="http://www.springframework.org/schema/beans
         *        http://www.springframework.org/schema/beans/spring-beans.xsd">
         *
         *     <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
         *         <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
         *         <property name="url" value="jdbc:mysql://localhost:3306/testdb"/>
         *         <property name="username" value="user"/>
         *         <property name="password" value="password"/>
         *     </bean>
         *
         *     <bean id="springBean" class="SafeSpringDataSource">
         *         <property name="dataSource" ref="dataSource"/>
         *     </bean>
         *
         * </beans>
         */
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        SafeSpringDataSource springBean = (SafeSpringDataSource) context.getBean("springBean");
        springBean.useDataSource();
    }
}
CODE
)
