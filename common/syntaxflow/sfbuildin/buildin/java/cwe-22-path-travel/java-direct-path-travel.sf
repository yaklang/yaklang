desc(
    title: "Check Direct Path Travel Vulnerability For Java",
    title_zh: "检测Java直接路径穿越漏洞",
    type: vuln,
    risk: "path-traversal",
    desc: <<<TEXT
直接路径穿越漏洞（也称为目录遍历漏洞）允许攻击者通过操纵输入参数，访问或执行服务器上的任意文件。在Java应用中，这种漏洞通常出现在未对用户输入进行适当验证或清理的情况下，导致攻击者可以读取敏感文件或执行任意代码。为了防范这种漏洞，应严格验证和清理所有用户输入，确保它们仅指向预期的文件或目录。
TEXT
)

<include('java-spring-param')> as $source;
<include('java-servlet-param')> as $source;
<include('java-write-filename-sink')> as  $sink;
<include('java-read-filename-sink')> as  $sink;


$sink #{
    include:`<self> & $source`,
    exclude:`<self>?{opcode:call}?{!<self> & $source}?{!<self> & $sink}`
}->as $high;

alert $high for {
    message: "Find direct path travel vulnerability for java",
    type: vuln,
    level: high,
};

desc(
    alert_min: 1,
    language: java,
    'file://PathTravel.java': <<<EOF
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class InsecureFileReaderServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String fileName = request.getParameter("file");
        String filePath = "path/to/safe/directory/" + fileName;

        File file = new File(filePath);

        if (file.exists() && file.isFile()) {
            FileReader fileReader = new FileReader(file);
            char[] buffer = new char[1024];
            int length;

            OutputStream out = response.getOutputStream();
            while ((length = fileReader.read(buffer)) > 0) {
                out.write(new String(buffer, 0, length).getBytes());
            }
            fileReader.close();
            out.close();
        } else {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found.");
        }
    }
}
EOF
)

desc(
    language: java,
    alert_min:1,
    'file://unSafe.java': <<<EOF
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;

public class SecureServlet extends HttpServlet {

    private static final String BASE_DIR = "/usr/local/apache-tomcat/webapps/ROOT/safe_directory/";

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String requestedFile = request.getParameter("file");

        String path= Util.Check(requestedFile);

        File file = new File(BASE_DIR + path);
        if (!file.getCanonicalPath().startsWith(new File(BASE_DIR).getCanonicalPath())) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access denied");
            return;
        }
        if (!file.exists()) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
            return;
        }
        response.setContentType("text/plain");
        try (OutputStream out = response.getOutputStream();
             FileInputStream in = new FileInputStream(file)) {
            byte[] buffer = new byte[4096];
            int length;
            while ((length = in.read(buffer)) > 0) {
                out.write(buffer, 0, length);
            }
        }
    }
}
EOF
)

