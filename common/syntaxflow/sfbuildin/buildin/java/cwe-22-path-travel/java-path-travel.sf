desc(
	title: "Check Java Path Traversal Vulnerability"
	title_zh: "检测Java路径穿越漏洞"
	type: vuln
	risk: "path-traversal"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   路径 Traversal（也称为目录遍历）漏洞允许攻击者通过操纵文件路径参数，访问或执行服务器上受限目录之外的任意文件。在 Java 应用程序中，当应用程序直接使用用户提供的文件名或路径片段构建文件操作路径，且未对用户输入进行充分验证或清理时（例如去除 `../` 或其他目录遍历符），攻击者即可构造包含 `../` 等特殊字符的输入，向上遍历目录结构，访问位于应用程序根目录之外的文件，如配置文件、源代码、敏感数据文件甚至系统文件（如 `/etc/passwd`）。

2. **触发场景**
   以下代码示例未对用户输入的 `fileName` 进行充分验证，直接将其拼接在基本路径后创建文件对象并进行读取，存在路径穿越风险：
   ```java
   import java.io.File;
   import java.io.FileReader;
   import java.io.IOException;
   import java.io.OutputStream;
   import javax.servlet.ServletException;
   import javax.servlet.http.HttpServlet;
   import javax.servlet.http.HttpServletRequest;
   import javax.servlet.http.HttpServletResponse;

   public class InsecureFileReaderServlet extends HttpServlet {
       @Override
       protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
           String fileName = request.getParameter("file");
           String filePath = "path/to/safe/directory/" + fileName; // 未对fileName进行检查或清理

           File file = new File(filePath);
           // ... 后续文件读取操作
       }
   }
   ```
   攻击者可以通过构造 `fileName` 为 `../../../../etc/passwd` 来尝试读取系统密码文件。

3. **潜在影响**
   - **信息泄露**: 攻击者可以读取任意敏感文件，包括配置文件、源代码、用户上传文件、私钥等。
   - **文件篡改或删除**: 如果应用程序允许写入或删除文件，攻击者可能利用此漏洞修改或删除服务器上的关键文件，导致拒绝服务或进一步入侵。
   - **远程代码执行（RCE）**: 在某些情况下，如果攻击者能够上传或修改可执行文件并诱导服务器执行，可能导致远程代码执行。
   - **进一步攻击**: 获取的敏感信息可能被用于进行更复杂的攻击，如提权、内网渗透等。
DESC
	rule_id: "7b798768-13e1-4dcd-8ab5-99a6f9635605"
	solution: <<<SOLUTION
### 修复建议

#### 1. 验证和清理用户输入
在将用户输入用于构建文件路径之前，必须进行严格的验证和清理，移除目录穿越字符（如 `../`）。可以使用正则表达式或特定的安全库函数。

```java
// 修复代码示例 (简单清理示例，更健壮的清理需要考虑多种编码和操作系统差异)
String fileName = request.getParameter("file");
if (fileName != null) {
    // 移除 '../' 和 '..\\' 等目录穿越字符
    fileName = fileName.replace("../", "").replace("..\\", "");
    // 还可以进一步限制文件名只能包含字母、数字和特定安全字符
    if (!fileName.matches("^[a-zA-Z0-9_\\-\\|\\.\\u4e00-\\u9fa5]+$")) {
         response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid file name.");
         return;
    }
}
String filePath = "path/to/safe/directory/" + fileName;
```

#### 2. 使用标准库方法验证规范路径
在文件操作前，获取文件的规范路径（Canonical Path），并检查该规范路径是否位于预期的安全目录下。这是更推荐和健壮的方法。

```java
// 修复代码示例 (使用 Canonical Path 验证)
private static final String BASE_DIR = "/usr/local/apache-tomcat/webapps/ROOT/safe_directory/";

protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    String requestedFile = request.getParameter("file");

    // 构建潜在的完整路径
    File file = new File(BASE_DIR, requestedFile);

    // 获取文件的规范路径，此方法会解析并消除目录穿透符
    String canonicalRequestedPath = file.getCanonicalPath();
    String canonicalBaseDirPath = new File(BASE_DIR).getCanonicalPath();

    // 检查文件的规范路径是否以安全目录的规范路径开头
    if (!canonicalRequestedPath.startsWith(canonicalBaseDirPath)) {
        response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access denied");
        return;
    }

    // ... 后续的文件读取操作，现在可以安全地使用 file 对象
    if (!file.exists()) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
        return;
    }
    // ... 安全的文件操作
}
```

#### 3. 限制文件访问范围
配置应用程序或 Web 服务器，限制其只能访问特定的目录，或者使用沙箱机制隔离文件操作。

#### 4. 使用白名单验证
如果可能，不要接受用户输入的完整文件名或路径，而是让用户选择预定义的安全文件列表中的文件（白名单方式）。
SOLUTION
	reference: <<<REFERENCE
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')](https://cwe.mitre.org/data/definitions/22.html)
REFERENCE
)

<include('java-spring-mvc-param')> as $source;
<include('java-servlet-param')> as $source;
<include('java-write-filename-sink')> as  $sink;
<include('java-read-filename-sink')> as  $sink;


$sink #{
    include:`* & $source`,
    exclude:`* ?{opcode:call}?{!<self> & $source}?{!<self> & $sink}`,
    exclude:`* ?{opcode:phi}`,
}->as $high;

alert $high for {
    message: "Java代码中发现路径穿越漏洞，并且数据流中间没有进行任何过滤。",
    type: vuln,
    level: high,
};

$sink #{
    include:`<self> & $source`,
}->as $result;

$result - $high as $low;
alert $low for {
    message: "Java代码中可能存在路径穿越漏洞。",
    type: vuln,
    level: low,
};

desc(
	alert_high: 1
	language: java
	'file://PathTravel.java': <<<EOF
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class InsecureFileReaderServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String fileName = request.getParameter("file");
        String filePath = "path/to/safe/directory/" + fileName;

        File file = new File(filePath);

        if (file.exists() && file.isFile()) {
            FileReader fileReader = new FileReader(file);
            char[] buffer = new char[1024];
            int length;

            OutputStream out = response.getOutputStream();
            while ((length = fileReader.read(buffer)) > 0) {
                out.write(new String(buffer, 0, length).getBytes());
            }
            fileReader.close();
            out.close();
        } else {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found.");
        }
    }
}
EOF
)

desc(
	language: java
	alert_min:1
	'file://unSafe.java': <<<EOF
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;

public class SecureServlet extends HttpServlet {

    private static final String BASE_DIR = "/usr/local/apache-tomcat/webapps/ROOT/safe_directory/";

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String requestedFile = request.getParameter("file");

        String path= Util.Check(requestedFile);

        File file = new File(BASE_DIR + path);
        if (!file.getCanonicalPath().startsWith(new File(BASE_DIR).getCanonicalPath())) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access denied");
            return;
        }
        if (!file.exists()) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
            return;
        }
        response.setContentType("text/plain");
        try (OutputStream out = response.getOutputStream();
             FileInputStream in = new FileInputStream(file)) {
            byte[] buffer = new byte[4096];
            int length;
            while ((length = in.read(buffer)) > 0) {
                out.write(buffer, 0, length);
            }
        }
    }
}
EOF
)

desc(
	alert_low:1
	"file://complex1.java": <<<EOF
    package com.ruoyi.web.controller.common;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.multipart.MultipartFile;
    import com.ruoyi.common.config.Global;
    import com.ruoyi.common.config.ServerConfig;
    import com.ruoyi.common.constant.Constants;
    import com.ruoyi.common.core.domain.AjaxResult;
    import com.ruoyi.common.utils.StringUtils;
    import com.ruoyi.common.utils.file.FileUploadUtils;
    import com.ruoyi.common.utils.file.FileUtils;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.OutputStream;
    import java.io.UnsupportedEncodingException;
    import java.net.URLEncoder;
    import javax.servlet.http.HttpServletRequest;

public class FileUtils
{
    public static String FILENAME_PATTERN = "[a-zA-Z0-9_\\-\\|\\.\\u4e00-\\u9fa5]+";
    /**
     * 文件名称验证
     *
     * @param filename 文件名称
     * @return true 正常 false 非法
     */
    public static boolean isValidFilename(String filename)
    {
        return filename.matches(FILENAME_PATTERN);
    }

     /**
     * 输出指定文件的byte数组
     *
     * @param filePath 文件路径
     * @param os 输出流
     * @return
     */
    public static void writeBytes(String filePath, OutputStream os) throws IOException
    {
        FileInputStream fis = null;
        try
        {
            File file = new File(filePath);
            if (!file.exists())
            {
                throw new FileNotFoundException(filePath);
            }
            fis = new FileInputStream(file);
            byte[] b = new byte[1024];
            int length;
            while ((length = fis.read(b)) > 0)
            {
                os.write(b, 0, length);
            }
        }
        catch (IOException e)
        {
            throw e;
        }
        finally
        {
            if (os != null)
            {
                try
                {
                    os.close();
                }
                catch (IOException e1)
                {
                    e1.printStackTrace();
                }
            }
            if (fis != null)
            {
                try
                {
                    fis.close();
                }
                catch (IOException e1)
                {
                    e1.printStackTrace();
                }
            }
        }
    }
}

    @Controller
    public class CommonController
    {
        private static final Logger log = LoggerFactory.getLogger(CommonController.class);

        @Autowired
        private ServerConfig serverConfig;

        /**
         * 通用下载请求
         *
         * @param fileName 文件名称
         * @param delete 是否删除
         */
        @GetMapping("common/download")
        public void fileDownload(String fileName, Boolean delete, HttpServletResponse response, HttpServletRequest request)
        {
            try
            {
                if (!FileUtils.isValidFilename(fileName))
                {
                   return;
                }
                String realFileName = System.currentTimeMillis() + fileName.substring(fileName.indexOf("_") + 1);
                String filePath = Global.getDownloadPath() + fileName;

                response.setCharacterEncoding("utf-8");
                response.setContentType("multipart/form-data");
                response.setHeader("Content-Disposition",
                        "attachment;fileName=" + FileUtils.setFileDownloadHeader(request, realFileName));
                FileUtils.writeBytes(filePath, response.getOutputStream());
                if (delete)
                {
                    FileUtils.deleteFile(filePath);
                }
            }
            catch (Exception e)
            {
                log.error("下载文件失败", e);
            }
        }
    }
EOF
)

