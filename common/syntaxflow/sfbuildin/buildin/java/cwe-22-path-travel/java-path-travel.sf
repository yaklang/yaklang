desc(
    title: "Check Direct Path Travel Vulnerability For Java",
    title_zh: "检测Java直接路径穿越漏洞",
    type: vuln,
    risk: "path-traversal",
    desc: <<<TEXT
直接路径穿越漏洞（也称为目录遍历漏洞）允许攻击者通过操纵输入参数，访问或执行服务器上的任意文件。在Java应用中，这种漏洞通常出现在未对用户输入进行适当验证或清理的情况下，导致攻击者可以读取敏感文件或执行任意代码。为了防范这种漏洞，应严格验证和清理所有用户输入，确保它们仅指向预期的文件或目录。
TEXT
)

<include('java-spring-param')> as $source;
<include('java-servlet-param')> as $source;
<include('java-write-filename-sink')> as  $sink;
<include('java-read-filename-sink')> as  $sink;


$sink #{
    include:`* & $source`,
    exclude:`* ?{opcode:call}?{!<self> & $source}?{!<self> & $sink}`,
    exclude:`* ?{opcode:phi}`,
}->as $high;

alert $high for {
    message: "Java代码中发现路径穿越漏洞，并且数据流中间没有进行任何过滤。",
    type: vuln,
    level: high,
};

$sink #{
    include:`<self> & $source`,
}->as $result;

$result - $high as $low;
alert $low for {
    message: "Java代码中可能存在路径穿越漏洞。",
    type: vuln,
    level: low,
};

desc(
    alert_high: 1,
    language: java,
    'file://PathTravel.java': <<<EOF
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class InsecureFileReaderServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String fileName = request.getParameter("file");
        String filePath = "path/to/safe/directory/" + fileName;

        File file = new File(filePath);

        if (file.exists() && file.isFile()) {
            FileReader fileReader = new FileReader(file);
            char[] buffer = new char[1024];
            int length;

            OutputStream out = response.getOutputStream();
            while ((length = fileReader.read(buffer)) > 0) {
                out.write(new String(buffer, 0, length).getBytes());
            }
            fileReader.close();
            out.close();
        } else {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found.");
        }
    }
}
EOF
)

desc(
    language: java,
    alert_min:1,
    'file://unSafe.java': <<<EOF
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;

public class SecureServlet extends HttpServlet {

    private static final String BASE_DIR = "/usr/local/apache-tomcat/webapps/ROOT/safe_directory/";

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String requestedFile = request.getParameter("file");

        String path= Util.Check(requestedFile);

        File file = new File(BASE_DIR + path);
        if (!file.getCanonicalPath().startsWith(new File(BASE_DIR).getCanonicalPath())) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access denied");
            return;
        }
        if (!file.exists()) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
            return;
        }
        response.setContentType("text/plain");
        try (OutputStream out = response.getOutputStream();
             FileInputStream in = new FileInputStream(file)) {
            byte[] buffer = new byte[4096];
            int length;
            while ((length = in.read(buffer)) > 0) {
                out.write(buffer, 0, length);
            }
        }
    }
}
EOF
)

desc(
    alert_low:1,
    "file://complex1.java": <<<EOF
    package com.ruoyi.web.controller.common;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.multipart.MultipartFile;
    import com.ruoyi.common.config.Global;
    import com.ruoyi.common.config.ServerConfig;
    import com.ruoyi.common.constant.Constants;
    import com.ruoyi.common.core.domain.AjaxResult;
    import com.ruoyi.common.utils.StringUtils;
    import com.ruoyi.common.utils.file.FileUploadUtils;
    import com.ruoyi.common.utils.file.FileUtils;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.OutputStream;
    import java.io.UnsupportedEncodingException;
    import java.net.URLEncoder;
    import javax.servlet.http.HttpServletRequest;

public class FileUtils
{
    public static String FILENAME_PATTERN = "[a-zA-Z0-9_\\-\\|\\.\\u4e00-\\u9fa5]+";
    /**
     * 文件名称验证
     *
     * @param filename 文件名称
     * @return true 正常 false 非法
     */
    public static boolean isValidFilename(String filename)
    {
        return filename.matches(FILENAME_PATTERN);
    }

     /**
     * 输出指定文件的byte数组
     *
     * @param filePath 文件路径
     * @param os 输出流
     * @return
     */
    public static void writeBytes(String filePath, OutputStream os) throws IOException
    {
        FileInputStream fis = null;
        try
        {
            File file = new File(filePath);
            if (!file.exists())
            {
                throw new FileNotFoundException(filePath);
            }
            fis = new FileInputStream(file);
            byte[] b = new byte[1024];
            int length;
            while ((length = fis.read(b)) > 0)
            {
                os.write(b, 0, length);
            }
        }
        catch (IOException e)
        {
            throw e;
        }
        finally
        {
            if (os != null)
            {
                try
                {
                    os.close();
                }
                catch (IOException e1)
                {
                    e1.printStackTrace();
                }
            }
            if (fis != null)
            {
                try
                {
                    fis.close();
                }
                catch (IOException e1)
                {
                    e1.printStackTrace();
                }
            }
        }
    }
}

    @Controller
    public class CommonController
    {
        private static final Logger log = LoggerFactory.getLogger(CommonController.class);

        @Autowired
        private ServerConfig serverConfig;

        /**
         * 通用下载请求
         *
         * @param fileName 文件名称
         * @param delete 是否删除
         */
        @GetMapping("common/download")
        public void fileDownload(String fileName, Boolean delete, HttpServletResponse response, HttpServletRequest request)
        {
            try
            {
                if (!FileUtils.isValidFilename(fileName))
                {
                   return;
                }
                String realFileName = System.currentTimeMillis() + fileName.substring(fileName.indexOf("_") + 1);
                String filePath = Global.getDownloadPath() + fileName;

                response.setCharacterEncoding("utf-8");
                response.setContentType("multipart/form-data");
                response.setHeader("Content-Disposition",
                        "attachment;fileName=" + FileUtils.setFileDownloadHeader(request, realFileName));
                FileUtils.writeBytes(filePath, response.getOutputStream());
                if (delete)
                {
                    FileUtils.deleteFile(filePath);
                }
            }
            catch (Exception e)
            {
                log.error("下载文件失败", e);
            }
        }
    }
EOF
)

