desc(
	title: "golang Reflected XSS(template)"
	type: audit
	severity: high
	desc: <<<TEXT
反射型跨站脚本攻击（Reflected XSS）是一种常见的 Web 安全漏洞，攻击者通过构造包含恶意脚本的 URL，诱使受害者点击该链接。当受害者浏览器加载该页面时，恶意脚本会被执行，从而允许攻击者窃取受害者的敏感信息或执行其他恶意操作。

在 Go 语言编写的 Web 应用中，如果未对用户输入进行适当的过滤或转义，直接将用户输入嵌入到 HTML 页面中，就可能导致反射型 XSS 漏洞。此漏洞具有高风险，因为它允许攻击者绕过同源策略，执行任意 JavaScript 代码，对受害者进行攻击。

反射型 XSS 漏洞通常发生在以下场景：
1. 用户输入被直接嵌入到 HTML 页面中，例如通过 `{{ .Name }}` 渲染动态内容。
2. 未对用户输入进行 HTML 转义，导致恶意脚本被浏览器解析执行。
TEXT
	rule_id: "bbd6022f-3cb9-4e59-a61a-ad28ed0f58a0"
)

<include('golang-template')> as $template;
$template.New as $new;
$new().Parse() -> as $param
$param.Execute(* as $target) 
$target #{include: `*?{have: 'template.HTML'}`}-> as $high;

alert $high for {
    title: 'Reflected XSS detected',
    title_zh: '检测到反射XSS',
    type: 'vuln',
    level: 'high',
}

desc(
	lang: golang
	alert_high: 1
	'file://main.go': <<<UNSAFE
package example

import (
	"html/template"
	"net/http"
)

func handler(w http.ResponseWriter, r *http.Request) {
	tmpl := template.Must(template.New("example").Parse(`
        <html>
        <body>
            <h1>Hello, {{ .Name }}</h1>
        </body>
        </html>
    `))

	data := struct {
		Name string
	}{
		Name: template.HTML(r.FormValue("name")), // 从用户输入获取 name 参数
	}

	tmpl.Execute(w, data) // 自动对输出进行转义
}

func main() {
	http.HandleFunc("/", handler)
	http.ListenAndServe(":8080", nil)
}
UNSAFE
)
