desc(
	title: "Check Golang Open Redirect Vulnerability"
	title_zh: "检测Golang开放重定向漏洞"
	type: audit
	level: high
	risk: "url-redirect"
	desc: <<<DESC
开放重定向漏洞（Open Redirect）是一种安全漏洞，它允许攻击者将用户重定向到一个未经授权的、潜在的恶意网站。在Golang中，特别是使用gin框架时，如果重定向的目标URL由用户控制且未经适当验证，就可能出现这种漏洞。规则目的在于检测代码中可能导致开放重定向的函数调用，如`gin.Context.Redirect`。

**漏洞原理**：当应用程序接收到一个重定向请求时，如果目标URL参数是用户可控的，并且没有进行严格的验证或过滤，攻击者可以构造一个恶意URL，诱导用户访问恶意站点。

**触发场景**：在gin的`Redirect`函数中，目标URL直接来自于用户的输入，如`c.Query("redirect")`或`c.PostForm("redirect")`。

**潜在影响**：可能导致用户被重定向到钓鱼网站，泄露敏感信息，或执行恶意操作。
DESC
	rule_id: "ca510247-27ae-4a3b-8048-9d6433b26653"
	solution: <<<SOLUTION
为了避免开放重定向漏洞，应采取以下措施：

1. 不要直接使用用户输入作为重定向的目标URL。
2. 如果必须使用用户输入，应对输入进行白名单验证，确保其指向可信的域名。
3. 使用安全的URL构建方法，如使用硬编码的基础URL与用户输入拼接。

**修复代码示例**：
```go
func SafeRedirect(c *gin.Context) {
	baseUrl := "https://baidu.com/path?q="
	loc := c.Query("redirect")
	// 对loc进行验证
	c.Redirect(302, baseUrl+loc)
}
```
SOLUTION
	reference: <<<REFERENCE
https://owasp.org/www-community/vulnerabilities/Open_Redirector
REFERENCE
)

<include('golang-gin-context')> as $sink 
$sink.Redirect(,,* #-> as $param)

$param.Query as $high
$param.PostForm as $high

alert $high for {
	title: "Check Golang Open Redirect Vulnerability",
	title_zh: "检测Golang开放重定向漏洞",
	level: "high",
	type: "vuln",
}

desc(
	lang: golang
	alert_high: 1
	'file://main.go': <<<UNSAFE
package unAuth

import "github.com/gin-gonic/gin"

func Redirect(c *gin.Context) {
	var loc string
	// Check the request method
	if c.Request.Method == "GET" {
		loc = c.Query("redirect")
	} else if c.Request.Method == "POST" {
		loc = c.PostForm("redirect")
	}
	c.Redirect(302, loc)
}

func SafeRedirect(c *gin.Context) {
	baseUrl := "https://baidu.com/path?q="
	loc := c.Query("redirect")
	c.Redirect(302, baseUrl+loc)
}

UNSAFE
)
