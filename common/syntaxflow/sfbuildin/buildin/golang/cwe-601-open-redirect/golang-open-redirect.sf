desc(
    title: "golang open redirect",
    type: audit,
    level: high,
    desc: <<<TEXT
开放重定向漏洞（CWE-601）是一种严重的安全漏洞，允许攻击者构造恶意URL诱导用户访问钓鱼网站或其他恶意域名。当应用程序未对重定向目标进行严格验证时，攻击者可通过篡改URL参数（如redirect_to或url）将用户导向不受信任的外部域名。这种漏洞通常出现在使用http.Redirect函数时，未对目标URL进行验证或限制。

开放重定向漏洞通常发生在以下场景：
1. 用户提供的URL参数直接用于重定向目标，例如 http.Redirect(w, r, target, http.StatusFound)。
2. 未对目标URL进行验证，导致攻击者可以通过构造恶意URL实现重定向。

攻击者可以通过构造如下URL进行攻击：
- http://example.com/redirect?url=http://malicious.com
当应用程序执行重定向时，用户会被导向恶意网站，可能导致钓鱼攻击或其他欺诈行为。
TEXT
)

http?{<fullTypeName>?{have: 'net/http'}} as $http;
$http.Redirect(*<slice(index=2)> #-> as $target);

url?{<fullTypeName>?{have: 'net/url'}} as $url;
$url.Parse(* #-> as $param);

$param #{until: `* & $target`}-> as $check;
$target as $high

alert $high for {
    title: 'open redirect vulnerability check',
    title_zh: '检测到重定向漏洞',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 1,
    'file://main.go': <<<UNSAFE
package main

import (
    "net/http"
    "net/url"
    "strings"
)

func redirectHandler(w http.ResponseWriter, r *http.Request) {
    // 从查询参数中获取重定向目标
    target := r.URL.Query().Get("url")

    // 验证目标 URL 是否合法
    // if !isValidRedirectTarget(target) {
    //     http.Error(w, "Invalid redirect target", http.StatusBadRequest)
    //     return
    // }

    // 重定向到目标 URL
    http.Redirect(w, r, target, http.StatusFound)
}

// 验证重定向目标是否合法
func isValidRedirectTarget(target string) bool {
    // 解析目标 URL
    u, err := url.Parse(target)
    if err != nil {
        return false
    }

    // 只允许重定向到同一域名下的地址
    if u.Host != "" && u.Host != "localhost:8080" {
        return false
    }

    // 只允许 HTTP 和 HTTPS 协议
    if u.Scheme != "http" && u.Scheme != "https" {
        return false
    }

    return true
}

func main() {
    http.HandleFunc("/redirect", redirectHandler)
    http.ListenAndServe(":8080", nil)
}

UNSAFE
)
