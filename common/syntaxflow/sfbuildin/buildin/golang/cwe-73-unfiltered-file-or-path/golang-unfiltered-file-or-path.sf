desc(
    title: "golang Unfiltered File-or-Path",
    type: audit,
    severity: high,
    desc: <<<TEXT
未过滤的文件或路径访问漏洞（Unfiltered File-or-Path）允许攻击者通过操纵输入参数来访问服务器上的任意文件。在Go语言应用中，如果开发者未能正确验证或过滤用户输入的文件路径，攻击者可能会利用此漏洞读取敏感文件（如配置文件、数据库凭证等），甚至执行任意代码。这种漏洞通常发生在文件读取功能中，当应用未能限制用户输入的文件路径时，攻击者可以构造恶意请求来访问服务器上的任意文件，进而获取敏感信息或破坏系统。
TEXT
)

<include('golang-file-read')> as $read;
$read --> as $sink;
strings.HasPrefix() as $check;
$sink?{<self>-{
    until: `* & $check`,
}->} as $high;

alert $high for {
    title: 'Reflected XSS detected',
    title_zh: '检测到未过滤路径',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 0,
    'safe://main.go': <<<SAFE
package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
    "path/filepath"
    "strings"
)

const allowedBasePath = "/allowed/path/"

func handler(w http.ResponseWriter, r *http.Request) {
    userInput := r.URL.Query().Get("file")

    // 清洗路径并转换为绝对路径
    requestedPath := filepath.Join(allowedBasePath, userInput)
    cleanedPath := filepath.Clean(requestedPath)

    // 验证路径是否在允许的基础路径下
    if !strings.HasPrefix(cleanedPath, allowedBasePath) {
        http.Error(w, "Invalid file path", http.StatusBadRequest)
        return
    }

    // 读取文件
    content, err := ioutil.ReadFile(cleanedPath)
    if err != nil {
        http.Error(w, "File not found", http.StatusNotFound)
        return
    }

    // 返回文件内容
    w.Write(content)
}

func main() {
    http.HandleFunc("/", handler)
    fmt.Println("Server is running on :8080")
    http.ListenAndServe(":8080", nil)
}
SAFE,
    'unsafe://main.go': <<<UNSAFE
package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
    "path/filepath"
    "strings"
)

const allowedBasePath = "/allowed/path/"

func handler(w http.ResponseWriter, r *http.Request) {
    userInput := r.URL.Query().Get("file")

    // 清洗路径并转换为绝对路径
    requestedPath := filepath.Join(allowedBasePath, userInput)
    cleanedPath := filepath.Clean(requestedPath)

    // 读取文件
    content, err := ioutil.ReadFile(cleanedPath)
    if err != nil {
        http.Error(w, "File not found", http.StatusNotFound)
        return
    }

    // 返回文件内容
    w.Write(content)
}

func main() {
    http.HandleFunc("/", handler)
    fmt.Println("Server is running on :8080")
    http.ListenAndServe(":8080", nil)
}
UNSAFE
)

