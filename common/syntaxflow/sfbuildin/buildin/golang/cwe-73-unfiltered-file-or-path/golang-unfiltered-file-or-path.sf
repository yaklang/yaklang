desc(
    title: "golang Unfiltered File-or-Path",
    type: audit,
    severity: low,
    desc: <<<TEXT
未过滤的文件或路径访问漏洞（Unfiltered File-or-Path）允许攻击者通过操纵输入参数来访问服务器上的任意文件。在 Go 语言应用中，如果开发者未能正确验证或过滤用户输入的文件路径，攻击者可能会利用此漏洞读取敏感文件（如配置文件、数据库凭证等），甚至执行任意代码。

这种漏洞通常发生在文件读取功能中，当应用未能限制用户输入的文件路径时，攻击者可以构造恶意请求来访问服务器上的任意文件，进而获取敏感信息或破坏系统。例如，攻击者可以通过路径遍历（如 `../../etc/passwd`）访问系统文件。

为了防止此类漏洞，开发者应始终对用户输入的文件路径进行严格的验证和过滤，确保路径在允许的范围内。具体措施包括：
1. 使用 `filepath.Clean` 清洗路径，去除多余的 `..` 和 `.`。
2. 使用 `strings.HasPrefix` 或 `filepath.IsAbs` 验证路径是否在允许的基础路径下。
3. 避免直接使用用户输入的文件路径，而是将其与预定义的安全路径结合。
TEXT
)

<include('golang-file-path')> as $path;
<include('golang-file-read-sink')> as $sink;
<include('golang-file-write-sink')> as $sink;

strings.HasPrefix(* #-> as $check);
$path.Clean(* #-> as $check);
$path.IsAbs(* #-> as $check);

$sink #{include: `$check`}-> as $safe;
$sink #{exclude: `$safe`}-> as $low;

alert $low for {
    title: 'Reflected XSS detected',
    title_zh: '检测到未过滤路径',
    type: 'vuln',
    level: 'low',
}

desc(
    lang: golang,
    alert_low: 1,
    'unsafe://main.go': <<<UNSAFE
package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
    "path/filepath"
    "strings"
)

const allowedBasePath = "/allowed/path/"

func handler(w http.ResponseWriter, r *http.Request) {
    userInput := r.URL.Query().Get("file")

    // 清洗路径并转换为绝对路径
    requestedPath := filepath.Join(allowedBasePath, userInput)

    // 读取文件
    content, err := ioutil.ReadFile(requestedPath)
    if err != nil {
        http.Error(w, "File not found", http.StatusNotFound)
        return
    }

    // 返回文件内容
    w.Write(content)
}

func main() {
    http.HandleFunc("/", handler)
    fmt.Println("Server is running on :8080")
    http.ListenAndServe(":8080", nil)
}
UNSAFE,
    'safe://main.go': <<<SAFE
package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
    "path/filepath"
    "strings"
)

const allowedBasePath = "/allowed/path/"

func handler(w http.ResponseWriter, r *http.Request) {
    userInput := r.URL.Query().Get("file")

    // 清洗路径并转换为绝对路径
    requestedPath := filepath.Join(allowedBasePath, userInput)
    cleanedPath := filepath.Clean(requestedPath)

    // 验证路径是否在允许的基础路径下
    if !strings.HasPrefix(cleanedPath, allowedBasePath) {
        http.Error(w, "Invalid file path", http.StatusBadRequest)
        return
    }

    // 读取文件
    content, err := ioutil.ReadFile(cleanedPath)
    if err != nil {
        http.Error(w, "File not found", http.StatusNotFound)
        return
    }

    // 返回文件内容
    w.Write(content)
}

func main() {
    http.HandleFunc("/", handler)
    fmt.Println("Server is running on :8080")
    http.ListenAndServe(":8080", nil)
}
SAFE
)

