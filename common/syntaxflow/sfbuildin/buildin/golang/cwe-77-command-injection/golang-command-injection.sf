desc(
    title: "golang Command Injection",
    type: audit,
    severity: high,
    rule_id: 10077001,
    desc: <<<TEXT
命令注入漏洞（Command Injection）允许攻击者通过输入恶意数据来执行任意命令。在 Golang 应用程序中，如果使用 `os/exec` 包执行外部命令时未对用户输入进行适当的清理和验证，攻击者可以通过构造特殊的输入来执行不受信任的命令，进而控制服务器或访问敏感数据。

这种漏洞通常发生在以下场景：
1. 将用户输入直接拼接到命令字符串中，例如 `exec.Command("echo", userInput)`。
2. 使用不安全的函数或方法构建命令，例如通过字符串拼接或格式化。

攻击者可以利用命令注入漏洞执行以下操作：
- 执行任意系统命令，例如删除文件、修改配置或启动恶意进程。
- 访问敏感数据，例如读取系统文件或数据库凭证。
- 控制服务器，例如通过反向 Shell 获取服务器权限。

以下是一个安全示例：
- 使用 `os/exec` 包的 `Command` 方法，并将用户输入作为独立参数传递。
- 对用户输入进行严格的验证，确保其符合预期格式。
TEXT
)

<include('golang-os-exec')> as $sink;
$sink?{have: 'Parameter'} as $check;

strings?{<fullTypeName>?{have: 'strings'}} as $entry;
$entry.TrimSpace(* #-> as $safe);

$check #{exclude: `$safe`}-> as $high;

alert $high for {
    title: 'Reflected XSS detected',
    title_zh: '检测到命令注入',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 1,
    'file://main.go': <<<UNSAFE
package main

import (
    "fmt"
    "os/exec"
)

func executeCommand(userInput string) {
    // 不安全的做法：直接将用户输入拼接到命令中
    cmd := exec.Command("echo", userInput)
    output, err := cmd.CombinedOutput()
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    fmt.Println(string(output))
}

func main() {
    var userInput string
    fmt.Print("Enter your command: ")
    fmt.Scanln(&userInput) // 接收用户输入
    executeCommand(userInput)
}
UNSAFE,
    'safe://main.go': <<<SAFE
package main

import (
    "fmt"
    "os/exec"
)

func executeCommand(userInput string) {
    cleanedInput := strings.TrimSpace(userInput)
    cmd := exec.Command("echo", cleanedInput)
    output, err := cmd.CombinedOutput()
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    fmt.Println(string(output))
}

func main() {
    var userInput string
    fmt.Print("Enter your command: ")
    fmt.Scanln(&userInput) // 接收用户输入
    executeCommand(userInput)
}
SAFE
)
