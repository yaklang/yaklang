desc(
	title: "Detect Golang SQL Injection Vulnerability"
	title_zh: "检测Golang SQL注入漏洞"
	type: audit
	severity: mid
	risk: "sqli"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   SQL注入是由于应用程序未对用户输入进行严格的过滤或参数化处理，攻击者可通过构造特殊输入篡改原始SQL语句的逻辑。这可能导致非预期的数据库操作，例如数据泄露、数据篡改或权限绕过。

2. **触发场景**
   // 存在漏洞的代码示例
   ```go
   package test

   import (
       "database/sql"
       "fmt"
       _ "github.com/lib/pq"
   )

   func listTables(db *sql.DB, input string) {
       rows, err := db.Query("SELECT * FROM users WHERE name='" + input + "'")
       if err != nil {
           fmt.Println("Failed to list tables:", err)
           return
       }
       defer rows.Close()

       for rows.Next() {
           var tableName string
           if err := rows.Scan(&tableName); err != nil {
               fmt.Println("Failed to scan table name:", err)
               return
           }
           fmt.Println("Table:", tableName)
       }
   }
   ```
   攻击者输入 `'; DROP TABLE users; --` 可能导致数据表被删除。

3. **潜在影响**
   - 数据库敏感信息（如用户凭证、隐私数据）被窃取。
   - 执行任意SQL语句（如插入、删除、修改数据或数据库结构）。
   - 通过数据库提权进一步渗透至服务器或其他系统组件。
DESC
	rule_id: "ac672ab7-a78c-4866-8a92-76074034def7"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用参数化查询（Prepared Statements）
通过预编译SQL语句并绑定用户输入，隔离代码与数据，避免恶意输入篡改逻辑。
```go
// 修复代码示例
package test

import (
    "database/sql"
    "fmt"
    _ "github.com/lib/pq"
)

func listTables(db *sql.DB, input string) {
    rows, err := db.Query("SELECT * FROM users WHERE name = $1", input)
    if err != nil {
        fmt.Println("Failed to list tables:", err)
        return
    }
    defer rows.Close()

    for rows.Next() {
        var tableName string
        if err := rows.Scan(&tableName); err != nil {
            fmt.Println("Failed to scan table name:", err)
            return
        }
        fmt.Println("Table:", tableName)
    }
}
```

#### 2. 输入合法性校验
对用户输入实施类型、格式或范围限制，拒绝非法输入。
```go
// 示例：校验输入为字母且长度合法
if !regexp.MustCompile(`^[a-zA-Z]+$`).MatchString(input) {
    fmt.Println("输入包含非法字符")
    return
}
if len(input) > 50 {
    fmt.Println("输入长度超出有效范围")
    return
}
```

#### 3. 使用ORM框架
通过ORM（如GORM）内置的安全机制自动处理参数化，避免手动拼接SQL。
```go
// GORM示例
import "gorm.io/gorm"

type User struct {
    Name string
}

func listTables(db *gorm.DB, input string) {
    var users []User
    db.Where("name = ?", input).Find(&users)
    fmt.Println(users)
}
```
SOLUTION
	reference: <<<REFERENCE
[SQL注入漏洞](https://owasp.org/www-community/attacks/SQL_Injection)
[CWE-89](https://cwe.mitre.org/data/definitions/89.html)
REFERENCE
)

<include('golang-database-sink')> as $entry;

$entry.Query(* as $result);
$entry.QueryRow(* as $result);

$result?{opcode: add} as $mid;
$result?{have: 'fmt.Sprintf'} as $mid;
$result?{have: '.ToSql'} as $mid;

$param?{<self>-{
   until: `* & $sink`,
}->} as $mid;

alert $mid for {
	level: "mid",
	type: "vuln",
	title: "SQL Injection detected",
	title_zh: "检测到SQL注入",
}

desc(
	lang: golang
	alert_mid: 1
	'file://main.go': <<<UNSAFE
package test

import (
    "database/sql"
    "fmt"
    _ "github.com/lib/pq"
    "strings"
)

func listTables(db *sql.DB) {
    rows, err := db.Query("SELECT * FROM users WHERE name='" + input + "'")
    if err != nil {
        fmt.Println("Failed to list tables:", err)
        return
    }
    defer rows.Close()

    for rows.Next() {
        var tableName string
        if err := rows.Scan(&tableName); err != nil {
            fmt.Println("Failed to scan table name:", err)
            return
        }
        fmt.Println("Table:", tableName)
    }
}
UNSAFE
	"safefile://SafeSQLQuery.go": <<<CODE
// 使用参数化查询避免SQL注入 (Prepared Statements)
package main

import (
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
)

func main() {
	db, err := sql.Open("postgres", "user=test dbname=test sslmode=disable")
	if err != nil {
		panic(err)
	}
	defer db.Close()

	userID := 123
	username := "John Doe"

	// 查询，使用参数化查询
	rows, err := db.Query("SELECT name, email FROM users WHERE id = $1", userID)
	if err != nil {
		fmt.Println("Error querying user by ID:", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var name, email string
		if err := rows.Scan(&name, &email); err != nil {
			fmt.Println("Error scanning row:", err)
			return
		}
		fmt.Printf("User: %s, Email: %s\n", name, email)
	}

	// 插入，使用参数化查询
	stmt, err := db.Prepare("INSERT INTO users(name, email) VALUES($1, $2)")
	if err != nil {
		fmt.Println("Error preparing statement:", err)
		return
	}
	defer stmt.Close()

	res, err := stmt.Exec(username, "john.doe@example.com")
	if err != nil {
		fmt.Println("Error inserting user:", err)
		return
	}
	rowsAffected, _ := res.RowsAffected()
	fmt.Printf("Inserted %d row(s)\n", rowsAffected)



	// 使用QueryRow进行单行查询，同样参数化
	var email string
	err = db.QueryRow("SELECT email FROM users WHERE name = $1", "Jane Doe").Scan(&email)
	if err != nil {
		fmt.Println("Error querying row:", err)
		return
	}
	fmt.Printf("Jane Doe's email: %s\n", email)
}

CODE
	"safefile://InputValidationAndSanitization.go": <<<CODE
// 在执行SQL查询前进行严格的输入验证和清理
package main

import (
	"database/sql"
	"fmt"
	"regexp"
)

// isValidUsername 检查用户名是否只包含字母和数字
func isValidUsername(username string) bool {
	// 允许字母、数字和下划线
	match, _ := regexp.MatchString("^[a-zA-Z0-9_]+$", username)
	return match
}

// sanitizeInput 移除可能导致SQL注入的特殊字符，但更推荐使用参数化查询
func sanitizeInput(input string) string {
	// 这是一个简单的示例，不推荐作为主要的防御措施。
	// 更好的方式是使用参数化查询。
	input = regexp.MustCompile("['\";\\-]+").ReplaceAllString(input, "")
	return input
}

func main() {
	// 假设db已初始化
	var db *sql.DB // 实际应用中 db 会被正确初始化

	userInput := "john_doe'; DROP TABLE users; --"

	// 强烈演示：输入验证
	if !isValidUsername(userInput) {
		fmt.Println("Error: Invalid username characters. Please use only letters, numbers, and underscores.")
		return
	}

	// 通常与参数化查询结合使用，此处的输入清理仅作演示，参数化查询是首选
	cleanedInput := sanitizeInput(userInput)


	// 即使进行了输入验证和清理，仍然推荐使用参数化查询
	// 例如：db.Query("SELECT * FROM users WHERE username = $1", cleanedInput)
	fmt.Printf("Processed input for query: %s\n", cleanedInput)
}

CODE
)
