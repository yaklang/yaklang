desc(
	title: "Check Golang SQL Injection Vulnerability"
	type: audit
	severity: high
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   SQL注入是一种攻击技术，攻击者通过向应用程序的输入字段注入恶意的SQL代码，从而能够操纵后端数据库执行未经授权的查询。在Golang中使用`sqlx`或标准`database/sql`包时，如果直接将用户输入拼接到SQL查询中，而不进行适当的参数化查询或输入验证，就会导致SQL注入漏洞。这种漏洞允许攻击者绕过应用程序的安全控制，获取、修改或删除数据库中的数据，甚至可能完全控制数据库服务器。

2. **触发场景**
   SQL注入漏洞通常发生在以下场景：
   - 用户输入被直接拼接到SQL查询字符串中，例如 `db.Query("SELECT * FROM users WHERE id = " + userInput)`。
   - 未对用户输入进行参数化处理或验证，导致恶意输入被解释为SQL命令。
   - 在Gin框架中，通过`ctx.Query()`、`ctx.Param()`等获取用户输入后，直接用于构建SQL查询。

   ```golang
   // 存在漏洞的代码示例
   router.GET("/inject", func(ctx *gin.Context) {
       id := ctx.Query("id") // 获取用户输入
       // sink：直接将用户输入拼接到SQL查询
       rows, err := db.Query("select username from users where id = " + id)
       // ...
   })
   ```
   攻击者可以通过构造如 `?id=1 OR 1=1` 或 `?id=1; DROP TABLE users --` 的URL参数进行攻击。

3. **潜在影响**
   - 数据库敏感信息（如用户凭证、隐私数据）被窃取。
   - 执行任意SQL语句（如插入、删除、修改数据或数据库结构）。
   - 通过数据库提权进一步渗透至服务器或其他系统组件。
DESC
	rule_id: "137a07c6-00e9-443a-9c2c-f892782d5176"
	title_zh: "检测Golang SQL注入漏洞"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用参数化查询
通过预编译SQL语句并绑定用户输入作为参数，隔离代码与数据，避免恶意输入篡改逻辑。这是防止SQL注入最有效的方法。

```golang
// 修复代码示例（使用标准 database/sql）
router.GET("/inject", func(ctx *gin.Context) {
    idStr := ctx.Query("id")
    id, err := strconv.Atoi(idStr) // 尝试将用户输入转换为整数
    if err != nil {
        ctx.String(http.StatusBadRequest, "Invalid ID")
        return
    }
    // 使用参数化查询
    rows, err := db.Query("select username from users where id = ?", id)
    // ...
})
```

```golang
// 修复代码示例（使用 sqlx）
router.GET("/inject", func(ctx *gin.Context) {
    idStr := ctx.Query("id")
    id, err := strconv.Atoi(idStr)
    if err != nil {
        ctx.String(http.StatusBadRequest, "Invalid ID")
        return
    }
    var username string
    // 使用 Get 方法和结构体/变量作为参数
    err = db.Get(&username, "SELECT username FROM users WHERE id = ?", id)
    // ...
})
```

#### 2. 输入合法性校验
对用户输入进行严格的合法性校验，例如检查数据类型、长度、格式或范围，并拒绝任何不符合预期的输入。虽然参数化查询是首选方法，但输入校验可以作为额外的安全层。

#### 3. 避免直接拼接SQL语句
永远不要直接将用户输入拼接到SQL查询字符串中，即使进行了简单的过滤或转义，也存在绕过的风险。
SOLUTION
	reference: <<<REFERENCE
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)
REFERENCE
)

<include('golang-http-sink')> as $sink;
<include('golang-database-sink')> as $db;
$db.Query( * #-> as $param)

$param?{<self>-{
   until: `* & $sink`,
}->} as $high;

alert $high for {
	title_zh: "检测到SQL注入",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "high",
	type: "vuln",
	title: "SQL Injection detected",
}

desc(
	lang: golang
	alert_high: 1
	'file://main.go': <<<UNSAFE
package main

import (
	"flag"
	"log"

	"database/sql"

	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"
)

var (
	Addr = "0.0.0.0:8080"
)

func init() {
	flag.StringVar(&Addr, "addr", "0.0.0.0:8080", "Server listen address")
	flag.Parse()
}

func main() {
	db, err := sql.Open("mysql",
		"root:root@tcp(127.0.0.1:3306)/test")
	defer db.Close()

	if err != nil {
		panic(err)
	}
	err = db.Ping()
	if err != nil {
		panic(err)
	}
	router := gin.Default()
	router.GET("/inject", func(ctx *gin.Context) {
		var (
			username string
		)
		// source
		id := ctx.Query("id")
		if id == "" {
			id = "1"
		}

		id2 := id + "hhhhhh"
		// sink
		rows, err := db.Query("select username from users where id = " + id2)
		if err != nil {
			log.Panic(err)
		}
		defer rows.Close()

		for rows.Next() {
			err := rows.Scan(&username)
			if err != nil {
				log.Panic(err)
			}
		}

		ctx.String(200, username)
	})
	router.Run(Addr)
}
UNSAFE
)
