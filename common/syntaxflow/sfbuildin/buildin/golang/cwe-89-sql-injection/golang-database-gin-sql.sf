desc(
    title: "golang SQL Injection(database-gin)",
    type: audit,
    severity: high,
    rule_id: 10089001,
    desc: <<<TEXT
SQL 注入是一种攻击技术，攻击者通过向应用程序的输入字段注入恶意的 SQL 代码，从而能够操纵后端数据库执行未经授权的查询。在 Golang 中使用 `sqlx` 或标准 `database/sql` 包时，如果直接将用户输入拼接到 SQL 查询中，而不进行适当的参数化查询或输入验证，就会导致 SQL 注入漏洞。这种漏洞允许攻击者绕过应用程序的安全控制，获取、修改或删除数据库中的数据，甚至可能完全控制数据库服务器。

SQL 注入漏洞通常发生在以下场景：
1. 用户输入被直接拼接到 SQL 查询字符串中，例如 `db.Query("SELECT * FROM users WHERE id = " + userInput)`。
2. 未对用户输入进行参数化处理或验证，导致恶意输入被解释为 SQL 命令。
TEXT
)

<include('golang-http-sink')> as $sink;
<include('golang-database-sink')> as $db;
$db.Query( * #-> as $param)

$param?{<self>-{
   until: `* & $sink`,
}->} as $high;

alert $high for {
    title: 'SQL Injection detected',
    title_zh: '检测到SQL注入',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 1,
    'file://main.go': <<<UNSAFE
package main

import (
	"flag"
	"log"

	"database/sql"

	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"
)

var (
	Addr = "0.0.0.0:8080"
)

func init() {
	flag.StringVar(&Addr, "addr", "0.0.0.0:8080", "Server listen address")
	flag.Parse()
}

func main() {
	db, err := sql.Open("mysql",
		"root:root@tcp(127.0.0.1:3306)/test")
	defer db.Close()

	if err != nil {
		panic(err)
	}
	err = db.Ping()
	if err != nil {
		panic(err)
	}
	router := gin.Default()
	router.GET("/inject", func(ctx *gin.Context) {
		var (
			username string
		)
		// source
		id := ctx.Query("id")
		if id == "" {
			id = "1"
		}

		id2 := id + "hhhhhh"
		// sink
		rows, err := db.Query("select username from users where id = " + id2)
		if err != nil {
			log.Panic(err)
		}
		defer rows.Close()

		for rows.Next() {
			err := rows.Scan(&username)
			if err != nil {
				log.Panic(err)
			}
		}

		ctx.String(200, username)
	})
	router.Run(Addr)
}
UNSAFE
)
