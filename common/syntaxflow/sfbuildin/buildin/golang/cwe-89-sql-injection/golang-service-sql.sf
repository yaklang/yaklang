desc(
	title: "Detect Golang Service SQL Injection Vulnerability"
	type: audit
	severity: high
	desc: <<<DESC
SQL注入是一种常见的攻击手段，攻击者通过在SQL查询中注入恶意SQL代码片段，以欺骗数据库执行非预期的操作。在本规则中，我们检测Golang服务中可能存在的SQL注入漏洞。该漏洞通常是由于未对用户输入进行适当的过滤和转义导致的。漏洞触发场景包括但不限于用户输入被直接拼接到SQL查询中。潜在影响包括数据泄露、数据损坏或数据库操作权限的提升。
DESC
	rule_id: "278c2a17-1b81-49d1-a4a9-d881fba1a0e9"
	title_zh: "检测Golang Service SQL注入漏洞"
	risk: "sqli"
	solution: <<<SOLUTION
为防止SQL注入漏洞，建议采取以下措施：
1. 使用参数化查询（Prepared Statements）代替拼接SQL查询。
2. 对用户输入进行严格的验证和过滤。
3. 实施最小权限原则，确保应用程序只拥有执行必要数据库操作的最小权限。
SOLUTION
	reference: <<<REFERENCE
https://cwe.mitre.org/data/definitions/89.html
REFERENCE
)

<include('golang-user-input')> as $input;

*.LoginCheck(* #-> as $param)
*.QueryByID(* #-> as $param)
$param & $input as $high;

alert $high for {
	level: "high",
	type: "vuln",
	title: "SQL Injection detected",
	title_zh: "检测到SQL注入",
}

desc(
	lang: golang
	alert_high: 1
	'file://unsafe.go': <<<UNSAFE
package main

import (
	"github.com/gin-gonic/gin"
	"github.com/godzeo/go-gin-vul/service/safe_service"
	service "github.com/godzeo/go-gin-vul/service/vul_service"
)

func Sqlli(c *gin.Context) {
	var User string
	var Password string

	if c.Request.Method == "GET" {
		User = c.Query("username")
		Password = c.Query("password")
	} else if c.Request.Method == "POST" {
		User = c.PostForm("username")
		Password = c.PostForm("password")
	}
	println("Password=" + Password)

	loginService := service.LogData{Username: User, Password: Password}
	isExist, err := loginService.LoginCheck()
	if err != nil {
		c.JSON(500, gin.H{
			"err": err,
		})
		return
	}

	if !isExist {
		c.JSON(403, gin.H{
			"success": "login fail",
		})
		return
	}

	c.JSON(200, gin.H{
		"success": "login succeed " + User,
	})
}
UNSAFE
	"safefile://SafeSqlExample.go": <<<CODE
// SafeSqlExample.go
package main

import (
	"database/sql"
	"fmt"
	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"
)

// LoginCheck uses prepared statements to prevent SQL injection.
func LoginCheck(username, password string) (bool, error) {
	// In a real application, you would get a database connection from a pool.
	db, err := sql.Open("mysql", "user:password@tcp(127.0.0.1:3306)/database") // Placeholder DSN
	if err != nil {
		return false, fmt.Errorf("failed to connect to database: %w", err)
	}
	defer db.Close()

	query := "SELECT COUNT(*) FROM users WHERE username = ? AND password = ?"
	stmt, err := db.Prepare(query)
	if err != nil {
		return false, fmt.Errorf("failed to prepare statement: %w", err)
	}
	defer stmt.Close()

	var count int
	err = stmt.QueryRow(username, password).Scan(&count)
	if err != nil && err != sql.ErrNoRows{
		return false, fmt.Errorf("query execution failed: %w", err)
	}

	return count > 0, nil
}

// main function for Gin setup, showing how to call the safe LoginCheck
func main() {
	r := gin.Default()

	r.POST("/login", func(c *gin.Context) {
		username := c.PostForm("username")
		password := c.PostForm("password")

		isExist, err := LoginCheck(username, password) // Calling the safe function
		if err != nil {
			c.JSON(500, gin.H{"error": err.Error()})
			return
		}

		if isExist {
			c.JSON(200, gin.H{"message": "Login successful"})
		} else {
			c.JSON(401, gin.H{"message": "Invalid credentials"})
		}
	})

	r.Run(":8080")
}
CODE
	"safefile://SafeQueryByID.go": <<<CODE
// SafeQueryByID.go
package main

import (
	"database/sql"
	"fmt"
	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"
	"strconv"
)

// User represents a user entity
type User struct {
	ID int
	Name string
}

// QueryByID safely queries a user by ID using an integer type and prepared statements.
// This prevents SQL injection by ensuring the ID is treated as a number, not part of the query string.
func QueryByID(id int) (*User, error) {
	// In a real application, you would get a database connection from a pool.
	db, err := sql.Open("mysql", "user:password@tcp(127.0.0.1:3306)/database")
	if err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}
	defer db.Close()

	query := "SELECT id, name FROM users WHERE id = ?"
	stmt, err := db.Prepare(query)
	if err != nil {
		return nil, fmt.Errorf("failed to prepare statement: %w", err)
	}
	defer stmt.Close()

	var user User
	err = stmt.QueryRow(id).Scan(&user.ID, &user.Name)
	if err == sql.ErrNoRows {
		return nil, nil // User not found
	} else if err != nil {
		return nil, fmt.Errorf("query execution failed: %w", err)
	}

	return &user, nil
}

// main function for Gin setup, demonstrating safe ID query handling
func main() {
	r := gin.Default()

	r.GET("/user/:id", func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr) // Input validation: convert to int
		if err != nil {
			c.JSON(400, gin.H{"error": "Invalid user ID"})
			return
		}

		user, err := QueryByID(id) // Call the safe function with integer ID
		if err != nil {
			c.JSON(500, gin.H{"error": err.Error()})
			return
		}

		if user == nil {
			c.JSON(404, gin.H{"message": "User not found"})
			return
		}

		c.JSON(200, user)
	})

	r.Run(":8080")
}
CODE
)
