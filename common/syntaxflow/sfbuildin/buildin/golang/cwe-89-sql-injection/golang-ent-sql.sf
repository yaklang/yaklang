desc(
    title: "golang SQL Injection(ent)",
    type: audit,
    severity: high,
    desc: <<<TEXT
SQL 注入漏洞是一种严重的安全漏洞，它允许攻击者通过向 SQL 查询注入恶意代码来操纵后端数据库。在使用 `entgo.io/ent` 框架时，如果未正确构建查询条件，而是直接将用户输入拼接到 SQL 查询中，将会导致 SQL 注入漏洞。攻击者可以利用此漏洞绕过认证、访问或修改敏感数据，甚至执行数据库管理操作，严重危害应用程序的数据安全。

SQL 注入漏洞通常发生在以下场景：
1. 用户输入被直接拼接到 SQL 查询字符串中，例如 `client.User.Query().Where(user.Name(input))`。
2. 未对用户输入进行参数化处理或验证，导致恶意输入被解释为 SQL 命令。
TEXT
)

ent?{<fullTypeName>?{have: 'entgo.io/ent'}} as $entry;
$entry.Open() <getMembers> as $client;
$client.User.Query().Where(* #-> as $param);
$param?{have: 'Parameter'} as $high;

alert $high for {
    title: 'SQL Injection detected',
    title_zh: '检测到SQL注入',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 1,
    'file://main.go': <<<UNSAFE
package test

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"entgo.io/ent"
	_ "github.com/go-sql-driver/mysql"
)

type User struct {
	ID   uint
	Name string
	Age  int
}

func login(w http.ResponseWriter, r *http.Request) {
	username := r.FormValue("username")
	password := r.FormValue("password")

	// 连接到数据库
	client, err := ent.Open("mysql", "user:password@tcp(localhost:3306)/dbname")
	if err != nil {
		log.Fatal(err)
	}
	defer client.Close()

	// 不安全的查询
	input := fmt.Sprintf("SELECT * FROM users WHERE name = '%s'", username)
	ctx := context.Background()

	users, err := client.User.Query().Where(user.Name(input)).All(ctx)
	if err != nil {
		log.Fatal(err)
	}

	// 打印结果
	for _, user := range users {
		fmt.Printf("User: %s, Age: %d\n", user.Name, user.Age)
	}
}

func main() {
	http.HandleFunc("/login", login)
	log.Fatal(http.ListenAndServe(":8080", nil))
}

UNSAFE
)
