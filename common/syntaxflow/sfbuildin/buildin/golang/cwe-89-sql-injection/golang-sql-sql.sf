desc(
    title: "golang SQL Injection(database/sql)",
    type: audit,
    severity: high,
    desc: <<<TEXT
SQL注入漏洞是一种严重的安全漏洞，它允许攻击者通过输入恶意的SQL代码来操纵后端数据库。在Golang中，如果开发者不正确地使用`database/sql`包，特别是当直接将用户输入拼接到SQL查询中时，就可能导致SQL注入漏洞。攻击者可以利用这个漏洞来绕过认证、访问或修改敏感数据，甚至执行数据库管理操作，如删除表或数据。为了防止SQL注入，开发者应该使用参数化查询或预处理语句，确保用户输入不会被解释为SQL代码的一部分。
TEXT
)

<include('golang-database-sql')> as $sink;
$sink.QueryRow( * #-> as $param);
$param?{have: 'Parameter'} as $high;

alert $high for {
    title: 'SQL Injection detected',
    title_zh: '检测到SQL注入',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 1,
    'file://main.go': <<<UNSAFE
package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"

	_ "github.com/go-sql-driver/mysql"
)

func login(w http.ResponseWriter, r *http.Request) {
	username := r.FormValue("username")
	password := r.FormValue("password")

	// 不安全的 SQL 查询
	query := fmt.Sprintf("SELECT * FROM users WHERE username='%s' AND password='%s'", username, password)

	db, err := sql.Open("mysql", "user:password@/dbname")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	var userID int
	err = db.QueryRow(query).Scan(&userID)
	if err != nil {
		http.Error(w, "Invalid login", http.StatusUnauthorized)
		return
	}

	fmt.Fprintf(w, "User ID: %d", userID)
}

func main() {
	http.HandleFunc("/login", login)
	log.Fatal(http.ListenAndServe(":8080", nil))
}

UNSAFE
)
