desc(
	title: "Audit Golang File Upload Authorization (Beego)"
	title_zh: "审计Golang文件上传授权（Beego）"
	type: audit
	level: high
	risk: "file-write"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   文件路径未授权漏洞通常由于应用程序未能对用户输入的文件路径进行严格的验证，攻击者可以通过构造恶意路径实现文件覆盖、删除或路径穿越攻击。路径穿越攻击允许攻击者访问或修改应用程序之外的敏感文件，甚至可能导致服务器被完全控制。

2. **触发场景**
   以下为可能存在漏洞的代码示例：
   ```go
package main

import (
	"fmt"
	"go-sec-code/utils"
	"time"

	beego "github.com/beego/beego/v2/server/web"
)

func (c *FileUploadVuln1Controller) Post() {
	userid := c.GetString("userid")
	_, h, err := c.GetFile("file")
	if err != nil {
		panic(err)
	}
	savePath := "static/upload/" + userid + fmt.Sprint(time.Now().Unix()) + h.Filename
	c.SaveToFile("file", savePath)
	c.Data["savePath"] = savePath
	c.TplName = "fileUpload.tpl"
}
   ```
   在上述代码中，`userid` 和 `h.Filename` 直接拼接到保存路径，未经过验证可能导致路径穿越攻击。

3. **潜在影响**
   - 攻击者可能通过路径穿越访问系统上的任意文件。
   - 可能导致敏感文件泄露、篡改或删除。
   - 进一步渗透至服务器或其他系统组件。

DESC
	rule_id: "97bfc6e2-1e57-4329-87f7-5d61ca92b26b"
	solution: <<<SOLUTION
### 修复建议

#### 1. 对用户输入严格校验
   应用程序在处理用户输入的文件名或路径时，应使用白名单机制限制字符集，并拒绝任何非法字符（如 `../`）。例如：
   ```go
func isValidFileName(filename string) bool {
	return !strings.Contains(filename, "../") && !strings.Contains(filename, "..")
}
   ```

#### 2. 使用安全的方法解析和验证路径
   利用标准库中的 `path/filepath` 提供的安全方法（如 `filepath.Clean` 和 `filepath.IsAbs`），确保生成路径是合法且受控的。
   ```go
import "path/filepath"

func secureFilePath(basePath, userPath string) string {
	cleanPath := filepath.Clean(userPath)
	if filepath.IsAbs(cleanPath) || strings.HasPrefix(cleanPath, "../") {
		return ""
	}
	return filepath.Join(basePath, cleanPath)
}
   ```

#### 3. 配置上传目录权限
   确保上传目录的权限设置为只允许特定用户或服务访问，避免其他用户或进程对其进行修改。

SOLUTION
	reference: <<<REFERENCE
[CWE-434: Unrestricted Upload of File with Dangerous Type](https://cwe.mitre.org/data/definitions/434.html)
[OWASP Path Traversal](https://owasp.org/www-community/vulnerabilities/Path_Traversal)
REFERENCE
)

<include('golang-file-path')> as $path;

.SaveToFile(, * #-> as $sink);

strings.HasPrefix(* #-> as $check);
$path.Clean(* #-> as $check);
$path.IsAbs(* #-> as $check);

$sink #{include: `$check`}-> as $safe;
$sink #{exclude: `$safe`}-> as $high;

alert $high	for {
	title_zh: "检测到Golang文件路径未授权漏洞",
	solution: <<<CODE
### 修复建议
#### 1. 验证并过滤用户输入的文件路径
为了避免路径穿越攻击，应对用户提供的文件名或路径进行严格的验证和过滤。可以使用Go语言标准库中的`filepath.Clean`方法清理路径，并结合`filepath.IsAbs`和`strings.HasPrefix`等函数来确保路径安全。
```go
// 示例：对文件路径进行清理和验证
package main

import (
	"fmt"
	"path/filepath"
	"strings"
)

func isSafePath(base string, path string) bool {
	cleanPath := filepath.Clean(path)
	if strings.HasPrefix(cleanPath, base) {
		return true
	}
	return false
}

func main() {
	baseDir := "/var/www/uploads/"
	userInput := "../../etc/passwd"

	if isSafePath(baseDir, userInput) {
		fmt.Println("路径安全")
	} else {
		fmt.Println("路径不安全")
	}
}
```
#### 2. 使用可信的安全存储路径
不要直接拼接用户输入的文件名与目标目录，而是通过一个固定的、可信的文件存储路径来保存上传的文件。
```go
savePath := filepath.Join("/var/www/uploads", fmt.Sprint(time.Now().Unix()))
```
#### 3. 强制重命名上传文件
为避免恶意文件名（如包含特殊字符或扩展名），可以生成随机文件名或哈希值作为文件名称。
```go
import (
	"crypto/sha256"
	"encoding/hex"
)

fileHash := sha256.Sum256([]byte(h.Filename))
savePath := filepath.Join("/var/www/uploads/", hex.EncodeToString(fileHash[:]))
```
#### 4. 设置文件权限
确保上传目录的文件权限设置得当，防止其他用户或进程访问敏感文件。
```bash
chmod 750 /var/www/uploads/
```
CODE
	desc: <<<CODE
### 漏洞描述
1. **漏洞原理**
此审计规则旨在验证用户输入及传入的文件路径是否经过适当的过滤与授权。如果文件路径未经过验证，攻击者可能通过构造恶意路径实现文件覆盖、删除或路径穿越攻击，从而导致安全风险。路径穿越攻击允许攻击者访问或修改应用程序之外的敏感文件，甚至可能导致服务器被完全控制。

2. **触发场景**
以下代码示例展示了存在漏洞的文件上传逻辑：
```go
package main

import (
	"fmt"
	"time"
	beego "github.com/beego/beego/v2/server/web"
)

func (c *FileUploadVuln1Controller) Post() {
	userid := c.GetString("userid")
	_, h, err := c.GetFile("file")
	if err != nil {
		panic(err)
	}
	savePath := "static/upload/" + userid + fmt.Sprint(time.Now().Unix()) + h.Filename
	c.SaveToFile("file", savePath)
	c.Data["savePath"] = savePath
	c.TplName = "fileUpload.tpl"
}
```
在上述代码中，用户的输入`userid`和文件名`h.Filename`未经任何验证，直接拼接到保存路径中，导致潜在的路径穿越风险。

3. **潜在影响**
- 攻击者能够通过构造恶意路径访问或修改系统上的任意文件。
- 敏感配置文件（如`/etc/passwd`）可能被篡改。
- 攻击者可能利用该漏洞植入恶意脚本或木马程序，进一步危害系统安全。
- 在极端情况下，可能导致服务器被完全控制。
CODE
	level: "high",
	type: "vuln",
	title: "Check Golang File Upload Vulnerability",
}

desc(
	lang: golang
	alert_high: 1
	'file://main.go': <<<UNSAFE
package main

import (
	"fmt"
	"go-sec-code/utils"
	"time"

	beego "github.com/beego/beego/v2/server/web"
)

func (c *FileUploadVuln1Controller) Post() {
	userid := c.GetString("userid")
	_, h, err := c.GetFile("file")
	if err != nil {
		panic(err)
	}
	savePath := "static/upload/" + userid + fmt.Sprint(time.Now().Unix()) + h.Filename
	c.SaveToFile("file", savePath)
	c.Data["savePath"] = savePath
	c.TplName = "fileUpload.tpl"
}

UNSAFE
)
