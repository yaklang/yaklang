desc(
	title: "Audit Golang File Upload Authorization in Beego"
	title_zh: "Beego中Golang文件上传授权审核"
	type: audit
	level: low
	risk: "file-upload"
	desc: <<<DESC
该规则用于审计Beego框架中Golang文件上传功能的安全性。它通过检查文件上传功能是否对用户上传的文件类型进行了限制，以防止上传可执行文件或其他危险类型的文件。未授权的文件上传可能导致服务器被攻击者上传恶意文件，从而被用于进一步的攻击，如远程代码执行、信息泄露等。规则详细如下：

### 1. 规则目的
该规则用于审计Beego框架中Golang文件上传功能的安全性。它通过检查文件上传功能是否对用户上传的文件类型进行了限制，以防止上传可执行文件或其他危险类型的文件。未授权的文件上传可能导致服务器被攻击者上传恶意文件，从而被用于进一步的攻击，如远程代码执行、信息泄露等。

### 2. 规则详细
1. **作为基础检测库**
属于`golang-file-upload-beego`库规则（`lib`类型），需配合其他规则（如用户输入跟踪规则）共同检测文件上传漏洞，提供核心函数识别能力。
2. **覆盖高危输出函数**
检测以下函数：`GetFile`, `SaveToFile`。
DESC
	rule_id: "97bfc6e2-1e57-4329-87f7-5d61ca92b26b"
	solution: <<<SOLUTION
为了避免文件上传漏洞，应该对上传的文件类型进行严格的限制。可以在上传文件之前，检查文件的MIME类型或文件扩展名，确保它们不在危险类型的列表中。此外，还可以设置一个允许上传的文件类型白名单，只允许用户上传特定类型的文件。例如，可以使用以下代码对上传的文件类型进行限制：

```go
// 修复代码示例
func (c *FileUploadController) Post() {
	// 获取文件
	_, h, err := c.GetFile("file")
	if err != nil {
		// 错误处理
		return
	}

	// 检查文件类型
	if !isValidFileType(h.Filename) {
		// 文件类型不合法，拒绝上传
		return
	}

	// 保存文件
	c.SaveToFile("file", savePath)
}

// 检查文件类型是否合法
func isValidFileType(filename string) bool {
	// 设置允许上传的文件类型白名单
	allowedTypes := []string{.pdf", "image/jpeg", "image/png"}
	// 获取文件MIME类型
	contentType := mime.TypeByExtension(path.Ext(filename))
	// 检查MIME类型是否在白名单中
	for _, allowedType := range allowedTypes {
		if contentType == allowedType {
			return true
		}
	}
	return false
}
```

此外，还可以使用专业的安全工具对上传的文件进行扫描，以检测是否存在恶意代码或病毒。
SOLUTION
	reference: <<<REFERENCE
[CWE-434: Unrestricted Upload of File with Dangerous Type](https://cwe.mitre.org/data/definitions/434.html)
REFERENCE
)

.Data<getMemberByKey(key="path")> #-> as $sink;
.Data<getMemberByKey(key="savepath")> #-> as $sink;
.Data<getMemberByKey(key="Path")> #-> as $sink;
.Data<getMemberByKey(key="savePath")> #-> as $sink;
$sink.GetString<fullTypeName>?{have: "github.com/beego/beego/v2/server/web/Controller"} as $low;

alert $low for {
	title_zh: "检测到Golang文件路径未授权漏洞",
	level: "low",
	type: "vuln",
	title: "Check Golang File Upload Vulnerability",
}

desc(
	lang: golang
	alert_low: 1
	'file://unsafe.go': <<<UNSAFE
package main

import (
	"fmt"
	"go-sec-code/utils"
	"time"

	beego "github.com/beego/beego/v2/server/web"
)

type FileUploadVuln1Controller struct {
	beego.Controller
}

func (c *FileUploadVuln1Controller) Post() {
	userid := c.GetString("userid")
	_, h, err := c.GetFile("file")
	if err != nil {
		panic(err)
	}
	savePath := "static/upload/" + userid + fmt.Sprint(time.Now().Unix()) + h.Filename
	c.SaveToFile("file", savePath)
	c.Data["savePath"] = savePath
	c.TplName = "fileUpload.tpl"
}

func (c *FileUploadSafe1Controller) Get() {
	c.TplName = "fileUpload.tpl"
}
UNSAFE
	'safefile://safe.go': <<<SAFE
package main

import (
	"fmt"
	"go-sec-code/utils"
	"time"

	beego "github.com/beego/beego/v2/server/web"
)

type FileUploadVuln1Controller struct {
	beego.Controller
}

func (c *FileUploadVuln1Controller) Post() {
	userid := "userid"
	_, h, err := c.GetFile("file")
	if err != nil {
		panic(err)
	}
	savePath := "static/upload/" + userid + fmt.Sprint(time.Now().Unix()) + h.Filename
	c.SaveToFile("file", savePath)
	c.Data["savePath"] = savePath
	c.TplName = "fileUpload.tpl"
}

func (c *FileUploadSafe1Controller) Get() {
	c.TplName = "fileUpload.tpl"
}
SAFE
)
