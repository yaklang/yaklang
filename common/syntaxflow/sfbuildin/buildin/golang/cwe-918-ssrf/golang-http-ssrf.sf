desc(
	title: "golang SSRF(http)"
	type: audit
	severity: high
	desc: <<<TEXT
服务器端请求伪造（Server-Side Request Forgery, SSRF）漏洞（CWE-918）允许攻击者诱导服务器对内部或外部网络地址发起请求。在 Go 语言应用中，如果应用从用户输入中读取 URL 并直接发起 HTTP 请求，而没有对 URL 进行充分的验证和过滤，就可能导致 SSRF 漏洞。攻击者可以利用此漏洞绕过防火墙、扫描内网、攻击内网其他应用或进行端口扫描等，从而获取敏感信息或进一步控制服务器。

SSRF 漏洞通常发生在以下场景：
1. 应用程序从用户输入中获取 URL 并直接用于发起 HTTP 请求，例如 `http.Get(url)`。
2. 未对目标 URL 进行验证，导致攻击者可以构造恶意 URL，使服务器请求内部网络或敏感服务。
TEXT
	rule_id: "f1f1a062-fcba-4e12-bf59-64a3bf38269d"
)

<include('golang-http-sink')> as $output;
$output.URL.Query().Get() #-> as $sink;
$sink?{have: 'Parameter'} as $high

alert $high for {
    title: 'SSRF detected',
    title_zh: '检测到SSRF',
    type: 'vuln',
    level: 'high',
}

desc(
	lang: golang
	alert_high: 1
	'file://main.go': <<<UNSAFE
package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
)

func handler(w http.ResponseWriter, r *http.Request) {
	// 从查询参数获取 URL
	url := r.URL.Query().Get("url")

	// 发送请求
	resp, err := http.Get(url)
	if err != nil {
		http.Error(w, "Error fetching URL", http.StatusBadRequest)
		return
	}
	defer resp.Body.Close()

	// 读取响应
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		http.Error(w, "Error reading response", http.StatusInternalServerError)
		return
	}

	// 返回响应内容
	w.Write(body)
}

func main() {
	http.HandleFunc("/", handler)
	fmt.Println("Server is running on :8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		fmt.Println("Failed to start server:", err)
		os.Exit(1)
	}
}
UNSAFE
)
