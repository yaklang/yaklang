desc(
	title: "golang SSRF(beego)"
	title_zh: "golang 服务器端请求伪造(beego)",
	type: vuln
	severity: mid
	risk: ssrf
	desc: <<<TEXT
服务器端请求伪造（Server-Side Request Forgery, SSRF）漏洞（CWE-918）允许攻击者诱导服务器对内部或外部网络地址发起请求。在 Go 语言应用中，如果应用从用户输入中读取 URL 并直接发起 HTTP 请求，而没有对 URL 进行充分的验证和过滤，就可能导致 SSRF 漏洞。攻击者可以利用此漏洞绕过防火墙、扫描内网、攻击内网其他应用或进行端口扫描等，从而获取敏感信息或进一步控制服务器。

SSRF 漏洞通常发生在以下场景：
1. 应用程序从用户输入中获取 URL 并直接用于发起 HTTP 请求，例如 `http.Get(url)`。
2. 未对目标 URL 进行验证，导致攻击者可以构造恶意 URL，使服务器请求内部网络或敏感服务。
TEXT
	rule_id: "08ce9bcf-71ed-4839-8732-01e8a533a1a3"
)

<include('golang-http-source')> as $source 
.GetString() as $source  

// todo: implement embed struct type 
// $getStr<getObject> as $object 
// $object<typeName> as $typeName 
// $getStr?{<getObject><typeName>?{have: "beego.Controller"}} as $source 

http.Get(* as $param);

$param #{
	until: "* & $source" 
}-> as $mid 

alert $mid for {
	desc: <<<CODE

CODE
	level: "mid",
	type: "vuln",
	title: "SSRF detected",
	title_zh: "检测到SSRF",
	solution: <<<CODE

CODE
}

desc(
	lang: golang
	alert_mid: 1
	'file://main.go': <<<UNSAFE
	package main

	import (
		"go-sec-code/utils"
		"io/ioutil"
		"net/http"
	
		beego "github.com/beego/beego/v2/server/web"
	)
	
	type SSRFVuln1Controller struct {
		beego.Controller
	}
	
	func (c *SSRFVuln1Controller) Get() {
		url := c.GetString("url", "http://www.example.com")
		res, err := http.Get(url)
		if err != nil {
			panic(err)
		}
		defer res.Body.Close()
		body, err := ioutil.ReadAll(res.Body)
		if err != nil {
			panic(err)
		}
		c.Ctx.ResponseWriter.Write(body)
	}
	
UNSAFE
)
