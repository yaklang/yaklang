desc(
	title: "Detect Golang SSRF Vulnerability in Beego Framework"
	title_zh: "检测Golang Beego框架中的SSRF漏洞"
	type: vuln
	severity: mid
	risk: ssrf
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   服务器端请求伪造（Server-Side Request Forgery, SSRF）漏洞（CWE-918）允许攻击者诱导服务器对内部或外部网络地址发起请求。在Go语言应用中，如果应用程序从用户输入中读取URL并直接发起HTTP请求，而没有对目标URL进行充分验证和过滤，就可能导致SSRF漏洞。通过此漏洞，攻击者可以绕过防火墙、扫描内网、访问敏感服务或进行端口扫描等。

2. **触发场景**
   以下是一个存在SSRF漏洞的代码示例：
   ```go
   package main

   import (
       "net/http"
       "io/ioutil"
       beego "github.com/beego/beego/v2/server/web"
   )

   type SSRFVuln1Controller struct {
       beego.Controller
   }

   func (c *SSRFVuln1Controller) Get() {
       url := c.GetString("url", "http://www.example.com")
       res, err := http.Get(url)
       if err != nil {
           panic(err)
       }
       defer res.Body.Close()
       body, err := ioutil.ReadAll(res.Body)
       if err != nil {
           panic(err)
       }
       c.Ctx.ResponseWriter.Write(body)
   }
   ```
   攻击者可以通过传入恶意URL，例如`http://localhost:2375/containers/json`，使服务器请求内部Docker守护进程，从而泄露敏感信息。

3. **潜在影响**
   - 绕过防火墙限制，访问内部资源。
   - 扫描内部网络，获取其他敏感服务的信息。
   - 发起端口扫描，进一步渗透到内部系统。
   - 窃取敏感数据或控制内部关键服务。

DESC
	rule_id: "08ce9bcf-71ed-4839-8732-01e8a533a1a3"
	reference: <<<REFERENCE
[CWE-918](https://cwe.mitre.org/data/definitions/918.html)
[SSRF漏洞详解](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)
REFERENCE
	solution: <<<SOLUTION
### 修复建议

#### 1. 对用户输入的URL进行严格校验
   验证用户输入的URL是否符合预期的格式，例如仅允许特定域名或IP范围，并拒绝非法输入。
   ```go
   import (
       "net/url"
       "regexp"
   )

   func isValidURL(input string) bool {
       parsedURL, err := url.Parse(input)
       if err != nil {
           return false
       }
       // 允许的域名列表
       allowedDomains := []string{"example.com"}
       for _, domain := range allowedDomains {
           matched, _ := regexp.MatchString(domain, parsedURL.Hostname())
           if matched {
               return true
           }
       }
       return false
   }
   ```

#### 2. 使用白名单机制
   定义一个可信的域名或IP地址白名单，仅允许访问白名单内的目标。
   ```go
   var whitelist = map[string]bool{
       "example.com": true,
       "api.trusted.com": true,
   }

   func isWhitelisted(host string) bool {
       return whitelist[host]
   }
   ```

#### 3. 禁止访问本地和私有IP地址
   在发起请求之前，检查目标地址是否为本地或私有IP地址。
   ```go
   import (
       "net"
   )

   func isPrivateIP(ip string) bool {
       parsedIP := net.ParseIP(ip)
       for _, cidr := range []string{"127.0.0.0/8", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"} {
           _, ipNet, _ := net.ParseCIDR(cidr)
           if ipNet.Contains(parsedIP) {
               return true
           }
       }
       return false
   }
   ```

#### 4. 使用安全库或代理
   考虑使用专门的安全库（如OWASP提供的工具）或通过代理层来隔离和验证所有对外部的请求。

SOLUTION
)

<include('golang-http-source')> as $source 
.GetString() as $source  

// todo: implement embed struct type 
// $getStr<getObject> as $object 
// $object<typeName> as $typeName 
// $getStr?{<getObject><typeName>?{have: "beego.Controller"}} as $source 

http.Get(* as $param);

$param #{
	until: "* & $source" 
}-> as $mid 

alert $mid	for {
	level: "mid",
	type: "vuln",
	title: "SSRF detected",
	title_zh: "检测到SSRF",
}

desc(
	lang: golang
	alert_mid: 1
	'file://main.go': <<<UNSAFE
	package main

	import (
		"go-sec-code/utils"
		"io/ioutil"
		"net/http"
	
		beego "github.com/beego/beego/v2/server/web"
	)
	
	type SSRFVuln1Controller struct {
		beego.Controller
	}
	
	func (c *SSRFVuln1Controller) Get() {
		url := c.GetString("url", "http://www.example.com")
		res, err := http.Get(url)
		if err != nil {
			panic(err)
		}
		defer res.Body.Close()
		body, err := ioutil.ReadAll(res.Body)
		if err != nil {
			panic(err)
		}
		c.Ctx.ResponseWriter.Write(body)
	}
	
UNSAFE
)
