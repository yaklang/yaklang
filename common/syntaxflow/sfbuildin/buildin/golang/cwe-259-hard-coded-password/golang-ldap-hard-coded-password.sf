desc(
	title: "Check Golang LDAP Credential Hardcoding Vulnerability"
	type: audit
	severity: high
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   硬编码凭据（Hardcoded Credentials）是指将敏感信息（如数据库密码、API密钥、LDAP凭据等）直接以明文或易于恢复的形式嵌入到应用程序的源代码、配置文件或可执行文件中。这种做法极大地增加了凭据泄露的风险，因为攻击者一旦获取到代码访问权限（例如通过源代码泄露、反编译或入侵服务器），就能轻易地获取到这些敏感凭据。

   对于LDAP服务，如果应用程序中硬编码了用于绑定或查询的用户名和密码，攻击者一旦获取这些信息，就可以直接连接到LDAP服务器，执行未经授权的操作，如查询敏感的用户信息、修改目录结构或进行恶意目的的身份验证。

2. **触发场景**
   硬编码凭据漏洞通常发生在以下场景：
   - 开发者为了开发或测试方便，将真实或测试环境的用户名和密码直接写在代码常量、变量或注释中。
   - 配置文件没有加密或存储在不安全的位置，并且其中包含了硬编码的凭据。
   - 应用程序打包发布时，未移除或替换开发/测试阶段使用的硬编码凭据。

   **存在硬编码凭据的示例代码：**
   ```go
   package main

   import (
   	"fmt"
   	"log"
   	ldap "gopkg.in/ldap.v2"
   )

   func authenticate() bool {
       username := "user"
       password := "123456" // Hardcoded password
   	l, err := ldap.Dial("tcp", "ldap.example.com:389")
   	if err != nil {
   		log.Fatalf("Failed to connect to LDAP server: %s", err)
   	}
   	defer l.Close()

   	// Bind to the LDAP server
   	err = l.Bind("cn=admin,dc=example,dc=com", password)
   	if err != nil {
   		log.Fatalf("Failed to bind: %s", err)
   	}

   	// ... rest of the LDAP search logic ...
   }

   func main() {
   	// ... http server setup ...
   }
   ```

3. **潜在影响**
   - **敏感信息泄露：** 硬编码的凭据一旦泄露，攻击者可以利用其访问受保护的资源或系统。
   - **未经授权的访问：** 攻击者可以使用硬编码的LDAP凭据连接到LDAP目录，执行查询、修改或删除操作，获取用户列表、组织结构或其他敏感属性。
   - **系统被进一步攻击：** 泄露的LDAP凭据可能只是攻击者进一步渗透到内部网络或获取更高权限的跳板。
DESC
	rule_id: "35cf658c-53d6-4ce1-8968-66a4b0dbaf6b"
	title_zh: "检测 Golang LDAP 凭证硬编码漏洞"
	solution: <<<SOLUTION
### 修复建议

将敏感凭据从应用程序代码中移除，采用安全的外部化配置方式：

1. **使用环境变量或命令行参数**
   在应用程序启动时，通过环境变量或命令行参数传入凭据，避免将其写入`.env`或启动脚本中。
   ```go
   // 修复代码示例 (使用环境变量)
   import (
   	"log"
   	"os"
   	ldap "gopkg.in/ldap.v2"
   )

   func authenticate() bool {
       username := os.Getenv("LDAP_USERNAME")
       password := os.Getenv("LDAP_PASSWORD") // Get password from environment variable
       if username == "" || password == "" {
           log.Fatal("LDAP_USERNAME and LDAP_PASSWORD environment variables are required")
       }
   	l, err := ldap.Dial("tcp", "ldap.example.com:389")
   	if err != nil {
   		log.Fatalf("Failed to connect to LDAP server: %s", err)
   	}
   	defer l.Close()

   	// Bind to the LDAP server
   	err = l.Bind(username, password)
   	if err != nil {
   		log.Fatalf("Failed to bind: %s", err)
   	}

   	return true
   }
   ```
   在使用时，可以通过 `export LDAP_PASSWORD=your_password` 或运行命令时 `LDAP_PASSWORD=your_password ./your_app` 来设置环境变量。

2. **使用外部配置文件（并妥善保护）**
   将凭据存储在应用程序外部的配置文件（如JSON, YAML等）中。务必确保这些配置文件的访问权限受到严格限制，并且考虑对其中存储的敏感信息进行加密。
   ```go
   // 修复代码示例 (使用配置文件)
   import (
   	"encoding/json"
   	"os"
   	"log"
   	ldap "gopkg.in/ldap.v2"
   )

   type Config struct {
       LDAPUsername string `json:"ldap_username"`
       LDAPPassword string `json:"ldap_password"`
   }

   func loadConfig(filepath string) (*Config, error) {
       data, err := os.ReadFile(filepath)
       if err != nil {
           return nil, fmt.Errorf("failed to read config file: %w", err)
       }
       var cfg Config
       err = json.Unmarshal(data, &cfg)
       if err != nil {
           return nil, fmt.Errorf("failed to unmarshal config: %w", err)
       }
       return &cfg, nil
   }

   func authenticate() bool {
       cfg, err := loadConfig("config.json") // Load from a secure config file
       if err != nil {
           log.Fatalf("Failed to load configuration: %s", err)
       }
   	l, err := ldap.Dial("tcp", "ldap.example.com:389")
   	if err != nil {
   		log.Fatalf("Failed to connect to LDAP server: %s", err)
   	}
   	defer l.Close()

   	// Bind to the LDAP server
   	err = l.Bind(cfg.LDAPUsername, cfg.LDAPPassword)
   	if err != nil {
   		log.Fatalf("Failed to bind: %s", err)
   	}

   	return true
   }
   ```
3. **使用密钥管理系统 (KMS)**
   对于生产环境，强烈推荐使用专业的密钥管理系统（如HashiCorp Vault, AWS Secrets Manager, GCP Secret Manager等）来存储和检索敏感凭据。应用程序在运行时通过安全的API调用KMS获取所需的凭据，避免在任何地方存储明文凭据。

4. **代码审查和自动化扫描**
   定期进行代码质量检查和安全审计，结合静态应用安全测试（SAST）工具（如IRify)来自动化检测潜在的硬编码凭据问题。

概括而言，任何情况下都不应将敏感凭据直接嵌入到源代码中。
SOLUTION
	reference: <<<REFERENCE
[CWE-259: Use of Hard-Coded Password](https://cwe.mitre.org/data/definitions/259.html)
REFERENCE
)

<include('golang-ldap-sink')> as $sink;

$sink.Bind(*<slice(index=1)> #-> as $param)
$param #{ 
	include:`*?{opcode:const}`,
}-> as $high;

alert $high	for {
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   **硬编码凭据（Hardcoded Credentials）**是指将敏感信息（如数据库密码、API密钥、LDAP凭据等）直接以明文或易于恢复的形式嵌入到应用程序的源代码、配置文件或可执行文件中。这种做法极大地增加了凭据泄露的风险，因为攻击者一旦获取到代码访问权限（例如通过源代码泄露、反编译或入侵服务器），就能轻易地获取到这些敏感凭据。

   对于LDAP服务，如果应用程序中硬编码了用于绑定或查询的用户名和密码，攻击者一旦获取这些信息，就可以直接连接到LDAP服务器，执行未经授权的操作，如查询敏感的用户信息、修改目录结构或进行恶意目的的身份验证。

2. **触发场景**
   硬编码凭据漏洞**通常发生**在以下场景：
   - 开发者为了开发或测试方便，将真实或测试环境的用户名和密码直接写在代码常量、变量或注释中。
   - 配置文件没有加密或存储在不安全的位置，并且其中包含了硬编码的凭据。
   - 应用程序打包发布时，未移除或替换开发/测试阶段使用的硬编码凭据。
   - 在本规则的示例中，Golang代码直接在 `authenticate` 函数中定义了明文的用户名和密码变量：`password := "123456"`，并使用这个硬编码的密码进行LDAP绑定。

   **存在硬编码凭据的示例代码：**
   ```go
   package main

   import (
   	"fmt"
   	"log"

   	ldap "gopkg.in/ldap.v2"
   )

   func authenticate() bool {
       username := "user"
       password := "123456" // Hardcoded password
   	l, err := ldap.Dial("tcp", "ldap.example.com:389")
   	if err != nil {
   		log.Fatalf("Failed to connect to LDAP server: %!!(MISSING)!(MISSING)s(MISSING)", err)
   	}
   	defer l.Close()

   	// Bind to the LDAP server
   	err = l.Bind("cn=admin,dc=example,dc=com", password)
   	if err != nil {
   		log.Fatalf("Failed to bind: %!!(MISSING)!(MISSING)s(MISSING)", err)
   	}

   	// ... rest of the LDAP search logic ...
   }

   func main() {
   	// ... http server setup ...
   }
   ```

3. **潜在影响**
   - **敏感信息泄露：** 硬编码的凭据一旦泄露，攻击者可以利用其访问受保护的资源或系统。
   - **未经授权的访问：** 攻击者可以使用硬编码的LDAP凭据连接到LDAP目录，执行查询、修改或删除操作，获取用户列表、组织结构或其他敏感属性。
   - **系统被进一步攻击：** 泄露的LDAP凭据可能只是攻击者进一步渗透到内部网络或获取更高权限的跳板。
CODE
	level: "high",
	type: "vuln",
	title: "LDAP credential hardcoding vulnerability detected",
	title_zh: "检测到LDAP硬编码",
	solution: <<<CODE
### 修复建议

将敏感凭据从应用程序代码中移除，采用安全的外部化配置方式：

1. **使用环境变量或命令行参数**
   在应用程序启动时，通过环境变量或命令行参数传入凭据，避免将其写入`.env`或启动脚本中。
   ```go
   // 修复代码示例 (使用环境变量)
   import (
   	"log"
   	"os"
   	ldap "gopkg.in/ldap.v2"
   )

   func authenticate() bool {
       username := os.Getenv("LDAP_USERNAME")
       password := os.Getenv("LDAP_PASSWORD") // Get password from environment variable
       if username == "" || password == "" {
           log.Fatal("LDAP_USERNAME and LDAP_PASSWORD environment variables are required")
       }
   	l, err := ldap.Dial("tcp", "ldap.example.com:389")
   	if err != nil {
   		log.Fatalf("Failed to connect to LDAP server: %!!(MISSING)!(MISSING)s(MISSING)", err)
   	}
   	defer l.Close()

   	// Bind to the LDAP server
   	err = l.Bind(username, password)
   	if err != nil {
   		log.Fatalf("Failed to bind: %!!(MISSING)!(MISSING)s(MISSING)", err)
   	}

   	return true
   }
   ```
   在使用时，可以通过 `export LDAP_PASSWORD=your_password` 或运行命令时 `LDAP_PASSWORD=your_password ./your_app` 来设置环境变量。

2. **使用外部配置文件（并妥善保护）**
   将凭据存储在应用程序外部的配置文件（如JSON, YAML等）中。**务必**确保这些配置文件的访问权限受到严格限制，并且考虑对其中存储的敏感信息进行加密。
   ```go
   // 修复代码示例 (使用配置文件)
   import (
   	"encoding/json"
   	"os"
   	"log"
   	ldap "gopkg.in/ldap.v2"
   )

   type Config struct {
       LDAPUsername string `json:"ldap_username"`
       LDAPPassword string `json:"ldap_password"`
   }

   func loadConfig(filepath string) (*Config, error) {
       data, err := os.ReadFile(filepath)
       if err != nil {
           return nil, fmt.Errorf("failed to read config file: %!!(MISSING)!(MISSING)w(MISSING)", err)
       }
       var cfg Config
       err = json.Unmarshal(data, &cfg)
       if err != nil {
           return nil, fmt.Errorf("failed to unmarshal config: %!!(MISSING)!(MISSING)w(MISSING)", err)
       }
       return &cfg, nil
   }

   func authenticate() bool {
       cfg, err := loadConfig("config.json") // Load from a secure config file
       if err != nil {
           log.Fatalf("Failed to load configuration: %!!(MISSING)!(MISSING)s(MISSING)", err)
       }
   	l, err := ldap.Dial("tcp", "ldap.example.com:389")
   	if err != nil {
   		log.Fatalf("Failed to connect to LDAP server: %!!(MISSING)!(MISSING)s(MISSING)", err)
   	}
   	defer l.Close()

   	// Bind to the LDAP server
   	err = l.Bind(cfg.LDAPUsername, cfg.LDAPPassword)
   	if err != nil {
   		log.Fatalf("Failed to bind: %!!(MISSING)!(MISSING)s(MISSING)", err)
   	}

   	return true
   }
   ```
3. **使用密钥管理系统 (KMS)**
   对于生产环境，**强烈推荐**使用专业的密钥管理系统（如HashiCorp Vault, AWS Secrets Manager, GCP Secret Manager等）来存储和检索敏感凭据。应用程序在运行时通过安全的API调用KMS获取所需的凭据，避免在任何地方存储明文凭据。

4. **代码审查和自动化扫描**
   定期进行代码质量检查和安全审计，结合静态应用安全测试（SAST）工具（如IRify)来自动化检测潜在的硬编码凭据问题。

**概括而言，任何情况下都不应将敏感凭据直接嵌入到源代码中。**
CODE
}

desc(
	lang: golang
	alert_high: 1
	'file://main.go': <<<UNSAFE
package main

import (
	"fmt"
	"log"

	ldap "gopkg.in/ldap.v2"
)

func authenticate() bool {
    username := "user"
    password := "123456"
	l, err := ldap.Dial("tcp", "ldap.example.com:389")
	if err != nil {
		log.Fatalf("Failed to connect to LDAP server: %s", err)
	}
	defer l.Close()

	// 绑定到 LDAP 服务器
	err = l.Bind("cn=admin,dc=example,dc=com", password)
	if err != nil {
		log.Fatalf("Failed to bind: %s", err)
	}

	// LDAP 查询构造
	searchRequest := ldap.NewSearchRequest(
		"ou=users,dc=example,dc=com",
		ldap.ScopeWholeSubtree,
		ldap.NeverDerefAliases,
		0, 0, false,
		fmt.Sprintf("(uid=%s)", username), // 潜在的注入点
		[]string{"dn"},
		nil,
	)

	// 执行查询
	_, err = l.Search(searchRequest)
	if err != nil {
		log.Fatal(err)
	}

	// 这里省略了密码验证的具体实现
	return true
}

func main() {
	http.HandleFunc("/login", login)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
UNSAFE
)
