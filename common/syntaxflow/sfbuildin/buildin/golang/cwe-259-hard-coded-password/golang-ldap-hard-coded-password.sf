desc(
    title: "golang LDAP hardcoding",
    type: audit,
    severity: high,
    desc: <<<TEXT
此审计规则旨在检查使用 LDAP 框架构建的 Go 语言 Web 应用程序中的请求处理逻辑。LDAP 硬编码漏洞是指将敏感信息（如用户名和密码）直接写入代码中，这会导致凭证容易被泄露，从而引发严重的安全风险。通过分析应用程序如何处理 LDAP 请求，可以发现潜在的安全问题，如硬编码凭证、不当的输入验证、未授权的资源访问等。定期审计请求处理逻辑是确保 Web 应用程序安全性的重要步骤。

LDAP 硬编码漏洞通常发生在以下场景：
1. 用户名和密码直接以明文形式写入代码中，例如 `password := "123456"`。
2. 未对敏感信息进行加密或从安全存储中动态加载，导致凭证容易被泄露。

攻击者可以通过以下方式利用硬编码漏洞：
- 直接查看源代码或反编译应用程序，获取硬编码的凭证。
- 利用凭证访问 LDAP 服务器，获取或修改敏感数据，甚至删除或篡改数据。
TEXT
)

<include('golang-ldap-sink')> as $sink;

$sink.Bind(*<slice(index=1)> #-> as $param)
$param #{ 
	include:`*?{opcode:const}`,
}-> as $high;

alert $high for {
    title: 'LDAP credential hardcoding vulnerabilit detected',
    title_zh: '检测到LDAP硬编码',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 1,
    'file://main.go': <<<UNSAFE
package main

import (
	"fmt"
	"log"

	ldap "gopkg.in/ldap.v2"
)

func authenticate() bool {
    username := "user"
    password := "123456"
	l, err := ldap.Dial("tcp", "ldap.example.com:389")
	if err != nil {
		log.Fatalf("Failed to connect to LDAP server: %s", err)
	}
	defer l.Close()

	// 绑定到 LDAP 服务器
	err = l.Bind("cn=admin,dc=example,dc=com", password)
	if err != nil {
		log.Fatalf("Failed to bind: %s", err)
	}

	// LDAP 查询构造
	searchRequest := ldap.NewSearchRequest(
		"ou=users,dc=example,dc=com",
		ldap.ScopeWholeSubtree,
		ldap.NeverDerefAliases,
		0, 0, false,
		fmt.Sprintf("(uid=%s)", username), // 潜在的注入点
		[]string{"dn"},
		nil,
	)

	// 执行查询
	_, err = l.Search(searchRequest)
	if err != nil {
		log.Fatal(err)
	}

	// 这里省略了密码验证的具体实现
	return true
}

func main() {
	http.HandleFunc("/login", login)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
UNSAFE
)
