desc(
	title: "Audit Golang FTP Hard-Coded Password"
	type: audit
	severity: high
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   硬编码密码漏洞是指在代码中直接以明文形式存储敏感的认证凭据（如用户名和密码）。这种做法极度危险，因为攻击者一旦获取源代码，就能轻易提取这些凭据，进而非法访问相关系统或服务。在FTP客户端代码中硬编码登录凭据是常见的硬编码漏洞场景。

2. **触发场景**
   当Go语言编写的应用程序使用FTP库（例如 `github.com/jlaffaye/ftp`）连接FTP服务器时，如果将用户名和密码直接作为字符串常量或变量硬编码在代码中，并在调用`conn.Login()`等认证方法时使用这些硬编码值，就会触发此漏洞。

   示例代码：
   ```go
   package main

   import (
       "fmt"
       "github.com/jlaffaye/ftp"
       "time"
   )

   func main() {
       // Connect to FTP server
       conn, err := ftp.Dial("ftp.example.com:21", ftp.DialWithTimeout(5*time.Second))
       if err != nil {
           fmt.Println("Failed to connect:", err)
           return
       }
       defer conn.Quit()

       // Login with hardcoded credentials
       err = conn.Login("hardcoded_username", "hardcoded_password")
       if err != nil {
           fmt.Println("Failed to login:", err)
           return
       }
       defer conn.Logout()

       fmt.Println("Connected and logged in successfully")
   }
   ```

3. **潜在影响**
   - **敏感信息泄露**: 攻击者获取硬编码的FTP凭据后，可以无需认证直接登录FTP服务器，访问、修改或删除服务器上的任意文件。
   - **系统权限滥用**: 如果FTP服务器存储了其他敏感文件或配置，攻击者可能通过修改这些文件来进一步攻击系统或获取更高级别的权限。
   - **跳板攻击**: 攻击者可能利用被控制的FTP服务器作为跳板，对内网的其他系统发起攻击。
   - **合规性问题**: 硬编码敏感信息违反了许多安全标准和合规性要求（如PCI DSS、GDPR等）。
DESC
	rule_id: "e33342d8-541e-4aa6-b638-f2d0748913f2"
	solution: <<<SOLUTION
### 修复建议

为了修复FTP硬编码密码漏洞，应避免将敏感凭据直接硬编码在源代码中，而是采用更安全的存储和获取机制：

1.  **使用配置文件或环境变量**: 将FTP用户名和密码存储在应用程序外部的安全配置文件（确保文件权限设置正确）或环境变量中。在程序启动时读取这些配置。这是最常用且相对简单的修复方式。

    ```go
    // Go 代码示例：从环境变量读取凭据
    package main

    import (
    	"fmt"
    	"github.com/jlaffaye/ftp"
    	"os"
    	"time"
    )

    func main() {
    	ftpUser := os.Getenv("FTP_USERNAME")
    	ftpPass := os.Getenv("FTP_PASSWORD")

    	if ftpUser == "" || ftpPass == "" {
    		fmt.Println("FTP credentials not set as environment variables")
    		return
    	}

    	conn, err := ftp.Dial("ftp.example.com:21", ftp.DialWithTimeout(5 * time.Second))
    	if err != nil {
    		fmt.Println("Failed to connect:", err)
    		return
    	}
    	defer conn.Quit()

    	err = conn.Login(ftpUser, ftpPass)
    	if err != nil {
    		fmt.Println("Failed to login:", err)
    		return
    	}
    	defer conn.Logout()

    	fmt.Println("Connected and logged in successfully")
    }
    ```

2.  **使用密钥管理系统 (KMS)**: 对于更高级别的安全需求，可以使用云服务商提供的KMS（如AWS KMS, Google Cloud KMS, Azure Key Vault）或企业内部的密钥管理系统来安全地存储和检索敏感凭据。

3.  **使用秘密管理工具**: 使用如HashiCorp Vault, CyberArk等秘密管理工具，应用程序可以通过API动态获取凭据，避免在本地或代码中持久化存储。

4.  **避免使用FTP协议本身**: 如果可能，优先考虑使用更安全的替代协议，如SFTP (SSH File Transfer Protocol) 或 FTPS (FTP over SSL/TLS)，它们提供了加密传输和更强的认证机制。
SOLUTION
	reference: <<<REFERENCE
[CWE-259: Use of Hard-coded Password](https://cwe.mitre.org/data/definitions/259.html)
REFERENCE
	title_zh: "审计Golang FTP 硬编码密码"
)

<include('golang-ftp-sink')> as $sink;

$sink.Login(, ,* #-> as $pass)
$pass #{
	exclude:`*?{!opcode:const}`,
}-> as $high;

alert $high	for {
	type: "vuln",
	title: "Audit Golang FTP Hard-Coded Password",
	title_zh: "审计Golang FTP 硬编码密码",
	solution: <<<CODE
### 修复建议

为了修复FTP硬编码密码漏洞，应避免将敏感凭据直接硬编码在源代码中，而是采用更安全的存储和获取机制：

1.  **使用配置文件或环境变量**: 将FTP用户名和密码存储在应用程序外部的安全配置文件（确保文件权限设置正确）或环境变量中。在程序启动时读取这些配置。这是最常用且相对简单的修复方式。

    ```go
    // Go 代码示例：从环境变量读取凭据
    package main

    import (
    	"fmt"
    	"github.com/jlaffaye/ftp"
    	"os"
    	"time"
    )

    func main() {
    	ftpUser := os.Getenv("FTP_USERNAME")
    	ftpPass := os.Getenv("FTP_PASSWORD")

    	if ftpUser == "" || ftpPass == "" {
    		fmt.Println("FTP credentials not set as environment variables")
    		return
    	}

    	conn, err := ftp.Dial("ftp.example.com:21", ftp.DialWithTimeout(5 * time.Second))
    	if err != nil {
    		fmt.Println("Failed to connect:", err)
    		return
    	}
    	defer conn.Quit()

    	err = conn.Login(ftpUser, ftpPass)
    	if err != nil {
    		fmt.Println("Failed to login:", err)
    		return
    	}
    	defer conn.Logout()

    	fmt.Println("Connected and logged in successfully")
    }
    ```

2.  **使用密钥管理系统 (KMS)**: 对于更高级别的安全需求，可以使用云服务商提供的KMS（如AWS KMS, Google Cloud KMS, Azure Key Vault）或企业内部的密钥管理系统来安全地存储和检索敏感凭据。

3.  **使用秘密管理工具**: 使用如HashiCorp Vault, CyberArk等秘密管理工具，应用程序可以通过API动态获取凭据，避免在本地或代码中持久化存储。

4.  **避免使用FTP协议本身**: 如果可能，优先考虑使用更安全的替代协议，如SFTP (SSH File Transfer Protocol) 或 FTPS (FTP over SSL/TLS)，它们提供了加密传输和更强的认证机制。
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**

   硬编码密码漏洞是指在代码中直接以明文形式存储敏感的认证凭据（如用户名和密码）。这种做法极度危险，因为攻击者一旦获取源代码，就能轻易提取这些凭据，进而非法访问相关系统或服务。在FTP客户端代码中硬编码登录凭据是常见的硬编码漏洞场景。

2. **触发场景**

   当Go语言编写的应用程序使用FTP库（例如 `github.com/jlaffaye/ftp`）连接FTP服务器时，如果将用户名和密码直接作为字符串常量或变量硬编码在代码中，并在调用`conn.Login()`等认证方法时使用这些硬编码值，就会触发此漏洞。

   示例代码：
   ```go
   package main

   import (
       "fmt"
       "github.com/jlaffaye/ftp"
       "time"
   )

   func main() {
       // Connect to FTP server
       conn, err := ftp.Dial("ftp.example.com:21", ftp.DialWithTimeout(5*time.Second))
       if err != nil {
           fmt.Println("Failed to connect:", err)
           return
       }
       defer conn.Quit()

       // Login with hardcoded credentials
       err = conn.Login("hardcoded_username", "hardcoded_password")
       if err != nil {
           fmt.Println("Failed to login:", err)
           return
       }
       defer conn.Logout()

       fmt.Println("Connected and logged in successfully")
   }
   ```

3. **潜在影响**

   - **敏感信息泄露**: 攻击者获取硬编码的FTP凭据后，可以无需认证直接登录FTP服务器，访问、修改或删除服务器上的任意文件。
   - **系统权限滥用**: 如果FTP服务器存储了其他敏感文件或配置，攻击者可能通过修改这些文件来进一步攻击系统或获取更高级别的权限。
   - **跳板攻击**: 攻击者可能利用被控制的FTP服务器作为跳板，对内网的其他系统发起攻击。
   - **合规性问题**: 硬编码敏感信息违反了许多安全标准和合规性要求（如PCI DSS、GDPR等）。
CODE
	level: "high",
}

desc(
	lang: golang
	alert_high: 1
	'file://main.go': <<<UNSAFE
package main

import (
    "fmt"
    "github.com/jlaffaye/ftp"
    "time"
)

func main() {
    // 连接到 FTP 服务器
    conn, err := ftp.Dial("ftp.example.com:21", ftp.DialWithTimeout(5*time.Second))
    if err != nil {
        fmt.Println("Failed to connect:", err)
        return
    }
    defer conn.Quit()

    // 登录
    err = conn.Login("username", "password")
    if err != nil {
        fmt.Println("Failed to login:", err)
        return
    }
    defer conn.Logout()

    fmt.Println("Connected and logged in successfully")
}
UNSAFE
)

desc(
	lang: golang
	alert_high: 2
	'file://main.go': <<<UNSAFE
package main

import (
    "fmt"
    "github.com/jlaffaye/ftp"
    "time"
)

func main() {
    // 连接到 FTP 服务器
    conn, err := ftp.Dial("ftp.example.com:21", ftp.DialWithTimeout(5*time.Second))
    if err != nil {
        fmt.Println("Failed to connect:", err)
        return
    }
    defer conn.Quit()

    // 登录
    pass := "password" + "aaaaaaaaaaaaa"
    err = conn.Login("username",  pass)
    if err != nil {
        fmt.Println("Failed to login:", err)
        return
    }
    defer conn.Logout()

    fmt.Println("Connected and logged in successfully")
}
UNSAFE
)



desc(
	lang: golang
	'safefile://main.go': <<<SAFE
package main

import (
    "fmt"
    "github.com/jlaffaye/ftp"
    "time"
)

func main() {
    // 连接到 FTP 服务器
    conn, err := ftp.Dial("ftp.example.com:21", ftp.DialWithTimeout(5*time.Second))
    if err != nil {
        fmt.Println("Failed to connect:", err)
        return
    }
    defer conn.Quit()

    // 登录
    pass := getPassword()
    err = conn.Login("username",  pass)
    if err != nil {
        fmt.Println("Failed to login:", err)
        return
    }
    defer conn.Logout()

    fmt.Println("Connected and logged in successfully")
}
SAFE
)
