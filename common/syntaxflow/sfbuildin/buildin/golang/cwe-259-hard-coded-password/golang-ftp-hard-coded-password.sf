desc(
    title: "golang FTP hardcoding",
    type: audit,
    severity: high,
    desc: <<<TEXT
此审计规则旨在检查使用 FTP 框架构建的 Go 语言 Web 应用程序中的请求处理逻辑。在使用 `conn.Login` 进行登录时，确保用户名和密码的安全性，避免硬编码敏感信息。硬编码的凭证（如用户名和密码）会直接暴露在源代码中，容易被攻击者获取，从而导致严重的安全风险。

FTP 硬编码漏洞通常发生在以下场景：
1. 用户名和密码直接以明文形式写入代码中，例如 `conn.Login("username", "password")`。
2. 未对敏感信息进行加密或从安全存储中动态加载，导致凭证容易被泄露。
TEXT
)

<include('golang-ftp-sink')> as $sink;

$sink.Login(* #-> as $param)
$param #{ 
	include:`*?{opcode:const}`,
}-> as $high;

alert $high for {
    title: 'LDAP credential hardcoding vulnerabilit detected',
    title_zh: '检测到LDAP硬编码',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 1,
    'file://main.go': <<<UNSAFE
package main

import (
    "fmt"
    "github.com/jlaffaye/ftp"
    "time"
)

func main() {
    // 连接到 FTP 服务器
    conn, err := ftp.Dial("ftp.example.com:21", ftp.DialWithTimeout(5*time.Second))
    if err != nil {
        fmt.Println("Failed to connect:", err)
        return
    }
    defer conn.Quit()

    // 登录
    err = conn.Login("username", "password")
    if err != nil {
        fmt.Println("Failed to login:", err)
        return
    }
    defer conn.Logout()

    fmt.Println("Connected and logged in successfully")
}
UNSAFE
)
