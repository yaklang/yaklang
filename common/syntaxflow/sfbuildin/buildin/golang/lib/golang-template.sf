desc(
	title: "Audit Golang html/template Usage"
	type: audit
	level: info
	lib: 'golang-template'
	desc: <<<DESC
### 1.规则目的
该规则用于审计Go语言代码中`html/template`包的使用情况，特别是关注于模板渲染时输入变量的处理。虽然`html/template`包本身设计用于防止跨站脚本（XSS）等常见注入攻击，但开发者在使用时如果不当处理动态内容，仍可能引入安全风险。因此，此规则旨在识别潜在的不安全模板使用模式。

### 2.规则详细
1. **作为基础检测库**
   属于`golang-template`库规则（`lib`类型），可配合其他规则（如用户输入跟踪规则）共同检测模板注入或不安全的模板使用。

2. **识别`html/template`导入**
   检测代码中是否导入了`html/template`包。
DESC
	rule_id: "d47f5ca9-7bab-441d-bc3b-8c642bac9e97"
	reference: <<<REFERENCE
[Go html/template documentation](https://pkg.go.dev/html/template)
REFERENCE
	title_zh: "审计Golang html/template使用"
	solution: <<<SOLUTION
none
SOLUTION
)

template?{<fullTypeName>?{have: 'html/template'}} as $output

alert $output for {
	title: "Audit Golang html/template Usage",
	title_zh: "审计Golang html/template使用",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://template.go': <<<PARAM
package main

import (
    "fmt"
    "html/template"
    "net/http"
)

func main() {
    http.HandleFunc("/greet", func(w http.ResponseWriter, r *http.Request) {
        // 获取用户输入
        username := r.URL.Query().Get("name")

        // 直接拼接用户输入到模板中
        tmpl := fmt.Sprintf("Hello, %s!", username)

        // 渲染模板
        t := template.Must(template.New("greet").Parse(tmpl))
        t.Execute(w, nil)
    })

    http.ListenAndServe(":8080", nil)
}

PARAM
)
