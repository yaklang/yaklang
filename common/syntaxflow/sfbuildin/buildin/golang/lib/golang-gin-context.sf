desc(
	title: "Check Golang gin-context Vulnerability"
	type: audit
	level: info
	lib: 'golang-gin-context'
	desc: <<<DESC
该规则用于检测Golang中使用gin-context库时可能存在的一个漏洞。gin-context是Golang的gin框架中的一个库，用于处理HTTP请求和响应。如果不当使用，可能会导致不安全的数据处理，进而引发安全风险。具体描述如下：

- **漏洞原理**：gin-context在处理HTTP请求时，如果用户输入的数据没有被正确地验证或转义，攻击者可能会利用这些数据执行不安全的操作。

- **触发场景**：当使用gin-context处理用户输入，并且未对输入数据进行适当的验证或处理时。

- **潜在影响**：可能导致信息泄露、系统被攻击者控制等安全问题。
DESC
	rule_id: "7c85dcea-a0f0-e8bb-3a35-1a059ed05d04"
	title_zh: "检测Golang gin-context 漏洞"
	solution: <<<SOLUTION
为了解决这个问题，建议采取以下措施：\n\n1. 对所有用户输入进行严格的验证和过滤，确保输入数据符合预期的格式和范围。\n2. 使用安全的API和函数来处理用户输入，避免使用可能导致安全问题的函数。\n3. 定期更新和审计代码，确保使用了最新的库和补丁。\n\n以下是一个修复的代码示例：\n\n```go
    package main
    
    import (
        \"github.com/gin-gonic/gin\"
        \"net/http\"
    )
    
    func SafeHandle(c *gin.Context) {
        // 示例：验证用户输入
        ip := c.Query(\"ip\")
        if ip != \"expected_value\" {
            c.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid IP\"})
            return
        }
        // 安全地处理请求
    }
    ```
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
)

*.Query(* #-> as $param) 
*.DefaultQuery(* #-> as $param) 
*.GetQuery(* #-> as $param) 
*.QueryArray(* #-> as $param) 
*.GetQueryArray(* #-> as $param) 
*.PostForm(* #-> as $param) 
*.DefaultPostForm(* #-> as $param) 
*.GetPostForm(* #-> as $param) 
*.PostFormArray(* #-> as $param) 
*.GetPostFormArray(* #-> as $param) 
gin.Context as $param
$param?{<fullTypeName>?{have: 'github.com/gin-gonic/gin'}} #-> as $output
$param?{<fullTypeName>?{have: 'github.com/godzeo/go-gin-vul'}} #-> as $output

alert $output for {
	level: "info",
	title: "Audit Golang gin-context Package Usage",
	title_zh: "审计Golang gin-context库的使用",
}

desc(
	lang: golang
	alert_min: 1
	'file://user_input.go': <<<PARAM
package main

import (
	"encoding/base64"
	"fmt"
	"github.com/gin-gonic/gin"
	"net/http"
	"os/exec"
)

func CMD1(c *gin.Context) {

	var ipaddr string
	// Check the request method
	if c.Request.Method == "GET" {
		ipaddr = c.Query("ip")
	} else if c.Request.Method == "POST" {
		ipaddr = c.PostForm("ip")
	}

	Command := fmt.Sprintf("ping -c 4 %s", ipaddr)
	output, err := exec.Command("/bin/sh", "-c", Command).Output()
	if err != nil {
		fmt.Println(err)
		return
	}
	c.JSON(200, gin.H{
		"success": string(output),
	})
}
PARAM
)
