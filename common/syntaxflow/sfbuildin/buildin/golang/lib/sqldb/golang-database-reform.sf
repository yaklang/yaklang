desc(
	title: "Audit Golang Database Reform Usage"
	type: audit
	level: info
	lib: 'golang-database-reform'
	desc: <<<DESC
### 1.规则目的
此规则旨在审计Go项目中是否使用了`github.com/hedonist/reform`库进行数据库操作。`reform`库是一个ORM（对象关系映射）工具，用于在Go应用程序中更方便地与数据库进行交互。审计的目的是确保数据库操作符合安全最佳实践，包括但不限于防止SQL注入攻击、确保数据完整性和安全性。

### 2.规则详细
该规则通过检测代码中是否存在对`github.com/hedonist/reform`库的引用，特别是对`reform.NewDB()`方法的调用，来识别`reform`库的使用。这有助于安全审计人员快速定位数据库交互相关的代码段，进而进行人工审查或配合其他规则（如SQL语句构建规则）分析是否存在更深层次的安全问题，例如：

- **潜在的SQL注入风险：** 尽管ORM旨在减少注入风险，但不当的使用（例如，直接在Criteria或Where子句中拼接未经净化的用户输入）仍可能导致注入。
- **数据泄露或篡改风险：** 审计`reform`库的操作（Select, Insert, Update, Delete）可以帮助发现是否对敏感数据进行了不必要的查询、更新或删除。
- **连接管理和错误处理：** 检查数据库连接的生命周期管理、连接池配置以及错误处理是否得当，防止资源耗尽或敏感错误信息泄露。
DESC
	rule_id: "ff1e08f0-1c18-43bb-920b-436a6bfa8dcd"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
[GitHub - hedonist/reform](https://github.com/hedonist/reform)
REFERENCE
	title_zh: "审计Golang Database Reform的使用"
)

reform?{<fullTypeName>?{have: 'github.com/hedonist/reform'}} as $entry;
$entry.NewDB() as $output;

alert $output for {
	title: "Audit Golang Database Reform Usage",
	title_zh: "审计Golang Database Reform的使用",
	solution: <<<CODE
none
CODE
	desc: <<<CODE
### 1.规则目的
此规则旨在审计Go项目中是否使用了`github.com/hedonist/reform`库进行数据库操作。`reform`库是一个ORM（对象关系映射）工具，用于在Go应用程序中更方便地与数据库进行交互。审计的目的是确保数据库操作符合安全最佳实践，包括但不限于防止SQL注入攻击、确保数据完整性和安全性。

### 2.规则详细
该规则通过检测代码中是否存在对`github.com/hedonist/reform`库的引用，特别是对`reform.NewDB()`方法的调用，来识别`reform`库的使用。这有助于安全审计人员快速定位数据库交互相关的代码段，进而进行人工审查或配合其他规则（如SQL语句构建规则）分析是否存在更深层次的安全问题，例如：

- **潜在的SQL注入风险：** 尽管ORM旨在减少注入风险，但不当的使用（例如，直接在Criteria或Where子句中拼接未经净化的用户输入）仍可能导致注入。
- **数据泄露或篡改风险：** 审计`reform`库的操作（Select, Insert, Update, Delete）可以帮助发现是否对敏感数据进行了不必要的查询、更新或删除。
- **连接管理和错误处理：** 检查数据库连接的生命周期管理、连接池配置以及错误处理是否得当，防止资源耗尽或敏感错误信息泄露。
CODE
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://database.go': <<<PARAM
package main

import (
    "database/sql"
    "fmt"
    "log"

    "github.com/hedonist/reform"
    _ "modernc.org/sqlite"
)

// User 定义用户模型
type User struct {
    ID   uint    // 主键
    Name string  // 用户名
    Age  int     // 年龄
}

func main() {
    // 连接到 SQLite 数据库
    db, err := sql.Open("sqlite", "example.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // 创建 Reform 连接
    reformDB := reform.NewDB(db, reform.NewDialect("sqlite"))

    // 自动迁移：创建表
    err = reformDB.Exec(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        age INTEGER
    );`)
    if err != nil {
        log.Fatal(err)
    }

    // 插入用户数据
    user := &User{Name: "Alice", Age: 30}
    err = reformDB.Insert(user)
    if err != nil {
        log.Fatal(err)
    }

    // 查询用户数据
    var users []User
    err = reformDB.Select(&users, "SELECT * FROM users")
    if err != nil {
        log.Fatal(err)
    }

    // 打印用户信息
    fmt.Println("Users:")
    for _, u := range users {
        fmt.Printf("ID: %d, Name: %s, Age: %d\n", u.ID, u.Name, u.Age)
    }

    // 更新用户信息
    user.Age = 31
    err = reformDB.Update(user)
    if err != nil {
        log.Fatal(err)
    }

    // 删除用户
    err = reformDB.Delete(user)
    if err != nil {
        log.Fatal(err)
    }
}

PARAM
)
