desc(
	title: "Audit Golang Database Reform Usage"
	type: audit
	level: info
	lib: 'golang-database-reform'
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   SQL注入攻击是由于应用程序未对用户输入进行严格的验证或参数化处理，攻击者可以通过构造特殊输入篡改SQL语句逻辑。尽管ORM（如`reform`）库旨在减少直接拼接SQL的风险，但若在查询条件中直接嵌入未经净化的用户输入，仍可能导致SQL注入。

2. **触发场景**
   以下是存在潜在风险的代码示例：
   ```go
   userInput := r.URL.Query().Get("name")
   query := fmt.Sprintf("SELECT * FROM users WHERE name = '%s'", userInput)
   err := reformDB.Select(&users, query)
   if err != nil {
       log.Fatal(err)
   }
   ```
   如果攻击者输入 `name=' OR '1'='1`，则上述代码可能被利用来泄露所有用户数据。

3. **潜在影响**
   - 数据库敏感信息（如用户凭证、隐私数据）被窃取。
   - 攻击者可通过恶意输入执行任意SQL语句，包括插入、删除或修改数据。
   - 通过数据库提权进一步渗透至服务器或其他系统组件。

4. **规则详细**
   该规则通过检测是否使用了`github.com/hedonist/reform`库及其方法（如`NewDB`），帮助审计人员快速定位数据库操作相关的代码段，并结合其他规则分析是否存在SQL注入等安全问题。

DESC
	rule_id: "ff1e08f0-1c18-43bb-920b-436a6bfa8dcd"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用参数化查询
通过`reform`提供的内置参数化功能，避免手动拼接SQL语句。
```go
userInput := r.URL.Query().Get("name")
err := reformDB.Select(&users, "SELECT * FROM users WHERE name = ?", userInput)
if err != nil {
    log.Fatal(err)
}
```

#### 2. 输入合法性校验
在接收用户输入时实施严格的验证，拒绝非法字符。
```go
import "regexp"

func validateInput(input string) bool {
    matched, _ := regexp.MatchString(`^[a-zA-Z0-9_]+$`, input)
    return matched
}

userInput := r.URL.Query().Get("name")
if !validateInput(userInput) {
    log.Fatal("非法输入")
}
```

#### 3. 配置连接池与错误处理
确保数据库连接池配置合理以防止资源耗尽，同时避免返回详细的错误信息。
```go
sqlDB, err := sql.Open("sqlite", "example.db")
if err != nil {
    log.Fatal(err)
}
sqlDB.SetMaxOpenConns(10)
sqlDB.SetMaxIdleConns(5)
reformDB := reform.NewDB(sqlDB, reform.NewDialect("sqlite"))
```

SOLUTION
	reference: <<<REFERENCE
[GitHub - hedonist/reform](https://github.com/hedonist/reform)
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)
REFERENCE
	title_zh: "审计Golang Database Reform的使用"
)

reform?{<fullTypeName>?{have: 'github.com/hedonist/reform'}} as $entry;
$entry.NewDB() as $output;

alert $output for {
	title: "Audit Golang Database Reform Usage",
	title_zh: "审计Golang Database Reform的使用",
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://database.go': <<<PARAM
package main

import (
    "database/sql"
    "fmt"
    "log"

    "github.com/hedonist/reform"
    _ "modernc.org/sqlite"
)

// User 定义用户模型
type User struct {
    ID   uint    // 主键
    Name string  // 用户名
    Age  int     // 年龄
}

func main() {
    // 连接到 SQLite 数据库
    db, err := sql.Open("sqlite", "example.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // 创建 Reform 连接
    reformDB := reform.NewDB(db, reform.NewDialect("sqlite"))

    // 自动迁移：创建表
    err = reformDB.Exec(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        age INTEGER
    );`)
    if err != nil {
        log.Fatal(err)
    }

    // 插入用户数据
    user := &User{Name: "Alice", Age: 30}
    err = reformDB.Insert(user)
    if err != nil {
        log.Fatal(err)
    }

    // 查询用户数据
    var users []User
    err = reformDB.Select(&users, "SELECT * FROM users")
    if err != nil {
        log.Fatal(err)
    }

    // 打印用户信息
    fmt.Println("Users:")
    for _, u := range users {
        fmt.Printf("ID: %d, Name: %s, Age: %d\n", u.ID, u.Name, u.Age)
    }

    // 更新用户信息
    user.Age = 31
    err = reformDB.Update(user)
    if err != nil {
        log.Fatal(err)
    }

    // 删除用户
    err = reformDB.Delete(user)
    if err != nil {
        log.Fatal(err)
    }
}

PARAM
)
