desc(
	title: "Audit Golang Database/SQL Usage"
	type: audit
	level: info
	lib: 'golang-database-sql'
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   SQL注入是由于应用程序未对用户输入进行严格的过滤或参数化处理，攻击者可通过构造特殊输入篡改原始SQL语句的逻辑。这可能导致非预期的数据库操作，例如数据泄露、数据篡改或权限绕过。

2. **触发场景**
   // 存在漏洞的代码示例
   ```go
   package main

   import (
       "database/sql"
       "fmt"
       "log"

       _ "github.com/mattn/go-sqlite3" // SQLite 驱动
   )

   func main() {
       db, err := sql.Open("sqlite3", "example.db")
       if err != nil {
           log.Fatal(err)
       }
       defer db.Close()

       userInput := "1 OR 1=1"
       query := fmt.Sprintf("SELECT * FROM users WHERE id = %s", userInput) // 直接拼接用户输入

       rows, err := db.Query(query)
       if err != nil {
           log.Fatal(err)
       }
       defer rows.Close()

       for rows.Next() {
           var id int
           var name string
           var age int
           if err := rows.Scan(&id, &name, &age); err != nil {
               log.Fatal(err)
           }
           fmt.Printf("ID: %d, Name: %s, Age: %d\n", id, name, age)
       }
   }
   ```
   上述代码中，攻击者可以通过输入 `1 OR 1=1` 绕过业务逻辑，导致所有用户数据被泄露。

3. **潜在影响**
   - 数据库敏感信息（如用户凭证、隐私数据）被窃取。
   - 执行任意SQL语句（如插入、删除、修改数据或数据库结构）。
   - 通过数据库提权进一步渗透至服务器或其他系统组件。
DESC
	rule_id: "db7e72fa-79c2-42a8-bcd3-8418ad3136af"
	title_zh: "审计Golang Database/SQL使用"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用参数化查询
通过预编译SQL语句并绑定用户输入，隔离代码与数据，避免恶意输入篡改逻辑。
```go
package main

import (
    "database/sql"
    "log"

    _ "github.com/mattn/go-sqlite3" // SQLite 驱动
)

func main() {
    db, err := sql.Open("sqlite3", "example.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    userInput := "1"
    query := "SELECT * FROM users WHERE id = ?" // 使用占位符

    rows, err := db.Query(query, userInput) // 绑定参数
    if err != nil {
        log.Fatal(err)
    }
    defer rows.Close()

    for rows.Next() {
        var id int
        var name string
        var age int
        if err := rows.Scan(&id, &name, &age); err != nil {
            log.Fatal(err)
        }
        fmt.Printf("ID: %d, Name: %s, Age: %d\n", id, name, age)
    }
}
```

#### 2. 输入合法性校验
对用户输入实施类型、格式或范围限制，拒绝非法输入。
```go
if !regexp.MustCompile(`^[0-9]+$`).MatchString(userInput) {
    log.Fatal("输入必须为数字")
}
```

#### 3. 使用ORM框架
通过ORM（如GORM）内置的安全机制自动处理参数化，避免手动拼接SQL。
```go
import "gorm.io/gorm"

func main() {
    db, err := gorm.Open(sqlite.Open("example.db"), &gorm.Config{})
    if err != nil {
        log.Fatal(err)
    }

    var user User
    db.Where("id = ?", userInput).First(&user) // 安全参数占位符
}
```
SOLUTION
	reference: <<<REFERENCE
[Golang database/sql documentation](https://pkg.go.dev/database/sql)
[CWE-89](https://cwe.mitre.org/data/definitions/89.html)
REFERENCE
)

sql?{<fullTypeName>?{have: 'database/sql'}} as $entry;
$entry.Open <getCall> as $db;
$db <getMembers> as $output;

alert $output	for {
	level: "info",
	title: "Audit Golang Database/SQL Usage",
	title_zh: "审计Golang Database/SQL使用",
}

desc(
	lang: golang
	alert_min: 1
	'file://database.go': <<<PARAM
package main

import (
    "database/sql"
    "fmt"
    "log"

    _ "github.com/mattn/go-sqlite3" // SQLite 驱动
)

func main() {
    // 连接到 SQLite 数据库（如果文件不存在，将创建文件）
    db, err := sql.Open("sqlite3", "example.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // 创建表
    createTableSQL := `CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        age INTEGER
    );`
    if _, err := db.Exec(createTableSQL); err != nil {
        log.Fatal(err)
    }

    // 插入数据
    insertSQL := `INSERT INTO users (name, age) VALUES (?, ?)`
    if _, err := db.Exec(insertSQL, "Alice", 30); err != nil {
        log.Fatal(err)
    }
    if _, err := db.Exec(insertSQL, "Bob", 25); err != nil {
        log.Fatal(err)
    }

    // 查询数据
    rows, err := db.Query("SELECT id, name, age FROM users")
    if err != nil {
        log.Fatal(err)
    }
    defer rows.Close()

    // 处理查询结果
    fmt.Println("Users:")
    for rows.Next() {
        var id int
        var name string
        var age int
        if err := rows.Scan(&id, &name, &age); err != nil {
            log.Fatal(err)
        }
        fmt.Printf("ID: %d, Name: %s, Age: %d\n", id, name, age)
    }

    // 检查查询过程中是否出现错误
    if err := rows.Err(); err != nil {
        log.Fatal(err)
    }
}

PARAM
)
