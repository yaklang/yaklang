desc(
	title: "Check Go Database Operation Safety"
	type: audit
	level: info
	lib: 'golang-database-from-param'
	desc: <<<DESC
此审计规则旨在检查Go语言项目中是否正确使用了`database/sql`包来操作数据库。`database/sql`包提供了对SQL数据库的通用接口，包括打开和关闭数据库连接、执行SQL语句以及查询数据。不正确的数据库操作可能会导致SQL注入攻击、数据泄露或损坏等安全风险。通过此审计，可以确保数据库操作代码符合安全最佳实践，减少潜在的安全漏洞。
DESC
	rule_id: "3b8c73e6-7a99-4397-bd09-428b9073e5a1"
	title_zh: "检查Go数据库操作安全性"
	solution: <<<SOLUTION
为了防止SQL注入攻击，应始终使用参数化查询。下面是一个修复代码示例，它展示了如何使用参数化查询来避免SQL注入风险。

```go
import (
    "database/sql"
    "github.com/lib/pq"
)

func listTables(db *sql.DB, input string) {
    var tableName string
    err := db.QueryRow("SELECT table_name FROM information_schema.tables WHERE table_schema = $1 AND table_name = $2", "public", input).Scan(&tableName)
    if err != nil {
        // 处理错误
    }
    // 处理查询结果
}
```
在上述代码中，使用`$1`和`$2`作为参数占位符，并通过`db.QueryRow`传递参数值，这样可以有效防止SQL注入。
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
)

*.Query<getFunc><getFormalParams> as $entry 
*.QueryRow<getFunc><getFormalParams> as $entry 
$entry #-> as $output;

alert $output
desc(
	lang: golang
	alert_min: 1
	'file://database.go': <<<PARAM
package main

import (
    "database/sql"
    "fmt"
    _ "github.com/lib/pq"
    "strings"
)

func listTables(db *sql.DB) {
    rows, err := db.Query("SELECT * FROM users WHERE name='" + input + "'")
    if err != nil {
        fmt.Println("Failed to list tables:", err)
        return
    }
    defer rows.Close()

    for rows.Next() {
        var tableName string
        if err := rows.Scan(&tableName); err != nil {
            fmt.Println("Failed to scan table name:", err)
            return
        }
        fmt.Println("Table:", tableName)
    }
}

PARAM
)
