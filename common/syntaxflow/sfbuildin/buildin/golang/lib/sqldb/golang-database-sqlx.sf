desc(
	title: "Audit Golang Sqlx Library Usage"
	type: audit
	level: info
	lib: 'golang-database-sqlx'
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   SQL注入是由于应用程序未对用户输入进行严格的过滤或参数化处理，攻击者可通过构造特殊输入篡改原始SQL语句的逻辑。这可能导致非预期的数据库操作，例如数据泄露、数据篡改或权限绕过。

2. **触发场景**
   // 存在漏洞的代码示例
   ```go
   userInput := r.URL.Query().Get("id")
   query := fmt.Sprintf("SELECT * FROM users WHERE id = %s", userInput)
   rows, err := db.Query(query)
   if err != nil {
       log.Fatal(err)
   }
   defer rows.Close()
   ```
   攻击者输入 `1 OR 1=1` 可绕过业务逻辑，泄露所有用户数据；输入 `1; DROP TABLE users` 可能导致数据表被删除。

3. **潜在影响**
   - 数据库敏感信息（如用户凭证、隐私数据）被窃取。
   - 执行任意SQL语句（如插入、删除、修改数据或数据库结构）。
   - 通过数据库提权进一步渗透至服务器或其他系统组件。
DESC
	rule_id: "b7b4503b-03ff-4c54-a942-155d18621e75"
	title_zh: "审计Golang Sqlx库使用情况"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用参数化查询
通过预编译SQL语句并绑定用户输入，隔离代码与数据，避免恶意输入篡改逻辑。
```go
userInput := r.URL.Query().Get("id")
query := "SELECT * FROM users WHERE id = :id"
args := map[string]interface{}{"id": userInput}
rows, err := db.NamedQuery(query, args)
if err != nil {
    log.Fatal(err)
}
defer rows.Close()
```

#### 2. 输入合法性校验
对用户输入实施类型、格式或范围限制，拒绝非法输入。
```go
if !regexp.MustCompile(`^[0-9]+$`).MatchString(userInput) {
    http.Error(w, "Invalid input", http.StatusBadRequest)
    return
}
```

#### 3. 使用ORM框架
通过ORM（如GORM）内置的安全机制自动处理参数化，避免手动拼接SQL。
```go
type User struct {
    ID uint
    Name string
    Age int
}
var users []User
db.Where("id = ?", userInput).Find(&users)
```
SOLUTION
	reference: <<<REFERENCE
[CWE-89](https://cwe.mitre.org/data/definitions/89.html)
REFERENCE
)

sqlx?{<fullTypeName>?{have: 'github.com/jmoiron/sqlx'}} as $entry;
$entry.Connect <getCall> as $db;
$entry.Open <getCall> as $db;
$db <getMembers> as $output;

alert $output	for {
	level: "info",
	title: "Audit Golang Sqlx Library Usage",
	title_zh: "审计Golang Sqlx库使用情况",
}

desc(
	lang: golang
	alert_min: 1
	'file://database.go': <<<PARAM
package main

import (
    "fmt"
    "log"

    "github.com/jmoiron/sqlx"
    _ "modernc.org/sqlite"
)

type User struct {
	ID   uint
	Name string
	Age  int
}

func main() {
    // 连接到 SQLite 数据库
    db, err := sqlx.Open("sqlite", "example.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // 创建用户表
    schema := `CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        age INTEGER
    );`
    db.MustExec(schema)

    // 插入用户数据
    user := User{Name: "Alice", Age: 30}
    _, err = db.NamedExec(`INSERT INTO users (name, age) VALUES (:name, :age)`, &user)
    if err != nil {
        log.Fatal(err)
    }

    // 查询用户数据
    var users []User
    err = db.Select(&users, "SELECT * FROM users")
    if err != nil {
        log.Fatal(err)
    }

    // 打印用户信息
    fmt.Println("Users:")
    for _, u := range users {
        fmt.Printf("ID: %d, Name: %s, Age: %d\n", u.ID, u.Name, u.Age)
    }

    // 更新用户信息
    user.Age = 31
    _, err = db.NamedExec(`UPDATE users SET age = :age WHERE name = :name`, user)
    if err != nil {
        log.Fatal(err)
    }

    // 删除用户
    _, err = db.Exec(`DELETE FROM users WHERE name = ?`, user.Name)
    if err != nil {
        log.Fatal(err)
    }
}

PARAM
)
