desc(
	title: "Audit Golang File Read Sink"
	type: audit
	level: info
	lib: 'golang-file-read-sink'
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   文件读取操作是应用程序中常见的功能，但如果未对文件路径或名称进行严格的验证，可能导致安全风险。例如，当文件路径来源于用户输入且未经过校验时，攻击者可能利用路径遍历漏洞访问敏感文件（如`/etc/passwd`）。此外，不当的文件读取逻辑还可能泄露敏感数据或导致程序崩溃。

2. **触发场景**
   ```go
   package main

   import (
       "bufio"
       "fmt"
       "os"
   )

   func main() {
       filePath := os.Args[1] // 用户输入的文件路径
       file, err := os.Open(filePath)
       if err != nil {
           fmt.Println("Error:", err)
           return
       }
       defer file.Close()

       reader := bufio.NewReader(file)
       data, _ := reader.ReadString('\n')
       fmt.Println("File Content:", data)
   }
   ```
   如果攻击者传入路径 `../../etc/passwd`，可能会读取系统关键文件。

3. **潜在影响**
   - 敏感文件（如配置文件、密码文件）被非法访问。
   - 攻击者利用路径遍历漏洞进一步渗透系统。
   - 程序可能因尝试读取不存在或受保护的文件而崩溃。

### 规则目的
此规则作为库规则（lib类型），旨在审计Go语言应用程序中用于文件读取的核心函数调用。它主要负责识别可能从文件读取数据的关键函数作为数据汇聚点或潜在敏感操作点。

### 规则详细
1. **作为基础审计库**
   属于 `golang-file-read-sink` 库规则，用于标记代码中所有执行文件读取的函数调用。

2. **覆盖高危读取函数**
   检测以下几种文件读取函数：
   - `bufio.Reader.Read`
   - `bufio.Reader.ReadByte`
   - `bufio.Reader.ReadBytes`
   - `bufio.Reader.ReadLine`
   - `bufio.Reader.ReadRune`
   - `bufio.Reader.ReadSlice`
   - `bufio.Reader.ReadString`
   - `ioutil.ReadFile`
   - `os.File.Read`
   - `os.File.ReadAt`
   - `os.File.ReadRune`
   - `os.File.ReadString`

   这些函数本身不构成漏洞，但如果其输入参数（如文件名或路径）来源于不受信任的外部输入且未进行严格验证，则可能导致如路径遍历、敏感文件读取等安全问题。此规则通常与其他规则（如数据流跟踪规则）配合使用，以识别从不可信源到这些文件读取汇聚点的潜在恶意数据流。
DESC
	rule_id: "96d04555-9e4b-4e41-882a-82ec887c0a4c"
	title_zh: "审计Golang文件读取汇聚点"
	solution: <<<SOLUTION
### 修复建议

#### 1. 验证用户输入
对用户提供的文件路径实施严格的验证，确保路径合法且在预期范围内。
```go
package main

import (
    "fmt"
    "os"
    "path/filepath"
)

func main() {
    baseDir := "/safe/directory" // 安全的基础目录
    userInput := os.Args[1]

    // 构造绝对路径并验证是否在基础目录下
    absPath, err := filepath.Abs(filepath.Join(baseDir, userInput))
    if err != nil || !filepath.HasPrefix(absPath, baseDir) {
        fmt.Println("Invalid file path")
        return
    }

    // 打开文件
    file, err := os.Open(absPath)
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    defer file.Close()

    fmt.Println("File opened successfully:", absPath)
}
```

#### 2. 使用白名单限制文件访问
通过白名单机制限制可访问的文件范围，避免直接使用用户输入。
```go
allowedFiles := map[string]bool{
    "/safe/file1.txt": true,
    "/safe/file2.log": true,
}

userInput := os.Args[1]
if !allowedFiles[userInput] {
    fmt.Println("Access to this file is not allowed")
    return
}

// 打开文件
file, err := os.Open(userInput)
if err != nil {
    fmt.Println("Error:", err)
    return
}
defer file.Close()
```

#### 3. 记录和监控文件访问行为
记录所有文件访问操作，并结合日志分析工具监控可疑行为。
```go
func logFileAccess(filePath string) {
    fmt.Printf("File accessed: %s\n", filePath)
    // 可集成日志工具发送至集中式日志管理系统
}

logFileAccess(absPath)
```

以上方法可以有效防止路径遍历漏洞和敏感文件非法访问，同时提升系统的安全性。
SOLUTION
	reference: <<<REFERENCE
[CWE-22: Path Traversal](https://cwe.mitre.org/data/definitions/22.html)
[OWASP Path Traversal](https://owasp.org/www-community/vulnerabilities/Path_Traversal)
REFERENCE
)

<include('golang-file-read-bufio')> as $output;
<include('golang-file-read-ioutil')> as $output;
<include('golang-file-read-os')> as $output;

alert $output	for {
	title: "Audit Golang File Read Sink",
	title_zh: "审计Golang文件读取汇聚点",
	level: "info",
}
