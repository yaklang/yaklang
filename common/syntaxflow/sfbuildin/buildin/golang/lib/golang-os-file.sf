desc(
	title: "Audit Golang os Package Usage"
	type: audit
	level: info
	lib: 'golang-os-sink'
	desc: <<<DESC
### 1.规则目的
该规则用于审计Go语言代码中`os`包的使用情况。`os`包提供了与操作系统进行交互的功能，包含文件操作、目录操作、进程管理、环境变量访问等。审计`os`包的使用有助于识别潜在的风险点，例如不安全的文件操作、任意命令执行、敏感信息泄露等。

### 2.规则详细
1. **作为基础审计库**
   属于`golang-os-sink`库规则（`lib`类型），需配合其他规则（如用户输入跟踪）共同识别安全风险，提供对`os`包关键函数的识别能力。

2. **覆盖的操作函数**
   检测以下`os`包中的文件及目录操作函数，这些函数在接收不受信任的输入时可能引发路径穿越或文件权限问题：
   - `Create`: 创建文件
   - `Open`: 打开文件
   - `Remove`: 删除文件或空目录
   - `RemoveAll`: 删除目录及其内容
   - `Mkdir`: 创建目录
   - `MkdirAll`: 创建目录及其父目录（如果需要）
   - `ReadDir`: 读取目录内容

通过识别这些关键函数的使用，结合数据流分析，可以追踪不受控的数据是否被用于文件路径、命令参数或其他敏感操作，从而发现潜在的安全漏洞。
DESC
	rule_id: "4ba61a38-efec-4cf2-9d38-f77352e05185"
	title_zh: "审计Golang os包使用"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
)

os?{<fullTypeName>?{have: 'os'}} as $entry
$entry.Create(* #-> as $output) 
$entry.Open(* #-> as $output) 
$entry.Remove(* #-> as $output) 
$entry.RemoveAll(* #-> as $output) 
$entry.Mkdir(* #-> as $output) 
$entry.MkdirAll(* #-> as $output) 
$entry.ReadDir(* #-> as $output) 

alert $output

desc(
	lang: golang
	alert_min: 1
	'file://os.go': <<<PARAM
package main

import (
    "fmt"
    "net/http"
    "os"
    "path/filepath"
    "strings"
)

func main() {
    http.HandleFunc("/upload", func(w http.ResponseWriter, r *http.Request) {
		file, handler, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "Error retrieving the file", http.StatusBadRequest)
			return
		}
		defer file.Close()

		// 验证文件路径
		safePath := filepath.Join("/var/www/uploads", filepath.Base(handler.Filename))
		if !strings.HasPrefix(safePath, "/var/www/uploads") {
			http.Error(w, "Invalid file path", http.StatusBadRequest)
			return
		}

		// 保存文件
		dst, err := os.Create(safePath)
		if err != nil {
			http.Error(w, "Error creating the file", http.StatusInternalServerError)
			return
		}
		defer dst.Close()

		io.Copy(dst, file)
		fmt.Fprintf(w, "File uploaded successfully")
	})
}

PARAM
)
