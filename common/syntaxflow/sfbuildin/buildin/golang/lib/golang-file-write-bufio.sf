desc(
    title: "check file write function",
    type: audit,
    level: info,
    lib: 'golang-file-write-bufio',
    desc: <<<TEXT
此审计规则旨在检查Go语言程序中是否存在使用`bufio`库进行文件写入操作的代码。虽然`bufio`库提供了高效的文件写入功能，但不当的文件写入操作可能会引发安全问题，如写入敏感信息到不安全的文件路径，或者因文件权限设置不当而导致数据泄露。因此，建议开发者在进行文件写入操作时，确保文件路径的安全性，并合理设置文件权限。
TEXT
)

bufio?{<fullTypeName>?{have: 'bufio'}} as $entry;
$entry.NewWriter <getCall> as $writer;
$writer.WriteString(* #-> as $output); 

alert $output

desc(
    lang: golang,
    alert_min: 1,
    'file://filewrite.go': <<<PARAM
package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    // 写入文件
    writeToFile("example.txt", []string{"Hello, World!", "Welcome to Go programming.", "This is a buffered I/O example."})

    // 读取文件
    readFromFile("example.txt")
}

// writeToFile 使用 bufio 写入文本到文件
func writeToFile(filename string, lines []string) {
    // 创建或打开文件
    file, err := os.Create(filename)
    if err != nil {
        fmt.Println("Error creating file:", err)
        return
    }
    defer file.Close() // 确保在函数结束时关闭文件

    // 创建一个带缓冲的写入器
    writer := bufio.NewWriter(file)

    // 写入每一行
    for _, line := range lines {
        _, err := writer.WriteString(line + "\n")
        if err != nil {
            fmt.Println("Error writing to file:", err)
            return
        }
    }

    // 确保所有缓冲的数据都写入文件
    if err := writer.Flush(); err != nil {
        fmt.Println("Error flushing to file:", err)
        return
    }

    fmt.Println("Data written to", filename)
}

// readFromFile 使用 bufio 逐行读取文件
func readFromFile(filename string) {
    // 打开文件
    file, err := os.Open(filename)
    if err != nil {
        fmt.Println("Error opening file:", err)
        return
    }
    defer file.Close() // 确保在函数结束时关闭文件

    // 创建一个带缓冲的读取器
    reader := bufio.NewReader(file)

    // 逐行读取文件
    for {
        line, err := reader.ReadString('\n')
        if err != nil {
            break // EOF 或其他错误
        }
        fmt.Print(line) // 打印读取的行
    }

    if err != nil && err.Error() != "EOF" {
        fmt.Println("Error reading file:", err)
        return
    }
}
PARAM
)