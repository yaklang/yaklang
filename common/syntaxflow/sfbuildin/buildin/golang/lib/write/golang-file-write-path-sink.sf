desc(
	title: "Audit Golang File Write Path Sink"
	type: audit
	level: info
	lib: 'golang-file-write-path-sink'
	desc: <<<DESC
审计Golang文件写入功能汇点规则的目的是检查代码中可能存在的路径遍历漏洞。该规则会监测使用Go语言标准库中与文件写入相关的函数，如`os.Create`, `ioutil.WriteFile`, `bufio.NewWriter`等，确保文件写入操作不会超出预期的安全路径，防止攻击者利用不合法路径进行文件操作，可能导致敏感文件泄露或恶意文件写入。规则详细描述包括但不限于监测的函数列表、触发场景以及潜在的安全风险。
DESC
	rule_id: "f2b7e07c-b395-4638-97d2-5010fe410ae3"
	title_zh: "审计Golang文件写入功能汇点"
	solution: <<<SOLUTION
为了避免路径遍历漏洞，建议对所有的文件写入操作进行严格的路径验证，确保写入的文件路径在预期的安全目录内。对于文件名，应进行适当的编码和转义处理，避免直接使用用户输入作为文件名。此外，使用最小权限原则，为执行文件写入的进程分配必要的权限。以下是一个修复示例：

```go
// 修复代码示例
safePath := "/var/www/html"
userInput := "..\..\etc\passwords"
basePath := path.Clean(path.Join(safePath, userInput))
if !strings.HasPrefix(basePath, safePath) {
	// 输入的路径尝试向上导航到safePath之外
	return errors.New("invalid path")
}
err := ioutil.WriteFile(basePath, []byte("content"), 0644)
if err != nil {
	// 处理错误
}
```

SOLUTION
	reference: <<<REFERENCE
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')](https://cwe.mitre.org/data/definitions/22.html)
REFERENCE
)

<include('golang-file-write-path-bufio')> as $output;
<include('golang-file-write-path-ioutil')> as $output;
<include('golang-file-write-path-os')> as $output;

alert $output for {
	level: "info",
	title: "Audit Golang File Write Sink",
	title_zh: "审计Golang文件写入功能汇点",
}
