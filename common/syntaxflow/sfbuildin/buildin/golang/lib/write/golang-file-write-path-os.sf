desc(
	title: "Audit Golang File Write Path Function (os)"
	type: audit
	level: info
	lib: 'golang-file-write-path-os'
	desc: <<<DESC
审计Golang文件写入路径函数（os），该规则用于检测Golang程序中未经验证的文件写入操作，这些操作可能导致路径穿越漏洞，使得攻击者能够写入任意文件，从而可能导致敏感信息泄露、程序稳定性受损或恶意代码执行。规则通过分析代码中调用os.WriteFile函数的情况，结合文件路径参数的来源，识别可能存在的安全风险。
DESC
	rule_id: "8fa1347d-c895-4652-8fc7-08b5f022eab2"
	title_zh: "审计Golang文件写入函数(os)"
	solution: <<<SOLUTION
为了避免未经验证的文件写入操作，建议对传入的文件路径进行严格的验证，确保其位于安全的目录内，且用户没有权限写入非法路径。修复代码示例如下：

```go
func safeJoin(basePath, filePath string) (string, error) {
    // 实现安全路径拼接，确保filePath不是相对路径，防止路径穿越
    if filepath.IsAbs(filePath) {
        return "", errors.New("file path must be relative")
    }
    return filepath.Join(basePath, filePath), nil
}
```
在写入文件之前，使用safeJoin函数验证并拼接路径，确保文件写入操作的安全性。
SOLUTION
	reference: <<<REFERENCE
[CWE-22](https://cwe.mitre.org/data/definitions/22.html)
REFERENCE
)

os?{<fullTypeName>?{have: 'os'}} as $os
$os.WriteFile(* #-> as $output,)

alert $output for {
	title_zh: "未验证的文件写入操作",
	level: "info",
	title: "Unvalidated File Write Path Operation",
}

desc(
	lang: golang
	alert_min: 1
	'file://filewrite.go': <<<PARAM
package main

import (
    "fmt"
    "net/http"
    "os"
    "path/filepath"
    "strings"
)

func writeFile(w http.ResponseWriter, r *http.Request) {
    filePath := r.URL.Query().Get("file")
    content := r.URL.Query().Get("content")

    // 解析并验证文件路径
    safePath, err := safeJoin("/var/www/uploads", filePath)
    if err != nil {
        fmt.Fprintf(w, "Invalid file path")
        return
    }

    // 写入文件内容
    err = os.WriteFile(safePath, []byte(content), 0644)
    if err != nil {
        fmt.Fprintf(w, "Error: %v", err)
        return
    }

    fmt.Fprintf(w, "File written successfully")
}

func main() {
    http.HandleFunc("/write", writeFile)
    http.ListenAndServe(":8080", nil)
}

PARAM
)
