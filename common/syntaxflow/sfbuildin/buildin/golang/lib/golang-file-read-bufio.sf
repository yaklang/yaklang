desc(
	title: "Audit Golang File Read bufio"
	type: audit
	level: info
	lib: 'golang-file-read-bufio'
	desc: <<<DESC
### 1. 规则目的
该规则旨在审计Go语言代码中对`bufio`包进行文件读取操作的使用情况。`bufio`包提供了带缓冲的I/O操作，可以提高文件读写的效率。审计该规则的目的在于识别代码中如何使用`bufio.NewReader`和其相关的读取方法（如`ReadString`），以确保文件内容的读取方式符合预期，并为后续可能存在的安全检查（例如，检查读取的内容是否被直接用于敏感操作，如命令执行、文件路径拼接等）提供基础信息。此规则本身不检测漏洞，而是作为基础库规则，用于辅助构建更复杂的安全规则。

### 2. 规则详细
1. **作为基础检测库**
   属于`golang-file-read-bufio`库规则 (`lib` 类型)，本身不直接报告漏洞，需配合其他规则（如污点跟踪规则）共同使用。它识别使用 `bufio.NewReader` 创建读取器，并跟踪 `ReadString` 方法读取的文件内容输出点。

2. **识别关键函数**
   规则主要识别并跟踪 `bufio.NewReader` 的创建以及通过其创建的读取器调用 `ReadString` 方法读取的内容。

3. **应用场景**
   该规则常用于审计程序对配置文件的读取、日志文件的处理、用户上传文件的读取等场景，帮助理解数据来源和流向，为检测文件内容导致的注入、跨站脚本等漏洞奠定基础。
DESC
	rule_id: "356ed721-2c96-4bfb-a8e2-6709292ae036"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
	title_zh: "审计Golang文件读取bufio包使用"
)

bufio?{<fullTypeName>?{have: 'bufio'}} as $entry;
$entry.NewReader <getCall> as $reader;
$reader.ReadString().* as $output;

$reader.ReadString(* #-> as $output);

alert $output

desc(
	lang: golang
	alert_min: 1
	'file://fileread.go': <<<PARAM
package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    // 写入文件
    writeToFile("example.txt", []string{"Hello, World!", "Welcome to Go programming.", "This is a buffered I/O example."})

    // 读取文件
    readFromFile("example.txt")
}

// writeToFile 使用 bufio 写入文本到文件
func writeToFile(filename string, lines []string) {
    // 创建或打开文件
    file, err := os.Create(filename)
    if err != nil {
        fmt.Println("Error creating file:", err)
        return
    }
    defer file.Close() // 确保在函数结束时关闭文件

    // 创建一个带缓冲的写入器
    writer := bufio.NewWriter(file)

    // 写入每一行
    for _, line := range lines {
        _, err := writer.WriteString(line + "\n")
        if err != nil {
            fmt.Println("Error writing to file:", err)
            return
        }
    }

    // 确保所有缓冲的数据都写入文件
    if err := writer.Flush(); err != nil {
        fmt.Println("Error flushing to file:", err)
        return
    }

    fmt.Println("Data written to", filename)
}

// readFromFile 使用 bufio 逐行读取文件
func readFromFile(filename string) {
    // 打开文件
    file, err := os.Open(filename)
    if err != nil {
        fmt.Println("Error opening file:", err)
        return
    }
    defer file.Close() // 确保在函数结束时关闭文件

    // 创建一个带缓冲的读取器
    reader := bufio.NewReader(file)

    // 逐行读取文件
    for {
        line, err := reader.ReadString('\n')
        if err != nil {
            break // EOF 或其他错误
        }
        fmt.Print(line) // 打印读取的行
    }

    if err != nil && err.Error() != "EOF" {
        fmt.Println("Error reading file:", err)
        return
    }
}
PARAM
)
