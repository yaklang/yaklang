desc(
	title: "Audit Golang File Path Handling"
	type: audit
	level: info
	lib: 'golang-file-path'
	desc: <<<DESC
### 规则目的

该规则旨在审计Go语言代码中对`path/filepath`库的使用情况。尽管`path/filepath`库本身主要用于处理文件路径（如加入、清理、匹配路径等），而非直接进行文件读写，但在涉及到文件操作的场景中，对文件路径的处理是否安全是至关重要的。

### 规则详细

1.  **基础库规则：** 本规则属于`lib`类型的规则（`golang-file-path`），主要用于识别代码中是否使用了`path/filepath`库。它不直接检测漏洞，而是作为其他更高级规则（例如检测路径遍历漏洞的规则）的基础，提供对核心文件路径处理库的识别能力。

2.  **潜在风险：** 虽然库本身无害，但如果应用程序直接将用户输入用于文件路径处理（例如，将用户提供的文件名直接用于创建或访问文件），而未进行适当的清洗、校验或限制，就可能引入路径遍历（Path Traversal）漏洞。攻击者可以构造包含特殊字符（如`../`）的恶意路径，从而访问或修改服务器文件系统中的任意文件，包括敏感配置文件或数据文件。

3.  **应用场景：** 本规则适用于审计所有可能进行文件操作的Go语言应用，特别是涉及到文件上传、下载、读取、写入，或处理用户提供的文件路径的场景。
DESC
	rule_id: "b96da337-9ec5-41a9-9c43-fcc6a7043c45"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
	title_zh: "审计Golang文件路径处理"
)

filepath?{<fullTypeName>?{have: 'path/filepath'}} as $output

alert $output for {
	title: "Audit Golang File Path Handling",
	title_zh: "审计Golang文件路径处理",
	solution: <<<CODE
none
CODE
	desc: <<<CODE
### 规则目的

该规则旨在审计Go语言代码中对`path/filepath`库的使用情况。尽管`path/filepath`库本身主要用于处理文件路径（如加入、清理、匹配路径等），而非直接进行文件读写，但在涉及到文件操作的场景中，对文件路径的处理是否安全是至关重要的。

### 规则详细

1.  **基础库规则：** 本规则属于`lib`类型的规则（`golang-file-path`），主要用于识别代码中是否使用了`path/filepath`库。它不直接检测漏洞，而是作为其他更高级规则（例如检测路径遍历漏洞的规则）的基础，提供对核心文件路径处理库的识别能力。

2.  **潜在风险：** 虽然库本身无害，但如果应用程序直接将用户输入用于文件路径处理（例如，将用户提供的文件名直接用于创建或访问文件），而未进行适当的清洗、校验或限制，就可能引入路径遍历（Path Traversal）漏洞。攻击者可以构造包含特殊字符（如`../`）的恶意路径，从而访问或修改服务器文件系统中的任意文件，包括敏感配置文件或数据文件。

3.  **应用场景：** 本规则适用于审计所有可能进行文件操作的Go语言应用，特别是涉及到文件上传、下载、读取、写入，或处理用户提供的文件路径的场景。
CODE
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://filepath.go': <<<PARAM
package main

import (
	"fmt"
	"path/filepath"
)

func main() {
	matched, err := filepath.Match("*.txt", "myfile.txt")
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	fmt.Println("Matched:", matched) // 输出: Matched: true
}
PARAM
)
