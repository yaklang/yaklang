desc(
    title: "check file write function",
    type: audit,
    level: info,
    lib: 'golang-file-write-ioutil',
    desc: <<<TEXT
此规则用于审计Go语言项目中文件写入功能的安全性。使用`io/ioutil`包中的`WriteFile`和`WriteAll`函数进行文件写操作可能会引发安全风险，特别是在处理不受信任的数据时。这些函数会直接将数据写入文件，如果不进行适当的验证和过滤，可能会导致敏感信息泄露、文件覆盖或恶意代码注入等安全问题。尽管`ioutil`包在Go 1.16版本后逐渐被`io`和`os`包取代，但在旧代码库中仍可能广泛使用。建议开发者审慎使用这些函数，并在必要时进行输入验证和权限控制。
TEXT
)

ioutil?{<fullTypeName>?{have: 'io/ioutil'}} as $entry
$entry.WriteAll(,* #-> as $output) 
$entry.WriteFile(,* #-> as $output) 

alert $output

desc(
    lang: golang,
    alert_min: 1,
    'file://filewrite.go': <<<PARAM
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
)

func main() {
	// 要写入的文件名
	fileName := "example.txt"

	// 写入数据到文件
	data := []byte("Hello, Go Programming!\nThis is a simple file I/O example.")
	err := ioutil.WriteFile(fileName, data, 0644) // 0644 是文件权限
	if err != nil {
		log.Fatalf("Error writing to file: %s", err)
		return
	}
	fmt.Println("Data written to file successfully.")

	// 读取文件内容
	content, err := ioutil.ReadFile(fileName)
	if err != nil {
		log.Fatalf("Error reading from file: %s", err)
		return
	}

	// 打印文件内容
	fmt.Println("File content:")
	fmt.Println(string(content))
}

PARAM
)