desc(
	title: "Audit Golang File Write using ioutil"
	type: audit
	level: info
	lib: 'golang-file-write-ioutil'
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   使用`io/ioutil`包中的`WriteFile`函数进行文件写入操作时，若文件名或写入内容可控且未经严格校验，可能导致路径遍历、任意文件写入或覆盖等安全风险。例如，攻击者可通过构造特殊输入（如`../../etc/passwd`）篡改系统关键文件。

2. **触发场景**
   ```go
   package main

   import (
       "io/ioutil"
       "log"
       "net/http"
   )

   func handler(w http.ResponseWriter, r *http.Request) {
       fileName := r.URL.Query().Get("filename")
       data := []byte(r.URL.Query().Get("content"))

       // 存在漏洞的代码示例
       err := ioutil.WriteFile(fileName, data, 0644)
       if err != nil {
           log.Printf("Error writing to file: %v", err)
       }
   }

   func main() {
       http.HandleFunc("/write", handler)
       log.Fatal(http.ListenAndServe(":8080", nil))
   }
   ```
   在上述代码中，攻击者可以通过URL参数`filename=../../etc/passwd&content=malicious_content`实现对系统关键文件的篡改。

3. **潜在影响**
   - 覆盖或篡改敏感文件（如配置文件、系统关键文件），导致数据丢失或服务中断。
   - 利用路径遍历漏洞访问或修改未经授权的文件。
   - 如果程序以高权限运行，可能引发进一步的提权攻击。

### 规则目的
该规则用于审计Go项目中是否使用了`io/ioutil`包的`WriteFile`方法进行文件写入操作，识别潜在的安全风险，并提醒开发者迁移到更现代和安全的API。

### 规则详细
- 该规则特别针对`ioutil.WriteFile`函数调用进行检测。
- 对于不存在的`ioutil.WriteAll`函数，规则不会对其进行匹配，实际范围仅限于`WriteFile`。
- 审计结果可以帮助开发者发现需要迁移或增强安全性的代码段。
DESC
	rule_id: "f163be89-aa0c-4f6c-a045-8ea9c8b93a0a"
	reference: <<<REFERENCE
[ioutil package - io/ioutil - Go Packages (go.dev)](https://pkg.go.dev/io/ioutil)
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')](https://cwe.mitre.org/data/definitions/22.html)
REFERENCE
	title_zh: "审计Golang文件写入(ioutil)"
	solution: <<<SOLUTION
### 修复建议

#### 1. 迁移至`os`包和`io`包的新API
`io/ioutil`包自Go 1.16版本起已被废弃，推荐使用`os.WriteFile`替代`ioutil.WriteFile`。
```go
// 原始代码 (使用 ioutil)
// err := ioutil.WriteFile(fileName, data, 0644)

// 修复代码 (使用 os)
import "os"
...
err := os.WriteFile(fileName, data, 0644)
if err != nil {
   log.Fatalf("Error writing to file: %s", err)
}
```

#### 2. 使用更灵活的`os.OpenFile`结合`io.Writer`
对于复杂场景（如追加写入），可以使用`os.OpenFile`打开文件并结合`bufio.NewWriter`进行缓冲写入。
```go
import (
	"bufio"
	"fmt"
	"log"
	"os"
)

func appendToFile(fileName string, data []byte) error {
	file, err := os.OpenFile(fileName, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return fmt.Errorf("failed to open file: %w", err)
	}
	defer file.Close()

	writer := bufio.NewWriter(file)
	_, err = writer.Write(data)
	if err != nil {
		return fmt.Errorf("failed to write data: %w", err)
	}

	err = writer.Flush()
	if err != nil {
		return fmt.Errorf("failed to flush writer: %w", err)
	}

	return nil
}
```

#### 3. 校验和过滤用户输入
无论使用哪种API，务必对文件名和写入内容进行严格校验：
- 文件名校验：避免包含特殊字符（如`..`、`/`、`\`），限制可写目录。
- 内容过滤：根据业务需求消毒写入内容，防止恶意脚本或敏感信息泄露。

#### 4. 实现权限最小化
确保执行文件写入操作的进程或用户具有最小必要权限，降低因权限过高导致的安全风险。
SOLUTION
)

ioutil?{<fullTypeName>?{have: 'io/ioutil'}} as $entry
$entry.WriteAll(*<slice(index=1)> #-> as $output)
$entry.WriteFile(*<slice(index=1)> #-> as $output)

alert $output	for {
	title_zh: "审计Golang文件写入(ioutil)",
	solution: <<<CODE
### 修复建议

根据 Go 语言的发展和安全实践，建议遵循以下方法重构使用 `ioutil` 进行文件写入的代码：

#### 1. 迁移至 `os` 包和 `io` 包的新 API

*   **使用 `os.WriteFile` 替代 `ioutil.WriteFile`**：`os.WriteFile` 是 Go 1.16 引入的函数，功能与 `ioutil.WriteFile` 相同，但位于 `os` 包下，是推荐的现代 API。这只是一个命名空间的变化，但遵循了 Go 标准库的最新规范。
    ```go
    // 原始代码 (使用 ioutil)
    // err := ioutil.WriteFile(fileName, data, 0644)

    // 修复代码 (使用 os)
    import "os"
    ...
    err := os.WriteFile(fileName, data, 0644)
    if err != nil {
       log.Fatalf("Error writing to file: %s", err)
    }
    ```

*   **使用更灵活的 `os.OpenFile` 结合 `io.Writer`**：对于更复杂的写入场景（如追加写入、带缓冲写入），可以使用 `os.OpenFile` 以指定模式打开或创建文件，然后利用返回的 `*os.File` 实现 `io.Writer` 接口，结合 `io` 包的其他函数（如 `io.WriteString`, `io.Copy`）或 `bufio.NewWriter` 进行写入。
    ```go
    // 示例：追加写入文件
    import (
    	"bufio"
    	"fmt"
    	"log"
    	"os"
    )

    func appendToFile(fileName string, data []byte) error {
    	// 打开文件，如果不存在则创建，以追加模式写入，权限为0644
    	file, err := os.OpenFile(fileName, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
    	if err != nil {
    		return fmt.Errorf("failed to open file: %w", err)
    	}
    	defer file.Close() // 确保关闭文件

    	// 使用缓冲写入器提高效率
    	writer := bufio.NewWriter(file)
    
    	_, err = writer.Write(data)
    	if err != nil {
    		return fmt.Errorf("failed to write data: %w", err)
    	}

        // 写入任何留在缓冲中的数据
        err = writer.Flush()
        if err != nil {
            return fmt.Errorf("failed to flush writer: %w", err)
        }

    	return nil
    }

    // 调用示例
    // dataToAppend := []byte("\nAdditional line.")
    // if err := appendToFile("example.txt", dataToAppend); err != nil {
    // 	log.Printf("Error appending to file: %v", err)
    // }
    ```

#### 2. 严格校验和过滤用户可控的输入

无论使用哪种 API 进行文件写入，如果文件名或写入内容包含用户可控的数据，务必进行严格的输入校验和过滤，防范路径遍历、任意文件写入或覆盖等漏洞：

*   **文件名校验**：检查文件名是否包含特殊字符（如 `..`, `/`, `\`），限制可写入的目录，或者使用预定义的、不允许用户完全控制的文件名生成逻辑。
*   **内容过滤**：根据业务需求对要写入的内容进行消毒，避免写入恶意脚本、SQL语句或敏感配置信息。

#### 3. 实现权限控制

确保执行文件写入操作的进程或用户具有最小必需的权限，避免因权限过高导致安全问题。
CODE
	desc: <<<CODE
### 1. 规则目的

该规则主要用于审计 Golang 项目中是否有使用 `io/ioutil` 包进行文件写入的操作。尽管 `ioutil` 包自 Go 1.16 版本起已经被标记为废弃，其功能已分别迁移至 `io` 和 `os` 包下，但在仍在使用旧版本 Go 或维护旧代码的项目中，`ioutil` 包的使用依然普遍。审计这些写入操作有助于发现潜在的文件操作安全风险，如未经校验的数据写入、路径遍历等，从而提醒开发者关注并迁移至更安全的现代 Go API。

### 2. 规则详细

该规则特别针对 `io/ioutil` 包中的两个关键文件写入函数进行识别：

*   `ioutil.WriteFile(filename string, data []byte, perm os.FileMode)`：该函数读取 `data` 字节数组并将其完整地写入由 `filename` 指定的文件中，如果文件不存在，则创建文件；如果文件已存在，则先清空文件内容再写入。`perm` 参数指定了新创建文件的权限。
*   `ioutil.WriteAll(w io.Writer, buf []byte)`：**注意：在标准库 `io/ioutil` 包中并没有 `WriteAll` 这个函数。** 标准库中与写入相关且常被使用的函数包括 `io.WriteString`、`io.Copy` 等。如果规则中提及了 `ioutil.WriteAll`，这可能意味着自定义的库或对标准库的误解。**考虑到标准 `io/ioutil` 包，规则应重点关注 `WriteFile` 和可能的 `io.Writev`（虽然 `ioutil` 中也无此函数，但 `io` 包中有）。** 审计的原始规则可能存在对标准函数名的误写或引用了非标准库函数。

规则通过查找对 `ioutil.WriteFile` 函数的调用来标记潜在的代码位置。**鉴于标准库中不存在 `ioutil.WriteAll`，规则的实际检测范围应限于 `ioutil.WriteFile`。** 识别这些调用可以帮助开发者定位需要审查和迁移的文件写入操作，以增强代码的安全性。
CODE
	level: "info",
	title: "Audit Golang File Write using ioutil",
}

desc(
	lang: golang
	alert_min: 1
	'file://filewrite.go': <<<PARAM
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
)

func main() {
	// 要写入的文件名
	fileName := "example.txt"

	// 写入数据到文件
	data := []byte("Hello, Go Programming!\nThis is a simple file I/O example.")
	err := ioutil.WriteFile(fileName, data, 0644) // 0644 是文件权限
	if err != nil {
		log.Fatalf("Error writing to file: %s", err)
		return
	}
	fmt.Println("Data written to file successfully.")

	// 读取文件内容
	content, err := ioutil.ReadFile(fileName)
	if err != nil {
		log.Fatalf("Error reading from file: %s", err)
		return
	}

	// 打印文件内容
	fmt.Println("File content:")
	fmt.Println(string(content))
}

PARAM
)
