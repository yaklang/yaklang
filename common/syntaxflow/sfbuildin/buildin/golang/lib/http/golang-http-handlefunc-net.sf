desc(
	title: "Audit Golang net/http Handlers"
	type: audit
	level: info
	lib: "golang-http-net"
	desc: <<<DESC
### 规则目的

该规则用于审计Golang应用程序中基于`net/http`标准库构建的HTTP服务，识别和标注处理传入HTTP请求的函数（Handlers）。通过分析`http.HandleFunc`或类似方式注册的回调函数，该规则能够帮助开发者快速定位HTTP请求处理的核心逻辑。

### 规则详细

1. **基础审计库**
   属于`golang-http-net`基础库规则，旨在提供HTTP请求处理入口点的识别能力。它通过识别使用`net/http`包定义或注册的HTTP处理函数，为后续更深入的代码分析（如参数输入验证、数据流跟踪等）提供基础。

2. **识别关键函数**
   规则主要关注`net/http`包中的函数，尤其是用于注册/处理请求的入口点函数（例如通过捕捉 `http.HandleFunc` 注册的回调函数）。

3. **风险提示**
   识别出HTTP处理函数本身不构成漏洞，但这些函数是处理用户输入和执行业务逻辑的关键位置。不当处理请求数据（如未经验证的参数、未过滤的请求体）可能导致多种安全漏洞，例如命令注入、SQL注入、XSS、敏感信息泄露、HTTP头注入等。

4. **使用方式**
   该规则通常作为静态代码审计流程的第一步，用于发现所有潜在的HTTP请求处理点。为了进行有效的安全审计，建议将此规则与其他规则结合使用：
   - 输入验证规则：检查是否对用户输入进行了充分的验证和过滤。
   - 数据流跟踪规则：跟踪用户输入数据在代码中的传播路径，识别潜在的高危操作。
   - 特定的漏洞检测规则：例如命令注入检测、SQL注入检测等，针对性地分析处理函数中的逻辑。

```go
// 示例代码
package main

import (
    "fmt"
    "net/http"
)

func main() {
    http.HandleFunc("/hello", helloHandler) // 注册处理函数
    fmt.Println("Server is running on http://localhost:8080")
    http.ListenAndServe(":8080", nil)
}

func helloHandler(w http.ResponseWriter, r *http.Request) {
    name := r.URL.Query().Get("name") // 获取查询参数
    w.Write([]byte("Hello, " + name))  // 直接返回响应
}
```

DESC
	rule_id: "5b66527b-f4e9-4784-ae3b-167983d77675"
	title_zh: "审计 Golang net/http 请求处理函数"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
[Golang net/http documentation](https://pkg.go.dev/net/http)
REFERENCE
)

http?{<fullTypeName>?{have: 'net/http'}} as $entry;
$entry.HandleFunc(*<slice(index=1)> as $handle);
$handle<getFormalParams> as $output

alert $output	for {
	title: "Audit Golang net/http Handlers",
	title_zh: "审计 Golang net/http 请求处理函数",
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://http_net.go': <<<PARAM
package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
)

func main() {
    http.HandleFunc("/get", handleGet)
    http.HandleFunc("/post", handlePost)

    fmt.Println("Server is running on http://localhost:8080")
    http.ListenAndServe(":8080", nil)
}

// 处理 GET 请求
func handleGet(w http.ResponseWriter, r *http.Request) {
    // 读取查询参数
    name := r.URL.Query().Get("name") // 例如 /get?name=John
    response := fmt.Sprintf("Hello, %s!", name)
    
    // 返回响应
    w.Write([]byte(response))
}

// 处理 POST 请求
func handlePost(w http.ResponseWriter, r *http.Request) {
    // 确保请求方法是 POST
    if r.Method != http.MethodPost {
        http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
        return
    }

    // 读取请求体
    body, err := ioutil.ReadAll(r.Body)
    if err != nil {
        http.Error(w, "Failed to read request body", http.StatusInternalServerError)
        return
    }
    defer r.Body.Close() // 确保在函数结束时关闭请求体

    // 返回请求体内容
    response := fmt.Sprintf("Received: %s", body)
    w.Write([]byte(response))
}

PARAM
)
