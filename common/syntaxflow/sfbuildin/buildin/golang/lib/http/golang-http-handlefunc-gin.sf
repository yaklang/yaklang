desc(
	title: "Audit Golang Gin HTTP Handler"
	type: audit
	level: info
	lib: "golang-http-gin"
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   使用Gin框架构建的Go语言Web应用程序可能存在多种安全风险，例如不当的输入验证、未授权的资源访问或敏感信息泄露。这些风险可能源于开发人员对用户输入的信任处理不足，或者在请求处理逻辑中缺乏严格的权限控制。

2. **触发场景**
   ```go
package main

import (
    "github.com/gin-gonic/gin"
)

func main() {
    router := gin.Default()

    // 存在潜在风险的代码示例
    router.GET("/user/:id", func(c *gin.Context) {
        id := c.Param("id")
        c.JSON(200, gin.H{"userID": id})  // 直接输出用户输入内容
    })

    router.Run(":8080")
}
```
   在上述代码中，攻击者可以通过传入恶意参数（如`../../etc/passwd`）实现路径遍历，获取系统文件内容；或者通过构造特殊字符导致程序崩溃。

3. **潜在影响**
   - 敏感数据（如用户凭证、隐私信息）被窃取。
   - 数据库查询语句被篡改，导致数据泄露或破坏。
   - 系统命令被执行，造成服务器被完全控制。

### 规则详细
该规则属于`golang-http-gin`库规则（`lib`类型），主要目的是识别使用Gin框架注册的HTTP请求处理函数（HandlerFunc）。规则通过以下步骤实现其目的：
1. 定位到Gin框架的入口点 `gin?{<fullTypeName>?{have: 'github.com/gin-gonic/gin'}}`。
2. 找到通过 `Default()` 方法创建的默认引擎实例。
3. 追踪默认引擎实例上注册的所有HTTP方法（如GET, POST, PUT, DELETE等）及其对应的处理函数。
4. 提取这些处理函数的参数信息，通常这些参数包含了`*gin.Context`类型，这个类型提供了访问请求和响应的能力，是后续进行数据流分析的关键起点。

定期审计请求处理逻辑是确保Web应用程序安全性的重要步骤，通过识别所有的处理函数，为进一步的漏洞检测和安全审计奠定基础。

**关联其他规则:** 识别出的`*gin.Context`对象可以作为起点，通过数据流分析追踪用户输入（如Form, Query, JSON等）如何被使用，以及敏感数据（如数据库查询、文件操作、Command Execution等）如何被输出，从而发现诸如SQL注入、XSS、命令注入等漏洞。
DESC
	rule_id: "0f451c28-265e-4e72-af5b-c50c7006848f"
	title_zh: "审计Golang Gin HTTP Handler"
	solution: <<<SOLUTION
### 修复建议

#### 1. 验证并清理用户输入
通过检查和过滤所有用户输入，确保其符合预期格式和范围，避免非法输入。
```go
// 示例：校验输入是否为数字
if !regexp.MustCompile(`^[0-9]+$`).MatchString(id) {
    c.JSON(400, gin.H{"error": "Invalid input"})
    return
}
```

#### 2. 实现细粒度的权限控制
针对每个HTTP端点，明确设置访问权限，防止未经授权的操作。
```go
// 示例：基于用户角色的权限控制
if !isAuthorized(c, "admin") {
    c.JSON(403, gin.H{"error": "Forbidden"})
    return
}
```

#### 3. 避免直接输出用户输入
在将用户输入返回给客户端之前，对其进行适当的转义或编码。
```go
// 示例：HTML转义
import "html"

escapedID := html.EscapeString(id)
c.JSON(200, gin.H{"userID": escapedID})
```

#### 4. 使用中间件增强安全性
利用Gin内置的安全中间件（如CORS、CSRF防护）来提高整体安全性。
```go
// 示例：启用CORS中间件
router.Use(cors.Default())
```

通过以上措施，可以有效降低因不当处理用户输入而导致的安全风险。
SOLUTION
	reference: <<<REFERENCE
[CWE-20](https://cwe.mitre.org/data/definitions/20.html)
[Gin框架官方文档](https://gin-gonic.com/docs/)
REFERENCE
)

gin?{<fullTypeName>?{have: 'github.com/gin-gonic/gin'}} as $entry;
$entry.Default() as $default;
$default.*(*<slice(index=2)> as $handle);
$handle<getFormalParams> as $output

alert $output	for {
	level: "info",
	title: "Audit Golang Gin HTTP Handler",
	title_zh: "审计Golang gin HTTP Handler",
}

desc(
	lang: golang
	alert_min: 1
	'file://http_gin.go': <<<PARAM
package main

import (
    "github.com/gin-gonic/gin"
    "net/http"
)

type User struct {
    ID   string
    Name string
    Age  int 
}

var users = []User{
    {ID: "1", Name: "Alice", Age: 25},
    {ID: "2", Name: "Bob", Age: 30},
}

func main() {
    router := gin.Default()

    // 获取所有用户
    router.GET("/users", func(c *gin.Context) {
        c.JSON(http.StatusOK, users)
    })

    // 创建用户
    router.POST("/users", func(c *gin.Context) {
        var newUser User
        if err := c.ShouldBindJSON(&newUser); err != nil {
            c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
            return
        }
        users = append(users, newUser)
        c.JSON(http.StatusCreated, newUser)
    })

    // 获取特定用户
    router.GET("/users/:id", func(c *gin.Context) {
        id := c.Param("id")
        for _, user := range users {
            if user.ID == id {
                c.JSON(http.StatusOK, user)
                return
            }
        }
        c.JSON(http.StatusNotFound, gin.H{"message": "user not found"})
    })

    // 更新用户
    router.PUT("/users/:id", func(c *gin.Context) {
        id := c.Param("id")
        var updatedUser User
        if err := c.ShouldBindJSON(&updatedUser); err != nil {
            c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
            return
        }
        for i, user := range users {
            if user.ID == id {
                users[i] = updatedUser
                c.JSON(http.StatusOK, updatedUser)
                return
            }
        }
        c.JSON(http.StatusNotFound, gin.H{"message": "user not found"})
    })

    // 删除用户
    router.DELETE("/users/:id", func(c *gin.Context) {
        id := c.Param("id")
        for i, user := range users {
            if user.ID == id {
                users = append(users[:i], users[i+1:]...)
                c.JSON(http.StatusOK, gin.H{"message": "user deleted"})
                return
            }
        }
        c.JSON(http.StatusNotFound, gin.H{"message": "user not found"})
    })

    // 启动服务器
    router.Run(":8080")
}
PARAM
)
