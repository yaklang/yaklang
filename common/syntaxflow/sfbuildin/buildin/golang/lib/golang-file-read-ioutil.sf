desc(
	title: "Audit Golang File Read ioutil Methods"
	type: audit
	level: info
	lib: 'golang-file-read-ioutil'
	desc: <<<DESC
### 规则目的
该规则主要用于审计Golang代码中使用 `io/ioutil` 包进行文件读取的操作。

### 规则详细
1. **作为基础检测库**
   属于 `golang-file-read-ioutil` 基础库规则（`lib` 类型），用于识别 `io/ioutil` 包中的文件读取相关函数。通常需要结合更高级别的规则（如数据流跟踪规则）来检测潜在安全风险或性能问题。

2. **识别相关函数**
   规则识别 `io/ioutil` 包中的 `ReadAll` 和 `ReadFile` 方法的调用。

3. **潜在问题**
   尽管 `io/ioutil` 包提供了便捷的文件读取功能，但 `ReadAll` 和 `ReadFile` 方法会将整个文件内容一次性加载到内存中。这在处理大型文件时可能导致内存占用过高，引发性能瓶颈甚至内存溢出。此外，`io/ioutil` 中的部分函数已被废弃，推荐使用 `os` 和 `io` 包中的替代方法。

4. **审计意义**
   该规则有助于识别代码中潜在的性能风险和使用已废弃功能的点，提示开发者考虑使用更流式化或推荐的文件读取方法。
DESC
	rule_id: "21f220e7-4e85-4113-ada9-a3c1cffae028"
	title_zh: "审计Golang ioutil文件读取方法"
	solution: <<<SOLUTION
### 解决方案

#### 推荐使用 os 包中的替代方法

对于 `ioutil.ReadFileFunc`，推荐使用 `os.ReadFile`，其功能和用法与 `ioutil.ReadFile` 相似，但属于较新的标准库。

```go
// 示例：使用 os.ReadFile 读取文件
content, err := os.ReadFile("filename.txt")
if err != nil {
    // 处理错误
}
// 使用 content
```

#### 对于大型文件，采用流式读取或分块读取

对于 `ioutil.ReadAll` 读取整个 `io.Reader` 的情况，如果涉及大型数据流，应避免一次性加载到内存。可以考虑使用 `io.Copy` 或手动使用 `io.Reader` 接口结合缓冲区进行分块读取。

```go
// 示例：使用 io.Copy 将文件内容复制到 os.Stdout
file, err := os.Open("largefile.txt")
if err != nil {
    // 处理错误
}
defer file.Close()

if _, err := io.Copy(os.Stdout, file); err != nil {
    // 处理错误
}
```

```go
// 示例：使用 bufio.Reader 进行分块读取
file, err := os.Open("largefile.txt")
if err != nil {
    // 处理错误
}
defer file.Close()

bufferSize := 4096 // 定义缓冲区大小
reader := bufio.NewReader(file)
buffer := make([]byte, bufferSize)

for {
    n, err := reader.Read(buffer)
    if err != nil && err != io.EOF {
        // 处理错误
        break
    }
    if n == 0 {
        break
    }
    // Process the buffer[:n]
    // 例如：fmt.Println(string(buffer[:n]))
}
```

通过采用流式或分块读取的方式，可以有效降低内存消耗，提高程序处理大型文件时的性能和稳定性。
SOLUTION
	reference: <<<REFERENCE
[Go io/ioutil Documentation (Deprecated)](https://pkg.go.dev/io/ioutil)
REFERENCE
)

ioutil?{<fullTypeName>?{have: 'io/ioutil'}} as $entry
$entry.ReadAll().* as $output
$entry.ReadFile().* as $output

$entry.ReadAll(* #-> as $output) 
$entry.ReadFile(* #-> as $output)

alert $output for {
	title: "Audit Golang File Read ioutil Methods",
	title_zh: "审计Golang ioutil文件读取方法",
	solution: <<<CODE

CODE
	desc: <<<CODE

CODE
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://fileread.go': <<<PARAM
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
)

func main() {
	// 要写入的文件名
	fileName := "example.txt"

	// 写入数据到文件
	data := []byte("Hello, Go Programming!\nThis is a simple file I/O example.")
	err := ioutil.WriteFile(fileName, data, 0644) // 0644 是文件权限
	if err != nil {
		log.Fatalf("Error writing to file: %s", err)
		return
	}
	fmt.Println("Data written to file successfully.")

	// 读取文件内容
	content, err := ioutil.ReadFile(fileName)
	if err != nil {
		log.Fatalf("Error reading from file: %s", err)
		return
	}

	// 打印文件内容
	fmt.Println("File content:")
	fmt.Println(string(content))
}

PARAM
)
