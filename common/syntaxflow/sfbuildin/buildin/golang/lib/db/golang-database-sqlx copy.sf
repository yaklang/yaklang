desc(
	title: "Audit Golang sqlx Library Usage"
	type: audit
	level: info
	lib: 'golang-database-sqlx'
	desc: <<<DESC
### 1.规则目的
此审计规则旨在检查Go语言代码中 `github.com/jmoiron/sqlx` 库的使用情况。`sqlx` 是一个在标准库 `database/sql` 之上提供了更丰富功能的数据库操作库，如结构体与行数据的映射、命名参数支持等。本规则主要作为代码审计的辅助工具，帮助开发者或审计人员快速识别 `sqlx` 库的连接、查询、更新和删除等关键函数调用点，以便进一步分析其使用是否安全、合理，是否存在潜在的SQL注入、连接管理不当、资源泄露等问题。

### 2.规则详细
1. **作为基础审计规则**
   本规则属于Go语言代码审计的一部分，侧重于识别特定库的使用。它本身不直接判断是否存在漏洞，而是标记出与 `sqlx` 库相关的数据库操作，作为后续人工审计或配合其他规则（如污点分析规则）检测漏洞的基础和起点。

2. **识别关键函数**
   规则通过匹配 `github.com/jmoiron/sqlx` 库的导入和使用，定位到通过 `sqlx.Open` 或 `sqlx.Connect` 获取的数据库连接对象，并进一步识别该对象上的成员函数调用。这些成员函数通常包括但不限于：
   - **连接相关**: `Open`, `Connect`
   - **查询相关**: `Get`, `Select`, `Query`, `QueryRow`
   - **执行相关**: `Exec`, `NamedExec`
   - **事务相关**: `Begin`, `Beginx`
   - **辅助函数**: `Prepare`, `Preparex`, `MustExec`, `MustBegin`

3. **审计示例**
   规则运行时，会输出识别到的 `sqlx` 库相关函数调用。例如，对于示例代码 `db, err := sqlx.Open("sqlite", "example.db")`，规则会标记出 `sqlx.Open` 的调用，提示这是一个数据库连接的建立点。后续审计可以关注该连接是否被正确关闭（使用 `defer db.Close()`）、连接参数是否安全等。

   ```go
   // 示例代码片段 (_example/database.go)
   package main

   import (
       "fmt"
       "log"
       "github.com/jmoiron/sqlx"
       _ "modernc.org/sqlite"
   )

   func main() {
       // 连接到 SQLite 数据库
       db, err := sqlx.Open("sqlite", "example.db")
       if err != nil {
           log.Fatal(err)
       }
       defer db.Close()

       // ... 后续数据库操作 ...
   }
   ```
   规则的输出可能指向 `sqlx.Open` 函数的调用位置，提示需要关注该行的上下文，检查数据库连接的配置和管理。
DESC
	rule_id: "f3ae9721-59b8-40cb-bc31-a07934f40519"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
	title_zh: "审计Golang sqlx库使用情况"
)

sqlx?{<fullTypeName>?{have: 'github.com/jmoiron/sqlx'}} as $entry;
$entry.Connect <getCall> as $db;
$entry.Open <getCall> as $db;
$db <getMembers> as $output;

alert $output for {
	title: "Audit Golang sqlx Library Usage",
	title_zh: "审计Golang sqlx库使用情况",
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://database.go': <<<PARAM
package main

import (
    "fmt"
    "log"

    "github.com/jmoiron/sqlx"
    _ "modernc.org/sqlite"
)

type User struct {
	ID   uint
	Name string
	Age  int
}

func main() {
    // 连接到 SQLite 数据库
    db, err := sqlx.Open("sqlite", "example.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // 创建用户表
    schema := `CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        age INTEGER
    );`
    db.MustExec(schema)

    // 插入用户数据
    user := User{Name: "Alice", Age: 30}
    _, err = db.NamedExec(`INSERT INTO users (name, age) VALUES (:name, :age)`, &user)
    if err != nil {
        log.Fatal(err)
    }

    // 查询用户数据
    var users []User
    err = db.Select(&users, "SELECT * FROM users")
    if err != nil {
        log.Fatal(err)
    }

    // 打印用户信息
    fmt.Println("Users:")
    for _, u := range users {
        fmt.Printf("ID: %d, Name: %s, Age: %d\n", u.ID, u.Name, u.Age)
    }

    // 更新用户信息
    user.Age = 31
    _, err = db.NamedExec(`UPDATE users SET age = :age WHERE name = :name`, user)
    if err != nil {
        log.Fatal(err)
    }

    // 删除用户
    _, err = db.Exec(`DELETE FROM users WHERE name = ?`, user.Name)
    if err != nil {
        log.Fatal(err)
    }
}

PARAM
)
