desc(
    title: "check file database function",
    type: audit,
    level: info,
    lib: 'golang-database-sql',
    desc: <<<TEXT
此审计规则旨在检查Go语言项目中是否正确使用了`database/sql`包来操作数据库。`database/sql`包提供了对SQL数据库的通用接口，包括打开和关闭数据库连接、执行SQL语句以及查询数据。不正确的数据库操作可能会导致SQL注入攻击、数据泄露或损坏等安全风险。通过此审计，可以确保数据库操作代码符合安全最佳实践，减少潜在的安全漏洞。
TEXT
)

sql?{<fullTypeName>?{have: 'database/sql'}} as $entry;
$entry.Open <getCall> as $db;
$db <getMembers> as $output;

alert $output

desc(
    lang: golang,
    alert_min: 1,
    'file://database.go': <<<PARAM
package main

import (
    "database/sql"
    "fmt"
    "log"

    _ "github.com/mattn/go-sqlite3" // SQLite 驱动
)

func main() {
    // 连接到 SQLite 数据库（如果文件不存在，将创建文件）
    db, err := sql.Open("sqlite3", "example.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // 创建表
    createTableSQL := `CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        age INTEGER
    );`
    if _, err := db.Exec(createTableSQL); err != nil {
        log.Fatal(err)
    }

    // 插入数据
    insertSQL := `INSERT INTO users (name, age) VALUES (?, ?)`
    if _, err := db.Exec(insertSQL, "Alice", 30); err != nil {
        log.Fatal(err)
    }
    if _, err := db.Exec(insertSQL, "Bob", 25); err != nil {
        log.Fatal(err)
    }

    // 查询数据
    rows, err := db.Query("SELECT id, name, age FROM users")
    if err != nil {
        log.Fatal(err)
    }
    defer rows.Close()

    // 处理查询结果
    fmt.Println("Users:")
    for rows.Next() {
        var id int
        var name string
        var age int
        if err := rows.Scan(&id, &name, &age); err != nil {
            log.Fatal(err)
        }
        fmt.Printf("ID: %d, Name: %s, Age: %d\n", id, name, age)
    }

    // 检查查询过程中是否出现错误
    if err := rows.Err(); err != nil {
        log.Fatal(err)
    }
}

PARAM
)