desc(
	title: "Audit Golang GORM Usage"
	type: audit
	level: info
	lib: 'golang-database-gorm'
	desc: <<<DESC
### 1. 规则目的
该规则旨在审计使用GORM（Go Object-Relational Mapping）库进行数据库操作的Golang代码。GORM是一个功能丰富的Go语言ORM库，它简化了数据库连接管理、数据模型定义、数据库迁移以及CRUD（创建、读取、更新、删除）等核心数据库操作。通过此规则，可以识别出代码中与GORM相关的关键函数调用和对象，例如数据库连接的建立、模型的定义、各种查询和修改操作的调用等。这有助于安全审计人员或开发人员快速定位数据库交互逻辑，进一步检查是否存在潜在的安全风险（如SQL注入、不当连接配置等）或 代码实现问题。

### 2. 规则详细
1. **作为基础检测库**
   属于`golang-database-gorm`库规则（`lib`类型），主要用于识别和标记代码中对GORM库的引用和使用，捕获通过`gorm.Opent`函数建立的数据库连接对象及其后续成员操作。这为后续针对GORM特定漏洞或风险的规则（如不安全查询、连接泄漏等）提供了基础数据支持，需要与其他跟踪用户输入流向或特定函数调用的规则结合使用。
2. **核心识别能力**
   规则核心在于识别`gorm.io/gorm`包的导入，并进一步识别通过`gorm.Open`方法创建的数据库连接实例。通过`getMembers`等语法操作，规则能够追踪该连接实例上调用的各种方法，从而覆盖GORM库的大部分数据库操作。
3. **应用场景**
   此规则适用于对任何使用GORM库进行数据库操作的Go项目进行代码审计，无论项目规模大小或数据库类型（支持GORM支持的所有数据库）。它可以帮助识别所有数据库入口点和关键操作，为后续的安全分析奠定基础。

DESC
	rule_id: "5a878cb7-49c0-45e7-9689-ed17055f8544"
	title_zh: "审计Golang GORM库使用"
	solution: <<<SOLUTION
none
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
)

gorm?{<fullTypeName>?{have: 'gorm.io/gorm'}} as $entry;
$entry.Open <getCall> as $db;
$db <getMembers> as $output;

alert $output

desc(
	lang: golang
	alert_min: 1
	'file://database.go': <<<PARAM
package main

import (
    "gorm.io/driver/sqlite"
    "gorm.io/gorm"
    "log"
)

// User 定义用户模型
type User struct {
    ID   uint    // 主键
    Name string  // 用户名
    Age  int     // 年龄
}

func main() {
    // 连接到 SQLite 数据库
    db, err := gorm.Open(sqlite.Open("example.db"), &gorm.Config{})
    if err != nil {
        log.Fatal("failed to connect database:", err)
    }

    // 自动迁移，创建表
    err = db.AutoMigrate(&User{})
    if err != nil {
        log.Fatal("failed to migrate:", err)
    }

    // 插入用户数据
    user1 := User{Name: "Alice", Age: 30}
    user2 := User{Name: "Bob", Age: 25}

    db.Create(&user1)
    db.Create(&user2)

    // 查询所有用户
    var users []User
    db.Find(&users)

    // 打印用户信息
    log.Println("Users:")
    for _, user := range users {
        log.Printf("ID: %d, Name: %s, Age: %d\n", user.ID, user.Name, user.Age)
    }

    // 更新用户信息
    db.Model(&user1).Update("Age", 31)

    // 删除用户
    db.Delete(&user2)
}


PARAM
)
