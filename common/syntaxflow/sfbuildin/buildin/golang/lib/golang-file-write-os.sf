desc(
	title: "Audit Golang File Write Function (os)"
	type: audit
	level: info
	lib: 'golang-file-write-os'
	desc: <<<DESC
### 规则描述

1. **规则目的**
   该规则专注于审计Go语言代码中使用`os`包进行文件写入的代码，主要用于识别潜在的文件操作风险，并非直接检测特定漏洞，而是作为审计文件写入操作的基础规则。

2. **规则详细**
   - **作为基础审计库**：属于`golang-file-write-os`审计库规则（`lib`类型），主要用于识别代码中所有调用了`os`包提供的文件写入功能的实例。它可以帮助安全审计人员快速定位所有文件写入操作点，以便进一步分析是否存在路径遍历、任意文件写入或其他文件操作相关的安全问题。
   - **覆盖函数**：该规则主要识别对`os.WriteFile`函数的调用。

3. **触发场景**
```go
package main

import (
    "fmt"
    "net/http"
    "os"
)

func writeFile(w http.ResponseWriter, r *http.Request) {
    filePath := r.URL.Query().Get("file")
    content := r.URL.Query().Get("content")

    // 写入文件内容
    err := os.WriteFile(filePath, []byte(content), 0644)
    if err != nil {
        fmt.Fprintf(w, "Error: %v", err)
        return
    }

    fmt.Fprintf(w, "File written successfully")
}

func main() {
    http.HandleFunc("/write", writeFile)
    http.ListenAndServe(":8080", nil)
}
```
在上述示例中，攻击者可以通过构造恶意输入（如`../../etc/passwd`）实现路径遍历攻击。

4. **潜在影响**
   - 攻击者可能通过路径遍历攻击覆盖关键系统文件，导致服务中断或权限提升。
   - 如果未正确限制文件权限，可能导致敏感信息泄露或被篡改。
DESC
	rule_id: "785265e2-bc75-48f6-9e9b-1d329dc75f87"
	title_zh: "审计Golang文件写入函数(os)"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用安全的路径拼接
通过使用`path/filepath`包中的`Join`函数来安全地拼接文件路径，避免路径遍历攻击。
```go
import "path/filepath"

filePath := filepath.Join("/var/www/uploads", userProvidedPath)
```

#### 2. 验证文件路径
在写入文件之前，验证用户提供的文件路径是否在预期的目录范围内。
```go
if !strings.HasPrefix(filePath, "/var/www/uploads/") {
    return fmt.Errorf("invalid file path")
}
```

#### 3. 限制文件写入权限
设置合适的文件权限，避免权限过宽导致的潜在风险。
```go
err = os.WriteFile(safePath, []byte(content), 0644)
if err != nil {
    return fmt.Errorf("error writing file: %v", err)
}
```

#### 4. 日志记录与监控
为所有文件写入操作添加日志记录，便于事后追踪和审计。
```go
log.Printf("File written: %s", safePath)
```
SOLUTION
	reference: <<<REFERENCE
[CWE-22](https://cwe.mitre.org/data/definitions/22.html)
REFERENCE
)

os?{<fullTypeName>?{have: 'os'}} as $os
$os.WriteFile(* #-> as $param)
$param?{!have: 'Parameter'} as $output;

alert $output	for {
	title: "Unvalidated File Write Operation",
	title_zh: "未验证的文件写入操作",
	solution: <<<CODE
### 修复建议
#### 1. 使用安全的路径拼接
通过使用`path/filepath`包中的`Join`函数来安全地拼接文件路径，避免路径遍历攻击。
```go
import "path/filepath"

filePath := filepath.Join("/var/www/uploads", userProvidedPath)
```

#### 2. 验证文件路径
在写入文件之前，验证用户提供的文件路径是否在预期的目录范围内。
```go
if !strings.HasPrefix(filePath, "/var/www/uploads/") {
    return fmt.Errorf("invalid file path")
}
```

#### 3. 限制文件写入权限
设置合适的文件权限，避免权限过宽导致的潜在风险。
```go
err = os.WriteFile(safePath, []byte(content), 0644)
if err != nil {
    return fmt.Errorf("error writing file: %!!(MISSING)!(MISSING)!(MISSING)v(MISSING)", err)
}
```
CODE
	desc: <<<CODE
### 规则目的
该规则专注于审计Go语言代码中使用`os`包进行文件写入的代码，主要用于识别潜在的文件操作风险，并非直接检测特定漏洞，而是作为审计文件写入操作的基础规则。

### 规则详细
* **作为基础审计库**
  属于`golang-file-write-os`审计库规则（`lib`类型），主要用于识别代码中所有调用了`os`包提供的文件写入功能的实例。它可以帮助安全审计人员快速定位所有文件写入操作点，以便进一步分析是否存在路径遍历、任意文件写入或其他文件操作相关的安全问题。

* **覆盖函数**
  该规则主要识别对`os.WriteFile`函数的调用。
CODE
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://filewrite.go': <<<PARAM
package main

import (
    "fmt"
    "net/http"
    "os"
    "path/filepath"
    "strings"
)

func writeFile(w http.ResponseWriter, r *http.Request) {
    filePath := r.URL.Query().Get("file")
    content := r.URL.Query().Get("content")

    // 解析并验证文件路径
    safePath, err := safeJoin("/var/www/uploads", filePath)
    if err != nil {
        fmt.Fprintf(w, "Invalid file path")
        return
    }

    // 写入文件内容
    err = os.WriteFile(safePath, []byte(content), 0644)
    if err != nil {
        fmt.Fprintf(w, "Error: %v", err)
        return
    }

    fmt.Fprintf(w, "File written successfully")
}

func main() {
    http.HandleFunc("/write", writeFile)
    http.ListenAndServe(":8080", nil)
}

PARAM
)
