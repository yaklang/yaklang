desc(
	title: "Audit Golang File Read Path Sink"
	type: audit
	level: info
	lib: 'golang-file-read-path-sink'
	desc: <<<DESC
### 规则描述

1. **规则目的**
   该规则用于审计Golang代码中可能存在的不安全的文件路径读取操作。它旨在识别出程序中所有使用文件的路径读取函数，如使用`bufio`、`ioutil`和`os`包中的相关函数。这些操作如果未对输入进行严格校验，可能导致路径穿越攻击（Path Traversal）。路径穿越是一种常见的Web应用漏洞，攻击者通过构造特殊路径值访问受限目录或文件，从而窃取敏感数据或破坏系统完整性。

2. **触发场景**
   在开发过程中，开发者可能直接使用用户提供的文件路径进行文件操作，而未对其进行充分验证。例如：
   ```golang
   userInput := r.URL.Query().Get("file")
   data, err := ioutil.ReadFile(userInput) // 直接使用用户输入作为路径
   if err != nil {
       log.Fatal(err)
   }
   fmt.Println(string(data))
   ```
   如果用户输入`../../etc/passwd`，上述代码将读取系统关键文件`/etc/passwd`，造成敏感信息泄露。

3. **潜在影响**
   - 攻击者可利用路径穿越漏洞访问未经授权的文件，包括配置文件、日志文件甚至系统核心文件。
   - 敏感数据泄露可能导致进一步的权限提升或横向移动。
   - 严重情况下，攻击者可以篡改或删除重要文件，导致服务中断或系统崩溃。
DESC
	rule_id: "d2580919-8b45-444e-9f93-55633c0311e4"
	title_zh: "审计Golang文件路径读取汇聚点"
	solution: <<<SOLUTION
### 修复建议

#### 1. 使用绝对路径并限制访问范围
   确保所有文件路径操作都基于预定义的安全基础目录，并且始终解析为绝对路径。Golang提供了`filepath.Abs`函数来获取绝对路径，同时可以结合`filepath.Clean`清理路径以移除冗余部分（如多余的`../`）。
   ```golang
   import "path/filepath"

   basePath := "/var/www/static" // 安全的基础目录
   userInput := r.URL.Query().Get("file")
   safePath := filepath.Join(basePath, filepath.Clean("."+userInput)) // 拼接并清理路径

   if !strings.HasPrefix(safePath, basePath) { // 验证是否超出基础目录
       http.Error(w, "Invalid file path", http.StatusBadRequest)
       return
   }

   data, err := ioutil.ReadFile(safePath)
   if err != nil {
       http.Error(w, "File not found", http.StatusNotFound)
       return
   }
   w.Write(data)
   ```

#### 2. 输入合法性校验
   对用户输入实施严格的验证，确保其仅包含允许的字符集，避免非法序列（如`../`）。
   ```golang
   import "regexp"

   validPathPattern := regexp.MustCompile(`^[a-zA-Z0-9_./-]+$`) // 允许字母、数字、下划线、斜杠及连字符
   if !validPathPattern.MatchString(userInput) {
       http.Error(w, "Invalid characters in file path", http.StatusBadRequest)
       return
   }
   ```

#### 3. 使用专用库增强安全性
   可考虑引入第三方库（如`securejoin`），提供更高级别的路径拼接保护。
   ```golang
   import "github.com/cyphar/filepath-securejoin"

   basePath := "/var/www/static"
   userInput := r.URL.Query().Get("file")
   safePath, err := securejoin.SecureJoin(basePath, userInput) // 安全拼接路径
   if err != nil {
       http.Error(w, "Invalid file path", http.StatusBadRequest)
       return
   }

   data, err := ioutil.ReadFile(safePath)
   if err != nil {
       http.Error(w, "File not found", http.StatusNotFound)
       return
   }
   w.Write(data)
   ```
SOLUTION
	reference: <<<REFERENCE
[CWE-22: Path Traversal](https://cwe.mitre.org/data/definitions/22.html)
[OWASP Path Traversal](https://owasp.org/www-community/vulnerabilities/Path_Traversal)
REFERENCE
)

<include('golang-file-read-path-bufio')> as $output;
<include('golang-file-read-path-ioutil')> as $output;
<include('golang-file-read-path-os')> as $output;

alert $output for {
	title_zh: "审计Golang文件路径读取汇聚点",
	level: "info",
	title: "Audit Golang File Read Path Sink",
}
