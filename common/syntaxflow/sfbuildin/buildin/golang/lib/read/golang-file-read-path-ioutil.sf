desc(
	title: "Audit Golang File Read Path ioutil"
	type: audit
	level: info
	lib: 'golang-file-read-path-ioutil'
	desc: <<<DESC
审计Golang代码中使用的ioutil包的文件读取功能。该规则检测使用ioutil.ReadAll或ioutil.ReadFile函数的代码段，这可能引发文件读取路径泄露的安全风险。规则目的是确保文件读取操作不会暴露敏感文件路径信息。
DESC
	rule_id: "46cba5f6-bb9e-492e-9842-980cc8514dbd"
	title_zh: "审计Golang ioutil文件读取方法"
	solution: <<<SOLUTION
避免使用ioutil包进行文件读取操作。推荐使用更安全的文件读取方法，如使用os包中的ReadFile函数，并结合适当的安全检查，确保不会读取未授权的文件。
SOLUTION
	reference: <<<REFERENCE
[Go io/ioutil Documentation (Deprecated)](https://pkg.go.dev/io/ioutil)
REFERENCE
)

ioutil?{<fullTypeName>?{have: 'io/ioutil'}} as $entry

$entry.ReadAll(* #-> as $output) 
$entry.ReadFile(* #-> as $output)

alert $output for {
	title: "Check Golang ioutil File Read Path",
	title_zh: "审计Golang ioutil文件读取方法",
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://fileread.go': <<<PARAM
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
)

func main() {
	// 要写入的文件名
	fileName := "example.txt"

	// 写入数据到文件
	data := []byte("Hello, Go Programming!\nThis is a simple file I/O example.")
	err := ioutil.WriteFile(fileName, data, 0644) // 0644 是文件权限
	if err != nil {
		log.Fatalf("Error writing to file: %s", err)
		return
	}
	fmt.Println("Data written to file successfully.")

	// 读取文件内容
	content, err := ioutil.ReadFile(fileName)
	if err != nil {
		log.Fatalf("Error reading from file: %s", err)
		return
	}

	// 打印文件内容
	fmt.Println("File content:")
	fmt.Println(string(content))
}

PARAM
	"safefile://SecureFileReader.go": <<<CODE
package main

import (
	"fmt"
	"os"
	"path/filepath"
)

func main() {
	fileName := "safe_example.txt"
	data := []byte("This is safe content.\n")

	// 使用os包写入文件，这不是规则关注点，但完整示例需要
	err := os.WriteFile(fileName, data, 0644)
	if err != nil {
		fmt.Printf("Error writing file: %v\n", err)
		return
	}

	// 反向测试用例1: 使用os.ReadFile，这是推荐的安全做法，不会触发ioutil告警
	content, err := os.ReadFile(fileName)
	if err != nil {
		fmt.Printf("Error reading file with os.ReadFile: %v\n", err)
		return
	}
	fmt.Printf("Content read with os.ReadFile: %s\n", string(content))

	// 反向测试用例2: 使用os.Open和io.ReadAll，绕过ioutil
	f, err := os.Open(fileName)
	if err != nil {
		fmt.Printf("Error opening file with os.Open: %v\n", err)
		return
	}
	defer f.Close()

	// 创建一个字节切片来存储文件内容
	fileContent := make([]byte, 1024)
	n, err := f.Read(fileContent)
	if err != nil && err.Error() != "EOF" {
		fmt.Printf("Error reading file with f.Read: %v\n", err)
		return
	}
	fmt.Printf("Content read with f.Read: %s\n", string(fileContent[:n]))

	// 反向测试用例3: 从网络或其他安全源读取数据，不涉及文件系统
	// 例如：从一个安全的API读取数据，与文件读取无关
	// contentFromNetwork := "This is data from network API"
	// fmt.Println(contentFromNetwork)

	// 反向测试用例4: 使用filepath.Join构建绝对安全路径并使用os.ReadFile
	safePath := filepath.Join("/tmp", "secure_data.txt")
	os.WriteFile(safePath, []byte("Secure data here"), 0644)

	secureContent, err := os.ReadFile(safePath)
	if err != nil {
		fmt.Printf("Error reading secure path with os.ReadFile: %v\n", err)
		return	
	}
	fmt.Printf("Secure content read from %s: %s\n", safePath, string(secureContent))
}

CODE
)
