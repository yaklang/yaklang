desc(
	title: "Audit Golang File Read Path bufio"
	type: audit
	level: info
	lib: 'golang-file-read-path-bufio'
	desc: <<<DESC
### 规则描述

该规则用于审计Golang代码中使用bufio包进行文件读取操作时的路径安全性。它通过识别直接读取文件路径的代码片段，确保这些路径没有潜在的安全风险。例如，直接从用户输入中读取文件路径可能导致任意文件读取漏洞，攻击者可以读取系统上的敏感文件。

### 规则详细

1. **规则目的**
   该规则旨在发现和报告Golang代码中使用bufio包进行文件读取时可能存在的路径安全问题。

2. **规则详细**
   - 检测以下bufio相关函数：`NewReader`、`ReadString`等。
   - 分析这些函数调用时传入的文件路径参数，确保它们不是直接来自用户输入，或者已经经过适当的清理和验证。
DESC
	rule_id: "1103769b-8b69-48f5-a8a3-64b109940f1a"
	solution: <<<SOLUTION
### 修复建议

#### 1. 避免直接使用用户输入作为文件路径
   当需要从用户输入中读取文件时，应该对输入进行严格的验证，确保它符合预期的文件格式和范围。例如，可以使用正则表达式来限制文件名只能包含字母、数字和下划线。

#### 2. 使用安全的文件读取方法
   如果可能，使用安全的文件读取方法，如Go标准库中的`ioutil.ReadFile`或`os.ReadFile`，这些方法可以自动处理文件路径的安全问题。

#### 3. 对文件路径进行清理和验证
   在使用用户输入作为文件路径之前，应该对其进行清理和验证，例如使用`filepath.Clean`来规范化路径，使用`filepath.Abs`来获取绝对路径，并确保路径不包含`..`等可能用于路径穿越的序列。
SOLUTION
	reference: <<<REFERENCE
none
REFERENCE
	title_zh: "审计Golang文件读取路径bufio包使用"
)

bufio?{<fullTypeName>?{have: 'bufio'}} as $entry;
$entry.NewReader(* #-> as $output);

alert $output for {
	title: "Audit Golang File Read Path bufio",
	title_zh: "审计Golang文件读取路径bufio包使用",
	level: "info",
}

desc(
	lang: golang
	alert_min: 1
	'file://fileread.go': <<<PARAM
package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    // 写入文件
    writeToFile("example.txt", []string{"Hello, World!", "Welcome to Go programming.", "This is a buffered I/O example."})

    // 读取文件
    readFromFile("example.txt")
}

// writeToFile 使用 bufio 写入文本到文件
func writeToFile(filename string, lines []string) {
    // 创建或打开文件
    file, err := os.Create(filename)
    if err != nil {
        fmt.Println("Error creating file:", err)
        return
    }
    defer file.Close() // 确保在函数结束时关闭文件

    // 创建一个带缓冲的写入器
    writer := bufio.NewWriter(file)

    // 写入每一行
    for _, line := range lines {
        _, err := writer.WriteString(line + "\n")
        if err != nil {
            fmt.Println("Error writing to file:", err)
            return
        }
    }

    // 确保所有缓冲的数据都写入文件
    if err := writer.Flush(); err != nil {
        fmt.Println("Error flushing to file:", err)
        return
    }

    fmt.Println("Data written to", filename)
}

// readFromFile 使用 bufio 逐行读取文件
func readFromFile(filename string) {
    // 打开文件
    file, err := os.Open(filename)
    if err != nil {
        fmt.Println("Error opening file:", err)
        return
    }
    defer file.Close() // 确保在函数结束时关闭文件

    // 创建一个带缓冲的读取器
    reader := bufio.NewReader(file)

    // 逐行读取文件
    for {
        line, err := reader.ReadString('\n')
        if err != nil {
            break // EOF 或其他错误
        }
        fmt.Print(line) // 打印读取的行
    }

    if err != nil && err.Error() != "EOF" {
        fmt.Println("Error reading file:", err)
        return
    }
}
PARAM
)
