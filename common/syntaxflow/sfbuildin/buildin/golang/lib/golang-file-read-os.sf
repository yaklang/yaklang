desc(
	title: "Audit Golang File Read Function"
	type: audit
	level: info
	lib: 'golang-file-read-os'
	desc: <<<DESC
### 1.规则目的

该规则用于审计Go语言项目中文件读取函数的安全性。

### 2.规则详细

属于 `golang-file-read-os` 库规则（`lib`类型），用于识别 `os` 包中与文件读取相关的函数调用点。

它可以检测以下函数：

- `os.ReadFile`：读取命名文件并将内容作为字节片返回。

此规则通常需要配合其他规则（如用户输入跟踪规则）来识别是否存在路径穿越或任意文件读取漏洞，通过标记文件读取的源参数，判断该参数是否来自于不受信任的用户输入。

例如，当文件路径直接来自于用户请求参数且未经充分验证和过滤，攻击者可能构造 `./../path/to/sensitive/file` 等形式的路径，从而读取任意系统文件。

```go
package main

import (
    "fmt"
    "net/http"
    "os"
)

func readFile(w http.ResponseWriter, r *http.Request) {
    filePath := r.URL.Query().Get("file")

    // 未验证用户输入，直接读取文件
    data, err := os.ReadFile(filePath)
    if err != nil {
        fmt.Fprintf(w, "Error: %v", err)
        return
    }

    fmt.Fprintf(w, "File content: %s", data)
}

func main() {
    http.HandleFunc("/read", readFile)
    http.ListenAndServe(":8080", nil)
}

```
在上述示例中，`filePath` 直接来自 `r.URL.Query().Get("file")`，如果用户输入 `../secret/config.txt`，程序就会尝试读取 `/secret/config.txt` 文件。
DESC
	rule_id: "130d8178-f5c8-49ad-a7a3-ba47da0e50f9"
	solution: <<<SOLUTION
### 修复建议

#### 1. 对用户输入的文件路径进行严格验证和过滤

这是防止文件读取漏洞最核心的措施。需要检查用户输入的路径是否包含恶意字符（如 `..`、`/` 等），是否限定在允许访问的特定目录内，或者是否符合预期的文件名格式。

```go
package main

import (
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

// 允许读取的根目录
const allowedDir = "./safe_files"

func readFileSafe(w http.ResponseWriter, r *http.Request) {
	userInput := r.URL.Query().Get("file")

	// 清理路径，防止目录穿越
	cleanPath := filepath.Clean(userInput)

	// 拼接并解析为绝对路径
	absolutePath, err := filepath.Abs(filepath.Join(allowedDir, cleanPath))
	if err != nil {
		http.Error(w, "Invalid file path", http.StatusBadRequest)
		return
	}

	// 确保解析后的绝对路径位于允许的目录内
	if !strings.HasPrefix(absolutePath, allowedDir) {
		http.Error(w, "Access denied", http.StatusForbidden)
		return
	}

	// 读取文件
	data, err := os.ReadFile(absolutePath)
	if err != nil {
		fmt.Fprintf(w, "Error reading file: %v", err)
		return
	}

	fmt.Fprintf(w, "File content: %s", data)
}

func main() {
	// 创建允许访问的目录示例
	os.MkdirAll(allowedDir, 0755)
	// 在目录下创建示例文件
	os.WriteFile(filepath.Join(allowedDir, "example.txt"), []byte("This is a safe file."), 0644)

	http.HandleFunc("/read", readFileSafe)
	http.ListenAndServe(":8080", nil)
}
```

#### 2. 使用白名单机制

限定允许用户访问的文件列表或文件名Pattern，拒绝任何不在白名单中的文件请求。

#### 3. 最小权限原则

运行应用程序的用户应具有最低必要的文件读取权限，限制其访问敏感文件和目录。
SOLUTION
	reference: <<<REFERENCE
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')](https://cwe.mitre.org/data/definitions/22.html)
REFERENCE
	title_zh: "审计Golang文件读取功能"
)

os?{<fullTypeName>?{have: 'os'}} as $os
$os.ReadFile(* #-> as $param)
$param?{!have: 'Parameter'} as $output;

alert $output

desc(
	lang: golang
	alert_min: 1
	'file://fileread.go': <<<PARAM
package main

import (
    "fmt"
    "net/http"
    "os"
)

func readFile(w http.ResponseWriter, r *http.Request) {
    filePath := r.URL.Query().Get("file")

    // 未验证用户输入，直接读取文件
    data, err := os.ReadFile(filePath)
    if err != nil {
        fmt.Fprintf(w, "Error: %v", err)
        return
    }

    fmt.Fprintf(w, "File content: %s", data)
}

func main() {
    http.HandleFunc("/read", readFile)
    http.ListenAndServe(":8080", nil)
}

PARAM
)
