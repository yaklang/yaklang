desc(
    title: "golang SSTI(template)",
    type: audit,
    severity: high,
    rule_id: 11336001,
    desc: <<<TEXT
在 Go 语言中，CWE-1336（Server-Side Template Injection, SSTI）漏洞通常发生在使用模板引擎时，未对用户输入进行严格过滤，导致攻击者可以注入恶意代码。SSTI 漏洞可能导致任意代码执行、敏感信息泄露或服务中断，因此属于高风险漏洞。

SSTI 漏洞通常发生在以下场景：
1. 用户输入直接嵌入模板：将用户输入直接拼接到模板字符串中，例如 `tmpl := fmt.Sprintf("Hello, %s!", username)`。
2. 未转义用户输入：未对用户输入进行转义或过滤，导致模板引擎将其解析为可执行的代码。

攻击者可以通过以下方式利用 SSTI 漏洞：
- 注入模板语法，例如 `{{ 7 * 7 }}`，验证是否存在 SSTI 漏洞。
- 利用模板引擎的功能执行任意代码，例如 `{{ .System "whoami" }}`，获取系统权限。
TEXT
)

<include('golang-template')> as $sink;

$sink.Must(* #-> as $param);
$sink.New as $new;

$param #{ 
	include: `$new`,
}-> as $key;

$key().Parse(* as $target);

$target #{ 
	exclude: `*?{opcode:const}`,
}-> as $high;


alert $high for {
    title: 'SSTI detected',
    title_zh: '检测到SSTI',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 1,
    'file://main.go': <<<UNSAFE
package main

import (
    "fmt"
    "html/template"
    "net/http"
)

func main() {
    http.HandleFunc("/greet", func(w http.ResponseWriter, r *http.Request) {
        // 获取用户输入
        username := r.URL.Query().Get("name")

        // 直接拼接用户输入到模板中
        tmpl := fmt.Sprintf("Hello, %s!", username)

        // 渲染模板
        t := template.Must(template.New("greet").Parse(tmpl))
        t.Execute(w, nil)
    })

    http.ListenAndServe(":8080", nil)
}
UNSAFE,
    'safe://main.go': <<<SAFE
package main

import (
    "html/template"
    "net/http"
)

func main() {
    http.HandleFunc("/greet", func(w http.ResponseWriter, r *http.Request) {
        // 获取用户输入
        username := r.URL.Query().Get("name")

        // 使用安全的模板变量替换
        t := template.Must(template.New("greet").Parse("Hello, {{ . }}!"))
        t.Execute(w, username) // 自动转义用户输入
    })

    http.ListenAndServe(":8080", nil)
}
SAFE
)
