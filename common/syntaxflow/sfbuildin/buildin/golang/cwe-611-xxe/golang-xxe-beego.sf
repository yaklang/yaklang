desc(
	title: "Detect Golang XXE Vulnerability in Beego Framework"
	title_zh: "检测Golang Beego框架中的XXE漏洞"
	type: vuln
	level: high
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   XXE（XML External Entity）漏洞（CWE-611）是由于应用程序在解析XML数据时未禁用外部实体解析。攻击者可以通过构造恶意的XML输入，利用外部实体读取服务器上的敏感文件（如`/etc/passwd`），或者执行其他危险操作，例如发起SSRF（Server-Side Request Forgery）攻击。

2. **触发场景**
   // 存在漏洞的代码示例
   ```go
package main

import (
	"bytes"
	"github.com/beevik/etree"
	"github.com/lestrrat-go/libxml2/parser"
)

func main() {
	// 攻击者提供的恶意XML数据
	maliciousXML := `<?xml version="1.0"?>
	<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
	<foo>&xxe;</foo>`

	p := parser.New(parser.XMLParseNoEnt)
	doc, err := p.ParseReader(bytes.NewReader([]byte(maliciousXML)))
	if err != nil {
		panic(err)
	}
	defer doc.Free()
	root, _ := doc.DocumentElement()
	println(root.TextContent())
}
   ```
   在上述代码中，攻击者通过构造包含外部实体的恶意XML数据，利用`parser.XMLParseNoEnt`选项解析XML文档，导致服务器返回`/etc/passwd`文件的内容。

3. **潜在影响**
   - 攻击者可以读取服务器上的任意文件，泄露敏感信息。
   - 可能被用于发起SSRF攻击，进一步扩大攻击面。
   - 若攻击者能够结合其他漏洞（如RCE），可能导致服务器被完全控制。

DESC
	rule_id: "0bf612c9-cfcc-4f26-b41d-6d0dffb525e8"
	solution: <<<SOLUTION
### 修复建议

#### 1. 禁用外部实体解析
   在使用XML解析库时，应明确禁用外部实体解析功能，以防止XXE攻击。
   ```go
package main

import (
	"bytes"
	"github.com/lestrrat-go/libxml2/parser"
)

func main() {
	// 安全的XML解析配置
	maliciousXML := `<?xml version="1.0"?>
	<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
	<foo>&xxe;</foo>`

	p := parser.New(parser.XMLParseNoEnt | parser.XMLParseDTDLoad) // 禁用外部实体加载
	doc, err := p.ParseReader(bytes.NewReader([]byte(maliciousXML)))
	if err != nil {
		panic(err)
	}
	defer doc.Free()
	root, _ := doc.DocumentElement()
	println(root.TextContent())
}
   ```

#### 2. 使用安全的XML解析库
   考虑使用更安全的XML解析库或工具，例如Go自带的`encoding/xml`包，该包默认不支持外部实体解析。
   ```go
package main

import (
	"encoding/xml"
	"fmt"
)

func main() {
	data := `<?xml version="1.0"?>
	<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
	<foo>&xxe;</foo>`

	var result map[string]string
	err := xml.Unmarshal([]byte(data), &result)
	if err != nil {
		fmt.Println("Error:", err)
	} else {
		fmt.Println("Parsed XML:", result)
	}
}
   ```

#### 3. 输入验证与过滤
   对用户输入的XML数据进行严格验证，确保其符合预期格式和结构。
   ```go
   if !isValidXML(inputXML) {
       return errors.New("Invalid XML input")
   }
   ```

SOLUTION
	reference: <<<REFERENCE
[CWE-611: Improper Restriction of XML External Entity Reference](https://cwe.mitre.org/data/definitions/611.html)
[OWASP XXE Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)
REFERENCE
)

parser?{<fullTypeName>?{have: 'github.com/lestrrat-go/libxml2/parser'}} as $entry 

$entry.New(* as $param)
$param?{have: "XMLParseNoEnt"} as $high

alert $high	for {
	title_zh: "检测Golang Beego框架中的XML外部实体(XXE)漏洞",
	solution: <<<CODE
### 修复建议

#### 1. 禁用外部实体解析
在解析XML时，显式禁用外部实体解析以防止恶意输入。
```go
package main

import (
	"bytes"
	"github.com/beevik/etree"
)

func safeParseXML(input []byte) {
	// 使用安全的解析器配置
	doc := etree.NewDocument()
	doc.ReadSettings.Entity = false // 禁用外部实体解析
	err := doc.ReadFrom(bytes.NewReader(input))
	if err != nil {
		panic(err)
	}
}
```

#### 2. 验证和清理用户输入
对所有用户提供的XML数据进行验证，并确保其符合预期结构。
```go
func validateXML(input []byte) bool {
	// 定义允许的XML模式或结构
	allowedSchema := "<your-xml-schema>"
	// 验证XML是否符合定义的模式
	return isValidAgainstSchema(input, allowedSchema)
}
```

#### 3. 使用更安全的库
考虑使用默认更安全的XML解析库，例如 `encoding/xml`，它默认不解析外部实体。
```go
package main

import (
	"encoding/xml"
	"fmt"
)

func parseWithEncodingXML(input []byte) {
	type Example struct {
		Content string `xml:"content"`
	}
	var example Example
	err := xml.Unmarshal(input, &example)
	if err != nil {
		fmt.Println("Error parsing XML:", err)
	}
}
```
CODE
	desc: <<<CODE
### 漏洞描述

1. **漏洞原理**
   XXE（XML External Entity）漏洞（CWE-611）是指应用程序在解析XML时未禁用外部实体解析，攻击者可以通过构造恶意XML文件加载服务器上的敏感文件（如 `/etc/passwd`），甚至可能执行远程代码。

2. **触发场景**
   ```go
   package main

   import (
       "bytes"
       "github.com/beevik/etree"
   )

   func vulnerableParse(input []byte) {
       doc := etree.NewDocument()
       doc.ReadSettings.Entity = true // 外部实体解析开启
       err := doc.ReadFrom(bytes.NewReader(input))
       if err != nil {
           panic(err)
       }
   }
   ```
   攻击者可以传入恶意XML，例如：
   ```xml
   <!DOCTYPE foo [
       <!ENTITY xxe SYSTEM "file:///etc/passwd">
   ]>
   <foo>&xxe;</foo>
   ```
   这将导致服务器泄露敏感信息。

3. **潜在影响**
   - 泄露服务器上的任意文件，包括系统配置文件、密钥等。
   - 执行远程代码或发起SSRF（服务器端请求伪造）攻击。
   - 可能导致服务器被完全控制。
CODE
	level: "high",
	type: "vuln",
	title: "Check Golang XML External Entity (XXE) Vulnerability in Beego",
}

desc(
	lang: golang
	alert_high: 1
	'file://main.go': <<<UNSAFE
package main

import (
	"bytes"
	"fmt"
	"io/ioutil"

	beego "github.com/beego/beego/v2/server/web"
	"github.com/beevik/etree"
	"github.com/lestrrat-go/libxml2/parser"
)

func (c *XXEVuln1Controller) Get() {
	file, err := ioutil.ReadFile("static/xml/xxe.xml")
	if err != nil {
		panic(err)
	}
	c.Data["xxe"] = string(file)
	c.TplName = "xxe.tpl"
}

func (c *XXEVuln1Controller) Post() {
	file := c.GetString("file")
	p := parser.New(parser.XMLParseNoEnt)
	doc, err := p.ParseReader(bytes.NewReader([]byte(file)))
	if err != nil {
		panic(err)
	}
	defer doc.Free()
	root, err := doc.DocumentElement()
	xxe := root.TextContent()
	c.Data["xxe"] = xxe
	c.TplName = "xxe.tpl"
}

UNSAFE
)
