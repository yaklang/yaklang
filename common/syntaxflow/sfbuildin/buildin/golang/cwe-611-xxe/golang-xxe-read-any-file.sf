desc(
    title: "golang xxe read any file",
    type: audit,
    level: high,
    desc: <<<TEXT
此审计规则旨在验证 XML，攻击者可以通过构造恶意 XML 输入读取服务器上的任意文件（如 /etc/passwd）。
TEXT
)

<include('golang-xml-sink')> as $sink;

$sink.Strict?{!have: 'false'} as $high

alert $high for {
    title: 'filedelele missing permission check',
    title_zh: '检测到文件路径未授权',
    type: 'vuln',
    level: 'high',
}

desc(
    lang: golang,
    alert_high: 1,
    'file://main.go': <<<UNSAFE
package main

import (
    "encoding/xml"
    "fmt"
    "os"
)

type Person struct {
    Name string `xml:"name"`
    Age  int    `xml:"age"`
}

func main() {
    // 模拟恶意 XML 输入
    xmlData := `<?xml version="1.0"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
<person>
    <name>&xxe;</name>
    <age>30</age>
</person>`

    var person Person
    decoder := xml.NewDecoder(strings.NewReader(xmlData))

    // 启用外部实体解析
    decoder.Strict = true
    decoder.Entity = xml.HTMLEntity

    err := decoder.Decode(&person)
    if err != nil {
        fmt.Println("Error unmarshalling XML:", err)
        return
    }

    fmt.Println("Name:", person.Name)
    fmt.Println("Age:", person.Age)
}

UNSAFE
)
