desc(
	title: "Check Golang Null Password Vulnerability"
	type: audit
	severity: low
	desc: <<<DESC
### 漏洞描述

1. **漏洞原理**
   空密码漏洞是指在身份验证过程中允许使用空的密码（nil或空字符串）进行认证。这通常是由于开发者在实现身份验证逻辑时未能正确处理或强制要求用户设置密码。当系统或应用程序允许使用空密码时，攻击者无需任何凭证即可直接访问受保护的资源或系统，从而绕过身份验证机制。

2. **触发场景**
   - **未设置密码处理不当:** 在用户注册或设置密码流程中，未强制要求用户设置非空密码，导致用户可以创建一个没有密码的账户。
   - **硬编码或默认空密码:** 在代码中硬编码了空密码作为默认值，或者在某些特定情况下（如初始化配置）使用了空密码且未强制用户修改。
   - **认证逻辑缺陷:** 认证逻辑中对密码的校验存在问题，例如仅仅检查用户名是否存在，而忽略了密码的验证，或者在某些分支逻辑中允许空密码通过认证。
   - **依赖库或框架配置不当:** 使用的第三方库或框架在默认配置下允许空密码认证，而开发者未进行安全的配置。

   **存在漏洞的代码示例（Golang LDAP库）:**
   ```go
   // ... 其他代码
   err = l.Bind("cn=admin,dc=example,dc=com", nil) // 直接使用nil作为密码进行LDAP绑定
   if err != nil {
   	log.Fatalf("Failed to bind: %s", err)
   }
   // ... 后续操作在未提供密码的情况下成功执行
   ```

3. **潜在影响**
   - **未授权访问:** 攻击者可以未经身份验证访问系统内部资源、敏感数据或执行特权操作。
   - **账号劫持:** 如果允许空密码，攻击者可以轻松获取或重置用户账号。
   - **数据泄露:** 攻击者可以访问数据库或文件系统，窃取敏感信息（如用户数据、配置信息）。
   - **系统破坏:** 攻击者可能利用访问权限执行删除、修改数据或进行其他破坏性操作。
   - **更深层次的渗透:** 攻击者可能以受感染系统的身份进一步攻击内部网络中的其他系统。
DESC
	rule_id: "e1587647-f746-41ea-8a3d-4d760e1413f8"
	reference: <<<REFERENCE
[CWE-287: Improper Authentication](https://cwe.mitre.org/data/definitions/287.html)
REFERENCE
	title_zh: "检测Golang空密码漏洞"
	solution: <<<SOLUTION
### 修复建议

#### 1. 强制设置和校验非空密码
在用户注册、密码修改和身份验证过程中，严格校验用户输入的密码是否为空或长度不足，并拒绝使用空密码。

```go
// 示例：在用户注册或密码更新时检查密码是否为空
func setUserPassword(user string, password string) error {
    if password == "" || len(password) < 8 { // 检查空字符串或长度不足的密码
        return fmt.Errorf("Password cannot be empty and must be at least 8 characters long")
    }

    // ... 安全地存储和更新密码（例如，bcrypt哈希）

    return nil
}

// 示例：在身份验证时检查密码是否被设置为安全值
func authenticateUser(username string, password string) (bool, error) {
    // ... 从数据库或其他存储中获取用户安全存储的密码哈希
    storedPasswordHash := getPasswordHashFromDB(username)

    if storedPasswordHash == "" { // 如果数据库中密码为空，拒绝认证
        return false, fmt.Errorf("User account is not properly configured, no password set")
    }

    // ... 使用安全的密码比较函数（如 bcrypt.CompareHashAndPassword）比较输入的密码和存储的哈希
    // isMatch := bcrypt.CompareHashAndPassword([]byte(storedPasswordHash), []byte(password)) == nil

    // return isMatch, nil
    return false, fmt.Errorf("Authentication failed: Invalid username or password")
}
```

#### 2. 使用安全的密码存储机制
绝不以明文形式存储密码。应使用强加密哈希函数（如 bcrypt, scrypt, Argon2）加盐处理后存储密码。在验证时，重新哈希输入的密码并与存储的哈希值进行比较。

#### 3. 审查和修改默认配置
检查所有使用的库、框架和服务的默认安全配置，确保不使用默认的空密码或弱密码。
SOLUTION
)

<include('golang-ldap-sink')> as $sink;

$sink.Bind(*<slice(index=2)> as $param)
$param #{ 
	include:`*?{opcode:const}?{have:'nil'}`,
}-> as $low;

alert $low for {
    title: 'Empty password detected',
    title_zh: '检测到使用空密码',
    type: 'vuln',
    level: 'low',
}

desc(
	lang: golang
	alert_low: 1
	'file://main.go': <<<UNSAFE
package main

import (
	"fmt"
	"log"

	ldap "gopkg.in/ldap.v2"
)

func authenticate() bool {
    username := "user"
	l, err := ldap.Dial("tcp", "ldap.example.com:389")
	if err != nil {
		log.Fatalf("Failed to connect to LDAP server: %s", err)
	}
	defer l.Close()

	// 绑定到 LDAP 服务器
	err = l.Bind("cn=admin,dc=example,dc=com", nil)
	if err != nil {
		log.Fatalf("Failed to bind: %s", err)
	}
	return true
}

func main() {
	http.HandleFunc("/login", login)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
UNSAFE
)
