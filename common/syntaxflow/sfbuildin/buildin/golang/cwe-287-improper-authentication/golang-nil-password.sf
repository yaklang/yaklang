desc(
    title: "golang null password",
    type: audit,
    severity: low,
    desc: <<<TEXT
该审计规则旨在识别 Golang 代码中使用空密码的情况。在密码管理中，空密码是指没有设置密码或者密码为空的情况。使用空密码可能会导致严重的安全漏洞，因为攻击者可以直接登录系统或获取敏感信息。建议开发者在密码管理中避免使用空密码，并遵循安全最佳实践。

空密码漏洞通常发生在以下场景：
1. 未设置密码：在身份验证逻辑中，未对密码进行设置或验证，例如直接使用 `nil` 或空字符串作为密码。
2. 硬编码空密码：在代码中硬编码空密码，例如 `password := ""`，导致攻击者可以轻松绕过身份验证。
TEXT
)

<include('golang-ldap-sink')> as $sink;

$sink.Bind(,* #-> as $param)
$param #{ 
	include:`*?{opcode:const}?{have:'nil'}`,
}-> as $low;

alert $low for {
    title: 'Empty password detected',
    title_zh: '检测到使用空密码',
    type: 'vuln',
    level: 'low',
}

desc(
    lang: golang,
    alert_low: 1,
    'file://main.go': <<<UNSAFE
package main

import (
	"fmt"
	"log"

	ldap "gopkg.in/ldap.v2"
)

func authenticate() bool {
    username := "user"
	l, err := ldap.Dial("tcp", "ldap.example.com:389")
	if err != nil {
		log.Fatalf("Failed to connect to LDAP server: %s", err)
	}
	defer l.Close()

	// 绑定到 LDAP 服务器
	err = l.Bind("cn=admin,dc=example,dc=com", nil)
	if err != nil {
		log.Fatalf("Failed to bind: %s", err)
	}
	return true
}

func main() {
	http.HandleFunc("/login", login)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
UNSAFE
)
