desc(
	title: "Auditing format string vulnerabilities in C"
	title_zh: "审计C语言中的格式化字符串漏洞"
	type: audit
	severity: high
	risk: ""
	desc: <<<DESC

DESC
	rule_id: "c79f91bf-773d-493a-ad14-e7d815e1bd32"
	solution: <<<SOLUTION

SOLUTION
	reference: <<<REFERENCE

REFERENCE
)

printf(*<slice(index=0)> #-> as $sink);
fprintf(*<slice(index=0)> #-> as $sink);
sprintf(*<slice(index=0)> #-> as $sink);
snprintf(*<slice(index=0)> #-> as $sink);
syslog(*<slice(index=0)> #-> as $sink);
$sink?{!opcode:const} as $high

alert $high for {
	level: "high",
	type: "vuln",
	title: "Auditing format string vulnerabilities in C",
	title_zh: "审计C语言中的格式化字符串漏洞",
}

desc(
	lang: c
	alert_high: 1
	'file://unsafe.c': <<<UNSAFE
#include <stdio.h>
#include <string.h>

void vulnerable_function(char* user_input) {
    printf(user_input);
    printf("\n");
}

int main(int argc, char** argv) {
	char buffer[1024];
    
   	read(STDIN_FILENO, buffer, 0x400);
    vulnerable_function(buffer);
    return 0;
}
UNSAFE
	'safefile://safe.c': <<<SAFE
#include <stdio.h>
#include <string.h>

void vulnerable_function(char* user_input) {
    printf("%s", user_input);
    printf("\n");
}

int main(int argc, char** argv) {
	char buffer[1024];
    
   	read(STDIN_FILENO, buffer, 0x400);
    vulnerable_function(buffer);
    return 0;
}
SAFE
)

