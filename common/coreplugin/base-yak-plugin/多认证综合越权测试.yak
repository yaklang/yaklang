args = cli.Json(
    "kv", 
    cli.setJsonSchema(
        <<<JSON
{
  "type": "object",
  "properties": {
    "kvs": {
      "type": "array",
      "title": "配置认证信息",
      "minItems": 1,
      "items": {
        "properties": {
          "kind": {
            "title": "Kind",
            "type": "string",
            "enum": [
                "Header",
                "Cookie"
            ],
            "title": "认证类型",
            "default": "Header",
            "description": "设置认证信息，如果需要对整体 Cookie 进行测试，请使用 Header 模式，Key 填写 Cookie 即可"
            },
          "force": {
            "type": "boolean",
            "default": true,
            "title": "强制添加",
            "description":"默认如果源数据包不存在这个认证信息，则不测试，勾选本选项后，即使源数据包不存在这个认证信息，也会测试"
          },
          "key": {
            "type": "string",
            "title": "Key",
            "description": "认证字段名，如果需要测试 Cookie，仅填写 Cookie Key 即可，例如 PHPSESSION 或 JSESSION 等"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "认证字段值（单行），如果需要多个认证，请添加新的认证信息，如果有多个关联的认证信息，请设置分组"
          },
          "group": {
            "type": "string",
            "title": "关联分组",
            "description": "关联分组，用于关联多个认证信息，同一个分组ID的认证信息会同时被添加测试，不同分组ID的认证信息会分别测试",
            "enum": [
              "",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10"
            ]
          }
        },
        "require": [
          "key",
          "value",
          "kind",
          "force"
        ]
      }
    }
  }
}
JSON, 
        cli.setUISchema(
            cli.uiGroups(cli.uiGroup(cli.uiField(
                "kvs", 
                1, 
                cli.uiFieldWidget(cli.uiWidgetTable), 
                cli.uiFieldGroups(cli.uiGroup(cli.uiField(
                    "items", 
                    1, 
                    cli.uiFieldGroups(cli.uiGroup(
                        cli.uiTableField("kind", 100),
                        cli.uiTableField("key", 100),
                        cli.uiTableField("value", 260, cli.uiFieldWidget(cli.uiWidgetTextarea)),
                        cli.uiTableField("force", 86),
                        cli.uiTableField("group", 86)
                    )), 
                ))), 
            ))),
            cli.uiGlobalFieldPosition(cli.uiPosHorizontal),
        ), 
    ), 
    cli.setRequired(true), 
)

base = cli.String("base", cli.setRequired(false), cli.setVerboseName("基准值"), cli.setCliGroup("高级（可选参数）"))

disableDomain = cli.String("disable-domain", cli.setRequired(false), cli.setVerboseName("不检测的域名"), cli.setCliGroup("高级（可选参数）"))
disablePath = cli.String("disable-path", cli.setRequired(false), cli.setVerboseName("不检测的路径"), cli.setCliGroup("高级（可选参数）"))

enableDomain = cli.String("enable-domain", cli.setRequired(false), cli.setVerboseName("需检测域名"), cli.setCliGroup("高级（可选参数）"))
enablePath = cli.String("enable-path", cli.setRequired(false), cli.setVerboseName("需检测路径"), cli.setCliGroup("高级（可选参数）"))

enableResponseKeyword = cli.Text("enable-response-content", cli.setRequired(false), cli.setVerboseName("需检测响应内容标志值"), cli.setCliGroup("高级（可选参数）"))

enableResponseKeywordRegexp = cli.Bool(
    "enable-response-content-regexp", 
    cli.setRequired(false), 
    cli.setVerboseName("响应内容标志值开启正则"), 
    cli.setCliGroup("高级（可选参数）"), 
)

cli.check()

yakit.AutoInitYakit()
once = sync.NewOnce()

mirrorHTTPFlow = (https, url, req, rsp, body) => {
    for _, item = range args["kvs"] {
        key = item.key
        value = item.value
        kind = item.kind
        force = item.force
        if !force {
            if kind == "Cookie" {
                if poc.GetHTTPPacketCookie(req, key) == "" {
                    return
                }
            } elif kind == "Header" {
                if poc.GetHTTPPacketHeader(req, key) == "" {
                    return
                }
            }
        }
        

        skipped = false
        host, _, _ = str.ParseStringToHostPort(url)
        path = poc.GetHTTPRequestPath(req)

        if disableDomain != "" {
            rules = disableDomain.Split(",").Map(i => i.Trim())
            skipped = str.MatchAnyOfGlob(host, rules...)
        }
        

        if !skipped && disablePath != "" {
            skipped = str.MatchAnyOfGlob(path, disablePath.Split(",").Map(i => i.Trim())...)
        }
        

        if !skipped && enableDomain {
            skipped = !str.MatchAnyOfGlob(host, enableDomain.Split(",").Map(i => i.Trim())...)
        }
        

        if !skipped && enablePath {
            skipped = !str.MatchAnyOfGlob(path, enablePath.Split(",").Map(i => i.Trim())...)
        }
        

        respMatch = str.MatchAnyOfRegexp
        if !enableResponseKeywordRegexp {
            respMatch = str.MatchAnyOfSubString
        }
        

        enableResponseKeywordList = []
        if !skipped && enableResponseKeyword {
            enableResponseKeywordList = enableResponseKeyword.Split("\n")
            skipped = !respMatch(rsp, enableResponseKeywordList...)
        }
        

        if skipped {
            return
        }
        

        replace = (origin, newValue) => {
            if kind == "Cookie" {
                if newValue == "" {
                    return poc.DeleteHTTPPacketCookie(origin, key)
                }
                

                return poc.ReplaceHTTPPacketCookie(origin, key, newValue)
            } elif kind == "Header" {
                if newValue == "" {
                    return poc.DeleteHTTPPacketHeader(origin, key)
                }
                

                return poc.ReplaceHTTPPacketHeader(origin, key, newValue)
            }
        }

        baseResponse = rsp
        if base != "" {
            newReqBase = replace(req, base)
            baseResponse, baseRequest, err = poc.HTTP(newReqBase, poc.https(https))
            if err != nil {
                yakit.Error(f"${url} 基准值(${base})测试失败")
                return
            }
            
            req = baseRequest
            rsp = baseResponse
            db.SaveHTTPFlowFromRawWithOption(url, baseRequest, baseResponse)
        } else {
            db.SaveHTTPFlowFromRawWithOption(url, req, rsp)
        }
        

        handleReq = (reqBytes, newValue) => {
            poc.HTTP(
                reqBytes, 
                poc.https(https), 
                poc.saveHandler(response => {
                    tag = ""
                    if len(enableResponseKeywordList) > 0 {
                        if respMatch(response.RawPacket, enableResponseKeywordList...) {
                            tag = "响应内容标志值匹配"
                            response.Red()
                        } else {
                            tag = "响应内容标志值消失"
                            response.Green()
                        }
                    } else {
                        sim := str.CalcSimilarity(baseResponse, response.RawPacket)
                        if sim > 0.95 {
                            response.Red()
                        } elif sim <= 0.4 {
                            response.Green()
                        } else {
                            response.Grey()
                        }
                        
                        showSim = "%.2f" % (sim * 100.0)
                        tag = f"相似：${showSim}% "
                    }
                    
                    if newValue == "" {
                        tag = f"${tag} 移除 ${kind}[${key}]"
                    } else {
                        tag = f"${tag} 值: ${newValue}"
                    }
                    
                    response.AddTag(tag)
                }), 
            )
        }

        reqBytes = replace(req, value)
        handleReq(reqBytes, value)

        emptyReq = replace(req, "")
        handleReq(emptyReq, "")
    }
}