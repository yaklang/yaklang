mode = cli.StringSlice(
    "mode", 
    cli.setVerboseName("认证模式"), 
    cli.setRequired(true), 
    cli.setDefault("Cookie"), 
    cli.setSelectOption("Cookie 认证", "Cookie"), 
    cli.setSelectOption("Header Auth 认证", "Header"), 
)
mode = str.Join(mode, " ")


key = cli.String("key", cli.setRequired(true), cli.setVerboseName("Key"))
value = cli.Text("value", cli.setRequired(true), cli.setVerboseName("Value"), cli.setHelp("按行分割"))
forceAdd = cli.Bool("forceAdd", cli.setDefault(true), cli.setRequired(true), cli.setVerboseName("强制添加值"), cli.setHelp("本开关将会控制是否对不存在 Key 的数据包进行测试"))

base = cli.String(
    "base", 
    cli.setRequired(false), 
    cli.setVerboseName("基准值"), 
    cli.setCliGroup("高级（可选参数）"), 
)

enableDomain = cli.String(
    "enable-domain", 
    cli.setRequired(false), 
    cli.setVerboseName("需检测域名"), 
    cli.setCliGroup("高级（可选参数）"), 
)
enablePath = cli.String(
    "enable-path", 
    cli.setRequired(false), 
    cli.setVerboseName("需检测路径"), 
    cli.setCliGroup("高级（可选参数）"), 
)

disableDomain = cli.String(
    "disable-domain", 
    cli.setRequired(false), 
    cli.setVerboseName("不检测的域名"), 
    cli.setCliGroup("高级（可选参数）"), 
)
disablePath = cli.String(
    "disable-path", 
    cli.setRequired(false), 
    cli.setVerboseName("不检测的路径"), 
    cli.setCliGroup("高级（可选参数）"), 
)

cli.check()

yakit.AutoInitYakit()

isCookieMode = mode.Contains("Cookie")
isHeaderMode = mode.Contains("Header")

once = sync.NewOnce()

mirrorHTTPFlow = (https, url, req, rsp, body) => {
    if !forceAdd {
        if isCookieMode {
            if poc.GetHTTPPacketCookie(req, key) == "" {
                return
            }
        } elif isHeaderMode {
            if poc.GetHTTPPacketHeader(req, key) == "" {
                return
            }
        }
    }
    

    skipped = false
    host, _, _ = str.ParseStringToHostPort(url)
    path = poc.GetHTTPRequestPath(req)

    if disableDomain != "" {
        rules = disableDomain.Split(",").Map(i => i.Trim())
        skipped = str.MatchAnyOfGlob(host, rules...)
    }
    

    if !skipped && disablePath != "" {
        skipped = str.MatchAnyOfGlob(path, disablePath.Split(",").Map(i => i.Trim())...)
    }
    

    if !skipped && enableDomain {
        skipped = !str.MatchAnyOfGlob(host, enableDomain.Split(",").Map(i => i.Trim())...)
    }
    

    if !skipped && enablePath {
        skipped = !str.MatchAnyOfGlob(path, enablePath.Split(",").Map(i => i.Trim())...)
    }
    

    if skipped {
        return
    }
    

    replace = (origin, newValue) => {
        if isCookieMode {
            if newValue == "" {
                return poc.DeleteHTTPPacketCookie(origin, key)
            }
            
            return poc.ReplaceHTTPPacketCookie(origin, key, newValue)
        } else {
            if newValue == "" {
                return poc.DeleteHTTPPacketHeader(origin, key)
            }
            
            return poc.ReplaceHTTPPacketHeader(origin, key, newValue)
        }
        
    }

    baseResponse = rsp
    if base != "" {
        newReqBase = replace(req, base)
        baseResponse, baseRequest, err = poc.HTTP(newReqBase, poc.https(https))
        if err != nil {
            yakit.Error(f"${url} 基准值(${base})测试失败")
            return
        }
        req = baseRequest
        rsp = baseResponse
        db.SaveHTTPFlowFromRawWithOption(url, baseRequest, baseResponse)
    } else {
        db.SaveHTTPFlowFromRawWithOption(url, req, rsp)
    }
    

    handleReq = (reqBytes, newValue) => {
        poc.HTTP(
            reqBytes, 
            poc.https(https), 
            poc.saveHandler(response => {
                sim := str.CalcSimilarity(baseResponse, response.RawPacket)
                if sim > 0.95 {
                    response.Red()
                } elif sim <= 0.4 {
                    response.Green()
                } else {
                    response.Grey()
                }
                
                showSim = "%.2f" % (sim * 100.0)
                tag = f"相似：${showSim}% 值: ${newValue}"
                if newValue == "" {
                    tag = f"相似：${showSim}% 移除 ${isCookieMode? f`Cookie[${key}]`:f`Header[${key}]`}"
                }
                
                response.AddTag(tag)
            }), 
        )
    }

    for i in str.ParseStringToLines(value) {
        reqBytes = replace(req, i)
        handleReq(reqBytes, i)
    }
    
    emptyReq = replace(req, "")
    handleReq(emptyReq, "")
}