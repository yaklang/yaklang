yakit.AutoInitYakit()


// 检测是否是JavaScript文件
isJavaScript = rsp => {
    if poc.GetHTTPPacketContentType(rsp).Contains("javascript") {
        return true
    }
    return false
}

exprInfo = fuzz.FuzzCalcExpr()
expr = exprInfo.expr
token = exprInfo.result
basicItem = expr
basicItem = `md5(%v)` % expr
token = codec.Md5(exprInfo.result)
yakit.Info("USE UnionItem: %v token: %v", basicItem, token)

unionPayloads = func() {
    var unionPayloads = []
    var results = []
    for i in 16 {
        unionPayloads.Push(basicItem)
        realPayload = "union select %v" % str.Join(unionPayloads, ",")
        results.Push(realPayload)
    }
    return results
}

stackedPayloads = func() {
    var payloads = []
    var results = []
    for i in 16 {
        payloads.Push(basicItem)
        realPayload = ";select %v" % str.Join(payloads, ",")
        results.Push(realPayload)
    }
    return results
}


sqlBuildPrefix = func(value) {
    pureInt = str.IsDigit(value)

    wideByte = string([uint8(randn(129, 254))])
    prefixs = []

    valueList = [value]
    boundaryList = [" ",")","))"]

    formatString = "%s"
    if !pureInt {
        formatString = formatString + wideByte + "'"
        valueList = append(valueList, randstr(10))
    }
    formatString = formatString + "%s and 1=0 "


    for v  in valueList {
        for b in boundaryList {
            prefix = sprintf(formatString,v,b)
            prefixs.Push(prefix)
        }
    }
    return prefixs
}

generatePayloads = func(pathprefix,pathPart){
    payloads = []
    suffix = [" -- ", " # "]
    prefix = sqlBuildPrefix(pathPart)
    //Build Union Injection Payload
    unionPayloads= unionPayloads()
    check = i => func{
        return str.Contains(i, token)
    }
    for p in prefix {
        for s in suffix {
            for unionPayload in unionPayloads {
                finPayload = pathprefix  + unionPayload + s
                payloads = append(payloads,{"payload":finPayload,"check":check} )
            }
        }
    }
    //Build Stacked Injection Payload
    stackedPayloads  = stackedPayloads()

    for p in prefix {
        for s in suffix {
            for stackedPayload in stackedPayloads {
                finPayload =pathprefix+ p + stackedPayload  + s
                payloads = append(payloads,{"payload":finPayload,"check":check} )
            }
        }
    }
    return payloads
}

generatePathPayloads = func(path){
    pathParts = str.Split(path, "/")
    if len(pathParts) == 0 {
        return []
    }
    // only fuzz the last part
    if len(pathParts) == 1 {
        return generatePayloads("",path)
    }
    pathPrefix = str.Join(pathParts[:len(pathParts)-1], "/")+"/"
    return generatePayloads(pathPrefix,pathParts[len(pathParts)-1])
}

sqlInjectionChecking = func(https, request) {
    freq = fuzz.HTTPRequest(request, fuzz.https(https))~
    url = str.ExtractURLFromHTTPRequestRaw(request, https)~.String()
    yakit.Info("准备对 %v 进行 SQL 注入检查", url)
    info = i => {
        yakit.Info("检测URL: %v - %v", url, i)
    }
    path = freq.GetPath()
    payloads = generatePathPayloads(path)
    for p in payloads{
       rsp ,err = freq.FuzzPath(p.payload).ExecFirst()
        if err != nil {
            yakit.Error("SQL注入检测失败，Payload:%s,Err:%s ",p.payload,err)
            continue
        }
        if p.check(rsp.ResponseRaw){
            yakit.Info("检测成功！payload: %s", p.payload)
            risk.NewRisk(url,
            risk.type("sqlinjection"),
            risk.title(f"SQL Injection-Dangerous Restful Path: ${url}"),
            risk.titleVerbose(f"SQL注入-Restful风格Path参数注入检测:${url}"),
            risk.payload(p.payload),
            risk.request(rsp.RequestRaw),
            risk.response(rsp.ResponseRaw),
            risk.details(f`Path ${path},存在SQL注入`),
            risk.severity("high"),
            risk.solution("使用参数化查询,使用 ORM（对象关系映射）框架,进行输入验证和过滤,代码遵循最小权限原则"),
            risk.description("HTTP Path SQL注入检测会对RESTful API风格的动态路径API最后一位路径作为参数进行检测")
            )
            return
            }
    }

}

# mirrorNewWebsitePath 每新出现一个网站路径，关于这个网站路径的第一个请求，将会在这里被传入回调
mirrorNewWebsitePath = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    if isJavaScript(rsp) { return }
    sqlInjectionChecking(isHttps, req)
}