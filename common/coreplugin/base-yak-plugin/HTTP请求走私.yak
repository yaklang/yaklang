templatePacket = "GET / HTTP/1.1\r\n" +
"Host: REPLACEME_HOST\r\n" +
"Content-Length: REPLACEME_PACKET_LENGTH\r\n" +
"Transfer-Encoding: chunked\r\n\r\n" +
x`1{{hexd(0d0a)}}a{{hexd(0d0a)}}0{{hexd(0d0a)}}{{hexd(0d0a)}}`[0]

standardPacket = "GET / HTTP/1.1\r\nHost: REPLACEME_HOST\r\nTransfer-Encoding: chunked\r\n\r\n1\r\na\r\n0\r\n\r\n"

vulInfo = `
HTTP Pipeline 是一种技术，其中多个HTTP请求被发送到服务器而无需等待每个响应。这是通过将请求放入一个队列或“管道”中来实现的，这样就可以同时处理多个请求。

本插件通过同时发送包含第二个请求的 Content-Length 和 Transfer-Encoding: chunked 来测试服务器（CDN）对畸形请求的兼容情况。

1. 如果服务器以 Content-Length 为首选，将会把畸形请求理解为只有一个 HTTP 请求；
2. 如果服务器以 Transfer-Encoding 为首选，将会把请求分割为两个请求；

如果成功分割，用户将会看到两个响应信息，此时服务器发生了 Pipeline / Smuggle 疑似行为，虽不一定直接造成危害，但是可以进一步排查和检测

HTTP 请求走私（HTTP Request Smuggling, 简称 HRS）是一种利用 HTTP 协议设计缺陷或者服务器配置错误的攻击手段。此攻击手段主要是通过发送特制的 HTTP 请求，使得前端和后端服务器对 HTTP 请求边界的解析产生分歧，从而达到插入恶意 HTTP 请求的目的。

这种攻击方式可能会导致以下危害：

绕过安全防护：一些防火墙和入侵检测系统可能无法正确识别被走私的 HTTP 请求，从而使攻击者能够绕过这些防护措施。

进行缓存投毒：攻击者可以利用请求走私将恶意内容注入缓存服务器，使得其他用户访问时被提供恶意内容。

劫持用户会话：攻击者可以通过请求走私来劫持用户的会话，获取敏感信息，甚至以用户的身份进行操作。

拒绝服务攻击：攻击者可以通过发送大量的走私请求，导致服务器资源耗尽，从而实施拒绝服务攻击。

HTTP 请求走私攻击的防护主要依赖于正确配置和更新 HTTP 服务器、代理服务器和负载均衡器，确保它们能够一致地解析 HTTP 请求。此外，定期进行安全审计和使用最新的安全防护软件也可以帮助防止此类攻击。`

solution = `
1. 正确配置和更新HTTP服务器、代理服务器和负载均衡器：这是防止HTTP请求走私攻击的首要步骤。确保这些组件能一致地解析HTTP请求，可以避免出现对请求边界解析的分歧，从而阻止攻击者插入恶意请求。

2. 禁用或限制HTTP pipeline 请求：由于HTTP pipeline请求可以让攻击者同时发送多个请求，因此禁用或限制HTTP pipeline请求是一种有效的防御手段。`

buildSmugglePacket = (host, newPacket) => {
    packetLen = len(newPacket)
    packetLen += 11
    result = templatePacket.Replace(`REPLACEME_HOST`, host).Replace(`REPLACEME_PACKET_LENGTH`, f`${packetLen}`)
    return result + string(newPacket)
}

# mirrorNewWebsite 每新出现一个网站，这个网站的第一个请求，将会在这里被调用！
mirrorNewWebsite = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    host := "Host:" in req ? poc.GetHTTPPacketHeader(req, "Host") : poc.GetHTTPPacketHeader(req, "host")
    token404path = str.RandStr(48)
    req = poc.ReplaceHTTPPacketPath(req, token404path)
    payload = buildSmugglePacket(host, req)
    println(payload)

    originResponse, req = poc.HTTP(standardPacket.Replace("REPLACEME_HOST", host), poc.https(isHttps))~
    standardStatusCode = poc.GetStatusCodeFromResponse(originResponse)
    if standardStatusCode <= 0 {
        standardStatusCode = 200
    }

    rsp, _ = poc.HTTPEx(payload, poc.https(isHttps), poc.noFixContentLength(true))~
    if rsp.MultiResponse {
        firstResponse = rsp.MultiResponseInstances[0]
        if firstResponse.StatusCode == 400 {
            // Bad Request is not right
            return
        }

        firstPass = false
        if firstResponse.StatusCode == standardStatusCode {
            firstPass = true

        }

        if !firstPass {
            return
        }
        secondResponse = rsp.MultiResponseInstances[1]
        rawResp := http.dump(secondResponse)~
        if secondResponse.StatusCode == 404 || str.MatchAnyOfSubString("404", "Not Found", "not found", "notfound", "不存在", "丢失"){
            risk.NewRisk(
                url,
                risk.title(f"Maybe HTTP Request Smuggle/ErrPipeline Behavior Detected: ${host}"),
                risk.titleVerbose(f"疑似HTTP请求走私或错误配置Pipeline：${host}"),
                risk.request(payload),
                risk.response(rsp.RawPacket),
                risk.severity("info"),
                risk.type("http request smuggle/pipeline"),
                risk.typeVerbose("HTTP请求走私或畸形解析"),
                risk.description(vulInfo),
                risk.solution(solution),
            )
        }
    }
}