yakit.AutoInitYakit()

//开始替换内容标志recognition_patten
//待替换内容，勿动！
recognition_patten=cli.StringSlice("recognition_patten", cli.setVerboseName("识别模式"),cli.setMultipleSelect(false),cli.setSelectOption("字典模式", "1"),cli.setSelectOption("机器学习模式", "2"),cli.setSelectOption("字典模式优先-机器学习辅助", "3"),cli.setSelectOption("字典模式-机器学习并行", "4"),cli.setSelectOption("机器学习优先-字典模式辅助", "5"),cli.setDefault("1"),cli.setHelp("检测识别模式"),cli.setCliGroup("插件额外参数"))
//结束替换内容标志recognition_patten

//开始替换内容标志task_type
//待替换内容，勿动！
task_type=cli.StringSlice("task_type", cli.setVerboseName("任务类型"),cli.setMultipleSelect(false),cli.setSelectOption("即时", "即时"),cli.setDefault("即时"),cli.setHelp("任务类型，mitm都为即时任务"),cli.setCliGroup("插件额外参数"))
//结束替换内容标志task_type

// 定义全局变量
recognition_patten_dic={
    "1":"字典模式",
    "2":"机器学习模式",
    "3":"字典模式优先-机器学习辅助",
    "4":"字典模式-机器学习并行",
    "5":"机器学习优先-字典模式辅助",
}


cli.check()


// 定义用于打印的 base_info 变量
base_info_script_name="被动未授权服务检测"
base_info_task_creater=""
base_info_task_type=task_type[0]
base_info_detect_mode="mitm"
base_info_task_mode=recognition_patten_dic[recognition_patten[0]]
base_info_login=""
base_info_crediential=""
base_info_user_define_header=""
base_info_start_time=time.Now().String()
base_info_end_time=""


// 定义打印函数
base_info_output=func(){
    yakit_output(f"加载插件结束。配置的基本信息如下：任务名称为'${base_info_script_name}'、任务创建人为'${base_info_task_creater}'、任务类型为'${base_info_task_type}任务'、检测模式为'${base_info_detect_mode}模式'、任务模式为'${base_info_task_mode}'、登录入口信息为'${base_info_login}'、凭证信息为'${base_info_crediential}'、自定义请求头信息为'${base_info_user_define_header}'、任务开始时间为 ${base_info_start_time}、结束时间为${base_info_end_time}。")
}
base_info_output()


POST="POST"
GET="GET"
URL="/"
UA="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0"
COOKIE=""
HEADER=""
VALUE=""
HTTP="http"
HTTPS="https"
OPEN="open"
CLOSE="close"
TCP="tcp"
UDP="udp"

solution="以下是一些防止未授权访问漏洞的常见解决方案：\n1.定期更新和补丁管理：及时更新软件、系统和网络设备的补丁和安全更新，以修复已知漏洞，减少漏洞的利用可能性。\n2.网络安全监控：实施网络安全监控和入侵检测系统，及时发现异常行为和潜在攻击，以便及时采取应对措施。\n3.强化访问控制：实施严格的访问控制策略，限制用户和系统的访问权限，避免未经授权的访问。\n4.加强身份验证：采用多因素身份验证，强化用户身份验证过程，防止攻击者利用未授权访问漏洞绕过身份验证。\n5.安全审计和漏洞管理：定期进行安全审计和漏洞扫描，发现和修复系统中存在的潜在漏洞，减少漏洞的利用风险"
description="未授权访问漏洞是指存在于软件、系统或网络设备中的安全漏洞，攻击者可以利用这些漏洞绕过身份验证机制，获取未经授权的访问权限"

risk_output_dic,detect_output_dic,flow_total={},{},-1






mitm_risk_output=func(url,req,rsp,vul_type,vul_name,vul_severity,param,payload,payload_success_flag,pocname){

    // 计算url和string后的body md5进行去重
    if task_type[0]=="即时" || task_type[0]=="定时" {
        // 计算url和string后的body md5进行去重
        header_md5_check,body_md5_check=poc.Split(req)
        url_body_hash=codec.Md5(url+string(body_md5_check))
        if url_body_hash in risk_output_dic{
            //该条流已经告警输出，不再进行告警
            return
        }else{
            //记录到告警去重字典中
            risk_output_dic[url_body_hash]=1
        }

        //记录到检测去重字典中,借助库函数，拼接root_url和path
        detect_root_url=str.ParseStringUrlToWebsiteRootPath(url)
        detect_url_Instance,err=str.ParseStringUrlToUrlInstance(url)
        if err!=nil{
            die(err)
        }
        detect_path=detect_url_Instance.Path
        detect_url_path_hash=codec.Md5(detect_root_url+detect_path)
        if detect_url_path_hash in detect_output_dic{
            //该条流已经检测，后续 mirrorFilteredHTTPFlow 不再进行检测
        }else{
            //记录到检测去重字典中
            detect_output_dic[detect_url_path_hash]=1
        }
    }


    risk.NewRisk(
        url,
        risk.title(f"发现 ${url} 中存在 ${vul_name} 漏洞"),
        risk.type(vul_type),
        risk.severity(vul_severity),
        risk.request(string(req)),
        risk.response(string(rsp)),
        risk.parameter(param),
        risk.payload(payload),
        risk.solution(solution),
        risk.description(description),
        risk.details({
            "location":url,
            "pocname":pocname,
            "payload_success_flag":payload_success_flag,
            "recognition_patten":recognition_patten_dic[recognition_patten[0]]
        })
        )
}


unauth_service_dic={
    //http型
    "activqmq":{
        "is_selected":true,
        "port_state":CLOSE,
        "protocol":HTTP,
        "port":"8161",
        "method":GET,
        "url":"/admin/",  //http://47.101.39.254:8161/admin/
        "ua":UA,
        "unauth_flag":["ActiveMQ Console","Welcome"]
    },
    "nacos":{
        "is_selected":true,
        "port_state":CLOSE,
        "protocol":HTTP,
        "port":"8848",
        "method":GET,
        "url":"/nacos/v1/auth/users?pageNo=1&pageSize=9", //http://nacos.kejishu.space/nacos/#/login
        "ua":UA,
        "unauth_flag":["totalCount"]
    },
    "zabbix":{
        "is_selected":true,
        "port_state":CLOSE,
        "protocol":HTTP,
        "port":"2080",
        "method":GET,
        "url":"/zabbix.php?action=dashboard.list",  //http://179.109.58.28:2080/zabbix.php?action=dashboard.list
        "ua":UA,
        "payload":nil,
        "unauth_flag":["Sign out","Dashboards"]
    },
    "docker":{
        "is_selected":true,
        "port_state":CLOSE,
        "protocol":HTTP,
        "port":"2375",
        "method":GET,
        "url":"/version",   //http://35.180.45.128:2375/version
        "ua":UA,
        "unauth_flag":["Version:","Components","ApiVersion"]
    },
    "CouchDB":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":"5984",
            "method":GET,
            "url":"/_config",
            "ua":UA,
            "unauth_flag":["httpd_design_handlers","_info"]
    },
    "Druid":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":nil,
            "method":GET,
            "url":"/druid/index.php", //http://43.130.61.224:8088/druid/index.html
            "ua":UA,
            "unauth_flag":["Stat Index"]
    },
    "Elasticsearch":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":"9200",
            "method":GET,
            "url":"/", //http://34.244.87.58:9200/_rvier/_search
            "ua":UA,
            "unauth_flag":["You Know, for Search"]
    },
    "JBoss":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":nil,
            "method":GET,
            "url":"/jmx-console",
            "ua":UA,
            "unauth_flag":["JMX Agent View"]
    },
    "Jenkins":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":nil,
            "method":GET,
            "url":"/",
            "ua":UA,
            "unauth_flag":["Dashboard"]
    },
    "Jupyter Notebook":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":nil,
            "method":GET,
            "url":"/",
            "ua":UA,
            "unauth_flag":["Jupyter"]
    },
    "Kubernetes Api Server":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":"8080",
            "method":GET,
            "url":"/",
            "ua":UA,
            "unauth_flag":["paths"]
    },
    "Solr":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":"8983",
            "method":GET,
            "url":"/solr/#/", //http://45.79.137.215:8983/solr/#/
            "ua":UA,
            "unauth_flag":["Dashboard"]
    },
    "Spring Boot Actuator":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":"8983",
            "method":GET,
            "url":"/actuator/", //http://217.76.59.226:8889/actuator/
            "ua":UA,
            "unauth_flag":["_links"]
    },
    "Apache Spark":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":nil,
            "method":GET,
            "url":"/",
            "ua":UA,
            "unauth_flag":["Spark Master at","Spark Worker at"]
    },
    //待测试
    // "Weblogic":{
    //         "is_selected":true,
    //         "port_state":CLOSE,
    //         "protocol":HTTP,
    //         "port":"7001",
    //         "method":GET,
    //         "url":"/console/css/%252e%252e%252fconsole.portal",
    //         "ua":UA,
    //         "unauth_flag":["WebLogic Server 管理控制台"]
    // },
    "Zabbix":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":nil,
            "method":GET,
            "url":"/zabbix.php?action=dashboard.view&ddreset=1",   //http://167.235.3.98/zabbix.php?action=dashboard.view&ddreset=1
            "ua":UA,
            "unauth_flag":["Dashboard"]
    },
    "Kibana":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":"5601",
            "method":GET,
            "url":"/app/kibana#/",  //http://121.199.55.88:5601/app/kibana#
            "ua":UA,
            "unauth_flag":["Kibana"]
    },
    "HadoopYARN":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":nil,
            "method":GET,
            "url":"/",
            "ua":UA,
            "unauth_flag":["All Applications","hadoop"]
    },
    //待测试 304跳转发包需设置重定向
    // "swaggerui":{
    //         "is_selected":true,
    //         "port_state":CLOSE,
    //         "protocol":HTTP,
    //         "port":nil,
    //         "method":GET,
    //         "url":"/v3/api-docs",   //http://158.101.191.70:8081/v3/api-docs
    //         "ua":UA,
    //         "unauth_flag":["info","paths"]
    // },
    "ThinkAdmin":{
            "is_selected":true,
            "port_state":CLOSE,
            "protocol":HTTP,
            "port":nil,
            "method":GET,
            "url":"/admin/login.html?s=admin/api.Update/version",   //https://159.75.161.222/admin/login.html?s=admin/api.Update/version
            "ua":UA,
            "unauth_flag":["info","code"]
    },
    //待测试
    // "宝塔phpmyadmin":{  //待测试
    //         "is_selected":true,
    //         "port_state":CLOSE,
    //         "protocol":HTTP,
    //         "port":nil,
    //         "method":GET,
    //         "url":"/pma",
    //         "ua":UA,
    //         "unauth_flag":["phpMyAdmin"]
    // },
    //其他类型
    // "redis":{
    //     "is_selected":true,
    //     "port_state":CLOSE,
    //     "protocol":"redis",
    //     "port":"6379",
    //     "method":nil,
    //     "url":nil,  //http://106.15.46.59
    //     "ua":nil,
    //     "payload":"info\r\n",
    //     "unauth_flag":["redis_version"]
    // },
    //待测试  传输层协议udp 抓包检测是tcp
    // "Memcached":{
    //     "is_selected":true,
    //     "port_state":CLOSE,
    //     "protocol":"MEMCACHE",
    //     "port":"11211",
    //     "method":nil,
    //     "url":nil,  //http://45.80.70.93:11211
    //     "ua":nil,
    //     "payload":"stat",
    //     "unauth_flag":["STAT pid"]
    // },
    //待测试
    // "Dubbo":{
    //     "is_selected":true,
    //     "port_state":CLOSE,
    //     "protocol":"",
    //     "port":"28096",
    //     "method":nil,
    //     "url":nil,  //http://106.15.46.59
    //     "ua":nil,
    //     "payload":"ls\r\n",
    //     "unauth_flag":["Use default service"]
    // },
    // "rsync":{
    //     "is_selected":true,
    //     "port_state":CLOSE,
    //     "protocol":"rsync",
    //     "port":"873",
    //     "method":nil,
    //     "url":nil,  //http://1.14.253.74:873
    //     "ua":nil,
    //     "payload":nil,
    //     "unauth_flag":["hooks"]
    // },
}



# mirrorNewWebsite 每新出现一个网站，这个网站的第一个请求，将会在这里被调用！
mirrorNewWebsite = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    // 手动对爬虫预检测流量进行过滤，yakit加载mitm插件时，建议注释，动态爬虫形式调用无需注释（当爬虫启用crawlerx.check()需要注释）
    // if flow_total==-1{
    //     flow_total=flow_total+1
    //     return
    // }

    detect_root_url=str.ParseStringUrlToWebsiteRootPath(url)
    detect_url_Instance,err=str.ParseStringUrlToUrlInstance(url)
    if err!=nil{
        yakit_output("url 解析错误，脚本即将退出")
        die(err)
    }

    detect_path=detect_url_Instance.Path
    detect_url_path_hash=codec.Md5(detect_root_url+detect_path)
    // 考虑去重策略 即时/定时 任务去重（因为任务本身也只跑一次），周期任务不去重
    if task_type[0]=="即时" || task_type[0]=="定时"{
        if detect_url_path_hash in detect_output_dic{
            //该条流已经检测并告警，不再进行检测
            yakit_output("detect_output_dic 去重")
            return
        }

        // 计算url和string后的body md5进行去重
        header_md5_check,body_md5_check=poc.Split(req)
        url_body_hash=codec.Md5(url+string(body_md5_check))
        if url_body_hash in risk_output_dic{
            //该条流已经告警输出，不再进行检测
            yakit_output("risk_output_dic 去重")
            return
        }
    }

    yakit_output(f"开始对 ${url} 的被动未授权服务检测")
    freq=fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    for service_name in unauth_service_dic{
        fuzz_method,fuzz_url,fuzz_flag=unauth_service_dic[service_name]["method"],unauth_service_dic[service_name]["url"],unauth_service_dic[service_name]["unauth_flag"]
        result=freq.FuzzMethod(fuzz_method).FuzzPath(fuzz_url).ExecFirst()~
        if  str.MatchAnyOfSubString(result.ResponseRaw, "HTTP/1.1 200 OK")&&str.MatchAnyOfRegexp(result.ResponseRaw,fuzz_flag...){
            mitm_risk_output(result.Url, string(result.RequestRaw), string(result.ResponseRaw), "逻辑漏洞", f"${service_name} 未授权访问", "high", "",fuzz_url, "", "mitm_unaccess_check")
        }
    }
    yakit_output(f"完成对 ${url} 的被动未授权服务检测")
}
