# mitm plugin template
availableSSRFParamNames = [
    "share", "wap", "url", "link", "uri",
    "src", "source", "redirect", "redirect_to",
    "redirect*", "sourceurl", "u", "3g",
    "web", "sourceurl", "sourceuri", "domain", 
    "image", "imageurl",
]

NewThreadPool = func(size){
    inputChan = make(chan var)
    var consumer
    consumerWG = sync.NewWaitGroup()
    productorWG = sync.NewWaitGroup()
    threadPool = {
        "consumer":f =>{
            consumer = (id,data)=>{
                try {
                    f(id, data)
                } catch err {
                    log.warn("run consumer error: %v"%err)
                }
            }
            return threadPool
        },
        "productor":f=>{
            productorWG.Add(1)
            go fn{
                try {
                    f(inputChan)
                } catch err {
                    log.warn("run productor error: %v"%err)
                }
                productorWG.Done()
            }
            return threadPool
        },
        "start":()=>{
            for id = range size{
                consumerWG.Add(1)
                go func(id){
                    for data in inputChan{
                        if consumer{
                            consumer(id,data)
                        }else{
                            log.warn("not set consumer for data: %v"%data)
                        }
                    }
                    consumerWG.Done()
                }(id)
            }
            return threadPool
        },
        "wait":()=>{
            productorWG.Wait()
            close(inputChan)
            consumerWG.Wait()
        }
    }
    return threadPool
}

description = `
服务器端请求伪造（Server Side Request Forgery，简称SSRF）是一种网络安全漏洞，由攻击者构造并促使服务器端发起请求。这种漏洞的存在可能使攻击者能够控制服务器以发起网络请求，从而实现对未经授权资源的访问。

漏洞利用：在存在SSRF漏洞的环境中，攻击者可以在服务器的上下文中进行网络交互。这种交互可能会导致攻击者访问到后端的系统，进而获取敏感信息，或者执行其他可能造成损害的操作。

潜在风险：SSRF漏洞的存在不仅可能导致未经授权的资源访问，还可能使攻击者能够进行端口扫描，读取本地文件，甚至执行命令等行为。这些行为都可能对服务器的安全性和稳定性构成威胁。

防护措施：为预防SSRF漏洞，需要采取一系列的安全措施，例如限制服务器对外部网络的访问，对用户输入进行严格的验证和过滤，以及及时更新和修复已知的安全漏洞等。
`
solution = `
1. 尽量避免服务器端发起不必要的外部HTTP请求：如果不需要，尽量避免从服务器端发起外部HTTP请求。如果必须要发起，那么需要进行严格的输入验证和管理。

2. 限制出站请求：可以在服务器级别限制出站请求的目标和端口，禁止对内网或者敏感端口的访问。

3. 使用安全的编程实践：对于所有用户生成的输入，都应进行严格的验证和清理。特别是那些可能会用于网络请求的输入，更应该进行严格的白名单验证。

4. 升级和打补丁：定期升级和打补丁可以修复已知的SSRF漏洞，防止攻击者利用这些漏洞进行攻击。

5. 使用Web应用防火墙（WAF）：WAF可以帮助识别和阻止SSRF攻击，增加了一个额外的防御层。
`

# mirrorNewWebsitePathParams 每新出现一个网站路径且带有一些参数，参数通过常见位置和参数名去重，去重的第一个 HTTPFlow 在这里被调用
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    paramName = ""
    pool = NewThreadPool(10)
    pool.consumer((id,data)=>{
        param = data
        paramName = param.Name()
        yakit_output("SSRF基础测试: 参数名[%v]" % [paramName])
        domain,token,err = risk.NewDNSLogDomain()
        if err {
            yakit_output("获取dnslog失败: ^v，跳过对参数 [%s] 的检测" % [err,paramName])
            return
        }
        payload = "http://%s"%domain
        result, err = param.Fuzz(payload).ExecFirst()
        if err != nil {
            yakit_output("SSRF 发送请求失败")
            return
        }
        if result.Error {
            yakit_output("请求[%v]失败: %v" % [result.Url, result.Error])
        } else {
            target = str.ParseStringUrlToWebsiteRootPath(result.Url)
            events, _ = risk.CheckDNSLogByToken(token)
            if len(events) > 0 {
                dnslogRiskTitle = "目标路径 %s 的 %s 参数收到 Dnslog 回显，可能存在SSRF漏洞" % [result.Url,paramName]
                yakit_output(dnslogRiskTitle)
                haveHttpReverse = false
                middleReason = "未收到HTTP反连请求"
                httpReverseToken = risk.NewLocalReverseHTTPUrl()
                if httpReverseToken == ""{
                    middleReason = "未配置 Yak Bridge 作为公网映射，无法获取带 Token 的 URL Callback"
                }else{
                    result, err = param.Fuzz(payload).ExecFirst()
                    if err != nil {
                        yakit_output("SSRF 发送请求失败")
                        middleReason = "发送HTTP反连测试请求失败"
                    }else{
                        if result.Error {
                            yakit_output("请求[%v]失败: %v" % [result.Url, result.Error])
                            middleReason = "发送HTTP反连测试请求失败"
                        }else{
                            haveHttpReverse = risk.HaveReverseRisk(httpReverseToken)
                        }
                    }
                }
                if haveHttpReverse{
                    title = "目标路径 %s 的 %s 参数收到 HTTP 反连，存在 SSRF 漏洞" % [result.Url,paramName]
                    yakit_output(title)
                    risk.NewRisk(
                        result.Url,
                        risk.titleVerbose("目标 %s 存在SSRF漏洞" % target),
                        risk.title(title),
                        risk.details({
                            "request": string(result.RequestRaw),
                            "response": string(result.ResponseRaw),
                            "url": result.Url,
                        }),
                        risk.level("critical"),
                        risk.payload(payload),
                        risk.parameter(paramName),
                        risk.token(token),
                        risk.description(description), 
                        risk.solution(solution),
                    )
                }else{
                    risk.NewRisk(
                        result.Url,
                        risk.titleVerbose("目标 %s 可能存在SSRF漏洞" % target),
                        risk.details({
                            "request": string(result.RequestRaw),
                            "response": string(result.ResponseRaw),
                            "url": result.Url,
                        }),
                        risk.level("middle"),
                        risk.title("收到Dnslog回显，但未收到HTTP回显(原因是 `%s`)，可能存在SSRF漏洞" % middleReason),
                        risk.payload(payload),
                        risk.parameter(paramName),
                        risk.token(token),
                        risk.description(description), 
                        risk.solution(solution), 
                    )
                }
            }
        }
    }).start()
    var freq
    try {
        freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    } catch err {
        yakit.Error("构造Fuzz Request失败: %v" % err)
        return
    }
    pool.productor(c=>{
        for index, param = range freq.GetCommonParams() {
            originValue = param.Value()
            if typeof(originValue).Name() == typeof([]).Name() && originValue[0] != undefined{
                originValue = originValue[0]
            }
            originValue,err = codec.DecodeUrl(sprint(originValue))
            if err{
                log.Error("codec DecodeUrl error:", err)
                continue
            }
            if str.MatchAllOfRegexp(originValue,"^\\w+://")  || str.StringSliceContains(availableSSRFParamNames, str.ToLower(param.Name())) {
                c<-param
            }
        }
    })
    pool.wait()
}
