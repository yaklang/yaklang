solution="为了防止验证码绕过，可以采取以下措施：\n1.使用复杂验证码：使用难以被OCR识别的复杂验证码，比如扭曲、干扰线等。\n2.动态验证码：使用动态生成的验证码，每次页面加载时都生成新的验证码。\n3.多因素验证：结合其他因素进行验证，比如IP地址、用户行为分析等。\n4.限制尝试次数：限制验证码验证的尝试次数，防止暴力破解。\n5.监控和分析：监控用户行为，检测异常操作，及时发现验证码绕过行为。\n6.更新验证码逻辑：定期更新验证码生成和验证逻辑，防止已知的验证码绕过技术。"
description="验证码绕过是指恶意用户或者自动化程序通过各种方式绕过验证码验证，从而绕过网站的安全措施。验证码通常用于防止恶意机器人或者自动化程序对网站进行恶意操作，比如暴力破解密码、恶意注册账号、发起DDoS攻击等。"


white_path_list=cli.LineDict("white_path_list", cli.setDefault("access\naccount\nadmit\nadmission\nauth\nconnect\ncredential\ndenglu\nenroll\nenter\nentry\nidenti\njoin\nlogin\nlogon\nportal\nsecure\nsession\nsignin\nstart\nvalidate\nverification\nverify"),cli.setCliGroup("插件额外参数"),cli.setVerboseName("登录 url 标识"))
verification_code_list=cli.LineDict("verification_code_list", cli.setDefault("check\ncode\ndata\nidentifying\nkey\nmessage\nmsg\nsms\nverification\nverify\nyanzhengma\nyzm\n验证码"),cli.setCliGroup("插件额外参数"),cli.setVerboseName("验证码参数"),cli.setHelp("会检测请求包中是否含有验证码参数"))
sim_value=cli.Float("sim_value", cli.setDefault("0.9"),cli.setVerboseName("相似度阈值"),cli.setCliGroup("插件额外参数"),cli.setHelp("大于等于该阈值告警"))

//开始替换内容标志recognition_patten
//待替换内容，勿动！
recognition_patten=cli.StringSlice("recognition_patten", cli.setVerboseName("识别模式"),cli.setMultipleSelect(false),cli.setSelectOption("字典模式", "1"),cli.setSelectOption("机器学习模式", "2"),cli.setSelectOption("字典模式优先-机器学习辅助", "3"),cli.setSelectOption("字典模式-机器学习并行", "4"),cli.setSelectOption("机器学习优先-字典模式辅助", "5"),cli.setDefault("1"),cli.setHelp("检测识别模式"),cli.setCliGroup("插件额外参数"))
//结束替换内容标志recognition_patten

//开始替换内容标志task_type
//待替换内容，勿动！
task_type=cli.StringSlice("task_type", cli.setVerboseName("任务类型"),cli.setMultipleSelect(false),cli.setSelectOption("即时", "即时"),cli.setDefault("即时"),cli.setHelp("任务类型，mitm都为即时任务"),cli.setCliGroup("插件额外参数"))
//结束替换内容标志task_type


cli.check()

risk_output_dic,detect_output_dic,flow_total={},{},-1
bad_end_str_list=[
".jpg", ".png", ".gif", ".css", ".js", ".pdf", ".mp3", ".mp4", ".avi", ".map", ".svg", ".ico", ".woff", ".woff2", ".ttf"
]
// 定义全局变量
recognition_patten_dic={
    "1":"字典模式",
    "2":"机器学习模式",
    "3":"字典模式优先-机器学习辅助",
    "4":"字典模式-机器学习并行",
    "5":"机器学习优先-字典模式辅助",
}


// 定义用于打印的 base_info 变量
base_info_script_name="验证码可绕过检测"
base_info_task_creater=""
base_info_task_type=task_type[0]
base_info_detect_mode="mitm"
base_info_task_mode=recognition_patten_dic[recognition_patten[0]]
base_info_login=""
base_info_crediential=""
base_info_user_define_header=""
base_info_start_time=time.Now().String()
base_info_end_time=""


// 定义打印函数
base_info_output=func(){
    yakit_output(f"加载插件结束。配置的基本信息如下：任务名称为'${base_info_script_name}'、任务创建人为'${base_info_task_creater}'、任务类型为'${base_info_task_type}任务'、检测模式为'${base_info_detect_mode}模式'、任务模式为'${base_info_task_mode}'、登录入口信息为'${base_info_login}'、凭证信息为'${base_info_crediential}'、自定义请求头信息为'${base_info_user_define_header}'、任务开始时间为 ${base_info_start_time}、结束时间为${base_info_end_time}。")
}
base_info_output()

pre_check=func(req,rsp){
    http_req = poc.ParseBytesToHTTPRequest(req)~

    if http_req.Method!="GET" && http_req.Method!="POST" {
        return false
    }

    if str.MatchAnyOfSubString(http_req.URL.Path, bad_end_str_list...) {
        return false
    }

    http_rsp=poc.ParseBytesToHTTPResponse(rsp)~

    if str.MatchAnyOfRegexp(http_rsp.StatusCode, ["40\\d","50\\d"]...){
        return false
    }

    // http_rsp_header,http_rsp_body=poc.Split(rsp)
    // // 启用非json形式的检查
    // if not_json_check{
    //     return true
    // }

    // http_rsp_json_body=json.loads(string(http_rsp_body))
    // if http_rsp_json_body == {} {
    //     return false
    // }

    return true
}


compare_fuzz_rsp=func(http_rsp,http_fuzz_rsp){
    if http_rsp.StatusCode!=http_fuzz_rsp.StatusCode{
        yakit_output(f"原始请求响应状态码 ${http_rsp.StatusCode} 不同于模拟 fuzz 重放后的响应状态码 ${http_fuzz_rsp.StatusCode} ，跳过后续检测")
        return false
    }
    // dump(http_rsp.Header["Content-Type"][0])
    // dump(http_fuzz_rsp.Header["Content-Type"][0])

    if http_rsp.Header["Content-Type"]!=nil && http_fuzz_rsp.Header["Content-Type"]!=nil {
        http_rsp_content_type=http_rsp.Header["Content-Type"][0].ReplaceAll(" ","").Lower()
        http_fuzz_rsp_content_type=http_fuzz_rsp.Header["Content-Type"][0].ReplaceAll(" ","").Lower()

        // 针对text/html自动拼接charset=utf-8的处理
        if "text/html" in http_rsp_content_type && "text/html" in http_fuzz_rsp_content_type{
            return true
        }
        if http_rsp_content_type!=http_fuzz_rsp_content_type{
            yakit_output(f"原始请求响应 Content-Type ${http_rsp_content_type} 不同于模拟 fuzz 重放后的响应Content-Type ${http_fuzz_rsp_content_type} ，跳过后续检测")
            return false
        }
    }elif http_rsp.Header["Content-Type"]==nil && http_fuzz_rsp.Header["Content-Type"]==nil {

    }else{
        yakit_output(f"原始请求响应 Content-Type 不同于模拟 fuzz 重放后的响应Content-Type ，跳过后续检测")
        return false
    }
    return true
}


mitm_risk_output=func(url,req,rsp,vul_type,vul_name,vul_severity,payload,payload_success_flag,pocname){

    // 计算url和string后的body md5进行去重
    if task_type[0]=="即时" || task_type[0]=="定时" {
        // 计算url和string后的body md5进行去重
        header_md5_check,body_md5_check=poc.Split(req)
        url_body_hash=codec.Md5(url+string(body_md5_check))
        if url_body_hash in risk_output_dic{
            //该条流已经告警输出，不再进行告警
            return
        }else{
            //记录到告警去重字典中
            risk_output_dic[url_body_hash]=1
        }

        //记录到检测去重字典中,借助库函数，拼接root_url和path
        detect_root_url=str.ParseStringUrlToWebsiteRootPath(url)
        detect_url_Instance,err=str.ParseStringUrlToUrlInstance(url)
        if err!=nil{
            die(err)
        }
        detect_path=detect_url_Instance.Path
        detect_url_path_hash=codec.Md5(detect_root_url+detect_path)
        if detect_url_path_hash in detect_output_dic{
            //该条流已经检测，后续 mirrorFilteredHTTPFlow 不再进行检测
        }else{
            //记录到检测去重字典中
            detect_output_dic[detect_url_path_hash]=1
        }
    }
    risk.NewRisk(
        url,
        risk.title(f"发现 ${url} 中存在 ${vul_name} 漏洞"),
        risk.type(vul_type),
        risk.severity(vul_severity),
        risk.request(string(req)),
        risk.response(string(rsp)),
        risk.solution(solution),
        risk.description(description),
        risk.payload(payload),
        risk.details({
            "location":url,
            "pocname":pocname,
            "payload_success_flag":payload_success_flag,
            "recognition_patten":recognition_patten_dic[recognition_patten[0]]
        })
        )
}

// 验证码不正确的正则
verification_code_fail_list=[
    `(验证码(.*?)(错误|有误|失效|无效|不正确))|((错误|有误|失效|无效|不正确)的验证码)`,
    `(?i)(captcha (incorrect|error|invalid))|((incorrect|error|invalid) captcha)`
]


# mirrorFilteredHTTPFlow 劫持到的流量为 MITM 自动过滤出的可能和 "业务" 有关的流量，会自动过滤掉 js / css 等流量
mirrorFilteredHTTPFlow = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {

    // 手动对爬虫预检测流量进行过滤，yakit加载mitm插件时，建议注释，动态爬虫形式调用无需注释（当爬虫启用crawlerx.check()需要注释）
    // if flow_total==-1{
    //     flow_total=flow_total+1
    //     return
    // }

    detect_root_url=str.ParseStringUrlToWebsiteRootPath(url)
    detect_url_Instance,err=str.ParseStringUrlToUrlInstance(url)
    if err!=nil{
        yakit_output("url 解析错误，脚本即将退出")
        die(err)
    }

    detect_path=detect_url_Instance.Path
    detect_url_path_hash=codec.Md5(detect_root_url+detect_path)
    // 考虑去重策略 即时/定时 任务去重（因为任务本身也只跑一次），周期任务不去重
    if task_type[0]=="即时" || task_type[0]=="定时"{
        if detect_url_path_hash in detect_output_dic{
            //该条流已经检测并告警，不再进行检测
            yakit_output("detect_output_dic 去重")
            return
        }

        // 计算url和string后的body md5进行去重
        header_md5_check,body_md5_check=poc.Split(req)
        url_body_hash=codec.Md5(url+string(body_md5_check))
        if url_body_hash in risk_output_dic{
            //该条流已经告警输出，不再进行检测
            yakit_output("risk_output_dic 去重")
            return
        }
    }


    if !pre_check(req, rsp){
        return
    }


    // todo url path 白名单
    http_req = str.ParseBytesToHTTPRequest(req)~
    if !str.MatchAnyOfSubString(http_req.URL.Path, white_path_list...){
        return
    }
    yakit_output(f"在 ${url} 中检测到预设置的登录业务标识")

    //过滤原始验证码错误
    if str.MatchAnyOfRegexp(body, verification_code_fail_list...){
        yakit_output("验证码错误")
        return
    }

    freq=fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    params,verification_code_param=freq.GetCommonParams(),nil

    // 重新生成不含cookie参数/验证码参数的列表，同时校验是否含有验证码参数
    for param in params{
        if param.Position().StartsWith("cookie"){
            continue
        }elif param.Position()=="get-query" && str.MatchAnyOfSubString(param.Name(), verification_code_list...){
            verification_code_param=param
        }elif param.Position()=="post-query" && str.MatchAnyOfSubString(param.Name(), verification_code_list...){
            verification_code_param=param
        }elif param.Position()=="post-json" && str.MatchAnyOfSubString(param.Name(), verification_code_list...){
            verification_code_param=param
        }
    }

    if verification_code_param==nil{
        return
    }

    yakit_output(f"开始对 ${url} 的验证码可绕过检测")
    param_position,bypass_req,bypass_rsp=verification_code_param.Position(),nil,nil
    // get/post直接借用库函数，post-json手动处理
    switch param_position{
        case "get-query":
            bypass_rsp,bypass_req=poc.HTTP(req, poc.https(isHttps /*type: bool*/),poc.deleteQueryParam(verification_code_param.Name() /*type: string*/))~
        case "post-query":
            bypass_rsp,bypass_req=poc.HTTP(req, poc.https(isHttps /*type: bool*/),poc.deletePostParam(verification_code_param.Name() /*type: string*/))~
        case "post-json":
            // 单层json 字典方法移除
            req_header,req_body=poc.Split(req)
            body_obj=json.loads(req_body)
            body_obj.Remove(verification_code_param.Name())
            bypass_body=json.dumps(body_obj)
            bypass_rsp,bypass_req=poc.HTTP(req, poc.https(isHttps /*type: bool*/),poc.replaceBody(bypass_body /*type: []byte*/, false /*type: bool*/))~
    }


    http_rsp ,http_fuzz_rsp=poc.ParseBytesToHTTPResponse(rsp)~,poc.ParseBytesToHTTPResponse(bypass_rsp)~
    if !compare_fuzz_rsp(http_rsp,http_fuzz_rsp){
        return false
    }

    fuzz_rsp_header,fuzz_rsp_body=poc.Split(bypass_rsp)
    //过滤fuzz 验证码错误
    if str.MatchAnyOfRegexp(fuzz_rsp_body, verification_code_fail_list...){
        return
    }
    sim_res=str.CalcTextMaxSubStrStability(body,string(fuzz_rsp_body))~
    yakit_output(f"计算 删除验证码 重放前后的页面响应相似度为 ${sim_res}")

    if sim_res>sim_value{
        yakit_output(f"检测到 ${url} 中可能存在 验证码可绕过 漏洞")
        mitm_risk_output(url, string(bypass_req), string(bypass_rsp), "逻辑漏洞", "验证码可绕过", "middle", "", "", "mitm_verification_code_bypass_check")
        yakit_output(f"完成对 ${url} 的验证码可绕过检测")
        return
    }
    yakit_output(f"完成对 ${url} 的验证码可绕过检测")
}