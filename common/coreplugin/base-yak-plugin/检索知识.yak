yakit.AutoInitYakit()

# Input your code!

query := cli.String("query", cli.setVerboseName("查询问题"), cli.setRequired(true))

enhancePlan := cli.StringSlice(
    "enhancePlan",
    cli.setVerboseName("增强搜索方案"),
    cli.setSelectOption("假设回答", "hypothetical_answer"),
    cli.setSelectOption("假设并多次查询", "hypothetical_answer_with_split"),
    cli.setSelectOption("多次查询", "split_query"),
    cli.setSelectOption("泛化回答", "generalize_query"),
)
kbName := cli.String("kbName", cli.setVerboseName("知识库名"))
limit := cli.Int("limit", cli.setVerboseName("结果数量限制"), cli.setDefault(20))
concurrent := cli.Int("concurrent", cli.setVerboseName("并发数"), cli.setDefault(20))
score := cli.Float("score", cli.setVerboseName("结果分数限制"))
cli.check()

option := [rag.queryCtx(context.Background()), rag.queryLimit(limit), rag.queryConcurrent(concurrent), rag.queryStatus(yakit.StatusCard)]

if len(enhancePlan) > 0 {
    option = append(option, rag.queryEnhance(enhancePlan[0]))
}


if kbName != "" {
    option = append(option, rag.queryCollection(kbName))
}


if score > 0 {
    option = append(option, rag.queryScoreLimit(score))
}


middleResultTable := "中间检索结果（调试）"
finalResultTable := "最终检索结果（按分数排序）"
columnType := "类型"
columnContent := "内容"
columnScore := "分数"
columnQueryMethod := "查询方式"
columnSource := "来源"
columnTime := "时间"
columnQuery := "查询语句"

midResultOnce := sync.NewOnce()
addMidResultData = func(typeName, data, score, source, timeString, queryMethod, query) {
    midResultOnce.Do(() => {
        yakit.EnableTable(
            middleResultTable,
            [columnContent, columnQueryMethod, columnQuery, columnType, columnScore, columnSource, columnTime],
        )
    })

    yakit.TableData(
        middleResultTable,
        {columnType: typeName, columnContent: data, columnScore: score, columnSource: source, columnTime: timeString, columnQueryMethod: queryMethod, columnQuery: query},
    )
}

resultOnce := sync.NewOnce()
addResultData = func(typeName, data, score, source, timeString, queryMethod, query) {
    resultOnce.Do(() => {
        yakit.EnableTable(
            finalResultTable,
            [columnContent, columnQueryMethod, columnQuery, columnType, columnScore, columnSource, columnTime],
        )
    })

    yakit.TableData(
        finalResultTable,
        {columnType: typeName, columnContent: data, columnScore: score, columnSource: source, columnTime: timeString, columnQueryMethod: queryMethod, columnQuery: query},
    )
}

entityTableName = "知识实体列表"
entityTableOnce := sync.NewOnce()
addEntityData = func(uuid, entityName, entityType, description, ragContent) {
    entityTableOnce.Do(() => {
        yakit.EnableTable(
            entityTableName,
            ["UUID", "类型", "名称", "描述", "RAG内容"],
        )
    })

    yakit.TableData(
        entityTableName,
        {"UUID": id, "类型": entityType, "名称": entityName, "描述": description, "RAG内容": ragContent},
    )
}

for i in rag.Query(query, option...)~ {
    if i.Type == "message" {
        yakit.Info(i.Message)
        continue
    }


    if i.Type == "mid_result" {
        addMidResultData(
            i.Data.Type,
            string(i.Data.Content),
            "%.4f" % i.Score,
            i.Source,
            timestampToDatetime(i.Timestamp / 1000),
            i.QueryMethod,
            i.QueryOrigin,
        )
        continue
    }

    if i.Type == "entity" {
        addEntityData(i.Data.Uuid, i.Data.EntityName, i.Data.EntityType, i.Data.Description, string(i.Data.ToRAGContent()))
        continue
    }

    addResultData(
        i.Data.Type,
        string(i.Data.Content),
        "%.4f" % i.Score,
        i.Source,
        timestampToDatetime(i.Timestamp / 1000),
        i.QueryMethod,
        i.QueryOrigin,
    )
}