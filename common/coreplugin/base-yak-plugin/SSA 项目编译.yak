yakit.AutoInitYakit()

// {{ 必填项
info = cli.Json("info", 
    cli.setVerboseName("项目信息"),
    cli.setJsonSchema(<<<JSON
{
  "type": "object",
  "properties": {
    "programName": {
      "title": "项目名",
      "type": "string"
    },
    "language": {
      "title": "语言",
      "type": "string",
      "enum": [
        "Java",
        "PHP",
        "Yaklang",
        "Golang"
      ]
    },
    "kind": {
      "title": "项目类型",
      "type": "string",
      "enum": [
        "local",
        "compression",
        "jar",
        "git"
      ],
      "default": "local"
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "kind": {
            "const": "local"
          }
        }
      },
      "then": {
        "properties": {
          "local_file": {
            "title": "项目路径",
            "yakit_type": "folder",
            "type": "string"
          }
        },
        "required": [
          "local_file"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "compression"
          }
        }
      },
      "then": {
        "properties": {
          "local_file": {
            "title": "压缩包路径",
            "yakit_type": "file",
            "type": "string"
          }
        },
        "required": [
          "local_file"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "jar"
          }
        }
      },
      "then": {
        "properties": {
          "local_file": {
            "title": "Jar包路径",
            "yakit_type": "file",
            "type": "string"
          }
        },
        "required": [
          "local_file"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "git"
          }
        }
      },
      "then": {
        "properties": {
          "url": {
            "title": "远程项目URL",
            "type": "string"
          },
          "branch": {
            "title": "项目分支",
            "type": "string"
          },
          "auth": {
            "properties": {
              "auth": {
                "title": "认证方式",
                "type": "string",
                "enum": [
                  "none",
                  "password",
                  "ssh_key"
                ],
                "default": "none"
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {
                    "auth": {
                      "const": "password"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "user_name": {
                      "title": "用户名",
                      "type": "string"
                    },
                    "password": {
                      "title": "密码或AK",
                      "type": "string"
                    }
                  },
                  "required": [
                    "user_name",
                    "password"
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "auth": {
                      "const": "ssh_key"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "key_path": {
                      "title": "私钥地址",
                      "yakit_type": "file",
                      "type": "string"
                    },
                    "user_name": {
                      "title": "用户名",
                      "type": "string"
                    },
                    "password": {
                      "title": "密码",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key_path",
                    "user_name"
                  ]
                }
              }
            ]
          },
          "proxy": {
            "properties": {
              "proxy": {
                "title": "是否启用代理",
                "type": "boolean",
                "default": false
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {
                    "proxy": {
                      "const": true
                    }
                  }
                },
                "then": {
                  "properties": {
                    "url": {
                      "title": "代理URL",
                      "type": "string"
                    },
                    "user": {
                      "title": "用户名",
                      "type": "string"
                    },
                    "password": {
                      "title": "密码",
                      "type": "string"
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              }
            ]
          }
        },
        "required": [
          "url"
        ]
      }
    },
    {
      "required": [
        "programName",
        "language",
        "kind"
      ]
    }
  ]
}
JSON,cli.setUISchema(
    cli.uiGroups(
        cli.uiGroup(
            cli.uiField("programName", 0.35),
            cli.uiField("language", 0.2),
            cli.uiField("kind", 0.2),
        ),
        cli.uiGroup(
            cli.uiField("local_file", 0.55),
        ),
        cli.uiGroup(
            cli.uiField("url", 0.55),
            cli.uiField("branch", 0.2),
        ),
        cli.uiGroup(
            cli.uiField(
                "auth", 
                1,
                cli.uiFieldGroups(
                    cli.uiGroup(cli.uiField("auth", 1, cli.uiFieldComponentStyle({"width": "10%"}))),
                    cli.uiGroup(
                        cli.uiField("key_path", 0.35, cli.uiFieldWidget(cli.uiWidgetFile)),
                        cli.uiField("user_name", 0.15),
                        cli.uiField("password", 0.15, cli.uiFieldWidget(cli.uiWidgetPassword)),
                    ),
                ),
            ),
        ),
        cli.uiGroup(
            cli.uiField(
                "proxy", 
                1,
                cli.uiFieldGroups(
                    cli.uiGroup(cli.uiField("proxy", 1)),
                    cli.uiGroup(
                        cli.uiField("url", 0.35),
                        cli.uiField("user", 0.15),
                        cli.uiField("password", 0.15, cli.uiFieldWidget(cli.uiWidgetPassword)),
                    ),
                ),
            ),
        ),
    ),
)
),
    cli.setRequired(true)
)

peepholeSize := cli.Int("peepholeSize", 
    cli.setVerboseName("文件分片大小"),
    cli.setCliGroup("compile"),
    cli.setDefault(0),
    cli.setHelp("0 表示禁用")
)
// {{ compile option 
entry := cli.FileNames("entry", 
    cli.setVerboseName("项目入口文件"),
    cli.setCliGroup("compile"),
)
strictMode = cli.Bool("StrictMode", 
    cli.setVerboseName("严格模式"), 
    cli.setHelp("如果取消严格模式将会忽略编译错误的文件。将可能导致编译结果缺失部分文件。"),
    cli.setCliGroup("compile"),
    cli.setDefault(false), 
)
reCompile := cli.Bool("re-compile", 
    cli.setVerboseName("是否重新编译"),
    cli.setCliGroup("compile"),
    cli.setDefault(true),
)
// }}

// {{ 项目额外信息
description := cli.Text("description", 
    cli.setVerboseName("项目描述"),
    cli.setCliGroup("information"),
)
// }}


// {{ database 
//dbPaths := cli.FileNames("dbPath",
//    cli.setVerboseName("数据库路径"),
//    cli.setCliGroup("database"),
//)
// }}

cli.check()
//dbPath  = ""
//if len(dbPaths) > 0 {
//    dbPath = dbPaths[0]
//}

programName = sprint(info["programName"])
language = sprint(info["language"])

opts = [
    ssa.withProgramName(programName), 
    ssa.withProcess((msg , process )=>{
        yakit.SetProgressEx("complile", process)
        yakit.Info("%s: %f",msg, process)
    }), 
    ssa.withLanguage(language), 
    ssa.withReCompile(reCompile), 
    ssa.withStrictMode(strictMode),
    ssa.withDescription(description),
    //ssa.withDatabasePath(dbPath),
    ssa.withSaveToProfile(true),
    ssa.withContext(context.Background()),
    ssa.withConfigInfo(info), 
    ssa.withPeepholeSize(peepholeSize),
] 
if len(entry) != 0{
    opts = append(opts, ssa.withEntryFile(entry...))
}


progs, err := ssa.ParseProject(opts...)
if err != nil {
    yakit.Text("编译错误信息:\n" + err.Error())
    yakit.Error("语言： %s", language)
    yakit.Error("项目名：%s", programName)
    yakit.Error("编译信息： %s", info)
}
