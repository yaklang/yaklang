yakit.AutoInitYakit()

programName := cli.String("programName", 
    cli.setRequired(true),
    cli.setVerboseName("项目名")
)

language = cli.StringSlice("language", 
    cli.setMultipleSelect(false), 
    cli.setSelectOption("Java", "java"), 
    cli.setSelectOption("PHP", "php"), 
    cli.setSelectOption("Yaklang", "yak"), 
    cli.setSelectOption("JavaScript", "js"), 
    cli.setSelectOption("Golang", "go"), 
    cli.setRequired(true)
)

path = cli.FolderName("ProgramPath", 
    cli.setVerboseName("项目路径"),
    cli.setRequired(true),
) 

description := cli.Text("description", 
    cli.setVerboseName("项目描述"),
    cli.setRequired(false)
)

dbPaths := cli.FileNames("dbPath", 
    cli.setVerboseName("数据库路径"),
    cli.setRequired(false),
)


reCompile := cli.Bool("re-compile", 
    cli.setVerboseName("是否重新编译"),
    cli.setDefault(true),
)

entry := cli.FileNames("entry", 
    cli.setVerboseName("项目入口文件"),
)


cli.check()
dbPath  = ""
if len(dbPaths) > 0 {
    dbPath = dbPaths[0]
}

opts = [
    ssa.withProgramName(programName), 
    ssa.withProcess((msg , process )=>{
        yakit.SetProgressEx("complile", process)
        yakit.Info("%s: %f",msg, process)
    }), 
    ssa.withLanguage(language[0]), 
    ssa.withReCompile(reCompile), 
    ssa.withDescription(description),
    ssa.withDatabasePath(dbPath),
    ssa.withSaveToProfile(true),
] 
if len(entry) != 0{
    opts = append(opts, ssa.withEntryFile(entry...))
}


progs, err := ssa.ParseLocalProject(path, opts...)
if err != nil {
    yakit.Error("ssa compile error: %v", err)
}
