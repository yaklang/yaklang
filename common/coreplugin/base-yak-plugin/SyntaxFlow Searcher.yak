yakit.AutoInitYakit()

fuzzSearch = cli.Bool("fuzz", cli.setHelp("是否进行模糊搜索，默认开启"), cli.setRequired(true), cli.setDefault(true))
kinds = cli.StringSlice(
    "kind",
    cli.setSelectOption("全部", "all"),
    cli.setSelectOption("符号", "symbol"),
    cli.setSelectOption("函数", "function"),
    cli.setSelectOption("函数调用", "call"),
    cli.setSelectOption("文件", "file"),
    cli.setSelectOption("常量", "const"),
    cli.setRequired(true),
    cli.setDefault("all")
)
rule = cli.String(
    "rule",
    cli.setHelp(`输入的内容，输入的内容将会进行正则校验，比如：
    a(                  将会被补充成一个Call
`),
    cli.setRequired(true),
)

progName = cli.String("progName", cli.setHelp("输入当前的项目名，将从数据库进行索引"), cli.setRequired(true))

cli.check()

kind = "all"
if len(kinds) > 0 {
    kind = kinds[0]
}


func matchCallMethodName(content) {
    compile = re.Compile(`(\b[a-zA-Z_]\w*)\(`)~
    matchPart = compile.FindAllStringSubmatch(content, -1)
    if matchPart.Len() == 0 {
        yakit.Error("syntaxFlowTemplate is call,but not match this methodName")
        return
    }


    matchInfo = matchPart[0]
    if matchInfo.Len() < 2 {
        yakit.Error(
            "syntaxflowTemplate is call,but match part is: %s",
            matchInfo,
        )
        return
    }


    methodName = matchInfo[1]
    return methodName
}
func processContent(content) {
    content = str.TrimSpace(content)
    // call
    if kind == "const" {
        return content
    }


    if re.Match(`(\b[a-zA-Z_]\w*)\(`, content) {
        kind = "call"
        return matchCallMethodName(content)
    }

//file
    if re.Match(`[/|\\]`, content) {
        kind = "file"
    }
    return content
}


func normalProcess(content) {
    if fuzzSearch {
        return sprintf("*%s*", content)
    } else {
        return content
    }
}
func fileProcess(content) {
    if fuzzSearch {
        return sprintf("**%s**", content)
    } else {
        return content
    }
}


templateMap = map[string]any{
    "const": (i) => {
        i = normalProcess(i)
        return sprintf(`g<<<CODE
%s
CODE as $const`, i)
    }, 
    "file": (i) =>{
        i = fileProcess(i)
        return sprintf(`<getFullFileName(filename="%s")> as $file`, i)
    }, 
    "function": (i) => {
        i = normalProcess(i)
        return sprintf(`%s?{opcode: function} as $function`, i)
    }, 
    "call": (i) => {
        i = normalProcess(i)
        return sprintf(`%s() as $call`, i)
    }, 
    "symbol": (i) => {
        i = normalProcess(i)
        return sprintf(`%s as $symbol`, i)
    },
}


rule = processContent(rule)
if kind != "all" {
    f = templateMap[kind]
    if f == nil {
        yakit.Error("get template render fail")
        return
    }
    rule = f(rule)
} else {
    targetRule := ""
    for k, f := range templateMap {
        tmprule = f(rule)
        targetRule += tmprule + "\n"
    }
    targetRule += "$const + $file + $function + $call + $symbol as $all"
    rule = targetRule
}


log.info("execute rule: %s", rule)
log.info("progName: %s", progName)
prog = ssa.NewProgramFromDB(progName)~
result = prog.SyntaxFlowWithError(
    rule,
    syntaxflow.withContext(context.Background()),
    syntaxflow.withProcess((f, s) => {
        yakit.SetProgress(f)
        yakit.Info("%s", s)
    }),
    syntaxflow.withSearch(),
    syntaxflow.withCache(),
)~
result.Show()
yakit.Output(result.GetResultID())