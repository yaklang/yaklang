yakit.AutoInitYakit()

fuzzSearch = cli.Bool("fuzz", cli.setHelp("是否进行模糊搜索，默认开启"), cli.setRequired(true), cli.setDefault(true))
kinds = cli.StringSlice(
    "kind", 
    cli.setSelectOption("全部", "all"), 
    cli.setSelectOption("符号", "symbol"), 
    cli.setSelectOption("函数", "function"), 
    cli.setSelectOption("函数调用", "call"), 
    cli.setSelectOption("文件", "file"), 
    cli.setSelectOption("常量", "const"), 
    cli.setRequired(true), 
    cli.setDefault("all"), 
)
input = cli.String(
    "rule", 
    cli.setHelp(`输入的内容，输入的内容将会进行正则校验，比如：
    a(                  将会被补充成一个Call
`), 
    cli.setRequired(true), 
)

progName = cli.String("progName", cli.setHelp("输入当前的项目名，将从数据库进行索引"), cli.setRequired(true))

cli.check()

yakit.SetProgress(0)

kind_input = "all"
if len(kinds) > 0 {
    kind_input = kinds[0]
}
kind = kind_input

var resultID = ""
// check cache
func getCache(k) {
    key := sprint([progName, k, input])
    value := db.GetKey(key)
    if value == "" {
        // skip cache
        return "" 
    }
    resID := parseInt(value)
    // check  result id is valid
    res, err := ssa.NewResultFromDB(resID)
    if err == nil {
        log.info("cache resultId is valid, use it. with-key:%s" , key)
        return resID
    } else {
        log.info("cache resultId error, skip.")
        return ""
    }
}
resultID := getCache("all")
if resultID != "" {
    yakit.SetProgress(1)
    yakit.Output(resultID)
    return 
}


resultID = getCache(kind)
if resultID != "" {
    yakit.SetProgress(1)
    yakit.Output(resultID)
    return 
}


defer func {
    key := sprint([progName, kind, input])
    // 10 day cache 
    db.SetKeyWithTTL(key, resultID, 10 * 24 * 60 * 60)
}

// define process handler

func matchCallMethodName(content) {
    compile = re.Compile(`(\b[a-zA-Z_]\w*)\(`)~
    matchPart = compile.FindAllStringSubmatch(content, -1)
    if matchPart.Len() == 0 {
        yakit.Error("syntaxFlowTemplate is call,but not match this methodName")
        return
    }
    

    matchInfo = matchPart[0]
    if matchInfo.Len() < 2 {
        yakit.Error(
            "syntaxflowTemplate is call,but match part is: %s", 
            matchInfo, 
        )
        return
    }

    methodName = matchInfo[1]
    return methodName
}

func matchMybatisPlaceholder(content) {
    compile = re.Compile(`\$\{([^}]*)`)~  // 捕获 ${xxx 或 ${xxx}
    matchPart = compile.FindAllStringSubmatch(content, -1)
    if matchPart.Len() == 0 {
        yakit.Error("syntaxFlowTemplate is placeholder, but not match placeholder content")
        return
    }

    matchInfo = matchPart[0]
    if matchInfo.Len() < 2 {
        yakit.Error(
            "syntaxFlowTemplate is placeholder, but match part is: %s",
            matchInfo,
        )
        return
    }

    placeholderKey = matchInfo[1] // 提取出 xxx 部分
    return placeholderKey
}

func processContent(content) {
    content = str.TrimSpace(content)
    // call
    if kind == "const" {
        return content
    }

    // MyBatis 占位符语法识别：${xxx} 或 ${xxx（未闭合）
    if re.Match(`^\$\{[^}]*\}?$`, content) {
        kind = "placeholder"
        return matchMybatisPlaceholder(content)
    }

     // 注解语法糖识别：@xxx
    if re.Match(`^@[\w.]+$`, content) {
        kind = "annotation"
        return content[1:] // 去掉开头的 @
    }

    if re.Match(`(\b[a-zA-Z_]\w*)\(`, content) {
        kind = "call"
        return matchCallMethodName(content)
    }

//file
    if re.Match(`[/|\\]`, content) {
        kind = "file"
    }
    return content
}

func normalProcess(content) {
    if fuzzSearch {
        return sprintf("*%s*", content)
    } else {
        return content
    }
}
func fileProcess(content) {
    if fuzzSearch {
        return sprintf("**%s**", content)
    } else {
        return content
    }
}
func mybatisPlaceHolderProcess(content) {
    if fuzzSearch && content == ""{
        return `\$\{\w*\}`
    }
    if fuzzSearch {
        return sprintf(`\$\{%s\w*\}`, re.QuoteMeta(content))
    }else{
        return sprintf(`\$\{%s\}`, re.QuoteMeta(content))
    }
}
templateMap = map[string]any{"const": (i) => {
    i = normalProcess(i)
    return sprintf(`g<<<CODE
%s
CODE as $const`, i)
}, "file": (i) => {
    i = fileProcess(i)
    return sprintf(
        `<getFullFileName(filename="%s")> as $file`,
        i,
    )
}, "function": (i) => {
    i = normalProcess(i)
    return sprintf(`%s?{opcode: function} as $function`, i)
}, "call": (i) => {
    i = normalProcess(i)
    return sprintf(`%s() as $call`, i)
}, "symbol": (i) => {
    i = normalProcess(i)
    return sprintf(`%s as $symbol`, i)
}, "annotation": (i) => {
    i = normalProcess(i)
    return sprintf(`%s?{opcode: make && .__ref__} as $annotation`, i)
},"placeholder": (i) => {
    i = mybatisPlaceHolderProcess(i)
    return sprintf(`${*.xml}.regexp(/%s/) as $placeholder`, i)
},
}

// process
rule = processContent(input)
if kind != "all" {
    f = templateMap[kind]
    if f == nil {
        yakit.Error("get template render fail")
        return
    }
    rule = f(rule)
} else {
    targetRule := ""
    for k, f := range templateMap {
        tmprule = f(rule)
        targetRule += tmprule + "\n"
    }
    rule = targetRule
}

// set output, because kind will modify by processContent, like: () set to call
// so use kind_input, if kind_input is all, will output all kind
if kind_input == "all" {
    rule += "$const + $file + $function + $call + $symbol + $annotation + $placeholder as $all"
}


log.info("execute rule: %s", rule)
log.info("progName: %s", progName)
prog = ssa.NewProgramFromDB(progName)~
result = prog.SyntaxFlowWithError(
    rule, 
    syntaxflow.withContext(context.Background()), 
    syntaxflow.withProcess((f, s) => {
        yakit.SetProgress(f)
        yakit.Info("%s", s)
    }), 
    syntaxflow.withSearch(), 
    syntaxflow.withCache(), 
)~
result.Show()
resultID = result.GetResultID()
yakit.Output(resultID)