/*
预期搜索功能的效果：
检查输入：

任何情况都可以搜索file/const
如果是[a-z,A-Z,0-9,_]，则几种kind都可以用。
如果存在()$或($， 则是call，
如果存在^@.*，则是注解搜索，影响symbol/funciton/call
symbol/function/call关系是：

$call = $function()
$function = symbol?{opcode: func}
*/

yakit.AutoInitYakit()

fuzzSearch = cli.Bool("fuzz", cli.setHelp("是否进行模糊搜索，默认开启"), cli.setRequired(true), cli.setDefault(true))
kinds = cli.StringSlice(
    "kind",
    cli.setSelectOption("全部", "all"),
    cli.setSelectOption("符号", "symbol"),
    cli.setSelectOption("函数", "function"),
    cli.setSelectOption("函数调用", "call"),
    cli.setSelectOption("文件", "file"),
    cli.setSelectOption("常量", "const"),
    cli.setRequired(true),
    cli.setDefault("all"),
)
userInput = cli.String(
    "rule",
    cli.setHelp(`输入的内容，输入的内容将会进行正则校验，比如：
    a(                  将会被补充成一个Call
`),
    cli.setRequired(true),
)

progName = cli.String("progName", cli.setHelp("输入当前的项目名，将从数据库进行索引"), cli.setRequired(true))

cli.check()

yakit.SetProgress(0)
useCache = true
kind_input = "all"
if len(kinds) > 0 {
    kind_input = kinds[0]
}
kind = kind_input

var resultID = ""
// check cache
func getCache(k) {
    key := sprint([progName, k, userInput, fuzzSearch ? "true": "false"])
    value := db.GetKey(key)
    if value == "" {
        // skip cache
        return ""
    }
    resID := parseInt(value)
    // check  result id is valid
    res, err := ssa.NewResultFromDB(resID)
    if err == nil {
        log.info("cache resultId is valid, use it. with-key:%s" , key)
        return resID
    } else {
        log.info("cache resultId error, skip.")
        return ""
    }
}
if useCache{
    resultID := getCache("all")
    if resultID != "" {
        yakit.SetProgress(1)
        yakit.Output(resultID)
        return
    }
    resultID = getCache(kind)
    if resultID != "" {
        yakit.SetProgress(1)
        yakit.Output(resultID)
        return
    }
}
defer func {
    if useCache{
        key := sprint([progName, kind, userInput, fuzzSearch ? "true": "false"])
        // 10 day cache
        db.SetKeyWithTTL(key, resultID, 10 * 24 * 60 * 60)
    }
}


// define process handler

func isAnnotationPattern(content) {
    return re.Match(`^@[\w.]+$`, content)
}

func isBatisPattern(content) {
    // MyBatis 占位符语法识别：${xxx} 或 ${xxx（未闭合）
    return re.Match(`^\$\{[^}]*\}?$`, content)
}

func normalProcess(content) {
    if fuzzSearch {
        return sprintf("*%s*", content)
    } else {
        return content
    }
}

func constProcess(content) {
    if isBatisPattern(content){
        compile = re.Compile(`\$\{([^}]*)`)~  // 捕获 ${xxx 或 ${xxx}
        matchPart = compile.FindAllStringSubmatch(content, -1)
        if matchPart.Len() == 0 {
            yakit.Error("syntaxFlowTemplate is placeholder, but not match placeholder content")
            return
        }

        matchInfo = matchPart[0]
        if matchInfo.Len() < 2 {
            yakit.Error(
                "syntaxFlowTemplate is placeholder, but match part is: %s",
                matchInfo,
            )
            return
        }

        placeholderKey = matchInfo[1] // 提取出 xxx 部分
        if fuzzSearch && placeholderKey == ""{
            return sprintf(
`${*.xml}.regexp(/%s/) as $const1
r<<<CODE
\$\{[^}]+\}
CODE as $const2
$const1 + $const2 as $const
`, `\$\{\w*\}`)
        }
        if fuzzSearch {
            return sprintf(
`${*.xml}.regexp(/%s/) as $const1
r<<<CODE
^\$\{[^}]*%s[^}]*\}$
CODE as $const2
$const1 + $const2 as $const
`, sprintf(`\$\{%s\w*\}`, re.QuoteMeta(placeholderKey)), content)
        }else{
            return sprintf(
`${*.xml}.regexp(/%s/) as $const1
r<<<CODE
\$\{%s\}
CODE as $const2
$const1 + $const2 as $const
`, sprintf(`\$\{%s\}`, re.QuoteMeta(placeholderKey)), content)
        }
    }

        return sprintf(`
g<<<CODE
%s
CODE as $const
`, normalProcess(content))

}

func fileProcess(content) {
    if fuzzSearch {
        return sprintf(
        `<getFullFileName(filename="%s")> as $file`,
        sprintf("**%s**", content)
        )
    } else {
        return sprintf(
        `<getFullFileName(filename="%s")> as $file`,
        content
        )
    }
}

func functionProcess(content) {
     // 注解语法糖识别：@xxx
    if isAnnotationPattern(content){
        annotationName =  content[1:] // 去掉开头的 @
        return sprintf(
`%s?{opcode: make && .__ref__} as $annotation_mark
$annotation_mark.__ref__?{opcode: function} as $function`, normalProcess(annotationName))
    }
    return sprintf(`%s?{opcode: function} as $function`, normalProcess(content))

}

func callProcess(content) {
    if isAnnotationPattern(content){
        annotationName =  content[1:] // 去掉开头的 @
        return sprintf(
`%s?{opcode: make && .__ref__} as $annotations
$annotations.__ref__ as $annotated
$annotated() as $call
`, normalProcess(annotationName))
    }

    compile = re.Compile(`(\b[a-zA-Z_]\w*)\(`)~
    matchPart = compile.FindAllStringSubmatch(content, -1)
    if matchPart.Len() == 0 {
        return sprintf(`%s() as $call`, normalProcess(content))
    }

    matchInfo = matchPart[0]
    if matchInfo.Len() < 2 {
        yakit.Error(
            "syntaxflowTemplate is call,but match part is: %s",
            matchInfo,
        )
        return sprintf(`%s() as $call`, normalProcess(content))
    }

    methodName = matchInfo[1]
    return sprintf(`%s() as $call`, normalProcess(methodName))
}

func symbolProcess(content){
     if isAnnotationPattern(content){
        anntationName =  content[1:] // 去掉开头的 @
        return sprintf(
`%s?{opcode: make} as $symbol
`, normalProcess(anntationName))
    }
    compile = re.Compile(`(\b[a-zA-Z_]\w*)\(`)~
    matchPart = compile.FindAllStringSubmatch(content, -1)
    if matchPart.Len() == 0 {
        return sprintf(`%s as $symbol`, normalProcess(content))
    }
    matchInfo = matchPart[0]
    methodName = matchInfo[1]
    return sprintf(`%s as $symbol`, normalProcess(methodName))
}

templateMap = map[string]any{
"const": (i) => {
    return constProcess(i)
},
"file": (i) => {
    return fileProcess(i)
},
"function": (i) => {
    return functionProcess(i)
},
"call": (i) => {
    return callProcess(i)
},
"symbol": (i) => {
    return symbolProcess(i)
},
}

func isInputLegalFilter(content){
    return re.Match(`^(?:\@|\*|[a-zA-Z_*][a-zA-Z_*0-9]*|\/[^\/\n\r]+\/)`, content)
}

func isCallLike(content){
    return re.Match(`\b[a-zA-Z_]\w*\(`, content)
}

func isFunctionLike(content){
    return re.Match(`^(?:\*|[a-zA-Z_*][a-zA-Z_*0-9]*|\/[^\/\n\r]+\/)`, content)
}

func generateSearchStratergy(content) {
    search = map[string]bool{
        "const": true,
        "file": true,
        "function": false,
        "call": false,
        "symbol": false
    }
    if !isInputLegalFilter(content){
        return search
    }
    search["symbol"] = true
    if isCallLike(content){
        search["call"] = true
        return search
    }
    search["call"] = true
    search["function"] = true
    return search
}

// process
rule = str.TrimSpace(userInput)
searchStratergy = generateSearchStratergy(rule)
if kind != "all" {
    if !searchStratergy[kind]{
        return
    }
    f = templateMap[kind]
    if f == nil {
        yakit.Error("get template render fail")
        return
    }
    rule = f(rule)
} else {
    targetRule := ""
    for k, f := range templateMap {
        if searchStratergy[k]{
            tmprule = f(rule)
            targetRule += tmprule + "\n"
        }

    }
    rule = targetRule
}

// set output, because kind will modify by processContent, like: () set to call
// so use kind_input, if kind_input is all, will output all kind
if kind_input == "all" {
    rule += "$const + $file + $function + $call + $symbol as $all"
}


log.info("execute rule: %s", rule)
log.info("progName: %s", progName)
prog = ssa.NewProgramFromDB(progName)~
result = prog.SyntaxFlowWithError(
    rule, 
    syntaxflow.withContext(context.Background()), 
    syntaxflow.withProcess((f, s) => {
        yakit.SetProgress(f)
        yakit.Info("%s", s)
    }), 
    syntaxflow.withSearch(), 
    syntaxflow.withCache(), 
)~
result.Show()
resultID = result.GetResultID()
yakit.Output(resultID)