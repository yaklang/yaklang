yakit.AutoInitYakit()

// {{ SSA项目信息
projectName := cli.String("projectName", 
    cli.setRequired(true),
    cli.setVerboseName("SSA项目名"), 
    cli.setCliGroup("SSA项目信息"), 
    cli.setHelp("从数据库中查询已存在的SSA项目配置")
)
// }}



cli.check()
// 参数验证
if projectName == "" {
    yakit.Error("SSA项目名是必需的")
    return
}

yakit.Info("开始从数据库加载SSA项目: %s", projectName)

// 查询SSA项目
project, err := ssaproject.QuerySSAProjectByName(projectName)
if err != nil {
    yakit.Error("查询SSA项目失败: %s", err)
    return
}

yakit.Info("找到SSA项目: %s", project.ProjectName)
yakit.Info("项目描述: %s", project.Description)

// 获取项目编译选项
compileOpts, err := project.GetCompileOptions()
if err != nil {
    yakit.Error("获取编译选项失败: %s", err)
    return
}

// 使用项目配置设置参数，programName拼接当前时间
var programName = sprintf("%s(%s)", projectName, time.Now().Format("2006-0102-15:04"))
var description = compileOpts["description"]
var configInfo = compileOpts["configInfo"]
var strictMode = compileOpts["strictMode"]
var peepholeSize = compileOpts["peepholeSize"]
var reCompile = compileOpts["reCompile"]
var memoryCompile = compileOpts["memoryCompile"]
var excludeFile = compileOpts["excludeFiles"]
var memoryComile = compileOpts["memoryCompile"]



yakit.Info("使用数据库配置进行编译:")
yakit.StatusCard("项目名", programName)
yakit.StatusCard("语言", project.Language)
yakit.StatusCard("严格模式", sprintf("%t", strictMode))
yakit.StatusCard("分片大小", sprintf("%d", peepholeSize))
yakit.StatusCard("重新编译", sprintf("%t", reCompile))
yakit.StatusCard("内存编译模式", sprintf("%t", memoryCompile))
yakit.StatusCard("运行时内存编译", sprintf("%t", memoryComile))

// 构建编译选项
opts := [
    ssa.withLanguage(project.Language),
    ssa.withProgramName(programName),
    ssa.withDescription(description),
    ssa.withContext(context.Background()),
    ssa.withConfigInfo(configInfo),
    ssa.withPeepholeSize(peepholeSize),
    ssa.withStrictMode(strictMode),
    ssa.withReCompile(reCompile),
    ssa.withProcess((msg, process) => {
        yakit.SetProgress(process)
        yakit.SetProgressEx("compile", process)
        yakit.Info("%s: %.2f%%", msg, process * 100)
    }),
    ssa.withProjectName(projectName)
]

if memoryComile{
    opts = append(opts, ssa.withMemory())
}


yakit.Info("开始编译SSA项目...")

// 执行编译
progs, err := ssa.ParseProject(opts...)
if err != nil {
    yakit.Error("编译失败: %s", err)
    yakit.Error("项目名: %s", programName)
    yakit.Error("语言: %s", project.Language)
    yakit.Error("编译信息: %v", configInfo)
    return
}

yakit.Success("SSA项目编译完成!")
yakit.Info("编译的程序数量: %d", len(progs))
for i, prog := range progs {
    yakit.Info("程序 %d: %s", i+1, prog.GetProgramName())
}
