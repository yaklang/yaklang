/*
命令执行:
ping -c {pos}

一般有两种情况，相对比较安全的场景：
1. 默认原值换成一个不安全的值：a{}
*/

# mirrorNewWebsitePathParams 每新出现一个网站路径且带有一些参数，参数通过常见位置和参数名去重，去重的第一个 HTTPFlow 在这里被调用
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    for param in freq.GetCommonParams() {
        // 不要测试 cookie 了
        if "cookie" in f`${param.Position()}`.Lower() {
            log.info("skip: %v", param.String())
            continue
        }

        originValue = ""
        try {
            originValue = f`${param.Value()[0]}`
        } catch err {
            originValue = sprint(param.Value())
        }

        if "submit" == param.Name().Lower() {
            continue
        }

        // 构造一个随机字符串命令注入；这样会造成第一个cmd错误，导致 false||cmd2，执行第二个命令
        negativeValue = f`a${randstr(20)}`.Lower()
        if checkBashExpr(negativeValue, param, "||", "") || checkWindowsCmdExpr(negativeValue, param, "||", "") {
            return
        }

        // 使用原值构造命令注入，会造成第一个请求是正常的，导致 true&&cmd2 执行第二个命令
        if checkBashExpr(originValue, param, "&&", "") || checkWindowsCmdExpr(negativeValue, param, "||", "") {
            return
        }

    }
}

checkBashExpr = (prefix, param, boundrayPrefix, boundraySuffix) => {
    for boundary in [
        [boundrayPrefix, boundraySuffix],
        [";", "#"],   // linux cmd1; cmd2
    ] {
        result = fuzz.FuzzCalcExprInt32Safe()
        try {
            payload := prefix + f"${boundary[0]} expr ${result.num1} - ${result.num2}${boundary[1]}"
            rsp := param.Fuzz(payload).ExecFirst()~
            rspRaw = string(rsp.ResponseRaw)
            if result.result in rspRaw {
                risk.NewRisk(
                    rsp.Url,
                    risk.title("Command Injection in %v (%v: %v)" % [rsp.Url, param.Position(), param.Name()]),
                    risk.titleVerbose(f"命令注入：${rsp.Url} (${param.Position()}: ${param.Name()})"),
                    risk.severity("critical"),
                    risk.type("command-injection"), risk.typeVerbose("命令注入"),
                    risk.request(rsp.RequestRaw), risk.response(rsp.ResponseRaw),
                    risk.payload(f`PAYLOAD: ${payload} EXPECT: ${result.result}`), risk.parameter(param.String()),
                )
                return true
            }
        } catch err {
            dump(err)
        }
    }
    return false
}


checkWindowsCmdExpr = (prefix, param, boundrayPrefix, boundraySuffix) => {
    for boundary in [
        [boundrayPrefix, boundraySuffix],
    ] {
        result = fuzz.FuzzCalcExprInt32Safe()
        try {
            randvar = f`${randstr(6)}`
            payload := prefix + f"${boundary[0]} set /a ${randvar}=${result.num1}-${result.num2} && call echo %${randvar}% ${boundary[1]}"
            rsp := param.Fuzz(payload).ExecFirst()~
            rspRaw = string(rsp.ResponseRaw)
            if result.result in rspRaw {
                risk.NewRisk(
                    rsp.Url,
                    risk.title("Command(Windows) Injection in %v (%v: %v)" % [rsp.Url, param.Position(), param.Name()]),
                    risk.titleVerbose(f"Windows命令注入：${rsp.Url} (${param.Position()}: ${param.Name()})"),
                    risk.severity("critical"),
                    risk.type("command-injection"), risk.typeVerbose("命令注入"),
                    risk.request(rsp.RequestRaw), risk.response(rsp.ResponseRaw),
                    risk.payload(f`PAYLOAD: ${payload} EXPECT: ${result.result}`), risk.parameter(param.String()),
                )
                return true
            }
        } catch err {
            dump(err)
        }
    }
    return false
}