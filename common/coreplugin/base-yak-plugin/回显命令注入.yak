/*
命令执行:
ping -c {pos}

一般有两种情况，相对比较安全的场景：
1. 默认原值换成一个不安全的值：a{}
*/

# mirrorNewWebsitePathParams 每新出现一个网站路径且带有一些参数，参数通过常见位置和参数名去重，去重的第一个 HTTPFlow 在这里被调用
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    for param in freq.GetCommonParams() {
        // 不要测试 cookie 了
        if "cookie" in f`${param.Position()}`.Lower() {
            log.info("skip: %v", param.String())
            continue
        }

        originValue = ""
        try {
            originValue = f`${param.Value()[0]}`
        } catch err {
            originValue = sprint(param.Value())
        }

        if "submit" == param.Name().Lower() {
            continue
        }

        // 构造一个随机字符串命令注入；这样会造成第一个cmd错误，导致 false||cmd2，执行第二个命令
        negativeValue = f`a${randstr(20)}`.Lower()
        if checkBashExpr(negativeValue, param, "||", "") || checkWindowsCmdExpr(negativeValue, param, "||", "") || checkWindowsPowershellExpr(negativeValue, param, "||", "") {
            return
        }

        // 使用原值构造命令注入，会造成第一个请求是正常的，导致 true&&cmd2 执行第二个命令
        if checkBashExpr(originValue, param, "&&", "") || checkWindowsCmdExpr(negativeValue, param, "||", "")  || checkWindowsPowershellExpr(negativeValue, param, "||", "") {
            return
        }

    }
}

description = `命令注入（Command Injection）是一种常见的安全攻击方式，它发生在应用程序未能正确地验证用户输入的情况下。攻击者通过这种漏洞，可以在服务器上执行任意的系统命令，从而控制服务器或访问敏感信息。

攻击方式：命令注入通常发生在应用程序直接使用用户输入来构造系统命令的情况下。攻击者可以通过输入特殊字符或命令，使得原本的命令被改变，从而执行攻击者想要的操作。

潜在风险：命令注入的风险极高，因为它可以让攻击者执行任意命令，包括读取、修改、删除数据，甚至控制整个系统。这种攻击方式对系统的安全性和稳定性构成极大威胁。

防护措施：防止命令注入的主要方法是对用户输入进行严格的验证和过滤。任何用于构造系统命令的输入都应该被视为潜在的安全风险。此外，应用程序还应该限制其执行系统命令的能力，例如，运行在低权限的用户账户下，或者使用安全的API来代替直接执行系统命令。
`
solution = `
1. 输入验证：对所有用户输入进行严格的验证和过滤，特别是那些可能会用于构造系统命令的输入。可以使用白名单或者正则表达式等方法来验证输入的合法性。

2. 最小权限原则：应用程序应该以最小的权限运行，这样即使出现命令注入，攻击者也无法执行一些高权限的系统命令。

3. 使用安全的API：尽量避免直接执行系统命令，而是使用那些能够进行必要安全检查的安全API。

4. 参数化命令：在构造系统命令时，应尽量使用参数化命令，而不是字符串拼接，这样可以避免命令注入。

5. 错误处理：不应该向用户显示详细的错误信息，以防止攻击者利用这些信息进行攻击。
`

checkBashExpr = (prefix, param, boundrayPrefix, boundraySuffix) => {
    for boundary in [
        [boundrayPrefix, boundraySuffix],
        [";", "#"],   // linux cmd1; cmd2
    ] {
        result = fuzz.FuzzCalcExprInt32Safe()
        try {
            payload := prefix + f"${boundary[0]} expr ${result.num1} - ${result.num2}${boundary[1]}"
            rsp := param.Fuzz(payload).ExecFirst()~
            rspRaw = string(rsp.ResponseRaw)
            if result.result in rspRaw {
                risk.NewRisk(
                    rsp.Url,
                    risk.title("Command Injection in %v (%v: %v)" % [rsp.Url, param.Position(), param.Name()]),
                    risk.titleVerbose(f"命令注入：${rsp.Url} (${param.Position()}: ${param.Name()})"),
                    risk.severity("critical"),
                    risk.type("command-injection"), risk.typeVerbose("命令注入"),
                    risk.request(rsp.RequestRaw), risk.response(rsp.ResponseRaw),
                    risk.payload(f`PAYLOAD: ${payload} EXPECT: ${result.result}`), risk.parameter(param.String()),
                    risk.description(description),
                    risk.solution(solution),
                )
                return true
            }
        } catch err {
            dump(err)
        }
    }
    return false
}

checkWindowsPowershellExpr = (prefix, param, boundaryPrefix, boundarySuffix) => {
    for boundary in [
        [";", ""],                        // multi stmts
        [boundaryPrefix, boundarySuffix], // powershell 7+ || && available
    ] {
        result = fuzz.FuzzCalcExprInt32Safe()
        try {
            payload := prefix + f"${boundary[0]} ${result.num1}-${result.num2} ${boundary[1]}"
            rsp := param.Fuzz(payload).ExecFirst()~
            rspRaw = string(rsp.ResponseRaw)
            if result.result in rspRaw {
                risk.NewRisk(
                    rsp.Url,
                    risk.title("Command Injection in %v (%v: %v)" % [rsp.Url, param.Position(), param.Name()]),
                    risk.titleVerbose(f"命令注入：${rsp.Url} (${param.Position()}: ${param.Name()})"),
                    risk.severity("critical"),
                    risk.type("command-injection"), risk.typeVerbose("命令注入"),
                    risk.request(rsp.RequestRaw), risk.response(rsp.ResponseRaw),
                    risk.payload(f`PAYLOAD: ${payload} EXPECT: ${result.result}`), risk.parameter(param.String()),
                    risk.description(description),
                    risk.solution(solution),
                )
                return true
            }
        } catch err {
            dump(err)
        }
    }
    return false
}

checkWindowsCmdExpr = (prefix, param, boundrayPrefix, boundraySuffix) => {
    for boundary in [
        [boundrayPrefix, boundraySuffix],
    ] {
        result = fuzz.FuzzCalcExprInt32Safe()
        try {
            randvar = f`${randstr(6)}`
            payload := prefix + f"${boundary[0]} set /a ${randvar}=${result.num1}-${result.num2} && call echo %${randvar}% ${boundary[1]}"
            rsp := param.Fuzz(payload).ExecFirst()~
            rspRaw = string(rsp.ResponseRaw)
            if result.result in rspRaw {
                risk.NewRisk(
                    rsp.Url,
                    risk.title("Command(Windows) Injection in %v (%v: %v)" % [rsp.Url, param.Position(), param.Name()]),
                    risk.titleVerbose(f"Windows命令注入：${rsp.Url} (${param.Position()}: ${param.Name()})"),
                    risk.severity("critical"),
                    risk.type("command-injection"), risk.typeVerbose("命令注入"),
                    risk.request(rsp.RequestRaw), risk.response(rsp.ResponseRaw),
                    risk.payload(f`PAYLOAD: ${payload} EXPECT: ${result.result}`), risk.parameter(param.String()),
                    risk.description(description),
                    risk.solution(solution),
                )
                return true
            }
        } catch err {
            dump(err)
        }
    }
    return false
}