args = cli.Json("cookie", cli.setJsonSchema(<<<JSON
{
  "type": "object",
  "properties": {
    "header": {
      "type": "array",
      "title": "Header",
      "items": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "require": [
          "key",
          "value"
        ]
      }
    }
  }
}
JSON), cli.setRequired(true))
keyword = cli.String("url-keyword", cli.setRequired(false), cli.setCliGroup("前提条件"), cli.setVerboseName("URL 前提条件"))
cli.check()

m = {}
lock = sync.NewRWMutex()

hijackHTTPRequest = func(isHttps, url, req, forward, drop) {
    if keyword != "" && !url.Contains(keyword) {
        return
    }
    lock.Lock()
    m[PLUGIN_RUNTIME_ID] = true 
    lock.Unlock()
    header = args["header"]
    for _, item := range header {
      key := item.key 
      val := item.value
      req = poc.ReplaceHTTPPacketHeader(req, key, val)
    }
    forward(req)
}
hijackSaveHTTPFlow = func(flow , modify, drop) {
    lock.RLock()
    ok = PLUGIN_RUNTIME_ID in m
    lock.RUnlock()
    if !ok {
        return 
    }
    flow.FromPlugin="修改 HTTP 请求 Header"
}