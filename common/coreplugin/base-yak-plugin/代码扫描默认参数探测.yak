yakit.AutoInitYakit()

target = cli.String("target", cli.setRequired(true))
proxy = cli.String("proxy", cli.setHelp("remote url proxy"))
timeout = cli.Int("timeout", cli.setDefault(5))
cli.check()
target = str.TrimSpace(target.Lower())
origin = target
proxy = str.TrimSpace(proxy.Lower())
javaDir = ["webapp","resources","root"]
jsDir = ["node_modules"]
jsFiles = ["package-lock.json","package.json","yarn.lock"]
phpFiles = ["index.php","composer.json","composer.lock"]
javaFiles = ["web.xml","pom.xml","application.properties"]
var countMap = map[string]int{
    ssa.PHP: 1,
    ssa.Javascript:1,
    ssa.Java:1,
    ssa.Yak: 1,
}
params ={
    "json_schema":{
        "kind": "",
        "local_file": "",
        "url": "",
        "proxy":{
            "proxy": false,
            "url": ""
        }

    },
    "language": "",
    "program_name": "",
    "file_count": 0,
    "error": {
        "kind": "",
        "msg": ""
   }
}
if proxy!=""{
    params.json_schema.proxy.proxy=true
    params.json_schema.proxy.url = proxy
}
func detectiveType(data){
    return data==codec.DecodeHex("504b0304")~
}
func newConnectException(err){
    params.error.kind = "connectFailException"
    params.error.msg = err
}
func newFileTypeException(err){
    params.error.kind = "fileTypeException"
    params.error.msg = err
}
func newFileNotFoundExcption(err){
    params.error.kind = "fileNotFoundException"
    params.error.msg = err
}
func AutoParseLanguage(){
    maxinfo = {
        "key": "",
        "value": 0,
    }
    for key,value :=range countMap{
        if maxinfo.value < value{
            maxinfo.key = key
            maxinfo.value = value
        }
    }
    if maxinfo.value!=0 {
        params.language = maxinfo.key
    }
}
//获取zip中的信息，确定语言
func getZipinfo(basePath){
    zip.Recursive(basePath,(dir,path,info)=>{
        if !info.IsDir(){
            params.file_count++
        }
        ext = file.GetExt(path).Lower().TrimLeft(".")
        countinfo = countMap[ext]
        if countinfo!=nil{
            countMap[ext] = countinfo+1
        }
        if params.language=="" {
            if info.IsDir(){
                if info.Name().Lower() in javaDir{
                params.language = ssa.Java
            }
            if info.Name().Lower() in jsDir{
                params.language = ssa.Javascript
            }
            }else{
                if info.Name().Lower() in javaFiles{
                    params.language = ssa.Java
                }
                if info.Name().Lower() in jsFiles{
                    params.language = ssa.Javascript
                }
                if info.Name().Lower() in phpFiles{
                    params.language = ssa.PHP
                }
            }
        }
    })
}
func generateFileName(kind,filename){
    //转换为合格的file格式
    filename = filename+"_"+time.Now().Format("2006_01_02_15_04_05")
    filename = re2.ReplaceAll(filename, '[/\\?%*.:-|"<>]', "_")
    return sprintf("%s_%s", kind,filename)
}
if target.HasPrefix("git://"){
    gitUrl = target[6:]
    params.json_schema.kind = "git"
    params.json_schema.url = target
    params.language = ""
    params.program_name= generateFileName("git",gitUrl)
}

if target.HasPrefix("http://") ||target.HasPrefix("https://"){
    httpUrl= ""
    if target.HasPrefix("http://"){
        httpUrl = target[7:]
    }else{
        httpUrl = target[8:]
    }
    if !target.HasSuffix("/"){
        target+="/"
    }
    gitUrl = target + "info/refs?service=git-upload-pack"
    rsp, req, err = poc.Get(gitUrl,poc.connectTimeout(timeout),poc.timeout(timeout),poc.proxy(proxy))
    if err!=nil || rsp.GetStatusCode()!=200{
        res,req,err2 = poc.Get(origin,poc.connectTimeout(timeout),poc.timeout(timeout),poc.proxy(proxy))
        if err2!=nil || res.GetStatusCode()!=200{
            params.program_name = generateFileName("http", target)
            newConnectException(sprintf("connect url: %s fail:%s,", target,err2.Error()))
        }else if res.GetStatusCode()==200{
            switch {
            case str.MatchAllOfSubString(res.GetContentType(), "jar"):
                params.json_schema.kind = "jar"
                params.json_schema.url = target
                params.language = ssa.Java
                params.program_name = generateFileName("jar",httpUrl)
            default:
                if detectiveType(res.GetBody()[:4]){
                    params.json_schema.kind = "compress"
                    params.json_schema.url = target
                    params.program_name = generateFileName("compress", httpUrl)
                }else{
                    newFileTypeException(sprint("connect success,but not found match the file type"))
                }
        }
        }
    }else{
        switch{
            case string(rsp.GetBody()[:4096]).Contains("git-upload-pack"),str.MatchAllOfGlob(rsp.GetContentType(), "application/x-*-advertisement") :
                params.json_schema.kind = "git"
                params.json_schema.url = target
                params.program_name = generateFileName("git",httpUrl)
            default:
            newFileTypeException("connect success,but not match this type")
        }
}
}
if target.HasPrefix("file://") {
    localFile = target[7:]
    if file.IsExisted(localFile){
        ext := file.GetExt(localFile).Lower()
        switch ext{
            case ".jar",".war":
                params.json_schema.kind = "jar"
                params.json_schema.local_file = localFile
                params.json_schema.url = target
                params.language = "java"
                params.program_name = generateFileName("compress", localFile)
            case ".zip":
                params.json_schema.kind = "compress"
                params.json_schema.local_file = localFile
                params.json_schema.url = target
                params.program_name = generateFileName("compress", localFile)
                getZipinfo(localFile)
            default:
                if file.IsDir(localFile){
                    filesys.Recursive(localFile, filesys.onDirStat(func(path,info){
                        if params.language == ""{
                            switch{
                                case info.Name().Lower() in javaDir:
                                    params.language = ssa.Java
                                case info.Name().Lower() in jsDir:
                                    params.language = ssa.Javascript
                            }
                        }
                    }),filesys.onFileStat(func(path,info){
                        params.file_count++
                        ext = file.GetExt(path).Lower().TrimLeft(".")
                        log.info("ext: %s", ext)
                        countinfo = countMap[ext]
                        if countinfo!=nil{
                        countMap[ext] = countinfo+1
                        }
                        if params.language==""{
                            switch {
                                case info.Name().Lower() in javaFiles:
                                    params.language = ssa.Java
                                case info.Name().Lower() in phpFiles:
                                    params.language = ssa.PHP
                                case info.Name().Lower() in jsFiles:
                                    params.language =ssa.Javascript
                            }
                        }
                    }))
                }else{
                    newFileTypeException(sprint("file exits,but only support jar、war、zip compress"))
                }
        }
    }else{
        newFileNotFoundExcption(sprintf("not found this file in local,check path: %s", localFile))
    }
}
 if params.language==""{
    AutoParseLanguage()
}
yakit_output(params)