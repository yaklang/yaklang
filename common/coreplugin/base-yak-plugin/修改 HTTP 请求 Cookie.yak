args = cli.Json(
    "cookie", 
    cli.setJsonSchema(
        <<<JSON
{
  "type": "object",
  "properties": {
    "cookie": {
      "type": "array",
      "title": "Cookie",
      "items": {
        "properties": {
          "key": {
            "type": "string",
            "title": "键"
          },
          "value": {
            "type": "string",
            "title": "值"
          }
        },
        "require": [
          "key",
          "value"
        ]
      }
    }
  }
}
JSON, 
        cli.setUISchema(
            cli.uiGroups(cli.uiGroup(cli.uiField(
                "cookie", 
                1, 
                cli.uiFieldGroups(cli.uiGroup(cli.uiField(
                    "items", 
                    1, 
                    cli.uiFieldGroups(cli.uiGroup(cli.uiField("key", 0.4), cli.uiField("value", 0.4))), 
                ))), 
            ))), 
            cli.uiGlobalFieldPosition(cli.uiPosHorizontal), 
        ), 
    ), 
    cli.setRequired(true), 
)
keyword = cli.String("url-keyword", cli.setRequired(false), cli.setCliGroup("前提条件"), cli.setVerboseName("URL 前提条件"))
cli.check()

m = {}
lock = sync.NewRWMutex()

hijackHTTPRequest = func(isHttps, url, req, forward, drop) {
    if keyword != "" && !url.Contains(keyword) {
        return
    }
    
    lock.Lock()
    m[PLUGIN_RUNTIME_ID] = true
    lock.Unlock()
    cookie = args["cookie"]
    for _, item := range cookie {
        key := item.key
        val := item.value
        req = poc.ReplaceHTTPPacketCookie(req, key, val)
    }
    
    forward(req)
}
hijackSaveHTTPFlow = func(flow, modify, drop) {
    lock.RLock()
    ok = PLUGIN_RUNTIME_ID in m
    lock.RUnlock()
    if !ok {
        return
    }
    
    flow.FromPlugin = "修改 HTTP 请求 Cookie"
}