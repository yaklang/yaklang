package synscanx

func getUDPPayloadByPort(port int) []byte {
	switch port {
	case 53: // DNS
		return []byte{
			0x12, 0x34, // Transaction ID
			0x01, 0x00, // Flags
			0x00, 0x01, // Questions
			0x00, 0x00, // Answer RRs
			0x00, 0x00, // Authority RRs
			0x00, 0x00, // Additional RRs
			0x03, 0x77, 0x77, 0x77, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, // www.google.com
			0x00, 0x01, // Type A
			0x00, 0x01, // Class IN
		}
	case 67: // DHCP
		return []byte{
			0x01,                   // Message type: Boot Request (1)
			0x01,                   // Hardware type: Ethernet
			0x06,                   // Hardware address length: 6
			0x00,                   // Hops: 0
			0x39, 0x03, 0xF3, 0x26, // Transaction ID
			0x00, 0x00, // Seconds elapsed: 0
			0x80, 0x00, // Bootp flags: Broadcast
			0x00, 0x00, 0x00, 0x00, // Client IP address: 0.0.0.0
			0x00, 0x00, 0x00, 0x00, // Your (client) IP address: 0.0.0.0
			0x00, 0x00, 0x00, 0x00, // Next server IP address: 0.0.0.0
			0x00, 0x00, 0x00, 0x00, // Relay agent IP address: 0.0.0.0
			// Client MAC address: 00:00:00:00:00:00 (followed by 10 bytes padding)
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			// Server host name (64 bytes): not given
			// Boot file name (128 bytes): not given
			// Magic cookie: DHCP
			0x63, 0x82, 0x53, 0x63,
			// DHCP Message Type
			0x35, 0x01, 0x01,
			// End Option
			0xFF,
		}
	case 123: // NTP
		return []byte{
			0x1B, // LI, Version, Mode: 0, 4, 3 (Client)
			0x00, // Stratum, or type of clock
			0x00, // Polling Interval
			0xEC, // Peer Clock Precision
			// 8 bytes of zero for Root Delay & Root Dispersion
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			// Reference ID
			0x00, 0x00, 0x00, 0x00,
			// Reference Timestamp (64 bits)
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			// Origin Timestamp (64 bits)
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			// Receive Timestamp (64 bits)
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			// Transmit Timestamp (64 bits)
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		}
	case 161, 162: // SNMP
		return []byte{
			0x30, 0x26, // 消息
			0x02, 0x01, 0x00, // 版本
			0x04, 0x06, 'p', 'u', 'b', 'l', 'i', 'c', // 共同体
			0xa0, 0x19, // PDU 类型（GetRequest）
			0x02, 0x04, 0x70, 0x9e, 0xb7, 0x6e, // 请求 ID
			0x02, 0x01, 0x00, // 错误状态
			0x02, 0x01, 0x00, // 错误索引
			0x30, 0x0b, // 变量绑定
			0x30, 0x09, // 序列
			0x06, 0x05, 0x2b, 0x06, 0x01, 0x02, 0x01, 0x01, 0x00, // OID
			0x05, 0x00, // Null
		}
	case 137: // NBNS
		return []byte{
			0x00, 0x01, // Transaction ID
			0x00, 0x00, // Flags: 0 (query)
			0x00, 0x01, // Questions: 1
			0x00, 0x00, // Answer RRs: 0
			0x00, 0x00, // Authority RRs: 0
			0x00, 0x00, // Additional RRs: 0
			// Name: <20-char name padded with spaces>, encoded
			// In this example, the name is "EXAMPLEPC      "
			0x45, 0x58, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x50, 0x43, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
			0x00, 0x20, // Type: NetBIOS general Name Service
			0x00, 0x01, // Class: Internet
		}
	case 443: // QUIC often uses port 443, but can use others
		return []byte{
			0xC0,       // Header: Long Header, Initial Packet
			0x00,       // Fixed Bit: Must be set to 1
			0x00, 0x00, // Packet Number Length: 2 bytes
			0x00, 0x00, 0x00, 0x00, // Version: 0 (Version Negotiation)
			0x08,                                           // Destination Connection ID Length: 8 bytes
			0xDE, 0xAD, 0xBE, 0xEF, 0xCA, 0xFE, 0xBA, 0xBE, // Destination Connection ID
			0x00, // Source Connection ID Length: 0 bytes
			// Packet Number: Variable length, not shown here
			// Payload: Variable length, not shown here
		}
	}

	return nil
}
