Package:
  GRE:
    Flags And Version: uint16
    Protocol Type: uint16
    Payload Length: uint16
    Call ID: uint16
    Optional:
      unpack: true
      operator: |
        flag := getNodeResult("../Flags And Version").Value
        if (flag & 0x1000) == 0x1000 {
          this.ProcessByType("Sequence Number")
        }
        if (flag & 0x0080) == 0x0080 {
          this.ProcessByType("Acknowledgment Number")
        }
    Payload:
      length-from-field: "../Payload Length"
      operator: |
        length = getNodeResult("../Payload Length").Value
        if length <= 0 {
          return
        }
        type = getNodeResult("../Protocol Type").Value
        switch type {
          case 0x0800:
            this.ProcessByType("IP")
          case 0x86dd:
            this.ProcessByType("IPv6")
          case 0x0806:
            this.ProcessByType("ARP")
          case 0x888e:
            this.ProcessByType("EAPOL")
          case 0x880b:
            this.ProcessByType("PPP")
          default:
            this.NewUnknownNode()
        }
IP: "import:internet_protocol.yaml;node:Internet Protocol"
IPv6: "import:internet_protocol_version_6.yaml;node:Internet Protocol Version 6"
ARP: "import:address_resolution_protocol.yaml;node:Address Resolution Protocol"
PPP: "import:ppp.yaml;node:PPP"
EAPOL: "import:eapol.yaml;node:EAPOL"
Sequence Number: uint32
Acknowledgment Number: uint32