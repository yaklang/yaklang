textSnippent = cli.String("textSnippet", cli.setRequired(true), cli.setHelp("文本片段内容"))
limit = cli.Int("limit",cli.setDefault("50"),cli.setHelp("字数限制"))
cli.check()

plan = <<<plandata
 ```json
    {
        "@action": "plan",
        "query": "-",
        "main_task": "文本片段生成简洁总结",
        "main_task_goal": "对用户的输入的内容进行分析和总结，提取出关键信息，并生成简洁的总结文本。",
        "tasks": [
        {
            "subtask_name": "文本总结",
            "subtask_goal": "分析用户输入的文本内容，提取出关键信息，并生成简洁的总结文本。"
        }
        ]
    }
```
plandata

persis = <<<persistent
你是一个简单文本片段总结器，你正在总结一个文本片段。请遵循以下规则：
1. **关键信息优先**：保留核心事实、结论或行动项，忽略次要细节。
2. **保持中立**：不添加原文未明确提及的推断。
3. **字数限制**：不超过 [%d] 字
4. **输出格式**：按照下列json schema 输出：
{
"$schema": "http://json-schema.org/draft-07/schema#",
"type": "object",
"required": ["@action", "summary"],
"additionalProperties": false,
"properties": {
    "@action": {
    "const": "summarize",
    "description": "标识当前操作的具体类型"
    },
    "summary": {
    "type": "string",
    "description": "总结的文本"
    }
}
}
persistent



forgeHandle = func(params) {
    summary = ""
    bp = aiagent.CreateForge("fragment-summarizer",
        aiagent.plan(func(config){
            res,err = aiagent.ExtractPlan(config, plan)
            if err != nil {
                config.EmitError("yak review plan mock failed: %s", err)
                return nil
            }
            return res
        }),
        aiagent.persistentPrompt(sprintf(persis, limit)),
        aiagent.aidOptions(
            aiagent.agreeYOLO(true),
            aiagent.extendedActionCallback("summarize", func(config , action) {
                summary = action.GetString("summary")
            }),
            aiagent.resultHandler(func(config){})
        )
    )
    ordr,err = bp.CreateCoordinator(context.Background(),params)
    if err != nil {
		return nil
	}
    err = ordr.Run()
    if err != nil {
		return nil
	}
    return summary
}