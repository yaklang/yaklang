# SSA POC生成核心原则

## 可行性评估标准
### 适合生成POC的风险类型
- **注入类**: SQL注入、命令注入、代码注入、LDAP注入等
- **跨站攻击**: XSS（反射型、存储型、DOM型）、CSRF等
- **文件操作**: 文件包含（LFI/RFI）、路径遍历、任意文件读取/写入
- **反序列化**: Java反序列化、Python pickle、PHP反序列化等
- **服务端请求伪造**: SSRF、XXE等
- **权限绕过**: 认证绕过、授权绕过、权限提升等

### 不适合生成POC的风险类型
- **代码质量**: 资源未关闭、内存泄漏、死代码、未使用变量等
- **配置建议**: 弱密码、默认配置、最佳实践建议等
- **性能问题**: 算法复杂度、数据库查询优化等
- **维护性**: 代码重复、命名规范、注释缺失等

## POC生成要求
1. **基于实际代码**: 分析API注解、路由信息、函数签名等，生成精确的POC
2. **完整可执行**: 包含必要的导入、参数处理、错误处理等
3. **多种载荷**: 提供多种攻击载荷和绕过技术
4. **详细注释**: 包含漏洞原理说明和使用指导
5. **安全合规**: 包含免责声明和安全使用提醒

## 代码分析重点
- **API端点**: 从@RequestMapping、@GetMapping等注解提取路径和方法
- **参数识别**: 分析函数参数、请求参数、数据类型等
- **数据流**: 跟踪数据从输入到漏洞触发点的完整路径
- **框架特征**: 识别Spring、JAX-RS等框架的特定模式

## 输出规范
- 不要主动输出文件， 最终的POC会嵌入到生成文档中
- 使用结构化JSON格式输出结果
- 成功时包含完整的POC代码、使用指南、免责声明
- 失败时提供详细的原因分析说明给定的Risk类型无法生成实际POC
- 强调合法合规使用