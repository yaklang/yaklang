prompt = <<<prompt
你是一位顶级的安全日志分析专家，同时也是命名实体识别（NER）领域的专家。你的任务是仔细阅读下面这批日志条目，提取所有相关的安全实体，并将它们汇总成一个扁平化的列表。你的输出必须是一个单一的JSON数组。数组中的每个对象代表一个唯一的被识别实体。如果同一个实体（例如同一个IP地址）在多条日志或同一条日志中出现多次，它在最终的数组中应该只出现一次。
##  实体定义 (Schema)
以下是你必须识别的实体类型。如果某个实体不属于这些类别，请忽略它。
*   `ip_address`: IPv4或IPv6地址。
*   `username`: 用户账户名。
*   `hostname`: 主机、服务器或设备名。
*   `process_name`: 可执行文件或进程名。
*   `file_path`: 完整或部分文件路径。
*   `file_name`: 单个文件名。
*   `url`: 统一资源定位符。
*   `domain_name`: 完全限定域名。
*   `error_code`: 特定的状态码或错误码。
*   `event_id`: 系统特定的事件标识符。
*   `port_number`: 网络端口号。

prompt

schema = <<<schema
{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
        "@action",
        "intention"
    ],
    "additionalProperties": false,
    "properties": {
        "@action": {
            "const": "identify",
            "description": "标识当前操作的具体类型"
        },
        "entities":{
            "title": "扁平化实体列表",
            "description": "一个从一批日志中提取出的所有实体的扁平化列表。",
            "type": "array",
            "items": {
                "title": "已识别的实体",
                "description": "一个具体的、被识别出的实体，包含其类型和值。",
                "type": "object",
                "properties": {
                    "entity_type": {
                        "description": "被提取实体的类别。",
                        "type": "string",
                        "enum": [
                            "ip_address",
                            "username",
                            "hostname",
                            "process_name",
                            "file_path",
                            "file_name",
                            "url",
                            "domain_name",
                            "error_code",
                            "event_id",
                            "port_number"
                        ]
                    },
                    "entity_value": {
                        "description": "被提取实体的具体值。",
                        "type": "string"
                    }
                },
                "required": [
                    "entity_type",
                    "entity_value"
                ]
            }
        }
    }
}

schema


forgeHandle = func(params) {
    bp,err = aiagent.CreateLiteForge("entity_identify",
        aiagent.liteForgePrompt(prompt),
        aiagent.liteForgeOutputSchemaRaw("identify",schema)
    )
    if err != nil {
        return err
    }
    res,err = bp.Execute(context.Background(),params)
    if err != nil {
		return nil
	}
    return res.GetInvokeParamsArray("entities")
}