cli.String("query",cli.setHelp("用户输入"),cli.setVerboseName("用户输入") )
cli.String("context", cli.setHelp("上下文信息"))
cli.check()

plan = <<<plandata
```json
{
  "@action": "plan",
  "query": "-",
  "main_task": "根据用户的输入以及上下文信息，识别用户的意图，总结成一句话调用 forge_search 搜索工具，向用户推荐对应的ai forge。",
  "main_task_goal": "根据用户输入和任务上下文信息，识别意图，推荐合适的ai forge。",
  "tasks": [
    {
      "subtask_name": "搜索forge",
      "subtask_goal": "分析用户输入的输入以及系统收集的上下文信息，总结出用户的需要。根据总结的需要，调用搜索工具，查询推荐的forge，注意只查询一次即可"
    },
    {
      "subtask_name": "询问用户",
      "subtask_goal": "根据上一步的输出，调用require-user-interact工具向用户询问是否有符合要求的forge"
    },
    {
       "subtask_name": "输出结果",
       "subtask_goal": "若上一步用户选择了forge，则输出使用提示词中定义的jsonschema额外输出一份结果json要求有准确的forage名"
    }
  ]
}
```
plandata

persis = <<<persistent
你是一个用户意图识别器，你需要做的事情是，根据上下文信息和用户的初始输入，识别用户的意图，向用户推荐合适的ai forge。
1.**快速处理**：在执行每一步的时候不要多次调用工具，根据任务的目标描述调用工具即可结束子任务
2.**结果输出**：如果在调用 require-user-interact 用户选择了一个forge请额外输出符合下列jsonschema要求的json。
{
"$schema": "http://json-schema.org/draft-07/schema#",
"type": "object",
"required": ["@action", "forgename"],
"additionalProperties": false,
"properties": {
    "@action": {
    "const": "select-forge",
    "description": "标识当前操作的具体类型"
    },
    "forgename": {
    "type": "string",
    "description": "选择的forge的名字"
    }
}
}
persistent



forgeHandle = func(params) {
    forgename = ""
    bp = aiagent.CreateForge("forge-triage",
        aiagent.plan(func(config){
            res,err = aiagent.ExtractPlan(config, plan)
            if err != nil {
                config.EmitError("forge triage plan mock failed: %s", err)
                return nil
            }
            return res
        }),
        aiagent.persistentPrompt(persis),
        aiagent.agreeYOLO(true),
        aiagent.aiForgeSearchTool(),
        aiagent.allowRequireForUserInteract(true),
        aiagent.extendedActionCallback("select-forge", func(config , action) {
            forgename = action.GetString("forgename")
        }),
        aiagent.resultHandler(func(config){})
    )
    ordr,err = bp.CreateCoordinator(context.Background(),params)
    if err != nil {
		return nil
	}
    err = ordr.Run()
    if err != nil {
		return nil
	}
    return forgename
}