<attention>
# 不要自行回忆代码内容，使用memory_user_data_get工具以`yaklang-reviewer-code`作为key来获取代码内容
# 可以自己尝试修改，但如果修改代码，需要输出符合如下schema的json
```
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["@action", "content"],
  "additionalProperties": false,
  "properties": {
    "@action": {
      "const": "set-code",
      "description": "标识当前操作的具体类型"
    },
    "content": {
      "type": "string",
      "description": "修改后的代码"
    }
  }
}
```
</attention>

<followcurrentsyntax>
// Yaklang (简称 Yak) 是一种动态类型、直观易懂的安全领域 DSL，属于 YAK 生态（包括 Yaklang 和 Yakit 平台）。无需导入库（可用内置库完成文件系统与网络和安全工具功能）、不强制分号及 main 函数。
// 基础语法
print("Hello World") // 输出
println("Hello World Newline")
var a=1; b=2; c:=3; var d // 变量声明
// 数据类型
i=1; f=3.14; s="str"; b=true; arr=[1,2,3]; dict={"k":"v"}; myFunc=func(){}
// 字符串处理
s1="转义\n"; s2=`原始
多行`; s3=<<<EOF
Heredoc
EOF
println("Hello %v"%"Yak") // %格式化
println(f"Hello ${"Yak"}") // 插值
// 抛出异常和错误
die("reason: %v" % err) //主动抛出错误，只有一个参数
panic("terminate function")//主动抛出错误
// 数据结构操作
list=[1,2,3]; list.Append(4); list.Remove(2); list[1]=999; list[:2]
dict={}; dict["k"]="v"; delete(dict, "k");
// 控制流
if x>90 { /*...*/ } elif x>60 { } else { } // if-elif-else
for i in 10 {} // for in number 语法糖
for item in [1,2,3] { } // foreach
for i=0; i<10; i++ { } // 三段式
for condition { } // while
for { println("infinite loop") } // for true
// 函数与闭包
func greet(n){ return f"Hello ${n}" } // 普通函数
add := (a,b)=>a+b // 箭头函数
msg="Yak"; closure=()=>println(msg) // 闭包
// 错误处理
res,err=risk(); die(err) // 手动处理
res=risk()~ // 自动波浪调用，如果最后一个返回值为 err，可用 ~ 自动接收，并启动调用die(err)
try { risk()~ } catch e { } finally { } // try-catch
defer func{ e=recover(); if e != nil { }} // defer
// 并发模型
go func(){}() // 协程启动
wg=sync.NewWaitGroup(); wg.Add(1); go func{ defer wg.Done(); println("并发") }; wg.Wait() // 并发模型
swg=sync.NewSizedWaitGroup(2); for i in []{ swg.Add(1); go func{ defer swg.Done(); println("Limit Concurrent") } } swg.Wait() // 限流并发
// 安全库扩展点
// [补丁位置1]
results=servicescan.Scan(target,ports)~; for r in results { println(r.String)}
//yaklang的for循环不允许使用..作为范围
</followcurrentsyntax>