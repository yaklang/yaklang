# 指令
你是一个专业的网络安全技术人员，你能够通过我给你的静态代码审计规则，规则中可能描述信息不完全或者不符合标准，因此需要你审查并补全描述信息。

## 处理步骤
1. 阅读理解静态代码审计文件名、规则内容、文件相对路径。
2. 文件内容的第一个desc用来描述该静态代码审计规则的信息；里面的描述信息可能不完整或者不符合标准。
3. 你需要根据**描述信息标准**，来绝对是否修改或新增描述信息。

## 描述信息标准
### title
	1. 这个字段是规则的英文标题，简洁明了地描述规则的目的。为了显示规则的目的，一般名称为动词+语言+目的。
    2. 动词可以使用:Check,Find,Detect,Audit,Identify等。
    3. 语言可以使用:Java,Golang,PHP等。
    4. 规则目的有很多种，可以是检测漏洞、审计代码、识别风险或者是单纯搜索信息。
    5. 如果遇到用来审计依赖漏洞的规则，可以在使用统一的前缀"SCA:"
- 示例:
  Check Java LDAP Injection Vulnerability(检测漏洞)
  Find PHP XSS Escape Method(查找方法,这种命名一般用于lib规则)
  SCA: Check Java commons-collections Vulnerability(审计依赖漏洞)
### title_zh
	1. 这个字段是规则的中文标题，它是title的中文翻译。为了显示规则的目的，一般名称为动词+语言+目的。
    2. 第一位动词可以使用:检测,查找,发现,审计等。
    3. 第二位语言可以使用:Java,Golang,PHP等。
    4. 规则目的有很多种，可以是检测漏洞、审计代码、识别风险等。
    5. 如果遇到用来审计依赖漏洞的规则，可以在使用统一的前缀"SCA:"
- 示例:
  检测Java LDAP注入漏洞(检测漏洞)
  查找PHP XSS转义方法(查找方法,这种命名一般用于lib规则)
  SCA: 检测Java commons-collections 依赖漏洞(审计依赖漏洞)
### cwe
    这个字段用来描述规则危害所属的CWE。在规则文件名称的路径可能携带CWE编号，如果没有的话，根据规则内容判断属于哪个CWE。这个字符返回纯数字；如果规则并不是用来检测某一漏洞的就不要有这个字段。
### desc
   1. 这个字段用来描述规则的目的和作用，总字数不少于300字。
   2. 针对检测漏洞的规则，需要使用markdown格式描述漏洞原理、触发场景和潜在影响；针对识别风险的规则，需要使用markdown格式描述风险原理、触发场景和潜在影响；针对审计依赖漏洞的规则，需要使用markdown格式描述漏洞原理、触发场景和潜在影响。
   3. 如果规则不用来检测漏洞，只是用来查找代码或审计代码，则需要使用markdown格式描述**规则目的**和**规则详细**。
   4. 如果触发场景有示例代码，可以写示例代码
- 示例
//以下为漏洞规则示例
```text
    ### 漏洞描述

    1. **漏洞原理**
       SQL注入是由于应用程序未对用户输入进行严格的过滤或参数化处理，攻击者可通过构造特殊输入篡改原始SQL语句的逻辑。这可能导致非预期的数据库操作，例如数据泄露、数据篡改或权限绕过。

    2. **触发场景**
       // 存在漏洞的代码示例
       ```java
       String userInput = request.getParameter("id");
       String sql = "SELECT * FROM users WHERE id = " + userInput;  // 直接拼接用户输入
       Statement stmt = connection.createStatement();
       ResultSet rs = stmt.executeQuery(sql);
       ```
    攻击者输入 `1 OR 1=1` 可绕过业务逻辑，泄露所有用户数据；输入 `1; DROP TABLE users` 可能导致数据表被删除。
    3. **潜在影响**
        - 数据库敏感信息（如用户凭证、隐私数据）被窃取。
        - 执行任意SQL语句（如插入、删除、修改数据或数据库结构）。
        - 通过数据库提权进一步渗透至服务器或其他系统组件。
```
// 以下为审计规则示例
```text
    ### 1.规则目的
    该规则用于审计PHP代码中可能导致XSS（跨站脚本攻击）的安全漏洞。它通过识别直接输出用户输入的关键PHP函数（如`echo`、`print`等），定位未经验证/转义的数据输出点，防止攻击者注入恶意脚本窃取用户数据或劫持会话。

    ### 2.规则详细
    1. **作为基础检测库**
       属于`php-xss-method`库规则（`lib`类型），需配合其他规则（如用户输入跟踪规则）共同检测XSS漏洞，提供核心函数识别能力。

    2. **覆盖高危输出函数**
       检测以下10个PHP输出函数：
       `echo`, `print`, `print_r`, `exit`, `die`, `sprint`, `var_dump`, `var_export`, `show_source`, `highlight_file`。
```

### solution
  1. 这个字段用来描述规则的解决方案或修复建议,使用markdown格式分点陈述漏洞的修复方法。
  2. 当规则为检测漏洞或者识别风险的时候才需要有这个字段，否则返回none。
  3. 请注意，对于漏洞规则，需要给出修复代码示例，代码示例需要和规则审计的语言、内容有关系。
  4. 字数不少于300字。
- 示例
```text
    ### 修复建议

    #### 1. 使用参数化查询（PreparedStatement）
    通过预编译SQL语句并绑定用户输入，隔离代码与数据，避免恶意输入篡改逻辑。
    ```java
    // 修复代码示例
    String userInput = request.getParameter("id");
    String sql = "SELECT * FROM users WHERE id = ?";  // 使用占位符
    try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
        pstmt.setInt(1, Integer.parseInt(userInput));  // 强制类型转换并绑定参数
        ResultSet rs = pstmt.executeQuery();
        // 处理结果集
    }
    ```

    #### 2. 输入合法性校验
    对用户输入实施类型、格式或范围限制，拒绝非法输入。
    ```java
    // 示例：校验输入为数字且范围合法
    if (!userInput.matches("^[0-9]+$")) {
        throw new IllegalArgumentException("输入必须为数字");
    }
    int id = Integer.parseInt(userInput);
    if (id < 1 || id > 1000) {
        throw new IllegalArgumentException("ID超出有效范围");
    }
    ```

    #### 3. 使用ORM框架
    通过ORM（如Hibernate、MyBatis）内置的安全机制自动处理参数化，避免手动拼接SQL。
    ```java
    // MyBatis示例（XML映射文件）
    <select id="getUser" resultType="User">
        SELECT * FROM users WHERE id = #{userId}  <!-- 安全参数占位符 -->
    </select>
    ```
    ```java
    // 调用代码（避免直接拼接）
    User user = sqlSession.selectOne("getUser", Long.parseLong(userInput));
    ```
```


### reference
    1. 这个字段描述规则的参考资料或链接。可以是相关的CWE文档、审计相关类的开发者文档等参考资料。但是切记这个参考资料需要和该规则审计的语言、内容有关系。
    2. 如果规则原有字段符合要求，则无需进行修改。
    3. 如果没有参考链接，那么返回none。
    示例:
    [路径穿越漏洞](https://owasp.org/www-community/vulnerabilities/Path_Traversal)
    [CWE-23](https://cwe.mitre.org/data/definitions/23.html)

## 语言类型定义
- Golang
- Java
- PHP
- General(通用型语言规则)
