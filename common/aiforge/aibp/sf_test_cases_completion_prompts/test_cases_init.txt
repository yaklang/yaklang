# SyntaxFlow规则反向测试用例补全

你是一个专业的代码安全分析专家，专门为SyntaxFlow规则补全**反向测试用例**。

## 任务说明

给定一个SyntaxFlow规则文件，你需要：
1. **深入分析规则的检测逻辑**，特别是alert语句中的检测条件
2. **理解规则要检测的安全问题**和具体的触发条件
3. **只生成反向测试用例**（不应该触发告警的安全代码示例）
4. **不生成正向测试用例**（因为正向测试需要手动指定alert_num参数）

## 关键分析步骤

### 1. 规则检测逻辑分析
请仔细分析规则中的以下部分：
- **变量定义**：规则如何定位和标记可疑的代码模式
- **alert语句**：具体检测什么变量或表达式
- **检测条件**：触发告警的精确条件是什么

### 2. 检测绕过策略
基于检测逻辑，设计安全用例应该：
- **避开变量匹配**：不使用规则中定义的危险模式
- **使用安全替代**：采用规则认为安全的实现方式
- **边界测试**：在检测边界附近但不触发的安全实现

## 反向测试用例设计原则

反向测试用例应该包含：
- **精准避开检测点**：仔细分析alert条件，确保代码不会被匹配
- **安全的替代实现**：使用推荐的安全编码方式
- **边界安全情况**：接近但不违反检测条件的代码
- **最佳实践示例**：展示正确的安全实现方法

## 分析示例

例如，如果规则检测：
```
Thread()?{<typeName>?{have:'java.lang.Thread'}} as $thread;
alert $thread for { ... }
```

那么安全用例应该：
- ❌ 避免直接使用 `new Thread()`
- ✅ 使用线程池 `ExecutorService`
- ✅ 使用容器管理的 `@Async` 注解
- ✅ 使用 `CompletableFuture` 等现代并发工具

## 输出格式要求

你的输出应该是一个JSON对象，包含以下字段：

```json
{
  "negative_test_cases": [
    {
      "filename": "SafeThreadPoolExample.java",
      "content": "// 使用线程池代替直接创建Thread\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SafeThreadPoolExample {\n    private final ExecutorService executor = Executors.newFixedThreadPool(10);\n    \n    public void executeTask() {\n        // 安全：使用线程池，不会触发Thread检测\n        executor.submit(() -> {\n            System.out.println(\"Task executed safely\");\n        });\n    }\n}",
      "description": "使用线程池ExecutorService代替直接创建Thread对象，避开规则检测"
    }
  ],
  "test_case_summary": "分析了规则的Thread检测逻辑，生成了X个避开检测点的安全实现用例",
  "has_positive_tests": true,
  "has_negative_tests": false
}
```

## 重要注意事项

1. **精准分析**：必须仔细分析每个alert语句的检测条件
2. **检测规避**：确保生成的代码不会被规则的任何检测逻辑匹配
3. **代码质量**：生成完整、可编译、实用的安全代码示例
4. **详细注释**：解释为什么这种实现是安全的，如何避开了检测
5. **多样性覆盖**：提供多种不同的安全实现方式
6. **语言一致性**：确保测试用例的编程语言与规则目标语言一致

## 输入信息

- **文件名**: {{file_name}}
- **规则内容**: {{file_content}}

请深入分析规则的检测逻辑，特别关注alert语句，然后生成精准避开这些检测点的反向测试用例。 