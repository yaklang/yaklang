// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package har

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar(in *jlexer.Lexer, out *Timings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blocked":
			out.Blocked = float64(in.Float64())
		case "dns":
			out.DNS = int(in.Int())
		case "ssl":
			out.Ssl = int(in.Int())
		case "connect":
			out.Connect = int(in.Int())
		case "send":
			out.Send = float64(in.Float64())
		case "wait":
			out.Wait = float64(in.Float64())
		case "receive":
			out.Receive = float64(in.Float64())
		case "_blocked_queueing":
			out.BlockedQueueing = float64(in.Float64())
		case "_blocked_proxy":
			out.BlockedProxy = float64(in.Float64())
		case "_workerStart":
			out.WorkerStart = int(in.Int())
		case "_workerReady":
			out.WorkerReady = int(in.Int())
		case "_workerFetchStart":
			out.WorkerFetchStart = int(in.Int())
		case "_workerRespondWithSettled":
			out.WorkerRespondWithSettled = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar(out *jwriter.Writer, in Timings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"blocked\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Blocked))
	}
	{
		const prefix string = ",\"dns\":"
		out.RawString(prefix)
		out.Int(int(in.DNS))
	}
	{
		const prefix string = ",\"ssl\":"
		out.RawString(prefix)
		out.Int(int(in.Ssl))
	}
	{
		const prefix string = ",\"connect\":"
		out.RawString(prefix)
		out.Int(int(in.Connect))
	}
	{
		const prefix string = ",\"send\":"
		out.RawString(prefix)
		out.Float64(float64(in.Send))
	}
	{
		const prefix string = ",\"wait\":"
		out.RawString(prefix)
		out.Float64(float64(in.Wait))
	}
	{
		const prefix string = ",\"receive\":"
		out.RawString(prefix)
		out.Float64(float64(in.Receive))
	}
	{
		const prefix string = ",\"_blocked_queueing\":"
		out.RawString(prefix)
		out.Float64(float64(in.BlockedQueueing))
	}
	{
		const prefix string = ",\"_blocked_proxy\":"
		out.RawString(prefix)
		out.Float64(float64(in.BlockedProxy))
	}
	{
		const prefix string = ",\"_workerStart\":"
		out.RawString(prefix)
		out.Int(int(in.WorkerStart))
	}
	{
		const prefix string = ",\"_workerReady\":"
		out.RawString(prefix)
		out.Int(int(in.WorkerReady))
	}
	{
		const prefix string = ",\"_workerFetchStart\":"
		out.RawString(prefix)
		out.Int(int(in.WorkerFetchStart))
	}
	{
		const prefix string = ",\"_workerRespondWithSettled\":"
		out.RawString(prefix)
		out.Int(int(in.WorkerRespondWithSettled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Timings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Timings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Timings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Timings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar1(in *jlexer.Lexer, out *Pages) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "startedDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedDateTime).UnmarshalJSON(data))
			}
		case "id":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "pageTimings":
			(out.PageTimings).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar1(out *jwriter.Writer, in Pages) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"startedDateTime\":"
		out.RawString(prefix[1:])
		out.Raw((in.StartedDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if true {
		const prefix string = ",\"pageTimings\":"
		out.RawString(prefix)
		(in.PageTimings).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pages) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pages) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pages) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pages) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar1(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar2(in *jlexer.Lexer, out *PageTimings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "onContentLoad":
			out.OnContentLoad = float64(in.Float64())
		case "onLoad":
			out.OnLoad = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar2(out *jwriter.Writer, in PageTimings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"onContentLoad\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.OnContentLoad))
	}
	{
		const prefix string = ",\"onLoad\":"
		out.RawString(prefix)
		out.Float64(float64(in.OnLoad))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PageTimings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PageTimings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PageTimings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PageTimings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar2(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar3(in *jlexer.Lexer, out *Log) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "creator":
			if in.IsNull() {
				in.Skip()
				out.Creator = nil
			} else {
				if out.Creator == nil {
					out.Creator = new(Creator)
				}
				(*out.Creator).UnmarshalEasyJSON(in)
			}
		case "pages":
			if in.IsNull() {
				in.Skip()
				out.Pages = nil
			} else {
				in.Delim('[')
				if out.Pages == nil {
					if !in.IsDelim(']') {
						out.Pages = make([]*Pages, 0, 8)
					} else {
						out.Pages = []*Pages{}
					}
				} else {
					out.Pages = (out.Pages)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Pages
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Pages)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Pages = append(out.Pages, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "entries":
			if in.IsNull() {
				in.Skip()
				out.Entries = nil
			} else {
				if out.Entries == nil {
					out.Entries = new(Entries)
				}
				(*out.Entries).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar3(out *jwriter.Writer, in Log) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		if in.Creator == nil {
			out.RawString("null")
		} else {
			(*in.Creator).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		if in.Pages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Pages {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"entries\":"
		out.RawString(prefix)
		if in.Entries == nil {
			out.RawString("null")
		} else {
			(*in.Entries).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Log) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Log) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Log) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Log) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar3(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar4(in *jlexer.Lexer, out *HTTPArchive) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "log":
			if in.IsNull() {
				in.Skip()
				out.Log = nil
			} else {
				if out.Log == nil {
					out.Log = new(Log)
				}
				(*out.Log).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar4(out *jwriter.Writer, in HTTPArchive) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"log\":"
		out.RawString(prefix[1:])
		if in.Log == nil {
			out.RawString("null")
		} else {
			(*in.Log).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HTTPArchive) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HTTPArchive) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HTTPArchive) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HTTPArchive) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar4(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar5(in *jlexer.Lexer, out *HARResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.StatusCode = int(in.Int())
		case "statusText":
			out.StatusText = string(in.String())
		case "httpVersion":
			out.HTTPVersion = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
				out.Headers = nil
			} else {
				in.Delim('[')
				if out.Headers == nil {
					if !in.IsDelim(']') {
						out.Headers = make([]*HARKVPair, 0, 8)
					} else {
						out.Headers = []*HARKVPair{}
					}
				} else {
					out.Headers = (out.Headers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *HARKVPair
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(HARKVPair)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Headers = append(out.Headers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cookies":
			if in.IsNull() {
				in.Skip()
				out.Cookies = nil
			} else {
				in.Delim('[')
				if out.Cookies == nil {
					if !in.IsDelim(']') {
						out.Cookies = make([]*HARKVPair, 0, 8)
					} else {
						out.Cookies = []*HARKVPair{}
					}
				} else {
					out.Cookies = (out.Cookies)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *HARKVPair
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(HARKVPair)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Cookies = append(out.Cookies, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(HARHTTPContent)
				}
				(*out.Content).UnmarshalEasyJSON(in)
			}
		case "headersSize":
			out.HeadersSize = int(in.Int())
		case "bodySize":
			out.BodySize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar5(out *jwriter.Writer, in HARResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StatusCode))
	}
	{
		const prefix string = ",\"statusText\":"
		out.RawString(prefix)
		out.String(string(in.StatusText))
	}
	{
		const prefix string = ",\"httpVersion\":"
		out.RawString(prefix)
		out.String(string(in.HTTPVersion))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Headers {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cookies\":"
		out.RawString(prefix)
		if in.Cookies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Cookies {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		if in.Content == nil {
			out.RawString("null")
		} else {
			(*in.Content).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"headersSize\":"
		out.RawString(prefix)
		out.Int(int(in.HeadersSize))
	}
	{
		const prefix string = ",\"bodySize\":"
		out.RawString(prefix)
		out.Int(int(in.BodySize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HARResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HARResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HARResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HARResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar5(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar6(in *jlexer.Lexer, out *HARRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "httpVersion":
			out.HTTPVersion = string(in.String())
		case "queryString":
			if in.IsNull() {
				in.Skip()
				out.QueryString = nil
			} else {
				in.Delim('[')
				if out.QueryString == nil {
					if !in.IsDelim(']') {
						out.QueryString = make([]*HARKVPair, 0, 8)
					} else {
						out.QueryString = []*HARKVPair{}
					}
				} else {
					out.QueryString = (out.QueryString)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *HARKVPair
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(HARKVPair)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.QueryString = append(out.QueryString, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "headers":
			if in.IsNull() {
				in.Skip()
				out.Headers = nil
			} else {
				in.Delim('[')
				if out.Headers == nil {
					if !in.IsDelim(']') {
						out.Headers = make([]*HARKVPair, 0, 8)
					} else {
						out.Headers = []*HARKVPair{}
					}
				} else {
					out.Headers = (out.Headers)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *HARKVPair
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(HARKVPair)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.Headers = append(out.Headers, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "headersSize":
			out.HeadersSize = int(in.Int())
		case "bodySize":
			out.BodySize = int(in.Int())
		case "postData":
			if in.IsNull() {
				in.Skip()
				out.PostData = nil
			} else {
				if out.PostData == nil {
					out.PostData = new(HARHTTPPostData)
				}
				(*out.PostData).UnmarshalEasyJSON(in)
			}
		case "timings":
			if in.IsNull() {
				in.Skip()
				out.Timings = nil
			} else {
				if out.Timings == nil {
					out.Timings = new(Timings)
				}
				(*out.Timings).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar6(out *jwriter.Writer, in HARRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"httpVersion\":"
		out.RawString(prefix)
		out.String(string(in.HTTPVersion))
	}
	{
		const prefix string = ",\"queryString\":"
		out.RawString(prefix)
		if in.QueryString == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.QueryString {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Headers {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"headersSize\":"
		out.RawString(prefix)
		out.Int(int(in.HeadersSize))
	}
	{
		const prefix string = ",\"bodySize\":"
		out.RawString(prefix)
		out.Int(int(in.BodySize))
	}
	{
		const prefix string = ",\"postData\":"
		out.RawString(prefix)
		if in.PostData == nil {
			out.RawString("null")
		} else {
			(*in.PostData).MarshalEasyJSON(out)
		}
	}
	if in.Timings != nil {
		const prefix string = ",\"timings\":"
		out.RawString(prefix)
		(*in.Timings).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HARRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HARRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HARRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HARRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar6(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar7(in *jlexer.Lexer, out *HARKVPair) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar7(out *jwriter.Writer, in HARKVPair) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HARKVPair) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HARKVPair) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HARKVPair) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HARKVPair) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar7(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar8(in *jlexer.Lexer, out *HARHTTPPostData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimeType":
			out.MimeType = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
				out.Params = nil
			} else {
				in.Delim('[')
				if out.Params == nil {
					if !in.IsDelim(']') {
						out.Params = make([]*HARHTTPParam, 0, 8)
					} else {
						out.Params = []*HARHTTPParam{}
					}
				} else {
					out.Params = (out.Params)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *HARHTTPParam
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(HARHTTPParam)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Params = append(out.Params, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar8(out *jwriter.Writer, in HARHTTPPostData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mimeType\":"
		out.RawString(prefix[1:])
		out.String(string(in.MimeType))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Params {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HARHTTPPostData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HARHTTPPostData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HARHTTPPostData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HARHTTPPostData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar8(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar9(in *jlexer.Lexer, out *HARHTTPParam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "fileName":
			out.FileName = string(in.String())
		case "contentType":
			out.ContentType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar9(out *jwriter.Writer, in HARHTTPParam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"fileName\":"
		out.RawString(prefix)
		out.String(string(in.FileName))
	}
	{
		const prefix string = ",\"contentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HARHTTPParam) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HARHTTPParam) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HARHTTPParam) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HARHTTPParam) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar9(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar10(in *jlexer.Lexer, out *HARHTTPContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int(in.Int())
		case "mimeType":
			out.MimeType = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "encoding":
			out.Encoding = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar10(out *jwriter.Writer, in HARHTTPContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"mimeType\":"
		out.RawString(prefix)
		out.String(string(in.MimeType))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"encoding\":"
		out.RawString(prefix)
		out.String(string(in.Encoding))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HARHTTPContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HARHTTPContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HARHTTPContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HARHTTPContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar10(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar11(in *jlexer.Lexer, out *HAREntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(HARRequest)
				}
				(*out.Request).UnmarshalEasyJSON(in)
			}
		case "response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				if out.Response == nil {
					out.Response = new(HARResponse)
				}
				(*out.Response).UnmarshalEasyJSON(in)
			}
		case "serverIPAddress":
			out.ServerIPAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar11(out *jwriter.Writer, in HAREntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix[1:])
		if in.Request == nil {
			out.RawString("null")
		} else {
			(*in.Request).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"response\":"
		out.RawString(prefix)
		if in.Response == nil {
			out.RawString("null")
		} else {
			(*in.Response).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"serverIPAddress\":"
		out.RawString(prefix)
		out.String(string(in.ServerIPAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HAREntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HAREntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HAREntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HAREntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar11(l, v)
}

// MarshalJSON supports json.Marshaler interface
func (v Entries) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entries) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Entries) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entries) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar12(l, v)
}
func easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar13(in *jlexer.Lexer, out *Creator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar13(out *jwriter.Writer, in Creator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Creator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Creator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46e2e00bEncodeGithubComYaklangYaklangCommonHar13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Creator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Creator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46e2e00bDecodeGithubComYaklangYaklangCommonHar13(l, v)
}
