// Code generated by export-generator. DO NOT EDIT.

package poc

import (
	"context"
	lowhttp "github.com/yaklang/yaklang/common/utils/lowhttp"
	"io"
)

func LowhttpOptWithMaxContentLength(m int) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithMaxContentLength(m))
	}
}

func LowhttpOptWithETCHosts(hosts map[string]string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithETCHosts(hosts))
	}
}

// stream 是一个请求选项参数，可以设置一个回调函数，如果 body 读取了，将会复制一份给这个流，在这个流中处理 body 是不会影响最终结果的，一般用于处理较长的 chunk 数据
func LowhttpOptWithBodyStreamReaderHandler(t func([]byte, io.ReadCloser)) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithBodyStreamReaderHandler(t))
	}
}

func LowhttpOptWithVerifyCertificate(b bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithVerifyCertificate(b))
	}
}

func LowhttpOptWithGmTLS(b bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithGmTLS(b))
	}
}

/*
dnsNoCache 是一个请求选项参数，用于指定请求时不使用DNS缓存，默认使用DNS缓存
Example:
```
// 向 example.com 发起请求，不使用DNS缓存
poc.Get("https://exmaple.com", poc.dnsNoCache(true))
```
*/
func LowhttpOptWithDNSNoCache(b bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithDNSNoCache(b))
	}
}

/*
dnsServer 是一个请求选项参数，用于指定请求所使用的DNS服务器，默认使用系统自带的DNS服务器
Example:
```
// 向 example.com 发起请求，使用指定的DNS服务器
poc.Get("https://exmaple.com", poc.dnsServer("8.8.8.8", "1.1.1.1"))
```
*/
func LowhttpOptWithExportedDNSServers(servers ...string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithExportedDNSServers(servers...))
	}
}

func LowhttpOptWithRuntimeId(runtimeId string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithRuntimeId(runtimeId))
	}
}

func LowhttpOptWithFromPlugin(fromPlugin string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithFromPlugin(fromPlugin))
	}
}

/*
username 是一个请求选项参数，用于指定认证时的用户名
Example:
```
poc.Get("https://www.example.com", poc.username("admin"), poc.password("admin"))
```
*/
func LowhttpOptWithUsername(username string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithUsername(username))
	}
}

/*
password 是一个请求选项参数，用于指定认证时的密码
Example:
```
poc.Get("https://www.example.com", poc.username("admin"), poc.password("admin"))
```
*/
func LowhttpOptWithPassword(password string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithPassword(password))
	}
}

/*
source 是一个请求选项参数，用于在请求记录保存到数据库时标识此次请求的来源
Example:
```
poc.Get("https://exmaple.com", poc.save(true), poc.source("test")) // 向 example.com 发起请求，会将此次请求保存到数据库中，指示此次请求的来源为test
```
*/
func LowhttpOptWithSource(s string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithSource(s))
	}
}

/*
host 是一个请求选项参数，用于指定实际请求的 host，如果没有设置该请求选项，则会依据原始请求报文中的Host字段来确定实际请求的host
Example:
```
poc.HTTP(poc.BasicRequest(), poc.host("yaklang.com")) // 实际上请求 yaklang.com
```
*/
func LowhttpOptWithHost(host string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithHost(host))
	}
}

/*
port 是一个请求选项参数，用于指定实际请求的端口，如果没有设置该请求选项，则会依据原始请求报文中的Host字段来确定实际请求的端口
Example:
```
poc.HTTP(poc.BasicRequest(), poc.host("yaklang.com"), poc.port(443), poc.https(true)) // 实际上请求 yaklang.com 的443端口
```
*/
func LowhttpOptWithPort(port int) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithPort(port))
	}
}

func LowhttpOptWithEnableSystemProxyFromEnv(b bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithEnableSystemProxyFromEnv(b))
	}
}

/*
https 是一个请求选项参数，用于指定是否使用 https 协议，默认为 false 即使用 http 协议
Example:
```
poc.HTTP(poc.BasicRequest(), poc.https(true)) // 向 example.com 发起请求，使用 https 协议
```
*/
func LowhttpOptWithHttps(https bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithHttps(https))
	}
}

/*
http2 是一个请求选项参数，用于指定是否使用 http2 协议，默认为 false 即使用http1协议
Example:
```
poc.Get("https://www.example.com", poc.http2(true), poc.https(true)) // 向 www.example.com 发起请求，使用 http2 协议
```
*/
func LowhttpOptWithHttp2(Http2 bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithHttp2(Http2))
	}
}

/*
connectTimeout 是一个请求选项参数，用于指定连接超时时间，默认为15秒
Example:
```
poc.Get("https://www.example.com", poc.timeout(15)) // 向 www.baidu.com 发起请求，读取超时时间为15秒
```
*/
func LowhttpOptWithConnectTimeoutFloat(i float64) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithConnectTimeoutFloat(i))
	}
}

/*
timeout 是一个请求选项参数，用于指定读取超时时间，默认为15秒
Example:
```
poc.Get("https://www.example.com", poc.timeout(15)) // 向 www.baidu.com 发起请求，读取超时时间为15秒
```
*/
func LowhttpOptWithTimeoutFloat(i float64) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithTimeoutFloat(i))
	}
}

/*
retryTimes 是一个请求选项参数，用于指定请求失败时的重试次数，需要搭配 retryInStatusCode 或 retryNotInStatusCode 使用，来设置在什么响应码的情况下重试
Example:
```
poc.HTTP(poc.BasicRequest(), poc.retryTimes(5), poc.retryInStatusCode(500, 502)) // 向 example.com 发起请求，如果响应状态码500或502则进行重试，最多进行5次重试
```
*/
func LowhttpOptWithRetryTimes(retryTimes int) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithRetryTimes(retryTimes))
	}
}

/*
retryInStatusCode 是一个请求选项参数，用于指定在某些响应状态码的情况下重试，需要搭配 retryTimes 使用
Example:
```
poc.HTTP(poc.BasicRequest(), poc.retryTimes(5), poc.retryInStatusCode(500, 502)) // 向 example.com 发起请求，如果响应状态码500或502则进行重试，最多进行5次重试
```
*/
func LowhttpOptWithRetryInStatusCodes(sc ...int) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithRetryInStatusCodes(sc...))
	}
}

/*
retryNotInStatusCode 是一个请求选项参数，用于指定非某些响应状态码的情况下重试，需要搭配 retryTimes 使用
Example:
```
poc.HTTP(poc.BasicRequest(), poc.retryTimes(5), poc.retryNotInStatusCode(200)) // 向 example.com 发起请求，如果响应状态码不等于200则进行重试，最多进行5次重试
```
*/
func LowhttpOptWithRetryNotInStatusCodes(sc ...int) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithRetryNotInStatusCodes(sc...))
	}
}

/*
retryWaitTime 是一个请求选项参数，用于指定重试时最小等待时间，需要搭配 retryTimes 使用，默认为0.1秒
Example:
```
poc.HTTP(poc.BasicRequest(), poc.retryTimes(5), poc.retryNotInStatusCode(200), poc.retryWaitTime(0.1)) // 向 example.com 发起请求，如果响应状态码不等于200则进行重试，最多进行5次重试，重试时最小等待0.1秒
```
*/
func LowhttpOptWithRetryWaitTimeFloat(i float64) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithRetryWaitTimeFloat(i))
	}
}

/*
retryMaxWaitTime 是一个请求选项参数，用于指定重试时最大等待时间，需要搭配 retryTimes 使用，默认为2秒
Example:
```
poc.HTTP(poc.BasicRequest(), poc.retryTimes(5), poc.retryNotInStatusCode(200), poc.retryWaitTime(2)) // 向 example.com 发起请求，如果响应状态码不等于200则进行重试，最多进行5次重试，重试时最多等待2秒
```
*/
func LowhttpOptWithRetryMaxWaitTimeFloat(i float64) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithRetryMaxWaitTimeFloat(i))
	}
}

/*
noRedirect 是一个请求选项参数，用于指定是否跟踪重定向，默认为 false 即会自动跟踪重定向
Example:
```
poc.HTTP(poc.BasicRequest(), poc.noRedirect()) // 向 example.com 发起请求，如果响应重定向到其他链接也不会自动跟踪重定向
```
*/
func LowhttpOptWithNoRedirect(b bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithNoRedirect(b))
	}
}

/*
redirectTimes 是一个请求选项参数，用于指定最大重定向次数，默认为5次
Example:
```
poc.HTTP(poc.BasicRequest(), poc.redirectTimes(5)) // 向 example.com 发起请求，如果响应重定向到其他链接，则会自动跟踪重定向最多5次
```
*/
func LowhttpOptWithRedirectTimes(redirectTimes int) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithRedirectTimes(redirectTimes))
	}
}

/*
jsRedirect 是一个请求选项参数，用于指定是否跟踪JS重定向，默认为false即不会自动跟踪JS重定向
Example:
```
poc.HTTP(poc.BasicRequest(), poc.redirectTimes(5), poc.jsRedirect(true)) // 向 www.baidu.com 发起请求，如果响应重定向到其他链接也会自动跟踪JS重定向，最多进行5次重定向
```
*/
func LowhttpOptWithJsRedirect(jsRedirect bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithJsRedirect(jsRedirect))
	}
}

/*
context 是一个请求选项参数，用于指定请求的上下文
Example:
```
ctx = context.New()
poc.Get("https://exmaple.com", poc.withContext(ctx)) // 向 example.com 发起请求，使用指定的上下文
```
*/
func LowhttpOptWithContext(ctx context.Context) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithContext(ctx))
	}
}

/*
proxy 是一个请求选项参数，用于指定请求使用的代理，可以指定多个代理，默认会使用系统代理
Example:
```
poc.HTTP(poc.BasicRequest(), poc.proxy("http://127.0.0.1:7890")) // 向 example.com 发起请求，使用 http://127.0.0.1:7890 代理
```
*/
func LowhttpOptWithProxy(proxy ...string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithProxy(proxy...))
	}
}

func LowhttpOptWithProxyGetter(getter func() []string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithProxyGetter(getter))
	}
}

func LowhttpOptWithForceLegacyProxy(b bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithForceLegacyProxy(b))
	}
}

/*
save 是一个请求选项参数，用于指定是否将此次请求的记录保存在数据库中，默认为true即会保存到数据库
Example:
```
poc.Get("https://exmaple.com", poc.save(true)) // 向 example.com 发起请求，会将此次请求保存到数据库中
```
*/
func LowhttpOptWithSaveHTTPFlow(b bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithSaveHTTPFlow(b))
	}
}

/*
noFixContentLength 是一个请求选项参数，用于指定是否修复响应报文中的 Content-Length 字段，默认为 false 即会自动修复Content-Length字段
Example:
```
poc.HTTP(poc.BasicRequest(), poc.noFixContentLength()) // 向 example.com 发起请求，如果响应报文中的Content-Length字段不正确或不存在	也不会自动修复
```
*/
func LowhttpOptWithNoFixContentLength(noFixContentLength bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithNoFixContentLength(noFixContentLength))
	}
}

/*
redirectHandler 是一个请求选项参数，用于作为重定向处理函数，如果设置了该选项，则会在重定向时调用该函数，如果该函数返回 true，则会继续重定向，否则不会重定向。其第一个参数为是否使用 https 协议，第二个参数为原始请求报文，第三个参数为原始响应报文
Example:
```
count = 3
poc.Get("https://pie.dev/redirect/5", poc.redirectHandler(func(https, req, rsp) {
count--
return count >= 0
})) // 向 pie.edv 发起请求，使用自定义 redirectHandler 函数，使用 count 控制，进行最多3次重定向
```
*/
func LowhttpOptWithRedirectHandler(redirectHandler func(bool, []byte, []byte) bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithRedirectHandler(redirectHandler))
	}
}

/*
session 是一个请求选项参数，用于指定请求的session，参数可以是任意类型的值，用此值做标识符从而找到唯一的session。使用session进行请求时会自动管理cookie，这在登录后操作的场景非常有用
Example:
```
poc.Get("https://pie.dev/cookies/set/AAA/BBB", poc.session("test")) // 向 pie.dev 发起第一次请求，这会设置一个名为AAA，值为BBB的cookie
rsp, req, err = poc.Get("https://pie.dev/cookies", poc.session("test")) // 向 pie.dev 发起第二次请求，这个请求会输出所有的cookies，可以看到第一次请求设置的cookie已经存在了
```
*/
func LowhttpOptWithSession(session any) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithSession(session))
	}
}

/*
connPool 是一个请求选项参数，用于指定是否使用连接池，默认不使用连接池
Example:
```
rsp, req, err = poc.HTTP(x`POST /post HTTP/1.1
Content-Type: application/json
Host: pie.dev

{"key": "asd"}`, poc.connPool(true)) // 使用连接池发送请求，这在发送多个请求时非常有用
```
*/
func LowhttpOptWithConnPool(b bool) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithConnPool(b))
	}
}

/*
sni 是一个请求选项参数，用于指定使用 tls(https) 协议时的 服务器名称指示(SNI)
Example:
```
poc.Get("https://www.example.com", poc.sni("google.com"))
```
*/
func LowhttpOptWithSNI(sni string) PocConfigOption {
	return func(config *PocConfig) {
		config.LowhttpOpts = append(config.LowhttpOpts, lowhttp.WithSNI(sni))
	}
}

func init() {
	PoCExports["maxContentLength"] = LowhttpOptWithMaxContentLength
	PoCExports["etcHosts"] = LowhttpOptWithETCHosts
	PoCExports["stream"] = LowhttpOptWithBodyStreamReaderHandler
	PoCExports["verifyCertificate"] = LowhttpOptWithVerifyCertificate
	PoCExports["gmTLS"] = LowhttpOptWithGmTLS
	PoCExports["dnsNoCache"] = LowhttpOptWithDNSNoCache
	PoCExports["dnsServer"] = LowhttpOptWithExportedDNSServers
	PoCExports["runtimeId"] = LowhttpOptWithRuntimeId
	PoCExports["fromPlugin"] = LowhttpOptWithFromPlugin
	PoCExports["username"] = LowhttpOptWithUsername
	PoCExports["password"] = LowhttpOptWithPassword
	PoCExports["source"] = LowhttpOptWithSource
	PoCExports["host"] = LowhttpOptWithHost
	PoCExports["port"] = LowhttpOptWithPort
	PoCExports["enableSystemProxyFromEnv"] = LowhttpOptWithEnableSystemProxyFromEnv
	PoCExports["https"] = LowhttpOptWithHttps
	PoCExports["http2"] = LowhttpOptWithHttp2
	PoCExports["connectTimeout"] = LowhttpOptWithConnectTimeoutFloat
	PoCExports["timeout"] = LowhttpOptWithTimeoutFloat
	PoCExports["retryTimes"] = LowhttpOptWithRetryTimes
	PoCExports["retryInStatusCode"] = LowhttpOptWithRetryInStatusCodes
	PoCExports["retryNotInStatusCode"] = LowhttpOptWithRetryNotInStatusCodes
	PoCExports["retryWaitTime"] = LowhttpOptWithRetryWaitTimeFloat
	PoCExports["retryMaxWaitTime"] = LowhttpOptWithRetryMaxWaitTimeFloat
	PoCExports["noRedirect"] = LowhttpOptWithNoRedirect
	PoCExports["redirectTimes"] = LowhttpOptWithRedirectTimes
	PoCExports["jsRedirect"] = LowhttpOptWithJsRedirect
	PoCExports["context"] = LowhttpOptWithContext
	PoCExports["proxy"] = LowhttpOptWithProxy
	PoCExports["proxyGetter"] = LowhttpOptWithProxyGetter
	PoCExports["forceLegacyProxy"] = LowhttpOptWithForceLegacyProxy
	PoCExports["save"] = LowhttpOptWithSaveHTTPFlow
	PoCExports["noFixContentLength"] = LowhttpOptWithNoFixContentLength
	PoCExports["redirectHandler"] = LowhttpOptWithRedirectHandler
	PoCExports["session"] = LowhttpOptWithSession
	PoCExports["connPool"] = LowhttpOptWithConnPool
	PoCExports["sni"] = LowhttpOptWithSNI
}
