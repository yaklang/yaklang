package lowhttp

import (
	"fmt"
	"github.com/saintfish/chardet"
	"github.com/stretchr/testify/assert"
	"github.com/yaklang/yaklang/common/yak/yaklib/codec"
	"testing"
)

func TestResponseJavaScriptNoSniff(t *testing.T) {
	rsp, body, err := FixHTTPResponse([]byte("HTTP/1.1 200 OK\r\n" +
		"Content-Type: application/javascript\r\n" +
		"X-Content-Type-Options: nosniff\r\n" +
		"\r\n" +
		"// 你好我是 JS"))
	if err != nil {
		t.Fatal(err)
	}

	test := assert.New(t)
	fmt.Println(string(body))
	test.Contains(string(body), "你好我是 JS")
	fmt.Println("-------------------------------------")
	fmt.Println(string(rsp))
	test.Contains(string(rsp), "你好我是 JS")

	rspBase64 := ``
	rsp, _ = codec.DecodeBase64(rspBase64)
	det := chardet.NewTextDetector()
	result, err := det.DetectBest(rsp)
	if err != nil {
		t.Fatal(err)
	}
	test.Equal(result.Charset, "GB-18030")

	rsp, _, _ = FixHTTPResponse(rsp)
	fmt.Println(string(rsp))
}
