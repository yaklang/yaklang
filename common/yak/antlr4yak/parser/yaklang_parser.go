// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package parser // YaklangParser

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type YaklangParser struct {
	*antlr.BaseParser
}

var yaklangparserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func yaklangparserParserInit() {
	staticData := &yaklangparserParserStaticData
	staticData.literalNames = []string{
		"", "'panic'", "'recover'", "'if'", "'elif'", "'else'", "'switch'",
		"'case'", "'default'", "'for'", "'continue'", "'break'", "'return'",
		"'include'", "'try'", "'catch'", "'finally'", "'importmod'", "'as'",
		"'export'", "'defer'", "'go'", "'range'", "", "'map'", "'chan'", "'class'",
		"'new'", "'make'", "'true'", "'false'", "'in'", "'not'", "'assert'",
		"", "", "'undefined'", "'fallthrough'", "'nil'", "", "", "'*'", "'/'",
		"'%'", "'<<'", "'<'", "'>>'", "'>'", "'&'", "'&^'", "'+'", "'-'", "'^'",
		"'|'", "'=='", "'<='", "'>='", "'!='", "'<-'", "'&&'", "'||'", "'?'",
		"':'", "'['", "']'", "'('", "')'", "'{'", "", "'}'", "','", "'='", "'~'",
		"':='", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='",
		"'<<='", "'>>='", "'&='", "'|='", "'&^='", "';'", "'...'", "'=>'", "'<>'",
		"'!'", "'.'", "", "'/*'", "'*/'", "'`'", "", "'<<<'", "", "'\\n'",
	}
	staticData.symbolicNames = []string{
		"", "Panic", "Recover", "If", "Elif", "Else", "Switch", "Case", "Default",
		"For", "Continue", "Break", "Return", "Include", "Try", "Catch", "Finally",
		"Importmod", "As", "Export", "Defer", "Go", "Range", "Func", "Map",
		"Chan", "Class", "New", "Make", "True", "False", "In", "NotLiteral",
		"Assert", "Var", "VarTypeName", "UndefinedLiteral", "Fallthrough", "NilLiteral",
		"Identifier", "IdentifierWithDollar", "Mul", "Div", "Mod", "LtLt", "Lt",
		"GtGt", "Gt", "Amp", "AmpNot", "Plus", "Sub", "Xor", "Xand", "Eq", "LtEq",
		"GtEq", "Neq", "ChanIn", "LogicAnd", "LogicOr", "Question", "Colon",
		"LBracket", "RBracket", "LParen", "RParen", "LBrace", "TemplateCloseBrace",
		"RBrace", "Comma", "AssignEq", "Wavy", "ColonAssignEq", "PlusPlus",
		"SubSub", "PlusEq", "MinusEq", "MulEq", "DivEq", "ModEq", "BitOrEq",
		"LtLtEq", "GtGtEq", "AmpEq", "BitAndEq", "BitAndNotEq", "SemiColon",
		"Ellipsis", "EqGt", "LtGt", "Not", "Dot", "WS", "CommentStart", "CommentEnd",
		"BackTickL", "COMMENT", "StartNowDoc", "LINE_COMMENT", "LF", "EOS",
		"IntegerLiteral", "FloatLiteral", "TemplateSingleQuoteStringStart",
		"TemplateDoubleQuoteStringStart", "TemplateBackTickStringStart", "StringLiteral",
		"CharacterLiteral", "TemplateSingleQuoteStringCharacterStringEnd", "TemplateSingleQuoteStringCharacter",
		"TemplateSingleQuoteStringStartExpression", "TemplateDoubleQuoteStringCharacterStringEnd",
		"TemplateDoubleQuoteStringCharacter", "TemplateDoubleQuoteStringStartExpression",
		"TemplateBackTickStringCharacterStringEnd", "TemplateBackTickStringCharacter",
		"TemplateBackTickStringStartExpression", "HereDocIdentifierName", "HereDocIdentifierBreak",
		"CRLFEndDoc", "CRLFHereDocText", "LFEndDoc", "LFHereDocText",
	}
	staticData.ruleNames = []string{
		"program", "statementList", "statement", "tryStmt", "expressionStmt",
		"assignExpressionStmt", "lineCommentStmt", "includeStmt", "deferStmt",
		"goStmt", "assertStmt", "fallthroughStmt", "breakStmt", "continueStmt",
		"returnStmt", "callExpr", "functionCallExpr", "forStmt", "forStmtCond",
		"forFirstExpr", "forThirdExpr", "forRangeStmt", "switchStmt", "panicStmt",
		"recoverStmt", "ifStmt", "elseBlock", "block", "empty", "inplaceAssignOperator",
		"assignExpression", "declareVariableExpressionStmt", "declareVariableExpression",
		"declareVariableOnly", "declareAndAssignExpression", "leftExpressionList",
		"unaryOperator", "bitBinaryOperator", "additiveBinaryOperator", "multiplicativeBinaryOperator",
		"comparisonBinaryOperator", "leftExpression", "leftMemberCall", "leftSliceCall",
		"expression", "parenExpression", "makeExpression", "typeLiteral", "sliceTypeLiteral",
		"mapTypeLiteral", "instanceCode", "anonymousFunctionDecl", "functionNameDecl",
		"functionParamDecl", "functionCall", "ordinaryArguments", "memberCall",
		"sliceCall", "literal", "numericLiteral", "stringLiteral", "crlfHereDoc",
		"lfHereDoc", "templateSingleQuoteStringLiteral", "templateDoubleQuoteStringLiteral",
		"templateBackTickStringLiteral", "templateStringLiteral", "templateSingleQuoteStringAtom",
		"templateDoubleQuoteStringAtom", "templateBackTickStringAtom", "boolLiteral",
		"characterLiteral", "sliceLiteral", "sliceTypedLiteral", "expressionList",
		"expressionListMultiline", "mapLiteral", "mapTypedLiteral", "mapPairs",
		"mapPair", "ws", "eos",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 123, 1093, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 1, 0, 5, 0, 166, 8, 0, 10,
		0, 12, 0, 169, 9, 0, 1, 0, 1, 0, 1, 0, 1, 1, 4, 1, 175, 8, 1, 11, 1, 12,
		1, 176, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 3, 2, 226, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 232, 8, 3, 1, 3, 1, 3,
		1, 3, 3, 3, 237, 8, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7,
		1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 3, 8, 252, 8, 8, 1, 9, 1, 9, 1, 9, 1, 10,
		1, 10, 1, 10, 1, 10, 5, 10, 261, 8, 10, 10, 10, 12, 10, 264, 9, 10, 1,
		11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 3, 14, 274, 8, 14,
		1, 15, 1, 15, 3, 15, 278, 8, 15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 290, 8, 17, 1, 17, 1, 17, 1, 18,
		3, 18, 295, 8, 18, 1, 18, 1, 18, 3, 18, 299, 8, 18, 1, 18, 1, 18, 3, 18,
		303, 8, 18, 1, 19, 1, 19, 3, 19, 307, 8, 19, 1, 20, 1, 20, 3, 20, 311,
		8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 317, 8, 21, 1, 21, 1, 21, 3,
		21, 321, 8, 21, 1, 21, 3, 21, 324, 8, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1,
		22, 3, 22, 331, 8, 22, 1, 22, 1, 22, 5, 22, 335, 8, 22, 10, 22, 12, 22,
		338, 9, 22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 344, 8, 22, 5, 22, 346,
		8, 22, 10, 22, 12, 22, 349, 9, 22, 1, 22, 5, 22, 352, 8, 22, 10, 22, 12,
		22, 355, 9, 22, 1, 22, 1, 22, 1, 22, 3, 22, 360, 8, 22, 3, 22, 362, 8,
		22, 1, 22, 5, 22, 365, 8, 22, 10, 22, 12, 22, 368, 9, 22, 1, 22, 1, 22,
		1, 23, 1, 23, 1, 23, 5, 23, 375, 8, 23, 10, 23, 12, 23, 378, 9, 23, 1,
		23, 1, 23, 5, 23, 382, 8, 23, 10, 23, 12, 23, 385, 9, 23, 1, 23, 1, 23,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1,
		25, 5, 25, 400, 8, 25, 10, 25, 12, 25, 403, 9, 25, 1, 25, 3, 25, 406, 8,
		25, 1, 26, 1, 26, 1, 26, 3, 26, 411, 8, 26, 1, 27, 1, 27, 5, 27, 415, 8,
		27, 10, 27, 12, 27, 418, 9, 27, 1, 27, 3, 27, 421, 8, 27, 1, 27, 5, 27,
		424, 8, 27, 10, 27, 12, 27, 427, 9, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1,
		28, 3, 28, 434, 8, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 449, 8, 30, 1, 31, 1,
		31, 1, 32, 1, 32, 3, 32, 455, 8, 32, 1, 33, 1, 33, 1, 33, 1, 33, 5, 33,
		461, 8, 33, 10, 33, 12, 33, 464, 9, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1,
		34, 1, 35, 1, 35, 1, 35, 5, 35, 474, 8, 35, 10, 35, 12, 35, 477, 9, 35,
		1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1,
		41, 1, 41, 1, 41, 3, 41, 492, 8, 41, 1, 41, 3, 41, 495, 8, 41, 1, 42, 1,
		42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44,
		508, 8, 44, 10, 44, 12, 44, 511, 9, 44, 1, 44, 3, 44, 514, 8, 44, 1, 44,
		5, 44, 517, 8, 44, 10, 44, 12, 44, 520, 9, 44, 1, 44, 1, 44, 1, 44, 1,
		44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44,
		535, 8, 44, 1, 44, 1, 44, 1, 44, 5, 44, 540, 8, 44, 10, 44, 12, 44, 543,
		9, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44, 550, 8, 44, 10, 44, 12,
		44, 553, 9, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44, 560, 8, 44, 10,
		44, 12, 44, 563, 9, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44, 570,
		8, 44, 10, 44, 12, 44, 573, 9, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 579,
		8, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44, 586, 8, 44, 10, 44, 12,
		44, 589, 9, 44, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44, 595, 8, 44, 10, 44,
		12, 44, 598, 9, 44, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44, 604, 8, 44, 10,
		44, 12, 44, 607, 9, 44, 1, 44, 1, 44, 5, 44, 611, 8, 44, 10, 44, 12, 44,
		614, 9, 44, 1, 44, 1, 44, 5, 44, 618, 8, 44, 10, 44, 12, 44, 621, 9, 44,
		1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 632,
		8, 44, 5, 44, 634, 8, 44, 10, 44, 12, 44, 637, 9, 44, 1, 45, 1, 45, 3,
		45, 641, 8, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 5, 46, 648, 8, 46, 10,
		46, 12, 46, 651, 9, 46, 1, 46, 1, 46, 1, 46, 5, 46, 656, 8, 46, 10, 46,
		12, 46, 659, 9, 46, 1, 46, 3, 46, 662, 8, 46, 1, 46, 1, 46, 1, 47, 1, 47,
		1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 672, 8, 47, 1, 48, 1, 48, 1, 48, 1,
		48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 51,
		1, 51, 3, 51, 689, 8, 51, 1, 51, 1, 51, 3, 51, 693, 8, 51, 1, 51, 1, 51,
		1, 51, 1, 51, 3, 51, 699, 8, 51, 1, 51, 1, 51, 3, 51, 703, 8, 51, 1, 51,
		1, 51, 1, 51, 3, 51, 708, 8, 51, 3, 51, 710, 8, 51, 1, 52, 1, 52, 1, 53,
		5, 53, 715, 8, 53, 10, 53, 12, 53, 718, 9, 53, 1, 53, 1, 53, 5, 53, 722,
		8, 53, 10, 53, 12, 53, 725, 9, 53, 1, 53, 1, 53, 5, 53, 729, 8, 53, 10,
		53, 12, 53, 732, 9, 53, 1, 53, 5, 53, 735, 8, 53, 10, 53, 12, 53, 738,
		9, 53, 1, 53, 3, 53, 741, 8, 53, 1, 53, 5, 53, 744, 8, 53, 10, 53, 12,
		53, 747, 9, 53, 1, 53, 3, 53, 750, 8, 53, 1, 53, 5, 53, 753, 8, 53, 10,
		53, 12, 53, 756, 9, 53, 1, 54, 1, 54, 3, 54, 760, 8, 54, 1, 54, 1, 54,
		3, 54, 764, 8, 54, 1, 55, 5, 55, 767, 8, 55, 10, 55, 12, 55, 770, 9, 55,
		1, 55, 1, 55, 5, 55, 774, 8, 55, 10, 55, 12, 55, 777, 9, 55, 1, 55, 1,
		55, 5, 55, 781, 8, 55, 10, 55, 12, 55, 784, 9, 55, 1, 55, 5, 55, 787, 8,
		55, 10, 55, 12, 55, 790, 9, 55, 1, 55, 3, 55, 793, 8, 55, 1, 55, 5, 55,
		796, 8, 55, 10, 55, 12, 55, 799, 9, 55, 1, 55, 3, 55, 802, 8, 55, 1, 55,
		5, 55, 805, 8, 55, 10, 55, 12, 55, 808, 9, 55, 1, 56, 1, 56, 1, 56, 1,
		57, 1, 57, 3, 57, 815, 8, 57, 1, 57, 1, 57, 3, 57, 819, 8, 57, 1, 57, 1,
		57, 3, 57, 823, 8, 57, 1, 57, 1, 57, 1, 57, 3, 57, 828, 8, 57, 1, 57, 1,
		57, 3, 57, 832, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 839, 8,
		57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58,
		1, 58, 3, 58, 852, 8, 58, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1,
		60, 3, 60, 861, 8, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 3, 60, 868, 8,
		60, 1, 60, 3, 60, 871, 8, 60, 1, 61, 4, 61, 874, 8, 61, 11, 61, 12, 61,
		875, 1, 62, 4, 62, 879, 8, 62, 11, 62, 12, 62, 880, 1, 63, 1, 63, 5, 63,
		885, 8, 63, 10, 63, 12, 63, 888, 9, 63, 1, 63, 1, 63, 1, 64, 1, 64, 5,
		64, 894, 8, 64, 10, 64, 12, 64, 897, 9, 64, 1, 64, 1, 64, 1, 65, 1, 65,
		5, 65, 903, 8, 65, 10, 65, 12, 65, 906, 9, 65, 1, 65, 1, 65, 1, 66, 1,
		66, 1, 66, 3, 66, 913, 8, 66, 1, 67, 4, 67, 916, 8, 67, 11, 67, 12, 67,
		917, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 924, 8, 67, 1, 68, 4, 68, 927,
		8, 68, 11, 68, 12, 68, 928, 1, 68, 1, 68, 1, 68, 1, 68, 3, 68, 935, 8,
		68, 1, 69, 4, 69, 938, 8, 69, 11, 69, 12, 69, 939, 1, 69, 1, 69, 1, 69,
		1, 69, 3, 69, 946, 8, 69, 1, 70, 1, 70, 1, 71, 1, 71, 1, 72, 1, 72, 5,
		72, 954, 8, 72, 10, 72, 12, 72, 957, 9, 72, 1, 72, 3, 72, 960, 8, 72, 1,
		72, 5, 72, 963, 8, 72, 10, 72, 12, 72, 966, 9, 72, 1, 72, 1, 72, 1, 73,
		1, 73, 1, 73, 5, 73, 973, 8, 73, 10, 73, 12, 73, 976, 9, 73, 1, 73, 3,
		73, 979, 8, 73, 1, 73, 5, 73, 982, 8, 73, 10, 73, 12, 73, 985, 9, 73, 1,
		73, 1, 73, 1, 74, 1, 74, 1, 74, 5, 74, 992, 8, 74, 10, 74, 12, 74, 995,
		9, 74, 1, 74, 3, 74, 998, 8, 74, 1, 75, 1, 75, 1, 75, 5, 75, 1003, 8, 75,
		10, 75, 12, 75, 1006, 9, 75, 1, 75, 5, 75, 1009, 8, 75, 10, 75, 12, 75,
		1012, 9, 75, 1, 75, 3, 75, 1015, 8, 75, 1, 76, 1, 76, 1, 76, 5, 76, 1020,
		8, 76, 10, 76, 12, 76, 1023, 9, 76, 1, 76, 3, 76, 1026, 8, 76, 1, 76, 5,
		76, 1029, 8, 76, 10, 76, 12, 76, 1032, 9, 76, 1, 76, 3, 76, 1035, 8, 76,
		1, 77, 1, 77, 1, 77, 5, 77, 1040, 8, 77, 10, 77, 12, 77, 1043, 9, 77, 1,
		77, 3, 77, 1046, 8, 77, 1, 77, 5, 77, 1049, 8, 77, 10, 77, 12, 77, 1052,
		9, 77, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 5, 78, 1059, 8, 78, 10, 78, 12,
		78, 1062, 9, 78, 1, 78, 5, 78, 1065, 8, 78, 10, 78, 12, 78, 1068, 9, 78,
		1, 78, 3, 78, 1071, 8, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 80, 4, 80, 1078,
		8, 80, 11, 80, 12, 80, 1079, 1, 81, 1, 81, 4, 81, 1084, 8, 81, 11, 81,
		12, 81, 1085, 1, 81, 1, 81, 1, 81, 3, 81, 1091, 8, 81, 1, 81, 0, 1, 88,
		82, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34,
		36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70,
		72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104,
		106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134,
		136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 0,
		13, 2, 0, 97, 97, 99, 99, 2, 0, 71, 71, 73, 73, 1, 0, 76, 86, 1, 0, 74,
		75, 5, 0, 41, 41, 48, 48, 50, 52, 58, 58, 91, 91, 4, 0, 44, 44, 46, 46,
		48, 49, 52, 53, 1, 0, 50, 51, 1, 0, 41, 43, 4, 0, 45, 45, 47, 47, 54, 57,
		90, 90, 1, 0, 39, 40, 1, 0, 102, 103, 1, 0, 29, 30, 2, 0, 97, 97, 99, 100,
		1200, 0, 167, 1, 0, 0, 0, 2, 174, 1, 0, 0, 0, 4, 225, 1, 0, 0, 0, 6, 227,
		1, 0, 0, 0, 8, 238, 1, 0, 0, 0, 10, 240, 1, 0, 0, 0, 12, 242, 1, 0, 0,
		0, 14, 244, 1, 0, 0, 0, 16, 247, 1, 0, 0, 0, 18, 253, 1, 0, 0, 0, 20, 256,
		1, 0, 0, 0, 22, 265, 1, 0, 0, 0, 24, 267, 1, 0, 0, 0, 26, 269, 1, 0, 0,
		0, 28, 271, 1, 0, 0, 0, 30, 277, 1, 0, 0, 0, 32, 279, 1, 0, 0, 0, 34, 282,
		1, 0, 0, 0, 36, 294, 1, 0, 0, 0, 38, 306, 1, 0, 0, 0, 40, 310, 1, 0, 0,
		0, 42, 312, 1, 0, 0, 0, 44, 328, 1, 0, 0, 0, 46, 371, 1, 0, 0, 0, 48, 388,
		1, 0, 0, 0, 50, 392, 1, 0, 0, 0, 52, 407, 1, 0, 0, 0, 54, 412, 1, 0, 0,
		0, 56, 433, 1, 0, 0, 0, 58, 435, 1, 0, 0, 0, 60, 448, 1, 0, 0, 0, 62, 450,
		1, 0, 0, 0, 64, 454, 1, 0, 0, 0, 66, 456, 1, 0, 0, 0, 68, 465, 1, 0, 0,
		0, 70, 470, 1, 0, 0, 0, 72, 478, 1, 0, 0, 0, 74, 480, 1, 0, 0, 0, 76, 482,
		1, 0, 0, 0, 78, 484, 1, 0, 0, 0, 80, 486, 1, 0, 0, 0, 82, 494, 1, 0, 0,
		0, 84, 496, 1, 0, 0, 0, 86, 499, 1, 0, 0, 0, 88, 534, 1, 0, 0, 0, 90, 638,
		1, 0, 0, 0, 92, 644, 1, 0, 0, 0, 94, 671, 1, 0, 0, 0, 96, 673, 1, 0, 0,
		0, 98, 677, 1, 0, 0, 0, 100, 683, 1, 0, 0, 0, 102, 709, 1, 0, 0, 0, 104,
		711, 1, 0, 0, 0, 106, 716, 1, 0, 0, 0, 108, 757, 1, 0, 0, 0, 110, 768,
		1, 0, 0, 0, 112, 809, 1, 0, 0, 0, 114, 838, 1, 0, 0, 0, 116, 851, 1, 0,
		0, 0, 118, 853, 1, 0, 0, 0, 120, 870, 1, 0, 0, 0, 122, 873, 1, 0, 0, 0,
		124, 878, 1, 0, 0, 0, 126, 882, 1, 0, 0, 0, 128, 891, 1, 0, 0, 0, 130,
		900, 1, 0, 0, 0, 132, 912, 1, 0, 0, 0, 134, 923, 1, 0, 0, 0, 136, 934,
		1, 0, 0, 0, 138, 945, 1, 0, 0, 0, 140, 947, 1, 0, 0, 0, 142, 949, 1, 0,
		0, 0, 144, 951, 1, 0, 0, 0, 146, 969, 1, 0, 0, 0, 148, 988, 1, 0, 0, 0,
		150, 999, 1, 0, 0, 0, 152, 1034, 1, 0, 0, 0, 154, 1036, 1, 0, 0, 0, 156,
		1055, 1, 0, 0, 0, 158, 1072, 1, 0, 0, 0, 160, 1077, 1, 0, 0, 0, 162, 1090,
		1, 0, 0, 0, 164, 166, 3, 160, 80, 0, 165, 164, 1, 0, 0, 0, 166, 169, 1,
		0, 0, 0, 167, 165, 1, 0, 0, 0, 167, 168, 1, 0, 0, 0, 168, 170, 1, 0, 0,
		0, 169, 167, 1, 0, 0, 0, 170, 171, 3, 2, 1, 0, 171, 172, 5, 0, 0, 1, 172,
		1, 1, 0, 0, 0, 173, 175, 3, 4, 2, 0, 174, 173, 1, 0, 0, 0, 175, 176, 1,
		0, 0, 0, 176, 174, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 3, 1, 0, 0, 0,
		178, 179, 3, 12, 6, 0, 179, 180, 3, 162, 81, 0, 180, 226, 1, 0, 0, 0, 181,
		182, 3, 62, 31, 0, 182, 183, 3, 162, 81, 0, 183, 226, 1, 0, 0, 0, 184,
		185, 3, 10, 5, 0, 185, 186, 3, 162, 81, 0, 186, 226, 1, 0, 0, 0, 187, 188,
		3, 8, 4, 0, 188, 189, 3, 162, 81, 0, 189, 226, 1, 0, 0, 0, 190, 191, 3,
		54, 27, 0, 191, 192, 3, 162, 81, 0, 192, 226, 1, 0, 0, 0, 193, 194, 3,
		6, 3, 0, 194, 195, 3, 162, 81, 0, 195, 226, 1, 0, 0, 0, 196, 226, 3, 56,
		28, 0, 197, 226, 3, 50, 25, 0, 198, 226, 3, 44, 22, 0, 199, 226, 3, 42,
		21, 0, 200, 226, 3, 34, 17, 0, 201, 202, 3, 24, 12, 0, 202, 203, 3, 162,
		81, 0, 203, 226, 1, 0, 0, 0, 204, 205, 3, 28, 14, 0, 205, 206, 3, 162,
		81, 0, 206, 226, 1, 0, 0, 0, 207, 208, 3, 26, 13, 0, 208, 209, 3, 162,
		81, 0, 209, 226, 1, 0, 0, 0, 210, 211, 3, 22, 11, 0, 211, 212, 3, 162,
		81, 0, 212, 226, 1, 0, 0, 0, 213, 214, 3, 14, 7, 0, 214, 215, 3, 162, 81,
		0, 215, 226, 1, 0, 0, 0, 216, 217, 3, 16, 8, 0, 217, 218, 3, 162, 81, 0,
		218, 226, 1, 0, 0, 0, 219, 220, 3, 18, 9, 0, 220, 221, 3, 162, 81, 0, 221,
		226, 1, 0, 0, 0, 222, 223, 3, 20, 10, 0, 223, 224, 3, 162, 81, 0, 224,
		226, 1, 0, 0, 0, 225, 178, 1, 0, 0, 0, 225, 181, 1, 0, 0, 0, 225, 184,
		1, 0, 0, 0, 225, 187, 1, 0, 0, 0, 225, 190, 1, 0, 0, 0, 225, 193, 1, 0,
		0, 0, 225, 196, 1, 0, 0, 0, 225, 197, 1, 0, 0, 0, 225, 198, 1, 0, 0, 0,
		225, 199, 1, 0, 0, 0, 225, 200, 1, 0, 0, 0, 225, 201, 1, 0, 0, 0, 225,
		204, 1, 0, 0, 0, 225, 207, 1, 0, 0, 0, 225, 210, 1, 0, 0, 0, 225, 213,
		1, 0, 0, 0, 225, 216, 1, 0, 0, 0, 225, 219, 1, 0, 0, 0, 225, 222, 1, 0,
		0, 0, 226, 5, 1, 0, 0, 0, 227, 228, 5, 14, 0, 0, 228, 229, 3, 54, 27, 0,
		229, 231, 5, 15, 0, 0, 230, 232, 5, 39, 0, 0, 231, 230, 1, 0, 0, 0, 231,
		232, 1, 0, 0, 0, 232, 233, 1, 0, 0, 0, 233, 236, 3, 54, 27, 0, 234, 235,
		5, 16, 0, 0, 235, 237, 3, 54, 27, 0, 236, 234, 1, 0, 0, 0, 236, 237, 1,
		0, 0, 0, 237, 7, 1, 0, 0, 0, 238, 239, 3, 88, 44, 0, 239, 9, 1, 0, 0, 0,
		240, 241, 3, 60, 30, 0, 241, 11, 1, 0, 0, 0, 242, 243, 7, 0, 0, 0, 243,
		13, 1, 0, 0, 0, 244, 245, 5, 13, 0, 0, 245, 246, 5, 107, 0, 0, 246, 15,
		1, 0, 0, 0, 247, 251, 5, 20, 0, 0, 248, 252, 3, 48, 24, 0, 249, 252, 3,
		46, 23, 0, 250, 252, 3, 30, 15, 0, 251, 248, 1, 0, 0, 0, 251, 249, 1, 0,
		0, 0, 251, 250, 1, 0, 0, 0, 252, 17, 1, 0, 0, 0, 253, 254, 5, 21, 0, 0,
		254, 255, 3, 30, 15, 0, 255, 19, 1, 0, 0, 0, 256, 257, 5, 33, 0, 0, 257,
		262, 3, 88, 44, 0, 258, 259, 5, 70, 0, 0, 259, 261, 3, 88, 44, 0, 260,
		258, 1, 0, 0, 0, 261, 264, 1, 0, 0, 0, 262, 260, 1, 0, 0, 0, 262, 263,
		1, 0, 0, 0, 263, 21, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 265, 266, 5, 37,
		0, 0, 266, 23, 1, 0, 0, 0, 267, 268, 5, 11, 0, 0, 268, 25, 1, 0, 0, 0,
		269, 270, 5, 10, 0, 0, 270, 27, 1, 0, 0, 0, 271, 273, 5, 12, 0, 0, 272,
		274, 3, 148, 74, 0, 273, 272, 1, 0, 0, 0, 273, 274, 1, 0, 0, 0, 274, 29,
		1, 0, 0, 0, 275, 278, 3, 32, 16, 0, 276, 278, 3, 100, 50, 0, 277, 275,
		1, 0, 0, 0, 277, 276, 1, 0, 0, 0, 278, 31, 1, 0, 0, 0, 279, 280, 3, 88,
		44, 0, 280, 281, 3, 108, 54, 0, 281, 33, 1, 0, 0, 0, 282, 289, 5, 9, 0,
		0, 283, 290, 3, 36, 18, 0, 284, 285, 5, 65, 0, 0, 285, 286, 3, 36, 18,
		0, 286, 287, 5, 66, 0, 0, 287, 290, 1, 0, 0, 0, 288, 290, 3, 88, 44, 0,
		289, 283, 1, 0, 0, 0, 289, 284, 1, 0, 0, 0, 289, 288, 1, 0, 0, 0, 289,
		290, 1, 0, 0, 0, 290, 291, 1, 0, 0, 0, 291, 292, 3, 54, 27, 0, 292, 35,
		1, 0, 0, 0, 293, 295, 3, 38, 19, 0, 294, 293, 1, 0, 0, 0, 294, 295, 1,
		0, 0, 0, 295, 296, 1, 0, 0, 0, 296, 298, 5, 87, 0, 0, 297, 299, 3, 88,
		44, 0, 298, 297, 1, 0, 0, 0, 298, 299, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0,
		300, 302, 5, 87, 0, 0, 301, 303, 3, 40, 20, 0, 302, 301, 1, 0, 0, 0, 302,
		303, 1, 0, 0, 0, 303, 37, 1, 0, 0, 0, 304, 307, 3, 60, 30, 0, 305, 307,
		3, 88, 44, 0, 306, 304, 1, 0, 0, 0, 306, 305, 1, 0, 0, 0, 307, 39, 1, 0,
		0, 0, 308, 311, 3, 60, 30, 0, 309, 311, 3, 88, 44, 0, 310, 308, 1, 0, 0,
		0, 310, 309, 1, 0, 0, 0, 311, 41, 1, 0, 0, 0, 312, 323, 5, 9, 0, 0, 313,
		314, 3, 70, 35, 0, 314, 315, 7, 1, 0, 0, 315, 317, 1, 0, 0, 0, 316, 313,
		1, 0, 0, 0, 316, 317, 1, 0, 0, 0, 317, 318, 1, 0, 0, 0, 318, 324, 5, 22,
		0, 0, 319, 321, 3, 70, 35, 0, 320, 319, 1, 0, 0, 0, 320, 321, 1, 0, 0,
		0, 321, 322, 1, 0, 0, 0, 322, 324, 5, 31, 0, 0, 323, 316, 1, 0, 0, 0, 323,
		320, 1, 0, 0, 0, 324, 325, 1, 0, 0, 0, 325, 326, 3, 88, 44, 0, 326, 327,
		3, 54, 27, 0, 327, 43, 1, 0, 0, 0, 328, 330, 5, 6, 0, 0, 329, 331, 3, 88,
		44, 0, 330, 329, 1, 0, 0, 0, 330, 331, 1, 0, 0, 0, 331, 332, 1, 0, 0, 0,
		332, 347, 5, 67, 0, 0, 333, 335, 3, 160, 80, 0, 334, 333, 1, 0, 0, 0, 335,
		338, 1, 0, 0, 0, 336, 334, 1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 337, 339,
		1, 0, 0, 0, 338, 336, 1, 0, 0, 0, 339, 340, 5, 7, 0, 0, 340, 341, 3, 148,
		74, 0, 341, 343, 5, 62, 0, 0, 342, 344, 3, 2, 1, 0, 343, 342, 1, 0, 0,
		0, 343, 344, 1, 0, 0, 0, 344, 346, 1, 0, 0, 0, 345, 336, 1, 0, 0, 0, 346,
		349, 1, 0, 0, 0, 347, 345, 1, 0, 0, 0, 347, 348, 1, 0, 0, 0, 348, 361,
		1, 0, 0, 0, 349, 347, 1, 0, 0, 0, 350, 352, 3, 160, 80, 0, 351, 350, 1,
		0, 0, 0, 352, 355, 1, 0, 0, 0, 353, 351, 1, 0, 0, 0, 353, 354, 1, 0, 0,
		0, 354, 356, 1, 0, 0, 0, 355, 353, 1, 0, 0, 0, 356, 357, 5, 8, 0, 0, 357,
		359, 5, 62, 0, 0, 358, 360, 3, 2, 1, 0, 359, 358, 1, 0, 0, 0, 359, 360,
		1, 0, 0, 0, 360, 362, 1, 0, 0, 0, 361, 353, 1, 0, 0, 0, 361, 362, 1, 0,
		0, 0, 362, 366, 1, 0, 0, 0, 363, 365, 3, 160, 80, 0, 364, 363, 1, 0, 0,
		0, 365, 368, 1, 0, 0, 0, 366, 364, 1, 0, 0, 0, 366, 367, 1, 0, 0, 0, 367,
		369, 1, 0, 0, 0, 368, 366, 1, 0, 0, 0, 369, 370, 5, 69, 0, 0, 370, 45,
		1, 0, 0, 0, 371, 372, 5, 1, 0, 0, 372, 376, 5, 65, 0, 0, 373, 375, 3, 160,
		80, 0, 374, 373, 1, 0, 0, 0, 375, 378, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0,
		376, 377, 1, 0, 0, 0, 377, 379, 1, 0, 0, 0, 378, 376, 1, 0, 0, 0, 379,
		383, 3, 88, 44, 0, 380, 382, 3, 160, 80, 0, 381, 380, 1, 0, 0, 0, 382,
		385, 1, 0, 0, 0, 383, 381, 1, 0, 0, 0, 383, 384, 1, 0, 0, 0, 384, 386,
		1, 0, 0, 0, 385, 383, 1, 0, 0, 0, 386, 387, 5, 66, 0, 0, 387, 47, 1, 0,
		0, 0, 388, 389, 5, 2, 0, 0, 389, 390, 5, 65, 0, 0, 390, 391, 5, 66, 0,
		0, 391, 49, 1, 0, 0, 0, 392, 393, 5, 3, 0, 0, 393, 394, 3, 88, 44, 0, 394,
		401, 3, 54, 27, 0, 395, 396, 5, 4, 0, 0, 396, 397, 3, 88, 44, 0, 397, 398,
		3, 54, 27, 0, 398, 400, 1, 0, 0, 0, 399, 395, 1, 0, 0, 0, 400, 403, 1,
		0, 0, 0, 401, 399, 1, 0, 0, 0, 401, 402, 1, 0, 0, 0, 402, 405, 1, 0, 0,
		0, 403, 401, 1, 0, 0, 0, 404, 406, 3, 52, 26, 0, 405, 404, 1, 0, 0, 0,
		405, 406, 1, 0, 0, 0, 406, 51, 1, 0, 0, 0, 407, 410, 5, 5, 0, 0, 408, 411,
		3, 50, 25, 0, 409, 411, 3, 54, 27, 0, 410, 408, 1, 0, 0, 0, 410, 409, 1,
		0, 0, 0, 411, 53, 1, 0, 0, 0, 412, 416, 5, 67, 0, 0, 413, 415, 3, 160,
		80, 0, 414, 413, 1, 0, 0, 0, 415, 418, 1, 0, 0, 0, 416, 414, 1, 0, 0, 0,
		416, 417, 1, 0, 0, 0, 417, 420, 1, 0, 0, 0, 418, 416, 1, 0, 0, 0, 419,
		421, 3, 2, 1, 0, 420, 419, 1, 0, 0, 0, 420, 421, 1, 0, 0, 0, 421, 425,
		1, 0, 0, 0, 422, 424, 3, 160, 80, 0, 423, 422, 1, 0, 0, 0, 424, 427, 1,
		0, 0, 0, 425, 423, 1, 0, 0, 0, 425, 426, 1, 0, 0, 0, 426, 428, 1, 0, 0,
		0, 427, 425, 1, 0, 0, 0, 428, 429, 5, 69, 0, 0, 429, 55, 1, 0, 0, 0, 430,
		434, 5, 101, 0, 0, 431, 434, 5, 87, 0, 0, 432, 434, 3, 160, 80, 0, 433,
		430, 1, 0, 0, 0, 433, 431, 1, 0, 0, 0, 433, 432, 1, 0, 0, 0, 434, 57, 1,
		0, 0, 0, 435, 436, 7, 2, 0, 0, 436, 59, 1, 0, 0, 0, 437, 438, 3, 70, 35,
		0, 438, 439, 7, 1, 0, 0, 439, 440, 3, 148, 74, 0, 440, 449, 1, 0, 0, 0,
		441, 442, 3, 82, 41, 0, 442, 443, 7, 3, 0, 0, 443, 449, 1, 0, 0, 0, 444,
		445, 3, 82, 41, 0, 445, 446, 3, 58, 29, 0, 446, 447, 3, 88, 44, 0, 447,
		449, 1, 0, 0, 0, 448, 437, 1, 0, 0, 0, 448, 441, 1, 0, 0, 0, 448, 444,
		1, 0, 0, 0, 449, 61, 1, 0, 0, 0, 450, 451, 3, 64, 32, 0, 451, 63, 1, 0,
		0, 0, 452, 455, 3, 66, 33, 0, 453, 455, 3, 68, 34, 0, 454, 452, 1, 0, 0,
		0, 454, 453, 1, 0, 0, 0, 455, 65, 1, 0, 0, 0, 456, 457, 5, 34, 0, 0, 457,
		462, 5, 39, 0, 0, 458, 459, 5, 70, 0, 0, 459, 461, 5, 39, 0, 0, 460, 458,
		1, 0, 0, 0, 461, 464, 1, 0, 0, 0, 462, 460, 1, 0, 0, 0, 462, 463, 1, 0,
		0, 0, 463, 67, 1, 0, 0, 0, 464, 462, 1, 0, 0, 0, 465, 466, 5, 34, 0, 0,
		466, 467, 3, 70, 35, 0, 467, 468, 7, 1, 0, 0, 468, 469, 3, 148, 74, 0,
		469, 69, 1, 0, 0, 0, 470, 475, 3, 82, 41, 0, 471, 472, 5, 70, 0, 0, 472,
		474, 3, 82, 41, 0, 473, 471, 1, 0, 0, 0, 474, 477, 1, 0, 0, 0, 475, 473,
		1, 0, 0, 0, 475, 476, 1, 0, 0, 0, 476, 71, 1, 0, 0, 0, 477, 475, 1, 0,
		0, 0, 478, 479, 7, 4, 0, 0, 479, 73, 1, 0, 0, 0, 480, 481, 7, 5, 0, 0,
		481, 75, 1, 0, 0, 0, 482, 483, 7, 6, 0, 0, 483, 77, 1, 0, 0, 0, 484, 485,
		7, 7, 0, 0, 485, 79, 1, 0, 0, 0, 486, 487, 7, 8, 0, 0, 487, 81, 1, 0, 0,
		0, 488, 491, 3, 88, 44, 0, 489, 492, 3, 84, 42, 0, 490, 492, 3, 86, 43,
		0, 491, 489, 1, 0, 0, 0, 491, 490, 1, 0, 0, 0, 492, 495, 1, 0, 0, 0, 493,
		495, 5, 39, 0, 0, 494, 488, 1, 0, 0, 0, 494, 493, 1, 0, 0, 0, 495, 83,
		1, 0, 0, 0, 496, 497, 5, 92, 0, 0, 497, 498, 7, 9, 0, 0, 498, 85, 1, 0,
		0, 0, 499, 500, 5, 63, 0, 0, 500, 501, 3, 88, 44, 0, 501, 502, 5, 64, 0,
		0, 502, 87, 1, 0, 0, 0, 503, 504, 6, 44, -1, 0, 504, 505, 3, 94, 47, 0,
		505, 509, 5, 65, 0, 0, 506, 508, 3, 160, 80, 0, 507, 506, 1, 0, 0, 0, 508,
		511, 1, 0, 0, 0, 509, 507, 1, 0, 0, 0, 509, 510, 1, 0, 0, 0, 510, 513,
		1, 0, 0, 0, 511, 509, 1, 0, 0, 0, 512, 514, 3, 88, 44, 0, 513, 512, 1,
		0, 0, 0, 513, 514, 1, 0, 0, 0, 514, 518, 1, 0, 0, 0, 515, 517, 3, 160,
		80, 0, 516, 515, 1, 0, 0, 0, 517, 520, 1, 0, 0, 0, 518, 516, 1, 0, 0, 0,
		518, 519, 1, 0, 0, 0, 519, 521, 1, 0, 0, 0, 520, 518, 1, 0, 0, 0, 521,
		522, 5, 66, 0, 0, 522, 535, 1, 0, 0, 0, 523, 535, 3, 116, 58, 0, 524, 535,
		3, 102, 51, 0, 525, 535, 3, 46, 23, 0, 526, 535, 3, 48, 24, 0, 527, 535,
		5, 39, 0, 0, 528, 535, 3, 90, 45, 0, 529, 535, 3, 100, 50, 0, 530, 535,
		3, 92, 46, 0, 531, 532, 3, 72, 36, 0, 532, 533, 3, 88, 44, 10, 533, 535,
		1, 0, 0, 0, 534, 503, 1, 0, 0, 0, 534, 523, 1, 0, 0, 0, 534, 524, 1, 0,
		0, 0, 534, 525, 1, 0, 0, 0, 534, 526, 1, 0, 0, 0, 534, 527, 1, 0, 0, 0,
		534, 528, 1, 0, 0, 0, 534, 529, 1, 0, 0, 0, 534, 530, 1, 0, 0, 0, 534,
		531, 1, 0, 0, 0, 535, 635, 1, 0, 0, 0, 536, 537, 10, 9, 0, 0, 537, 541,
		3, 74, 37, 0, 538, 540, 3, 160, 80, 0, 539, 538, 1, 0, 0, 0, 540, 543,
		1, 0, 0, 0, 541, 539, 1, 0, 0, 0, 541, 542, 1, 0, 0, 0, 542, 544, 1, 0,
		0, 0, 543, 541, 1, 0, 0, 0, 544, 545, 3, 88, 44, 10, 545, 634, 1, 0, 0,
		0, 546, 547, 10, 8, 0, 0, 547, 551, 3, 78, 39, 0, 548, 550, 3, 160, 80,
		0, 549, 548, 1, 0, 0, 0, 550, 553, 1, 0, 0, 0, 551, 549, 1, 0, 0, 0, 551,
		552, 1, 0, 0, 0, 552, 554, 1, 0, 0, 0, 553, 551, 1, 0, 0, 0, 554, 555,
		3, 88, 44, 9, 555, 634, 1, 0, 0, 0, 556, 557, 10, 7, 0, 0, 557, 561, 3,
		76, 38, 0, 558, 560, 3, 160, 80, 0, 559, 558, 1, 0, 0, 0, 560, 563, 1,
		0, 0, 0, 561, 559, 1, 0, 0, 0, 561, 562, 1, 0, 0, 0, 562, 564, 1, 0, 0,
		0, 563, 561, 1, 0, 0, 0, 564, 565, 3, 88, 44, 8, 565, 634, 1, 0, 0, 0,
		566, 567, 10, 6, 0, 0, 567, 571, 3, 80, 40, 0, 568, 570, 3, 160, 80, 0,
		569, 568, 1, 0, 0, 0, 570, 573, 1, 0, 0, 0, 571, 569, 1, 0, 0, 0, 571,
		572, 1, 0, 0, 0, 572, 574, 1, 0, 0, 0, 573, 571, 1, 0, 0, 0, 574, 575,
		3, 88, 44, 7, 575, 634, 1, 0, 0, 0, 576, 578, 10, 5, 0, 0, 577, 579, 5,
		32, 0, 0, 578, 577, 1, 0, 0, 0, 578, 579, 1, 0, 0, 0, 579, 580, 1, 0, 0,
		0, 580, 581, 5, 31, 0, 0, 581, 634, 3, 88, 44, 6, 582, 583, 10, 4, 0, 0,
		583, 587, 5, 59, 0, 0, 584, 586, 3, 160, 80, 0, 585, 584, 1, 0, 0, 0, 586,
		589, 1, 0, 0, 0, 587, 585, 1, 0, 0, 0, 587, 588, 1, 0, 0, 0, 588, 590,
		1, 0, 0, 0, 589, 587, 1, 0, 0, 0, 590, 634, 3, 88, 44, 5, 591, 592, 10,
		3, 0, 0, 592, 596, 5, 60, 0, 0, 593, 595, 3, 160, 80, 0, 594, 593, 1, 0,
		0, 0, 595, 598, 1, 0, 0, 0, 596, 594, 1, 0, 0, 0, 596, 597, 1, 0, 0, 0,
		597, 599, 1, 0, 0, 0, 598, 596, 1, 0, 0, 0, 599, 634, 3, 88, 44, 4, 600,
		601, 10, 2, 0, 0, 601, 605, 5, 61, 0, 0, 602, 604, 3, 160, 80, 0, 603,
		602, 1, 0, 0, 0, 604, 607, 1, 0, 0, 0, 605, 603, 1, 0, 0, 0, 605, 606,
		1, 0, 0, 0, 606, 608, 1, 0, 0, 0, 607, 605, 1, 0, 0, 0, 608, 612, 3, 88,
		44, 0, 609, 611, 3, 160, 80, 0, 610, 609, 1, 0, 0, 0, 611, 614, 1, 0, 0,
		0, 612, 610, 1, 0, 0, 0, 612, 613, 1, 0, 0, 0, 613, 615, 1, 0, 0, 0, 614,
		612, 1, 0, 0, 0, 615, 619, 5, 62, 0, 0, 616, 618, 3, 160, 80, 0, 617, 616,
		1, 0, 0, 0, 618, 621, 1, 0, 0, 0, 619, 617, 1, 0, 0, 0, 619, 620, 1, 0,
		0, 0, 620, 622, 1, 0, 0, 0, 621, 619, 1, 0, 0, 0, 622, 623, 3, 88, 44,
		3, 623, 634, 1, 0, 0, 0, 624, 625, 10, 1, 0, 0, 625, 626, 5, 58, 0, 0,
		626, 634, 3, 88, 44, 2, 627, 631, 10, 14, 0, 0, 628, 632, 3, 112, 56, 0,
		629, 632, 3, 114, 57, 0, 630, 632, 3, 108, 54, 0, 631, 628, 1, 0, 0, 0,
		631, 629, 1, 0, 0, 0, 631, 630, 1, 0, 0, 0, 632, 634, 1, 0, 0, 0, 633,
		536, 1, 0, 0, 0, 633, 546, 1, 0, 0, 0, 633, 556, 1, 0, 0, 0, 633, 566,
		1, 0, 0, 0, 633, 576, 1, 0, 0, 0, 633, 582, 1, 0, 0, 0, 633, 591, 1, 0,
		0, 0, 633, 600, 1, 0, 0, 0, 633, 624, 1, 0, 0, 0, 633, 627, 1, 0, 0, 0,
		634, 637, 1, 0, 0, 0, 635, 633, 1, 0, 0, 0, 635, 636, 1, 0, 0, 0, 636,
		89, 1, 0, 0, 0, 637, 635, 1, 0, 0, 0, 638, 640, 5, 65, 0, 0, 639, 641,
		3, 88, 44, 0, 640, 639, 1, 0, 0, 0, 640, 641, 1, 0, 0, 0, 641, 642, 1,
		0, 0, 0, 642, 643, 5, 66, 0, 0, 643, 91, 1, 0, 0, 0, 644, 645, 5, 28, 0,
		0, 645, 649, 5, 65, 0, 0, 646, 648, 3, 160, 80, 0, 647, 646, 1, 0, 0, 0,
		648, 651, 1, 0, 0, 0, 649, 647, 1, 0, 0, 0, 649, 650, 1, 0, 0, 0, 650,
		652, 1, 0, 0, 0, 651, 649, 1, 0, 0, 0, 652, 661, 3, 94, 47, 0, 653, 657,
		5, 70, 0, 0, 654, 656, 3, 160, 80, 0, 655, 654, 1, 0, 0, 0, 656, 659, 1,
		0, 0, 0, 657, 655, 1, 0, 0, 0, 657, 658, 1, 0, 0, 0, 658, 660, 1, 0, 0,
		0, 659, 657, 1, 0, 0, 0, 660, 662, 3, 150, 75, 0, 661, 653, 1, 0, 0, 0,
		661, 662, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 664, 5, 66, 0, 0, 664,
		93, 1, 0, 0, 0, 665, 672, 5, 35, 0, 0, 666, 672, 5, 34, 0, 0, 667, 672,
		3, 96, 48, 0, 668, 672, 3, 98, 49, 0, 669, 670, 5, 25, 0, 0, 670, 672,
		3, 94, 47, 0, 671, 665, 1, 0, 0, 0, 671, 666, 1, 0, 0, 0, 671, 667, 1,
		0, 0, 0, 671, 668, 1, 0, 0, 0, 671, 669, 1, 0, 0, 0, 672, 95, 1, 0, 0,
		0, 673, 674, 5, 63, 0, 0, 674, 675, 5, 64, 0, 0, 675, 676, 3, 94, 47, 0,
		676, 97, 1, 0, 0, 0, 677, 678, 5, 24, 0, 0, 678, 679, 5, 63, 0, 0, 679,
		680, 3, 94, 47, 0, 680, 681, 5, 64, 0, 0, 681, 682, 3, 94, 47, 0, 682,
		99, 1, 0, 0, 0, 683, 684, 5, 23, 0, 0, 684, 685, 3, 54, 27, 0, 685, 101,
		1, 0, 0, 0, 686, 688, 5, 23, 0, 0, 687, 689, 3, 104, 52, 0, 688, 687, 1,
		0, 0, 0, 688, 689, 1, 0, 0, 0, 689, 690, 1, 0, 0, 0, 690, 692, 5, 65, 0,
		0, 691, 693, 3, 106, 53, 0, 692, 691, 1, 0, 0, 0, 692, 693, 1, 0, 0, 0,
		693, 694, 1, 0, 0, 0, 694, 695, 5, 66, 0, 0, 695, 710, 3, 54, 27, 0, 696,
		698, 5, 65, 0, 0, 697, 699, 3, 106, 53, 0, 698, 697, 1, 0, 0, 0, 698, 699,
		1, 0, 0, 0, 699, 700, 1, 0, 0, 0, 700, 703, 5, 66, 0, 0, 701, 703, 5, 39,
		0, 0, 702, 696, 1, 0, 0, 0, 702, 701, 1, 0, 0, 0, 703, 704, 1, 0, 0, 0,
		704, 707, 5, 89, 0, 0, 705, 708, 3, 54, 27, 0, 706, 708, 3, 88, 44, 0,
		707, 705, 1, 0, 0, 0, 707, 706, 1, 0, 0, 0, 708, 710, 1, 0, 0, 0, 709,
		686, 1, 0, 0, 0, 709, 702, 1, 0, 0, 0, 710, 103, 1, 0, 0, 0, 711, 712,
		5, 39, 0, 0, 712, 105, 1, 0, 0, 0, 713, 715, 3, 160, 80, 0, 714, 713, 1,
		0, 0, 0, 715, 718, 1, 0, 0, 0, 716, 714, 1, 0, 0, 0, 716, 717, 1, 0, 0,
		0, 717, 719, 1, 0, 0, 0, 718, 716, 1, 0, 0, 0, 719, 736, 5, 39, 0, 0, 720,
		722, 3, 160, 80, 0, 721, 720, 1, 0, 0, 0, 722, 725, 1, 0, 0, 0, 723, 721,
		1, 0, 0, 0, 723, 724, 1, 0, 0, 0, 724, 726, 1, 0, 0, 0, 725, 723, 1, 0,
		0, 0, 726, 730, 5, 70, 0, 0, 727, 729, 3, 160, 80, 0, 728, 727, 1, 0, 0,
		0, 729, 732, 1, 0, 0, 0, 730, 728, 1, 0, 0, 0, 730, 731, 1, 0, 0, 0, 731,
		733, 1, 0, 0, 0, 732, 730, 1, 0, 0, 0, 733, 735, 5, 39, 0, 0, 734, 723,
		1, 0, 0, 0, 735, 738, 1, 0, 0, 0, 736, 734, 1, 0, 0, 0, 736, 737, 1, 0,
		0, 0, 737, 740, 1, 0, 0, 0, 738, 736, 1, 0, 0, 0, 739, 741, 5, 88, 0, 0,
		740, 739, 1, 0, 0, 0, 740, 741, 1, 0, 0, 0, 741, 745, 1, 0, 0, 0, 742,
		744, 3, 160, 80, 0, 743, 742, 1, 0, 0, 0, 744, 747, 1, 0, 0, 0, 745, 743,
		1, 0, 0, 0, 745, 746, 1, 0, 0, 0, 746, 749, 1, 0, 0, 0, 747, 745, 1, 0,
		0, 0, 748, 750, 5, 70, 0, 0, 749, 748, 1, 0, 0, 0, 749, 750, 1, 0, 0, 0,
		750, 754, 1, 0, 0, 0, 751, 753, 3, 160, 80, 0, 752, 751, 1, 0, 0, 0, 753,
		756, 1, 0, 0, 0, 754, 752, 1, 0, 0, 0, 754, 755, 1, 0, 0, 0, 755, 107,
		1, 0, 0, 0, 756, 754, 1, 0, 0, 0, 757, 759, 5, 65, 0, 0, 758, 760, 3, 110,
		55, 0, 759, 758, 1, 0, 0, 0, 759, 760, 1, 0, 0, 0, 760, 761, 1, 0, 0, 0,
		761, 763, 5, 66, 0, 0, 762, 764, 5, 72, 0, 0, 763, 762, 1, 0, 0, 0, 763,
		764, 1, 0, 0, 0, 764, 109, 1, 0, 0, 0, 765, 767, 3, 160, 80, 0, 766, 765,
		1, 0, 0, 0, 767, 770, 1, 0, 0, 0, 768, 766, 1, 0, 0, 0, 768, 769, 1, 0,
		0, 0, 769, 771, 1, 0, 0, 0, 770, 768, 1, 0, 0, 0, 771, 788, 3, 88, 44,
		0, 772, 774, 3, 160, 80, 0, 773, 772, 1, 0, 0, 0, 774, 777, 1, 0, 0, 0,
		775, 773, 1, 0, 0, 0, 775, 776, 1, 0, 0, 0, 776, 778, 1, 0, 0, 0, 777,
		775, 1, 0, 0, 0, 778, 782, 5, 70, 0, 0, 779, 781, 3, 160, 80, 0, 780, 779,
		1, 0, 0, 0, 781, 784, 1, 0, 0, 0, 782, 780, 1, 0, 0, 0, 782, 783, 1, 0,
		0, 0, 783, 785, 1, 0, 0, 0, 784, 782, 1, 0, 0, 0, 785, 787, 3, 88, 44,
		0, 786, 775, 1, 0, 0, 0, 787, 790, 1, 0, 0, 0, 788, 786, 1, 0, 0, 0, 788,
		789, 1, 0, 0, 0, 789, 792, 1, 0, 0, 0, 790, 788, 1, 0, 0, 0, 791, 793,
		5, 88, 0, 0, 792, 791, 1, 0, 0, 0, 792, 793, 1, 0, 0, 0, 793, 797, 1, 0,
		0, 0, 794, 796, 3, 160, 80, 0, 795, 794, 1, 0, 0, 0, 796, 799, 1, 0, 0,
		0, 797, 795, 1, 0, 0, 0, 797, 798, 1, 0, 0, 0, 798, 801, 1, 0, 0, 0, 799,
		797, 1, 0, 0, 0, 800, 802, 5, 70, 0, 0, 801, 800, 1, 0, 0, 0, 801, 802,
		1, 0, 0, 0, 802, 806, 1, 0, 0, 0, 803, 805, 3, 160, 80, 0, 804, 803, 1,
		0, 0, 0, 805, 808, 1, 0, 0, 0, 806, 804, 1, 0, 0, 0, 806, 807, 1, 0, 0,
		0, 807, 111, 1, 0, 0, 0, 808, 806, 1, 0, 0, 0, 809, 810, 5, 92, 0, 0, 810,
		811, 7, 9, 0, 0, 811, 113, 1, 0, 0, 0, 812, 814, 5, 63, 0, 0, 813, 815,
		3, 88, 44, 0, 814, 813, 1, 0, 0, 0, 814, 815, 1, 0, 0, 0, 815, 816, 1,
		0, 0, 0, 816, 818, 5, 62, 0, 0, 817, 819, 3, 88, 44, 0, 818, 817, 1, 0,
		0, 0, 818, 819, 1, 0, 0, 0, 819, 820, 1, 0, 0, 0, 820, 822, 5, 62, 0, 0,
		821, 823, 3, 88, 44, 0, 822, 821, 1, 0, 0, 0, 822, 823, 1, 0, 0, 0, 823,
		824, 1, 0, 0, 0, 824, 839, 5, 64, 0, 0, 825, 827, 5, 63, 0, 0, 826, 828,
		3, 88, 44, 0, 827, 826, 1, 0, 0, 0, 827, 828, 1, 0, 0, 0, 828, 829, 1,
		0, 0, 0, 829, 831, 5, 62, 0, 0, 830, 832, 3, 88, 44, 0, 831, 830, 1, 0,
		0, 0, 831, 832, 1, 0, 0, 0, 832, 833, 1, 0, 0, 0, 833, 839, 5, 64, 0, 0,
		834, 835, 5, 63, 0, 0, 835, 836, 3, 88, 44, 0, 836, 837, 5, 64, 0, 0, 837,
		839, 1, 0, 0, 0, 838, 812, 1, 0, 0, 0, 838, 825, 1, 0, 0, 0, 838, 834,
		1, 0, 0, 0, 839, 115, 1, 0, 0, 0, 840, 852, 3, 132, 66, 0, 841, 852, 3,
		120, 60, 0, 842, 852, 3, 118, 59, 0, 843, 852, 3, 142, 71, 0, 844, 852,
		5, 36, 0, 0, 845, 852, 5, 38, 0, 0, 846, 852, 3, 140, 70, 0, 847, 852,
		3, 152, 76, 0, 848, 852, 3, 146, 73, 0, 849, 852, 3, 94, 47, 0, 850, 852,
		3, 144, 72, 0, 851, 840, 1, 0, 0, 0, 851, 841, 1, 0, 0, 0, 851, 842, 1,
		0, 0, 0, 851, 843, 1, 0, 0, 0, 851, 844, 1, 0, 0, 0, 851, 845, 1, 0, 0,
		0, 851, 846, 1, 0, 0, 0, 851, 847, 1, 0, 0, 0, 851, 848, 1, 0, 0, 0, 851,
		849, 1, 0, 0, 0, 851, 850, 1, 0, 0, 0, 852, 117, 1, 0, 0, 0, 853, 854,
		7, 10, 0, 0, 854, 119, 1, 0, 0, 0, 855, 871, 5, 107, 0, 0, 856, 857, 5,
		98, 0, 0, 857, 858, 5, 118, 0, 0, 858, 860, 5, 119, 0, 0, 859, 861, 3,
		122, 61, 0, 860, 859, 1, 0, 0, 0, 860, 861, 1, 0, 0, 0, 861, 862, 1, 0,
		0, 0, 862, 871, 5, 120, 0, 0, 863, 864, 5, 98, 0, 0, 864, 865, 5, 118,
		0, 0, 865, 867, 5, 119, 0, 0, 866, 868, 3, 124, 62, 0, 867, 866, 1, 0,
		0, 0, 867, 868, 1, 0, 0, 0, 868, 869, 1, 0, 0, 0, 869, 871, 5, 122, 0,
		0, 870, 855, 1, 0, 0, 0, 870, 856, 1, 0, 0, 0, 870, 863, 1, 0, 0, 0, 871,
		121, 1, 0, 0, 0, 872, 874, 5, 121, 0, 0, 873, 872, 1, 0, 0, 0, 874, 875,
		1, 0, 0, 0, 875, 873, 1, 0, 0, 0, 875, 876, 1, 0, 0, 0, 876, 123, 1, 0,
		0, 0, 877, 879, 5, 123, 0, 0, 878, 877, 1, 0, 0, 0, 879, 880, 1, 0, 0,
		0, 880, 878, 1, 0, 0, 0, 880, 881, 1, 0, 0, 0, 881, 125, 1, 0, 0, 0, 882,
		886, 5, 104, 0, 0, 883, 885, 3, 134, 67, 0, 884, 883, 1, 0, 0, 0, 885,
		888, 1, 0, 0, 0, 886, 884, 1, 0, 0, 0, 886, 887, 1, 0, 0, 0, 887, 889,
		1, 0, 0, 0, 888, 886, 1, 0, 0, 0, 889, 890, 5, 109, 0, 0, 890, 127, 1,
		0, 0, 0, 891, 895, 5, 105, 0, 0, 892, 894, 3, 136, 68, 0, 893, 892, 1,
		0, 0, 0, 894, 897, 1, 0, 0, 0, 895, 893, 1, 0, 0, 0, 895, 896, 1, 0, 0,
		0, 896, 898, 1, 0, 0, 0, 897, 895, 1, 0, 0, 0, 898, 899, 5, 112, 0, 0,
		899, 129, 1, 0, 0, 0, 900, 904, 5, 106, 0, 0, 901, 903, 3, 138, 69, 0,
		902, 901, 1, 0, 0, 0, 903, 906, 1, 0, 0, 0, 904, 902, 1, 0, 0, 0, 904,
		905, 1, 0, 0, 0, 905, 907, 1, 0, 0, 0, 906, 904, 1, 0, 0, 0, 907, 908,
		5, 115, 0, 0, 908, 131, 1, 0, 0, 0, 909, 913, 3, 126, 63, 0, 910, 913,
		3, 128, 64, 0, 911, 913, 3, 130, 65, 0, 912, 909, 1, 0, 0, 0, 912, 910,
		1, 0, 0, 0, 912, 911, 1, 0, 0, 0, 913, 133, 1, 0, 0, 0, 914, 916, 5, 110,
		0, 0, 915, 914, 1, 0, 0, 0, 916, 917, 1, 0, 0, 0, 917, 915, 1, 0, 0, 0,
		917, 918, 1, 0, 0, 0, 918, 924, 1, 0, 0, 0, 919, 920, 5, 111, 0, 0, 920,
		921, 3, 88, 44, 0, 921, 922, 5, 68, 0, 0, 922, 924, 1, 0, 0, 0, 923, 915,
		1, 0, 0, 0, 923, 919, 1, 0, 0, 0, 924, 135, 1, 0, 0, 0, 925, 927, 5, 113,
		0, 0, 926, 925, 1, 0, 0, 0, 927, 928, 1, 0, 0, 0, 928, 926, 1, 0, 0, 0,
		928, 929, 1, 0, 0, 0, 929, 935, 1, 0, 0, 0, 930, 931, 5, 114, 0, 0, 931,
		932, 3, 88, 44, 0, 932, 933, 5, 68, 0, 0, 933, 935, 1, 0, 0, 0, 934, 926,
		1, 0, 0, 0, 934, 930, 1, 0, 0, 0, 935, 137, 1, 0, 0, 0, 936, 938, 5, 116,
		0, 0, 937, 936, 1, 0, 0, 0, 938, 939, 1, 0, 0, 0, 939, 937, 1, 0, 0, 0,
		939, 940, 1, 0, 0, 0, 940, 946, 1, 0, 0, 0, 941, 942, 5, 117, 0, 0, 942,
		943, 3, 88, 44, 0, 943, 944, 5, 68, 0, 0, 944, 946, 1, 0, 0, 0, 945, 937,
		1, 0, 0, 0, 945, 941, 1, 0, 0, 0, 946, 139, 1, 0, 0, 0, 947, 948, 7, 11,
		0, 0, 948, 141, 1, 0, 0, 0, 949, 950, 5, 108, 0, 0, 950, 143, 1, 0, 0,
		0, 951, 955, 5, 63, 0, 0, 952, 954, 3, 160, 80, 0, 953, 952, 1, 0, 0, 0,
		954, 957, 1, 0, 0, 0, 955, 953, 1, 0, 0, 0, 955, 956, 1, 0, 0, 0, 956,
		959, 1, 0, 0, 0, 957, 955, 1, 0, 0, 0, 958, 960, 3, 150, 75, 0, 959, 958,
		1, 0, 0, 0, 959, 960, 1, 0, 0, 0, 960, 964, 1, 0, 0, 0, 961, 963, 3, 160,
		80, 0, 962, 961, 1, 0, 0, 0, 963, 966, 1, 0, 0, 0, 964, 962, 1, 0, 0, 0,
		964, 965, 1, 0, 0, 0, 965, 967, 1, 0, 0, 0, 966, 964, 1, 0, 0, 0, 967,
		968, 5, 64, 0, 0, 968, 145, 1, 0, 0, 0, 969, 970, 3, 96, 48, 0, 970, 974,
		5, 67, 0, 0, 971, 973, 3, 160, 80, 0, 972, 971, 1, 0, 0, 0, 973, 976, 1,
		0, 0, 0, 974, 972, 1, 0, 0, 0, 974, 975, 1, 0, 0, 0, 975, 978, 1, 0, 0,
		0, 976, 974, 1, 0, 0, 0, 977, 979, 3, 150, 75, 0, 978, 977, 1, 0, 0, 0,
		978, 979, 1, 0, 0, 0, 979, 983, 1, 0, 0, 0, 980, 982, 3, 160, 80, 0, 981,
		980, 1, 0, 0, 0, 982, 985, 1, 0, 0, 0, 983, 981, 1, 0, 0, 0, 983, 984,
		1, 0, 0, 0, 984, 986, 1, 0, 0, 0, 985, 983, 1, 0, 0, 0, 986, 987, 5, 69,
		0, 0, 987, 147, 1, 0, 0, 0, 988, 993, 3, 88, 44, 0, 989, 990, 5, 70, 0,
		0, 990, 992, 3, 88, 44, 0, 991, 989, 1, 0, 0, 0, 992, 995, 1, 0, 0, 0,
		993, 991, 1, 0, 0, 0, 993, 994, 1, 0, 0, 0, 994, 997, 1, 0, 0, 0, 995,
		993, 1, 0, 0, 0, 996, 998, 5, 70, 0, 0, 997, 996, 1, 0, 0, 0, 997, 998,
		1, 0, 0, 0, 998, 149, 1, 0, 0, 0, 999, 1010, 3, 88, 44, 0, 1000, 1004,
		5, 70, 0, 0, 1001, 1003, 3, 160, 80, 0, 1002, 1001, 1, 0, 0, 0, 1003, 1006,
		1, 0, 0, 0, 1004, 1002, 1, 0, 0, 0, 1004, 1005, 1, 0, 0, 0, 1005, 1007,
		1, 0, 0, 0, 1006, 1004, 1, 0, 0, 0, 1007, 1009, 3, 88, 44, 0, 1008, 1000,
		1, 0, 0, 0, 1009, 1012, 1, 0, 0, 0, 1010, 1008, 1, 0, 0, 0, 1010, 1011,
		1, 0, 0, 0, 1011, 1014, 1, 0, 0, 0, 1012, 1010, 1, 0, 0, 0, 1013, 1015,
		5, 70, 0, 0, 1014, 1013, 1, 0, 0, 0, 1014, 1015, 1, 0, 0, 0, 1015, 151,
		1, 0, 0, 0, 1016, 1035, 3, 154, 77, 0, 1017, 1021, 5, 67, 0, 0, 1018, 1020,
		3, 160, 80, 0, 1019, 1018, 1, 0, 0, 0, 1020, 1023, 1, 0, 0, 0, 1021, 1019,
		1, 0, 0, 0, 1021, 1022, 1, 0, 0, 0, 1022, 1025, 1, 0, 0, 0, 1023, 1021,
		1, 0, 0, 0, 1024, 1026, 3, 156, 78, 0, 1025, 1024, 1, 0, 0, 0, 1025, 1026,
		1, 0, 0, 0, 1026, 1030, 1, 0, 0, 0, 1027, 1029, 3, 160, 80, 0, 1028, 1027,
		1, 0, 0, 0, 1029, 1032, 1, 0, 0, 0, 1030, 1028, 1, 0, 0, 0, 1030, 1031,
		1, 0, 0, 0, 1031, 1033, 1, 0, 0, 0, 1032, 1030, 1, 0, 0, 0, 1033, 1035,
		5, 69, 0, 0, 1034, 1016, 1, 0, 0, 0, 1034, 1017, 1, 0, 0, 0, 1035, 153,
		1, 0, 0, 0, 1036, 1037, 3, 98, 49, 0, 1037, 1041, 5, 67, 0, 0, 1038, 1040,
		3, 160, 80, 0, 1039, 1038, 1, 0, 0, 0, 1040, 1043, 1, 0, 0, 0, 1041, 1039,
		1, 0, 0, 0, 1041, 1042, 1, 0, 0, 0, 1042, 1045, 1, 0, 0, 0, 1043, 1041,
		1, 0, 0, 0, 1044, 1046, 3, 156, 78, 0, 1045, 1044, 1, 0, 0, 0, 1045, 1046,
		1, 0, 0, 0, 1046, 1050, 1, 0, 0, 0, 1047, 1049, 3, 160, 80, 0, 1048, 1047,
		1, 0, 0, 0, 1049, 1052, 1, 0, 0, 0, 1050, 1048, 1, 0, 0, 0, 1050, 1051,
		1, 0, 0, 0, 1051, 1053, 1, 0, 0, 0, 1052, 1050, 1, 0, 0, 0, 1053, 1054,
		5, 69, 0, 0, 1054, 155, 1, 0, 0, 0, 1055, 1066, 3, 158, 79, 0, 1056, 1060,
		5, 70, 0, 0, 1057, 1059, 3, 160, 80, 0, 1058, 1057, 1, 0, 0, 0, 1059, 1062,
		1, 0, 0, 0, 1060, 1058, 1, 0, 0, 0, 1060, 1061, 1, 0, 0, 0, 1061, 1063,
		1, 0, 0, 0, 1062, 1060, 1, 0, 0, 0, 1063, 1065, 3, 158, 79, 0, 1064, 1056,
		1, 0, 0, 0, 1065, 1068, 1, 0, 0, 0, 1066, 1064, 1, 0, 0, 0, 1066, 1067,
		1, 0, 0, 0, 1067, 1070, 1, 0, 0, 0, 1068, 1066, 1, 0, 0, 0, 1069, 1071,
		5, 70, 0, 0, 1070, 1069, 1, 0, 0, 0, 1070, 1071, 1, 0, 0, 0, 1071, 157,
		1, 0, 0, 0, 1072, 1073, 3, 88, 44, 0, 1073, 1074, 5, 62, 0, 0, 1074, 1075,
		3, 88, 44, 0, 1075, 159, 1, 0, 0, 0, 1076, 1078, 7, 12, 0, 0, 1077, 1076,
		1, 0, 0, 0, 1078, 1079, 1, 0, 0, 0, 1079, 1077, 1, 0, 0, 0, 1079, 1080,
		1, 0, 0, 0, 1080, 161, 1, 0, 0, 0, 1081, 1091, 5, 87, 0, 0, 1082, 1084,
		5, 100, 0, 0, 1083, 1082, 1, 0, 0, 0, 1084, 1085, 1, 0, 0, 0, 1085, 1083,
		1, 0, 0, 0, 1085, 1086, 1, 0, 0, 0, 1086, 1091, 1, 0, 0, 0, 1087, 1091,
		5, 97, 0, 0, 1088, 1091, 5, 99, 0, 0, 1089, 1091, 4, 81, 10, 0, 1090, 1081,
		1, 0, 0, 0, 1090, 1083, 1, 0, 0, 0, 1090, 1087, 1, 0, 0, 0, 1090, 1088,
		1, 0, 0, 0, 1090, 1089, 1, 0, 0, 0, 1091, 163, 1, 0, 0, 0, 133, 167, 176,
		225, 231, 236, 251, 262, 273, 277, 289, 294, 298, 302, 306, 310, 316, 320,
		323, 330, 336, 343, 347, 353, 359, 361, 366, 376, 383, 401, 405, 410, 416,
		420, 425, 433, 448, 454, 462, 475, 491, 494, 509, 513, 518, 534, 541, 551,
		561, 571, 578, 587, 596, 605, 612, 619, 631, 633, 635, 640, 649, 657, 661,
		671, 688, 692, 698, 702, 707, 709, 716, 723, 730, 736, 740, 745, 749, 754,
		759, 763, 768, 775, 782, 788, 792, 797, 801, 806, 814, 818, 822, 827, 831,
		838, 851, 860, 867, 870, 875, 880, 886, 895, 904, 912, 917, 923, 928, 934,
		939, 945, 955, 959, 964, 974, 978, 983, 993, 997, 1004, 1010, 1014, 1021,
		1025, 1030, 1034, 1041, 1045, 1050, 1060, 1066, 1070, 1079, 1085, 1090,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// YaklangParserInit initializes any static state used to implement YaklangParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewYaklangParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func YaklangParserInit() {
	staticData := &yaklangparserParserStaticData
	staticData.once.Do(yaklangparserParserInit)
}

// NewYaklangParser produces a new parser instance for the optional input antlr.TokenStream.
func NewYaklangParser(input antlr.TokenStream) *YaklangParser {
	YaklangParserInit()
	this := new(YaklangParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &yaklangparserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	this.RuleNames = staticData.ruleNames
	this.LiteralNames = staticData.literalNames
	this.SymbolicNames = staticData.symbolicNames
	this.GrammarFileName = "java-escape"

	return this
}

// YaklangParser tokens.
const (
	YaklangParserEOF                                         = antlr.TokenEOF
	YaklangParserPanic                                       = 1
	YaklangParserRecover                                     = 2
	YaklangParserIf                                          = 3
	YaklangParserElif                                        = 4
	YaklangParserElse                                        = 5
	YaklangParserSwitch                                      = 6
	YaklangParserCase                                        = 7
	YaklangParserDefault                                     = 8
	YaklangParserFor                                         = 9
	YaklangParserContinue                                    = 10
	YaklangParserBreak                                       = 11
	YaklangParserReturn                                      = 12
	YaklangParserInclude                                     = 13
	YaklangParserTry                                         = 14
	YaklangParserCatch                                       = 15
	YaklangParserFinally                                     = 16
	YaklangParserImportmod                                   = 17
	YaklangParserAs                                          = 18
	YaklangParserExport                                      = 19
	YaklangParserDefer                                       = 20
	YaklangParserGo                                          = 21
	YaklangParserRange                                       = 22
	YaklangParserFunc                                        = 23
	YaklangParserMap                                         = 24
	YaklangParserChan                                        = 25
	YaklangParserClass                                       = 26
	YaklangParserNew                                         = 27
	YaklangParserMake                                        = 28
	YaklangParserTrue                                        = 29
	YaklangParserFalse                                       = 30
	YaklangParserIn                                          = 31
	YaklangParserNotLiteral                                  = 32
	YaklangParserAssert                                      = 33
	YaklangParserVar                                         = 34
	YaklangParserVarTypeName                                 = 35
	YaklangParserUndefinedLiteral                            = 36
	YaklangParserFallthrough                                 = 37
	YaklangParserNilLiteral                                  = 38
	YaklangParserIdentifier                                  = 39
	YaklangParserIdentifierWithDollar                        = 40
	YaklangParserMul                                         = 41
	YaklangParserDiv                                         = 42
	YaklangParserMod                                         = 43
	YaklangParserLtLt                                        = 44
	YaklangParserLt                                          = 45
	YaklangParserGtGt                                        = 46
	YaklangParserGt                                          = 47
	YaklangParserAmp                                         = 48
	YaklangParserAmpNot                                      = 49
	YaklangParserPlus                                        = 50
	YaklangParserSub                                         = 51
	YaklangParserXor                                         = 52
	YaklangParserXand                                        = 53
	YaklangParserEq                                          = 54
	YaklangParserLtEq                                        = 55
	YaklangParserGtEq                                        = 56
	YaklangParserNeq                                         = 57
	YaklangParserChanIn                                      = 58
	YaklangParserLogicAnd                                    = 59
	YaklangParserLogicOr                                     = 60
	YaklangParserQuestion                                    = 61
	YaklangParserColon                                       = 62
	YaklangParserLBracket                                    = 63
	YaklangParserRBracket                                    = 64
	YaklangParserLParen                                      = 65
	YaklangParserRParen                                      = 66
	YaklangParserLBrace                                      = 67
	YaklangParserTemplateCloseBrace                          = 68
	YaklangParserRBrace                                      = 69
	YaklangParserComma                                       = 70
	YaklangParserAssignEq                                    = 71
	YaklangParserWavy                                        = 72
	YaklangParserColonAssignEq                               = 73
	YaklangParserPlusPlus                                    = 74
	YaklangParserSubSub                                      = 75
	YaklangParserPlusEq                                      = 76
	YaklangParserMinusEq                                     = 77
	YaklangParserMulEq                                       = 78
	YaklangParserDivEq                                       = 79
	YaklangParserModEq                                       = 80
	YaklangParserBitOrEq                                     = 81
	YaklangParserLtLtEq                                      = 82
	YaklangParserGtGtEq                                      = 83
	YaklangParserAmpEq                                       = 84
	YaklangParserBitAndEq                                    = 85
	YaklangParserBitAndNotEq                                 = 86
	YaklangParserSemiColon                                   = 87
	YaklangParserEllipsis                                    = 88
	YaklangParserEqGt                                        = 89
	YaklangParserLtGt                                        = 90
	YaklangParserNot                                         = 91
	YaklangParserDot                                         = 92
	YaklangParserWS                                          = 93
	YaklangParserCommentStart                                = 94
	YaklangParserCommentEnd                                  = 95
	YaklangParserBackTickL                                   = 96
	YaklangParserCOMMENT                                     = 97
	YaklangParserStartNowDoc                                 = 98
	YaklangParserLINE_COMMENT                                = 99
	YaklangParserLF                                          = 100
	YaklangParserEOS                                         = 101
	YaklangParserIntegerLiteral                              = 102
	YaklangParserFloatLiteral                                = 103
	YaklangParserTemplateSingleQuoteStringStart              = 104
	YaklangParserTemplateDoubleQuoteStringStart              = 105
	YaklangParserTemplateBackTickStringStart                 = 106
	YaklangParserStringLiteral                               = 107
	YaklangParserCharacterLiteral                            = 108
	YaklangParserTemplateSingleQuoteStringCharacterStringEnd = 109
	YaklangParserTemplateSingleQuoteStringCharacter          = 110
	YaklangParserTemplateSingleQuoteStringStartExpression    = 111
	YaklangParserTemplateDoubleQuoteStringCharacterStringEnd = 112
	YaklangParserTemplateDoubleQuoteStringCharacter          = 113
	YaklangParserTemplateDoubleQuoteStringStartExpression    = 114
	YaklangParserTemplateBackTickStringCharacterStringEnd    = 115
	YaklangParserTemplateBackTickStringCharacter             = 116
	YaklangParserTemplateBackTickStringStartExpression       = 117
	YaklangParserHereDocIdentifierName                       = 118
	YaklangParserHereDocIdentifierBreak                      = 119
	YaklangParserCRLFEndDoc                                  = 120
	YaklangParserCRLFHereDocText                             = 121
	YaklangParserLFEndDoc                                    = 122
	YaklangParserLFHereDocText                               = 123
)

// YaklangParser rules.
const (
	YaklangParserRULE_program                          = 0
	YaklangParserRULE_statementList                    = 1
	YaklangParserRULE_statement                        = 2
	YaklangParserRULE_tryStmt                          = 3
	YaklangParserRULE_expressionStmt                   = 4
	YaklangParserRULE_assignExpressionStmt             = 5
	YaklangParserRULE_lineCommentStmt                  = 6
	YaklangParserRULE_includeStmt                      = 7
	YaklangParserRULE_deferStmt                        = 8
	YaklangParserRULE_goStmt                           = 9
	YaklangParserRULE_assertStmt                       = 10
	YaklangParserRULE_fallthroughStmt                  = 11
	YaklangParserRULE_breakStmt                        = 12
	YaklangParserRULE_continueStmt                     = 13
	YaklangParserRULE_returnStmt                       = 14
	YaklangParserRULE_callExpr                         = 15
	YaklangParserRULE_functionCallExpr                 = 16
	YaklangParserRULE_forStmt                          = 17
	YaklangParserRULE_forStmtCond                      = 18
	YaklangParserRULE_forFirstExpr                     = 19
	YaklangParserRULE_forThirdExpr                     = 20
	YaklangParserRULE_forRangeStmt                     = 21
	YaklangParserRULE_switchStmt                       = 22
	YaklangParserRULE_panicStmt                        = 23
	YaklangParserRULE_recoverStmt                      = 24
	YaklangParserRULE_ifStmt                           = 25
	YaklangParserRULE_elseBlock                        = 26
	YaklangParserRULE_block                            = 27
	YaklangParserRULE_empty                            = 28
	YaklangParserRULE_inplaceAssignOperator            = 29
	YaklangParserRULE_assignExpression                 = 30
	YaklangParserRULE_declareVariableExpressionStmt    = 31
	YaklangParserRULE_declareVariableExpression        = 32
	YaklangParserRULE_declareVariableOnly              = 33
	YaklangParserRULE_declareAndAssignExpression       = 34
	YaklangParserRULE_leftExpressionList               = 35
	YaklangParserRULE_unaryOperator                    = 36
	YaklangParserRULE_bitBinaryOperator                = 37
	YaklangParserRULE_additiveBinaryOperator           = 38
	YaklangParserRULE_multiplicativeBinaryOperator     = 39
	YaklangParserRULE_comparisonBinaryOperator         = 40
	YaklangParserRULE_leftExpression                   = 41
	YaklangParserRULE_leftMemberCall                   = 42
	YaklangParserRULE_leftSliceCall                    = 43
	YaklangParserRULE_expression                       = 44
	YaklangParserRULE_parenExpression                  = 45
	YaklangParserRULE_makeExpression                   = 46
	YaklangParserRULE_typeLiteral                      = 47
	YaklangParserRULE_sliceTypeLiteral                 = 48
	YaklangParserRULE_mapTypeLiteral                   = 49
	YaklangParserRULE_instanceCode                     = 50
	YaklangParserRULE_anonymousFunctionDecl            = 51
	YaklangParserRULE_functionNameDecl                 = 52
	YaklangParserRULE_functionParamDecl                = 53
	YaklangParserRULE_functionCall                     = 54
	YaklangParserRULE_ordinaryArguments                = 55
	YaklangParserRULE_memberCall                       = 56
	YaklangParserRULE_sliceCall                        = 57
	YaklangParserRULE_literal                          = 58
	YaklangParserRULE_numericLiteral                   = 59
	YaklangParserRULE_stringLiteral                    = 60
	YaklangParserRULE_crlfHereDoc                      = 61
	YaklangParserRULE_lfHereDoc                        = 62
	YaklangParserRULE_templateSingleQuoteStringLiteral = 63
	YaklangParserRULE_templateDoubleQuoteStringLiteral = 64
	YaklangParserRULE_templateBackTickStringLiteral    = 65
	YaklangParserRULE_templateStringLiteral            = 66
	YaklangParserRULE_templateSingleQuoteStringAtom    = 67
	YaklangParserRULE_templateDoubleQuoteStringAtom    = 68
	YaklangParserRULE_templateBackTickStringAtom       = 69
	YaklangParserRULE_boolLiteral                      = 70
	YaklangParserRULE_characterLiteral                 = 71
	YaklangParserRULE_sliceLiteral                     = 72
	YaklangParserRULE_sliceTypedLiteral                = 73
	YaklangParserRULE_expressionList                   = 74
	YaklangParserRULE_expressionListMultiline          = 75
	YaklangParserRULE_mapLiteral                       = 76
	YaklangParserRULE_mapTypedLiteral                  = 77
	YaklangParserRULE_mapPairs                         = 78
	YaklangParserRULE_mapPair                          = 79
	YaklangParserRULE_ws                               = 80
	YaklangParserRULE_eos                              = 81
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) StatementList() IStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *ProgramContext) EOF() antlr.TerminalNode {
	return s.GetToken(YaklangParserEOF, 0)
}

func (s *ProgramContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *ProgramContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Program() (localctx IProgramContext) {
	this := p
	_ = this

	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, YaklangParserRULE_program)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(167)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(164)
				p.Ws()
			}

		}
		p.SetState(169)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())
	}
	{
		p.SetState(170)
		p.StatementList()
	}
	{
		p.SetState(171)
		p.Match(YaklangParserEOF)
	}

	return localctx
}

// IStatementListContext is an interface to support dynamic dispatch.
type IStatementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListContext differentiates from other interfaces.
	IsStatementListContext()
}

type StatementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListContext() *StatementListContext {
	var p = new(StatementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_statementList
	return p
}

func (*StatementListContext) IsStatementListContext() {}

func NewStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListContext {
	var p = new(StatementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_statementList

	return p
}

func (s *StatementListContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *StatementListContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitStatementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) StatementList() (localctx IStatementListContext) {
	this := p
	_ = this

	localctx = NewStatementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, YaklangParserRULE_statementList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(174)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(173)
				p.Statement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(176)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) LineCommentStmt() ILineCommentStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILineCommentStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILineCommentStmtContext)
}

func (s *StatementContext) Eos() IEosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *StatementContext) DeclareVariableExpressionStmt() IDeclareVariableExpressionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareVariableExpressionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareVariableExpressionStmtContext)
}

func (s *StatementContext) AssignExpressionStmt() IAssignExpressionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExpressionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExpressionStmtContext)
}

func (s *StatementContext) ExpressionStmt() IExpressionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionStmtContext)
}

func (s *StatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementContext) TryStmt() ITryStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITryStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITryStmtContext)
}

func (s *StatementContext) Empty() IEmptyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEmptyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEmptyContext)
}

func (s *StatementContext) IfStmt() IIfStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *StatementContext) SwitchStmt() ISwitchStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchStmtContext)
}

func (s *StatementContext) ForRangeStmt() IForRangeStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForRangeStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForRangeStmtContext)
}

func (s *StatementContext) ForStmt() IForStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStmtContext)
}

func (s *StatementContext) BreakStmt() IBreakStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStmtContext)
}

func (s *StatementContext) ReturnStmt() IReturnStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnStmtContext)
}

func (s *StatementContext) ContinueStmt() IContinueStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinueStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinueStmtContext)
}

func (s *StatementContext) FallthroughStmt() IFallthroughStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFallthroughStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFallthroughStmtContext)
}

func (s *StatementContext) IncludeStmt() IIncludeStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIncludeStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIncludeStmtContext)
}

func (s *StatementContext) DeferStmt() IDeferStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeferStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeferStmtContext)
}

func (s *StatementContext) GoStmt() IGoStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGoStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGoStmtContext)
}

func (s *StatementContext) AssertStmt() IAssertStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssertStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssertStmtContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Statement() (localctx IStatementContext) {
	this := p
	_ = this

	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, YaklangParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(225)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(178)
			p.LineCommentStmt()
		}
		{
			p.SetState(179)
			p.Eos()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(181)
			p.DeclareVariableExpressionStmt()
		}
		{
			p.SetState(182)
			p.Eos()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(184)
			p.AssignExpressionStmt()
		}
		{
			p.SetState(185)
			p.Eos()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(187)
			p.ExpressionStmt()
		}
		{
			p.SetState(188)
			p.Eos()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(190)
			p.Block()
		}
		{
			p.SetState(191)
			p.Eos()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(193)
			p.TryStmt()
		}
		{
			p.SetState(194)
			p.Eos()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(196)
			p.Empty()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(197)
			p.IfStmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(198)
			p.SwitchStmt()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(199)
			p.ForRangeStmt()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(200)
			p.ForStmt()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(201)
			p.BreakStmt()
		}
		{
			p.SetState(202)
			p.Eos()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(204)
			p.ReturnStmt()
		}
		{
			p.SetState(205)
			p.Eos()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(207)
			p.ContinueStmt()
		}
		{
			p.SetState(208)
			p.Eos()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(210)
			p.FallthroughStmt()
		}
		{
			p.SetState(211)
			p.Eos()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(213)
			p.IncludeStmt()
		}
		{
			p.SetState(214)
			p.Eos()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(216)
			p.DeferStmt()
		}
		{
			p.SetState(217)
			p.Eos()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(219)
			p.GoStmt()
		}
		{
			p.SetState(220)
			p.Eos()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(222)
			p.AssertStmt()
		}
		{
			p.SetState(223)
			p.Eos()
		}

	}

	return localctx
}

// ITryStmtContext is an interface to support dynamic dispatch.
type ITryStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStmtContext differentiates from other interfaces.
	IsTryStmtContext()
}

type TryStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStmtContext() *TryStmtContext {
	var p = new(TryStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_tryStmt
	return p
}

func (*TryStmtContext) IsTryStmtContext() {}

func NewTryStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStmtContext {
	var p = new(TryStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_tryStmt

	return p
}

func (s *TryStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStmtContext) Try() antlr.TerminalNode {
	return s.GetToken(YaklangParserTry, 0)
}

func (s *TryStmtContext) AllBlock() []IBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockContext); ok {
			len++
		}
	}

	tst := make([]IBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockContext); ok {
			tst[i] = t.(IBlockContext)
			i++
		}
	}

	return tst
}

func (s *TryStmtContext) Block(i int) IBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryStmtContext) Catch() antlr.TerminalNode {
	return s.GetToken(YaklangParserCatch, 0)
}

func (s *TryStmtContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *TryStmtContext) Finally() antlr.TerminalNode {
	return s.GetToken(YaklangParserFinally, 0)
}

func (s *TryStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTryStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TryStmt() (localctx ITryStmtContext) {
	this := p
	_ = this

	localctx = NewTryStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, YaklangParserRULE_tryStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(227)
		p.Match(YaklangParserTry)
	}
	{
		p.SetState(228)
		p.Block()
	}
	{
		p.SetState(229)
		p.Match(YaklangParserCatch)
	}
	p.SetState(231)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserIdentifier {
		{
			p.SetState(230)
			p.Match(YaklangParserIdentifier)
		}

	}
	{
		p.SetState(233)
		p.Block()
	}
	p.SetState(236)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(234)
			p.Match(YaklangParserFinally)
		}
		{
			p.SetState(235)
			p.Block()
		}

	}

	return localctx
}

// IExpressionStmtContext is an interface to support dynamic dispatch.
type IExpressionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStmtContext differentiates from other interfaces.
	IsExpressionStmtContext()
}

type ExpressionStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStmtContext() *ExpressionStmtContext {
	var p = new(ExpressionStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_expressionStmt
	return p
}

func (*ExpressionStmtContext) IsExpressionStmtContext() {}

func NewExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStmtContext {
	var p = new(ExpressionStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_expressionStmt

	return p
}

func (s *ExpressionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitExpressionStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ExpressionStmt() (localctx IExpressionStmtContext) {
	this := p
	_ = this

	localctx = NewExpressionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, YaklangParserRULE_expressionStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(238)
		p.expression(0)
	}

	return localctx
}

// IAssignExpressionStmtContext is an interface to support dynamic dispatch.
type IAssignExpressionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignExpressionStmtContext differentiates from other interfaces.
	IsAssignExpressionStmtContext()
}

type AssignExpressionStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignExpressionStmtContext() *AssignExpressionStmtContext {
	var p = new(AssignExpressionStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_assignExpressionStmt
	return p
}

func (*AssignExpressionStmtContext) IsAssignExpressionStmtContext() {}

func NewAssignExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignExpressionStmtContext {
	var p = new(AssignExpressionStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_assignExpressionStmt

	return p
}

func (s *AssignExpressionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignExpressionStmtContext) AssignExpression() IAssignExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExpressionContext)
}

func (s *AssignExpressionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignExpressionStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAssignExpressionStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AssignExpressionStmt() (localctx IAssignExpressionStmtContext) {
	this := p
	_ = this

	localctx = NewAssignExpressionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, YaklangParserRULE_assignExpressionStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(240)
		p.AssignExpression()
	}

	return localctx
}

// ILineCommentStmtContext is an interface to support dynamic dispatch.
type ILineCommentStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLineCommentStmtContext differentiates from other interfaces.
	IsLineCommentStmtContext()
}

type LineCommentStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLineCommentStmtContext() *LineCommentStmtContext {
	var p = new(LineCommentStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_lineCommentStmt
	return p
}

func (*LineCommentStmtContext) IsLineCommentStmtContext() {}

func NewLineCommentStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LineCommentStmtContext {
	var p = new(LineCommentStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_lineCommentStmt

	return p
}

func (s *LineCommentStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *LineCommentStmtContext) LINE_COMMENT() antlr.TerminalNode {
	return s.GetToken(YaklangParserLINE_COMMENT, 0)
}

func (s *LineCommentStmtContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(YaklangParserCOMMENT, 0)
}

func (s *LineCommentStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineCommentStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LineCommentStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLineCommentStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LineCommentStmt() (localctx ILineCommentStmtContext) {
	this := p
	_ = this

	localctx = NewLineCommentStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, YaklangParserRULE_lineCommentStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(242)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserCOMMENT || _la == YaklangParserLINE_COMMENT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIncludeStmtContext is an interface to support dynamic dispatch.
type IIncludeStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncludeStmtContext differentiates from other interfaces.
	IsIncludeStmtContext()
}

type IncludeStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncludeStmtContext() *IncludeStmtContext {
	var p = new(IncludeStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_includeStmt
	return p
}

func (*IncludeStmtContext) IsIncludeStmtContext() {}

func NewIncludeStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncludeStmtContext {
	var p = new(IncludeStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_includeStmt

	return p
}

func (s *IncludeStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *IncludeStmtContext) Include() antlr.TerminalNode {
	return s.GetToken(YaklangParserInclude, 0)
}

func (s *IncludeStmtContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserStringLiteral, 0)
}

func (s *IncludeStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncludeStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncludeStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitIncludeStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) IncludeStmt() (localctx IIncludeStmtContext) {
	this := p
	_ = this

	localctx = NewIncludeStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, YaklangParserRULE_includeStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(244)
		p.Match(YaklangParserInclude)
	}
	{
		p.SetState(245)
		p.Match(YaklangParserStringLiteral)
	}

	return localctx
}

// IDeferStmtContext is an interface to support dynamic dispatch.
type IDeferStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeferStmtContext differentiates from other interfaces.
	IsDeferStmtContext()
}

type DeferStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeferStmtContext() *DeferStmtContext {
	var p = new(DeferStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_deferStmt
	return p
}

func (*DeferStmtContext) IsDeferStmtContext() {}

func NewDeferStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeferStmtContext {
	var p = new(DeferStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_deferStmt

	return p
}

func (s *DeferStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *DeferStmtContext) Defer() antlr.TerminalNode {
	return s.GetToken(YaklangParserDefer, 0)
}

func (s *DeferStmtContext) RecoverStmt() IRecoverStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecoverStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecoverStmtContext)
}

func (s *DeferStmtContext) PanicStmt() IPanicStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPanicStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPanicStmtContext)
}

func (s *DeferStmtContext) CallExpr() ICallExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallExprContext)
}

func (s *DeferStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeferStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeferStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeferStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeferStmt() (localctx IDeferStmtContext) {
	this := p
	_ = this

	localctx = NewDeferStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, YaklangParserRULE_deferStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(247)
		p.Match(YaklangParserDefer)
	}
	p.SetState(251)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(248)
			p.RecoverStmt()
		}

	case 2:
		{
			p.SetState(249)
			p.PanicStmt()
		}

	case 3:
		{
			p.SetState(250)
			p.CallExpr()
		}

	}

	return localctx
}

// IGoStmtContext is an interface to support dynamic dispatch.
type IGoStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGoStmtContext differentiates from other interfaces.
	IsGoStmtContext()
}

type GoStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGoStmtContext() *GoStmtContext {
	var p = new(GoStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_goStmt
	return p
}

func (*GoStmtContext) IsGoStmtContext() {}

func NewGoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GoStmtContext {
	var p = new(GoStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_goStmt

	return p
}

func (s *GoStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *GoStmtContext) Go() antlr.TerminalNode {
	return s.GetToken(YaklangParserGo, 0)
}

func (s *GoStmtContext) CallExpr() ICallExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallExprContext)
}

func (s *GoStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GoStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitGoStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) GoStmt() (localctx IGoStmtContext) {
	this := p
	_ = this

	localctx = NewGoStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, YaklangParserRULE_goStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(253)
		p.Match(YaklangParserGo)
	}
	{
		p.SetState(254)
		p.CallExpr()
	}

	return localctx
}

// IAssertStmtContext is an interface to support dynamic dispatch.
type IAssertStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssertStmtContext differentiates from other interfaces.
	IsAssertStmtContext()
}

type AssertStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssertStmtContext() *AssertStmtContext {
	var p = new(AssertStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_assertStmt
	return p
}

func (*AssertStmtContext) IsAssertStmtContext() {}

func NewAssertStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssertStmtContext {
	var p = new(AssertStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_assertStmt

	return p
}

func (s *AssertStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *AssertStmtContext) Assert() antlr.TerminalNode {
	return s.GetToken(YaklangParserAssert, 0)
}

func (s *AssertStmtContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *AssertStmtContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssertStmtContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *AssertStmtContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *AssertStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssertStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssertStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAssertStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AssertStmt() (localctx IAssertStmtContext) {
	this := p
	_ = this

	localctx = NewAssertStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, YaklangParserRULE_assertStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(256)
		p.Match(YaklangParserAssert)
	}
	{
		p.SetState(257)
		p.expression(0)
	}
	p.SetState(262)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(258)
				p.Match(YaklangParserComma)
			}
			{
				p.SetState(259)
				p.expression(0)
			}

		}
		p.SetState(264)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
	}

	return localctx
}

// IFallthroughStmtContext is an interface to support dynamic dispatch.
type IFallthroughStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFallthroughStmtContext differentiates from other interfaces.
	IsFallthroughStmtContext()
}

type FallthroughStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFallthroughStmtContext() *FallthroughStmtContext {
	var p = new(FallthroughStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_fallthroughStmt
	return p
}

func (*FallthroughStmtContext) IsFallthroughStmtContext() {}

func NewFallthroughStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FallthroughStmtContext {
	var p = new(FallthroughStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_fallthroughStmt

	return p
}

func (s *FallthroughStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *FallthroughStmtContext) Fallthrough() antlr.TerminalNode {
	return s.GetToken(YaklangParserFallthrough, 0)
}

func (s *FallthroughStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FallthroughStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FallthroughStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitFallthroughStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) FallthroughStmt() (localctx IFallthroughStmtContext) {
	this := p
	_ = this

	localctx = NewFallthroughStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, YaklangParserRULE_fallthroughStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(265)
		p.Match(YaklangParserFallthrough)
	}

	return localctx
}

// IBreakStmtContext is an interface to support dynamic dispatch.
type IBreakStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStmtContext differentiates from other interfaces.
	IsBreakStmtContext()
}

type BreakStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStmtContext() *BreakStmtContext {
	var p = new(BreakStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_breakStmt
	return p
}

func (*BreakStmtContext) IsBreakStmtContext() {}

func NewBreakStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStmtContext {
	var p = new(BreakStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_breakStmt

	return p
}

func (s *BreakStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStmtContext) Break() antlr.TerminalNode {
	return s.GetToken(YaklangParserBreak, 0)
}

func (s *BreakStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitBreakStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) BreakStmt() (localctx IBreakStmtContext) {
	this := p
	_ = this

	localctx = NewBreakStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, YaklangParserRULE_breakStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(267)
		p.Match(YaklangParserBreak)
	}

	return localctx
}

// IContinueStmtContext is an interface to support dynamic dispatch.
type IContinueStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStmtContext differentiates from other interfaces.
	IsContinueStmtContext()
}

type ContinueStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStmtContext() *ContinueStmtContext {
	var p = new(ContinueStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_continueStmt
	return p
}

func (*ContinueStmtContext) IsContinueStmtContext() {}

func NewContinueStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStmtContext {
	var p = new(ContinueStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_continueStmt

	return p
}

func (s *ContinueStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStmtContext) Continue() antlr.TerminalNode {
	return s.GetToken(YaklangParserContinue, 0)
}

func (s *ContinueStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitContinueStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ContinueStmt() (localctx IContinueStmtContext) {
	this := p
	_ = this

	localctx = NewContinueStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, YaklangParserRULE_continueStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(269)
		p.Match(YaklangParserContinue)
	}

	return localctx
}

// IReturnStmtContext is an interface to support dynamic dispatch.
type IReturnStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStmtContext differentiates from other interfaces.
	IsReturnStmtContext()
}

type ReturnStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStmtContext() *ReturnStmtContext {
	var p = new(ReturnStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_returnStmt
	return p
}

func (*ReturnStmtContext) IsReturnStmtContext() {}

func NewReturnStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStmtContext {
	var p = new(ReturnStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_returnStmt

	return p
}

func (s *ReturnStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStmtContext) Return() antlr.TerminalNode {
	return s.GetToken(YaklangParserReturn, 0)
}

func (s *ReturnStmtContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ReturnStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitReturnStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ReturnStmt() (localctx IReturnStmtContext) {
	this := p
	_ = this

	localctx = NewReturnStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, YaklangParserRULE_returnStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(271)
		p.Match(YaklangParserReturn)
	}
	p.SetState(273)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(272)
			p.ExpressionList()
		}

	}

	return localctx
}

// ICallExprContext is an interface to support dynamic dispatch.
type ICallExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallExprContext differentiates from other interfaces.
	IsCallExprContext()
}

type CallExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallExprContext() *CallExprContext {
	var p = new(CallExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_callExpr
	return p
}

func (*CallExprContext) IsCallExprContext() {}

func NewCallExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallExprContext {
	var p = new(CallExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_callExpr

	return p
}

func (s *CallExprContext) GetParser() antlr.Parser { return s.parser }

func (s *CallExprContext) FunctionCallExpr() IFunctionCallExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallExprContext)
}

func (s *CallExprContext) InstanceCode() IInstanceCodeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstanceCodeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstanceCodeContext)
}

func (s *CallExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitCallExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) CallExpr() (localctx ICallExprContext) {
	this := p
	_ = this

	localctx = NewCallExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, YaklangParserRULE_callExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(277)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(275)
			p.FunctionCallExpr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(276)
			p.InstanceCode()
		}

	}

	return localctx
}

// IFunctionCallExprContext is an interface to support dynamic dispatch.
type IFunctionCallExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallExprContext differentiates from other interfaces.
	IsFunctionCallExprContext()
}

type FunctionCallExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallExprContext() *FunctionCallExprContext {
	var p = new(FunctionCallExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_functionCallExpr
	return p
}

func (*FunctionCallExprContext) IsFunctionCallExprContext() {}

func NewFunctionCallExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallExprContext {
	var p = new(FunctionCallExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_functionCallExpr

	return p
}

func (s *FunctionCallExprContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallExprContext) FunctionCall() IFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *FunctionCallExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitFunctionCallExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) FunctionCallExpr() (localctx IFunctionCallExprContext) {
	this := p
	_ = this

	localctx = NewFunctionCallExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, YaklangParserRULE_functionCallExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(279)
		p.expression(0)
	}
	{
		p.SetState(280)
		p.FunctionCall()
	}

	return localctx
}

// IForStmtContext is an interface to support dynamic dispatch.
type IForStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStmtContext differentiates from other interfaces.
	IsForStmtContext()
}

type ForStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStmtContext() *ForStmtContext {
	var p = new(ForStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forStmt
	return p
}

func (*ForStmtContext) IsForStmtContext() {}

func NewForStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStmtContext {
	var p = new(ForStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forStmt

	return p
}

func (s *ForStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStmtContext) For() antlr.TerminalNode {
	return s.GetToken(YaklangParserFor, 0)
}

func (s *ForStmtContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForStmtContext) ForStmtCond() IForStmtCondContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStmtCondContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStmtCondContext)
}

func (s *ForStmtContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *ForStmtContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *ForStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForStmt() (localctx IForStmtContext) {
	this := p
	_ = this

	localctx = NewForStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, YaklangParserRULE_forStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(282)
		p.Match(YaklangParserFor)
	}
	p.SetState(289)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(283)
			p.ForStmtCond()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(284)
			p.Match(YaklangParserLParen)
		}
		{
			p.SetState(285)
			p.ForStmtCond()
		}
		{
			p.SetState(286)
			p.Match(YaklangParserRParen)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(288)
			p.expression(0)
		}

	}
	{
		p.SetState(291)
		p.Block()
	}

	return localctx
}

// IForStmtCondContext is an interface to support dynamic dispatch.
type IForStmtCondContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStmtCondContext differentiates from other interfaces.
	IsForStmtCondContext()
}

type ForStmtCondContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStmtCondContext() *ForStmtCondContext {
	var p = new(ForStmtCondContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forStmtCond
	return p
}

func (*ForStmtCondContext) IsForStmtCondContext() {}

func NewForStmtCondContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStmtCondContext {
	var p = new(ForStmtCondContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forStmtCond

	return p
}

func (s *ForStmtCondContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStmtCondContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserSemiColon)
}

func (s *ForStmtCondContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserSemiColon, i)
}

func (s *ForStmtCondContext) ForFirstExpr() IForFirstExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForFirstExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForFirstExprContext)
}

func (s *ForStmtCondContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStmtCondContext) ForThirdExpr() IForThirdExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForThirdExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForThirdExprContext)
}

func (s *ForStmtCondContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStmtCondContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStmtCondContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForStmtCond(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForStmtCond() (localctx IForStmtCondContext) {
	this := p
	_ = this

	localctx = NewForStmtCondContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, YaklangParserRULE_forStmtCond)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(294)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
		{
			p.SetState(293)
			p.ForFirstExpr()
		}

	}
	{
		p.SetState(296)
		p.Match(YaklangParserSemiColon)
	}
	p.SetState(298)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
		{
			p.SetState(297)
			p.expression(0)
		}

	}
	{
		p.SetState(300)
		p.Match(YaklangParserSemiColon)
	}
	p.SetState(302)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(301)
			p.ForThirdExpr()
		}

	}

	return localctx
}

// IForFirstExprContext is an interface to support dynamic dispatch.
type IForFirstExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForFirstExprContext differentiates from other interfaces.
	IsForFirstExprContext()
}

type ForFirstExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForFirstExprContext() *ForFirstExprContext {
	var p = new(ForFirstExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forFirstExpr
	return p
}

func (*ForFirstExprContext) IsForFirstExprContext() {}

func NewForFirstExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForFirstExprContext {
	var p = new(ForFirstExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forFirstExpr

	return p
}

func (s *ForFirstExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ForFirstExprContext) AssignExpression() IAssignExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExpressionContext)
}

func (s *ForFirstExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForFirstExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForFirstExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForFirstExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForFirstExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForFirstExpr() (localctx IForFirstExprContext) {
	this := p
	_ = this

	localctx = NewForFirstExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, YaklangParserRULE_forFirstExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(306)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(304)
			p.AssignExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(305)
			p.expression(0)
		}

	}

	return localctx
}

// IForThirdExprContext is an interface to support dynamic dispatch.
type IForThirdExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForThirdExprContext differentiates from other interfaces.
	IsForThirdExprContext()
}

type ForThirdExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForThirdExprContext() *ForThirdExprContext {
	var p = new(ForThirdExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forThirdExpr
	return p
}

func (*ForThirdExprContext) IsForThirdExprContext() {}

func NewForThirdExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForThirdExprContext {
	var p = new(ForThirdExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forThirdExpr

	return p
}

func (s *ForThirdExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ForThirdExprContext) AssignExpression() IAssignExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExpressionContext)
}

func (s *ForThirdExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForThirdExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForThirdExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForThirdExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForThirdExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForThirdExpr() (localctx IForThirdExprContext) {
	this := p
	_ = this

	localctx = NewForThirdExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, YaklangParserRULE_forThirdExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(310)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(308)
			p.AssignExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(309)
			p.expression(0)
		}

	}

	return localctx
}

// IForRangeStmtContext is an interface to support dynamic dispatch.
type IForRangeStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForRangeStmtContext differentiates from other interfaces.
	IsForRangeStmtContext()
}

type ForRangeStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForRangeStmtContext() *ForRangeStmtContext {
	var p = new(ForRangeStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forRangeStmt
	return p
}

func (*ForRangeStmtContext) IsForRangeStmtContext() {}

func NewForRangeStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForRangeStmtContext {
	var p = new(ForRangeStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forRangeStmt

	return p
}

func (s *ForRangeStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ForRangeStmtContext) For() antlr.TerminalNode {
	return s.GetToken(YaklangParserFor, 0)
}

func (s *ForRangeStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForRangeStmtContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForRangeStmtContext) Range() antlr.TerminalNode {
	return s.GetToken(YaklangParserRange, 0)
}

func (s *ForRangeStmtContext) In() antlr.TerminalNode {
	return s.GetToken(YaklangParserIn, 0)
}

func (s *ForRangeStmtContext) LeftExpressionList() ILeftExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionListContext)
}

func (s *ForRangeStmtContext) ColonAssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserColonAssignEq, 0)
}

func (s *ForRangeStmtContext) AssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserAssignEq, 0)
}

func (s *ForRangeStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForRangeStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForRangeStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForRangeStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForRangeStmt() (localctx IForRangeStmtContext) {
	this := p
	_ = this

	localctx = NewForRangeStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, YaklangParserRULE_forRangeStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(312)
		p.Match(YaklangParserFor)
	}
	p.SetState(323)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.SetState(316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
			{
				p.SetState(313)
				p.LeftExpressionList()
			}
			{
				p.SetState(314)
				_la = p.GetTokenStream().LA(1)

				if !(_la == YaklangParserAssignEq || _la == YaklangParserColonAssignEq) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(318)
			p.Match(YaklangParserRange)
		}

	case 2:
		p.SetState(320)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
			{
				p.SetState(319)
				p.LeftExpressionList()
			}

		}
		{
			p.SetState(322)
			p.Match(YaklangParserIn)
		}

	}
	{
		p.SetState(325)
		p.expression(0)
	}
	{
		p.SetState(326)
		p.Block()
	}

	return localctx
}

// ISwitchStmtContext is an interface to support dynamic dispatch.
type ISwitchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStmtContext differentiates from other interfaces.
	IsSwitchStmtContext()
}

type SwitchStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStmtContext() *SwitchStmtContext {
	var p = new(SwitchStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_switchStmt
	return p
}

func (*SwitchStmtContext) IsSwitchStmtContext() {}

func NewSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStmtContext {
	var p = new(SwitchStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_switchStmt

	return p
}

func (s *SwitchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStmtContext) Switch() antlr.TerminalNode {
	return s.GetToken(YaklangParserSwitch, 0)
}

func (s *SwitchStmtContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *SwitchStmtContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *SwitchStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SwitchStmtContext) AllCase() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserCase)
}

func (s *SwitchStmtContext) Case(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserCase, i)
}

func (s *SwitchStmtContext) AllExpressionList() []IExpressionListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionListContext); ok {
			len++
		}
	}

	tst := make([]IExpressionListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionListContext); ok {
			tst[i] = t.(IExpressionListContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStmtContext) ExpressionList(i int) IExpressionListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *SwitchStmtContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserColon)
}

func (s *SwitchStmtContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserColon, i)
}

func (s *SwitchStmtContext) Default() antlr.TerminalNode {
	return s.GetToken(YaklangParserDefault, 0)
}

func (s *SwitchStmtContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStmtContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *SwitchStmtContext) AllStatementList() []IStatementListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementListContext); ok {
			len++
		}
	}

	tst := make([]IStatementListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementListContext); ok {
			tst[i] = t.(IStatementListContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStmtContext) StatementList(i int) IStatementListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *SwitchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSwitchStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SwitchStmt() (localctx ISwitchStmtContext) {
	this := p
	_ = this

	localctx = NewSwitchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, YaklangParserRULE_switchStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(328)
		p.Match(YaklangParserSwitch)
	}
	p.SetState(330)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(329)
			p.expression(0)
		}

	}
	{
		p.SetState(332)
		p.Match(YaklangParserLBrace)
	}
	p.SetState(347)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(336)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
				{
					p.SetState(333)
					p.Ws()
				}

				p.SetState(338)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(339)
				p.Match(YaklangParserCase)
			}
			{
				p.SetState(340)
				p.ExpressionList()
			}
			{
				p.SetState(341)
				p.Match(YaklangParserColon)
			}
			p.SetState(343)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(342)
					p.StatementList()
				}

			}

		}
		p.SetState(349)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())
	}
	p.SetState(361)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		p.SetState(353)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
			{
				p.SetState(350)
				p.Ws()
			}

			p.SetState(355)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(356)
			p.Match(YaklangParserDefault)
		}
		{
			p.SetState(357)
			p.Match(YaklangParserColon)
		}
		p.SetState(359)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(358)
				p.StatementList()
			}

		}

	}
	p.SetState(366)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(363)
			p.Ws()
		}

		p.SetState(368)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(369)
		p.Match(YaklangParserRBrace)
	}

	return localctx
}

// IPanicStmtContext is an interface to support dynamic dispatch.
type IPanicStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPanicStmtContext differentiates from other interfaces.
	IsPanicStmtContext()
}

type PanicStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPanicStmtContext() *PanicStmtContext {
	var p = new(PanicStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_panicStmt
	return p
}

func (*PanicStmtContext) IsPanicStmtContext() {}

func NewPanicStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PanicStmtContext {
	var p = new(PanicStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_panicStmt

	return p
}

func (s *PanicStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *PanicStmtContext) Panic() antlr.TerminalNode {
	return s.GetToken(YaklangParserPanic, 0)
}

func (s *PanicStmtContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *PanicStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PanicStmtContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *PanicStmtContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *PanicStmtContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *PanicStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PanicStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PanicStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitPanicStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) PanicStmt() (localctx IPanicStmtContext) {
	this := p
	_ = this

	localctx = NewPanicStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, YaklangParserRULE_panicStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(371)
		p.Match(YaklangParserPanic)
	}
	{
		p.SetState(372)
		p.Match(YaklangParserLParen)
	}
	p.SetState(376)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(373)
			p.Ws()
		}

		p.SetState(378)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(379)
		p.expression(0)
	}
	p.SetState(383)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(380)
			p.Ws()
		}

		p.SetState(385)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(386)
		p.Match(YaklangParserRParen)
	}

	return localctx
}

// IRecoverStmtContext is an interface to support dynamic dispatch.
type IRecoverStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRecoverStmtContext differentiates from other interfaces.
	IsRecoverStmtContext()
}

type RecoverStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecoverStmtContext() *RecoverStmtContext {
	var p = new(RecoverStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_recoverStmt
	return p
}

func (*RecoverStmtContext) IsRecoverStmtContext() {}

func NewRecoverStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RecoverStmtContext {
	var p = new(RecoverStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_recoverStmt

	return p
}

func (s *RecoverStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *RecoverStmtContext) Recover() antlr.TerminalNode {
	return s.GetToken(YaklangParserRecover, 0)
}

func (s *RecoverStmtContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *RecoverStmtContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *RecoverStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RecoverStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RecoverStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitRecoverStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) RecoverStmt() (localctx IRecoverStmtContext) {
	this := p
	_ = this

	localctx = NewRecoverStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, YaklangParserRULE_recoverStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(388)
		p.Match(YaklangParserRecover)
	}
	{
		p.SetState(389)
		p.Match(YaklangParserLParen)
	}
	{
		p.SetState(390)
		p.Match(YaklangParserRParen)
	}

	return localctx
}

// IIfStmtContext is an interface to support dynamic dispatch.
type IIfStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStmtContext differentiates from other interfaces.
	IsIfStmtContext()
}

type IfStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStmtContext() *IfStmtContext {
	var p = new(IfStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_ifStmt
	return p
}

func (*IfStmtContext) IsIfStmtContext() {}

func NewIfStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStmtContext {
	var p = new(IfStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_ifStmt

	return p
}

func (s *IfStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStmtContext) If() antlr.TerminalNode {
	return s.GetToken(YaklangParserIf, 0)
}

func (s *IfStmtContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *IfStmtContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStmtContext) AllBlock() []IBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockContext); ok {
			len++
		}
	}

	tst := make([]IBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockContext); ok {
			tst[i] = t.(IBlockContext)
			i++
		}
	}

	return tst
}

func (s *IfStmtContext) Block(i int) IBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfStmtContext) AllElif() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserElif)
}

func (s *IfStmtContext) Elif(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserElif, i)
}

func (s *IfStmtContext) ElseBlock() IElseBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElseBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElseBlockContext)
}

func (s *IfStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitIfStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) IfStmt() (localctx IIfStmtContext) {
	this := p
	_ = this

	localctx = NewIfStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, YaklangParserRULE_ifStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(392)
		p.Match(YaklangParserIf)
	}
	{
		p.SetState(393)
		p.expression(0)
	}
	{
		p.SetState(394)
		p.Block()
	}
	p.SetState(401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserElif {
		{
			p.SetState(395)
			p.Match(YaklangParserElif)
		}
		{
			p.SetState(396)
			p.expression(0)
		}
		{
			p.SetState(397)
			p.Block()
		}

		p.SetState(403)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(405)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserElse {
		{
			p.SetState(404)
			p.ElseBlock()
		}

	}

	return localctx
}

// IElseBlockContext is an interface to support dynamic dispatch.
type IElseBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseBlockContext differentiates from other interfaces.
	IsElseBlockContext()
}

type ElseBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseBlockContext() *ElseBlockContext {
	var p = new(ElseBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_elseBlock
	return p
}

func (*ElseBlockContext) IsElseBlockContext() {}

func NewElseBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElseBlockContext {
	var p = new(ElseBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_elseBlock

	return p
}

func (s *ElseBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *ElseBlockContext) Else() antlr.TerminalNode {
	return s.GetToken(YaklangParserElse, 0)
}

func (s *ElseBlockContext) IfStmt() IIfStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *ElseBlockContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ElseBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElseBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElseBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitElseBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ElseBlock() (localctx IElseBlockContext) {
	this := p
	_ = this

	localctx = NewElseBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, YaklangParserRULE_elseBlock)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(407)
		p.Match(YaklangParserElse)
	}
	p.SetState(410)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserIf:
		{
			p.SetState(408)
			p.IfStmt()
		}

	case YaklangParserLBrace:
		{
			p.SetState(409)
			p.Block()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *BlockContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *BlockContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *BlockContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *BlockContext) StatementList() IStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Block() (localctx IBlockContext) {
	this := p
	_ = this

	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, YaklangParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(412)
		p.Match(YaklangParserLBrace)
	}
	p.SetState(416)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(413)
				p.Ws()
			}

		}
		p.SetState(418)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext())
	}
	p.SetState(420)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(419)
			p.StatementList()
		}

	}
	p.SetState(425)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(422)
			p.Ws()
		}

		p.SetState(427)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(428)
		p.Match(YaklangParserRBrace)
	}

	return localctx
}

// IEmptyContext is an interface to support dynamic dispatch.
type IEmptyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmptyContext differentiates from other interfaces.
	IsEmptyContext()
}

type EmptyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptyContext() *EmptyContext {
	var p = new(EmptyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_empty
	return p
}

func (*EmptyContext) IsEmptyContext() {}

func NewEmptyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptyContext {
	var p = new(EmptyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_empty

	return p
}

func (s *EmptyContext) GetParser() antlr.Parser { return s.parser }

func (s *EmptyContext) EOS() antlr.TerminalNode {
	return s.GetToken(YaklangParserEOS, 0)
}

func (s *EmptyContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(YaklangParserSemiColon, 0)
}

func (s *EmptyContext) Ws() IWsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *EmptyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmptyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitEmpty(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Empty() (localctx IEmptyContext) {
	this := p
	_ = this

	localctx = NewEmptyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, YaklangParserRULE_empty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(433)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserEOS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(430)
			p.Match(YaklangParserEOS)
		}

	case YaklangParserSemiColon:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(431)
			p.Match(YaklangParserSemiColon)
		}

	case YaklangParserCOMMENT, YaklangParserLINE_COMMENT, YaklangParserLF:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(432)
			p.Ws()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInplaceAssignOperatorContext is an interface to support dynamic dispatch.
type IInplaceAssignOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInplaceAssignOperatorContext differentiates from other interfaces.
	IsInplaceAssignOperatorContext()
}

type InplaceAssignOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInplaceAssignOperatorContext() *InplaceAssignOperatorContext {
	var p = new(InplaceAssignOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_inplaceAssignOperator
	return p
}

func (*InplaceAssignOperatorContext) IsInplaceAssignOperatorContext() {}

func NewInplaceAssignOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InplaceAssignOperatorContext {
	var p = new(InplaceAssignOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_inplaceAssignOperator

	return p
}

func (s *InplaceAssignOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *InplaceAssignOperatorContext) PlusEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserPlusEq, 0)
}

func (s *InplaceAssignOperatorContext) MinusEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserMinusEq, 0)
}

func (s *InplaceAssignOperatorContext) MulEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserMulEq, 0)
}

func (s *InplaceAssignOperatorContext) DivEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserDivEq, 0)
}

func (s *InplaceAssignOperatorContext) ModEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserModEq, 0)
}

func (s *InplaceAssignOperatorContext) AmpEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserAmpEq, 0)
}

func (s *InplaceAssignOperatorContext) BitAndEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserBitAndEq, 0)
}

func (s *InplaceAssignOperatorContext) BitOrEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserBitOrEq, 0)
}

func (s *InplaceAssignOperatorContext) LtLtEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserLtLtEq, 0)
}

func (s *InplaceAssignOperatorContext) GtGtEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserGtGtEq, 0)
}

func (s *InplaceAssignOperatorContext) BitAndNotEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserBitAndNotEq, 0)
}

func (s *InplaceAssignOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InplaceAssignOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InplaceAssignOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitInplaceAssignOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) InplaceAssignOperator() (localctx IInplaceAssignOperatorContext) {
	this := p
	_ = this

	localctx = NewInplaceAssignOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, YaklangParserRULE_inplaceAssignOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(435)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-76)) & ^0x3f) == 0 && ((int64(1)<<(_la-76))&2047) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAssignExpressionContext is an interface to support dynamic dispatch.
type IAssignExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignExpressionContext differentiates from other interfaces.
	IsAssignExpressionContext()
}

type AssignExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignExpressionContext() *AssignExpressionContext {
	var p = new(AssignExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_assignExpression
	return p
}

func (*AssignExpressionContext) IsAssignExpressionContext() {}

func NewAssignExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignExpressionContext {
	var p = new(AssignExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_assignExpression

	return p
}

func (s *AssignExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignExpressionContext) LeftExpressionList() ILeftExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionListContext)
}

func (s *AssignExpressionContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *AssignExpressionContext) AssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserAssignEq, 0)
}

func (s *AssignExpressionContext) ColonAssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserColonAssignEq, 0)
}

func (s *AssignExpressionContext) LeftExpression() ILeftExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionContext)
}

func (s *AssignExpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(YaklangParserPlusPlus, 0)
}

func (s *AssignExpressionContext) SubSub() antlr.TerminalNode {
	return s.GetToken(YaklangParserSubSub, 0)
}

func (s *AssignExpressionContext) InplaceAssignOperator() IInplaceAssignOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInplaceAssignOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInplaceAssignOperatorContext)
}

func (s *AssignExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssignExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAssignExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AssignExpression() (localctx IAssignExpressionContext) {
	this := p
	_ = this

	localctx = NewAssignExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, YaklangParserRULE_assignExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(448)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(437)
			p.LeftExpressionList()
		}
		{
			p.SetState(438)
			_la = p.GetTokenStream().LA(1)

			if !(_la == YaklangParserAssignEq || _la == YaklangParserColonAssignEq) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(439)
			p.ExpressionList()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(441)
			p.LeftExpression()
		}
		{
			p.SetState(442)
			_la = p.GetTokenStream().LA(1)

			if !(_la == YaklangParserPlusPlus || _la == YaklangParserSubSub) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(444)
			p.LeftExpression()
		}
		{
			p.SetState(445)
			p.InplaceAssignOperator()
		}
		{
			p.SetState(446)
			p.expression(0)
		}

	}

	return localctx
}

// IDeclareVariableExpressionStmtContext is an interface to support dynamic dispatch.
type IDeclareVariableExpressionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareVariableExpressionStmtContext differentiates from other interfaces.
	IsDeclareVariableExpressionStmtContext()
}

type DeclareVariableExpressionStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareVariableExpressionStmtContext() *DeclareVariableExpressionStmtContext {
	var p = new(DeclareVariableExpressionStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_declareVariableExpressionStmt
	return p
}

func (*DeclareVariableExpressionStmtContext) IsDeclareVariableExpressionStmtContext() {}

func NewDeclareVariableExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareVariableExpressionStmtContext {
	var p = new(DeclareVariableExpressionStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_declareVariableExpressionStmt

	return p
}

func (s *DeclareVariableExpressionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareVariableExpressionStmtContext) DeclareVariableExpression() IDeclareVariableExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareVariableExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareVariableExpressionContext)
}

func (s *DeclareVariableExpressionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareVariableExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareVariableExpressionStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeclareVariableExpressionStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeclareVariableExpressionStmt() (localctx IDeclareVariableExpressionStmtContext) {
	this := p
	_ = this

	localctx = NewDeclareVariableExpressionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, YaklangParserRULE_declareVariableExpressionStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(450)
		p.DeclareVariableExpression()
	}

	return localctx
}

// IDeclareVariableExpressionContext is an interface to support dynamic dispatch.
type IDeclareVariableExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareVariableExpressionContext differentiates from other interfaces.
	IsDeclareVariableExpressionContext()
}

type DeclareVariableExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareVariableExpressionContext() *DeclareVariableExpressionContext {
	var p = new(DeclareVariableExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_declareVariableExpression
	return p
}

func (*DeclareVariableExpressionContext) IsDeclareVariableExpressionContext() {}

func NewDeclareVariableExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareVariableExpressionContext {
	var p = new(DeclareVariableExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_declareVariableExpression

	return p
}

func (s *DeclareVariableExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareVariableExpressionContext) DeclareVariableOnly() IDeclareVariableOnlyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareVariableOnlyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareVariableOnlyContext)
}

func (s *DeclareVariableExpressionContext) DeclareAndAssignExpression() IDeclareAndAssignExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareAndAssignExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareAndAssignExpressionContext)
}

func (s *DeclareVariableExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareVariableExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareVariableExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeclareVariableExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeclareVariableExpression() (localctx IDeclareVariableExpressionContext) {
	this := p
	_ = this

	localctx = NewDeclareVariableExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, YaklangParserRULE_declareVariableExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(454)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(452)
			p.DeclareVariableOnly()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(453)
			p.DeclareAndAssignExpression()
		}

	}

	return localctx
}

// IDeclareVariableOnlyContext is an interface to support dynamic dispatch.
type IDeclareVariableOnlyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareVariableOnlyContext differentiates from other interfaces.
	IsDeclareVariableOnlyContext()
}

type DeclareVariableOnlyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareVariableOnlyContext() *DeclareVariableOnlyContext {
	var p = new(DeclareVariableOnlyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_declareVariableOnly
	return p
}

func (*DeclareVariableOnlyContext) IsDeclareVariableOnlyContext() {}

func NewDeclareVariableOnlyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareVariableOnlyContext {
	var p = new(DeclareVariableOnlyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_declareVariableOnly

	return p
}

func (s *DeclareVariableOnlyContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareVariableOnlyContext) Var() antlr.TerminalNode {
	return s.GetToken(YaklangParserVar, 0)
}

func (s *DeclareVariableOnlyContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserIdentifier)
}

func (s *DeclareVariableOnlyContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, i)
}

func (s *DeclareVariableOnlyContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *DeclareVariableOnlyContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *DeclareVariableOnlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareVariableOnlyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareVariableOnlyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeclareVariableOnly(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeclareVariableOnly() (localctx IDeclareVariableOnlyContext) {
	this := p
	_ = this

	localctx = NewDeclareVariableOnlyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, YaklangParserRULE_declareVariableOnly)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(456)
		p.Match(YaklangParserVar)
	}
	{
		p.SetState(457)
		p.Match(YaklangParserIdentifier)
	}
	p.SetState(462)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(458)
				p.Match(YaklangParserComma)
			}
			{
				p.SetState(459)
				p.Match(YaklangParserIdentifier)
			}

		}
		p.SetState(464)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())
	}

	return localctx
}

// IDeclareAndAssignExpressionContext is an interface to support dynamic dispatch.
type IDeclareAndAssignExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareAndAssignExpressionContext differentiates from other interfaces.
	IsDeclareAndAssignExpressionContext()
}

type DeclareAndAssignExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareAndAssignExpressionContext() *DeclareAndAssignExpressionContext {
	var p = new(DeclareAndAssignExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_declareAndAssignExpression
	return p
}

func (*DeclareAndAssignExpressionContext) IsDeclareAndAssignExpressionContext() {}

func NewDeclareAndAssignExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareAndAssignExpressionContext {
	var p = new(DeclareAndAssignExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_declareAndAssignExpression

	return p
}

func (s *DeclareAndAssignExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareAndAssignExpressionContext) Var() antlr.TerminalNode {
	return s.GetToken(YaklangParserVar, 0)
}

func (s *DeclareAndAssignExpressionContext) LeftExpressionList() ILeftExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionListContext)
}

func (s *DeclareAndAssignExpressionContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *DeclareAndAssignExpressionContext) AssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserAssignEq, 0)
}

func (s *DeclareAndAssignExpressionContext) ColonAssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserColonAssignEq, 0)
}

func (s *DeclareAndAssignExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareAndAssignExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareAndAssignExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeclareAndAssignExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeclareAndAssignExpression() (localctx IDeclareAndAssignExpressionContext) {
	this := p
	_ = this

	localctx = NewDeclareAndAssignExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, YaklangParserRULE_declareAndAssignExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(465)
		p.Match(YaklangParserVar)
	}
	{
		p.SetState(466)
		p.LeftExpressionList()
	}
	{
		p.SetState(467)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserAssignEq || _la == YaklangParserColonAssignEq) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(468)
		p.ExpressionList()
	}

	return localctx
}

// ILeftExpressionListContext is an interface to support dynamic dispatch.
type ILeftExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftExpressionListContext differentiates from other interfaces.
	IsLeftExpressionListContext()
}

type LeftExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftExpressionListContext() *LeftExpressionListContext {
	var p = new(LeftExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_leftExpressionList
	return p
}

func (*LeftExpressionListContext) IsLeftExpressionListContext() {}

func NewLeftExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftExpressionListContext {
	var p = new(LeftExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_leftExpressionList

	return p
}

func (s *LeftExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftExpressionListContext) AllLeftExpression() []ILeftExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILeftExpressionContext); ok {
			len++
		}
	}

	tst := make([]ILeftExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILeftExpressionContext); ok {
			tst[i] = t.(ILeftExpressionContext)
			i++
		}
	}

	return tst
}

func (s *LeftExpressionListContext) LeftExpression(i int) ILeftExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionContext)
}

func (s *LeftExpressionListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *LeftExpressionListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *LeftExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLeftExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LeftExpressionList() (localctx ILeftExpressionListContext) {
	this := p
	_ = this

	localctx = NewLeftExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, YaklangParserRULE_leftExpressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(470)
		p.LeftExpression()
	}
	p.SetState(475)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserComma {
		{
			p.SetState(471)
			p.Match(YaklangParserComma)
		}
		{
			p.SetState(472)
			p.LeftExpression()
		}

		p.SetState(477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUnaryOperatorContext is an interface to support dynamic dispatch.
type IUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryOperatorContext differentiates from other interfaces.
	IsUnaryOperatorContext()
}

type UnaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryOperatorContext() *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_unaryOperator
	return p
}

func (*UnaryOperatorContext) IsUnaryOperatorContext() {}

func NewUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_unaryOperator

	return p
}

func (s *UnaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryOperatorContext) Not() antlr.TerminalNode {
	return s.GetToken(YaklangParserNot, 0)
}

func (s *UnaryOperatorContext) Sub() antlr.TerminalNode {
	return s.GetToken(YaklangParserSub, 0)
}

func (s *UnaryOperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(YaklangParserPlus, 0)
}

func (s *UnaryOperatorContext) Xor() antlr.TerminalNode {
	return s.GetToken(YaklangParserXor, 0)
}

func (s *UnaryOperatorContext) Amp() antlr.TerminalNode {
	return s.GetToken(YaklangParserAmp, 0)
}

func (s *UnaryOperatorContext) Mul() antlr.TerminalNode {
	return s.GetToken(YaklangParserMul, 0)
}

func (s *UnaryOperatorContext) ChanIn() antlr.TerminalNode {
	return s.GetToken(YaklangParserChanIn, 0)
}

func (s *UnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitUnaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) UnaryOperator() (localctx IUnaryOperatorContext) {
	this := p
	_ = this

	localctx = NewUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, YaklangParserRULE_unaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(478)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-41)) & ^0x3f) == 0 && ((int64(1)<<(_la-41))&1125899906977409) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBitBinaryOperatorContext is an interface to support dynamic dispatch.
type IBitBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitBinaryOperatorContext differentiates from other interfaces.
	IsBitBinaryOperatorContext()
}

type BitBinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitBinaryOperatorContext() *BitBinaryOperatorContext {
	var p = new(BitBinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_bitBinaryOperator
	return p
}

func (*BitBinaryOperatorContext) IsBitBinaryOperatorContext() {}

func NewBitBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitBinaryOperatorContext {
	var p = new(BitBinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_bitBinaryOperator

	return p
}

func (s *BitBinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *BitBinaryOperatorContext) LtLt() antlr.TerminalNode {
	return s.GetToken(YaklangParserLtLt, 0)
}

func (s *BitBinaryOperatorContext) GtGt() antlr.TerminalNode {
	return s.GetToken(YaklangParserGtGt, 0)
}

func (s *BitBinaryOperatorContext) Amp() antlr.TerminalNode {
	return s.GetToken(YaklangParserAmp, 0)
}

func (s *BitBinaryOperatorContext) AmpNot() antlr.TerminalNode {
	return s.GetToken(YaklangParserAmpNot, 0)
}

func (s *BitBinaryOperatorContext) Xand() antlr.TerminalNode {
	return s.GetToken(YaklangParserXand, 0)
}

func (s *BitBinaryOperatorContext) Xor() antlr.TerminalNode {
	return s.GetToken(YaklangParserXor, 0)
}

func (s *BitBinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitBinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitBinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitBitBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) BitBinaryOperator() (localctx IBitBinaryOperatorContext) {
	this := p
	_ = this

	localctx = NewBitBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, YaklangParserRULE_bitBinaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(480)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&14443184742465536) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAdditiveBinaryOperatorContext is an interface to support dynamic dispatch.
type IAdditiveBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveBinaryOperatorContext differentiates from other interfaces.
	IsAdditiveBinaryOperatorContext()
}

type AdditiveBinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveBinaryOperatorContext() *AdditiveBinaryOperatorContext {
	var p = new(AdditiveBinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_additiveBinaryOperator
	return p
}

func (*AdditiveBinaryOperatorContext) IsAdditiveBinaryOperatorContext() {}

func NewAdditiveBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveBinaryOperatorContext {
	var p = new(AdditiveBinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_additiveBinaryOperator

	return p
}

func (s *AdditiveBinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveBinaryOperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(YaklangParserPlus, 0)
}

func (s *AdditiveBinaryOperatorContext) Sub() antlr.TerminalNode {
	return s.GetToken(YaklangParserSub, 0)
}

func (s *AdditiveBinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveBinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveBinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAdditiveBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AdditiveBinaryOperator() (localctx IAdditiveBinaryOperatorContext) {
	this := p
	_ = this

	localctx = NewAdditiveBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, YaklangParserRULE_additiveBinaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(482)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserPlus || _la == YaklangParserSub) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMultiplicativeBinaryOperatorContext is an interface to support dynamic dispatch.
type IMultiplicativeBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeBinaryOperatorContext differentiates from other interfaces.
	IsMultiplicativeBinaryOperatorContext()
}

type MultiplicativeBinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeBinaryOperatorContext() *MultiplicativeBinaryOperatorContext {
	var p = new(MultiplicativeBinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_multiplicativeBinaryOperator
	return p
}

func (*MultiplicativeBinaryOperatorContext) IsMultiplicativeBinaryOperatorContext() {}

func NewMultiplicativeBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeBinaryOperatorContext {
	var p = new(MultiplicativeBinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_multiplicativeBinaryOperator

	return p
}

func (s *MultiplicativeBinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeBinaryOperatorContext) Mul() antlr.TerminalNode {
	return s.GetToken(YaklangParserMul, 0)
}

func (s *MultiplicativeBinaryOperatorContext) Div() antlr.TerminalNode {
	return s.GetToken(YaklangParserDiv, 0)
}

func (s *MultiplicativeBinaryOperatorContext) Mod() antlr.TerminalNode {
	return s.GetToken(YaklangParserMod, 0)
}

func (s *MultiplicativeBinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeBinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeBinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMultiplicativeBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MultiplicativeBinaryOperator() (localctx IMultiplicativeBinaryOperatorContext) {
	this := p
	_ = this

	localctx = NewMultiplicativeBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, YaklangParserRULE_multiplicativeBinaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(484)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&15393162788864) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparisonBinaryOperatorContext is an interface to support dynamic dispatch.
type IComparisonBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonBinaryOperatorContext differentiates from other interfaces.
	IsComparisonBinaryOperatorContext()
}

type ComparisonBinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonBinaryOperatorContext() *ComparisonBinaryOperatorContext {
	var p = new(ComparisonBinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_comparisonBinaryOperator
	return p
}

func (*ComparisonBinaryOperatorContext) IsComparisonBinaryOperatorContext() {}

func NewComparisonBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonBinaryOperatorContext {
	var p = new(ComparisonBinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_comparisonBinaryOperator

	return p
}

func (s *ComparisonBinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonBinaryOperatorContext) Gt() antlr.TerminalNode {
	return s.GetToken(YaklangParserGt, 0)
}

func (s *ComparisonBinaryOperatorContext) Lt() antlr.TerminalNode {
	return s.GetToken(YaklangParserLt, 0)
}

func (s *ComparisonBinaryOperatorContext) LtEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserLtEq, 0)
}

func (s *ComparisonBinaryOperatorContext) GtEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserGtEq, 0)
}

func (s *ComparisonBinaryOperatorContext) Neq() antlr.TerminalNode {
	return s.GetToken(YaklangParserNeq, 0)
}

func (s *ComparisonBinaryOperatorContext) LtGt() antlr.TerminalNode {
	return s.GetToken(YaklangParserLtGt, 0)
}

func (s *ComparisonBinaryOperatorContext) Eq() antlr.TerminalNode {
	return s.GetToken(YaklangParserEq, 0)
}

func (s *ComparisonBinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonBinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonBinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitComparisonBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ComparisonBinaryOperator() (localctx IComparisonBinaryOperatorContext) {
	this := p
	_ = this

	localctx = NewComparisonBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, YaklangParserRULE_comparisonBinaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(486)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-45)) & ^0x3f) == 0 && ((int64(1)<<(_la-45))&35184372096517) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILeftExpressionContext is an interface to support dynamic dispatch.
type ILeftExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftExpressionContext differentiates from other interfaces.
	IsLeftExpressionContext()
}

type LeftExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftExpressionContext() *LeftExpressionContext {
	var p = new(LeftExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_leftExpression
	return p
}

func (*LeftExpressionContext) IsLeftExpressionContext() {}

func NewLeftExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftExpressionContext {
	var p = new(LeftExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_leftExpression

	return p
}

func (s *LeftExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LeftExpressionContext) LeftMemberCall() ILeftMemberCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftMemberCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftMemberCallContext)
}

func (s *LeftExpressionContext) LeftSliceCall() ILeftSliceCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftSliceCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftSliceCallContext)
}

func (s *LeftExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *LeftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLeftExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LeftExpression() (localctx ILeftExpressionContext) {
	this := p
	_ = this

	localctx = NewLeftExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, YaklangParserRULE_leftExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(494)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(488)
			p.expression(0)
		}
		p.SetState(491)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case YaklangParserDot:
			{
				p.SetState(489)
				p.LeftMemberCall()
			}

		case YaklangParserLBracket:
			{
				p.SetState(490)
				p.LeftSliceCall()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(493)
			p.Match(YaklangParserIdentifier)
		}

	}

	return localctx
}

// ILeftMemberCallContext is an interface to support dynamic dispatch.
type ILeftMemberCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftMemberCallContext differentiates from other interfaces.
	IsLeftMemberCallContext()
}

type LeftMemberCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftMemberCallContext() *LeftMemberCallContext {
	var p = new(LeftMemberCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_leftMemberCall
	return p
}

func (*LeftMemberCallContext) IsLeftMemberCallContext() {}

func NewLeftMemberCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftMemberCallContext {
	var p = new(LeftMemberCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_leftMemberCall

	return p
}

func (s *LeftMemberCallContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftMemberCallContext) Dot() antlr.TerminalNode {
	return s.GetToken(YaklangParserDot, 0)
}

func (s *LeftMemberCallContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *LeftMemberCallContext) IdentifierWithDollar() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifierWithDollar, 0)
}

func (s *LeftMemberCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftMemberCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftMemberCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLeftMemberCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LeftMemberCall() (localctx ILeftMemberCallContext) {
	this := p
	_ = this

	localctx = NewLeftMemberCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, YaklangParserRULE_leftMemberCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(496)
		p.Match(YaklangParserDot)
	}
	{
		p.SetState(497)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserIdentifier || _la == YaklangParserIdentifierWithDollar) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILeftSliceCallContext is an interface to support dynamic dispatch.
type ILeftSliceCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftSliceCallContext differentiates from other interfaces.
	IsLeftSliceCallContext()
}

type LeftSliceCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftSliceCallContext() *LeftSliceCallContext {
	var p = new(LeftSliceCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_leftSliceCall
	return p
}

func (*LeftSliceCallContext) IsLeftSliceCallContext() {}

func NewLeftSliceCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftSliceCallContext {
	var p = new(LeftSliceCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_leftSliceCall

	return p
}

func (s *LeftSliceCallContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftSliceCallContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *LeftSliceCallContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LeftSliceCallContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *LeftSliceCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftSliceCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftSliceCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLeftSliceCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LeftSliceCall() (localctx ILeftSliceCallContext) {
	this := p
	_ = this

	localctx = NewLeftSliceCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, YaklangParserRULE_leftSliceCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(499)
		p.Match(YaklangParserLBracket)
	}
	{
		p.SetState(500)
		p.expression(0)
	}
	{
		p.SetState(501)
		p.Match(YaklangParserRBracket)
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *ExpressionContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *ExpressionContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *ExpressionContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *ExpressionContext) AnonymousFunctionDecl() IAnonymousFunctionDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnonymousFunctionDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnonymousFunctionDeclContext)
}

func (s *ExpressionContext) PanicStmt() IPanicStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPanicStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPanicStmtContext)
}

func (s *ExpressionContext) RecoverStmt() IRecoverStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecoverStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecoverStmtContext)
}

func (s *ExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *ExpressionContext) ParenExpression() IParenExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenExpressionContext)
}

func (s *ExpressionContext) InstanceCode() IInstanceCodeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstanceCodeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstanceCodeContext)
}

func (s *ExpressionContext) MakeExpression() IMakeExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMakeExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMakeExpressionContext)
}

func (s *ExpressionContext) UnaryOperator() IUnaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryOperatorContext)
}

func (s *ExpressionContext) BitBinaryOperator() IBitBinaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitBinaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitBinaryOperatorContext)
}

func (s *ExpressionContext) MultiplicativeBinaryOperator() IMultiplicativeBinaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMultiplicativeBinaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeBinaryOperatorContext)
}

func (s *ExpressionContext) AdditiveBinaryOperator() IAdditiveBinaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditiveBinaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditiveBinaryOperatorContext)
}

func (s *ExpressionContext) ComparisonBinaryOperator() IComparisonBinaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparisonBinaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparisonBinaryOperatorContext)
}

func (s *ExpressionContext) In() antlr.TerminalNode {
	return s.GetToken(YaklangParserIn, 0)
}

func (s *ExpressionContext) NotLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserNotLiteral, 0)
}

func (s *ExpressionContext) LogicAnd() antlr.TerminalNode {
	return s.GetToken(YaklangParserLogicAnd, 0)
}

func (s *ExpressionContext) LogicOr() antlr.TerminalNode {
	return s.GetToken(YaklangParserLogicOr, 0)
}

func (s *ExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(YaklangParserQuestion, 0)
}

func (s *ExpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(YaklangParserColon, 0)
}

func (s *ExpressionContext) ChanIn() antlr.TerminalNode {
	return s.GetToken(YaklangParserChanIn, 0)
}

func (s *ExpressionContext) MemberCall() IMemberCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberCallContext)
}

func (s *ExpressionContext) SliceCall() ISliceCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceCallContext)
}

func (s *ExpressionContext) FunctionCall() IFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *YaklangParser) expression(_p int) (localctx IExpressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 88
	p.EnterRecursionRule(localctx, 88, YaklangParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(534)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(504)
			p.TypeLiteral()
		}
		{
			p.SetState(505)
			p.Match(YaklangParserLParen)
		}
		p.SetState(509)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(506)
					p.Ws()
				}

			}
			p.SetState(511)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext())
		}
		p.SetState(513)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
			{
				p.SetState(512)
				p.expression(0)
			}

		}
		p.SetState(518)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
			{
				p.SetState(515)
				p.Ws()
			}

			p.SetState(520)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(521)
			p.Match(YaklangParserRParen)
		}

	case 2:
		{
			p.SetState(523)
			p.Literal()
		}

	case 3:
		{
			p.SetState(524)
			p.AnonymousFunctionDecl()
		}

	case 4:
		{
			p.SetState(525)
			p.PanicStmt()
		}

	case 5:
		{
			p.SetState(526)
			p.RecoverStmt()
		}

	case 6:
		{
			p.SetState(527)
			p.Match(YaklangParserIdentifier)
		}

	case 7:
		{
			p.SetState(528)
			p.ParenExpression()
		}

	case 8:
		{
			p.SetState(529)
			p.InstanceCode()
		}

	case 9:
		{
			p.SetState(530)
			p.MakeExpression()
		}

	case 10:
		{
			p.SetState(531)
			p.UnaryOperator()
		}
		{
			p.SetState(532)
			p.expression(10)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(635)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(633)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(536)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(537)
					p.BitBinaryOperator()
				}
				p.SetState(541)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
					{
						p.SetState(538)
						p.Ws()
					}

					p.SetState(543)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(544)
					p.expression(10)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(546)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(547)
					p.MultiplicativeBinaryOperator()
				}
				p.SetState(551)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
					{
						p.SetState(548)
						p.Ws()
					}

					p.SetState(553)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(554)
					p.expression(9)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(556)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(557)
					p.AdditiveBinaryOperator()
				}
				p.SetState(561)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
					{
						p.SetState(558)
						p.Ws()
					}

					p.SetState(563)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(564)
					p.expression(8)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(566)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(567)
					p.ComparisonBinaryOperator()
				}
				p.SetState(571)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
					{
						p.SetState(568)
						p.Ws()
					}

					p.SetState(573)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(574)
					p.expression(7)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(576)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				p.SetState(578)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == YaklangParserNotLiteral {
					{
						p.SetState(577)
						p.Match(YaklangParserNotLiteral)
					}

				}
				{
					p.SetState(580)
					p.Match(YaklangParserIn)
				}
				{
					p.SetState(581)
					p.expression(6)
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(582)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(583)
					p.Match(YaklangParserLogicAnd)
				}
				p.SetState(587)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
					{
						p.SetState(584)
						p.Ws()
					}

					p.SetState(589)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(590)
					p.expression(5)
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(591)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(592)
					p.Match(YaklangParserLogicOr)
				}
				p.SetState(596)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
					{
						p.SetState(593)
						p.Ws()
					}

					p.SetState(598)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(599)
					p.expression(4)
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(600)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(601)
					p.Match(YaklangParserQuestion)
				}
				p.SetState(605)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
					{
						p.SetState(602)
						p.Ws()
					}

					p.SetState(607)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(608)
					p.expression(0)
				}
				p.SetState(612)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
					{
						p.SetState(609)
						p.Ws()
					}

					p.SetState(614)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(615)
					p.Match(YaklangParserColon)
				}
				p.SetState(619)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
					{
						p.SetState(616)
						p.Ws()
					}

					p.SetState(621)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(622)
					p.expression(3)
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(624)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(625)
					p.Match(YaklangParserChanIn)
				}
				{
					p.SetState(626)
					p.expression(2)
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(627)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				p.SetState(631)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case YaklangParserDot:
					{
						p.SetState(628)
						p.MemberCall()
					}

				case YaklangParserLBracket:
					{
						p.SetState(629)
						p.SliceCall()
					}

				case YaklangParserLParen:
					{
						p.SetState(630)
						p.FunctionCall()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}

		}
		p.SetState(637)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())
	}

	return localctx
}

// IParenExpressionContext is an interface to support dynamic dispatch.
type IParenExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParenExpressionContext differentiates from other interfaces.
	IsParenExpressionContext()
}

type ParenExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenExpressionContext() *ParenExpressionContext {
	var p = new(ParenExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_parenExpression
	return p
}

func (*ParenExpressionContext) IsParenExpressionContext() {}

func NewParenExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParenExpressionContext {
	var p = new(ParenExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_parenExpression

	return p
}

func (s *ParenExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ParenExpressionContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *ParenExpressionContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *ParenExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParenExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitParenExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ParenExpression() (localctx IParenExpressionContext) {
	this := p
	_ = this

	localctx = NewParenExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, YaklangParserRULE_parenExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(638)
		p.Match(YaklangParserLParen)
	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
		{
			p.SetState(639)
			p.expression(0)
		}

	}
	{
		p.SetState(642)
		p.Match(YaklangParserRParen)
	}

	return localctx
}

// IMakeExpressionContext is an interface to support dynamic dispatch.
type IMakeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMakeExpressionContext differentiates from other interfaces.
	IsMakeExpressionContext()
}

type MakeExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMakeExpressionContext() *MakeExpressionContext {
	var p = new(MakeExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_makeExpression
	return p
}

func (*MakeExpressionContext) IsMakeExpressionContext() {}

func NewMakeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MakeExpressionContext {
	var p = new(MakeExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_makeExpression

	return p
}

func (s *MakeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MakeExpressionContext) Make() antlr.TerminalNode {
	return s.GetToken(YaklangParserMake, 0)
}

func (s *MakeExpressionContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *MakeExpressionContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *MakeExpressionContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *MakeExpressionContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *MakeExpressionContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *MakeExpressionContext) Comma() antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, 0)
}

func (s *MakeExpressionContext) ExpressionListMultiline() IExpressionListMultilineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListMultilineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListMultilineContext)
}

func (s *MakeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MakeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MakeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMakeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MakeExpression() (localctx IMakeExpressionContext) {
	this := p
	_ = this

	localctx = NewMakeExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, YaklangParserRULE_makeExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(644)
		p.Match(YaklangParserMake)
	}
	{
		p.SetState(645)
		p.Match(YaklangParserLParen)
	}
	p.SetState(649)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(646)
			p.Ws()
		}

		p.SetState(651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(652)
		p.TypeLiteral()
	}
	p.SetState(661)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(653)
			p.Match(YaklangParserComma)
		}
		p.SetState(657)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
			{
				p.SetState(654)
				p.Ws()
			}

			p.SetState(659)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(660)
			p.ExpressionListMultiline()
		}

	}
	{
		p.SetState(663)
		p.Match(YaklangParserRParen)
	}

	return localctx
}

// ITypeLiteralContext is an interface to support dynamic dispatch.
type ITypeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeLiteralContext differentiates from other interfaces.
	IsTypeLiteralContext()
}

type TypeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeLiteralContext() *TypeLiteralContext {
	var p = new(TypeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_typeLiteral
	return p
}

func (*TypeLiteralContext) IsTypeLiteralContext() {}

func NewTypeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeLiteralContext {
	var p = new(TypeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_typeLiteral

	return p
}

func (s *TypeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeLiteralContext) VarTypeName() antlr.TerminalNode {
	return s.GetToken(YaklangParserVarTypeName, 0)
}

func (s *TypeLiteralContext) Var() antlr.TerminalNode {
	return s.GetToken(YaklangParserVar, 0)
}

func (s *TypeLiteralContext) SliceTypeLiteral() ISliceTypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceTypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceTypeLiteralContext)
}

func (s *TypeLiteralContext) MapTypeLiteral() IMapTypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapTypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapTypeLiteralContext)
}

func (s *TypeLiteralContext) Chan() antlr.TerminalNode {
	return s.GetToken(YaklangParserChan, 0)
}

func (s *TypeLiteralContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *TypeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTypeLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TypeLiteral() (localctx ITypeLiteralContext) {
	this := p
	_ = this

	localctx = NewTypeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, YaklangParserRULE_typeLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(671)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserVarTypeName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(665)
			p.Match(YaklangParserVarTypeName)
		}

	case YaklangParserVar:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(666)
			p.Match(YaklangParserVar)
		}

	case YaklangParserLBracket:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(667)
			p.SliceTypeLiteral()
		}

	case YaklangParserMap:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(668)
			p.MapTypeLiteral()
		}

	case YaklangParserChan:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(669)
			p.Match(YaklangParserChan)
		}
		{
			p.SetState(670)
			p.TypeLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISliceTypeLiteralContext is an interface to support dynamic dispatch.
type ISliceTypeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceTypeLiteralContext differentiates from other interfaces.
	IsSliceTypeLiteralContext()
}

type SliceTypeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceTypeLiteralContext() *SliceTypeLiteralContext {
	var p = new(SliceTypeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_sliceTypeLiteral
	return p
}

func (*SliceTypeLiteralContext) IsSliceTypeLiteralContext() {}

func NewSliceTypeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceTypeLiteralContext {
	var p = new(SliceTypeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_sliceTypeLiteral

	return p
}

func (s *SliceTypeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceTypeLiteralContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *SliceTypeLiteralContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *SliceTypeLiteralContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *SliceTypeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceTypeLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSliceTypeLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SliceTypeLiteral() (localctx ISliceTypeLiteralContext) {
	this := p
	_ = this

	localctx = NewSliceTypeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, YaklangParserRULE_sliceTypeLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(673)
		p.Match(YaklangParserLBracket)
	}
	{
		p.SetState(674)
		p.Match(YaklangParserRBracket)
	}
	{
		p.SetState(675)
		p.TypeLiteral()
	}

	return localctx
}

// IMapTypeLiteralContext is an interface to support dynamic dispatch.
type IMapTypeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapTypeLiteralContext differentiates from other interfaces.
	IsMapTypeLiteralContext()
}

type MapTypeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypeLiteralContext() *MapTypeLiteralContext {
	var p = new(MapTypeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapTypeLiteral
	return p
}

func (*MapTypeLiteralContext) IsMapTypeLiteralContext() {}

func NewMapTypeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypeLiteralContext {
	var p = new(MapTypeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapTypeLiteral

	return p
}

func (s *MapTypeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypeLiteralContext) Map() antlr.TerminalNode {
	return s.GetToken(YaklangParserMap, 0)
}

func (s *MapTypeLiteralContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *MapTypeLiteralContext) AllTypeLiteral() []ITypeLiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			len++
		}
	}

	tst := make([]ITypeLiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeLiteralContext); ok {
			tst[i] = t.(ITypeLiteralContext)
			i++
		}
	}

	return tst
}

func (s *MapTypeLiteralContext) TypeLiteral(i int) ITypeLiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *MapTypeLiteralContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *MapTypeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypeLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapTypeLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapTypeLiteral() (localctx IMapTypeLiteralContext) {
	this := p
	_ = this

	localctx = NewMapTypeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, YaklangParserRULE_mapTypeLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(677)
		p.Match(YaklangParserMap)
	}
	{
		p.SetState(678)
		p.Match(YaklangParserLBracket)
	}
	{
		p.SetState(679)
		p.TypeLiteral()
	}
	{
		p.SetState(680)
		p.Match(YaklangParserRBracket)
	}
	{
		p.SetState(681)
		p.TypeLiteral()
	}

	return localctx
}

// IInstanceCodeContext is an interface to support dynamic dispatch.
type IInstanceCodeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInstanceCodeContext differentiates from other interfaces.
	IsInstanceCodeContext()
}

type InstanceCodeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstanceCodeContext() *InstanceCodeContext {
	var p = new(InstanceCodeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_instanceCode
	return p
}

func (*InstanceCodeContext) IsInstanceCodeContext() {}

func NewInstanceCodeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstanceCodeContext {
	var p = new(InstanceCodeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_instanceCode

	return p
}

func (s *InstanceCodeContext) GetParser() antlr.Parser { return s.parser }

func (s *InstanceCodeContext) Func() antlr.TerminalNode {
	return s.GetToken(YaklangParserFunc, 0)
}

func (s *InstanceCodeContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *InstanceCodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstanceCodeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstanceCodeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitInstanceCode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) InstanceCode() (localctx IInstanceCodeContext) {
	this := p
	_ = this

	localctx = NewInstanceCodeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, YaklangParserRULE_instanceCode)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(683)
		p.Match(YaklangParserFunc)
	}
	{
		p.SetState(684)
		p.Block()
	}

	return localctx
}

// IAnonymousFunctionDeclContext is an interface to support dynamic dispatch.
type IAnonymousFunctionDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnonymousFunctionDeclContext differentiates from other interfaces.
	IsAnonymousFunctionDeclContext()
}

type AnonymousFunctionDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnonymousFunctionDeclContext() *AnonymousFunctionDeclContext {
	var p = new(AnonymousFunctionDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_anonymousFunctionDecl
	return p
}

func (*AnonymousFunctionDeclContext) IsAnonymousFunctionDeclContext() {}

func NewAnonymousFunctionDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnonymousFunctionDeclContext {
	var p = new(AnonymousFunctionDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_anonymousFunctionDecl

	return p
}

func (s *AnonymousFunctionDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *AnonymousFunctionDeclContext) Func() antlr.TerminalNode {
	return s.GetToken(YaklangParserFunc, 0)
}

func (s *AnonymousFunctionDeclContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *AnonymousFunctionDeclContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *AnonymousFunctionDeclContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *AnonymousFunctionDeclContext) FunctionNameDecl() IFunctionNameDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionNameDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionNameDeclContext)
}

func (s *AnonymousFunctionDeclContext) FunctionParamDecl() IFunctionParamDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionParamDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionParamDeclContext)
}

func (s *AnonymousFunctionDeclContext) EqGt() antlr.TerminalNode {
	return s.GetToken(YaklangParserEqGt, 0)
}

func (s *AnonymousFunctionDeclContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *AnonymousFunctionDeclContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AnonymousFunctionDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnonymousFunctionDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnonymousFunctionDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAnonymousFunctionDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AnonymousFunctionDecl() (localctx IAnonymousFunctionDeclContext) {
	this := p
	_ = this

	localctx = NewAnonymousFunctionDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, YaklangParserRULE_anonymousFunctionDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(709)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserFunc:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(686)
			p.Match(YaklangParserFunc)
		}
		p.SetState(688)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == YaklangParserIdentifier {
			{
				p.SetState(687)
				p.FunctionNameDecl()
			}

		}
		{
			p.SetState(690)
			p.Match(YaklangParserLParen)
		}
		p.SetState(692)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-39)) & ^0x3f) == 0 && ((int64(1)<<(_la-39))&3746994889972252673) != 0 {
			{
				p.SetState(691)
				p.FunctionParamDecl()
			}

		}
		{
			p.SetState(694)
			p.Match(YaklangParserRParen)
		}
		{
			p.SetState(695)
			p.Block()
		}

	case YaklangParserIdentifier, YaklangParserLParen:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(702)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case YaklangParserLParen:
			{
				p.SetState(696)
				p.Match(YaklangParserLParen)
			}
			p.SetState(698)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (int64((_la-39)) & ^0x3f) == 0 && ((int64(1)<<(_la-39))&3746994889972252673) != 0 {
				{
					p.SetState(697)
					p.FunctionParamDecl()
				}

			}
			{
				p.SetState(700)
				p.Match(YaklangParserRParen)
			}

		case YaklangParserIdentifier:
			{
				p.SetState(701)
				p.Match(YaklangParserIdentifier)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(704)
			p.Match(YaklangParserEqGt)
		}
		p.SetState(707)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(705)
				p.Block()
			}

		case 2:
			{
				p.SetState(706)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionNameDeclContext is an interface to support dynamic dispatch.
type IFunctionNameDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameDeclContext differentiates from other interfaces.
	IsFunctionNameDeclContext()
}

type FunctionNameDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameDeclContext() *FunctionNameDeclContext {
	var p = new(FunctionNameDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_functionNameDecl
	return p
}

func (*FunctionNameDeclContext) IsFunctionNameDeclContext() {}

func NewFunctionNameDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameDeclContext {
	var p = new(FunctionNameDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_functionNameDecl

	return p
}

func (s *FunctionNameDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameDeclContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *FunctionNameDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitFunctionNameDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) FunctionNameDecl() (localctx IFunctionNameDeclContext) {
	this := p
	_ = this

	localctx = NewFunctionNameDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, YaklangParserRULE_functionNameDecl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(711)
		p.Match(YaklangParserIdentifier)
	}

	return localctx
}

// IFunctionParamDeclContext is an interface to support dynamic dispatch.
type IFunctionParamDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParamDeclContext differentiates from other interfaces.
	IsFunctionParamDeclContext()
}

type FunctionParamDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParamDeclContext() *FunctionParamDeclContext {
	var p = new(FunctionParamDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_functionParamDecl
	return p
}

func (*FunctionParamDeclContext) IsFunctionParamDeclContext() {}

func NewFunctionParamDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParamDeclContext {
	var p = new(FunctionParamDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_functionParamDecl

	return p
}

func (s *FunctionParamDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParamDeclContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserIdentifier)
}

func (s *FunctionParamDeclContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, i)
}

func (s *FunctionParamDeclContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *FunctionParamDeclContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *FunctionParamDeclContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *FunctionParamDeclContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *FunctionParamDeclContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(YaklangParserEllipsis, 0)
}

func (s *FunctionParamDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParamDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParamDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitFunctionParamDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) FunctionParamDecl() (localctx IFunctionParamDeclContext) {
	this := p
	_ = this

	localctx = NewFunctionParamDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, YaklangParserRULE_functionParamDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(716)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(713)
			p.Ws()
		}

		p.SetState(718)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(719)
		p.Match(YaklangParserIdentifier)
	}
	p.SetState(736)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(723)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
				{
					p.SetState(720)
					p.Ws()
				}

				p.SetState(725)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(726)
				p.Match(YaklangParserComma)
			}
			p.SetState(730)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
				{
					p.SetState(727)
					p.Ws()
				}

				p.SetState(732)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(733)
				p.Match(YaklangParserIdentifier)
			}

		}
		p.SetState(738)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext())
	}
	p.SetState(740)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserEllipsis {
		{
			p.SetState(739)
			p.Match(YaklangParserEllipsis)
		}

	}
	p.SetState(745)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(742)
				p.Ws()
			}

		}
		p.SetState(747)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())
	}
	p.SetState(749)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(748)
			p.Match(YaklangParserComma)
		}

	}
	p.SetState(754)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(751)
			p.Ws()
		}

		p.SetState(756)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *FunctionCallContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *FunctionCallContext) OrdinaryArguments() IOrdinaryArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdinaryArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdinaryArgumentsContext)
}

func (s *FunctionCallContext) Wavy() antlr.TerminalNode {
	return s.GetToken(YaklangParserWavy, 0)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) FunctionCall() (localctx IFunctionCallContext) {
	this := p
	_ = this

	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, YaklangParserRULE_functionCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(757)
		p.Match(YaklangParserLParen)
	}
	p.SetState(759)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17519238709253) != 0 {
		{
			p.SetState(758)
			p.OrdinaryArguments()
		}

	}
	{
		p.SetState(761)
		p.Match(YaklangParserRParen)
	}
	p.SetState(763)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(762)
			p.Match(YaklangParserWavy)
		}

	}

	return localctx
}

// IOrdinaryArgumentsContext is an interface to support dynamic dispatch.
type IOrdinaryArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrdinaryArgumentsContext differentiates from other interfaces.
	IsOrdinaryArgumentsContext()
}

type OrdinaryArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdinaryArgumentsContext() *OrdinaryArgumentsContext {
	var p = new(OrdinaryArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_ordinaryArguments
	return p
}

func (*OrdinaryArgumentsContext) IsOrdinaryArgumentsContext() {}

func NewOrdinaryArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrdinaryArgumentsContext {
	var p = new(OrdinaryArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_ordinaryArguments

	return p
}

func (s *OrdinaryArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *OrdinaryArgumentsContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *OrdinaryArgumentsContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OrdinaryArgumentsContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *OrdinaryArgumentsContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *OrdinaryArgumentsContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *OrdinaryArgumentsContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *OrdinaryArgumentsContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(YaklangParserEllipsis, 0)
}

func (s *OrdinaryArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrdinaryArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrdinaryArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitOrdinaryArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) OrdinaryArguments() (localctx IOrdinaryArgumentsContext) {
	this := p
	_ = this

	localctx = NewOrdinaryArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, YaklangParserRULE_ordinaryArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(768)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(765)
			p.Ws()
		}

		p.SetState(770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(771)
		p.expression(0)
	}
	p.SetState(788)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(775)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
				{
					p.SetState(772)
					p.Ws()
				}

				p.SetState(777)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(778)
				p.Match(YaklangParserComma)
			}
			p.SetState(782)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
				{
					p.SetState(779)
					p.Ws()
				}

				p.SetState(784)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(785)
				p.expression(0)
			}

		}
		p.SetState(790)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())
	}
	p.SetState(792)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserEllipsis {
		{
			p.SetState(791)
			p.Match(YaklangParserEllipsis)
		}

	}
	p.SetState(797)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(794)
				p.Ws()
			}

		}
		p.SetState(799)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())
	}
	p.SetState(801)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(800)
			p.Match(YaklangParserComma)
		}

	}
	p.SetState(806)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(803)
			p.Ws()
		}

		p.SetState(808)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMemberCallContext is an interface to support dynamic dispatch.
type IMemberCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberCallContext differentiates from other interfaces.
	IsMemberCallContext()
}

type MemberCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberCallContext() *MemberCallContext {
	var p = new(MemberCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_memberCall
	return p
}

func (*MemberCallContext) IsMemberCallContext() {}

func NewMemberCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberCallContext {
	var p = new(MemberCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_memberCall

	return p
}

func (s *MemberCallContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberCallContext) Dot() antlr.TerminalNode {
	return s.GetToken(YaklangParserDot, 0)
}

func (s *MemberCallContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *MemberCallContext) IdentifierWithDollar() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifierWithDollar, 0)
}

func (s *MemberCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMemberCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MemberCall() (localctx IMemberCallContext) {
	this := p
	_ = this

	localctx = NewMemberCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, YaklangParserRULE_memberCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(809)
		p.Match(YaklangParserDot)
	}
	{
		p.SetState(810)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserIdentifier || _la == YaklangParserIdentifierWithDollar) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISliceCallContext is an interface to support dynamic dispatch.
type ISliceCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceCallContext differentiates from other interfaces.
	IsSliceCallContext()
}

type SliceCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceCallContext() *SliceCallContext {
	var p = new(SliceCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_sliceCall
	return p
}

func (*SliceCallContext) IsSliceCallContext() {}

func NewSliceCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceCallContext {
	var p = new(SliceCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_sliceCall

	return p
}

func (s *SliceCallContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceCallContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *SliceCallContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserColon)
}

func (s *SliceCallContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserColon, i)
}

func (s *SliceCallContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *SliceCallContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *SliceCallContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSliceCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SliceCall() (localctx ISliceCallContext) {
	this := p
	_ = this

	localctx = NewSliceCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, YaklangParserRULE_sliceCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(838)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(812)
			p.Match(YaklangParserLBracket)
		}
		p.SetState(814)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
			{
				p.SetState(813)
				p.expression(0)
			}

		}
		{
			p.SetState(816)
			p.Match(YaklangParserColon)
		}
		p.SetState(818)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
			{
				p.SetState(817)
				p.expression(0)
			}

		}
		{
			p.SetState(820)
			p.Match(YaklangParserColon)
		}
		p.SetState(822)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
			{
				p.SetState(821)
				p.expression(0)
			}

		}
		{
			p.SetState(824)
			p.Match(YaklangParserRBracket)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(825)
			p.Match(YaklangParserLBracket)
		}
		p.SetState(827)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
			{
				p.SetState(826)
				p.expression(0)
			}

		}
		{
			p.SetState(829)
			p.Match(YaklangParserColon)
		}
		p.SetState(831)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
			{
				p.SetState(830)
				p.expression(0)
			}

		}
		{
			p.SetState(833)
			p.Match(YaklangParserRBracket)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(834)
			p.Match(YaklangParserLBracket)
		}
		{
			p.SetState(835)
			p.expression(0)
		}
		{
			p.SetState(836)
			p.Match(YaklangParserRBracket)
		}

	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) TemplateStringLiteral() ITemplateStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateStringLiteralContext)
}

func (s *LiteralContext) StringLiteral() IStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *LiteralContext) NumericLiteral() INumericLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericLiteralContext)
}

func (s *LiteralContext) CharacterLiteral() ICharacterLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICharacterLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICharacterLiteralContext)
}

func (s *LiteralContext) UndefinedLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserUndefinedLiteral, 0)
}

func (s *LiteralContext) NilLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserNilLiteral, 0)
}

func (s *LiteralContext) BoolLiteral() IBoolLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolLiteralContext)
}

func (s *LiteralContext) MapLiteral() IMapLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapLiteralContext)
}

func (s *LiteralContext) SliceTypedLiteral() ISliceTypedLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceTypedLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceTypedLiteralContext)
}

func (s *LiteralContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *LiteralContext) SliceLiteral() ISliceLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceLiteralContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Literal() (localctx ILiteralContext) {
	this := p
	_ = this

	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, YaklangParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(851)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(840)
			p.TemplateStringLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(841)
			p.StringLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(842)
			p.NumericLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(843)
			p.CharacterLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(844)
			p.Match(YaklangParserUndefinedLiteral)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(845)
			p.Match(YaklangParserNilLiteral)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(846)
			p.BoolLiteral()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(847)
			p.MapLiteral()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(848)
			p.SliceTypedLiteral()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(849)
			p.TypeLiteral()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(850)
			p.SliceLiteral()
		}

	}

	return localctx
}

// INumericLiteralContext is an interface to support dynamic dispatch.
type INumericLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumericLiteralContext differentiates from other interfaces.
	IsNumericLiteralContext()
}

type NumericLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericLiteralContext() *NumericLiteralContext {
	var p = new(NumericLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_numericLiteral
	return p
}

func (*NumericLiteralContext) IsNumericLiteralContext() {}

func NewNumericLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericLiteralContext {
	var p = new(NumericLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_numericLiteral

	return p
}

func (s *NumericLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericLiteralContext) IntegerLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserIntegerLiteral, 0)
}

func (s *NumericLiteralContext) FloatLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserFloatLiteral, 0)
}

func (s *NumericLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitNumericLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) NumericLiteral() (localctx INumericLiteralContext) {
	this := p
	_ = this

	localctx = NewNumericLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, YaklangParserRULE_numericLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(853)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserIntegerLiteral || _la == YaklangParserFloatLiteral) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserStringLiteral, 0)
}

func (s *StringLiteralContext) StartNowDoc() antlr.TerminalNode {
	return s.GetToken(YaklangParserStartNowDoc, 0)
}

func (s *StringLiteralContext) HereDocIdentifierName() antlr.TerminalNode {
	return s.GetToken(YaklangParserHereDocIdentifierName, 0)
}

func (s *StringLiteralContext) HereDocIdentifierBreak() antlr.TerminalNode {
	return s.GetToken(YaklangParserHereDocIdentifierBreak, 0)
}

func (s *StringLiteralContext) CRLFEndDoc() antlr.TerminalNode {
	return s.GetToken(YaklangParserCRLFEndDoc, 0)
}

func (s *StringLiteralContext) CrlfHereDoc() ICrlfHereDocContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICrlfHereDocContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICrlfHereDocContext)
}

func (s *StringLiteralContext) LFEndDoc() antlr.TerminalNode {
	return s.GetToken(YaklangParserLFEndDoc, 0)
}

func (s *StringLiteralContext) LfHereDoc() ILfHereDocContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILfHereDocContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILfHereDocContext)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) StringLiteral() (localctx IStringLiteralContext) {
	this := p
	_ = this

	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, YaklangParserRULE_stringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(870)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(855)
			p.Match(YaklangParserStringLiteral)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(856)
			p.Match(YaklangParserStartNowDoc)
		}
		{
			p.SetState(857)
			p.Match(YaklangParserHereDocIdentifierName)
		}
		{
			p.SetState(858)
			p.Match(YaklangParserHereDocIdentifierBreak)
		}
		p.SetState(860)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == YaklangParserCRLFHereDocText {
			{
				p.SetState(859)
				p.CrlfHereDoc()
			}

		}
		{
			p.SetState(862)
			p.Match(YaklangParserCRLFEndDoc)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(863)
			p.Match(YaklangParserStartNowDoc)
		}
		{
			p.SetState(864)
			p.Match(YaklangParserHereDocIdentifierName)
		}
		{
			p.SetState(865)
			p.Match(YaklangParserHereDocIdentifierBreak)
		}
		p.SetState(867)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == YaklangParserLFHereDocText {
			{
				p.SetState(866)
				p.LfHereDoc()
			}

		}
		{
			p.SetState(869)
			p.Match(YaklangParserLFEndDoc)
		}

	}

	return localctx
}

// ICrlfHereDocContext is an interface to support dynamic dispatch.
type ICrlfHereDocContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCrlfHereDocContext differentiates from other interfaces.
	IsCrlfHereDocContext()
}

type CrlfHereDocContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCrlfHereDocContext() *CrlfHereDocContext {
	var p = new(CrlfHereDocContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_crlfHereDoc
	return p
}

func (*CrlfHereDocContext) IsCrlfHereDocContext() {}

func NewCrlfHereDocContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CrlfHereDocContext {
	var p = new(CrlfHereDocContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_crlfHereDoc

	return p
}

func (s *CrlfHereDocContext) GetParser() antlr.Parser { return s.parser }

func (s *CrlfHereDocContext) AllCRLFHereDocText() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserCRLFHereDocText)
}

func (s *CrlfHereDocContext) CRLFHereDocText(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserCRLFHereDocText, i)
}

func (s *CrlfHereDocContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CrlfHereDocContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CrlfHereDocContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitCrlfHereDoc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) CrlfHereDoc() (localctx ICrlfHereDocContext) {
	this := p
	_ = this

	localctx = NewCrlfHereDocContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, YaklangParserRULE_crlfHereDoc)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(873)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == YaklangParserCRLFHereDocText {
		{
			p.SetState(872)
			p.Match(YaklangParserCRLFHereDocText)
		}

		p.SetState(875)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILfHereDocContext is an interface to support dynamic dispatch.
type ILfHereDocContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLfHereDocContext differentiates from other interfaces.
	IsLfHereDocContext()
}

type LfHereDocContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLfHereDocContext() *LfHereDocContext {
	var p = new(LfHereDocContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_lfHereDoc
	return p
}

func (*LfHereDocContext) IsLfHereDocContext() {}

func NewLfHereDocContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LfHereDocContext {
	var p = new(LfHereDocContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_lfHereDoc

	return p
}

func (s *LfHereDocContext) GetParser() antlr.Parser { return s.parser }

func (s *LfHereDocContext) AllLFHereDocText() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserLFHereDocText)
}

func (s *LfHereDocContext) LFHereDocText(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserLFHereDocText, i)
}

func (s *LfHereDocContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LfHereDocContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LfHereDocContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLfHereDoc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LfHereDoc() (localctx ILfHereDocContext) {
	this := p
	_ = this

	localctx = NewLfHereDocContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, YaklangParserRULE_lfHereDoc)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(878)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == YaklangParserLFHereDocText {
		{
			p.SetState(877)
			p.Match(YaklangParserLFHereDocText)
		}

		p.SetState(880)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITemplateSingleQuoteStringLiteralContext is an interface to support dynamic dispatch.
type ITemplateSingleQuoteStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSingleQuoteStringLiteralContext differentiates from other interfaces.
	IsTemplateSingleQuoteStringLiteralContext()
}

type TemplateSingleQuoteStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSingleQuoteStringLiteralContext() *TemplateSingleQuoteStringLiteralContext {
	var p = new(TemplateSingleQuoteStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateSingleQuoteStringLiteral
	return p
}

func (*TemplateSingleQuoteStringLiteralContext) IsTemplateSingleQuoteStringLiteralContext() {}

func NewTemplateSingleQuoteStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSingleQuoteStringLiteralContext {
	var p = new(TemplateSingleQuoteStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateSingleQuoteStringLiteral

	return p
}

func (s *TemplateSingleQuoteStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSingleQuoteStringLiteralContext) TemplateSingleQuoteStringStart() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateSingleQuoteStringStart, 0)
}

func (s *TemplateSingleQuoteStringLiteralContext) TemplateSingleQuoteStringCharacterStringEnd() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateSingleQuoteStringCharacterStringEnd, 0)
}

func (s *TemplateSingleQuoteStringLiteralContext) AllTemplateSingleQuoteStringAtom() []ITemplateSingleQuoteStringAtomContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITemplateSingleQuoteStringAtomContext); ok {
			len++
		}
	}

	tst := make([]ITemplateSingleQuoteStringAtomContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITemplateSingleQuoteStringAtomContext); ok {
			tst[i] = t.(ITemplateSingleQuoteStringAtomContext)
			i++
		}
	}

	return tst
}

func (s *TemplateSingleQuoteStringLiteralContext) TemplateSingleQuoteStringAtom(i int) ITemplateSingleQuoteStringAtomContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateSingleQuoteStringAtomContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateSingleQuoteStringAtomContext)
}

func (s *TemplateSingleQuoteStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSingleQuoteStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSingleQuoteStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateSingleQuoteStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateSingleQuoteStringLiteral() (localctx ITemplateSingleQuoteStringLiteralContext) {
	this := p
	_ = this

	localctx = NewTemplateSingleQuoteStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, YaklangParserRULE_templateSingleQuoteStringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(882)
		p.Match(YaklangParserTemplateSingleQuoteStringStart)
	}
	p.SetState(886)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserTemplateSingleQuoteStringCharacter || _la == YaklangParserTemplateSingleQuoteStringStartExpression {
		{
			p.SetState(883)
			p.TemplateSingleQuoteStringAtom()
		}

		p.SetState(888)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(889)
		p.Match(YaklangParserTemplateSingleQuoteStringCharacterStringEnd)
	}

	return localctx
}

// ITemplateDoubleQuoteStringLiteralContext is an interface to support dynamic dispatch.
type ITemplateDoubleQuoteStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDoubleQuoteStringLiteralContext differentiates from other interfaces.
	IsTemplateDoubleQuoteStringLiteralContext()
}

type TemplateDoubleQuoteStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDoubleQuoteStringLiteralContext() *TemplateDoubleQuoteStringLiteralContext {
	var p = new(TemplateDoubleQuoteStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateDoubleQuoteStringLiteral
	return p
}

func (*TemplateDoubleQuoteStringLiteralContext) IsTemplateDoubleQuoteStringLiteralContext() {}

func NewTemplateDoubleQuoteStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDoubleQuoteStringLiteralContext {
	var p = new(TemplateDoubleQuoteStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateDoubleQuoteStringLiteral

	return p
}

func (s *TemplateDoubleQuoteStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDoubleQuoteStringLiteralContext) TemplateDoubleQuoteStringStart() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateDoubleQuoteStringStart, 0)
}

func (s *TemplateDoubleQuoteStringLiteralContext) TemplateDoubleQuoteStringCharacterStringEnd() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateDoubleQuoteStringCharacterStringEnd, 0)
}

func (s *TemplateDoubleQuoteStringLiteralContext) AllTemplateDoubleQuoteStringAtom() []ITemplateDoubleQuoteStringAtomContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITemplateDoubleQuoteStringAtomContext); ok {
			len++
		}
	}

	tst := make([]ITemplateDoubleQuoteStringAtomContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITemplateDoubleQuoteStringAtomContext); ok {
			tst[i] = t.(ITemplateDoubleQuoteStringAtomContext)
			i++
		}
	}

	return tst
}

func (s *TemplateDoubleQuoteStringLiteralContext) TemplateDoubleQuoteStringAtom(i int) ITemplateDoubleQuoteStringAtomContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateDoubleQuoteStringAtomContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateDoubleQuoteStringAtomContext)
}

func (s *TemplateDoubleQuoteStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDoubleQuoteStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDoubleQuoteStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateDoubleQuoteStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateDoubleQuoteStringLiteral() (localctx ITemplateDoubleQuoteStringLiteralContext) {
	this := p
	_ = this

	localctx = NewTemplateDoubleQuoteStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, YaklangParserRULE_templateDoubleQuoteStringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(891)
		p.Match(YaklangParserTemplateDoubleQuoteStringStart)
	}
	p.SetState(895)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserTemplateDoubleQuoteStringCharacter || _la == YaklangParserTemplateDoubleQuoteStringStartExpression {
		{
			p.SetState(892)
			p.TemplateDoubleQuoteStringAtom()
		}

		p.SetState(897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(898)
		p.Match(YaklangParserTemplateDoubleQuoteStringCharacterStringEnd)
	}

	return localctx
}

// ITemplateBackTickStringLiteralContext is an interface to support dynamic dispatch.
type ITemplateBackTickStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateBackTickStringLiteralContext differentiates from other interfaces.
	IsTemplateBackTickStringLiteralContext()
}

type TemplateBackTickStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateBackTickStringLiteralContext() *TemplateBackTickStringLiteralContext {
	var p = new(TemplateBackTickStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateBackTickStringLiteral
	return p
}

func (*TemplateBackTickStringLiteralContext) IsTemplateBackTickStringLiteralContext() {}

func NewTemplateBackTickStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateBackTickStringLiteralContext {
	var p = new(TemplateBackTickStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateBackTickStringLiteral

	return p
}

func (s *TemplateBackTickStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateBackTickStringLiteralContext) TemplateBackTickStringStart() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateBackTickStringStart, 0)
}

func (s *TemplateBackTickStringLiteralContext) TemplateBackTickStringCharacterStringEnd() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateBackTickStringCharacterStringEnd, 0)
}

func (s *TemplateBackTickStringLiteralContext) AllTemplateBackTickStringAtom() []ITemplateBackTickStringAtomContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITemplateBackTickStringAtomContext); ok {
			len++
		}
	}

	tst := make([]ITemplateBackTickStringAtomContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITemplateBackTickStringAtomContext); ok {
			tst[i] = t.(ITemplateBackTickStringAtomContext)
			i++
		}
	}

	return tst
}

func (s *TemplateBackTickStringLiteralContext) TemplateBackTickStringAtom(i int) ITemplateBackTickStringAtomContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateBackTickStringAtomContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateBackTickStringAtomContext)
}

func (s *TemplateBackTickStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateBackTickStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateBackTickStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateBackTickStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateBackTickStringLiteral() (localctx ITemplateBackTickStringLiteralContext) {
	this := p
	_ = this

	localctx = NewTemplateBackTickStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, YaklangParserRULE_templateBackTickStringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(900)
		p.Match(YaklangParserTemplateBackTickStringStart)
	}
	p.SetState(904)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserTemplateBackTickStringCharacter || _la == YaklangParserTemplateBackTickStringStartExpression {
		{
			p.SetState(901)
			p.TemplateBackTickStringAtom()
		}

		p.SetState(906)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(907)
		p.Match(YaklangParserTemplateBackTickStringCharacterStringEnd)
	}

	return localctx
}

// ITemplateStringLiteralContext is an interface to support dynamic dispatch.
type ITemplateStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateStringLiteralContext differentiates from other interfaces.
	IsTemplateStringLiteralContext()
}

type TemplateStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateStringLiteralContext() *TemplateStringLiteralContext {
	var p = new(TemplateStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateStringLiteral
	return p
}

func (*TemplateStringLiteralContext) IsTemplateStringLiteralContext() {}

func NewTemplateStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateStringLiteralContext {
	var p = new(TemplateStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateStringLiteral

	return p
}

func (s *TemplateStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateStringLiteralContext) TemplateSingleQuoteStringLiteral() ITemplateSingleQuoteStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateSingleQuoteStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateSingleQuoteStringLiteralContext)
}

func (s *TemplateStringLiteralContext) TemplateDoubleQuoteStringLiteral() ITemplateDoubleQuoteStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateDoubleQuoteStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateDoubleQuoteStringLiteralContext)
}

func (s *TemplateStringLiteralContext) TemplateBackTickStringLiteral() ITemplateBackTickStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateBackTickStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateBackTickStringLiteralContext)
}

func (s *TemplateStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateStringLiteral() (localctx ITemplateStringLiteralContext) {
	this := p
	_ = this

	localctx = NewTemplateStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, YaklangParserRULE_templateStringLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(912)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserTemplateSingleQuoteStringStart:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(909)
			p.TemplateSingleQuoteStringLiteral()
		}

	case YaklangParserTemplateDoubleQuoteStringStart:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(910)
			p.TemplateDoubleQuoteStringLiteral()
		}

	case YaklangParserTemplateBackTickStringStart:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(911)
			p.TemplateBackTickStringLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateSingleQuoteStringAtomContext is an interface to support dynamic dispatch.
type ITemplateSingleQuoteStringAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSingleQuoteStringAtomContext differentiates from other interfaces.
	IsTemplateSingleQuoteStringAtomContext()
}

type TemplateSingleQuoteStringAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSingleQuoteStringAtomContext() *TemplateSingleQuoteStringAtomContext {
	var p = new(TemplateSingleQuoteStringAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateSingleQuoteStringAtom
	return p
}

func (*TemplateSingleQuoteStringAtomContext) IsTemplateSingleQuoteStringAtomContext() {}

func NewTemplateSingleQuoteStringAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSingleQuoteStringAtomContext {
	var p = new(TemplateSingleQuoteStringAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateSingleQuoteStringAtom

	return p
}

func (s *TemplateSingleQuoteStringAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSingleQuoteStringAtomContext) AllTemplateSingleQuoteStringCharacter() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserTemplateSingleQuoteStringCharacter)
}

func (s *TemplateSingleQuoteStringAtomContext) TemplateSingleQuoteStringCharacter(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateSingleQuoteStringCharacter, i)
}

func (s *TemplateSingleQuoteStringAtomContext) TemplateSingleQuoteStringStartExpression() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateSingleQuoteStringStartExpression, 0)
}

func (s *TemplateSingleQuoteStringAtomContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TemplateSingleQuoteStringAtomContext) TemplateCloseBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateCloseBrace, 0)
}

func (s *TemplateSingleQuoteStringAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSingleQuoteStringAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSingleQuoteStringAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateSingleQuoteStringAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateSingleQuoteStringAtom() (localctx ITemplateSingleQuoteStringAtomContext) {
	this := p
	_ = this

	localctx = NewTemplateSingleQuoteStringAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, YaklangParserRULE_templateSingleQuoteStringAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(923)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserTemplateSingleQuoteStringCharacter:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(915)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(914)
					p.Match(YaklangParserTemplateSingleQuoteStringCharacter)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(917)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext())
		}

	case YaklangParserTemplateSingleQuoteStringStartExpression:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(919)
			p.Match(YaklangParserTemplateSingleQuoteStringStartExpression)
		}
		{
			p.SetState(920)
			p.expression(0)
		}
		{
			p.SetState(921)
			p.Match(YaklangParserTemplateCloseBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateDoubleQuoteStringAtomContext is an interface to support dynamic dispatch.
type ITemplateDoubleQuoteStringAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDoubleQuoteStringAtomContext differentiates from other interfaces.
	IsTemplateDoubleQuoteStringAtomContext()
}

type TemplateDoubleQuoteStringAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDoubleQuoteStringAtomContext() *TemplateDoubleQuoteStringAtomContext {
	var p = new(TemplateDoubleQuoteStringAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateDoubleQuoteStringAtom
	return p
}

func (*TemplateDoubleQuoteStringAtomContext) IsTemplateDoubleQuoteStringAtomContext() {}

func NewTemplateDoubleQuoteStringAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDoubleQuoteStringAtomContext {
	var p = new(TemplateDoubleQuoteStringAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateDoubleQuoteStringAtom

	return p
}

func (s *TemplateDoubleQuoteStringAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDoubleQuoteStringAtomContext) AllTemplateDoubleQuoteStringCharacter() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserTemplateDoubleQuoteStringCharacter)
}

func (s *TemplateDoubleQuoteStringAtomContext) TemplateDoubleQuoteStringCharacter(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateDoubleQuoteStringCharacter, i)
}

func (s *TemplateDoubleQuoteStringAtomContext) TemplateDoubleQuoteStringStartExpression() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateDoubleQuoteStringStartExpression, 0)
}

func (s *TemplateDoubleQuoteStringAtomContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TemplateDoubleQuoteStringAtomContext) TemplateCloseBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateCloseBrace, 0)
}

func (s *TemplateDoubleQuoteStringAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDoubleQuoteStringAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDoubleQuoteStringAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateDoubleQuoteStringAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateDoubleQuoteStringAtom() (localctx ITemplateDoubleQuoteStringAtomContext) {
	this := p
	_ = this

	localctx = NewTemplateDoubleQuoteStringAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, YaklangParserRULE_templateDoubleQuoteStringAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(934)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserTemplateDoubleQuoteStringCharacter:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(926)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(925)
					p.Match(YaklangParserTemplateDoubleQuoteStringCharacter)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(928)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext())
		}

	case YaklangParserTemplateDoubleQuoteStringStartExpression:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(930)
			p.Match(YaklangParserTemplateDoubleQuoteStringStartExpression)
		}
		{
			p.SetState(931)
			p.expression(0)
		}
		{
			p.SetState(932)
			p.Match(YaklangParserTemplateCloseBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateBackTickStringAtomContext is an interface to support dynamic dispatch.
type ITemplateBackTickStringAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateBackTickStringAtomContext differentiates from other interfaces.
	IsTemplateBackTickStringAtomContext()
}

type TemplateBackTickStringAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateBackTickStringAtomContext() *TemplateBackTickStringAtomContext {
	var p = new(TemplateBackTickStringAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateBackTickStringAtom
	return p
}

func (*TemplateBackTickStringAtomContext) IsTemplateBackTickStringAtomContext() {}

func NewTemplateBackTickStringAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateBackTickStringAtomContext {
	var p = new(TemplateBackTickStringAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateBackTickStringAtom

	return p
}

func (s *TemplateBackTickStringAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateBackTickStringAtomContext) AllTemplateBackTickStringCharacter() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserTemplateBackTickStringCharacter)
}

func (s *TemplateBackTickStringAtomContext) TemplateBackTickStringCharacter(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateBackTickStringCharacter, i)
}

func (s *TemplateBackTickStringAtomContext) TemplateBackTickStringStartExpression() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateBackTickStringStartExpression, 0)
}

func (s *TemplateBackTickStringAtomContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TemplateBackTickStringAtomContext) TemplateCloseBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateCloseBrace, 0)
}

func (s *TemplateBackTickStringAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateBackTickStringAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateBackTickStringAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateBackTickStringAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateBackTickStringAtom() (localctx ITemplateBackTickStringAtomContext) {
	this := p
	_ = this

	localctx = NewTemplateBackTickStringAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, YaklangParserRULE_templateBackTickStringAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(945)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserTemplateBackTickStringCharacter:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(937)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(936)
					p.Match(YaklangParserTemplateBackTickStringCharacter)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(939)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())
		}

	case YaklangParserTemplateBackTickStringStartExpression:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(941)
			p.Match(YaklangParserTemplateBackTickStringStartExpression)
		}
		{
			p.SetState(942)
			p.expression(0)
		}
		{
			p.SetState(943)
			p.Match(YaklangParserTemplateCloseBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBoolLiteralContext is an interface to support dynamic dispatch.
type IBoolLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolLiteralContext differentiates from other interfaces.
	IsBoolLiteralContext()
}

type BoolLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolLiteralContext() *BoolLiteralContext {
	var p = new(BoolLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_boolLiteral
	return p
}

func (*BoolLiteralContext) IsBoolLiteralContext() {}

func NewBoolLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolLiteralContext {
	var p = new(BoolLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_boolLiteral

	return p
}

func (s *BoolLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolLiteralContext) True() antlr.TerminalNode {
	return s.GetToken(YaklangParserTrue, 0)
}

func (s *BoolLiteralContext) False() antlr.TerminalNode {
	return s.GetToken(YaklangParserFalse, 0)
}

func (s *BoolLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitBoolLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) BoolLiteral() (localctx IBoolLiteralContext) {
	this := p
	_ = this

	localctx = NewBoolLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, YaklangParserRULE_boolLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(947)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserTrue || _la == YaklangParserFalse) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICharacterLiteralContext is an interface to support dynamic dispatch.
type ICharacterLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharacterLiteralContext differentiates from other interfaces.
	IsCharacterLiteralContext()
}

type CharacterLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharacterLiteralContext() *CharacterLiteralContext {
	var p = new(CharacterLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_characterLiteral
	return p
}

func (*CharacterLiteralContext) IsCharacterLiteralContext() {}

func NewCharacterLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharacterLiteralContext {
	var p = new(CharacterLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_characterLiteral

	return p
}

func (s *CharacterLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *CharacterLiteralContext) CharacterLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserCharacterLiteral, 0)
}

func (s *CharacterLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharacterLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharacterLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitCharacterLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) CharacterLiteral() (localctx ICharacterLiteralContext) {
	this := p
	_ = this

	localctx = NewCharacterLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, YaklangParserRULE_characterLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(949)
		p.Match(YaklangParserCharacterLiteral)
	}

	return localctx
}

// ISliceLiteralContext is an interface to support dynamic dispatch.
type ISliceLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceLiteralContext differentiates from other interfaces.
	IsSliceLiteralContext()
}

type SliceLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceLiteralContext() *SliceLiteralContext {
	var p = new(SliceLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_sliceLiteral
	return p
}

func (*SliceLiteralContext) IsSliceLiteralContext() {}

func NewSliceLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceLiteralContext {
	var p = new(SliceLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_sliceLiteral

	return p
}

func (s *SliceLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceLiteralContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *SliceLiteralContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *SliceLiteralContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *SliceLiteralContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *SliceLiteralContext) ExpressionListMultiline() IExpressionListMultilineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListMultilineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListMultilineContext)
}

func (s *SliceLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSliceLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SliceLiteral() (localctx ISliceLiteralContext) {
	this := p
	_ = this

	localctx = NewSliceLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, YaklangParserRULE_sliceLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(951)
		p.Match(YaklangParserLBracket)
	}
	p.SetState(955)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(952)
				p.Ws()
			}

		}
		p.SetState(957)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())
	}
	p.SetState(959)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
		{
			p.SetState(958)
			p.ExpressionListMultiline()
		}

	}
	p.SetState(964)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(961)
			p.Ws()
		}

		p.SetState(966)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(967)
		p.Match(YaklangParserRBracket)
	}

	return localctx
}

// ISliceTypedLiteralContext is an interface to support dynamic dispatch.
type ISliceTypedLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceTypedLiteralContext differentiates from other interfaces.
	IsSliceTypedLiteralContext()
}

type SliceTypedLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceTypedLiteralContext() *SliceTypedLiteralContext {
	var p = new(SliceTypedLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_sliceTypedLiteral
	return p
}

func (*SliceTypedLiteralContext) IsSliceTypedLiteralContext() {}

func NewSliceTypedLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceTypedLiteralContext {
	var p = new(SliceTypedLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_sliceTypedLiteral

	return p
}

func (s *SliceTypedLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceTypedLiteralContext) SliceTypeLiteral() ISliceTypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceTypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceTypeLiteralContext)
}

func (s *SliceTypedLiteralContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *SliceTypedLiteralContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *SliceTypedLiteralContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *SliceTypedLiteralContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *SliceTypedLiteralContext) ExpressionListMultiline() IExpressionListMultilineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListMultilineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListMultilineContext)
}

func (s *SliceTypedLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypedLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceTypedLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSliceTypedLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SliceTypedLiteral() (localctx ISliceTypedLiteralContext) {
	this := p
	_ = this

	localctx = NewSliceTypedLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, YaklangParserRULE_sliceTypedLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(969)
		p.SliceTypeLiteral()
	}
	{
		p.SetState(970)
		p.Match(YaklangParserLBrace)
	}
	p.SetState(974)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(971)
				p.Ws()
			}

		}
		p.SetState(976)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext())
	}
	p.SetState(978)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
		{
			p.SetState(977)
			p.ExpressionListMultiline()
		}

	}
	p.SetState(983)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(980)
			p.Ws()
		}

		p.SetState(985)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(986)
		p.Match(YaklangParserRBrace)
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *ExpressionListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ExpressionList() (localctx IExpressionListContext) {
	this := p
	_ = this

	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, YaklangParserRULE_expressionList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(988)
		p.expression(0)
	}
	p.SetState(993)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(989)
				p.Match(YaklangParserComma)
			}
			{
				p.SetState(990)
				p.expression(0)
			}

		}
		p.SetState(995)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext())
	}
	p.SetState(997)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(996)
			p.Match(YaklangParserComma)
		}

	}

	return localctx
}

// IExpressionListMultilineContext is an interface to support dynamic dispatch.
type IExpressionListMultilineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListMultilineContext differentiates from other interfaces.
	IsExpressionListMultilineContext()
}

type ExpressionListMultilineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListMultilineContext() *ExpressionListMultilineContext {
	var p = new(ExpressionListMultilineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_expressionListMultiline
	return p
}

func (*ExpressionListMultilineContext) IsExpressionListMultilineContext() {}

func NewExpressionListMultilineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListMultilineContext {
	var p = new(ExpressionListMultilineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_expressionListMultiline

	return p
}

func (s *ExpressionListMultilineContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListMultilineContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListMultilineContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListMultilineContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *ExpressionListMultilineContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *ExpressionListMultilineContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListMultilineContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *ExpressionListMultilineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListMultilineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListMultilineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitExpressionListMultiline(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ExpressionListMultiline() (localctx IExpressionListMultilineContext) {
	this := p
	_ = this

	localctx = NewExpressionListMultilineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, YaklangParserRULE_expressionListMultiline)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(999)
		p.expression(0)
	}
	p.SetState(1010)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1000)
				p.Match(YaklangParserComma)
			}
			p.SetState(1004)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
				{
					p.SetState(1001)
					p.Ws()
				}

				p.SetState(1006)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1007)
				p.expression(0)
			}

		}
		p.SetState(1012)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())
	}
	p.SetState(1014)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(1013)
			p.Match(YaklangParserComma)
		}

	}

	return localctx
}

// IMapLiteralContext is an interface to support dynamic dispatch.
type IMapLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralContext differentiates from other interfaces.
	IsMapLiteralContext()
}

type MapLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralContext() *MapLiteralContext {
	var p = new(MapLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapLiteral
	return p
}

func (*MapLiteralContext) IsMapLiteralContext() {}

func NewMapLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralContext {
	var p = new(MapLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapLiteral

	return p
}

func (s *MapLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralContext) MapTypedLiteral() IMapTypedLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapTypedLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapTypedLiteralContext)
}

func (s *MapLiteralContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *MapLiteralContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *MapLiteralContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *MapLiteralContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *MapLiteralContext) MapPairs() IMapPairsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapPairsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapPairsContext)
}

func (s *MapLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapLiteral() (localctx IMapLiteralContext) {
	this := p
	_ = this

	localctx = NewMapLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, YaklangParserRULE_mapLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1034)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserMap:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1016)
			p.MapTypedLiteral()
		}

	case YaklangParserLBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1017)
			p.Match(YaklangParserLBrace)
		}
		p.SetState(1021)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1018)
					p.Ws()
				}

			}
			p.SetState(1023)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext())
		}
		p.SetState(1025)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
			{
				p.SetState(1024)
				p.MapPairs()
			}

		}
		p.SetState(1030)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
			{
				p.SetState(1027)
				p.Ws()
			}

			p.SetState(1032)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1033)
			p.Match(YaklangParserRBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMapTypedLiteralContext is an interface to support dynamic dispatch.
type IMapTypedLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapTypedLiteralContext differentiates from other interfaces.
	IsMapTypedLiteralContext()
}

type MapTypedLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypedLiteralContext() *MapTypedLiteralContext {
	var p = new(MapTypedLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapTypedLiteral
	return p
}

func (*MapTypedLiteralContext) IsMapTypedLiteralContext() {}

func NewMapTypedLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypedLiteralContext {
	var p = new(MapTypedLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapTypedLiteral

	return p
}

func (s *MapTypedLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypedLiteralContext) MapTypeLiteral() IMapTypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapTypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapTypeLiteralContext)
}

func (s *MapTypedLiteralContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *MapTypedLiteralContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *MapTypedLiteralContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *MapTypedLiteralContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *MapTypedLiteralContext) MapPairs() IMapPairsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapPairsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapPairsContext)
}

func (s *MapTypedLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypedLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypedLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapTypedLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapTypedLiteral() (localctx IMapTypedLiteralContext) {
	this := p
	_ = this

	localctx = NewMapTypedLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, YaklangParserRULE_mapTypedLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1036)
		p.MapTypeLiteral()
	}
	{
		p.SetState(1037)
		p.Match(YaklangParserLBrace)
	}
	p.SetState(1041)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1038)
				p.Ws()
			}

		}
		p.SetState(1043)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext())
	}
	p.SetState(1045)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&17463404134405) != 0 {
		{
			p.SetState(1044)
			p.MapPairs()
		}

	}
	p.SetState(1050)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
		{
			p.SetState(1047)
			p.Ws()
		}

		p.SetState(1052)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1053)
		p.Match(YaklangParserRBrace)
	}

	return localctx
}

// IMapPairsContext is an interface to support dynamic dispatch.
type IMapPairsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapPairsContext differentiates from other interfaces.
	IsMapPairsContext()
}

type MapPairsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapPairsContext() *MapPairsContext {
	var p = new(MapPairsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapPairs
	return p
}

func (*MapPairsContext) IsMapPairsContext() {}

func NewMapPairsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapPairsContext {
	var p = new(MapPairsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapPairs

	return p
}

func (s *MapPairsContext) GetParser() antlr.Parser { return s.parser }

func (s *MapPairsContext) AllMapPair() []IMapPairContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMapPairContext); ok {
			len++
		}
	}

	tst := make([]IMapPairContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMapPairContext); ok {
			tst[i] = t.(IMapPairContext)
			i++
		}
	}

	return tst
}

func (s *MapPairsContext) MapPair(i int) IMapPairContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapPairContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapPairContext)
}

func (s *MapPairsContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *MapPairsContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *MapPairsContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *MapPairsContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *MapPairsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapPairsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapPairsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapPairs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapPairs() (localctx IMapPairsContext) {
	this := p
	_ = this

	localctx = NewMapPairsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, YaklangParserRULE_mapPairs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1055)
		p.MapPair()
	}
	p.SetState(1066)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1056)
				p.Match(YaklangParserComma)
			}
			p.SetState(1060)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0 {
				{
					p.SetState(1057)
					p.Ws()
				}

				p.SetState(1062)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1063)
				p.MapPair()
			}

		}
		p.SetState(1068)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())
	}
	p.SetState(1070)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(1069)
			p.Match(YaklangParserComma)
		}

	}

	return localctx
}

// IMapPairContext is an interface to support dynamic dispatch.
type IMapPairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapPairContext differentiates from other interfaces.
	IsMapPairContext()
}

type MapPairContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapPairContext() *MapPairContext {
	var p = new(MapPairContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapPair
	return p
}

func (*MapPairContext) IsMapPairContext() {}

func NewMapPairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapPairContext {
	var p = new(MapPairContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapPair

	return p
}

func (s *MapPairContext) GetParser() antlr.Parser { return s.parser }

func (s *MapPairContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *MapPairContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MapPairContext) Colon() antlr.TerminalNode {
	return s.GetToken(YaklangParserColon, 0)
}

func (s *MapPairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapPairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapPairContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapPair(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapPair() (localctx IMapPairContext) {
	this := p
	_ = this

	localctx = NewMapPairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, YaklangParserRULE_mapPair)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1072)
		p.expression(0)
	}
	{
		p.SetState(1073)
		p.Match(YaklangParserColon)
	}
	{
		p.SetState(1074)
		p.expression(0)
	}

	return localctx
}

// IWsContext is an interface to support dynamic dispatch.
type IWsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWsContext differentiates from other interfaces.
	IsWsContext()
}

type WsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWsContext() *WsContext {
	var p = new(WsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_ws
	return p
}

func (*WsContext) IsWsContext() {}

func NewWsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WsContext {
	var p = new(WsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_ws

	return p
}

func (s *WsContext) GetParser() antlr.Parser { return s.parser }

func (s *WsContext) AllLF() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserLF)
}

func (s *WsContext) LF(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserLF, i)
}

func (s *WsContext) AllCOMMENT() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserCOMMENT)
}

func (s *WsContext) COMMENT(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserCOMMENT, i)
}

func (s *WsContext) AllLINE_COMMENT() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserLINE_COMMENT)
}

func (s *WsContext) LINE_COMMENT(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserLINE_COMMENT, i)
}

func (s *WsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitWs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Ws() (localctx IWsContext) {
	this := p
	_ = this

	localctx = NewWsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, YaklangParserRULE_ws)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1077)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1076)
				_la = p.GetTokenStream().LA(1)

				if !((int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&13) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1079)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext())
	}

	return localctx
}

// IEosContext is an interface to support dynamic dispatch.
type IEosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosContext differentiates from other interfaces.
	IsEosContext()
}

type EosContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosContext() *EosContext {
	var p = new(EosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_eos
	return p
}

func (*EosContext) IsEosContext() {}

func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosContext {
	var p = new(EosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_eos

	return p
}

func (s *EosContext) GetParser() antlr.Parser { return s.parser }

func (s *EosContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(YaklangParserSemiColon, 0)
}

func (s *EosContext) AllLF() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserLF)
}

func (s *EosContext) LF(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserLF, i)
}

func (s *EosContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(YaklangParserCOMMENT, 0)
}

func (s *EosContext) LINE_COMMENT() antlr.TerminalNode {
	return s.GetToken(YaklangParserLINE_COMMENT, 0)
}

func (s *EosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitEos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Eos() (localctx IEosContext) {
	this := p
	_ = this

	localctx = NewEosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, YaklangParserRULE_eos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1090)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1081)
			p.Match(YaklangParserSemiColon)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1083)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1082)
					p.Match(YaklangParserLF)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1085)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext())
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1087)
			p.Match(YaklangParserCOMMENT)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1088)
			p.Match(YaklangParserLINE_COMMENT)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(1089)

		if !(this.closingBracket()) {
			panic(antlr.NewFailedPredicateException(p, " this.closingBracket() ", ""))
		}

	}

	return localctx
}

func (p *YaklangParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 44:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 81:
		var t *EosContext = nil
		if localctx != nil {
			t = localctx.(*EosContext)
		}
		return p.Eos_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *YaklangParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 14)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *YaklangParser) Eos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 10:
		return this.closingBracket()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
