// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package phpparser // PHPParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type PHPParser struct {
	*antlr.BaseParser
}

var phpparserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func phpparserParserInit() {
	staticData := &phpparserParserStaticData
	staticData.literalNames = []string{
		"", "", "", "'<?xml'", "", "", "", "", "", "", "", "", "", "'?>'", "",
		"", "'/>'", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "'#['", "'abstract'",
		"'array'", "'as'", "'binary'", "", "", "'break'", "'callable'", "'case'",
		"'catch'", "'class'", "'clone'", "'const'", "'continue'", "'define'",
		"'defined'", "'declare'", "'default'", "'do'", "'real'", "'double'",
		"'echo'", "'else'", "'elseif'", "'empty'", "'enum'", "'enddeclare'",
		"'endfor'", "'endforeach'", "'endif'", "'endswitch'", "'endwhile'",
		"'eval'", "'assert'", "'die'", "'exit'", "'extends'", "'final'", "'finally'",
		"'float'", "'for'", "'foreach'", "'function'", "'global'", "'goto'",
		"'if'", "'implements'", "'import'", "'include'", "'include_once'", "'instanceof'",
		"'insteadof'", "'int8'", "'int16'", "'int64'", "", "'interface'", "'isset'",
		"'list'", "'and'", "'or'", "'xor'", "'match'", "'namespace'", "'new'",
		"'null'", "'object'", "'parent'", "'partial'", "'print'", "'private'",
		"'protected'", "'public'", "'readonly'", "'require'", "'require_once'",
		"'resource'", "'return'", "'static'", "'string'", "'switch'", "'throw'",
		"'trait'", "'try'", "'clrtypeof'", "", "'unicode'", "'unset'", "'use'",
		"'var'", "'while'", "'yield'", "'from'", "'fn'", "'ticks'", "'encoding'",
		"'strict_types'", "'__get'", "'__set'", "'__call'", "'__callstatic'",
		"'__construct'", "'__destruct'", "'__wakeup'", "'__sleep'", "'__autoload'",
		"'__isset'", "'__unset'", "'__tostring'", "'__invoke'", "'__set_state'",
		"'__clone'", "'__debuginfo'", "'__namespace__'", "'__class__'", "'__trait__'",
		"'__function__'", "'__method__'", "'__line__'", "'__file__'", "'__dir__'",
		"'<=>'", "'=>'", "'++'", "'--'", "'==='", "'!=='", "'=='", "", "'<='",
		"'>='", "'+='", "'-='", "'*='", "'**'", "'**='", "'/='", "'.='", "'%='",
		"'<<='", "'>>='", "'&='", "'|='", "'^='", "'||'", "'&&'", "'??'", "'??='",
		"'<<<'", "'<<'", "'>>'", "'::'", "'->'", "'\\'", "'...'", "", "", "'&'",
		"'|'", "'!'", "'^'", "'+'", "'-'", "'*'", "'%'", "", "'~'", "'@'", "",
		"'.'", "", "'('", "')'", "'['", "']'", "", "'}'", "','", "':'", "';'",
		"", "'''", "'`'", "'set_include_path'", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "'\\n'",
	}
	staticData.symbolicNames = []string{
		"", "SeaWhitespace", "HtmlText", "XmlStart", "PHPStart", "HtmlScriptOpen",
		"HtmlStyleOpen", "HtmlComment", "HtmlDtd", "HtmlOpen", "Shebang", "Error",
		"XmlText", "XmlClose", "PHPStartInside", "HtmlClose", "HtmlSlashClose",
		"HtmlSlash", "HtmlEquals", "HtmlStartQuoteString", "HtmlStartDoubleQuoteString",
		"HtmlHex", "HtmlDecimal", "HtmlSpace", "HtmlName", "ErrorInside", "PHPStartInsideQuoteString",
		"HtmlEndQuoteString", "HtmlQuoteString", "ErrorHtmlQuote", "PHPStartDoubleQuoteString",
		"HtmlEndDoubleQuoteString", "HtmlDoubleQuoteString", "ErrorHtmlDoubleQuote",
		"ScriptText", "HtmlScriptClose", "PHPStartInsideScript", "StyleBody",
		"PHPEnd", "Whitespace", "MultiLineComment", "SingleLineComment", "ShellStyleComment",
		"AttributeStart", "Abstract", "Array", "As", "BinaryCast", "BoolType",
		"BooleanConstant", "Break", "Callable", "Case", "Catch", "Class", "Clone",
		"Const", "Continue", "Define", "Defined", "Declare", "Default", "Do",
		"DoubleCast", "DoubleType", "Echo", "Else", "ElseIf", "Empty", "Enum_",
		"EndDeclare", "EndFor", "EndForeach", "EndIf", "EndSwitch", "EndWhile",
		"Eval", "Assert", "Die", "Exit", "Extends", "Final", "Finally", "FloatCast",
		"For", "Foreach", "Function_", "Global", "Goto", "If", "Implements",
		"Import", "Include", "IncludeOnce", "InstanceOf", "InsteadOf", "Int8Cast",
		"Int16Cast", "Int64Type", "IntType", "Interface", "IsSet", "List", "LogicalAnd",
		"LogicalOr", "LogicalXor", "Match_", "Namespace", "New", "Null", "ObjectType",
		"Parent_", "Partial", "Print", "Private", "Protected", "Public", "Readonly",
		"Require", "RequireOnce", "Resource", "Return", "Static", "StringType",
		"Switch", "Throw", "Trait", "Try", "Typeof", "UintCast", "UnicodeCast",
		"Unset", "Use", "Var", "While", "Yield", "From", "LambdaFn", "Ticks",
		"Encoding", "StrictTypes", "Get", "Set", "Call", "CallStatic", "Constructor",
		"Destruct", "Wakeup", "Sleep", "Autoload", "IsSet__", "Unset__", "ToString__",
		"Invoke", "SetState", "Clone__", "DebugInfo", "Namespace__", "Class__",
		"Traic__", "Function__", "Method__", "Line__", "File__", "Dir__", "Spaceship",
		"DoubleArrow", "Inc", "Dec", "IsIdentical", "IsNoidentical", "IsEqual",
		"IsNotEq", "IsSmallerOrEqual", "IsGreaterOrEqual", "PlusEqual", "MinusEqual",
		"MulEqual", "Pow", "PowEqual", "DivEqual", "Concaequal", "ModEqual",
		"ShiftLeftEqual", "ShiftRightEqual", "AndEqual", "OrEqual", "XorEqual",
		"BooleanOr", "BooleanAnd", "NullCoalescing", "NullCoalescingEqual",
		"StartNowDoc", "ShiftLeft", "ShiftRight", "DoubleColon", "ObjectOperator",
		"NamespaceSeparator", "Ellipsis", "Less", "Greater", "Ampersand", "Pipe",
		"Bang", "Caret", "Plus", "Minus", "Asterisk", "Percent", "Divide", "Tilde",
		"SuppressWarnings", "Dollar", "Dot", "QuestionMark", "OpenRoundBracket",
		"CloseRoundBracket", "OpenSquareBracket", "CloseSquareBracket", "OpenCurlyBracket",
		"CloseCurlyBracket", "Comma", "Colon", "SemiColon", "Eq", "Quote", "BackQuote",
		"Set_Include_Path", "VarName", "Label", "Octal", "Decimal", "Real",
		"Hex", "Binary", "BackQuoteString", "SingleQuoteString", "DoubleQuote",
		"ErrorPhp", "CurlyDollar", "UnicodeEscape", "StringPart", "Comment",
		"PHPEndSingleLineComment", "CommentEnd", "HereDocIdentiferWhite", "HereDocIdentiferName",
		"HereDocIdentifierBreak", "EndDoc", "HereDocText", "HereDocVariable",
		"XmlText2",
	}
	staticData.ruleNames = []string{
		"htmlDocument", "htmlDocumentElement", "inlineHtml", "htmlElement",
		"scriptText", "phpBlock", "importStatement", "topStatement", "useDeclaration",
		"useDeclarationContentList", "useDeclarationContent", "namespaceDeclaration",
		"namespaceStatement", "functionDeclaration", "classDeclaration", "classEntryType",
		"interfaceList", "typeParameterList", "typeParameterWithDefaultsList",
		"typeParameterDecl", "typeParameterWithDefaultDecl", "attributes", "attributeGroup",
		"attribute", "innerStatementList", "innerStatement", "labelStatement",
		"statement", "emptyStatement_", "blockStatement", "ifStatement", "elseIfStatement",
		"elseIfColonStatement", "elseStatement", "elseColonStatement", "whileStatement",
		"doWhileStatement", "forStatement", "forInit", "forUpdate", "switchStatement",
		"switchCaseBlock", "switchDefaultBlock", "switchBlock", "breakStatement",
		"continueStatement", "returnStatement", "expressionStatement", "unsetStatement",
		"foreachStatement", "tryCatchFinally", "catchClause", "finallyStatement",
		"throwStatement", "gotoStatement", "declareStatement", "inlineHtmlStatement",
		"declareList", "directive", "formalParameterList", "formalParameter",
		"typeHint", "globalStatement", "globalVar", "echoStatement", "staticVariableStatement",
		"classStatement", "traitAdaptations", "traitAdaptationStatement", "traitPrecedence",
		"traitAlias", "traitMethodReference", "baseCtorCall", "returnTypeDecl",
		"methodBody", "propertyModifiers", "memberModifiers", "variableInitializer",
		"identifierInitializer", "globalConstantDeclaration", "enumDeclaration",
		"enumItem", "expressionList", "parentheses", "fullyQualifiedNamespaceExpr",
		"staticClassExpr", "staticClassExprFunctionMember", "staticClassExprVariableMember",
		"memberCallKey", "indexMemberCallKey", "expression", "flexiVariable",
		"defineExpr", "variable", "include", "leftArrayCreation", "assignable",
		"arrayCreation", "arrayDestructuring", "indexedDestructItem", "keyedDestructItem",
		"lambdaFunctionExpr", "matchExpr", "matchItem", "newExpr", "assignmentOperator",
		"yieldExpression", "arrayItemList", "arrayItem", "lambdaFunctionUseVars",
		"lambdaFunctionUseVar", "qualifiedStaticTypeRef", "typeRef", "anonymousClass",
		"indirectTypeRef", "qualifiedNamespaceName", "namespaceNameList", "namespaceNameTail",
		"qualifiedNamespaceNameList", "arguments", "actualArgument", "argumentName",
		"constantInitializer", "constantString", "constant", "literalConstant",
		"numericConstant", "classConstant", "stringConstant", "string", "hereDocContent",
		"interpolatedStringPart", "chainList", "chain", "chainOrigin", "memberAccess",
		"functionCall", "functionCallName", "actualArguments", "chainBase",
		"keyedFieldName", "keyedSimpleFieldName", "keyedVariable", "squareCurlyExpression",
		"assignmentList", "assignmentListElement", "modifier", "identifier",
		"key", "memberModifier", "magicConstant", "magicMethod", "primitiveType",
		"castOperation",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 251, 2136, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2,
		122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7,
		126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2,
		131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7,
		135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2,
		140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7,
		144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2,
		149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7,
		153, 1, 0, 3, 0, 310, 8, 0, 1, 0, 5, 0, 313, 8, 0, 10, 0, 12, 0, 316, 9,
		0, 1, 0, 1, 0, 1, 1, 1, 1, 3, 1, 322, 8, 1, 1, 2, 4, 2, 325, 8, 2, 11,
		2, 12, 2, 326, 1, 2, 3, 2, 330, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 354, 8, 3, 10, 3, 12, 3, 357, 9, 3, 1,
		3, 3, 3, 360, 8, 3, 1, 4, 4, 4, 363, 8, 4, 11, 4, 12, 4, 364, 1, 5, 5,
		5, 368, 8, 5, 10, 5, 12, 5, 371, 9, 5, 1, 5, 4, 5, 374, 8, 5, 11, 5, 12,
		5, 375, 1, 5, 3, 5, 379, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 393, 8, 7, 1, 8, 1, 8, 3, 8, 397, 8,
		8, 1, 8, 1, 8, 1, 8, 1, 9, 3, 9, 403, 8, 9, 1, 9, 1, 9, 1, 9, 3, 9, 408,
		8, 9, 1, 9, 5, 9, 411, 8, 9, 10, 9, 12, 9, 414, 9, 9, 1, 10, 1, 10, 1,
		11, 1, 11, 3, 11, 420, 8, 11, 1, 11, 1, 11, 5, 11, 424, 8, 11, 10, 11,
		12, 11, 427, 9, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 433, 8, 11, 1, 12,
		1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 440, 8, 12, 1, 13, 3, 13, 443, 8, 13,
		1, 13, 1, 13, 3, 13, 447, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 3, 13, 455, 8, 13, 1, 13, 3, 13, 458, 8, 13, 1, 13, 1, 13, 1, 14, 3,
		14, 463, 8, 14, 1, 14, 3, 14, 466, 8, 14, 1, 14, 3, 14, 469, 8, 14, 1,
		14, 3, 14, 472, 8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 478, 8, 14, 1,
		14, 1, 14, 3, 14, 482, 8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 488, 8,
		14, 3, 14, 490, 8, 14, 1, 14, 1, 14, 5, 14, 494, 8, 14, 10, 14, 12, 14,
		497, 9, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 5, 16, 506,
		8, 16, 10, 16, 12, 16, 509, 9, 16, 1, 17, 1, 17, 1, 17, 5, 17, 514, 8,
		17, 10, 17, 12, 17, 517, 9, 17, 1, 18, 1, 18, 1, 18, 5, 18, 522, 8, 18,
		10, 18, 12, 18, 525, 9, 18, 1, 19, 3, 19, 528, 8, 19, 1, 19, 1, 19, 1,
		20, 3, 20, 533, 8, 20, 1, 20, 1, 20, 1, 20, 1, 20, 3, 20, 539, 8, 20, 1,
		21, 4, 21, 542, 8, 21, 11, 21, 12, 21, 543, 1, 22, 1, 22, 1, 22, 1, 22,
		3, 22, 550, 8, 22, 1, 22, 1, 22, 1, 22, 5, 22, 555, 8, 22, 10, 22, 12,
		22, 558, 9, 22, 1, 22, 1, 22, 1, 23, 1, 23, 3, 23, 564, 8, 23, 1, 24, 5,
		24, 567, 8, 24, 10, 24, 12, 24, 570, 9, 24, 1, 25, 1, 25, 1, 25, 3, 25,
		575, 8, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 605,
		8, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1,
		30, 5, 30, 617, 8, 30, 10, 30, 12, 30, 620, 9, 30, 1, 30, 3, 30, 623, 8,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 5, 30, 630, 8, 30, 10, 30, 12, 30,
		633, 9, 30, 1, 30, 3, 30, 636, 8, 30, 1, 30, 1, 30, 1, 30, 3, 30, 641,
		8, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1,
		33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35,
		1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 667, 8, 35, 1, 36, 1, 36, 1, 36, 1,
		36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 3, 37, 678, 8, 37, 1, 37, 1, 37,
		3, 37, 682, 8, 37, 1, 37, 1, 37, 3, 37, 686, 8, 37, 1, 37, 1, 37, 1, 37,
		1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 695, 8, 37, 1, 38, 1, 38, 1, 39, 1,
		39, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 705, 8, 40, 1, 40, 1, 40, 5, 40,
		709, 8, 40, 10, 40, 12, 40, 712, 9, 40, 1, 40, 1, 40, 1, 40, 3, 40, 717,
		8, 40, 1, 40, 1, 40, 5, 40, 721, 8, 40, 10, 40, 12, 40, 724, 9, 40, 1,
		40, 1, 40, 3, 40, 728, 8, 40, 1, 41, 1, 41, 1, 41, 1, 41, 5, 41, 734, 8,
		41, 10, 41, 12, 41, 737, 9, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 5, 42,
		744, 8, 42, 10, 42, 12, 42, 747, 9, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1,
		43, 3, 43, 754, 8, 43, 1, 43, 1, 43, 5, 43, 758, 8, 43, 10, 43, 12, 43,
		761, 9, 43, 4, 43, 763, 8, 43, 11, 43, 12, 43, 764, 1, 43, 1, 43, 1, 44,
		1, 44, 3, 44, 771, 8, 44, 1, 44, 1, 44, 1, 45, 1, 45, 3, 45, 777, 8, 45,
		1, 45, 1, 45, 1, 46, 1, 46, 3, 46, 783, 8, 46, 1, 46, 1, 46, 1, 47, 1,
		47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49,
		1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 807, 8,
		49, 1, 49, 1, 49, 1, 49, 3, 49, 812, 8, 49, 1, 49, 3, 49, 815, 8, 49, 1,
		49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 825, 8, 49,
		1, 49, 3, 49, 828, 8, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1,
		49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 841, 8, 49, 1, 49, 1, 49, 1, 49,
		1, 49, 1, 49, 1, 49, 3, 49, 849, 8, 49, 1, 50, 1, 50, 1, 50, 4, 50, 854,
		8, 50, 11, 50, 12, 50, 855, 1, 50, 3, 50, 859, 8, 50, 1, 50, 5, 50, 862,
		8, 50, 10, 50, 12, 50, 865, 9, 50, 1, 50, 3, 50, 868, 8, 50, 1, 51, 1,
		51, 1, 51, 1, 51, 1, 51, 5, 51, 875, 8, 51, 10, 51, 12, 51, 878, 9, 51,
		1, 51, 3, 51, 881, 8, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1,
		53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55,
		1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 3, 55, 907, 8, 55, 1,
		56, 4, 56, 910, 8, 56, 11, 56, 12, 56, 911, 1, 57, 1, 57, 1, 57, 5, 57,
		917, 8, 57, 10, 57, 12, 57, 920, 9, 57, 1, 58, 1, 58, 1, 58, 1, 58, 3,
		58, 926, 8, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 934, 8,
		58, 1, 59, 3, 59, 937, 8, 59, 1, 59, 1, 59, 5, 59, 941, 8, 59, 10, 59,
		12, 59, 944, 9, 59, 1, 59, 3, 59, 947, 8, 59, 1, 60, 3, 60, 950, 8, 60,
		1, 60, 5, 60, 953, 8, 60, 10, 60, 12, 60, 956, 9, 60, 1, 60, 3, 60, 959,
		8, 60, 1, 60, 3, 60, 962, 8, 60, 1, 60, 3, 60, 965, 8, 60, 1, 60, 3, 60,
		968, 8, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 976, 8, 61,
		1, 61, 1, 61, 1, 61, 5, 61, 981, 8, 61, 10, 61, 12, 61, 984, 9, 61, 1,
		62, 1, 62, 1, 62, 1, 62, 5, 62, 990, 8, 62, 10, 62, 12, 62, 993, 9, 62,
		1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 3,
		63, 1005, 8, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65,
		5, 65, 1015, 8, 65, 10, 65, 12, 65, 1018, 9, 65, 1, 65, 1, 65, 1, 66, 1,
		66, 1, 66, 1, 66, 1, 66, 3, 66, 1027, 8, 66, 1, 66, 1, 66, 3, 66, 1031,
		8, 66, 1, 66, 1, 66, 1, 66, 5, 66, 1036, 8, 66, 10, 66, 12, 66, 1039, 9,
		66, 1, 66, 1, 66, 1, 66, 3, 66, 1044, 8, 66, 1, 66, 3, 66, 1047, 8, 66,
		1, 66, 1, 66, 3, 66, 1051, 8, 66, 1, 66, 1, 66, 1, 66, 5, 66, 1056, 8,
		66, 10, 66, 12, 66, 1059, 9, 66, 1, 66, 1, 66, 1, 66, 3, 66, 1064, 8, 66,
		1, 66, 3, 66, 1067, 8, 66, 1, 66, 1, 66, 3, 66, 1071, 8, 66, 1, 66, 1,
		66, 1, 66, 1, 66, 1, 66, 1, 66, 3, 66, 1079, 8, 66, 1, 66, 1, 66, 3, 66,
		1083, 8, 66, 1, 67, 1, 67, 1, 67, 5, 67, 1088, 8, 67, 10, 67, 12, 67, 1091,
		9, 67, 1, 67, 3, 67, 1094, 8, 67, 1, 68, 1, 68, 3, 68, 1098, 8, 68, 1,
		69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 70,
		3, 70, 1111, 8, 70, 1, 70, 3, 70, 1114, 8, 70, 1, 70, 1, 70, 1, 71, 1,
		71, 1, 71, 3, 71, 1121, 8, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 72, 3, 72,
		1128, 8, 72, 1, 73, 1, 73, 3, 73, 1132, 8, 73, 1, 73, 1, 73, 1, 74, 1,
		74, 3, 74, 1138, 8, 74, 1, 75, 1, 75, 3, 75, 1142, 8, 75, 1, 76, 4, 76,
		1145, 8, 76, 11, 76, 12, 76, 1146, 1, 77, 1, 77, 1, 77, 3, 77, 1152, 8,
		77, 1, 78, 1, 78, 1, 78, 1, 78, 1, 79, 3, 79, 1159, 8, 79, 1, 79, 1, 79,
		1, 79, 1, 79, 5, 79, 1165, 8, 79, 10, 79, 12, 79, 1168, 9, 79, 1, 79, 1,
		79, 1, 80, 1, 80, 1, 80, 1, 80, 3, 80, 1176, 8, 80, 1, 80, 1, 80, 3, 80,
		1180, 8, 80, 1, 80, 1, 80, 5, 80, 1184, 8, 80, 10, 80, 12, 80, 1187, 9,
		80, 1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 1195, 8, 81, 1, 81,
		1, 81, 1, 81, 3, 81, 1200, 8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3,
		81, 1207, 8, 81, 1, 82, 1, 82, 1, 82, 5, 82, 1212, 8, 82, 10, 82, 12, 82,
		1215, 9, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 84, 3, 84, 1222, 8, 84, 1,
		84, 1, 84, 1, 84, 1, 84, 1, 84, 5, 84, 1229, 8, 84, 10, 84, 12, 84, 1232,
		9, 84, 1, 84, 1, 84, 1, 85, 1, 85, 3, 85, 1238, 8, 85, 1, 86, 1, 86, 1,
		86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86,
		1, 86, 1, 86, 1, 86, 3, 86, 1256, 8, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1,
		87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87,
		1, 87, 3, 87, 1274, 8, 87, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1,
		88, 3, 88, 1283, 8, 88, 1, 89, 1, 89, 1, 89, 3, 89, 1288, 8, 89, 1, 90,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 3, 90, 1299, 8,
		90, 1, 90, 1, 90, 3, 90, 1303, 8, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1,
		90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1,
		90, 3, 90, 1342, 8, 90, 1, 90, 3, 90, 1345, 8, 90, 1, 90, 1, 90, 1, 90,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1,
		90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1,
		90, 1, 90, 1, 90, 1, 90, 3, 90, 1385, 8, 90, 1, 90, 1, 90, 1, 90, 1, 90,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1,
		90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1,
		90, 3, 90, 1423, 8, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1,
		90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 3, 90,
		1452, 8, 90, 1, 90, 1, 90, 3, 90, 1456, 8, 90, 1, 90, 1, 90, 1, 90, 1,
		90, 1, 90, 1, 90, 5, 90, 1464, 8, 90, 10, 90, 12, 90, 1467, 9, 90, 1, 91,
		1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1475, 8, 91, 1, 91, 1, 91, 1,
		91, 1, 91, 3, 91, 1481, 8, 91, 1, 91, 1, 91, 1, 91, 1, 91, 5, 91, 1487,
		8, 91, 10, 91, 12, 91, 1490, 9, 91, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92,
		1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 92, 1504, 8, 92, 1,
		93, 1, 93, 4, 93, 1508, 8, 93, 11, 93, 12, 93, 1509, 1, 93, 1, 93, 4, 93,
		1514, 8, 93, 11, 93, 12, 93, 1515, 1, 93, 1, 93, 1, 93, 1, 93, 3, 93, 1522,
		8, 93, 1, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 3, 95, 1530, 8, 95, 1,
		95, 1, 95, 1, 95, 3, 95, 1535, 8, 95, 1, 96, 1, 96, 3, 96, 1539, 8, 96,
		1, 97, 1, 97, 1, 97, 3, 97, 1544, 8, 97, 1, 97, 1, 97, 1, 97, 1, 97, 3,
		97, 1550, 8, 97, 1, 97, 1, 97, 1, 97, 3, 97, 1555, 8, 97, 1, 97, 3, 97,
		1558, 8, 97, 1, 98, 1, 98, 5, 98, 1562, 8, 98, 10, 98, 12, 98, 1565, 9,
		98, 1, 98, 1, 98, 4, 98, 1569, 8, 98, 11, 98, 12, 98, 1570, 1, 98, 5, 98,
		1574, 8, 98, 10, 98, 12, 98, 1577, 9, 98, 1, 98, 5, 98, 1580, 8, 98, 10,
		98, 12, 98, 1583, 9, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 4, 98, 1590,
		8, 98, 11, 98, 12, 98, 1591, 1, 98, 5, 98, 1595, 8, 98, 10, 98, 12, 98,
		1598, 9, 98, 1, 98, 3, 98, 1601, 8, 98, 1, 98, 1, 98, 3, 98, 1605, 8, 98,
		1, 99, 3, 99, 1608, 8, 99, 1, 99, 1, 99, 1, 100, 1, 100, 1, 100, 3, 100,
		1615, 8, 100, 1, 100, 3, 100, 1618, 8, 100, 1, 100, 1, 100, 1, 101, 3,
		101, 1623, 8, 101, 1, 101, 1, 101, 3, 101, 1627, 8, 101, 1, 101, 1, 101,
		1, 101, 1, 101, 3, 101, 1633, 8, 101, 1, 101, 1, 101, 3, 101, 1637, 8,
		101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1,
		101, 3, 101, 1648, 8, 101, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102,
		1, 102, 1, 102, 5, 102, 1658, 8, 102, 10, 102, 12, 102, 1661, 9, 102, 1,
		102, 3, 102, 1664, 8, 102, 1, 102, 1, 102, 1, 103, 1, 103, 1, 103, 5, 103,
		1671, 8, 103, 10, 103, 12, 103, 1674, 9, 103, 1, 103, 1, 103, 1, 103, 1,
		104, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 1684, 8, 104, 3, 104, 1686,
		8, 104, 1, 105, 1, 105, 1, 106, 1, 106, 1, 106, 1, 106, 3, 106, 1694, 8,
		106, 1, 106, 1, 106, 3, 106, 1698, 8, 106, 1, 107, 1, 107, 1, 107, 5, 107,
		1703, 8, 107, 10, 107, 12, 107, 1706, 9, 107, 1, 107, 3, 107, 1709, 8,
		107, 1, 108, 1, 108, 1, 108, 3, 108, 1714, 8, 108, 1, 108, 1, 108, 1, 108,
		3, 108, 1719, 8, 108, 1, 108, 1, 108, 3, 108, 1723, 8, 108, 1, 109, 1,
		109, 1, 109, 1, 109, 1, 109, 5, 109, 1730, 8, 109, 10, 109, 12, 109, 1733,
		9, 109, 1, 109, 1, 109, 1, 110, 3, 110, 1738, 8, 110, 1, 110, 1, 110, 1,
		111, 1, 111, 3, 111, 1744, 8, 111, 1, 112, 1, 112, 3, 112, 1748, 8, 112,
		1, 112, 1, 112, 1, 112, 3, 112, 1753, 8, 112, 1, 113, 3, 113, 1756, 8,
		113, 1, 113, 3, 113, 1759, 8, 113, 1, 113, 3, 113, 1762, 8, 113, 1, 113,
		3, 113, 1765, 8, 113, 1, 113, 1, 113, 1, 113, 3, 113, 1770, 8, 113, 1,
		113, 1, 113, 3, 113, 1774, 8, 113, 1, 113, 1, 113, 1, 113, 1, 113, 3, 113,
		1780, 8, 113, 3, 113, 1782, 8, 113, 1, 113, 3, 113, 1785, 8, 113, 1, 113,
		1, 113, 5, 113, 1789, 8, 113, 10, 113, 12, 113, 1792, 9, 113, 1, 113, 1,
		113, 1, 114, 1, 114, 1, 114, 5, 114, 1799, 8, 114, 10, 114, 12, 114, 1802,
		9, 114, 1, 115, 3, 115, 1805, 8, 115, 1, 115, 3, 115, 1808, 8, 115, 1,
		115, 1, 115, 1, 116, 1, 116, 1, 116, 1, 116, 4, 116, 1816, 8, 116, 11,
		116, 12, 116, 1817, 1, 116, 1, 116, 3, 116, 1822, 8, 116, 3, 116, 1824,
		8, 116, 1, 117, 1, 117, 1, 117, 3, 117, 1829, 8, 117, 1, 117, 1, 117, 1,
		117, 1, 117, 5, 117, 1835, 8, 117, 10, 117, 12, 117, 1838, 9, 117, 1, 117,
		3, 117, 1841, 8, 117, 1, 117, 1, 117, 3, 117, 1845, 8, 117, 1, 118, 1,
		118, 1, 118, 5, 118, 1850, 8, 118, 10, 118, 12, 118, 1853, 9, 118, 1, 119,
		1, 119, 3, 119, 1857, 8, 119, 1, 119, 1, 119, 5, 119, 1861, 8, 119, 10,
		119, 12, 119, 1864, 9, 119, 1, 119, 3, 119, 1867, 8, 119, 1, 119, 1, 119,
		1, 120, 3, 120, 1872, 8, 120, 1, 120, 3, 120, 1875, 8, 120, 1, 120, 1,
		120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 3, 120, 1884, 8, 120, 1, 121,
		1, 121, 1, 121, 1, 122, 1, 122, 1, 122, 5, 122, 1892, 8, 122, 10, 122,
		12, 122, 1895, 9, 122, 1, 122, 1, 122, 1, 122, 1, 122, 3, 122, 1901, 8,
		122, 3, 122, 1903, 8, 122, 1, 122, 1, 122, 1, 122, 1, 122, 3, 122, 1909,
		8, 122, 3, 122, 1911, 8, 122, 1, 122, 1, 122, 1, 122, 1, 122, 3, 122, 1917,
		8, 122, 1, 123, 1, 123, 3, 123, 1921, 8, 123, 1, 124, 1, 124, 1, 124, 3,
		124, 1926, 8, 124, 1, 125, 1, 125, 1, 125, 1, 125, 3, 125, 1932, 8, 125,
		1, 126, 1, 126, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 3, 127,
		1942, 8, 127, 1, 127, 1, 127, 1, 127, 3, 127, 1947, 8, 127, 1, 127, 1,
		127, 1, 127, 3, 127, 1952, 8, 127, 3, 127, 1954, 8, 127, 1, 128, 1, 128,
		1, 129, 1, 129, 1, 129, 1, 129, 3, 129, 1962, 8, 129, 1, 129, 1, 129, 1,
		129, 1, 129, 5, 129, 1968, 8, 129, 10, 129, 12, 129, 1971, 9, 129, 1, 129,
		3, 129, 1974, 8, 129, 1, 130, 4, 130, 1977, 8, 130, 11, 130, 12, 130, 1978,
		1, 131, 1, 131, 1, 131, 3, 131, 1984, 8, 131, 1, 132, 1, 132, 1, 132, 5,
		132, 1989, 8, 132, 10, 132, 12, 132, 1992, 9, 132, 1, 133, 1, 133, 5, 133,
		1996, 8, 133, 10, 133, 12, 133, 1999, 9, 133, 1, 133, 3, 133, 2002, 8,
		133, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 3, 134, 2010, 8, 134,
		1, 135, 1, 135, 1, 135, 3, 135, 2015, 8, 135, 1, 136, 1, 136, 1, 136, 1,
		137, 1, 137, 1, 137, 1, 137, 1, 137, 3, 137, 2025, 8, 137, 1, 138, 4, 138,
		2028, 8, 138, 11, 138, 12, 138, 2029, 1, 138, 5, 138, 2033, 8, 138, 10,
		138, 12, 138, 2036, 9, 138, 1, 139, 1, 139, 1, 139, 3, 139, 2041, 8, 139,
		1, 139, 1, 139, 1, 139, 1, 139, 3, 139, 2047, 8, 139, 1, 140, 1, 140, 3,
		140, 2051, 8, 140, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 3, 141, 2058,
		8, 141, 1, 141, 5, 141, 2061, 8, 141, 10, 141, 12, 141, 2064, 9, 141, 1,
		142, 5, 142, 2067, 8, 142, 10, 142, 12, 142, 2070, 9, 142, 1, 142, 1, 142,
		1, 142, 1, 142, 1, 142, 1, 142, 3, 142, 2078, 8, 142, 1, 142, 5, 142, 2081,
		8, 142, 10, 142, 12, 142, 2084, 9, 142, 1, 143, 1, 143, 3, 143, 2088, 8,
		143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 3, 143, 2095, 8, 143, 1, 144,
		3, 144, 2098, 8, 144, 1, 144, 1, 144, 3, 144, 2102, 8, 144, 5, 144, 2104,
		8, 144, 10, 144, 12, 144, 2107, 9, 144, 1, 145, 1, 145, 1, 145, 1, 145,
		1, 145, 1, 145, 1, 145, 3, 145, 2116, 8, 145, 1, 146, 1, 146, 1, 147, 1,
		147, 3, 147, 2122, 8, 147, 1, 148, 1, 148, 1, 149, 1, 149, 1, 150, 1, 150,
		1, 151, 1, 151, 1, 152, 1, 152, 1, 153, 1, 153, 1, 153, 0, 3, 122, 180,
		182, 154, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32,
		34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68,
		70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104,
		106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134,
		136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164,
		166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194,
		196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224,
		226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254,
		256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284,
		286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 0, 27, 2, 0, 38,
		38, 243, 243, 2, 0, 56, 56, 86, 86, 2, 0, 54, 54, 126, 126, 1, 0, 222,
		223, 2, 0, 99, 99, 123, 123, 1, 0, 78, 79, 1, 0, 76, 77, 1, 0, 210, 211,
		2, 0, 203, 203, 205, 206, 1, 0, 167, 168, 1, 0, 207, 209, 2, 0, 205, 206,
		213, 213, 1, 0, 193, 194, 2, 0, 173, 174, 199, 200, 1, 0, 169, 172, 2,
		0, 92, 93, 118, 119, 4, 0, 175, 177, 179, 187, 191, 191, 224, 224, 1, 0,
		205, 206, 2, 0, 230, 231, 233, 234, 2, 0, 54, 54, 111, 111, 2, 0, 44, 44,
		81, 81, 8, 0, 44, 57, 60, 75, 80, 91, 94, 100, 102, 117, 120, 124, 126,
		130, 132, 164, 4, 0, 44, 44, 81, 81, 114, 117, 122, 122, 1, 0, 157, 164,
		1, 0, 141, 156, 7, 0, 45, 45, 48, 48, 64, 64, 98, 99, 110, 110, 120, 120,
		123, 123, 9, 0, 45, 45, 47, 48, 63, 64, 83, 83, 96, 99, 110, 110, 120,
		120, 123, 123, 129, 131, 2390, 0, 309, 1, 0, 0, 0, 2, 321, 1, 0, 0, 0,
		4, 329, 1, 0, 0, 0, 6, 359, 1, 0, 0, 0, 8, 362, 1, 0, 0, 0, 10, 369, 1,
		0, 0, 0, 12, 380, 1, 0, 0, 0, 14, 392, 1, 0, 0, 0, 16, 394, 1, 0, 0, 0,
		18, 402, 1, 0, 0, 0, 20, 415, 1, 0, 0, 0, 22, 417, 1, 0, 0, 0, 24, 439,
		1, 0, 0, 0, 26, 442, 1, 0, 0, 0, 28, 462, 1, 0, 0, 0, 30, 500, 1, 0, 0,
		0, 32, 502, 1, 0, 0, 0, 34, 510, 1, 0, 0, 0, 36, 518, 1, 0, 0, 0, 38, 527,
		1, 0, 0, 0, 40, 532, 1, 0, 0, 0, 42, 541, 1, 0, 0, 0, 44, 545, 1, 0, 0,
		0, 46, 561, 1, 0, 0, 0, 48, 568, 1, 0, 0, 0, 50, 574, 1, 0, 0, 0, 52, 576,
		1, 0, 0, 0, 54, 604, 1, 0, 0, 0, 56, 606, 1, 0, 0, 0, 58, 608, 1, 0, 0,
		0, 60, 640, 1, 0, 0, 0, 62, 642, 1, 0, 0, 0, 64, 646, 1, 0, 0, 0, 66, 651,
		1, 0, 0, 0, 68, 654, 1, 0, 0, 0, 70, 658, 1, 0, 0, 0, 72, 668, 1, 0, 0,
		0, 74, 674, 1, 0, 0, 0, 76, 696, 1, 0, 0, 0, 78, 698, 1, 0, 0, 0, 80, 700,
		1, 0, 0, 0, 82, 729, 1, 0, 0, 0, 84, 740, 1, 0, 0, 0, 86, 762, 1, 0, 0,
		0, 88, 768, 1, 0, 0, 0, 90, 774, 1, 0, 0, 0, 92, 780, 1, 0, 0, 0, 94, 786,
		1, 0, 0, 0, 96, 789, 1, 0, 0, 0, 98, 795, 1, 0, 0, 0, 100, 850, 1, 0, 0,
		0, 102, 869, 1, 0, 0, 0, 104, 885, 1, 0, 0, 0, 106, 888, 1, 0, 0, 0, 108,
		892, 1, 0, 0, 0, 110, 896, 1, 0, 0, 0, 112, 909, 1, 0, 0, 0, 114, 913,
		1, 0, 0, 0, 116, 933, 1, 0, 0, 0, 118, 936, 1, 0, 0, 0, 120, 949, 1, 0,
		0, 0, 122, 975, 1, 0, 0, 0, 124, 985, 1, 0, 0, 0, 126, 1004, 1, 0, 0, 0,
		128, 1006, 1, 0, 0, 0, 130, 1010, 1, 0, 0, 0, 132, 1082, 1, 0, 0, 0, 134,
		1093, 1, 0, 0, 0, 136, 1097, 1, 0, 0, 0, 138, 1099, 1, 0, 0, 0, 140, 1106,
		1, 0, 0, 0, 142, 1120, 1, 0, 0, 0, 144, 1124, 1, 0, 0, 0, 146, 1129, 1,
		0, 0, 0, 148, 1137, 1, 0, 0, 0, 150, 1141, 1, 0, 0, 0, 152, 1144, 1, 0,
		0, 0, 154, 1148, 1, 0, 0, 0, 156, 1153, 1, 0, 0, 0, 158, 1158, 1, 0, 0,
		0, 160, 1171, 1, 0, 0, 0, 162, 1206, 1, 0, 0, 0, 164, 1208, 1, 0, 0, 0,
		166, 1216, 1, 0, 0, 0, 168, 1221, 1, 0, 0, 0, 170, 1237, 1, 0, 0, 0, 172,
		1255, 1, 0, 0, 0, 174, 1273, 1, 0, 0, 0, 176, 1282, 1, 0, 0, 0, 178, 1287,
		1, 0, 0, 0, 180, 1384, 1, 0, 0, 0, 182, 1468, 1, 0, 0, 0, 184, 1503, 1,
		0, 0, 0, 186, 1521, 1, 0, 0, 0, 188, 1523, 1, 0, 0, 0, 190, 1534, 1, 0,
		0, 0, 192, 1538, 1, 0, 0, 0, 194, 1557, 1, 0, 0, 0, 196, 1604, 1, 0, 0,
		0, 198, 1607, 1, 0, 0, 0, 200, 1614, 1, 0, 0, 0, 202, 1647, 1, 0, 0, 0,
		204, 1649, 1, 0, 0, 0, 206, 1667, 1, 0, 0, 0, 208, 1685, 1, 0, 0, 0, 210,
		1687, 1, 0, 0, 0, 212, 1689, 1, 0, 0, 0, 214, 1699, 1, 0, 0, 0, 216, 1722,
		1, 0, 0, 0, 218, 1724, 1, 0, 0, 0, 220, 1737, 1, 0, 0, 0, 222, 1743, 1,
		0, 0, 0, 224, 1752, 1, 0, 0, 0, 226, 1755, 1, 0, 0, 0, 228, 1795, 1, 0,
		0, 0, 230, 1804, 1, 0, 0, 0, 232, 1823, 1, 0, 0, 0, 234, 1844, 1, 0, 0,
		0, 236, 1846, 1, 0, 0, 0, 238, 1854, 1, 0, 0, 0, 240, 1883, 1, 0, 0, 0,
		242, 1885, 1, 0, 0, 0, 244, 1916, 1, 0, 0, 0, 246, 1920, 1, 0, 0, 0, 248,
		1925, 1, 0, 0, 0, 250, 1931, 1, 0, 0, 0, 252, 1933, 1, 0, 0, 0, 254, 1953,
		1, 0, 0, 0, 256, 1955, 1, 0, 0, 0, 258, 1973, 1, 0, 0, 0, 260, 1976, 1,
		0, 0, 0, 262, 1983, 1, 0, 0, 0, 264, 1985, 1, 0, 0, 0, 266, 2001, 1, 0,
		0, 0, 268, 2009, 1, 0, 0, 0, 270, 2011, 1, 0, 0, 0, 272, 2016, 1, 0, 0,
		0, 274, 2024, 1, 0, 0, 0, 276, 2027, 1, 0, 0, 0, 278, 2046, 1, 0, 0, 0,
		280, 2050, 1, 0, 0, 0, 282, 2057, 1, 0, 0, 0, 284, 2068, 1, 0, 0, 0, 286,
		2094, 1, 0, 0, 0, 288, 2097, 1, 0, 0, 0, 290, 2115, 1, 0, 0, 0, 292, 2117,
		1, 0, 0, 0, 294, 2121, 1, 0, 0, 0, 296, 2123, 1, 0, 0, 0, 298, 2125, 1,
		0, 0, 0, 300, 2127, 1, 0, 0, 0, 302, 2129, 1, 0, 0, 0, 304, 2131, 1, 0,
		0, 0, 306, 2133, 1, 0, 0, 0, 308, 310, 5, 10, 0, 0, 309, 308, 1, 0, 0,
		0, 309, 310, 1, 0, 0, 0, 310, 314, 1, 0, 0, 0, 311, 313, 3, 2, 1, 0, 312,
		311, 1, 0, 0, 0, 313, 316, 1, 0, 0, 0, 314, 312, 1, 0, 0, 0, 314, 315,
		1, 0, 0, 0, 315, 317, 1, 0, 0, 0, 316, 314, 1, 0, 0, 0, 317, 318, 5, 0,
		0, 1, 318, 1, 1, 0, 0, 0, 319, 322, 3, 4, 2, 0, 320, 322, 3, 10, 5, 0,
		321, 319, 1, 0, 0, 0, 321, 320, 1, 0, 0, 0, 322, 3, 1, 0, 0, 0, 323, 325,
		3, 6, 3, 0, 324, 323, 1, 0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 324, 1, 0,
		0, 0, 326, 327, 1, 0, 0, 0, 327, 330, 1, 0, 0, 0, 328, 330, 3, 8, 4, 0,
		329, 324, 1, 0, 0, 0, 329, 328, 1, 0, 0, 0, 330, 5, 1, 0, 0, 0, 331, 360,
		5, 8, 0, 0, 332, 360, 5, 15, 0, 0, 333, 360, 5, 6, 0, 0, 334, 360, 5, 9,
		0, 0, 335, 360, 5, 24, 0, 0, 336, 360, 5, 16, 0, 0, 337, 360, 5, 17, 0,
		0, 338, 360, 5, 2, 0, 0, 339, 360, 5, 18, 0, 0, 340, 360, 5, 19, 0, 0,
		341, 360, 5, 27, 0, 0, 342, 360, 5, 20, 0, 0, 343, 360, 5, 31, 0, 0, 344,
		360, 5, 21, 0, 0, 345, 360, 5, 22, 0, 0, 346, 360, 5, 28, 0, 0, 347, 360,
		5, 32, 0, 0, 348, 360, 5, 37, 0, 0, 349, 360, 5, 5, 0, 0, 350, 360, 5,
		35, 0, 0, 351, 355, 5, 3, 0, 0, 352, 354, 5, 12, 0, 0, 353, 352, 1, 0,
		0, 0, 354, 357, 1, 0, 0, 0, 355, 353, 1, 0, 0, 0, 355, 356, 1, 0, 0, 0,
		356, 358, 1, 0, 0, 0, 357, 355, 1, 0, 0, 0, 358, 360, 5, 13, 0, 0, 359,
		331, 1, 0, 0, 0, 359, 332, 1, 0, 0, 0, 359, 333, 1, 0, 0, 0, 359, 334,
		1, 0, 0, 0, 359, 335, 1, 0, 0, 0, 359, 336, 1, 0, 0, 0, 359, 337, 1, 0,
		0, 0, 359, 338, 1, 0, 0, 0, 359, 339, 1, 0, 0, 0, 359, 340, 1, 0, 0, 0,
		359, 341, 1, 0, 0, 0, 359, 342, 1, 0, 0, 0, 359, 343, 1, 0, 0, 0, 359,
		344, 1, 0, 0, 0, 359, 345, 1, 0, 0, 0, 359, 346, 1, 0, 0, 0, 359, 347,
		1, 0, 0, 0, 359, 348, 1, 0, 0, 0, 359, 349, 1, 0, 0, 0, 359, 350, 1, 0,
		0, 0, 359, 351, 1, 0, 0, 0, 360, 7, 1, 0, 0, 0, 361, 363, 5, 34, 0, 0,
		362, 361, 1, 0, 0, 0, 363, 364, 1, 0, 0, 0, 364, 362, 1, 0, 0, 0, 364,
		365, 1, 0, 0, 0, 365, 9, 1, 0, 0, 0, 366, 368, 3, 12, 6, 0, 367, 366, 1,
		0, 0, 0, 368, 371, 1, 0, 0, 0, 369, 367, 1, 0, 0, 0, 369, 370, 1, 0, 0,
		0, 370, 373, 1, 0, 0, 0, 371, 369, 1, 0, 0, 0, 372, 374, 3, 14, 7, 0, 373,
		372, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0, 375, 373, 1, 0, 0, 0, 375, 376,
		1, 0, 0, 0, 376, 378, 1, 0, 0, 0, 377, 379, 7, 0, 0, 0, 378, 377, 1, 0,
		0, 0, 378, 379, 1, 0, 0, 0, 379, 11, 1, 0, 0, 0, 380, 381, 5, 91, 0, 0,
		381, 382, 5, 107, 0, 0, 382, 383, 3, 232, 116, 0, 383, 384, 5, 223, 0,
		0, 384, 13, 1, 0, 0, 0, 385, 393, 3, 54, 27, 0, 386, 393, 3, 16, 8, 0,
		387, 393, 3, 22, 11, 0, 388, 393, 3, 26, 13, 0, 389, 393, 3, 28, 14, 0,
		390, 393, 3, 158, 79, 0, 391, 393, 3, 160, 80, 0, 392, 385, 1, 0, 0, 0,
		392, 386, 1, 0, 0, 0, 392, 387, 1, 0, 0, 0, 392, 388, 1, 0, 0, 0, 392,
		389, 1, 0, 0, 0, 392, 390, 1, 0, 0, 0, 392, 391, 1, 0, 0, 0, 393, 15, 1,
		0, 0, 0, 394, 396, 5, 132, 0, 0, 395, 397, 7, 1, 0, 0, 396, 395, 1, 0,
		0, 0, 396, 397, 1, 0, 0, 0, 397, 398, 1, 0, 0, 0, 398, 399, 3, 18, 9, 0,
		399, 400, 5, 223, 0, 0, 400, 17, 1, 0, 0, 0, 401, 403, 5, 197, 0, 0, 402,
		401, 1, 0, 0, 0, 402, 403, 1, 0, 0, 0, 403, 404, 1, 0, 0, 0, 404, 412,
		3, 20, 10, 0, 405, 407, 5, 221, 0, 0, 406, 408, 5, 197, 0, 0, 407, 406,
		1, 0, 0, 0, 407, 408, 1, 0, 0, 0, 408, 409, 1, 0, 0, 0, 409, 411, 3, 20,
		10, 0, 410, 405, 1, 0, 0, 0, 411, 414, 1, 0, 0, 0, 412, 410, 1, 0, 0, 0,
		412, 413, 1, 0, 0, 0, 413, 19, 1, 0, 0, 0, 414, 412, 1, 0, 0, 0, 415, 416,
		3, 232, 116, 0, 416, 21, 1, 0, 0, 0, 417, 432, 5, 107, 0, 0, 418, 420,
		3, 232, 116, 0, 419, 418, 1, 0, 0, 0, 419, 420, 1, 0, 0, 0, 420, 421, 1,
		0, 0, 0, 421, 425, 5, 219, 0, 0, 422, 424, 3, 24, 12, 0, 423, 422, 1, 0,
		0, 0, 424, 427, 1, 0, 0, 0, 425, 423, 1, 0, 0, 0, 425, 426, 1, 0, 0, 0,
		426, 428, 1, 0, 0, 0, 427, 425, 1, 0, 0, 0, 428, 433, 5, 220, 0, 0, 429,
		430, 3, 232, 116, 0, 430, 431, 5, 223, 0, 0, 431, 433, 1, 0, 0, 0, 432,
		419, 1, 0, 0, 0, 432, 429, 1, 0, 0, 0, 433, 23, 1, 0, 0, 0, 434, 440, 3,
		54, 27, 0, 435, 440, 3, 16, 8, 0, 436, 440, 3, 26, 13, 0, 437, 440, 3,
		28, 14, 0, 438, 440, 3, 158, 79, 0, 439, 434, 1, 0, 0, 0, 439, 435, 1,
		0, 0, 0, 439, 436, 1, 0, 0, 0, 439, 437, 1, 0, 0, 0, 439, 438, 1, 0, 0,
		0, 440, 25, 1, 0, 0, 0, 441, 443, 3, 42, 21, 0, 442, 441, 1, 0, 0, 0, 442,
		443, 1, 0, 0, 0, 443, 444, 1, 0, 0, 0, 444, 446, 5, 86, 0, 0, 445, 447,
		5, 201, 0, 0, 446, 445, 1, 0, 0, 0, 446, 447, 1, 0, 0, 0, 447, 448, 1,
		0, 0, 0, 448, 449, 3, 294, 147, 0, 449, 450, 5, 215, 0, 0, 450, 451, 3,
		118, 59, 0, 451, 457, 5, 216, 0, 0, 452, 454, 5, 222, 0, 0, 453, 455, 5,
		214, 0, 0, 454, 453, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 456, 1, 0,
		0, 0, 456, 458, 3, 122, 61, 0, 457, 452, 1, 0, 0, 0, 457, 458, 1, 0, 0,
		0, 458, 459, 1, 0, 0, 0, 459, 460, 3, 58, 29, 0, 460, 27, 1, 0, 0, 0, 461,
		463, 3, 42, 21, 0, 462, 461, 1, 0, 0, 0, 462, 463, 1, 0, 0, 0, 463, 465,
		1, 0, 0, 0, 464, 466, 5, 114, 0, 0, 465, 464, 1, 0, 0, 0, 465, 466, 1,
		0, 0, 0, 466, 468, 1, 0, 0, 0, 467, 469, 3, 292, 146, 0, 468, 467, 1, 0,
		0, 0, 468, 469, 1, 0, 0, 0, 469, 471, 1, 0, 0, 0, 470, 472, 5, 112, 0,
		0, 471, 470, 1, 0, 0, 0, 471, 472, 1, 0, 0, 0, 472, 489, 1, 0, 0, 0, 473,
		474, 3, 30, 15, 0, 474, 477, 3, 294, 147, 0, 475, 476, 5, 80, 0, 0, 476,
		478, 3, 222, 111, 0, 477, 475, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 481,
		1, 0, 0, 0, 479, 480, 5, 90, 0, 0, 480, 482, 3, 32, 16, 0, 481, 479, 1,
		0, 0, 0, 481, 482, 1, 0, 0, 0, 482, 490, 1, 0, 0, 0, 483, 484, 5, 100,
		0, 0, 484, 487, 3, 294, 147, 0, 485, 486, 5, 80, 0, 0, 486, 488, 3, 32,
		16, 0, 487, 485, 1, 0, 0, 0, 487, 488, 1, 0, 0, 0, 488, 490, 1, 0, 0, 0,
		489, 473, 1, 0, 0, 0, 489, 483, 1, 0, 0, 0, 490, 491, 1, 0, 0, 0, 491,
		495, 5, 219, 0, 0, 492, 494, 3, 132, 66, 0, 493, 492, 1, 0, 0, 0, 494,
		497, 1, 0, 0, 0, 495, 493, 1, 0, 0, 0, 495, 496, 1, 0, 0, 0, 496, 498,
		1, 0, 0, 0, 497, 495, 1, 0, 0, 0, 498, 499, 5, 220, 0, 0, 499, 29, 1, 0,
		0, 0, 500, 501, 7, 2, 0, 0, 501, 31, 1, 0, 0, 0, 502, 507, 3, 222, 111,
		0, 503, 504, 5, 221, 0, 0, 504, 506, 3, 222, 111, 0, 505, 503, 1, 0, 0,
		0, 506, 509, 1, 0, 0, 0, 507, 505, 1, 0, 0, 0, 507, 508, 1, 0, 0, 0, 508,
		33, 1, 0, 0, 0, 509, 507, 1, 0, 0, 0, 510, 515, 3, 38, 19, 0, 511, 512,
		5, 221, 0, 0, 512, 514, 3, 38, 19, 0, 513, 511, 1, 0, 0, 0, 514, 517, 1,
		0, 0, 0, 515, 513, 1, 0, 0, 0, 515, 516, 1, 0, 0, 0, 516, 35, 1, 0, 0,
		0, 517, 515, 1, 0, 0, 0, 518, 523, 3, 40, 20, 0, 519, 520, 5, 221, 0, 0,
		520, 522, 3, 40, 20, 0, 521, 519, 1, 0, 0, 0, 522, 525, 1, 0, 0, 0, 523,
		521, 1, 0, 0, 0, 523, 524, 1, 0, 0, 0, 524, 37, 1, 0, 0, 0, 525, 523, 1,
		0, 0, 0, 526, 528, 3, 42, 21, 0, 527, 526, 1, 0, 0, 0, 527, 528, 1, 0,
		0, 0, 528, 529, 1, 0, 0, 0, 529, 530, 3, 294, 147, 0, 530, 39, 1, 0, 0,
		0, 531, 533, 3, 42, 21, 0, 532, 531, 1, 0, 0, 0, 532, 533, 1, 0, 0, 0,
		533, 534, 1, 0, 0, 0, 534, 535, 3, 294, 147, 0, 535, 538, 5, 224, 0, 0,
		536, 539, 3, 222, 111, 0, 537, 539, 3, 304, 152, 0, 538, 536, 1, 0, 0,
		0, 538, 537, 1, 0, 0, 0, 539, 41, 1, 0, 0, 0, 540, 542, 3, 44, 22, 0, 541,
		540, 1, 0, 0, 0, 542, 543, 1, 0, 0, 0, 543, 541, 1, 0, 0, 0, 543, 544,
		1, 0, 0, 0, 544, 43, 1, 0, 0, 0, 545, 549, 5, 43, 0, 0, 546, 547, 3, 294,
		147, 0, 547, 548, 5, 222, 0, 0, 548, 550, 1, 0, 0, 0, 549, 546, 1, 0, 0,
		0, 549, 550, 1, 0, 0, 0, 550, 551, 1, 0, 0, 0, 551, 556, 3, 46, 23, 0,
		552, 553, 5, 221, 0, 0, 553, 555, 3, 46, 23, 0, 554, 552, 1, 0, 0, 0, 555,
		558, 1, 0, 0, 0, 556, 554, 1, 0, 0, 0, 556, 557, 1, 0, 0, 0, 557, 559,
		1, 0, 0, 0, 558, 556, 1, 0, 0, 0, 559, 560, 5, 218, 0, 0, 560, 45, 1, 0,
		0, 0, 561, 563, 3, 230, 115, 0, 562, 564, 3, 238, 119, 0, 563, 562, 1,
		0, 0, 0, 563, 564, 1, 0, 0, 0, 564, 47, 1, 0, 0, 0, 565, 567, 3, 50, 25,
		0, 566, 565, 1, 0, 0, 0, 567, 570, 1, 0, 0, 0, 568, 566, 1, 0, 0, 0, 568,
		569, 1, 0, 0, 0, 569, 49, 1, 0, 0, 0, 570, 568, 1, 0, 0, 0, 571, 575, 3,
		54, 27, 0, 572, 575, 3, 26, 13, 0, 573, 575, 3, 28, 14, 0, 574, 571, 1,
		0, 0, 0, 574, 572, 1, 0, 0, 0, 574, 573, 1, 0, 0, 0, 575, 51, 1, 0, 0,
		0, 576, 577, 5, 229, 0, 0, 577, 578, 5, 222, 0, 0, 578, 53, 1, 0, 0, 0,
		579, 605, 3, 52, 26, 0, 580, 605, 3, 58, 29, 0, 581, 605, 3, 60, 30, 0,
		582, 605, 3, 70, 35, 0, 583, 605, 3, 72, 36, 0, 584, 605, 3, 74, 37, 0,
		585, 605, 3, 80, 40, 0, 586, 605, 3, 88, 44, 0, 587, 605, 3, 90, 45, 0,
		588, 605, 3, 92, 46, 0, 589, 590, 3, 212, 106, 0, 590, 591, 5, 223, 0,
		0, 591, 605, 1, 0, 0, 0, 592, 605, 3, 124, 62, 0, 593, 605, 3, 130, 65,
		0, 594, 605, 3, 128, 64, 0, 595, 605, 3, 94, 47, 0, 596, 605, 3, 96, 48,
		0, 597, 605, 3, 98, 49, 0, 598, 605, 3, 100, 50, 0, 599, 605, 3, 106, 53,
		0, 600, 605, 3, 108, 54, 0, 601, 605, 3, 110, 55, 0, 602, 605, 3, 56, 28,
		0, 603, 605, 3, 112, 56, 0, 604, 579, 1, 0, 0, 0, 604, 580, 1, 0, 0, 0,
		604, 581, 1, 0, 0, 0, 604, 582, 1, 0, 0, 0, 604, 583, 1, 0, 0, 0, 604,
		584, 1, 0, 0, 0, 604, 585, 1, 0, 0, 0, 604, 586, 1, 0, 0, 0, 604, 587,
		1, 0, 0, 0, 604, 588, 1, 0, 0, 0, 604, 589, 1, 0, 0, 0, 604, 592, 1, 0,
		0, 0, 604, 593, 1, 0, 0, 0, 604, 594, 1, 0, 0, 0, 604, 595, 1, 0, 0, 0,
		604, 596, 1, 0, 0, 0, 604, 597, 1, 0, 0, 0, 604, 598, 1, 0, 0, 0, 604,
		599, 1, 0, 0, 0, 604, 600, 1, 0, 0, 0, 604, 601, 1, 0, 0, 0, 604, 602,
		1, 0, 0, 0, 604, 603, 1, 0, 0, 0, 605, 55, 1, 0, 0, 0, 606, 607, 5, 223,
		0, 0, 607, 57, 1, 0, 0, 0, 608, 609, 5, 219, 0, 0, 609, 610, 3, 48, 24,
		0, 610, 611, 5, 220, 0, 0, 611, 59, 1, 0, 0, 0, 612, 613, 5, 89, 0, 0,
		613, 614, 3, 166, 83, 0, 614, 618, 3, 54, 27, 0, 615, 617, 3, 62, 31, 0,
		616, 615, 1, 0, 0, 0, 617, 620, 1, 0, 0, 0, 618, 616, 1, 0, 0, 0, 618,
		619, 1, 0, 0, 0, 619, 622, 1, 0, 0, 0, 620, 618, 1, 0, 0, 0, 621, 623,
		3, 66, 33, 0, 622, 621, 1, 0, 0, 0, 622, 623, 1, 0, 0, 0, 623, 641, 1,
		0, 0, 0, 624, 625, 5, 89, 0, 0, 625, 626, 3, 166, 83, 0, 626, 627, 5, 222,
		0, 0, 627, 631, 3, 48, 24, 0, 628, 630, 3, 64, 32, 0, 629, 628, 1, 0, 0,
		0, 630, 633, 1, 0, 0, 0, 631, 629, 1, 0, 0, 0, 631, 632, 1, 0, 0, 0, 632,
		635, 1, 0, 0, 0, 633, 631, 1, 0, 0, 0, 634, 636, 3, 68, 34, 0, 635, 634,
		1, 0, 0, 0, 635, 636, 1, 0, 0, 0, 636, 637, 1, 0, 0, 0, 637, 638, 5, 73,
		0, 0, 638, 639, 5, 223, 0, 0, 639, 641, 1, 0, 0, 0, 640, 612, 1, 0, 0,
		0, 640, 624, 1, 0, 0, 0, 641, 61, 1, 0, 0, 0, 642, 643, 5, 67, 0, 0, 643,
		644, 3, 166, 83, 0, 644, 645, 3, 54, 27, 0, 645, 63, 1, 0, 0, 0, 646, 647,
		5, 67, 0, 0, 647, 648, 3, 166, 83, 0, 648, 649, 5, 222, 0, 0, 649, 650,
		3, 48, 24, 0, 650, 65, 1, 0, 0, 0, 651, 652, 5, 66, 0, 0, 652, 653, 3,
		54, 27, 0, 653, 67, 1, 0, 0, 0, 654, 655, 5, 66, 0, 0, 655, 656, 5, 222,
		0, 0, 656, 657, 3, 48, 24, 0, 657, 69, 1, 0, 0, 0, 658, 659, 5, 134, 0,
		0, 659, 666, 3, 166, 83, 0, 660, 667, 3, 54, 27, 0, 661, 662, 5, 222, 0,
		0, 662, 663, 3, 48, 24, 0, 663, 664, 5, 75, 0, 0, 664, 665, 5, 223, 0,
		0, 665, 667, 1, 0, 0, 0, 666, 660, 1, 0, 0, 0, 666, 661, 1, 0, 0, 0, 667,
		71, 1, 0, 0, 0, 668, 669, 5, 62, 0, 0, 669, 670, 3, 54, 27, 0, 670, 671,
		5, 134, 0, 0, 671, 672, 3, 166, 83, 0, 672, 673, 5, 223, 0, 0, 673, 73,
		1, 0, 0, 0, 674, 675, 5, 84, 0, 0, 675, 677, 5, 215, 0, 0, 676, 678, 3,
		76, 38, 0, 677, 676, 1, 0, 0, 0, 677, 678, 1, 0, 0, 0, 678, 679, 1, 0,
		0, 0, 679, 681, 5, 223, 0, 0, 680, 682, 3, 164, 82, 0, 681, 680, 1, 0,
		0, 0, 681, 682, 1, 0, 0, 0, 682, 683, 1, 0, 0, 0, 683, 685, 5, 223, 0,
		0, 684, 686, 3, 78, 39, 0, 685, 684, 1, 0, 0, 0, 685, 686, 1, 0, 0, 0,
		686, 687, 1, 0, 0, 0, 687, 694, 5, 216, 0, 0, 688, 695, 3, 54, 27, 0, 689,
		690, 5, 222, 0, 0, 690, 691, 3, 48, 24, 0, 691, 692, 5, 71, 0, 0, 692,
		693, 5, 223, 0, 0, 693, 695, 1, 0, 0, 0, 694, 688, 1, 0, 0, 0, 694, 689,
		1, 0, 0, 0, 695, 75, 1, 0, 0, 0, 696, 697, 3, 164, 82, 0, 697, 77, 1, 0,
		0, 0, 698, 699, 3, 164, 82, 0, 699, 79, 1, 0, 0, 0, 700, 701, 5, 124, 0,
		0, 701, 727, 3, 166, 83, 0, 702, 704, 5, 219, 0, 0, 703, 705, 5, 223, 0,
		0, 704, 703, 1, 0, 0, 0, 704, 705, 1, 0, 0, 0, 705, 710, 1, 0, 0, 0, 706,
		709, 3, 82, 41, 0, 707, 709, 3, 84, 42, 0, 708, 706, 1, 0, 0, 0, 708, 707,
		1, 0, 0, 0, 709, 712, 1, 0, 0, 0, 710, 708, 1, 0, 0, 0, 710, 711, 1, 0,
		0, 0, 711, 713, 1, 0, 0, 0, 712, 710, 1, 0, 0, 0, 713, 728, 5, 220, 0,
		0, 714, 716, 5, 222, 0, 0, 715, 717, 5, 223, 0, 0, 716, 715, 1, 0, 0, 0,
		716, 717, 1, 0, 0, 0, 717, 722, 1, 0, 0, 0, 718, 721, 3, 82, 41, 0, 719,
		721, 3, 84, 42, 0, 720, 718, 1, 0, 0, 0, 720, 719, 1, 0, 0, 0, 721, 724,
		1, 0, 0, 0, 722, 720, 1, 0, 0, 0, 722, 723, 1, 0, 0, 0, 723, 725, 1, 0,
		0, 0, 724, 722, 1, 0, 0, 0, 725, 726, 5, 74, 0, 0, 726, 728, 5, 223, 0,
		0, 727, 702, 1, 0, 0, 0, 727, 714, 1, 0, 0, 0, 728, 81, 1, 0, 0, 0, 729,
		730, 5, 52, 0, 0, 730, 731, 3, 180, 90, 0, 731, 735, 7, 3, 0, 0, 732, 734,
		5, 223, 0, 0, 733, 732, 1, 0, 0, 0, 734, 737, 1, 0, 0, 0, 735, 733, 1,
		0, 0, 0, 735, 736, 1, 0, 0, 0, 736, 738, 1, 0, 0, 0, 737, 735, 1, 0, 0,
		0, 738, 739, 3, 48, 24, 0, 739, 83, 1, 0, 0, 0, 740, 741, 5, 61, 0, 0,
		741, 745, 7, 3, 0, 0, 742, 744, 5, 223, 0, 0, 743, 742, 1, 0, 0, 0, 744,
		747, 1, 0, 0, 0, 745, 743, 1, 0, 0, 0, 745, 746, 1, 0, 0, 0, 746, 748,
		1, 0, 0, 0, 747, 745, 1, 0, 0, 0, 748, 749, 3, 48, 24, 0, 749, 85, 1, 0,
		0, 0, 750, 751, 5, 52, 0, 0, 751, 754, 3, 180, 90, 0, 752, 754, 5, 61,
		0, 0, 753, 750, 1, 0, 0, 0, 753, 752, 1, 0, 0, 0, 754, 755, 1, 0, 0, 0,
		755, 759, 7, 3, 0, 0, 756, 758, 5, 223, 0, 0, 757, 756, 1, 0, 0, 0, 758,
		761, 1, 0, 0, 0, 759, 757, 1, 0, 0, 0, 759, 760, 1, 0, 0, 0, 760, 763,
		1, 0, 0, 0, 761, 759, 1, 0, 0, 0, 762, 753, 1, 0, 0, 0, 763, 764, 1, 0,
		0, 0, 764, 762, 1, 0, 0, 0, 764, 765, 1, 0, 0, 0, 765, 766, 1, 0, 0, 0,
		766, 767, 3, 48, 24, 0, 767, 87, 1, 0, 0, 0, 768, 770, 5, 50, 0, 0, 769,
		771, 3, 180, 90, 0, 770, 769, 1, 0, 0, 0, 770, 771, 1, 0, 0, 0, 771, 772,
		1, 0, 0, 0, 772, 773, 5, 223, 0, 0, 773, 89, 1, 0, 0, 0, 774, 776, 5, 57,
		0, 0, 775, 777, 3, 180, 90, 0, 776, 775, 1, 0, 0, 0, 776, 777, 1, 0, 0,
		0, 777, 778, 1, 0, 0, 0, 778, 779, 5, 223, 0, 0, 779, 91, 1, 0, 0, 0, 780,
		782, 5, 121, 0, 0, 781, 783, 3, 180, 90, 0, 782, 781, 1, 0, 0, 0, 782,
		783, 1, 0, 0, 0, 783, 784, 1, 0, 0, 0, 784, 785, 5, 223, 0, 0, 785, 93,
		1, 0, 0, 0, 786, 787, 3, 180, 90, 0, 787, 788, 5, 223, 0, 0, 788, 95, 1,
		0, 0, 0, 789, 790, 5, 131, 0, 0, 790, 791, 5, 215, 0, 0, 791, 792, 3, 264,
		132, 0, 792, 793, 5, 216, 0, 0, 793, 794, 5, 223, 0, 0, 794, 97, 1, 0,
		0, 0, 795, 840, 5, 85, 0, 0, 796, 797, 5, 215, 0, 0, 797, 798, 3, 180,
		90, 0, 798, 799, 5, 46, 0, 0, 799, 800, 3, 196, 98, 0, 800, 801, 5, 216,
		0, 0, 801, 841, 1, 0, 0, 0, 802, 803, 5, 215, 0, 0, 803, 804, 3, 266, 133,
		0, 804, 806, 5, 46, 0, 0, 805, 807, 5, 201, 0, 0, 806, 805, 1, 0, 0, 0,
		806, 807, 1, 0, 0, 0, 807, 808, 1, 0, 0, 0, 808, 814, 3, 192, 96, 0, 809,
		811, 5, 166, 0, 0, 810, 812, 5, 201, 0, 0, 811, 810, 1, 0, 0, 0, 811, 812,
		1, 0, 0, 0, 812, 813, 1, 0, 0, 0, 813, 815, 3, 266, 133, 0, 814, 809, 1,
		0, 0, 0, 814, 815, 1, 0, 0, 0, 815, 816, 1, 0, 0, 0, 816, 817, 5, 216,
		0, 0, 817, 841, 1, 0, 0, 0, 818, 819, 5, 215, 0, 0, 819, 820, 3, 180, 90,
		0, 820, 821, 5, 46, 0, 0, 821, 827, 3, 192, 96, 0, 822, 824, 5, 166, 0,
		0, 823, 825, 5, 201, 0, 0, 824, 823, 1, 0, 0, 0, 824, 825, 1, 0, 0, 0,
		825, 826, 1, 0, 0, 0, 826, 828, 3, 266, 133, 0, 827, 822, 1, 0, 0, 0, 827,
		828, 1, 0, 0, 0, 828, 829, 1, 0, 0, 0, 829, 830, 5, 216, 0, 0, 830, 841,
		1, 0, 0, 0, 831, 832, 5, 215, 0, 0, 832, 833, 3, 266, 133, 0, 833, 834,
		5, 46, 0, 0, 834, 835, 5, 102, 0, 0, 835, 836, 5, 215, 0, 0, 836, 837,
		3, 288, 144, 0, 837, 838, 5, 216, 0, 0, 838, 839, 5, 216, 0, 0, 839, 841,
		1, 0, 0, 0, 840, 796, 1, 0, 0, 0, 840, 802, 1, 0, 0, 0, 840, 818, 1, 0,
		0, 0, 840, 831, 1, 0, 0, 0, 841, 848, 1, 0, 0, 0, 842, 849, 3, 54, 27,
		0, 843, 844, 5, 222, 0, 0, 844, 845, 3, 48, 24, 0, 845, 846, 5, 72, 0,
		0, 846, 847, 5, 223, 0, 0, 847, 849, 1, 0, 0, 0, 848, 842, 1, 0, 0, 0,
		848, 843, 1, 0, 0, 0, 849, 99, 1, 0, 0, 0, 850, 851, 5, 127, 0, 0, 851,
		867, 3, 58, 29, 0, 852, 854, 3, 102, 51, 0, 853, 852, 1, 0, 0, 0, 854,
		855, 1, 0, 0, 0, 855, 853, 1, 0, 0, 0, 855, 856, 1, 0, 0, 0, 856, 858,
		1, 0, 0, 0, 857, 859, 3, 104, 52, 0, 858, 857, 1, 0, 0, 0, 858, 859, 1,
		0, 0, 0, 859, 868, 1, 0, 0, 0, 860, 862, 3, 102, 51, 0, 861, 860, 1, 0,
		0, 0, 862, 865, 1, 0, 0, 0, 863, 861, 1, 0, 0, 0, 863, 864, 1, 0, 0, 0,
		864, 866, 1, 0, 0, 0, 865, 863, 1, 0, 0, 0, 866, 868, 3, 104, 52, 0, 867,
		853, 1, 0, 0, 0, 867, 863, 1, 0, 0, 0, 868, 101, 1, 0, 0, 0, 869, 870,
		5, 53, 0, 0, 870, 871, 5, 215, 0, 0, 871, 876, 3, 222, 111, 0, 872, 873,
		5, 202, 0, 0, 873, 875, 3, 222, 111, 0, 874, 872, 1, 0, 0, 0, 875, 878,
		1, 0, 0, 0, 876, 874, 1, 0, 0, 0, 876, 877, 1, 0, 0, 0, 877, 880, 1, 0,
		0, 0, 878, 876, 1, 0, 0, 0, 879, 881, 5, 228, 0, 0, 880, 879, 1, 0, 0,
		0, 880, 881, 1, 0, 0, 0, 881, 882, 1, 0, 0, 0, 882, 883, 5, 216, 0, 0,
		883, 884, 3, 58, 29, 0, 884, 103, 1, 0, 0, 0, 885, 886, 5, 82, 0, 0, 886,
		887, 3, 58, 29, 0, 887, 105, 1, 0, 0, 0, 888, 889, 5, 125, 0, 0, 889, 890,
		3, 180, 90, 0, 890, 891, 5, 223, 0, 0, 891, 107, 1, 0, 0, 0, 892, 893,
		5, 88, 0, 0, 893, 894, 3, 294, 147, 0, 894, 895, 5, 223, 0, 0, 895, 109,
		1, 0, 0, 0, 896, 897, 5, 60, 0, 0, 897, 898, 5, 215, 0, 0, 898, 899, 3,
		114, 57, 0, 899, 906, 5, 216, 0, 0, 900, 907, 3, 54, 27, 0, 901, 902, 5,
		222, 0, 0, 902, 903, 3, 48, 24, 0, 903, 904, 5, 70, 0, 0, 904, 905, 5,
		223, 0, 0, 905, 907, 1, 0, 0, 0, 906, 900, 1, 0, 0, 0, 906, 901, 1, 0,
		0, 0, 907, 111, 1, 0, 0, 0, 908, 910, 3, 4, 2, 0, 909, 908, 1, 0, 0, 0,
		910, 911, 1, 0, 0, 0, 911, 909, 1, 0, 0, 0, 911, 912, 1, 0, 0, 0, 912,
		113, 1, 0, 0, 0, 913, 918, 3, 116, 58, 0, 914, 915, 5, 221, 0, 0, 915,
		917, 3, 116, 58, 0, 916, 914, 1, 0, 0, 0, 917, 920, 1, 0, 0, 0, 918, 916,
		1, 0, 0, 0, 918, 919, 1, 0, 0, 0, 919, 115, 1, 0, 0, 0, 920, 918, 1, 0,
		0, 0, 921, 922, 5, 138, 0, 0, 922, 925, 5, 224, 0, 0, 923, 926, 3, 252,
		126, 0, 924, 926, 5, 232, 0, 0, 925, 923, 1, 0, 0, 0, 925, 924, 1, 0, 0,
		0, 926, 934, 1, 0, 0, 0, 927, 928, 5, 139, 0, 0, 928, 929, 5, 224, 0, 0,
		929, 934, 5, 236, 0, 0, 930, 931, 5, 140, 0, 0, 931, 932, 5, 224, 0, 0,
		932, 934, 3, 252, 126, 0, 933, 921, 1, 0, 0, 0, 933, 927, 1, 0, 0, 0, 933,
		930, 1, 0, 0, 0, 934, 117, 1, 0, 0, 0, 935, 937, 3, 120, 60, 0, 936, 935,
		1, 0, 0, 0, 936, 937, 1, 0, 0, 0, 937, 942, 1, 0, 0, 0, 938, 939, 5, 221,
		0, 0, 939, 941, 3, 120, 60, 0, 940, 938, 1, 0, 0, 0, 941, 944, 1, 0, 0,
		0, 942, 940, 1, 0, 0, 0, 942, 943, 1, 0, 0, 0, 943, 946, 1, 0, 0, 0, 944,
		942, 1, 0, 0, 0, 945, 947, 5, 221, 0, 0, 946, 945, 1, 0, 0, 0, 946, 947,
		1, 0, 0, 0, 947, 119, 1, 0, 0, 0, 948, 950, 3, 42, 21, 0, 949, 948, 1,
		0, 0, 0, 949, 950, 1, 0, 0, 0, 950, 954, 1, 0, 0, 0, 951, 953, 3, 298,
		149, 0, 952, 951, 1, 0, 0, 0, 953, 956, 1, 0, 0, 0, 954, 952, 1, 0, 0,
		0, 954, 955, 1, 0, 0, 0, 955, 958, 1, 0, 0, 0, 956, 954, 1, 0, 0, 0, 957,
		959, 5, 214, 0, 0, 958, 957, 1, 0, 0, 0, 958, 959, 1, 0, 0, 0, 959, 961,
		1, 0, 0, 0, 960, 962, 3, 122, 61, 0, 961, 960, 1, 0, 0, 0, 961, 962, 1,
		0, 0, 0, 962, 964, 1, 0, 0, 0, 963, 965, 5, 201, 0, 0, 964, 963, 1, 0,
		0, 0, 964, 965, 1, 0, 0, 0, 965, 967, 1, 0, 0, 0, 966, 968, 5, 198, 0,
		0, 967, 966, 1, 0, 0, 0, 967, 968, 1, 0, 0, 0, 968, 969, 1, 0, 0, 0, 969,
		970, 3, 154, 77, 0, 970, 121, 1, 0, 0, 0, 971, 972, 6, 61, -1, 0, 972,
		976, 5, 51, 0, 0, 973, 976, 3, 304, 152, 0, 974, 976, 3, 222, 111, 0, 975,
		971, 1, 0, 0, 0, 975, 973, 1, 0, 0, 0, 975, 974, 1, 0, 0, 0, 976, 982,
		1, 0, 0, 0, 977, 978, 10, 1, 0, 0, 978, 979, 5, 202, 0, 0, 979, 981, 3,
		122, 61, 2, 980, 977, 1, 0, 0, 0, 981, 984, 1, 0, 0, 0, 982, 980, 1, 0,
		0, 0, 982, 983, 1, 0, 0, 0, 983, 123, 1, 0, 0, 0, 984, 982, 1, 0, 0, 0,
		985, 986, 5, 87, 0, 0, 986, 991, 3, 126, 63, 0, 987, 988, 5, 221, 0, 0,
		988, 990, 3, 126, 63, 0, 989, 987, 1, 0, 0, 0, 990, 993, 1, 0, 0, 0, 991,
		989, 1, 0, 0, 0, 991, 992, 1, 0, 0, 0, 992, 994, 1, 0, 0, 0, 993, 991,
		1, 0, 0, 0, 994, 995, 5, 223, 0, 0, 995, 125, 1, 0, 0, 0, 996, 1005, 5,
		228, 0, 0, 997, 998, 5, 212, 0, 0, 998, 1005, 3, 266, 133, 0, 999, 1000,
		5, 212, 0, 0, 1000, 1001, 5, 219, 0, 0, 1001, 1002, 3, 180, 90, 0, 1002,
		1003, 5, 220, 0, 0, 1003, 1005, 1, 0, 0, 0, 1004, 996, 1, 0, 0, 0, 1004,
		997, 1, 0, 0, 0, 1004, 999, 1, 0, 0, 0, 1005, 127, 1, 0, 0, 0, 1006, 1007,
		5, 65, 0, 0, 1007, 1008, 3, 164, 82, 0, 1008, 1009, 5, 223, 0, 0, 1009,
		129, 1, 0, 0, 0, 1010, 1011, 5, 122, 0, 0, 1011, 1016, 3, 154, 77, 0, 1012,
		1013, 5, 221, 0, 0, 1013, 1015, 3, 154, 77, 0, 1014, 1012, 1, 0, 0, 0,
		1015, 1018, 1, 0, 0, 0, 1016, 1014, 1, 0, 0, 0, 1016, 1017, 1, 0, 0, 0,
		1017, 1019, 1, 0, 0, 0, 1018, 1016, 1, 0, 0, 0, 1019, 1020, 5, 223, 0,
		0, 1020, 131, 1, 0, 0, 0, 1021, 1022, 5, 132, 0, 0, 1022, 1023, 3, 236,
		118, 0, 1023, 1024, 3, 134, 67, 0, 1024, 1083, 1, 0, 0, 0, 1025, 1027,
		3, 42, 21, 0, 1026, 1025, 1, 0, 0, 0, 1026, 1027, 1, 0, 0, 0, 1027, 1028,
		1, 0, 0, 0, 1028, 1030, 3, 150, 75, 0, 1029, 1031, 3, 122, 61, 0, 1030,
		1029, 1, 0, 0, 0, 1030, 1031, 1, 0, 0, 0, 1031, 1032, 1, 0, 0, 0, 1032,
		1037, 3, 154, 77, 0, 1033, 1034, 5, 221, 0, 0, 1034, 1036, 3, 154, 77,
		0, 1035, 1033, 1, 0, 0, 0, 1036, 1039, 1, 0, 0, 0, 1037, 1035, 1, 0, 0,
		0, 1037, 1038, 1, 0, 0, 0, 1038, 1040, 1, 0, 0, 0, 1039, 1037, 1, 0, 0,
		0, 1040, 1041, 5, 223, 0, 0, 1041, 1083, 1, 0, 0, 0, 1042, 1044, 3, 42,
		21, 0, 1043, 1042, 1, 0, 0, 0, 1043, 1044, 1, 0, 0, 0, 1044, 1046, 1, 0,
		0, 0, 1045, 1047, 3, 152, 76, 0, 1046, 1045, 1, 0, 0, 0, 1046, 1047, 1,
		0, 0, 0, 1047, 1048, 1, 0, 0, 0, 1048, 1050, 5, 56, 0, 0, 1049, 1051, 3,
		122, 61, 0, 1050, 1049, 1, 0, 0, 0, 1050, 1051, 1, 0, 0, 0, 1051, 1052,
		1, 0, 0, 0, 1052, 1057, 3, 156, 78, 0, 1053, 1054, 5, 221, 0, 0, 1054,
		1056, 3, 156, 78, 0, 1055, 1053, 1, 0, 0, 0, 1056, 1059, 1, 0, 0, 0, 1057,
		1055, 1, 0, 0, 0, 1057, 1058, 1, 0, 0, 0, 1058, 1060, 1, 0, 0, 0, 1059,
		1057, 1, 0, 0, 0, 1060, 1061, 5, 223, 0, 0, 1061, 1083, 1, 0, 0, 0, 1062,
		1064, 3, 42, 21, 0, 1063, 1062, 1, 0, 0, 0, 1063, 1064, 1, 0, 0, 0, 1064,
		1066, 1, 0, 0, 0, 1065, 1067, 3, 152, 76, 0, 1066, 1065, 1, 0, 0, 0, 1066,
		1067, 1, 0, 0, 0, 1067, 1068, 1, 0, 0, 0, 1068, 1070, 5, 86, 0, 0, 1069,
		1071, 5, 201, 0, 0, 1070, 1069, 1, 0, 0, 0, 1070, 1071, 1, 0, 0, 0, 1071,
		1072, 1, 0, 0, 0, 1072, 1073, 3, 294, 147, 0, 1073, 1074, 5, 215, 0, 0,
		1074, 1075, 3, 118, 59, 0, 1075, 1078, 5, 216, 0, 0, 1076, 1079, 3, 144,
		72, 0, 1077, 1079, 3, 146, 73, 0, 1078, 1076, 1, 0, 0, 0, 1078, 1077, 1,
		0, 0, 0, 1078, 1079, 1, 0, 0, 0, 1079, 1080, 1, 0, 0, 0, 1080, 1081, 3,
		148, 74, 0, 1081, 1083, 1, 0, 0, 0, 1082, 1021, 1, 0, 0, 0, 1082, 1026,
		1, 0, 0, 0, 1082, 1043, 1, 0, 0, 0, 1082, 1063, 1, 0, 0, 0, 1083, 133,
		1, 0, 0, 0, 1084, 1094, 5, 223, 0, 0, 1085, 1089, 5, 219, 0, 0, 1086, 1088,
		3, 136, 68, 0, 1087, 1086, 1, 0, 0, 0, 1088, 1091, 1, 0, 0, 0, 1089, 1087,
		1, 0, 0, 0, 1089, 1090, 1, 0, 0, 0, 1090, 1092, 1, 0, 0, 0, 1091, 1089,
		1, 0, 0, 0, 1092, 1094, 5, 220, 0, 0, 1093, 1084, 1, 0, 0, 0, 1093, 1085,
		1, 0, 0, 0, 1094, 135, 1, 0, 0, 0, 1095, 1098, 3, 138, 69, 0, 1096, 1098,
		3, 140, 70, 0, 1097, 1095, 1, 0, 0, 0, 1097, 1096, 1, 0, 0, 0, 1098, 137,
		1, 0, 0, 0, 1099, 1100, 3, 230, 115, 0, 1100, 1101, 5, 195, 0, 0, 1101,
		1102, 3, 294, 147, 0, 1102, 1103, 5, 95, 0, 0, 1103, 1104, 3, 236, 118,
		0, 1104, 1105, 5, 223, 0, 0, 1105, 139, 1, 0, 0, 0, 1106, 1107, 3, 142,
		71, 0, 1107, 1113, 5, 46, 0, 0, 1108, 1114, 3, 298, 149, 0, 1109, 1111,
		3, 298, 149, 0, 1110, 1109, 1, 0, 0, 0, 1110, 1111, 1, 0, 0, 0, 1111, 1112,
		1, 0, 0, 0, 1112, 1114, 3, 294, 147, 0, 1113, 1108, 1, 0, 0, 0, 1113, 1110,
		1, 0, 0, 0, 1114, 1115, 1, 0, 0, 0, 1115, 1116, 5, 223, 0, 0, 1116, 141,
		1, 0, 0, 0, 1117, 1118, 3, 230, 115, 0, 1118, 1119, 5, 195, 0, 0, 1119,
		1121, 1, 0, 0, 0, 1120, 1117, 1, 0, 0, 0, 1120, 1121, 1, 0, 0, 0, 1121,
		1122, 1, 0, 0, 0, 1122, 1123, 3, 294, 147, 0, 1123, 143, 1, 0, 0, 0, 1124,
		1125, 5, 222, 0, 0, 1125, 1127, 3, 294, 147, 0, 1126, 1128, 3, 238, 119,
		0, 1127, 1126, 1, 0, 0, 0, 1127, 1128, 1, 0, 0, 0, 1128, 145, 1, 0, 0,
		0, 1129, 1131, 5, 222, 0, 0, 1130, 1132, 5, 214, 0, 0, 1131, 1130, 1, 0,
		0, 0, 1131, 1132, 1, 0, 0, 0, 1132, 1133, 1, 0, 0, 0, 1133, 1134, 3, 122,
		61, 0, 1134, 147, 1, 0, 0, 0, 1135, 1138, 5, 223, 0, 0, 1136, 1138, 3,
		58, 29, 0, 1137, 1135, 1, 0, 0, 0, 1137, 1136, 1, 0, 0, 0, 1138, 149, 1,
		0, 0, 0, 1139, 1142, 3, 152, 76, 0, 1140, 1142, 5, 133, 0, 0, 1141, 1139,
		1, 0, 0, 0, 1141, 1140, 1, 0, 0, 0, 1142, 151, 1, 0, 0, 0, 1143, 1145,
		3, 298, 149, 0, 1144, 1143, 1, 0, 0, 0, 1145, 1146, 1, 0, 0, 0, 1146, 1144,
		1, 0, 0, 0, 1146, 1147, 1, 0, 0, 0, 1147, 153, 1, 0, 0, 0, 1148, 1151,
		5, 228, 0, 0, 1149, 1150, 5, 224, 0, 0, 1150, 1152, 3, 244, 122, 0, 1151,
		1149, 1, 0, 0, 0, 1151, 1152, 1, 0, 0, 0, 1152, 155, 1, 0, 0, 0, 1153,
		1154, 3, 294, 147, 0, 1154, 1155, 5, 224, 0, 0, 1155, 1156, 3, 244, 122,
		0, 1156, 157, 1, 0, 0, 0, 1157, 1159, 3, 42, 21, 0, 1158, 1157, 1, 0, 0,
		0, 1158, 1159, 1, 0, 0, 0, 1159, 1160, 1, 0, 0, 0, 1160, 1161, 5, 56, 0,
		0, 1161, 1166, 3, 156, 78, 0, 1162, 1163, 5, 221, 0, 0, 1163, 1165, 3,
		156, 78, 0, 1164, 1162, 1, 0, 0, 0, 1165, 1168, 1, 0, 0, 0, 1166, 1164,
		1, 0, 0, 0, 1166, 1167, 1, 0, 0, 0, 1167, 1169, 1, 0, 0, 0, 1168, 1166,
		1, 0, 0, 0, 1169, 1170, 5, 223, 0, 0, 1170, 159, 1, 0, 0, 0, 1171, 1172,
		5, 69, 0, 0, 1172, 1175, 3, 294, 147, 0, 1173, 1174, 5, 222, 0, 0, 1174,
		1176, 7, 4, 0, 0, 1175, 1173, 1, 0, 0, 0, 1175, 1176, 1, 0, 0, 0, 1176,
		1179, 1, 0, 0, 0, 1177, 1178, 5, 90, 0, 0, 1178, 1180, 3, 32, 16, 0, 1179,
		1177, 1, 0, 0, 0, 1179, 1180, 1, 0, 0, 0, 1180, 1181, 1, 0, 0, 0, 1181,
		1185, 5, 219, 0, 0, 1182, 1184, 3, 162, 81, 0, 1183, 1182, 1, 0, 0, 0,
		1184, 1187, 1, 0, 0, 0, 1185, 1183, 1, 0, 0, 0, 1185, 1186, 1, 0, 0, 0,
		1186, 1188, 1, 0, 0, 0, 1187, 1185, 1, 0, 0, 0, 1188, 1189, 5, 220, 0,
		0, 1189, 161, 1, 0, 0, 0, 1190, 1191, 5, 52, 0, 0, 1191, 1194, 3, 294,
		147, 0, 1192, 1193, 5, 224, 0, 0, 1193, 1195, 3, 180, 90, 0, 1194, 1192,
		1, 0, 0, 0, 1194, 1195, 1, 0, 0, 0, 1195, 1196, 1, 0, 0, 0, 1196, 1197,
		5, 223, 0, 0, 1197, 1207, 1, 0, 0, 0, 1198, 1200, 3, 152, 76, 0, 1199,
		1198, 1, 0, 0, 0, 1199, 1200, 1, 0, 0, 0, 1200, 1201, 1, 0, 0, 0, 1201,
		1207, 3, 26, 13, 0, 1202, 1203, 5, 132, 0, 0, 1203, 1204, 3, 236, 118,
		0, 1204, 1205, 3, 134, 67, 0, 1205, 1207, 1, 0, 0, 0, 1206, 1190, 1, 0,
		0, 0, 1206, 1199, 1, 0, 0, 0, 1206, 1202, 1, 0, 0, 0, 1207, 163, 1, 0,
		0, 0, 1208, 1213, 3, 180, 90, 0, 1209, 1210, 5, 221, 0, 0, 1210, 1212,
		3, 180, 90, 0, 1211, 1209, 1, 0, 0, 0, 1212, 1215, 1, 0, 0, 0, 1213, 1211,
		1, 0, 0, 0, 1213, 1214, 1, 0, 0, 0, 1214, 165, 1, 0, 0, 0, 1215, 1213,
		1, 0, 0, 0, 1216, 1217, 5, 215, 0, 0, 1217, 1218, 3, 180, 90, 0, 1218,
		1219, 5, 216, 0, 0, 1219, 167, 1, 0, 0, 0, 1220, 1222, 5, 197, 0, 0, 1221,
		1220, 1, 0, 0, 0, 1221, 1222, 1, 0, 0, 0, 1222, 1223, 1, 0, 0, 0, 1223,
		1224, 3, 294, 147, 0, 1224, 1230, 5, 197, 0, 0, 1225, 1226, 3, 294, 147,
		0, 1226, 1227, 5, 197, 0, 0, 1227, 1229, 1, 0, 0, 0, 1228, 1225, 1, 0,
		0, 0, 1229, 1232, 1, 0, 0, 0, 1230, 1228, 1, 0, 0, 0, 1230, 1231, 1, 0,
		0, 0, 1231, 1233, 1, 0, 0, 0, 1232, 1230, 1, 0, 0, 0, 1233, 1234, 3, 294,
		147, 0, 1234, 169, 1, 0, 0, 0, 1235, 1238, 3, 172, 86, 0, 1236, 1238, 3,
		174, 87, 0, 1237, 1235, 1, 0, 0, 0, 1237, 1236, 1, 0, 0, 0, 1238, 171,
		1, 0, 0, 0, 1239, 1240, 3, 168, 84, 0, 1240, 1241, 5, 195, 0, 0, 1241,
		1242, 3, 294, 147, 0, 1242, 1256, 1, 0, 0, 0, 1243, 1244, 3, 294, 147,
		0, 1244, 1245, 5, 195, 0, 0, 1245, 1246, 3, 294, 147, 0, 1246, 1256, 1,
		0, 0, 0, 1247, 1248, 3, 258, 129, 0, 1248, 1249, 5, 195, 0, 0, 1249, 1250,
		3, 294, 147, 0, 1250, 1256, 1, 0, 0, 0, 1251, 1252, 3, 186, 93, 0, 1252,
		1253, 5, 195, 0, 0, 1253, 1254, 3, 294, 147, 0, 1254, 1256, 1, 0, 0, 0,
		1255, 1239, 1, 0, 0, 0, 1255, 1243, 1, 0, 0, 0, 1255, 1247, 1, 0, 0, 0,
		1255, 1251, 1, 0, 0, 0, 1256, 173, 1, 0, 0, 0, 1257, 1258, 3, 168, 84,
		0, 1258, 1259, 5, 195, 0, 0, 1259, 1260, 3, 182, 91, 0, 1260, 1274, 1,
		0, 0, 0, 1261, 1262, 3, 294, 147, 0, 1262, 1263, 5, 195, 0, 0, 1263, 1264,
		3, 182, 91, 0, 1264, 1274, 1, 0, 0, 0, 1265, 1266, 3, 258, 129, 0, 1266,
		1267, 5, 195, 0, 0, 1267, 1268, 3, 182, 91, 0, 1268, 1274, 1, 0, 0, 0,
		1269, 1270, 3, 186, 93, 0, 1270, 1271, 5, 195, 0, 0, 1271, 1272, 3, 182,
		91, 0, 1272, 1274, 1, 0, 0, 0, 1273, 1257, 1, 0, 0, 0, 1273, 1261, 1, 0,
		0, 0, 1273, 1265, 1, 0, 0, 0, 1273, 1269, 1, 0, 0, 0, 1274, 175, 1, 0,
		0, 0, 1275, 1283, 3, 294, 147, 0, 1276, 1283, 3, 258, 129, 0, 1277, 1283,
		3, 186, 93, 0, 1278, 1279, 5, 219, 0, 0, 1279, 1280, 3, 180, 90, 0, 1280,
		1281, 5, 220, 0, 0, 1281, 1283, 1, 0, 0, 0, 1282, 1275, 1, 0, 0, 0, 1282,
		1276, 1, 0, 0, 0, 1282, 1277, 1, 0, 0, 0, 1282, 1278, 1, 0, 0, 0, 1283,
		177, 1, 0, 0, 0, 1284, 1288, 3, 176, 88, 0, 1285, 1288, 3, 252, 126, 0,
		1286, 1288, 3, 180, 90, 0, 1287, 1284, 1, 0, 0, 0, 1287, 1285, 1, 0, 0,
		0, 1287, 1286, 1, 0, 0, 0, 1288, 179, 1, 0, 0, 0, 1289, 1290, 6, 90, -1,
		0, 1290, 1291, 5, 55, 0, 0, 1291, 1385, 3, 180, 90, 57, 1292, 1385, 3,
		208, 104, 0, 1293, 1385, 3, 168, 84, 0, 1294, 1385, 3, 294, 147, 0, 1295,
		1296, 5, 197, 0, 0, 1296, 1385, 3, 294, 147, 0, 1297, 1299, 5, 197, 0,
		0, 1298, 1297, 1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299, 1300, 1, 0, 0,
		0, 1300, 1385, 3, 170, 85, 0, 1301, 1303, 5, 201, 0, 0, 1302, 1301, 1,
		0, 0, 0, 1302, 1303, 1, 0, 0, 0, 1303, 1304, 1, 0, 0, 0, 1304, 1385, 3,
		182, 91, 0, 1305, 1385, 3, 194, 97, 0, 1306, 1385, 3, 248, 124, 0, 1307,
		1385, 3, 258, 129, 0, 1308, 1385, 3, 184, 92, 0, 1309, 1310, 5, 113, 0,
		0, 1310, 1385, 3, 180, 90, 42, 1311, 1385, 5, 229, 0, 0, 1312, 1385, 5,
		235, 0, 0, 1313, 1314, 5, 215, 0, 0, 1314, 1315, 3, 180, 90, 0, 1315, 1316,
		5, 216, 0, 0, 1316, 1385, 1, 0, 0, 0, 1317, 1385, 3, 188, 94, 0, 1318,
		1319, 5, 227, 0, 0, 1319, 1385, 3, 180, 90, 37, 1320, 1385, 5, 135, 0,
		0, 1321, 1322, 5, 102, 0, 0, 1322, 1323, 5, 215, 0, 0, 1323, 1324, 3, 288,
		144, 0, 1324, 1325, 5, 216, 0, 0, 1325, 1326, 5, 224, 0, 0, 1326, 1327,
		3, 180, 90, 35, 1327, 1385, 1, 0, 0, 0, 1328, 1329, 5, 101, 0, 0, 1329,
		1330, 5, 215, 0, 0, 1330, 1331, 3, 264, 132, 0, 1331, 1332, 5, 216, 0,
		0, 1332, 1385, 1, 0, 0, 0, 1333, 1334, 5, 68, 0, 0, 1334, 1335, 5, 215,
		0, 0, 1335, 1336, 3, 266, 133, 0, 1336, 1337, 5, 216, 0, 0, 1337, 1385,
		1, 0, 0, 0, 1338, 1344, 7, 5, 0, 0, 1339, 1341, 5, 215, 0, 0, 1340, 1342,
		3, 180, 90, 0, 1341, 1340, 1, 0, 0, 0, 1341, 1342, 1, 0, 0, 0, 1342, 1343,
		1, 0, 0, 0, 1343, 1345, 5, 216, 0, 0, 1344, 1339, 1, 0, 0, 0, 1344, 1345,
		1, 0, 0, 0, 1345, 1385, 1, 0, 0, 0, 1346, 1347, 7, 6, 0, 0, 1347, 1385,
		3, 180, 90, 31, 1348, 1349, 5, 125, 0, 0, 1349, 1385, 3, 180, 90, 30, 1350,
		1385, 3, 202, 101, 0, 1351, 1385, 3, 204, 102, 0, 1352, 1353, 5, 215, 0,
		0, 1353, 1354, 3, 306, 153, 0, 1354, 1355, 5, 216, 0, 0, 1355, 1356, 3,
		180, 90, 27, 1356, 1385, 1, 0, 0, 0, 1357, 1358, 7, 7, 0, 0, 1358, 1385,
		3, 180, 90, 26, 1359, 1360, 7, 8, 0, 0, 1360, 1385, 3, 180, 90, 25, 1361,
		1362, 7, 9, 0, 0, 1362, 1385, 3, 182, 91, 0, 1363, 1364, 3, 182, 91, 0,
		1364, 1365, 7, 9, 0, 0, 1365, 1385, 1, 0, 0, 0, 1366, 1367, 3, 190, 95,
		0, 1367, 1368, 5, 224, 0, 0, 1368, 1369, 3, 180, 90, 7, 1369, 1385, 1,
		0, 0, 0, 1370, 1371, 3, 174, 87, 0, 1371, 1372, 3, 210, 105, 0, 1372, 1373,
		3, 180, 90, 6, 1373, 1385, 1, 0, 0, 0, 1374, 1375, 3, 182, 91, 0, 1375,
		1376, 3, 210, 105, 0, 1376, 1377, 3, 180, 90, 5, 1377, 1385, 1, 0, 0, 0,
		1378, 1379, 5, 237, 0, 0, 1379, 1380, 5, 219, 0, 0, 1380, 1381, 3, 180,
		90, 0, 1381, 1382, 5, 220, 0, 0, 1382, 1383, 5, 237, 0, 0, 1383, 1385,
		1, 0, 0, 0, 1384, 1289, 1, 0, 0, 0, 1384, 1292, 1, 0, 0, 0, 1384, 1293,
		1, 0, 0, 0, 1384, 1294, 1, 0, 0, 0, 1384, 1295, 1, 0, 0, 0, 1384, 1298,
		1, 0, 0, 0, 1384, 1302, 1, 0, 0, 0, 1384, 1305, 1, 0, 0, 0, 1384, 1306,
		1, 0, 0, 0, 1384, 1307, 1, 0, 0, 0, 1384, 1308, 1, 0, 0, 0, 1384, 1309,
		1, 0, 0, 0, 1384, 1311, 1, 0, 0, 0, 1384, 1312, 1, 0, 0, 0, 1384, 1313,
		1, 0, 0, 0, 1384, 1317, 1, 0, 0, 0, 1384, 1318, 1, 0, 0, 0, 1384, 1320,
		1, 0, 0, 0, 1384, 1321, 1, 0, 0, 0, 1384, 1328, 1, 0, 0, 0, 1384, 1333,
		1, 0, 0, 0, 1384, 1338, 1, 0, 0, 0, 1384, 1346, 1, 0, 0, 0, 1384, 1348,
		1, 0, 0, 0, 1384, 1350, 1, 0, 0, 0, 1384, 1351, 1, 0, 0, 0, 1384, 1352,
		1, 0, 0, 0, 1384, 1357, 1, 0, 0, 0, 1384, 1359, 1, 0, 0, 0, 1384, 1361,
		1, 0, 0, 0, 1384, 1363, 1, 0, 0, 0, 1384, 1366, 1, 0, 0, 0, 1384, 1370,
		1, 0, 0, 0, 1384, 1374, 1, 0, 0, 0, 1384, 1378, 1, 0, 0, 0, 1385, 1465,
		1, 0, 0, 0, 1386, 1387, 10, 22, 0, 0, 1387, 1388, 5, 178, 0, 0, 1388, 1464,
		3, 180, 90, 22, 1389, 1390, 10, 20, 0, 0, 1390, 1391, 7, 10, 0, 0, 1391,
		1464, 3, 180, 90, 21, 1392, 1393, 10, 19, 0, 0, 1393, 1394, 7, 11, 0, 0,
		1394, 1464, 3, 180, 90, 20, 1395, 1396, 10, 18, 0, 0, 1396, 1397, 7, 12,
		0, 0, 1397, 1464, 3, 180, 90, 19, 1398, 1399, 10, 17, 0, 0, 1399, 1400,
		7, 13, 0, 0, 1400, 1464, 3, 180, 90, 18, 1401, 1402, 10, 16, 0, 0, 1402,
		1403, 7, 14, 0, 0, 1403, 1464, 3, 180, 90, 17, 1404, 1405, 10, 15, 0, 0,
		1405, 1406, 5, 201, 0, 0, 1406, 1464, 3, 180, 90, 16, 1407, 1408, 10, 14,
		0, 0, 1408, 1409, 5, 204, 0, 0, 1409, 1464, 3, 180, 90, 15, 1410, 1411,
		10, 13, 0, 0, 1411, 1412, 5, 202, 0, 0, 1412, 1464, 3, 180, 90, 14, 1413,
		1414, 10, 12, 0, 0, 1414, 1415, 5, 189, 0, 0, 1415, 1464, 3, 180, 90, 13,
		1416, 1417, 10, 11, 0, 0, 1417, 1418, 5, 188, 0, 0, 1418, 1464, 3, 180,
		90, 12, 1419, 1420, 10, 10, 0, 0, 1420, 1422, 5, 214, 0, 0, 1421, 1423,
		3, 180, 90, 0, 1422, 1421, 1, 0, 0, 0, 1422, 1423, 1, 0, 0, 0, 1423, 1424,
		1, 0, 0, 0, 1424, 1425, 5, 222, 0, 0, 1425, 1464, 3, 180, 90, 11, 1426,
		1427, 10, 9, 0, 0, 1427, 1428, 5, 190, 0, 0, 1428, 1464, 3, 180, 90, 10,
		1429, 1430, 10, 8, 0, 0, 1430, 1431, 5, 165, 0, 0, 1431, 1464, 3, 180,
		90, 9, 1432, 1433, 10, 4, 0, 0, 1433, 1434, 5, 103, 0, 0, 1434, 1464, 3,
		180, 90, 5, 1435, 1436, 10, 3, 0, 0, 1436, 1437, 5, 105, 0, 0, 1437, 1464,
		3, 180, 90, 4, 1438, 1439, 10, 2, 0, 0, 1439, 1440, 5, 104, 0, 0, 1440,
		1464, 3, 180, 90, 3, 1441, 1442, 10, 54, 0, 0, 1442, 1443, 5, 196, 0, 0,
		1443, 1464, 3, 176, 88, 0, 1444, 1445, 10, 53, 0, 0, 1445, 1446, 5, 217,
		0, 0, 1446, 1447, 3, 178, 89, 0, 1447, 1448, 5, 218, 0, 0, 1448, 1464,
		1, 0, 0, 0, 1449, 1451, 10, 52, 0, 0, 1450, 1452, 5, 196, 0, 0, 1451, 1450,
		1, 0, 0, 0, 1451, 1452, 1, 0, 0, 0, 1452, 1453, 1, 0, 0, 0, 1453, 1455,
		5, 219, 0, 0, 1454, 1456, 3, 178, 89, 0, 1455, 1454, 1, 0, 0, 0, 1455,
		1456, 1, 0, 0, 0, 1456, 1457, 1, 0, 0, 0, 1457, 1464, 5, 220, 0, 0, 1458,
		1459, 10, 51, 0, 0, 1459, 1464, 3, 238, 119, 0, 1460, 1461, 10, 21, 0,
		0, 1461, 1462, 5, 94, 0, 0, 1462, 1464, 3, 224, 112, 0, 1463, 1386, 1,
		0, 0, 0, 1463, 1389, 1, 0, 0, 0, 1463, 1392, 1, 0, 0, 0, 1463, 1395, 1,
		0, 0, 0, 1463, 1398, 1, 0, 0, 0, 1463, 1401, 1, 0, 0, 0, 1463, 1404, 1,
		0, 0, 0, 1463, 1407, 1, 0, 0, 0, 1463, 1410, 1, 0, 0, 0, 1463, 1413, 1,
		0, 0, 0, 1463, 1416, 1, 0, 0, 0, 1463, 1419, 1, 0, 0, 0, 1463, 1426, 1,
		0, 0, 0, 1463, 1429, 1, 0, 0, 0, 1463, 1432, 1, 0, 0, 0, 1463, 1435, 1,
		0, 0, 0, 1463, 1438, 1, 0, 0, 0, 1463, 1441, 1, 0, 0, 0, 1463, 1444, 1,
		0, 0, 0, 1463, 1449, 1, 0, 0, 0, 1463, 1458, 1, 0, 0, 0, 1463, 1460, 1,
		0, 0, 0, 1464, 1467, 1, 0, 0, 0, 1465, 1463, 1, 0, 0, 0, 1465, 1466, 1,
		0, 0, 0, 1466, 181, 1, 0, 0, 0, 1467, 1465, 1, 0, 0, 0, 1468, 1469, 6,
		91, -1, 0, 1469, 1470, 3, 186, 93, 0, 1470, 1488, 1, 0, 0, 0, 1471, 1472,
		10, 3, 0, 0, 1472, 1474, 5, 217, 0, 0, 1473, 1475, 3, 178, 89, 0, 1474,
		1473, 1, 0, 0, 0, 1474, 1475, 1, 0, 0, 0, 1475, 1476, 1, 0, 0, 0, 1476,
		1487, 5, 218, 0, 0, 1477, 1478, 10, 2, 0, 0, 1478, 1480, 5, 219, 0, 0,
		1479, 1481, 3, 178, 89, 0, 1480, 1479, 1, 0, 0, 0, 1480, 1481, 1, 0, 0,
		0, 1481, 1482, 1, 0, 0, 0, 1482, 1487, 5, 220, 0, 0, 1483, 1484, 10, 1,
		0, 0, 1484, 1485, 5, 196, 0, 0, 1485, 1487, 3, 176, 88, 0, 1486, 1471,
		1, 0, 0, 0, 1486, 1477, 1, 0, 0, 0, 1486, 1483, 1, 0, 0, 0, 1487, 1490,
		1, 0, 0, 0, 1488, 1486, 1, 0, 0, 0, 1488, 1489, 1, 0, 0, 0, 1489, 183,
		1, 0, 0, 0, 1490, 1488, 1, 0, 0, 0, 1491, 1492, 5, 58, 0, 0, 1492, 1493,
		5, 215, 0, 0, 1493, 1494, 3, 246, 123, 0, 1494, 1495, 5, 221, 0, 0, 1495,
		1496, 3, 180, 90, 0, 1496, 1497, 5, 216, 0, 0, 1497, 1504, 1, 0, 0, 0,
		1498, 1499, 5, 59, 0, 0, 1499, 1500, 5, 215, 0, 0, 1500, 1501, 3, 246,
		123, 0, 1501, 1502, 5, 216, 0, 0, 1502, 1504, 1, 0, 0, 0, 1503, 1491, 1,
		0, 0, 0, 1503, 1498, 1, 0, 0, 0, 1504, 185, 1, 0, 0, 0, 1505, 1522, 5,
		228, 0, 0, 1506, 1508, 5, 212, 0, 0, 1507, 1506, 1, 0, 0, 0, 1508, 1509,
		1, 0, 0, 0, 1509, 1507, 1, 0, 0, 0, 1509, 1510, 1, 0, 0, 0, 1510, 1511,
		1, 0, 0, 0, 1511, 1522, 5, 228, 0, 0, 1512, 1514, 5, 212, 0, 0, 1513, 1512,
		1, 0, 0, 0, 1514, 1515, 1, 0, 0, 0, 1515, 1513, 1, 0, 0, 0, 1515, 1516,
		1, 0, 0, 0, 1516, 1517, 1, 0, 0, 0, 1517, 1518, 5, 219, 0, 0, 1518, 1519,
		3, 180, 90, 0, 1519, 1520, 5, 220, 0, 0, 1520, 1522, 1, 0, 0, 0, 1521,
		1505, 1, 0, 0, 0, 1521, 1507, 1, 0, 0, 0, 1521, 1513, 1, 0, 0, 0, 1522,
		187, 1, 0, 0, 0, 1523, 1524, 7, 15, 0, 0, 1524, 1525, 3, 180, 90, 0, 1525,
		189, 1, 0, 0, 0, 1526, 1527, 3, 294, 147, 0, 1527, 1529, 5, 215, 0, 0,
		1528, 1530, 3, 214, 107, 0, 1529, 1528, 1, 0, 0, 0, 1529, 1530, 1, 0, 0,
		0, 1530, 1531, 1, 0, 0, 0, 1531, 1532, 5, 216, 0, 0, 1532, 1535, 1, 0,
		0, 0, 1533, 1535, 3, 196, 98, 0, 1534, 1526, 1, 0, 0, 0, 1534, 1533, 1,
		0, 0, 0, 1535, 191, 1, 0, 0, 0, 1536, 1539, 3, 266, 133, 0, 1537, 1539,
		3, 194, 97, 0, 1538, 1536, 1, 0, 0, 0, 1538, 1537, 1, 0, 0, 0, 1539, 193,
		1, 0, 0, 0, 1540, 1541, 5, 45, 0, 0, 1541, 1543, 5, 215, 0, 0, 1542, 1544,
		3, 214, 107, 0, 1543, 1542, 1, 0, 0, 0, 1543, 1544, 1, 0, 0, 0, 1544, 1545,
		1, 0, 0, 0, 1545, 1558, 5, 216, 0, 0, 1546, 1547, 5, 102, 0, 0, 1547, 1549,
		5, 215, 0, 0, 1548, 1550, 3, 214, 107, 0, 1549, 1548, 1, 0, 0, 0, 1549,
		1550, 1, 0, 0, 0, 1550, 1551, 1, 0, 0, 0, 1551, 1558, 5, 216, 0, 0, 1552,
		1554, 5, 217, 0, 0, 1553, 1555, 3, 214, 107, 0, 1554, 1553, 1, 0, 0, 0,
		1554, 1555, 1, 0, 0, 0, 1555, 1556, 1, 0, 0, 0, 1556, 1558, 5, 218, 0,
		0, 1557, 1540, 1, 0, 0, 0, 1557, 1546, 1, 0, 0, 0, 1557, 1552, 1, 0, 0,
		0, 1558, 195, 1, 0, 0, 0, 1559, 1563, 5, 217, 0, 0, 1560, 1562, 5, 221,
		0, 0, 1561, 1560, 1, 0, 0, 0, 1562, 1565, 1, 0, 0, 0, 1563, 1561, 1, 0,
		0, 0, 1563, 1564, 1, 0, 0, 0, 1564, 1566, 1, 0, 0, 0, 1565, 1563, 1, 0,
		0, 0, 1566, 1575, 3, 198, 99, 0, 1567, 1569, 5, 221, 0, 0, 1568, 1567,
		1, 0, 0, 0, 1569, 1570, 1, 0, 0, 0, 1570, 1568, 1, 0, 0, 0, 1570, 1571,
		1, 0, 0, 0, 1571, 1572, 1, 0, 0, 0, 1572, 1574, 3, 198, 99, 0, 1573, 1568,
		1, 0, 0, 0, 1574, 1577, 1, 0, 0, 0, 1575, 1573, 1, 0, 0, 0, 1575, 1576,
		1, 0, 0, 0, 1576, 1581, 1, 0, 0, 0, 1577, 1575, 1, 0, 0, 0, 1578, 1580,
		5, 221, 0, 0, 1579, 1578, 1, 0, 0, 0, 1580, 1583, 1, 0, 0, 0, 1581, 1579,
		1, 0, 0, 0, 1581, 1582, 1, 0, 0, 0, 1582, 1584, 1, 0, 0, 0, 1583, 1581,
		1, 0, 0, 0, 1584, 1585, 5, 218, 0, 0, 1585, 1605, 1, 0, 0, 0, 1586, 1587,
		5, 217, 0, 0, 1587, 1596, 3, 200, 100, 0, 1588, 1590, 5, 221, 0, 0, 1589,
		1588, 1, 0, 0, 0, 1590, 1591, 1, 0, 0, 0, 1591, 1589, 1, 0, 0, 0, 1591,
		1592, 1, 0, 0, 0, 1592, 1593, 1, 0, 0, 0, 1593, 1595, 3, 200, 100, 0, 1594,
		1589, 1, 0, 0, 0, 1595, 1598, 1, 0, 0, 0, 1596, 1594, 1, 0, 0, 0, 1596,
		1597, 1, 0, 0, 0, 1597, 1600, 1, 0, 0, 0, 1598, 1596, 1, 0, 0, 0, 1599,
		1601, 5, 221, 0, 0, 1600, 1599, 1, 0, 0, 0, 1600, 1601, 1, 0, 0, 0, 1601,
		1602, 1, 0, 0, 0, 1602, 1603, 5, 218, 0, 0, 1603, 1605, 1, 0, 0, 0, 1604,
		1559, 1, 0, 0, 0, 1604, 1586, 1, 0, 0, 0, 1605, 197, 1, 0, 0, 0, 1606,
		1608, 5, 201, 0, 0, 1607, 1606, 1, 0, 0, 0, 1607, 1608, 1, 0, 0, 0, 1608,
		1609, 1, 0, 0, 0, 1609, 1610, 3, 266, 133, 0, 1610, 199, 1, 0, 0, 0, 1611,
		1612, 3, 180, 90, 0, 1612, 1613, 5, 166, 0, 0, 1613, 1615, 1, 0, 0, 0,
		1614, 1611, 1, 0, 0, 0, 1614, 1615, 1, 0, 0, 0, 1615, 1617, 1, 0, 0, 0,
		1616, 1618, 5, 201, 0, 0, 1617, 1616, 1, 0, 0, 0, 1617, 1618, 1, 0, 0,
		0, 1618, 1619, 1, 0, 0, 0, 1619, 1620, 3, 266, 133, 0, 1620, 201, 1, 0,
		0, 0, 1621, 1623, 5, 122, 0, 0, 1622, 1621, 1, 0, 0, 0, 1622, 1623, 1,
		0, 0, 0, 1623, 1624, 1, 0, 0, 0, 1624, 1626, 5, 86, 0, 0, 1625, 1627, 5,
		201, 0, 0, 1626, 1625, 1, 0, 0, 0, 1626, 1627, 1, 0, 0, 0, 1627, 1628,
		1, 0, 0, 0, 1628, 1629, 5, 215, 0, 0, 1629, 1630, 3, 118, 59, 0, 1630,
		1632, 5, 216, 0, 0, 1631, 1633, 3, 218, 109, 0, 1632, 1631, 1, 0, 0, 0,
		1632, 1633, 1, 0, 0, 0, 1633, 1636, 1, 0, 0, 0, 1634, 1635, 5, 222, 0,
		0, 1635, 1637, 3, 122, 61, 0, 1636, 1634, 1, 0, 0, 0, 1636, 1637, 1, 0,
		0, 0, 1637, 1638, 1, 0, 0, 0, 1638, 1639, 3, 58, 29, 0, 1639, 1648, 1,
		0, 0, 0, 1640, 1641, 5, 137, 0, 0, 1641, 1642, 5, 215, 0, 0, 1642, 1643,
		3, 118, 59, 0, 1643, 1644, 5, 216, 0, 0, 1644, 1645, 5, 166, 0, 0, 1645,
		1646, 3, 180, 90, 0, 1646, 1648, 1, 0, 0, 0, 1647, 1622, 1, 0, 0, 0, 1647,
		1640, 1, 0, 0, 0, 1648, 203, 1, 0, 0, 0, 1649, 1650, 5, 106, 0, 0, 1650,
		1651, 5, 215, 0, 0, 1651, 1652, 3, 180, 90, 0, 1652, 1653, 5, 216, 0, 0,
		1653, 1654, 5, 219, 0, 0, 1654, 1659, 3, 206, 103, 0, 1655, 1656, 5, 221,
		0, 0, 1656, 1658, 3, 206, 103, 0, 1657, 1655, 1, 0, 0, 0, 1658, 1661, 1,
		0, 0, 0, 1659, 1657, 1, 0, 0, 0, 1659, 1660, 1, 0, 0, 0, 1660, 1663, 1,
		0, 0, 0, 1661, 1659, 1, 0, 0, 0, 1662, 1664, 5, 221, 0, 0, 1663, 1662,
		1, 0, 0, 0, 1663, 1664, 1, 0, 0, 0, 1664, 1665, 1, 0, 0, 0, 1665, 1666,
		5, 220, 0, 0, 1666, 205, 1, 0, 0, 0, 1667, 1672, 3, 180, 90, 0, 1668, 1669,
		5, 221, 0, 0, 1669, 1671, 3, 180, 90, 0, 1670, 1668, 1, 0, 0, 0, 1671,
		1674, 1, 0, 0, 0, 1672, 1670, 1, 0, 0, 0, 1672, 1673, 1, 0, 0, 0, 1673,
		1675, 1, 0, 0, 0, 1674, 1672, 1, 0, 0, 0, 1675, 1676, 5, 166, 0, 0, 1676,
		1677, 3, 180, 90, 0, 1677, 207, 1, 0, 0, 0, 1678, 1679, 5, 108, 0, 0, 1679,
		1686, 3, 226, 113, 0, 1680, 1681, 5, 108, 0, 0, 1681, 1683, 3, 224, 112,
		0, 1682, 1684, 3, 238, 119, 0, 1683, 1682, 1, 0, 0, 0, 1683, 1684, 1, 0,
		0, 0, 1684, 1686, 1, 0, 0, 0, 1685, 1678, 1, 0, 0, 0, 1685, 1680, 1, 0,
		0, 0, 1686, 209, 1, 0, 0, 0, 1687, 1688, 7, 16, 0, 0, 1688, 211, 1, 0,
		0, 0, 1689, 1697, 5, 135, 0, 0, 1690, 1693, 3, 180, 90, 0, 1691, 1692,
		5, 166, 0, 0, 1692, 1694, 3, 180, 90, 0, 1693, 1691, 1, 0, 0, 0, 1693,
		1694, 1, 0, 0, 0, 1694, 1698, 1, 0, 0, 0, 1695, 1696, 5, 136, 0, 0, 1696,
		1698, 3, 180, 90, 0, 1697, 1690, 1, 0, 0, 0, 1697, 1695, 1, 0, 0, 0, 1698,
		213, 1, 0, 0, 0, 1699, 1704, 3, 216, 108, 0, 1700, 1701, 5, 221, 0, 0,
		1701, 1703, 3, 216, 108, 0, 1702, 1700, 1, 0, 0, 0, 1703, 1706, 1, 0, 0,
		0, 1704, 1702, 1, 0, 0, 0, 1704, 1705, 1, 0, 0, 0, 1705, 1708, 1, 0, 0,
		0, 1706, 1704, 1, 0, 0, 0, 1707, 1709, 5, 221, 0, 0, 1708, 1707, 1, 0,
		0, 0, 1708, 1709, 1, 0, 0, 0, 1709, 215, 1, 0, 0, 0, 1710, 1713, 3, 180,
		90, 0, 1711, 1712, 5, 166, 0, 0, 1712, 1714, 3, 180, 90, 0, 1713, 1711,
		1, 0, 0, 0, 1713, 1714, 1, 0, 0, 0, 1714, 1723, 1, 0, 0, 0, 1715, 1716,
		3, 180, 90, 0, 1716, 1717, 5, 166, 0, 0, 1717, 1719, 1, 0, 0, 0, 1718,
		1715, 1, 0, 0, 0, 1718, 1719, 1, 0, 0, 0, 1719, 1720, 1, 0, 0, 0, 1720,
		1721, 5, 201, 0, 0, 1721, 1723, 3, 266, 133, 0, 1722, 1710, 1, 0, 0, 0,
		1722, 1718, 1, 0, 0, 0, 1723, 217, 1, 0, 0, 0, 1724, 1725, 5, 132, 0, 0,
		1725, 1726, 5, 215, 0, 0, 1726, 1731, 3, 220, 110, 0, 1727, 1728, 5, 221,
		0, 0, 1728, 1730, 3, 220, 110, 0, 1729, 1727, 1, 0, 0, 0, 1730, 1733, 1,
		0, 0, 0, 1731, 1729, 1, 0, 0, 0, 1731, 1732, 1, 0, 0, 0, 1732, 1734, 1,
		0, 0, 0, 1733, 1731, 1, 0, 0, 0, 1734, 1735, 5, 216, 0, 0, 1735, 219, 1,
		0, 0, 0, 1736, 1738, 5, 201, 0, 0, 1737, 1736, 1, 0, 0, 0, 1737, 1738,
		1, 0, 0, 0, 1738, 1739, 1, 0, 0, 0, 1739, 1740, 5, 228, 0, 0, 1740, 221,
		1, 0, 0, 0, 1741, 1744, 3, 230, 115, 0, 1742, 1744, 5, 122, 0, 0, 1743,
		1741, 1, 0, 0, 0, 1743, 1742, 1, 0, 0, 0, 1744, 223, 1, 0, 0, 0, 1745,
		1748, 3, 230, 115, 0, 1746, 1748, 3, 228, 114, 0, 1747, 1745, 1, 0, 0,
		0, 1747, 1746, 1, 0, 0, 0, 1748, 1753, 1, 0, 0, 0, 1749, 1753, 3, 304,
		152, 0, 1750, 1753, 5, 122, 0, 0, 1751, 1753, 3, 226, 113, 0, 1752, 1747,
		1, 0, 0, 0, 1752, 1749, 1, 0, 0, 0, 1752, 1750, 1, 0, 0, 0, 1752, 1751,
		1, 0, 0, 0, 1753, 225, 1, 0, 0, 0, 1754, 1756, 3, 42, 21, 0, 1755, 1754,
		1, 0, 0, 0, 1755, 1756, 1, 0, 0, 0, 1756, 1758, 1, 0, 0, 0, 1757, 1759,
		5, 114, 0, 0, 1758, 1757, 1, 0, 0, 0, 1758, 1759, 1, 0, 0, 0, 1759, 1761,
		1, 0, 0, 0, 1760, 1762, 3, 292, 146, 0, 1761, 1760, 1, 0, 0, 0, 1761, 1762,
		1, 0, 0, 0, 1762, 1764, 1, 0, 0, 0, 1763, 1765, 5, 112, 0, 0, 1764, 1763,
		1, 0, 0, 0, 1764, 1765, 1, 0, 0, 0, 1765, 1781, 1, 0, 0, 0, 1766, 1769,
		3, 30, 15, 0, 1767, 1768, 5, 80, 0, 0, 1768, 1770, 3, 222, 111, 0, 1769,
		1767, 1, 0, 0, 0, 1769, 1770, 1, 0, 0, 0, 1770, 1773, 1, 0, 0, 0, 1771,
		1772, 5, 90, 0, 0, 1772, 1774, 3, 32, 16, 0, 1773, 1771, 1, 0, 0, 0, 1773,
		1774, 1, 0, 0, 0, 1774, 1782, 1, 0, 0, 0, 1775, 1776, 5, 100, 0, 0, 1776,
		1779, 3, 294, 147, 0, 1777, 1778, 5, 80, 0, 0, 1778, 1780, 3, 32, 16, 0,
		1779, 1777, 1, 0, 0, 0, 1779, 1780, 1, 0, 0, 0, 1780, 1782, 1, 0, 0, 0,
		1781, 1766, 1, 0, 0, 0, 1781, 1775, 1, 0, 0, 0, 1782, 1784, 1, 0, 0, 0,
		1783, 1785, 3, 238, 119, 0, 1784, 1783, 1, 0, 0, 0, 1784, 1785, 1, 0, 0,
		0, 1785, 1786, 1, 0, 0, 0, 1786, 1790, 5, 219, 0, 0, 1787, 1789, 3, 132,
		66, 0, 1788, 1787, 1, 0, 0, 0, 1789, 1792, 1, 0, 0, 0, 1790, 1788, 1, 0,
		0, 0, 1790, 1791, 1, 0, 0, 0, 1791, 1793, 1, 0, 0, 0, 1792, 1790, 1, 0,
		0, 0, 1793, 1794, 5, 220, 0, 0, 1794, 227, 1, 0, 0, 0, 1795, 1800, 3, 278,
		139, 0, 1796, 1797, 5, 196, 0, 0, 1797, 1799, 3, 280, 140, 0, 1798, 1796,
		1, 0, 0, 0, 1799, 1802, 1, 0, 0, 0, 1800, 1798, 1, 0, 0, 0, 1800, 1801,
		1, 0, 0, 0, 1801, 229, 1, 0, 0, 0, 1802, 1800, 1, 0, 0, 0, 1803, 1805,
		5, 107, 0, 0, 1804, 1803, 1, 0, 0, 0, 1804, 1805, 1, 0, 0, 0, 1805, 1807,
		1, 0, 0, 0, 1806, 1808, 5, 197, 0, 0, 1807, 1806, 1, 0, 0, 0, 1807, 1808,
		1, 0, 0, 0, 1808, 1809, 1, 0, 0, 0, 1809, 1810, 3, 232, 116, 0, 1810, 231,
		1, 0, 0, 0, 1811, 1824, 3, 294, 147, 0, 1812, 1815, 3, 294, 147, 0, 1813,
		1814, 5, 197, 0, 0, 1814, 1816, 3, 294, 147, 0, 1815, 1813, 1, 0, 0, 0,
		1816, 1817, 1, 0, 0, 0, 1817, 1815, 1, 0, 0, 0, 1817, 1818, 1, 0, 0, 0,
		1818, 1821, 1, 0, 0, 0, 1819, 1820, 5, 197, 0, 0, 1820, 1822, 3, 234, 117,
		0, 1821, 1819, 1, 0, 0, 0, 1821, 1822, 1, 0, 0, 0, 1822, 1824, 1, 0, 0,
		0, 1823, 1811, 1, 0, 0, 0, 1823, 1812, 1, 0, 0, 0, 1824, 233, 1, 0, 0,
		0, 1825, 1828, 3, 294, 147, 0, 1826, 1827, 5, 46, 0, 0, 1827, 1829, 3,
		294, 147, 0, 1828, 1826, 1, 0, 0, 0, 1828, 1829, 1, 0, 0, 0, 1829, 1845,
		1, 0, 0, 0, 1830, 1831, 5, 219, 0, 0, 1831, 1836, 3, 234, 117, 0, 1832,
		1833, 5, 221, 0, 0, 1833, 1835, 3, 234, 117, 0, 1834, 1832, 1, 0, 0, 0,
		1835, 1838, 1, 0, 0, 0, 1836, 1834, 1, 0, 0, 0, 1836, 1837, 1, 0, 0, 0,
		1837, 1840, 1, 0, 0, 0, 1838, 1836, 1, 0, 0, 0, 1839, 1841, 5, 221, 0,
		0, 1840, 1839, 1, 0, 0, 0, 1840, 1841, 1, 0, 0, 0, 1841, 1842, 1, 0, 0,
		0, 1842, 1843, 5, 220, 0, 0, 1843, 1845, 1, 0, 0, 0, 1844, 1825, 1, 0,
		0, 0, 1844, 1830, 1, 0, 0, 0, 1845, 235, 1, 0, 0, 0, 1846, 1851, 3, 230,
		115, 0, 1847, 1848, 5, 221, 0, 0, 1848, 1850, 3, 230, 115, 0, 1849, 1847,
		1, 0, 0, 0, 1850, 1853, 1, 0, 0, 0, 1851, 1849, 1, 0, 0, 0, 1851, 1852,
		1, 0, 0, 0, 1852, 237, 1, 0, 0, 0, 1853, 1851, 1, 0, 0, 0, 1854, 1856,
		5, 215, 0, 0, 1855, 1857, 3, 240, 120, 0, 1856, 1855, 1, 0, 0, 0, 1856,
		1857, 1, 0, 0, 0, 1857, 1862, 1, 0, 0, 0, 1858, 1859, 5, 221, 0, 0, 1859,
		1861, 3, 240, 120, 0, 1860, 1858, 1, 0, 0, 0, 1861, 1864, 1, 0, 0, 0, 1862,
		1860, 1, 0, 0, 0, 1862, 1863, 1, 0, 0, 0, 1863, 1866, 1, 0, 0, 0, 1864,
		1862, 1, 0, 0, 0, 1865, 1867, 5, 221, 0, 0, 1866, 1865, 1, 0, 0, 0, 1866,
		1867, 1, 0, 0, 0, 1867, 1868, 1, 0, 0, 0, 1868, 1869, 5, 216, 0, 0, 1869,
		239, 1, 0, 0, 0, 1870, 1872, 3, 242, 121, 0, 1871, 1870, 1, 0, 0, 0, 1871,
		1872, 1, 0, 0, 0, 1872, 1874, 1, 0, 0, 0, 1873, 1875, 5, 198, 0, 0, 1874,
		1873, 1, 0, 0, 0, 1874, 1875, 1, 0, 0, 0, 1875, 1876, 1, 0, 0, 0, 1876,
		1884, 3, 180, 90, 0, 1877, 1878, 5, 219, 0, 0, 1878, 1879, 3, 182, 91,
		0, 1879, 1880, 5, 220, 0, 0, 1880, 1884, 1, 0, 0, 0, 1881, 1882, 5, 201,
		0, 0, 1882, 1884, 3, 266, 133, 0, 1883, 1871, 1, 0, 0, 0, 1883, 1877, 1,
		0, 0, 0, 1883, 1881, 1, 0, 0, 0, 1884, 241, 1, 0, 0, 0, 1885, 1886, 3,
		294, 147, 0, 1886, 1887, 5, 222, 0, 0, 1887, 243, 1, 0, 0, 0, 1888, 1893,
		3, 246, 123, 0, 1889, 1890, 5, 213, 0, 0, 1890, 1892, 3, 246, 123, 0, 1891,
		1889, 1, 0, 0, 0, 1892, 1895, 1, 0, 0, 0, 1893, 1891, 1, 0, 0, 0, 1893,
		1894, 1, 0, 0, 0, 1894, 1917, 1, 0, 0, 0, 1895, 1893, 1, 0, 0, 0, 1896,
		1897, 5, 45, 0, 0, 1897, 1902, 5, 215, 0, 0, 1898, 1900, 3, 214, 107, 0,
		1899, 1901, 5, 221, 0, 0, 1900, 1899, 1, 0, 0, 0, 1900, 1901, 1, 0, 0,
		0, 1901, 1903, 1, 0, 0, 0, 1902, 1898, 1, 0, 0, 0, 1902, 1903, 1, 0, 0,
		0, 1903, 1904, 1, 0, 0, 0, 1904, 1917, 5, 216, 0, 0, 1905, 1910, 5, 217,
		0, 0, 1906, 1908, 3, 214, 107, 0, 1907, 1909, 5, 221, 0, 0, 1908, 1907,
		1, 0, 0, 0, 1908, 1909, 1, 0, 0, 0, 1909, 1911, 1, 0, 0, 0, 1910, 1906,
		1, 0, 0, 0, 1910, 1911, 1, 0, 0, 0, 1911, 1912, 1, 0, 0, 0, 1912, 1917,
		5, 218, 0, 0, 1913, 1914, 7, 17, 0, 0, 1914, 1917, 3, 244, 122, 0, 1915,
		1917, 3, 180, 90, 0, 1916, 1888, 1, 0, 0, 0, 1916, 1896, 1, 0, 0, 0, 1916,
		1905, 1, 0, 0, 0, 1916, 1913, 1, 0, 0, 0, 1916, 1915, 1, 0, 0, 0, 1917,
		245, 1, 0, 0, 0, 1918, 1921, 3, 258, 129, 0, 1919, 1921, 3, 248, 124, 0,
		1920, 1918, 1, 0, 0, 0, 1920, 1919, 1, 0, 0, 0, 1921, 247, 1, 0, 0, 0,
		1922, 1926, 5, 109, 0, 0, 1923, 1926, 3, 250, 125, 0, 1924, 1926, 3, 300,
		150, 0, 1925, 1922, 1, 0, 0, 0, 1925, 1923, 1, 0, 0, 0, 1925, 1924, 1,
		0, 0, 0, 1926, 249, 1, 0, 0, 0, 1927, 1932, 5, 232, 0, 0, 1928, 1932, 5,
		49, 0, 0, 1929, 1932, 3, 252, 126, 0, 1930, 1932, 3, 256, 128, 0, 1931,
		1927, 1, 0, 0, 0, 1931, 1928, 1, 0, 0, 0, 1931, 1929, 1, 0, 0, 0, 1931,
		1930, 1, 0, 0, 0, 1932, 251, 1, 0, 0, 0, 1933, 1934, 7, 18, 0, 0, 1934,
		253, 1, 0, 0, 0, 1935, 1936, 7, 19, 0, 0, 1936, 1941, 5, 195, 0, 0, 1937,
		1942, 3, 294, 147, 0, 1938, 1942, 5, 145, 0, 0, 1939, 1942, 5, 141, 0,
		0, 1940, 1942, 5, 142, 0, 0, 1941, 1937, 1, 0, 0, 0, 1941, 1938, 1, 0,
		0, 0, 1941, 1939, 1, 0, 0, 0, 1941, 1940, 1, 0, 0, 0, 1942, 1954, 1, 0,
		0, 0, 1943, 1947, 3, 222, 111, 0, 1944, 1947, 3, 284, 142, 0, 1945, 1947,
		3, 258, 129, 0, 1946, 1943, 1, 0, 0, 0, 1946, 1944, 1, 0, 0, 0, 1946, 1945,
		1, 0, 0, 0, 1947, 1948, 1, 0, 0, 0, 1948, 1951, 5, 195, 0, 0, 1949, 1952,
		3, 294, 147, 0, 1950, 1952, 3, 284, 142, 0, 1951, 1949, 1, 0, 0, 0, 1951,
		1950, 1, 0, 0, 0, 1952, 1954, 1, 0, 0, 0, 1953, 1935, 1, 0, 0, 0, 1953,
		1946, 1, 0, 0, 0, 1954, 255, 1, 0, 0, 0, 1955, 1956, 5, 229, 0, 0, 1956,
		257, 1, 0, 0, 0, 1957, 1958, 5, 192, 0, 0, 1958, 1959, 5, 246, 0, 0, 1959,
		1961, 5, 247, 0, 0, 1960, 1962, 3, 260, 130, 0, 1961, 1960, 1, 0, 0, 0,
		1961, 1962, 1, 0, 0, 0, 1962, 1963, 1, 0, 0, 0, 1963, 1974, 5, 248, 0,
		0, 1964, 1974, 5, 236, 0, 0, 1965, 1969, 5, 237, 0, 0, 1966, 1968, 3, 262,
		131, 0, 1967, 1966, 1, 0, 0, 0, 1968, 1971, 1, 0, 0, 0, 1969, 1967, 1,
		0, 0, 0, 1969, 1970, 1, 0, 0, 0, 1970, 1972, 1, 0, 0, 0, 1971, 1969, 1,
		0, 0, 0, 1972, 1974, 5, 237, 0, 0, 1973, 1957, 1, 0, 0, 0, 1973, 1964,
		1, 0, 0, 0, 1973, 1965, 1, 0, 0, 0, 1974, 259, 1, 0, 0, 0, 1975, 1977,
		5, 249, 0, 0, 1976, 1975, 1, 0, 0, 0, 1977, 1978, 1, 0, 0, 0, 1978, 1976,
		1, 0, 0, 0, 1978, 1979, 1, 0, 0, 0, 1979, 261, 1, 0, 0, 0, 1980, 1984,
		5, 241, 0, 0, 1981, 1984, 5, 240, 0, 0, 1982, 1984, 3, 266, 133, 0, 1983,
		1980, 1, 0, 0, 0, 1983, 1981, 1, 0, 0, 0, 1983, 1982, 1, 0, 0, 0, 1984,
		263, 1, 0, 0, 0, 1985, 1990, 3, 266, 133, 0, 1986, 1987, 5, 221, 0, 0,
		1987, 1989, 3, 266, 133, 0, 1988, 1986, 1, 0, 0, 0, 1989, 1992, 1, 0, 0,
		0, 1990, 1988, 1, 0, 0, 0, 1990, 1991, 1, 0, 0, 0, 1991, 265, 1, 0, 0,
		0, 1992, 1990, 1, 0, 0, 0, 1993, 1997, 3, 268, 134, 0, 1994, 1996, 3, 270,
		135, 0, 1995, 1994, 1, 0, 0, 0, 1996, 1999, 1, 0, 0, 0, 1997, 1995, 1,
		0, 0, 0, 1997, 1998, 1, 0, 0, 0, 1998, 2002, 1, 0, 0, 0, 1999, 1997, 1,
		0, 0, 0, 2000, 2002, 3, 194, 97, 0, 2001, 1993, 1, 0, 0, 0, 2001, 2000,
		1, 0, 0, 0, 2002, 267, 1, 0, 0, 0, 2003, 2010, 3, 278, 139, 0, 2004, 2010,
		3, 272, 136, 0, 2005, 2006, 5, 215, 0, 0, 2006, 2007, 3, 208, 104, 0, 2007,
		2008, 5, 216, 0, 0, 2008, 2010, 1, 0, 0, 0, 2009, 2003, 1, 0, 0, 0, 2009,
		2004, 1, 0, 0, 0, 2009, 2005, 1, 0, 0, 0, 2010, 269, 1, 0, 0, 0, 2011,
		2012, 5, 196, 0, 0, 2012, 2014, 3, 280, 140, 0, 2013, 2015, 3, 276, 138,
		0, 2014, 2013, 1, 0, 0, 0, 2014, 2015, 1, 0, 0, 0, 2015, 271, 1, 0, 0,
		0, 2016, 2017, 3, 274, 137, 0, 2017, 2018, 3, 276, 138, 0, 2018, 273, 1,
		0, 0, 0, 2019, 2025, 3, 230, 115, 0, 2020, 2025, 3, 254, 127, 0, 2021,
		2025, 3, 278, 139, 0, 2022, 2025, 3, 166, 83, 0, 2023, 2025, 5, 229, 0,
		0, 2024, 2019, 1, 0, 0, 0, 2024, 2020, 1, 0, 0, 0, 2024, 2021, 1, 0, 0,
		0, 2024, 2022, 1, 0, 0, 0, 2024, 2023, 1, 0, 0, 0, 2025, 275, 1, 0, 0,
		0, 2026, 2028, 3, 238, 119, 0, 2027, 2026, 1, 0, 0, 0, 2028, 2029, 1, 0,
		0, 0, 2029, 2027, 1, 0, 0, 0, 2029, 2030, 1, 0, 0, 0, 2030, 2034, 1, 0,
		0, 0, 2031, 2033, 3, 286, 143, 0, 2032, 2031, 1, 0, 0, 0, 2033, 2036, 1,
		0, 0, 0, 2034, 2032, 1, 0, 0, 0, 2034, 2035, 1, 0, 0, 0, 2035, 277, 1,
		0, 0, 0, 2036, 2034, 1, 0, 0, 0, 2037, 2040, 3, 284, 142, 0, 2038, 2039,
		5, 195, 0, 0, 2039, 2041, 3, 284, 142, 0, 2040, 2038, 1, 0, 0, 0, 2040,
		2041, 1, 0, 0, 0, 2041, 2047, 1, 0, 0, 0, 2042, 2043, 3, 222, 111, 0, 2043,
		2044, 5, 195, 0, 0, 2044, 2045, 3, 284, 142, 0, 2045, 2047, 1, 0, 0, 0,
		2046, 2037, 1, 0, 0, 0, 2046, 2042, 1, 0, 0, 0, 2047, 279, 1, 0, 0, 0,
		2048, 2051, 3, 282, 141, 0, 2049, 2051, 3, 284, 142, 0, 2050, 2048, 1,
		0, 0, 0, 2050, 2049, 1, 0, 0, 0, 2051, 281, 1, 0, 0, 0, 2052, 2058, 3,
		294, 147, 0, 2053, 2054, 5, 219, 0, 0, 2054, 2055, 3, 180, 90, 0, 2055,
		2056, 5, 220, 0, 0, 2056, 2058, 1, 0, 0, 0, 2057, 2052, 1, 0, 0, 0, 2057,
		2053, 1, 0, 0, 0, 2058, 2062, 1, 0, 0, 0, 2059, 2061, 3, 286, 143, 0, 2060,
		2059, 1, 0, 0, 0, 2061, 2064, 1, 0, 0, 0, 2062, 2060, 1, 0, 0, 0, 2062,
		2063, 1, 0, 0, 0, 2063, 283, 1, 0, 0, 0, 2064, 2062, 1, 0, 0, 0, 2065,
		2067, 5, 212, 0, 0, 2066, 2065, 1, 0, 0, 0, 2067, 2070, 1, 0, 0, 0, 2068,
		2066, 1, 0, 0, 0, 2068, 2069, 1, 0, 0, 0, 2069, 2077, 1, 0, 0, 0, 2070,
		2068, 1, 0, 0, 0, 2071, 2078, 5, 228, 0, 0, 2072, 2073, 5, 212, 0, 0, 2073,
		2074, 5, 219, 0, 0, 2074, 2075, 3, 180, 90, 0, 2075, 2076, 5, 220, 0, 0,
		2076, 2078, 1, 0, 0, 0, 2077, 2071, 1, 0, 0, 0, 2077, 2072, 1, 0, 0, 0,
		2078, 2082, 1, 0, 0, 0, 2079, 2081, 3, 286, 143, 0, 2080, 2079, 1, 0, 0,
		0, 2081, 2084, 1, 0, 0, 0, 2082, 2080, 1, 0, 0, 0, 2082, 2083, 1, 0, 0,
		0, 2083, 285, 1, 0, 0, 0, 2084, 2082, 1, 0, 0, 0, 2085, 2087, 5, 217, 0,
		0, 2086, 2088, 3, 180, 90, 0, 2087, 2086, 1, 0, 0, 0, 2087, 2088, 1, 0,
		0, 0, 2088, 2089, 1, 0, 0, 0, 2089, 2095, 5, 218, 0, 0, 2090, 2091, 5,
		219, 0, 0, 2091, 2092, 3, 180, 90, 0, 2092, 2093, 5, 220, 0, 0, 2093, 2095,
		1, 0, 0, 0, 2094, 2085, 1, 0, 0, 0, 2094, 2090, 1, 0, 0, 0, 2095, 287,
		1, 0, 0, 0, 2096, 2098, 3, 290, 145, 0, 2097, 2096, 1, 0, 0, 0, 2097, 2098,
		1, 0, 0, 0, 2098, 2105, 1, 0, 0, 0, 2099, 2101, 5, 221, 0, 0, 2100, 2102,
		3, 290, 145, 0, 2101, 2100, 1, 0, 0, 0, 2101, 2102, 1, 0, 0, 0, 2102, 2104,
		1, 0, 0, 0, 2103, 2099, 1, 0, 0, 0, 2104, 2107, 1, 0, 0, 0, 2105, 2103,
		1, 0, 0, 0, 2105, 2106, 1, 0, 0, 0, 2106, 289, 1, 0, 0, 0, 2107, 2105,
		1, 0, 0, 0, 2108, 2116, 3, 266, 133, 0, 2109, 2110, 5, 102, 0, 0, 2110,
		2111, 5, 215, 0, 0, 2111, 2112, 3, 288, 144, 0, 2112, 2113, 5, 216, 0,
		0, 2113, 2116, 1, 0, 0, 0, 2114, 2116, 3, 216, 108, 0, 2115, 2108, 1, 0,
		0, 0, 2115, 2109, 1, 0, 0, 0, 2115, 2114, 1, 0, 0, 0, 2116, 291, 1, 0,
		0, 0, 2117, 2118, 7, 20, 0, 0, 2118, 293, 1, 0, 0, 0, 2119, 2122, 5, 229,
		0, 0, 2120, 2122, 3, 296, 148, 0, 2121, 2119, 1, 0, 0, 0, 2121, 2120, 1,
		0, 0, 0, 2122, 295, 1, 0, 0, 0, 2123, 2124, 7, 21, 0, 0, 2124, 297, 1,
		0, 0, 0, 2125, 2126, 7, 22, 0, 0, 2126, 299, 1, 0, 0, 0, 2127, 2128, 7,
		23, 0, 0, 2128, 301, 1, 0, 0, 0, 2129, 2130, 7, 24, 0, 0, 2130, 303, 1,
		0, 0, 0, 2131, 2132, 7, 25, 0, 0, 2132, 305, 1, 0, 0, 0, 2133, 2134, 7,
		26, 0, 0, 2134, 307, 1, 0, 0, 0, 269, 309, 314, 321, 326, 329, 355, 359,
		364, 369, 375, 378, 392, 396, 402, 407, 412, 419, 425, 432, 439, 442, 446,
		454, 457, 462, 465, 468, 471, 477, 481, 487, 489, 495, 507, 515, 523, 527,
		532, 538, 543, 549, 556, 563, 568, 574, 604, 618, 622, 631, 635, 640, 666,
		677, 681, 685, 694, 704, 708, 710, 716, 720, 722, 727, 735, 745, 753, 759,
		764, 770, 776, 782, 806, 811, 814, 824, 827, 840, 848, 855, 858, 863, 867,
		876, 880, 906, 911, 918, 925, 933, 936, 942, 946, 949, 954, 958, 961, 964,
		967, 975, 982, 991, 1004, 1016, 1026, 1030, 1037, 1043, 1046, 1050, 1057,
		1063, 1066, 1070, 1078, 1082, 1089, 1093, 1097, 1110, 1113, 1120, 1127,
		1131, 1137, 1141, 1146, 1151, 1158, 1166, 1175, 1179, 1185, 1194, 1199,
		1206, 1213, 1221, 1230, 1237, 1255, 1273, 1282, 1287, 1298, 1302, 1341,
		1344, 1384, 1422, 1451, 1455, 1463, 1465, 1474, 1480, 1486, 1488, 1503,
		1509, 1515, 1521, 1529, 1534, 1538, 1543, 1549, 1554, 1557, 1563, 1570,
		1575, 1581, 1591, 1596, 1600, 1604, 1607, 1614, 1617, 1622, 1626, 1632,
		1636, 1647, 1659, 1663, 1672, 1683, 1685, 1693, 1697, 1704, 1708, 1713,
		1718, 1722, 1731, 1737, 1743, 1747, 1752, 1755, 1758, 1761, 1764, 1769,
		1773, 1779, 1781, 1784, 1790, 1800, 1804, 1807, 1817, 1821, 1823, 1828,
		1836, 1840, 1844, 1851, 1856, 1862, 1866, 1871, 1874, 1883, 1893, 1900,
		1902, 1908, 1910, 1916, 1920, 1925, 1931, 1941, 1946, 1951, 1953, 1961,
		1969, 1973, 1978, 1983, 1990, 1997, 2001, 2009, 2014, 2024, 2029, 2034,
		2040, 2046, 2050, 2057, 2062, 2068, 2077, 2082, 2087, 2094, 2097, 2101,
		2105, 2115, 2121,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// PHPParserInit initializes any static state used to implement PHPParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewPHPParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func PHPParserInit() {
	staticData := &phpparserParserStaticData
	staticData.once.Do(phpparserParserInit)
}

// NewPHPParser produces a new parser instance for the optional input antlr.TokenStream.
func NewPHPParser(input antlr.TokenStream) *PHPParser {
	PHPParserInit()
	this := new(PHPParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &phpparserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	this.RuleNames = staticData.ruleNames
	this.LiteralNames = staticData.literalNames
	this.SymbolicNames = staticData.symbolicNames
	this.GrammarFileName = "java-escape"

	return this
}

// PHPParser tokens.
const (
	PHPParserEOF                        = antlr.TokenEOF
	PHPParserSeaWhitespace              = 1
	PHPParserHtmlText                   = 2
	PHPParserXmlStart                   = 3
	PHPParserPHPStart                   = 4
	PHPParserHtmlScriptOpen             = 5
	PHPParserHtmlStyleOpen              = 6
	PHPParserHtmlComment                = 7
	PHPParserHtmlDtd                    = 8
	PHPParserHtmlOpen                   = 9
	PHPParserShebang                    = 10
	PHPParserError                      = 11
	PHPParserXmlText                    = 12
	PHPParserXmlClose                   = 13
	PHPParserPHPStartInside             = 14
	PHPParserHtmlClose                  = 15
	PHPParserHtmlSlashClose             = 16
	PHPParserHtmlSlash                  = 17
	PHPParserHtmlEquals                 = 18
	PHPParserHtmlStartQuoteString       = 19
	PHPParserHtmlStartDoubleQuoteString = 20
	PHPParserHtmlHex                    = 21
	PHPParserHtmlDecimal                = 22
	PHPParserHtmlSpace                  = 23
	PHPParserHtmlName                   = 24
	PHPParserErrorInside                = 25
	PHPParserPHPStartInsideQuoteString  = 26
	PHPParserHtmlEndQuoteString         = 27
	PHPParserHtmlQuoteString            = 28
	PHPParserErrorHtmlQuote             = 29
	PHPParserPHPStartDoubleQuoteString  = 30
	PHPParserHtmlEndDoubleQuoteString   = 31
	PHPParserHtmlDoubleQuoteString      = 32
	PHPParserErrorHtmlDoubleQuote       = 33
	PHPParserScriptText                 = 34
	PHPParserHtmlScriptClose            = 35
	PHPParserPHPStartInsideScript       = 36
	PHPParserStyleBody                  = 37
	PHPParserPHPEnd                     = 38
	PHPParserWhitespace                 = 39
	PHPParserMultiLineComment           = 40
	PHPParserSingleLineComment          = 41
	PHPParserShellStyleComment          = 42
	PHPParserAttributeStart             = 43
	PHPParserAbstract                   = 44
	PHPParserArray                      = 45
	PHPParserAs                         = 46
	PHPParserBinaryCast                 = 47
	PHPParserBoolType                   = 48
	PHPParserBooleanConstant            = 49
	PHPParserBreak                      = 50
	PHPParserCallable                   = 51
	PHPParserCase                       = 52
	PHPParserCatch                      = 53
	PHPParserClass                      = 54
	PHPParserClone                      = 55
	PHPParserConst                      = 56
	PHPParserContinue                   = 57
	PHPParserDefine                     = 58
	PHPParserDefined                    = 59
	PHPParserDeclare                    = 60
	PHPParserDefault                    = 61
	PHPParserDo                         = 62
	PHPParserDoubleCast                 = 63
	PHPParserDoubleType                 = 64
	PHPParserEcho                       = 65
	PHPParserElse                       = 66
	PHPParserElseIf                     = 67
	PHPParserEmpty                      = 68
	PHPParserEnum_                      = 69
	PHPParserEndDeclare                 = 70
	PHPParserEndFor                     = 71
	PHPParserEndForeach                 = 72
	PHPParserEndIf                      = 73
	PHPParserEndSwitch                  = 74
	PHPParserEndWhile                   = 75
	PHPParserEval                       = 76
	PHPParserAssert                     = 77
	PHPParserDie                        = 78
	PHPParserExit                       = 79
	PHPParserExtends                    = 80
	PHPParserFinal                      = 81
	PHPParserFinally                    = 82
	PHPParserFloatCast                  = 83
	PHPParserFor                        = 84
	PHPParserForeach                    = 85
	PHPParserFunction_                  = 86
	PHPParserGlobal                     = 87
	PHPParserGoto                       = 88
	PHPParserIf                         = 89
	PHPParserImplements                 = 90
	PHPParserImport                     = 91
	PHPParserInclude                    = 92
	PHPParserIncludeOnce                = 93
	PHPParserInstanceOf                 = 94
	PHPParserInsteadOf                  = 95
	PHPParserInt8Cast                   = 96
	PHPParserInt16Cast                  = 97
	PHPParserInt64Type                  = 98
	PHPParserIntType                    = 99
	PHPParserInterface                  = 100
	PHPParserIsSet                      = 101
	PHPParserList                       = 102
	PHPParserLogicalAnd                 = 103
	PHPParserLogicalOr                  = 104
	PHPParserLogicalXor                 = 105
	PHPParserMatch_                     = 106
	PHPParserNamespace                  = 107
	PHPParserNew                        = 108
	PHPParserNull                       = 109
	PHPParserObjectType                 = 110
	PHPParserParent_                    = 111
	PHPParserPartial                    = 112
	PHPParserPrint                      = 113
	PHPParserPrivate                    = 114
	PHPParserProtected                  = 115
	PHPParserPublic                     = 116
	PHPParserReadonly                   = 117
	PHPParserRequire                    = 118
	PHPParserRequireOnce                = 119
	PHPParserResource                   = 120
	PHPParserReturn                     = 121
	PHPParserStatic                     = 122
	PHPParserStringType                 = 123
	PHPParserSwitch                     = 124
	PHPParserThrow                      = 125
	PHPParserTrait                      = 126
	PHPParserTry                        = 127
	PHPParserTypeof                     = 128
	PHPParserUintCast                   = 129
	PHPParserUnicodeCast                = 130
	PHPParserUnset                      = 131
	PHPParserUse                        = 132
	PHPParserVar                        = 133
	PHPParserWhile                      = 134
	PHPParserYield                      = 135
	PHPParserFrom                       = 136
	PHPParserLambdaFn                   = 137
	PHPParserTicks                      = 138
	PHPParserEncoding                   = 139
	PHPParserStrictTypes                = 140
	PHPParserGet                        = 141
	PHPParserSet                        = 142
	PHPParserCall                       = 143
	PHPParserCallStatic                 = 144
	PHPParserConstructor                = 145
	PHPParserDestruct                   = 146
	PHPParserWakeup                     = 147
	PHPParserSleep                      = 148
	PHPParserAutoload                   = 149
	PHPParserIsSet__                    = 150
	PHPParserUnset__                    = 151
	PHPParserToString__                 = 152
	PHPParserInvoke                     = 153
	PHPParserSetState                   = 154
	PHPParserClone__                    = 155
	PHPParserDebugInfo                  = 156
	PHPParserNamespace__                = 157
	PHPParserClass__                    = 158
	PHPParserTraic__                    = 159
	PHPParserFunction__                 = 160
	PHPParserMethod__                   = 161
	PHPParserLine__                     = 162
	PHPParserFile__                     = 163
	PHPParserDir__                      = 164
	PHPParserSpaceship                  = 165
	PHPParserDoubleArrow                = 166
	PHPParserInc                        = 167
	PHPParserDec                        = 168
	PHPParserIsIdentical                = 169
	PHPParserIsNoidentical              = 170
	PHPParserIsEqual                    = 171
	PHPParserIsNotEq                    = 172
	PHPParserIsSmallerOrEqual           = 173
	PHPParserIsGreaterOrEqual           = 174
	PHPParserPlusEqual                  = 175
	PHPParserMinusEqual                 = 176
	PHPParserMulEqual                   = 177
	PHPParserPow                        = 178
	PHPParserPowEqual                   = 179
	PHPParserDivEqual                   = 180
	PHPParserConcaequal                 = 181
	PHPParserModEqual                   = 182
	PHPParserShiftLeftEqual             = 183
	PHPParserShiftRightEqual            = 184
	PHPParserAndEqual                   = 185
	PHPParserOrEqual                    = 186
	PHPParserXorEqual                   = 187
	PHPParserBooleanOr                  = 188
	PHPParserBooleanAnd                 = 189
	PHPParserNullCoalescing             = 190
	PHPParserNullCoalescingEqual        = 191
	PHPParserStartNowDoc                = 192
	PHPParserShiftLeft                  = 193
	PHPParserShiftRight                 = 194
	PHPParserDoubleColon                = 195
	PHPParserObjectOperator             = 196
	PHPParserNamespaceSeparator         = 197
	PHPParserEllipsis                   = 198
	PHPParserLess                       = 199
	PHPParserGreater                    = 200
	PHPParserAmpersand                  = 201
	PHPParserPipe                       = 202
	PHPParserBang                       = 203
	PHPParserCaret                      = 204
	PHPParserPlus                       = 205
	PHPParserMinus                      = 206
	PHPParserAsterisk                   = 207
	PHPParserPercent                    = 208
	PHPParserDivide                     = 209
	PHPParserTilde                      = 210
	PHPParserSuppressWarnings           = 211
	PHPParserDollar                     = 212
	PHPParserDot                        = 213
	PHPParserQuestionMark               = 214
	PHPParserOpenRoundBracket           = 215
	PHPParserCloseRoundBracket          = 216
	PHPParserOpenSquareBracket          = 217
	PHPParserCloseSquareBracket         = 218
	PHPParserOpenCurlyBracket           = 219
	PHPParserCloseCurlyBracket          = 220
	PHPParserComma                      = 221
	PHPParserColon                      = 222
	PHPParserSemiColon                  = 223
	PHPParserEq                         = 224
	PHPParserQuote                      = 225
	PHPParserBackQuote                  = 226
	PHPParserSet_Include_Path           = 227
	PHPParserVarName                    = 228
	PHPParserLabel                      = 229
	PHPParserOctal                      = 230
	PHPParserDecimal                    = 231
	PHPParserReal                       = 232
	PHPParserHex                        = 233
	PHPParserBinary                     = 234
	PHPParserBackQuoteString            = 235
	PHPParserSingleQuoteString          = 236
	PHPParserDoubleQuote                = 237
	PHPParserErrorPhp                   = 238
	PHPParserCurlyDollar                = 239
	PHPParserUnicodeEscape              = 240
	PHPParserStringPart                 = 241
	PHPParserComment                    = 242
	PHPParserPHPEndSingleLineComment    = 243
	PHPParserCommentEnd                 = 244
	PHPParserHereDocIdentiferWhite      = 245
	PHPParserHereDocIdentiferName       = 246
	PHPParserHereDocIdentifierBreak     = 247
	PHPParserEndDoc                     = 248
	PHPParserHereDocText                = 249
	PHPParserHereDocVariable            = 250
	PHPParserXmlText2                   = 251
)

// PHPParser rules.
const (
	PHPParserRULE_htmlDocument                  = 0
	PHPParserRULE_htmlDocumentElement           = 1
	PHPParserRULE_inlineHtml                    = 2
	PHPParserRULE_htmlElement                   = 3
	PHPParserRULE_scriptText                    = 4
	PHPParserRULE_phpBlock                      = 5
	PHPParserRULE_importStatement               = 6
	PHPParserRULE_topStatement                  = 7
	PHPParserRULE_useDeclaration                = 8
	PHPParserRULE_useDeclarationContentList     = 9
	PHPParserRULE_useDeclarationContent         = 10
	PHPParserRULE_namespaceDeclaration          = 11
	PHPParserRULE_namespaceStatement            = 12
	PHPParserRULE_functionDeclaration           = 13
	PHPParserRULE_classDeclaration              = 14
	PHPParserRULE_classEntryType                = 15
	PHPParserRULE_interfaceList                 = 16
	PHPParserRULE_typeParameterList             = 17
	PHPParserRULE_typeParameterWithDefaultsList = 18
	PHPParserRULE_typeParameterDecl             = 19
	PHPParserRULE_typeParameterWithDefaultDecl  = 20
	PHPParserRULE_attributes                    = 21
	PHPParserRULE_attributeGroup                = 22
	PHPParserRULE_attribute                     = 23
	PHPParserRULE_innerStatementList            = 24
	PHPParserRULE_innerStatement                = 25
	PHPParserRULE_labelStatement                = 26
	PHPParserRULE_statement                     = 27
	PHPParserRULE_emptyStatement_               = 28
	PHPParserRULE_blockStatement                = 29
	PHPParserRULE_ifStatement                   = 30
	PHPParserRULE_elseIfStatement               = 31
	PHPParserRULE_elseIfColonStatement          = 32
	PHPParserRULE_elseStatement                 = 33
	PHPParserRULE_elseColonStatement            = 34
	PHPParserRULE_whileStatement                = 35
	PHPParserRULE_doWhileStatement              = 36
	PHPParserRULE_forStatement                  = 37
	PHPParserRULE_forInit                       = 38
	PHPParserRULE_forUpdate                     = 39
	PHPParserRULE_switchStatement               = 40
	PHPParserRULE_switchCaseBlock               = 41
	PHPParserRULE_switchDefaultBlock            = 42
	PHPParserRULE_switchBlock                   = 43
	PHPParserRULE_breakStatement                = 44
	PHPParserRULE_continueStatement             = 45
	PHPParserRULE_returnStatement               = 46
	PHPParserRULE_expressionStatement           = 47
	PHPParserRULE_unsetStatement                = 48
	PHPParserRULE_foreachStatement              = 49
	PHPParserRULE_tryCatchFinally               = 50
	PHPParserRULE_catchClause                   = 51
	PHPParserRULE_finallyStatement              = 52
	PHPParserRULE_throwStatement                = 53
	PHPParserRULE_gotoStatement                 = 54
	PHPParserRULE_declareStatement              = 55
	PHPParserRULE_inlineHtmlStatement           = 56
	PHPParserRULE_declareList                   = 57
	PHPParserRULE_directive                     = 58
	PHPParserRULE_formalParameterList           = 59
	PHPParserRULE_formalParameter               = 60
	PHPParserRULE_typeHint                      = 61
	PHPParserRULE_globalStatement               = 62
	PHPParserRULE_globalVar                     = 63
	PHPParserRULE_echoStatement                 = 64
	PHPParserRULE_staticVariableStatement       = 65
	PHPParserRULE_classStatement                = 66
	PHPParserRULE_traitAdaptations              = 67
	PHPParserRULE_traitAdaptationStatement      = 68
	PHPParserRULE_traitPrecedence               = 69
	PHPParserRULE_traitAlias                    = 70
	PHPParserRULE_traitMethodReference          = 71
	PHPParserRULE_baseCtorCall                  = 72
	PHPParserRULE_returnTypeDecl                = 73
	PHPParserRULE_methodBody                    = 74
	PHPParserRULE_propertyModifiers             = 75
	PHPParserRULE_memberModifiers               = 76
	PHPParserRULE_variableInitializer           = 77
	PHPParserRULE_identifierInitializer         = 78
	PHPParserRULE_globalConstantDeclaration     = 79
	PHPParserRULE_enumDeclaration               = 80
	PHPParserRULE_enumItem                      = 81
	PHPParserRULE_expressionList                = 82
	PHPParserRULE_parentheses                   = 83
	PHPParserRULE_fullyQualifiedNamespaceExpr   = 84
	PHPParserRULE_staticClassExpr               = 85
	PHPParserRULE_staticClassExprFunctionMember = 86
	PHPParserRULE_staticClassExprVariableMember = 87
	PHPParserRULE_memberCallKey                 = 88
	PHPParserRULE_indexMemberCallKey            = 89
	PHPParserRULE_expression                    = 90
	PHPParserRULE_flexiVariable                 = 91
	PHPParserRULE_defineExpr                    = 92
	PHPParserRULE_variable                      = 93
	PHPParserRULE_include                       = 94
	PHPParserRULE_leftArrayCreation             = 95
	PHPParserRULE_assignable                    = 96
	PHPParserRULE_arrayCreation                 = 97
	PHPParserRULE_arrayDestructuring            = 98
	PHPParserRULE_indexedDestructItem           = 99
	PHPParserRULE_keyedDestructItem             = 100
	PHPParserRULE_lambdaFunctionExpr            = 101
	PHPParserRULE_matchExpr                     = 102
	PHPParserRULE_matchItem                     = 103
	PHPParserRULE_newExpr                       = 104
	PHPParserRULE_assignmentOperator            = 105
	PHPParserRULE_yieldExpression               = 106
	PHPParserRULE_arrayItemList                 = 107
	PHPParserRULE_arrayItem                     = 108
	PHPParserRULE_lambdaFunctionUseVars         = 109
	PHPParserRULE_lambdaFunctionUseVar          = 110
	PHPParserRULE_qualifiedStaticTypeRef        = 111
	PHPParserRULE_typeRef                       = 112
	PHPParserRULE_anonymousClass                = 113
	PHPParserRULE_indirectTypeRef               = 114
	PHPParserRULE_qualifiedNamespaceName        = 115
	PHPParserRULE_namespaceNameList             = 116
	PHPParserRULE_namespaceNameTail             = 117
	PHPParserRULE_qualifiedNamespaceNameList    = 118
	PHPParserRULE_arguments                     = 119
	PHPParserRULE_actualArgument                = 120
	PHPParserRULE_argumentName                  = 121
	PHPParserRULE_constantInitializer           = 122
	PHPParserRULE_constantString                = 123
	PHPParserRULE_constant                      = 124
	PHPParserRULE_literalConstant               = 125
	PHPParserRULE_numericConstant               = 126
	PHPParserRULE_classConstant                 = 127
	PHPParserRULE_stringConstant                = 128
	PHPParserRULE_string                        = 129
	PHPParserRULE_hereDocContent                = 130
	PHPParserRULE_interpolatedStringPart        = 131
	PHPParserRULE_chainList                     = 132
	PHPParserRULE_chain                         = 133
	PHPParserRULE_chainOrigin                   = 134
	PHPParserRULE_memberAccess                  = 135
	PHPParserRULE_functionCall                  = 136
	PHPParserRULE_functionCallName              = 137
	PHPParserRULE_actualArguments               = 138
	PHPParserRULE_chainBase                     = 139
	PHPParserRULE_keyedFieldName                = 140
	PHPParserRULE_keyedSimpleFieldName          = 141
	PHPParserRULE_keyedVariable                 = 142
	PHPParserRULE_squareCurlyExpression         = 143
	PHPParserRULE_assignmentList                = 144
	PHPParserRULE_assignmentListElement         = 145
	PHPParserRULE_modifier                      = 146
	PHPParserRULE_identifier                    = 147
	PHPParserRULE_key                           = 148
	PHPParserRULE_memberModifier                = 149
	PHPParserRULE_magicConstant                 = 150
	PHPParserRULE_magicMethod                   = 151
	PHPParserRULE_primitiveType                 = 152
	PHPParserRULE_castOperation                 = 153
)

// IHtmlDocumentContext is an interface to support dynamic dispatch.
type IHtmlDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHtmlDocumentContext differentiates from other interfaces.
	IsHtmlDocumentContext()
}

type HtmlDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHtmlDocumentContext() *HtmlDocumentContext {
	var p = new(HtmlDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_htmlDocument
	return p
}

func (*HtmlDocumentContext) IsHtmlDocumentContext() {}

func NewHtmlDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HtmlDocumentContext {
	var p = new(HtmlDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_htmlDocument

	return p
}

func (s *HtmlDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *HtmlDocumentContext) EOF() antlr.TerminalNode {
	return s.GetToken(PHPParserEOF, 0)
}

func (s *HtmlDocumentContext) Shebang() antlr.TerminalNode {
	return s.GetToken(PHPParserShebang, 0)
}

func (s *HtmlDocumentContext) AllHtmlDocumentElement() []IHtmlDocumentElementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IHtmlDocumentElementContext); ok {
			len++
		}
	}

	tst := make([]IHtmlDocumentElementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IHtmlDocumentElementContext); ok {
			tst[i] = t.(IHtmlDocumentElementContext)
			i++
		}
	}

	return tst
}

func (s *HtmlDocumentContext) HtmlDocumentElement(i int) IHtmlDocumentElementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHtmlDocumentElementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHtmlDocumentElementContext)
}

func (s *HtmlDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HtmlDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HtmlDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitHtmlDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) HtmlDocument() (localctx IHtmlDocumentContext) {
	this := p
	_ = this

	localctx = NewHtmlDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, PHPParserRULE_htmlDocument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(309)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserShebang {
		{
			p.SetState(308)
			p.Match(PHPParserShebang)
		}

	}
	p.SetState(314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8600244223124) != 0 || (int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0 || (int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&1786706395135) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70336709945889) != 0 {
		{
			p.SetState(311)
			p.HtmlDocumentElement()
		}

		p.SetState(316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(317)
		p.Match(PHPParserEOF)
	}

	return localctx
}

// IHtmlDocumentElementContext is an interface to support dynamic dispatch.
type IHtmlDocumentElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHtmlDocumentElementContext differentiates from other interfaces.
	IsHtmlDocumentElementContext()
}

type HtmlDocumentElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHtmlDocumentElementContext() *HtmlDocumentElementContext {
	var p = new(HtmlDocumentElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_htmlDocumentElement
	return p
}

func (*HtmlDocumentElementContext) IsHtmlDocumentElementContext() {}

func NewHtmlDocumentElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HtmlDocumentElementContext {
	var p = new(HtmlDocumentElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_htmlDocumentElement

	return p
}

func (s *HtmlDocumentElementContext) GetParser() antlr.Parser { return s.parser }

func (s *HtmlDocumentElementContext) InlineHtml() IInlineHtmlContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInlineHtmlContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInlineHtmlContext)
}

func (s *HtmlDocumentElementContext) PhpBlock() IPhpBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPhpBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPhpBlockContext)
}

func (s *HtmlDocumentElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HtmlDocumentElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HtmlDocumentElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitHtmlDocumentElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) HtmlDocumentElement() (localctx IHtmlDocumentElementContext) {
	this := p
	_ = this

	localctx = NewHtmlDocumentElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, PHPParserRULE_htmlDocumentElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(321)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(319)
			p.InlineHtml()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(320)
			p.PhpBlock()
		}

	}

	return localctx
}

// IInlineHtmlContext is an interface to support dynamic dispatch.
type IInlineHtmlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInlineHtmlContext differentiates from other interfaces.
	IsInlineHtmlContext()
}

type InlineHtmlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInlineHtmlContext() *InlineHtmlContext {
	var p = new(InlineHtmlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_inlineHtml
	return p
}

func (*InlineHtmlContext) IsInlineHtmlContext() {}

func NewInlineHtmlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InlineHtmlContext {
	var p = new(InlineHtmlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_inlineHtml

	return p
}

func (s *InlineHtmlContext) GetParser() antlr.Parser { return s.parser }

func (s *InlineHtmlContext) AllHtmlElement() []IHtmlElementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IHtmlElementContext); ok {
			len++
		}
	}

	tst := make([]IHtmlElementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IHtmlElementContext); ok {
			tst[i] = t.(IHtmlElementContext)
			i++
		}
	}

	return tst
}

func (s *InlineHtmlContext) HtmlElement(i int) IHtmlElementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHtmlElementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHtmlElementContext)
}

func (s *InlineHtmlContext) ScriptText() IScriptTextContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScriptTextContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScriptTextContext)
}

func (s *InlineHtmlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineHtmlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InlineHtmlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitInlineHtml(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) InlineHtml() (localctx IInlineHtmlContext) {
	this := p
	_ = this

	localctx = NewInlineHtmlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, PHPParserRULE_inlineHtml)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(329)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserHtmlText, PHPParserXmlStart, PHPParserHtmlScriptOpen, PHPParserHtmlStyleOpen, PHPParserHtmlDtd, PHPParserHtmlOpen, PHPParserHtmlClose, PHPParserHtmlSlashClose, PHPParserHtmlSlash, PHPParserHtmlEquals, PHPParserHtmlStartQuoteString, PHPParserHtmlStartDoubleQuoteString, PHPParserHtmlHex, PHPParserHtmlDecimal, PHPParserHtmlName, PHPParserHtmlEndQuoteString, PHPParserHtmlQuoteString, PHPParserHtmlEndDoubleQuoteString, PHPParserHtmlDoubleQuoteString, PHPParserHtmlScriptClose, PHPParserStyleBody:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(324)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(323)
					p.HtmlElement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(326)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
		}

	case PHPParserScriptText:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(328)
			p.ScriptText()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IHtmlElementContext is an interface to support dynamic dispatch.
type IHtmlElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHtmlElementContext differentiates from other interfaces.
	IsHtmlElementContext()
}

type HtmlElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHtmlElementContext() *HtmlElementContext {
	var p = new(HtmlElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_htmlElement
	return p
}

func (*HtmlElementContext) IsHtmlElementContext() {}

func NewHtmlElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HtmlElementContext {
	var p = new(HtmlElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_htmlElement

	return p
}

func (s *HtmlElementContext) GetParser() antlr.Parser { return s.parser }

func (s *HtmlElementContext) HtmlDtd() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlDtd, 0)
}

func (s *HtmlElementContext) HtmlClose() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlClose, 0)
}

func (s *HtmlElementContext) HtmlStyleOpen() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlStyleOpen, 0)
}

func (s *HtmlElementContext) HtmlOpen() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlOpen, 0)
}

func (s *HtmlElementContext) HtmlName() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlName, 0)
}

func (s *HtmlElementContext) HtmlSlashClose() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlSlashClose, 0)
}

func (s *HtmlElementContext) HtmlSlash() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlSlash, 0)
}

func (s *HtmlElementContext) HtmlText() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlText, 0)
}

func (s *HtmlElementContext) HtmlEquals() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlEquals, 0)
}

func (s *HtmlElementContext) HtmlStartQuoteString() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlStartQuoteString, 0)
}

func (s *HtmlElementContext) HtmlEndQuoteString() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlEndQuoteString, 0)
}

func (s *HtmlElementContext) HtmlStartDoubleQuoteString() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlStartDoubleQuoteString, 0)
}

func (s *HtmlElementContext) HtmlEndDoubleQuoteString() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlEndDoubleQuoteString, 0)
}

func (s *HtmlElementContext) HtmlHex() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlHex, 0)
}

func (s *HtmlElementContext) HtmlDecimal() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlDecimal, 0)
}

func (s *HtmlElementContext) HtmlQuoteString() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlQuoteString, 0)
}

func (s *HtmlElementContext) HtmlDoubleQuoteString() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlDoubleQuoteString, 0)
}

func (s *HtmlElementContext) StyleBody() antlr.TerminalNode {
	return s.GetToken(PHPParserStyleBody, 0)
}

func (s *HtmlElementContext) HtmlScriptOpen() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlScriptOpen, 0)
}

func (s *HtmlElementContext) HtmlScriptClose() antlr.TerminalNode {
	return s.GetToken(PHPParserHtmlScriptClose, 0)
}

func (s *HtmlElementContext) XmlStart() antlr.TerminalNode {
	return s.GetToken(PHPParserXmlStart, 0)
}

func (s *HtmlElementContext) XmlClose() antlr.TerminalNode {
	return s.GetToken(PHPParserXmlClose, 0)
}

func (s *HtmlElementContext) AllXmlText() []antlr.TerminalNode {
	return s.GetTokens(PHPParserXmlText)
}

func (s *HtmlElementContext) XmlText(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserXmlText, i)
}

func (s *HtmlElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HtmlElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HtmlElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitHtmlElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) HtmlElement() (localctx IHtmlElementContext) {
	this := p
	_ = this

	localctx = NewHtmlElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, PHPParserRULE_htmlElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(359)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserHtmlDtd:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(331)
			p.Match(PHPParserHtmlDtd)
		}

	case PHPParserHtmlClose:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(332)
			p.Match(PHPParserHtmlClose)
		}

	case PHPParserHtmlStyleOpen:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(333)
			p.Match(PHPParserHtmlStyleOpen)
		}

	case PHPParserHtmlOpen:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(334)
			p.Match(PHPParserHtmlOpen)
		}

	case PHPParserHtmlName:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(335)
			p.Match(PHPParserHtmlName)
		}

	case PHPParserHtmlSlashClose:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(336)
			p.Match(PHPParserHtmlSlashClose)
		}

	case PHPParserHtmlSlash:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(337)
			p.Match(PHPParserHtmlSlash)
		}

	case PHPParserHtmlText:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(338)
			p.Match(PHPParserHtmlText)
		}

	case PHPParserHtmlEquals:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(339)
			p.Match(PHPParserHtmlEquals)
		}

	case PHPParserHtmlStartQuoteString:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(340)
			p.Match(PHPParserHtmlStartQuoteString)
		}

	case PHPParserHtmlEndQuoteString:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(341)
			p.Match(PHPParserHtmlEndQuoteString)
		}

	case PHPParserHtmlStartDoubleQuoteString:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(342)
			p.Match(PHPParserHtmlStartDoubleQuoteString)
		}

	case PHPParserHtmlEndDoubleQuoteString:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(343)
			p.Match(PHPParserHtmlEndDoubleQuoteString)
		}

	case PHPParserHtmlHex:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(344)
			p.Match(PHPParserHtmlHex)
		}

	case PHPParserHtmlDecimal:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(345)
			p.Match(PHPParserHtmlDecimal)
		}

	case PHPParserHtmlQuoteString:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(346)
			p.Match(PHPParserHtmlQuoteString)
		}

	case PHPParserHtmlDoubleQuoteString:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(347)
			p.Match(PHPParserHtmlDoubleQuoteString)
		}

	case PHPParserStyleBody:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(348)
			p.Match(PHPParserStyleBody)
		}

	case PHPParserHtmlScriptOpen:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(349)
			p.Match(PHPParserHtmlScriptOpen)
		}

	case PHPParserHtmlScriptClose:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(350)
			p.Match(PHPParserHtmlScriptClose)
		}

	case PHPParserXmlStart:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(351)
			p.Match(PHPParserXmlStart)
		}
		p.SetState(355)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserXmlText {
			{
				p.SetState(352)
				p.Match(PHPParserXmlText)
			}

			p.SetState(357)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(358)
			p.Match(PHPParserXmlClose)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IScriptTextContext is an interface to support dynamic dispatch.
type IScriptTextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScriptTextContext differentiates from other interfaces.
	IsScriptTextContext()
}

type ScriptTextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScriptTextContext() *ScriptTextContext {
	var p = new(ScriptTextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_scriptText
	return p
}

func (*ScriptTextContext) IsScriptTextContext() {}

func NewScriptTextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptTextContext {
	var p = new(ScriptTextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_scriptText

	return p
}

func (s *ScriptTextContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptTextContext) AllScriptText() []antlr.TerminalNode {
	return s.GetTokens(PHPParserScriptText)
}

func (s *ScriptTextContext) ScriptText(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserScriptText, i)
}

func (s *ScriptTextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptTextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptTextContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitScriptText(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ScriptText() (localctx IScriptTextContext) {
	this := p
	_ = this

	localctx = NewScriptTextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, PHPParserRULE_scriptText)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(362)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(361)
				p.Match(PHPParserScriptText)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(364)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())
	}

	return localctx
}

// IPhpBlockContext is an interface to support dynamic dispatch.
type IPhpBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPhpBlockContext differentiates from other interfaces.
	IsPhpBlockContext()
}

type PhpBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPhpBlockContext() *PhpBlockContext {
	var p = new(PhpBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_phpBlock
	return p
}

func (*PhpBlockContext) IsPhpBlockContext() {}

func NewPhpBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PhpBlockContext {
	var p = new(PhpBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_phpBlock

	return p
}

func (s *PhpBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *PhpBlockContext) AllImportStatement() []IImportStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImportStatementContext); ok {
			len++
		}
	}

	tst := make([]IImportStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImportStatementContext); ok {
			tst[i] = t.(IImportStatementContext)
			i++
		}
	}

	return tst
}

func (s *PhpBlockContext) ImportStatement(i int) IImportStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportStatementContext)
}

func (s *PhpBlockContext) AllTopStatement() []ITopStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITopStatementContext); ok {
			len++
		}
	}

	tst := make([]ITopStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITopStatementContext); ok {
			tst[i] = t.(ITopStatementContext)
			i++
		}
	}

	return tst
}

func (s *PhpBlockContext) TopStatement(i int) ITopStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITopStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITopStatementContext)
}

func (s *PhpBlockContext) PHPEnd() antlr.TerminalNode {
	return s.GetToken(PHPParserPHPEnd, 0)
}

func (s *PhpBlockContext) PHPEndSingleLineComment() antlr.TerminalNode {
	return s.GetToken(PHPParserPHPEndSingleLineComment, 0)
}

func (s *PhpBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PhpBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PhpBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitPhpBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) PhpBlock() (localctx IPhpBlockContext) {
	this := p
	_ = this

	localctx = NewPhpBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, PHPParserRULE_phpBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(369)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(366)
				p.ImportStatement()
			}

		}
		p.SetState(371)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext())
	}
	p.SetState(373)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(372)
				p.TopStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(375)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext())
	}
	p.SetState(378)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserPHPEnd || _la == PHPParserPHPEndSingleLineComment {
		{
			p.SetState(377)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserPHPEnd || _la == PHPParserPHPEndSingleLineComment) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IImportStatementContext is an interface to support dynamic dispatch.
type IImportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportStatementContext differentiates from other interfaces.
	IsImportStatementContext()
}

type ImportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportStatementContext() *ImportStatementContext {
	var p = new(ImportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_importStatement
	return p
}

func (*ImportStatementContext) IsImportStatementContext() {}

func NewImportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportStatementContext {
	var p = new(ImportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_importStatement

	return p
}

func (s *ImportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportStatementContext) Import() antlr.TerminalNode {
	return s.GetToken(PHPParserImport, 0)
}

func (s *ImportStatementContext) Namespace() antlr.TerminalNode {
	return s.GetToken(PHPParserNamespace, 0)
}

func (s *ImportStatementContext) NamespaceNameList() INamespaceNameListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceNameListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceNameListContext)
}

func (s *ImportStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *ImportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitImportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ImportStatement() (localctx IImportStatementContext) {
	this := p
	_ = this

	localctx = NewImportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, PHPParserRULE_importStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(380)
		p.Match(PHPParserImport)
	}
	{
		p.SetState(381)
		p.Match(PHPParserNamespace)
	}
	{
		p.SetState(382)
		p.NamespaceNameList()
	}
	{
		p.SetState(383)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// ITopStatementContext is an interface to support dynamic dispatch.
type ITopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTopStatementContext differentiates from other interfaces.
	IsTopStatementContext()
}

type TopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTopStatementContext() *TopStatementContext {
	var p = new(TopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_topStatement
	return p
}

func (*TopStatementContext) IsTopStatementContext() {}

func NewTopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TopStatementContext {
	var p = new(TopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_topStatement

	return p
}

func (s *TopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TopStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *TopStatementContext) UseDeclaration() IUseDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseDeclarationContext)
}

func (s *TopStatementContext) NamespaceDeclaration() INamespaceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceDeclarationContext)
}

func (s *TopStatementContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *TopStatementContext) ClassDeclaration() IClassDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *TopStatementContext) GlobalConstantDeclaration() IGlobalConstantDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGlobalConstantDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGlobalConstantDeclarationContext)
}

func (s *TopStatementContext) EnumDeclaration() IEnumDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *TopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TopStatement() (localctx ITopStatementContext) {
	this := p
	_ = this

	localctx = NewTopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, PHPParserRULE_topStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(385)
			p.Statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(386)
			p.UseDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(387)
			p.NamespaceDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(388)
			p.FunctionDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(389)
			p.ClassDeclaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(390)
			p.GlobalConstantDeclaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(391)
			p.EnumDeclaration()
		}

	}

	return localctx
}

// IUseDeclarationContext is an interface to support dynamic dispatch.
type IUseDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUseDeclarationContext differentiates from other interfaces.
	IsUseDeclarationContext()
}

type UseDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseDeclarationContext() *UseDeclarationContext {
	var p = new(UseDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_useDeclaration
	return p
}

func (*UseDeclarationContext) IsUseDeclarationContext() {}

func NewUseDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseDeclarationContext {
	var p = new(UseDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_useDeclaration

	return p
}

func (s *UseDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *UseDeclarationContext) Use() antlr.TerminalNode {
	return s.GetToken(PHPParserUse, 0)
}

func (s *UseDeclarationContext) UseDeclarationContentList() IUseDeclarationContentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseDeclarationContentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseDeclarationContentListContext)
}

func (s *UseDeclarationContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *UseDeclarationContext) Function_() antlr.TerminalNode {
	return s.GetToken(PHPParserFunction_, 0)
}

func (s *UseDeclarationContext) Const() antlr.TerminalNode {
	return s.GetToken(PHPParserConst, 0)
}

func (s *UseDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitUseDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) UseDeclaration() (localctx IUseDeclarationContext) {
	this := p
	_ = this

	localctx = NewUseDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, PHPParserRULE_useDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(394)
		p.Match(PHPParserUse)
	}
	p.SetState(396)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(395)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserConst || _la == PHPParserFunction_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(398)
		p.UseDeclarationContentList()
	}
	{
		p.SetState(399)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IUseDeclarationContentListContext is an interface to support dynamic dispatch.
type IUseDeclarationContentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUseDeclarationContentListContext differentiates from other interfaces.
	IsUseDeclarationContentListContext()
}

type UseDeclarationContentListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseDeclarationContentListContext() *UseDeclarationContentListContext {
	var p = new(UseDeclarationContentListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_useDeclarationContentList
	return p
}

func (*UseDeclarationContentListContext) IsUseDeclarationContentListContext() {}

func NewUseDeclarationContentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseDeclarationContentListContext {
	var p = new(UseDeclarationContentListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_useDeclarationContentList

	return p
}

func (s *UseDeclarationContentListContext) GetParser() antlr.Parser { return s.parser }

func (s *UseDeclarationContentListContext) AllUseDeclarationContent() []IUseDeclarationContentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUseDeclarationContentContext); ok {
			len++
		}
	}

	tst := make([]IUseDeclarationContentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUseDeclarationContentContext); ok {
			tst[i] = t.(IUseDeclarationContentContext)
			i++
		}
	}

	return tst
}

func (s *UseDeclarationContentListContext) UseDeclarationContent(i int) IUseDeclarationContentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseDeclarationContentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseDeclarationContentContext)
}

func (s *UseDeclarationContentListContext) AllNamespaceSeparator() []antlr.TerminalNode {
	return s.GetTokens(PHPParserNamespaceSeparator)
}

func (s *UseDeclarationContentListContext) NamespaceSeparator(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserNamespaceSeparator, i)
}

func (s *UseDeclarationContentListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *UseDeclarationContentListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *UseDeclarationContentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseDeclarationContentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseDeclarationContentListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitUseDeclarationContentList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) UseDeclarationContentList() (localctx IUseDeclarationContentListContext) {
	this := p
	_ = this

	localctx = NewUseDeclarationContentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, PHPParserRULE_useDeclarationContentList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(402)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserNamespaceSeparator {
		{
			p.SetState(401)
			p.Match(PHPParserNamespaceSeparator)
		}

	}
	{
		p.SetState(404)
		p.UseDeclarationContent()
	}
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(405)
			p.Match(PHPParserComma)
		}
		p.SetState(407)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserNamespaceSeparator {
			{
				p.SetState(406)
				p.Match(PHPParserNamespaceSeparator)
			}

		}
		{
			p.SetState(409)
			p.UseDeclarationContent()
		}

		p.SetState(414)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUseDeclarationContentContext is an interface to support dynamic dispatch.
type IUseDeclarationContentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUseDeclarationContentContext differentiates from other interfaces.
	IsUseDeclarationContentContext()
}

type UseDeclarationContentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseDeclarationContentContext() *UseDeclarationContentContext {
	var p = new(UseDeclarationContentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_useDeclarationContent
	return p
}

func (*UseDeclarationContentContext) IsUseDeclarationContentContext() {}

func NewUseDeclarationContentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseDeclarationContentContext {
	var p = new(UseDeclarationContentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_useDeclarationContent

	return p
}

func (s *UseDeclarationContentContext) GetParser() antlr.Parser { return s.parser }

func (s *UseDeclarationContentContext) NamespaceNameList() INamespaceNameListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceNameListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceNameListContext)
}

func (s *UseDeclarationContentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseDeclarationContentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseDeclarationContentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitUseDeclarationContent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) UseDeclarationContent() (localctx IUseDeclarationContentContext) {
	this := p
	_ = this

	localctx = NewUseDeclarationContentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, PHPParserRULE_useDeclarationContent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(415)
		p.NamespaceNameList()
	}

	return localctx
}

// INamespaceDeclarationContext is an interface to support dynamic dispatch.
type INamespaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceDeclarationContext differentiates from other interfaces.
	IsNamespaceDeclarationContext()
}

type NamespaceDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceDeclarationContext() *NamespaceDeclarationContext {
	var p = new(NamespaceDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_namespaceDeclaration
	return p
}

func (*NamespaceDeclarationContext) IsNamespaceDeclarationContext() {}

func NewNamespaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceDeclarationContext {
	var p = new(NamespaceDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_namespaceDeclaration

	return p
}

func (s *NamespaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceDeclarationContext) Namespace() antlr.TerminalNode {
	return s.GetToken(PHPParserNamespace, 0)
}

func (s *NamespaceDeclarationContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *NamespaceDeclarationContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *NamespaceDeclarationContext) NamespaceNameList() INamespaceNameListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceNameListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceNameListContext)
}

func (s *NamespaceDeclarationContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *NamespaceDeclarationContext) AllNamespaceStatement() []INamespaceStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INamespaceStatementContext); ok {
			len++
		}
	}

	tst := make([]INamespaceStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INamespaceStatementContext); ok {
			tst[i] = t.(INamespaceStatementContext)
			i++
		}
	}

	return tst
}

func (s *NamespaceDeclarationContext) NamespaceStatement(i int) INamespaceStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceStatementContext)
}

func (s *NamespaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitNamespaceDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) NamespaceDeclaration() (localctx INamespaceDeclarationContext) {
	this := p
	_ = this

	localctx = NewNamespaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, PHPParserRULE_namespaceDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(417)
		p.Match(PHPParserNamespace)
	}
	p.SetState(432)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		p.SetState(419)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-144959677430546433) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&144115188067333119) != 0 || _la == PHPParserLabel {
			{
				p.SetState(418)
				p.NamespaceNameList()
			}

		}
		{
			p.SetState(421)
			p.Match(PHPParserOpenCurlyBracket)
		}
		p.SetState(425)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8600244223124) != 0 || (int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0 || (int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&1786706395135) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70336709945889) != 0 {
			{
				p.SetState(422)
				p.NamespaceStatement()
			}

			p.SetState(427)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(428)
			p.Match(PHPParserCloseCurlyBracket)
		}

	case 2:
		{
			p.SetState(429)
			p.NamespaceNameList()
		}
		{
			p.SetState(430)
			p.Match(PHPParserSemiColon)
		}

	}

	return localctx
}

// INamespaceStatementContext is an interface to support dynamic dispatch.
type INamespaceStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceStatementContext differentiates from other interfaces.
	IsNamespaceStatementContext()
}

type NamespaceStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceStatementContext() *NamespaceStatementContext {
	var p = new(NamespaceStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_namespaceStatement
	return p
}

func (*NamespaceStatementContext) IsNamespaceStatementContext() {}

func NewNamespaceStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceStatementContext {
	var p = new(NamespaceStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_namespaceStatement

	return p
}

func (s *NamespaceStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *NamespaceStatementContext) UseDeclaration() IUseDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseDeclarationContext)
}

func (s *NamespaceStatementContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *NamespaceStatementContext) ClassDeclaration() IClassDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *NamespaceStatementContext) GlobalConstantDeclaration() IGlobalConstantDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGlobalConstantDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGlobalConstantDeclarationContext)
}

func (s *NamespaceStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitNamespaceStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) NamespaceStatement() (localctx INamespaceStatementContext) {
	this := p
	_ = this

	localctx = NewNamespaceStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, PHPParserRULE_namespaceStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(439)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(434)
			p.Statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(435)
			p.UseDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(436)
			p.FunctionDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(437)
			p.ClassDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(438)
			p.GlobalConstantDeclaration()
		}

	}

	return localctx
}

// IFunctionDeclarationContext is an interface to support dynamic dispatch.
type IFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclarationContext differentiates from other interfaces.
	IsFunctionDeclarationContext()
}

type FunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclarationContext() *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_functionDeclaration
	return p
}

func (*FunctionDeclarationContext) IsFunctionDeclarationContext() {}

func NewFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_functionDeclaration

	return p
}

func (s *FunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclarationContext) Function_() antlr.TerminalNode {
	return s.GetToken(PHPParserFunction_, 0)
}

func (s *FunctionDeclarationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionDeclarationContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *FunctionDeclarationContext) FormalParameterList() IFormalParameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *FunctionDeclarationContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *FunctionDeclarationContext) BlockStatement() IBlockStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *FunctionDeclarationContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionDeclarationContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *FunctionDeclarationContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *FunctionDeclarationContext) TypeHint() ITypeHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeHintContext)
}

func (s *FunctionDeclarationContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(PHPParserQuestionMark, 0)
}

func (s *FunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) FunctionDeclaration() (localctx IFunctionDeclarationContext) {
	this := p
	_ = this

	localctx = NewFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, PHPParserRULE_functionDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(442)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAttributeStart {
		{
			p.SetState(441)
			p.Attributes()
		}

	}
	{
		p.SetState(444)
		p.Match(PHPParserFunction_)
	}
	p.SetState(446)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAmpersand {
		{
			p.SetState(445)
			p.Match(PHPParserAmpersand)
		}

	}
	{
		p.SetState(448)
		p.Identifier()
	}
	{
		p.SetState(449)
		p.Match(PHPParserOpenRoundBracket)
	}
	{
		p.SetState(450)
		p.FormalParameterList()
	}
	{
		p.SetState(451)
		p.Match(PHPParserCloseRoundBracket)
	}
	p.SetState(457)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserColon {
		{
			p.SetState(452)
			p.Match(PHPParserColon)
		}
		p.SetState(454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserQuestionMark {
			{
				p.SetState(453)
				p.Match(PHPParserQuestionMark)
			}

		}
		{
			p.SetState(456)
			p.typeHint(0)
		}

	}
	{
		p.SetState(459)
		p.BlockStatement()
	}

	return localctx
}

// IClassDeclarationContext is an interface to support dynamic dispatch.
type IClassDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclarationContext differentiates from other interfaces.
	IsClassDeclarationContext()
}

type ClassDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclarationContext() *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_classDeclaration
	return p
}

func (*ClassDeclarationContext) IsClassDeclarationContext() {}

func NewClassDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_classDeclaration

	return p
}

func (s *ClassDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclarationContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *ClassDeclarationContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *ClassDeclarationContext) ClassEntryType() IClassEntryTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassEntryTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassEntryTypeContext)
}

func (s *ClassDeclarationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ClassDeclarationContext) Interface() antlr.TerminalNode {
	return s.GetToken(PHPParserInterface, 0)
}

func (s *ClassDeclarationContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *ClassDeclarationContext) Private() antlr.TerminalNode {
	return s.GetToken(PHPParserPrivate, 0)
}

func (s *ClassDeclarationContext) Modifier() IModifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModifierContext)
}

func (s *ClassDeclarationContext) Partial() antlr.TerminalNode {
	return s.GetToken(PHPParserPartial, 0)
}

func (s *ClassDeclarationContext) AllClassStatement() []IClassStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClassStatementContext); ok {
			len++
		}
	}

	tst := make([]IClassStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClassStatementContext); ok {
			tst[i] = t.(IClassStatementContext)
			i++
		}
	}

	return tst
}

func (s *ClassDeclarationContext) ClassStatement(i int) IClassStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassStatementContext)
}

func (s *ClassDeclarationContext) Extends() antlr.TerminalNode {
	return s.GetToken(PHPParserExtends, 0)
}

func (s *ClassDeclarationContext) QualifiedStaticTypeRef() IQualifiedStaticTypeRefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedStaticTypeRefContext)
}

func (s *ClassDeclarationContext) Implements() antlr.TerminalNode {
	return s.GetToken(PHPParserImplements, 0)
}

func (s *ClassDeclarationContext) InterfaceList() IInterfaceListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceListContext)
}

func (s *ClassDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitClassDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ClassDeclaration() (localctx IClassDeclarationContext) {
	this := p
	_ = this

	localctx = NewClassDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, PHPParserRULE_classDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(462)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAttributeStart {
		{
			p.SetState(461)
			p.Attributes()
		}

	}
	p.SetState(465)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserPrivate {
		{
			p.SetState(464)
			p.Match(PHPParserPrivate)
		}

	}
	p.SetState(468)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAbstract || _la == PHPParserFinal {
		{
			p.SetState(467)
			p.Modifier()
		}

	}
	p.SetState(471)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserPartial {
		{
			p.SetState(470)
			p.Match(PHPParserPartial)
		}

	}
	p.SetState(489)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserClass, PHPParserTrait:
		{
			p.SetState(473)
			p.ClassEntryType()
		}
		{
			p.SetState(474)
			p.Identifier()
		}
		p.SetState(477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserExtends {
			{
				p.SetState(475)
				p.Match(PHPParserExtends)
			}
			{
				p.SetState(476)
				p.QualifiedStaticTypeRef()
			}

		}
		p.SetState(481)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserImplements {
			{
				p.SetState(479)
				p.Match(PHPParserImplements)
			}
			{
				p.SetState(480)
				p.InterfaceList()
			}

		}

	case PHPParserInterface:
		{
			p.SetState(483)
			p.Match(PHPParserInterface)
		}
		{
			p.SetState(484)
			p.Identifier()
		}
		p.SetState(487)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserExtends {
			{
				p.SetState(485)
				p.Match(PHPParserExtends)
			}
			{
				p.SetState(486)
				p.InterfaceList()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(491)
		p.Match(PHPParserOpenCurlyBracket)
	}
	p.SetState(495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&72083982316994560) != 0 || (int64((_la-81)) & ^0x3f) == 0 && ((int64(1)<<(_la-81))&6757727313330209) != 0 {
		{
			p.SetState(492)
			p.ClassStatement()
		}

		p.SetState(497)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(498)
		p.Match(PHPParserCloseCurlyBracket)
	}

	return localctx
}

// IClassEntryTypeContext is an interface to support dynamic dispatch.
type IClassEntryTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassEntryTypeContext differentiates from other interfaces.
	IsClassEntryTypeContext()
}

type ClassEntryTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassEntryTypeContext() *ClassEntryTypeContext {
	var p = new(ClassEntryTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_classEntryType
	return p
}

func (*ClassEntryTypeContext) IsClassEntryTypeContext() {}

func NewClassEntryTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassEntryTypeContext {
	var p = new(ClassEntryTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_classEntryType

	return p
}

func (s *ClassEntryTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassEntryTypeContext) Class() antlr.TerminalNode {
	return s.GetToken(PHPParserClass, 0)
}

func (s *ClassEntryTypeContext) Trait() antlr.TerminalNode {
	return s.GetToken(PHPParserTrait, 0)
}

func (s *ClassEntryTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassEntryTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassEntryTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitClassEntryType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ClassEntryType() (localctx IClassEntryTypeContext) {
	this := p
	_ = this

	localctx = NewClassEntryTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, PHPParserRULE_classEntryType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(500)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PHPParserClass || _la == PHPParserTrait) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IInterfaceListContext is an interface to support dynamic dispatch.
type IInterfaceListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceListContext differentiates from other interfaces.
	IsInterfaceListContext()
}

type InterfaceListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceListContext() *InterfaceListContext {
	var p = new(InterfaceListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_interfaceList
	return p
}

func (*InterfaceListContext) IsInterfaceListContext() {}

func NewInterfaceListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceListContext {
	var p = new(InterfaceListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_interfaceList

	return p
}

func (s *InterfaceListContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceListContext) AllQualifiedStaticTypeRef() []IQualifiedStaticTypeRefContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			len++
		}
	}

	tst := make([]IQualifiedStaticTypeRefContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			tst[i] = t.(IQualifiedStaticTypeRefContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceListContext) QualifiedStaticTypeRef(i int) IQualifiedStaticTypeRefContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedStaticTypeRefContext)
}

func (s *InterfaceListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *InterfaceListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *InterfaceListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitInterfaceList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) InterfaceList() (localctx IInterfaceListContext) {
	this := p
	_ = this

	localctx = NewInterfaceListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, PHPParserRULE_interfaceList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(502)
		p.QualifiedStaticTypeRef()
	}
	p.SetState(507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(503)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(504)
			p.QualifiedStaticTypeRef()
		}

		p.SetState(509)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITypeParameterListContext is an interface to support dynamic dispatch.
type ITypeParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterListContext differentiates from other interfaces.
	IsTypeParameterListContext()
}

type TypeParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterListContext() *TypeParameterListContext {
	var p = new(TypeParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_typeParameterList
	return p
}

func (*TypeParameterListContext) IsTypeParameterListContext() {}

func NewTypeParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterListContext {
	var p = new(TypeParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_typeParameterList

	return p
}

func (s *TypeParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterListContext) AllTypeParameterDecl() []ITypeParameterDeclContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeParameterDeclContext); ok {
			len++
		}
	}

	tst := make([]ITypeParameterDeclContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeParameterDeclContext); ok {
			tst[i] = t.(ITypeParameterDeclContext)
			i++
		}
	}

	return tst
}

func (s *TypeParameterListContext) TypeParameterDecl(i int) ITypeParameterDeclContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParameterDeclContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParameterDeclContext)
}

func (s *TypeParameterListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *TypeParameterListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *TypeParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTypeParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TypeParameterList() (localctx ITypeParameterListContext) {
	this := p
	_ = this

	localctx = NewTypeParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, PHPParserRULE_typeParameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(510)
		p.TypeParameterDecl()
	}
	p.SetState(515)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(511)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(512)
			p.TypeParameterDecl()
		}

		p.SetState(517)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITypeParameterWithDefaultsListContext is an interface to support dynamic dispatch.
type ITypeParameterWithDefaultsListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterWithDefaultsListContext differentiates from other interfaces.
	IsTypeParameterWithDefaultsListContext()
}

type TypeParameterWithDefaultsListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterWithDefaultsListContext() *TypeParameterWithDefaultsListContext {
	var p = new(TypeParameterWithDefaultsListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_typeParameterWithDefaultsList
	return p
}

func (*TypeParameterWithDefaultsListContext) IsTypeParameterWithDefaultsListContext() {}

func NewTypeParameterWithDefaultsListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterWithDefaultsListContext {
	var p = new(TypeParameterWithDefaultsListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_typeParameterWithDefaultsList

	return p
}

func (s *TypeParameterWithDefaultsListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterWithDefaultsListContext) AllTypeParameterWithDefaultDecl() []ITypeParameterWithDefaultDeclContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeParameterWithDefaultDeclContext); ok {
			len++
		}
	}

	tst := make([]ITypeParameterWithDefaultDeclContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeParameterWithDefaultDeclContext); ok {
			tst[i] = t.(ITypeParameterWithDefaultDeclContext)
			i++
		}
	}

	return tst
}

func (s *TypeParameterWithDefaultsListContext) TypeParameterWithDefaultDecl(i int) ITypeParameterWithDefaultDeclContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParameterWithDefaultDeclContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParameterWithDefaultDeclContext)
}

func (s *TypeParameterWithDefaultsListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *TypeParameterWithDefaultsListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *TypeParameterWithDefaultsListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterWithDefaultsListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterWithDefaultsListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTypeParameterWithDefaultsList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TypeParameterWithDefaultsList() (localctx ITypeParameterWithDefaultsListContext) {
	this := p
	_ = this

	localctx = NewTypeParameterWithDefaultsListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, PHPParserRULE_typeParameterWithDefaultsList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(518)
		p.TypeParameterWithDefaultDecl()
	}
	p.SetState(523)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(519)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(520)
			p.TypeParameterWithDefaultDecl()
		}

		p.SetState(525)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITypeParameterDeclContext is an interface to support dynamic dispatch.
type ITypeParameterDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterDeclContext differentiates from other interfaces.
	IsTypeParameterDeclContext()
}

type TypeParameterDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterDeclContext() *TypeParameterDeclContext {
	var p = new(TypeParameterDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_typeParameterDecl
	return p
}

func (*TypeParameterDeclContext) IsTypeParameterDeclContext() {}

func NewTypeParameterDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterDeclContext {
	var p = new(TypeParameterDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_typeParameterDecl

	return p
}

func (s *TypeParameterDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TypeParameterDeclContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeParameterDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTypeParameterDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TypeParameterDecl() (localctx ITypeParameterDeclContext) {
	this := p
	_ = this

	localctx = NewTypeParameterDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, PHPParserRULE_typeParameterDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(527)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAttributeStart {
		{
			p.SetState(526)
			p.Attributes()
		}

	}
	{
		p.SetState(529)
		p.Identifier()
	}

	return localctx
}

// ITypeParameterWithDefaultDeclContext is an interface to support dynamic dispatch.
type ITypeParameterWithDefaultDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterWithDefaultDeclContext differentiates from other interfaces.
	IsTypeParameterWithDefaultDeclContext()
}

type TypeParameterWithDefaultDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterWithDefaultDeclContext() *TypeParameterWithDefaultDeclContext {
	var p = new(TypeParameterWithDefaultDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_typeParameterWithDefaultDecl
	return p
}

func (*TypeParameterWithDefaultDeclContext) IsTypeParameterWithDefaultDeclContext() {}

func NewTypeParameterWithDefaultDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterWithDefaultDeclContext {
	var p = new(TypeParameterWithDefaultDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_typeParameterWithDefaultDecl

	return p
}

func (s *TypeParameterWithDefaultDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterWithDefaultDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TypeParameterWithDefaultDeclContext) Eq() antlr.TerminalNode {
	return s.GetToken(PHPParserEq, 0)
}

func (s *TypeParameterWithDefaultDeclContext) QualifiedStaticTypeRef() IQualifiedStaticTypeRefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedStaticTypeRefContext)
}

func (s *TypeParameterWithDefaultDeclContext) PrimitiveType() IPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *TypeParameterWithDefaultDeclContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeParameterWithDefaultDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterWithDefaultDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterWithDefaultDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTypeParameterWithDefaultDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TypeParameterWithDefaultDecl() (localctx ITypeParameterWithDefaultDeclContext) {
	this := p
	_ = this

	localctx = NewTypeParameterWithDefaultDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, PHPParserRULE_typeParameterWithDefaultDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAttributeStart {
		{
			p.SetState(531)
			p.Attributes()
		}

	}
	{
		p.SetState(534)
		p.Identifier()
	}
	{
		p.SetState(535)
		p.Match(PHPParserEq)
	}
	p.SetState(538)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(536)
			p.QualifiedStaticTypeRef()
		}

	case 2:
		{
			p.SetState(537)
			p.PrimitiveType()
		}

	}

	return localctx
}

// IAttributesContext is an interface to support dynamic dispatch.
type IAttributesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributesContext differentiates from other interfaces.
	IsAttributesContext()
}

type AttributesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributesContext() *AttributesContext {
	var p = new(AttributesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_attributes
	return p
}

func (*AttributesContext) IsAttributesContext() {}

func NewAttributesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributesContext {
	var p = new(AttributesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_attributes

	return p
}

func (s *AttributesContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributesContext) AllAttributeGroup() []IAttributeGroupContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeGroupContext); ok {
			len++
		}
	}

	tst := make([]IAttributeGroupContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeGroupContext); ok {
			tst[i] = t.(IAttributeGroupContext)
			i++
		}
	}

	return tst
}

func (s *AttributesContext) AttributeGroup(i int) IAttributeGroupContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeGroupContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeGroupContext)
}

func (s *AttributesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitAttributes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Attributes() (localctx IAttributesContext) {
	this := p
	_ = this

	localctx = NewAttributesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, PHPParserRULE_attributes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(541)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == PHPParserAttributeStart {
		{
			p.SetState(540)
			p.AttributeGroup()
		}

		p.SetState(543)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAttributeGroupContext is an interface to support dynamic dispatch.
type IAttributeGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeGroupContext differentiates from other interfaces.
	IsAttributeGroupContext()
}

type AttributeGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeGroupContext() *AttributeGroupContext {
	var p = new(AttributeGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_attributeGroup
	return p
}

func (*AttributeGroupContext) IsAttributeGroupContext() {}

func NewAttributeGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeGroupContext {
	var p = new(AttributeGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_attributeGroup

	return p
}

func (s *AttributeGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeGroupContext) AttributeStart() antlr.TerminalNode {
	return s.GetToken(PHPParserAttributeStart, 0)
}

func (s *AttributeGroupContext) AllAttribute() []IAttributeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeContext); ok {
			len++
		}
	}

	tst := make([]IAttributeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeContext); ok {
			tst[i] = t.(IAttributeContext)
			i++
		}
	}

	return tst
}

func (s *AttributeGroupContext) Attribute(i int) IAttributeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeContext)
}

func (s *AttributeGroupContext) CloseSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseSquareBracket, 0)
}

func (s *AttributeGroupContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AttributeGroupContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *AttributeGroupContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *AttributeGroupContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *AttributeGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitAttributeGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) AttributeGroup() (localctx IAttributeGroupContext) {
	this := p
	_ = this

	localctx = NewAttributeGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, PHPParserRULE_attributeGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(545)
		p.Match(PHPParserAttributeStart)
	}
	p.SetState(549)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(546)
			p.Identifier()
		}
		{
			p.SetState(547)
			p.Match(PHPParserColon)
		}

	}
	{
		p.SetState(551)
		p.Attribute()
	}
	p.SetState(556)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(552)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(553)
			p.Attribute()
		}

		p.SetState(558)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(559)
		p.Match(PHPParserCloseSquareBracket)
	}

	return localctx
}

// IAttributeContext is an interface to support dynamic dispatch.
type IAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeContext differentiates from other interfaces.
	IsAttributeContext()
}

type AttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeContext() *AttributeContext {
	var p = new(AttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_attribute
	return p
}

func (*AttributeContext) IsAttributeContext() {}

func NewAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeContext {
	var p = new(AttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_attribute

	return p
}

func (s *AttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeContext) QualifiedNamespaceName() IQualifiedNamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameContext)
}

func (s *AttributeContext) Arguments() IArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *AttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitAttribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Attribute() (localctx IAttributeContext) {
	this := p
	_ = this

	localctx = NewAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, PHPParserRULE_attribute)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(561)
		p.QualifiedNamespaceName()
	}
	p.SetState(563)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserOpenRoundBracket {
		{
			p.SetState(562)
			p.Arguments()
		}

	}

	return localctx
}

// IInnerStatementListContext is an interface to support dynamic dispatch.
type IInnerStatementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInnerStatementListContext differentiates from other interfaces.
	IsInnerStatementListContext()
}

type InnerStatementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInnerStatementListContext() *InnerStatementListContext {
	var p = new(InnerStatementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_innerStatementList
	return p
}

func (*InnerStatementListContext) IsInnerStatementListContext() {}

func NewInnerStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InnerStatementListContext {
	var p = new(InnerStatementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_innerStatementList

	return p
}

func (s *InnerStatementListContext) GetParser() antlr.Parser { return s.parser }

func (s *InnerStatementListContext) AllInnerStatement() []IInnerStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInnerStatementContext); ok {
			len++
		}
	}

	tst := make([]IInnerStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInnerStatementContext); ok {
			tst[i] = t.(IInnerStatementContext)
			i++
		}
	}

	return tst
}

func (s *InnerStatementListContext) InnerStatement(i int) IInnerStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementContext)
}

func (s *InnerStatementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InnerStatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InnerStatementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitInnerStatementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) InnerStatementList() (localctx IInnerStatementListContext) {
	this := p
	_ = this

	localctx = NewInnerStatementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, PHPParserRULE_innerStatementList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(565)
				p.InnerStatement()
			}

		}
		p.SetState(570)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())
	}

	return localctx
}

// IInnerStatementContext is an interface to support dynamic dispatch.
type IInnerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInnerStatementContext differentiates from other interfaces.
	IsInnerStatementContext()
}

type InnerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInnerStatementContext() *InnerStatementContext {
	var p = new(InnerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_innerStatement
	return p
}

func (*InnerStatementContext) IsInnerStatementContext() {}

func NewInnerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InnerStatementContext {
	var p = new(InnerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_innerStatement

	return p
}

func (s *InnerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InnerStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *InnerStatementContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *InnerStatementContext) ClassDeclaration() IClassDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *InnerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InnerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InnerStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitInnerStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) InnerStatement() (localctx IInnerStatementContext) {
	this := p
	_ = this

	localctx = NewInnerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, PHPParserRULE_innerStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(574)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(571)
			p.Statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(572)
			p.FunctionDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(573)
			p.ClassDeclaration()
		}

	}

	return localctx
}

// ILabelStatementContext is an interface to support dynamic dispatch.
type ILabelStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelStatementContext differentiates from other interfaces.
	IsLabelStatementContext()
}

type LabelStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelStatementContext() *LabelStatementContext {
	var p = new(LabelStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_labelStatement
	return p
}

func (*LabelStatementContext) IsLabelStatementContext() {}

func NewLabelStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelStatementContext {
	var p = new(LabelStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_labelStatement

	return p
}

func (s *LabelStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelStatementContext) Label() antlr.TerminalNode {
	return s.GetToken(PHPParserLabel, 0)
}

func (s *LabelStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *LabelStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitLabelStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) LabelStatement() (localctx ILabelStatementContext) {
	this := p
	_ = this

	localctx = NewLabelStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, PHPParserRULE_labelStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(576)
		p.Match(PHPParserLabel)
	}
	{
		p.SetState(577)
		p.Match(PHPParserColon)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) LabelStatement() ILabelStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelStatementContext)
}

func (s *StatementContext) BlockStatement() IBlockStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *StatementContext) IfStatement() IIfStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *StatementContext) WhileStatement() IWhileStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhileStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *StatementContext) DoWhileStatement() IDoWhileStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDoWhileStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDoWhileStatementContext)
}

func (s *StatementContext) ForStatement() IForStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *StatementContext) SwitchStatement() ISwitchStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchStatementContext)
}

func (s *StatementContext) BreakStatement() IBreakStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementContext) ContinueStatement() IContinueStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinueStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementContext) ReturnStatement() IReturnStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementContext) YieldExpression() IYieldExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IYieldExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IYieldExpressionContext)
}

func (s *StatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *StatementContext) GlobalStatement() IGlobalStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGlobalStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGlobalStatementContext)
}

func (s *StatementContext) StaticVariableStatement() IStaticVariableStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticVariableStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticVariableStatementContext)
}

func (s *StatementContext) EchoStatement() IEchoStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEchoStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEchoStatementContext)
}

func (s *StatementContext) ExpressionStatement() IExpressionStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *StatementContext) UnsetStatement() IUnsetStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnsetStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnsetStatementContext)
}

func (s *StatementContext) ForeachStatement() IForeachStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeachStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeachStatementContext)
}

func (s *StatementContext) TryCatchFinally() ITryCatchFinallyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITryCatchFinallyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITryCatchFinallyContext)
}

func (s *StatementContext) ThrowStatement() IThrowStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IThrowStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IThrowStatementContext)
}

func (s *StatementContext) GotoStatement() IGotoStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGotoStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGotoStatementContext)
}

func (s *StatementContext) DeclareStatement() IDeclareStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareStatementContext)
}

func (s *StatementContext) EmptyStatement_() IEmptyStatement_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEmptyStatement_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEmptyStatement_Context)
}

func (s *StatementContext) InlineHtmlStatement() IInlineHtmlStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInlineHtmlStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInlineHtmlStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Statement() (localctx IStatementContext) {
	this := p
	_ = this

	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, PHPParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(604)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(579)
			p.LabelStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(580)
			p.BlockStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(581)
			p.IfStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(582)
			p.WhileStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(583)
			p.DoWhileStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(584)
			p.ForStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(585)
			p.SwitchStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(586)
			p.BreakStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(587)
			p.ContinueStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(588)
			p.ReturnStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(589)
			p.YieldExpression()
		}
		{
			p.SetState(590)
			p.Match(PHPParserSemiColon)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(592)
			p.GlobalStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(593)
			p.StaticVariableStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(594)
			p.EchoStatement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(595)
			p.ExpressionStatement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(596)
			p.UnsetStatement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(597)
			p.ForeachStatement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(598)
			p.TryCatchFinally()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(599)
			p.ThrowStatement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(600)
			p.GotoStatement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(601)
			p.DeclareStatement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(602)
			p.EmptyStatement_()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(603)
			p.InlineHtmlStatement()
		}

	}

	return localctx
}

// IEmptyStatement_Context is an interface to support dynamic dispatch.
type IEmptyStatement_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmptyStatement_Context differentiates from other interfaces.
	IsEmptyStatement_Context()
}

type EmptyStatement_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptyStatement_Context() *EmptyStatement_Context {
	var p = new(EmptyStatement_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_emptyStatement_
	return p
}

func (*EmptyStatement_Context) IsEmptyStatement_Context() {}

func NewEmptyStatement_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptyStatement_Context {
	var p = new(EmptyStatement_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_emptyStatement_

	return p
}

func (s *EmptyStatement_Context) GetParser() antlr.Parser { return s.parser }

func (s *EmptyStatement_Context) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *EmptyStatement_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptyStatement_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmptyStatement_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitEmptyStatement_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) EmptyStatement_() (localctx IEmptyStatement_Context) {
	this := p
	_ = this

	localctx = NewEmptyStatement_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, PHPParserRULE_emptyStatement_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(606)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IBlockStatementContext is an interface to support dynamic dispatch.
type IBlockStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatementContext differentiates from other interfaces.
	IsBlockStatementContext()
}

type BlockStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatementContext() *BlockStatementContext {
	var p = new(BlockStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_blockStatement
	return p
}

func (*BlockStatementContext) IsBlockStatementContext() {}

func NewBlockStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatementContext {
	var p = new(BlockStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_blockStatement

	return p
}

func (s *BlockStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatementContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *BlockStatementContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *BlockStatementContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *BlockStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitBlockStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) BlockStatement() (localctx IBlockStatementContext) {
	this := p
	_ = this

	localctx = NewBlockStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, PHPParserRULE_blockStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(608)
		p.Match(PHPParserOpenCurlyBracket)
	}
	{
		p.SetState(609)
		p.InnerStatementList()
	}
	{
		p.SetState(610)
		p.Match(PHPParserCloseCurlyBracket)
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) If() antlr.TerminalNode {
	return s.GetToken(PHPParserIf, 0)
}

func (s *IfStatementContext) Parentheses() IParenthesesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesesContext)
}

func (s *IfStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IfStatementContext) AllElseIfStatement() []IElseIfStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IElseIfStatementContext); ok {
			len++
		}
	}

	tst := make([]IElseIfStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IElseIfStatementContext); ok {
			tst[i] = t.(IElseIfStatementContext)
			i++
		}
	}

	return tst
}

func (s *IfStatementContext) ElseIfStatement(i int) IElseIfStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElseIfStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElseIfStatementContext)
}

func (s *IfStatementContext) ElseStatement() IElseStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElseStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElseStatementContext)
}

func (s *IfStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *IfStatementContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *IfStatementContext) EndIf() antlr.TerminalNode {
	return s.GetToken(PHPParserEndIf, 0)
}

func (s *IfStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *IfStatementContext) AllElseIfColonStatement() []IElseIfColonStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IElseIfColonStatementContext); ok {
			len++
		}
	}

	tst := make([]IElseIfColonStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IElseIfColonStatementContext); ok {
			tst[i] = t.(IElseIfColonStatementContext)
			i++
		}
	}

	return tst
}

func (s *IfStatementContext) ElseIfColonStatement(i int) IElseIfColonStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElseIfColonStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElseIfColonStatementContext)
}

func (s *IfStatementContext) ElseColonStatement() IElseColonStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElseColonStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElseColonStatementContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) IfStatement() (localctx IIfStatementContext) {
	this := p
	_ = this

	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, PHPParserRULE_ifStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(612)
			p.Match(PHPParserIf)
		}
		{
			p.SetState(613)
			p.Parentheses()
		}
		{
			p.SetState(614)
			p.Statement()
		}
		p.SetState(618)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(615)
					p.ElseIfStatement()
				}

			}
			p.SetState(620)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())
		}
		p.SetState(622)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(621)
				p.ElseStatement()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(624)
			p.Match(PHPParserIf)
		}
		{
			p.SetState(625)
			p.Parentheses()
		}
		{
			p.SetState(626)
			p.Match(PHPParserColon)
		}
		{
			p.SetState(627)
			p.InnerStatementList()
		}
		p.SetState(631)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserElseIf {
			{
				p.SetState(628)
				p.ElseIfColonStatement()
			}

			p.SetState(633)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(635)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserElse {
			{
				p.SetState(634)
				p.ElseColonStatement()
			}

		}
		{
			p.SetState(637)
			p.Match(PHPParserEndIf)
		}
		{
			p.SetState(638)
			p.Match(PHPParserSemiColon)
		}

	}

	return localctx
}

// IElseIfStatementContext is an interface to support dynamic dispatch.
type IElseIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseIfStatementContext differentiates from other interfaces.
	IsElseIfStatementContext()
}

type ElseIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseIfStatementContext() *ElseIfStatementContext {
	var p = new(ElseIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_elseIfStatement
	return p
}

func (*ElseIfStatementContext) IsElseIfStatementContext() {}

func NewElseIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElseIfStatementContext {
	var p = new(ElseIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_elseIfStatement

	return p
}

func (s *ElseIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ElseIfStatementContext) ElseIf() antlr.TerminalNode {
	return s.GetToken(PHPParserElseIf, 0)
}

func (s *ElseIfStatementContext) Parentheses() IParenthesesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesesContext)
}

func (s *ElseIfStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ElseIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElseIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElseIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitElseIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ElseIfStatement() (localctx IElseIfStatementContext) {
	this := p
	_ = this

	localctx = NewElseIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, PHPParserRULE_elseIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(642)
		p.Match(PHPParserElseIf)
	}
	{
		p.SetState(643)
		p.Parentheses()
	}
	{
		p.SetState(644)
		p.Statement()
	}

	return localctx
}

// IElseIfColonStatementContext is an interface to support dynamic dispatch.
type IElseIfColonStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseIfColonStatementContext differentiates from other interfaces.
	IsElseIfColonStatementContext()
}

type ElseIfColonStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseIfColonStatementContext() *ElseIfColonStatementContext {
	var p = new(ElseIfColonStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_elseIfColonStatement
	return p
}

func (*ElseIfColonStatementContext) IsElseIfColonStatementContext() {}

func NewElseIfColonStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElseIfColonStatementContext {
	var p = new(ElseIfColonStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_elseIfColonStatement

	return p
}

func (s *ElseIfColonStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ElseIfColonStatementContext) ElseIf() antlr.TerminalNode {
	return s.GetToken(PHPParserElseIf, 0)
}

func (s *ElseIfColonStatementContext) Parentheses() IParenthesesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesesContext)
}

func (s *ElseIfColonStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *ElseIfColonStatementContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *ElseIfColonStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElseIfColonStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElseIfColonStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitElseIfColonStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ElseIfColonStatement() (localctx IElseIfColonStatementContext) {
	this := p
	_ = this

	localctx = NewElseIfColonStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, PHPParserRULE_elseIfColonStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(646)
		p.Match(PHPParserElseIf)
	}
	{
		p.SetState(647)
		p.Parentheses()
	}
	{
		p.SetState(648)
		p.Match(PHPParserColon)
	}
	{
		p.SetState(649)
		p.InnerStatementList()
	}

	return localctx
}

// IElseStatementContext is an interface to support dynamic dispatch.
type IElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseStatementContext differentiates from other interfaces.
	IsElseStatementContext()
}

type ElseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseStatementContext() *ElseStatementContext {
	var p = new(ElseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_elseStatement
	return p
}

func (*ElseStatementContext) IsElseStatementContext() {}

func NewElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElseStatementContext {
	var p = new(ElseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_elseStatement

	return p
}

func (s *ElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ElseStatementContext) Else() antlr.TerminalNode {
	return s.GetToken(PHPParserElse, 0)
}

func (s *ElseStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitElseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ElseStatement() (localctx IElseStatementContext) {
	this := p
	_ = this

	localctx = NewElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, PHPParserRULE_elseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(651)
		p.Match(PHPParserElse)
	}
	{
		p.SetState(652)
		p.Statement()
	}

	return localctx
}

// IElseColonStatementContext is an interface to support dynamic dispatch.
type IElseColonStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseColonStatementContext differentiates from other interfaces.
	IsElseColonStatementContext()
}

type ElseColonStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseColonStatementContext() *ElseColonStatementContext {
	var p = new(ElseColonStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_elseColonStatement
	return p
}

func (*ElseColonStatementContext) IsElseColonStatementContext() {}

func NewElseColonStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElseColonStatementContext {
	var p = new(ElseColonStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_elseColonStatement

	return p
}

func (s *ElseColonStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ElseColonStatementContext) Else() antlr.TerminalNode {
	return s.GetToken(PHPParserElse, 0)
}

func (s *ElseColonStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *ElseColonStatementContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *ElseColonStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElseColonStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElseColonStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitElseColonStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ElseColonStatement() (localctx IElseColonStatementContext) {
	this := p
	_ = this

	localctx = NewElseColonStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, PHPParserRULE_elseColonStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(654)
		p.Match(PHPParserElse)
	}
	{
		p.SetState(655)
		p.Match(PHPParserColon)
	}
	{
		p.SetState(656)
		p.InnerStatementList()
	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) While() antlr.TerminalNode {
	return s.GetToken(PHPParserWhile, 0)
}

func (s *WhileStatementContext) Parentheses() IParenthesesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesesContext)
}

func (s *WhileStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *WhileStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *WhileStatementContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *WhileStatementContext) EndWhile() antlr.TerminalNode {
	return s.GetToken(PHPParserEndWhile, 0)
}

func (s *WhileStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) WhileStatement() (localctx IWhileStatementContext) {
	this := p
	_ = this

	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, PHPParserRULE_whileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(658)
		p.Match(PHPParserWhile)
	}
	{
		p.SetState(659)
		p.Parentheses()
	}
	p.SetState(666)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserHtmlText, PHPParserXmlStart, PHPParserHtmlScriptOpen, PHPParserHtmlStyleOpen, PHPParserHtmlDtd, PHPParserHtmlOpen, PHPParserHtmlClose, PHPParserHtmlSlashClose, PHPParserHtmlSlash, PHPParserHtmlEquals, PHPParserHtmlStartQuoteString, PHPParserHtmlStartDoubleQuoteString, PHPParserHtmlHex, PHPParserHtmlDecimal, PHPParserHtmlName, PHPParserHtmlEndQuoteString, PHPParserHtmlQuoteString, PHPParserHtmlEndDoubleQuoteString, PHPParserHtmlDoubleQuoteString, PHPParserScriptText, PHPParserHtmlScriptClose, PHPParserStyleBody, PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDefine, PHPParserDefined, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserEval, PHPParserAssert, PHPParserDie, PHPParserExit, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInclude, PHPParserIncludeOnce, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserIsSet, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserRequire, PHPParserRequireOnce, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserThrow, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUnset, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserInc, PHPParserDec, PHPParserStartNowDoc, PHPParserNamespaceSeparator, PHPParserAmpersand, PHPParserBang, PHPParserPlus, PHPParserMinus, PHPParserTilde, PHPParserSuppressWarnings, PHPParserDollar, PHPParserOpenRoundBracket, PHPParserOpenSquareBracket, PHPParserOpenCurlyBracket, PHPParserSemiColon, PHPParserSet_Include_Path, PHPParserVarName, PHPParserLabel, PHPParserOctal, PHPParserDecimal, PHPParserReal, PHPParserHex, PHPParserBinary, PHPParserBackQuoteString, PHPParserSingleQuoteString, PHPParserDoubleQuote:
		{
			p.SetState(660)
			p.Statement()
		}

	case PHPParserColon:
		{
			p.SetState(661)
			p.Match(PHPParserColon)
		}
		{
			p.SetState(662)
			p.InnerStatementList()
		}
		{
			p.SetState(663)
			p.Match(PHPParserEndWhile)
		}
		{
			p.SetState(664)
			p.Match(PHPParserSemiColon)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDoWhileStatementContext is an interface to support dynamic dispatch.
type IDoWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDoWhileStatementContext differentiates from other interfaces.
	IsDoWhileStatementContext()
}

type DoWhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoWhileStatementContext() *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_doWhileStatement
	return p
}

func (*DoWhileStatementContext) IsDoWhileStatementContext() {}

func NewDoWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_doWhileStatement

	return p
}

func (s *DoWhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoWhileStatementContext) Do() antlr.TerminalNode {
	return s.GetToken(PHPParserDo, 0)
}

func (s *DoWhileStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *DoWhileStatementContext) While() antlr.TerminalNode {
	return s.GetToken(PHPParserWhile, 0)
}

func (s *DoWhileStatementContext) Parentheses() IParenthesesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesesContext)
}

func (s *DoWhileStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *DoWhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoWhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoWhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitDoWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) DoWhileStatement() (localctx IDoWhileStatementContext) {
	this := p
	_ = this

	localctx = NewDoWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, PHPParserRULE_doWhileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(668)
		p.Match(PHPParserDo)
	}
	{
		p.SetState(669)
		p.Statement()
	}
	{
		p.SetState(670)
		p.Match(PHPParserWhile)
	}
	{
		p.SetState(671)
		p.Parentheses()
	}
	{
		p.SetState(672)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_forStatement
	return p
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) For() antlr.TerminalNode {
	return s.GetToken(PHPParserFor, 0)
}

func (s *ForStatementContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *ForStatementContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(PHPParserSemiColon)
}

func (s *ForStatementContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, i)
}

func (s *ForStatementContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *ForStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *ForStatementContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *ForStatementContext) EndFor() antlr.TerminalNode {
	return s.GetToken(PHPParserEndFor, 0)
}

func (s *ForStatementContext) ForInit() IForInitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForInitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForInitContext)
}

func (s *ForStatementContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ForStatementContext) ForUpdate() IForUpdateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForUpdateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForUpdateContext)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitForStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ForStatement() (localctx IForStatementContext) {
	this := p
	_ = this

	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, PHPParserRULE_forStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(674)
		p.Match(PHPParserFor)
	}
	{
		p.SetState(675)
		p.Match(PHPParserOpenRoundBracket)
	}
	p.SetState(677)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
		{
			p.SetState(676)
			p.ForInit()
		}

	}
	{
		p.SetState(679)
		p.Match(PHPParserSemiColon)
	}
	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
		{
			p.SetState(680)
			p.ExpressionList()
		}

	}
	{
		p.SetState(683)
		p.Match(PHPParserSemiColon)
	}
	p.SetState(685)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
		{
			p.SetState(684)
			p.ForUpdate()
		}

	}
	{
		p.SetState(687)
		p.Match(PHPParserCloseRoundBracket)
	}
	p.SetState(694)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserHtmlText, PHPParserXmlStart, PHPParserHtmlScriptOpen, PHPParserHtmlStyleOpen, PHPParserHtmlDtd, PHPParserHtmlOpen, PHPParserHtmlClose, PHPParserHtmlSlashClose, PHPParserHtmlSlash, PHPParserHtmlEquals, PHPParserHtmlStartQuoteString, PHPParserHtmlStartDoubleQuoteString, PHPParserHtmlHex, PHPParserHtmlDecimal, PHPParserHtmlName, PHPParserHtmlEndQuoteString, PHPParserHtmlQuoteString, PHPParserHtmlEndDoubleQuoteString, PHPParserHtmlDoubleQuoteString, PHPParserScriptText, PHPParserHtmlScriptClose, PHPParserStyleBody, PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDefine, PHPParserDefined, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserEval, PHPParserAssert, PHPParserDie, PHPParserExit, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInclude, PHPParserIncludeOnce, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserIsSet, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserRequire, PHPParserRequireOnce, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserThrow, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUnset, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserInc, PHPParserDec, PHPParserStartNowDoc, PHPParserNamespaceSeparator, PHPParserAmpersand, PHPParserBang, PHPParserPlus, PHPParserMinus, PHPParserTilde, PHPParserSuppressWarnings, PHPParserDollar, PHPParserOpenRoundBracket, PHPParserOpenSquareBracket, PHPParserOpenCurlyBracket, PHPParserSemiColon, PHPParserSet_Include_Path, PHPParserVarName, PHPParserLabel, PHPParserOctal, PHPParserDecimal, PHPParserReal, PHPParserHex, PHPParserBinary, PHPParserBackQuoteString, PHPParserSingleQuoteString, PHPParserDoubleQuote:
		{
			p.SetState(688)
			p.Statement()
		}

	case PHPParserColon:
		{
			p.SetState(689)
			p.Match(PHPParserColon)
		}
		{
			p.SetState(690)
			p.InnerStatementList()
		}
		{
			p.SetState(691)
			p.Match(PHPParserEndFor)
		}
		{
			p.SetState(692)
			p.Match(PHPParserSemiColon)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForInitContext is an interface to support dynamic dispatch.
type IForInitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForInitContext differentiates from other interfaces.
	IsForInitContext()
}

type ForInitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForInitContext() *ForInitContext {
	var p = new(ForInitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_forInit
	return p
}

func (*ForInitContext) IsForInitContext() {}

func NewForInitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForInitContext {
	var p = new(ForInitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_forInit

	return p
}

func (s *ForInitContext) GetParser() antlr.Parser { return s.parser }

func (s *ForInitContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ForInitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForInitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitForInit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ForInit() (localctx IForInitContext) {
	this := p
	_ = this

	localctx = NewForInitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, PHPParserRULE_forInit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(696)
		p.ExpressionList()
	}

	return localctx
}

// IForUpdateContext is an interface to support dynamic dispatch.
type IForUpdateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForUpdateContext differentiates from other interfaces.
	IsForUpdateContext()
}

type ForUpdateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForUpdateContext() *ForUpdateContext {
	var p = new(ForUpdateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_forUpdate
	return p
}

func (*ForUpdateContext) IsForUpdateContext() {}

func NewForUpdateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForUpdateContext {
	var p = new(ForUpdateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_forUpdate

	return p
}

func (s *ForUpdateContext) GetParser() antlr.Parser { return s.parser }

func (s *ForUpdateContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ForUpdateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForUpdateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForUpdateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitForUpdate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ForUpdate() (localctx IForUpdateContext) {
	this := p
	_ = this

	localctx = NewForUpdateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, PHPParserRULE_forUpdate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(698)
		p.ExpressionList()
	}

	return localctx
}

// ISwitchStatementContext is an interface to support dynamic dispatch.
type ISwitchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatementContext differentiates from other interfaces.
	IsSwitchStatementContext()
}

type SwitchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatementContext() *SwitchStatementContext {
	var p = new(SwitchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_switchStatement
	return p
}

func (*SwitchStatementContext) IsSwitchStatementContext() {}

func NewSwitchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatementContext {
	var p = new(SwitchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_switchStatement

	return p
}

func (s *SwitchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatementContext) Switch() antlr.TerminalNode {
	return s.GetToken(PHPParserSwitch, 0)
}

func (s *SwitchStatementContext) Parentheses() IParenthesesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesesContext)
}

func (s *SwitchStatementContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *SwitchStatementContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *SwitchStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *SwitchStatementContext) EndSwitch() antlr.TerminalNode {
	return s.GetToken(PHPParserEndSwitch, 0)
}

func (s *SwitchStatementContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(PHPParserSemiColon)
}

func (s *SwitchStatementContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, i)
}

func (s *SwitchStatementContext) AllSwitchCaseBlock() []ISwitchCaseBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISwitchCaseBlockContext); ok {
			len++
		}
	}

	tst := make([]ISwitchCaseBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISwitchCaseBlockContext); ok {
			tst[i] = t.(ISwitchCaseBlockContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStatementContext) SwitchCaseBlock(i int) ISwitchCaseBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchCaseBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchCaseBlockContext)
}

func (s *SwitchStatementContext) AllSwitchDefaultBlock() []ISwitchDefaultBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISwitchDefaultBlockContext); ok {
			len++
		}
	}

	tst := make([]ISwitchDefaultBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISwitchDefaultBlockContext); ok {
			tst[i] = t.(ISwitchDefaultBlockContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStatementContext) SwitchDefaultBlock(i int) ISwitchDefaultBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchDefaultBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchDefaultBlockContext)
}

func (s *SwitchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitSwitchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) SwitchStatement() (localctx ISwitchStatementContext) {
	this := p
	_ = this

	localctx = NewSwitchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, PHPParserRULE_switchStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(700)
		p.Match(PHPParserSwitch)
	}
	{
		p.SetState(701)
		p.Parentheses()
	}
	p.SetState(727)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserOpenCurlyBracket:
		{
			p.SetState(702)
			p.Match(PHPParserOpenCurlyBracket)
		}
		p.SetState(704)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserSemiColon {
			{
				p.SetState(703)
				p.Match(PHPParserSemiColon)
			}

		}
		p.SetState(710)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserCase || _la == PHPParserDefault {
			p.SetState(708)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case PHPParserCase:
				{
					p.SetState(706)
					p.SwitchCaseBlock()
				}

			case PHPParserDefault:
				{
					p.SetState(707)
					p.SwitchDefaultBlock()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(712)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(713)
			p.Match(PHPParserCloseCurlyBracket)
		}

	case PHPParserColon:
		{
			p.SetState(714)
			p.Match(PHPParserColon)
		}
		p.SetState(716)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserSemiColon {
			{
				p.SetState(715)
				p.Match(PHPParserSemiColon)
			}

		}
		p.SetState(722)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserCase || _la == PHPParserDefault {
			p.SetState(720)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case PHPParserCase:
				{
					p.SetState(718)
					p.SwitchCaseBlock()
				}

			case PHPParserDefault:
				{
					p.SetState(719)
					p.SwitchDefaultBlock()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(724)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(725)
			p.Match(PHPParserEndSwitch)
		}
		{
			p.SetState(726)
			p.Match(PHPParserSemiColon)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISwitchCaseBlockContext is an interface to support dynamic dispatch.
type ISwitchCaseBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchCaseBlockContext differentiates from other interfaces.
	IsSwitchCaseBlockContext()
}

type SwitchCaseBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchCaseBlockContext() *SwitchCaseBlockContext {
	var p = new(SwitchCaseBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_switchCaseBlock
	return p
}

func (*SwitchCaseBlockContext) IsSwitchCaseBlockContext() {}

func NewSwitchCaseBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchCaseBlockContext {
	var p = new(SwitchCaseBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_switchCaseBlock

	return p
}

func (s *SwitchCaseBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchCaseBlockContext) Case() antlr.TerminalNode {
	return s.GetToken(PHPParserCase, 0)
}

func (s *SwitchCaseBlockContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SwitchCaseBlockContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *SwitchCaseBlockContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *SwitchCaseBlockContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(PHPParserSemiColon)
}

func (s *SwitchCaseBlockContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, i)
}

func (s *SwitchCaseBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchCaseBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchCaseBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitSwitchCaseBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) SwitchCaseBlock() (localctx ISwitchCaseBlockContext) {
	this := p
	_ = this

	localctx = NewSwitchCaseBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, PHPParserRULE_switchCaseBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(729)
		p.Match(PHPParserCase)
	}
	{
		p.SetState(730)
		p.expression(0)
	}
	{
		p.SetState(731)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PHPParserColon || _la == PHPParserSemiColon) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(735)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(732)
				p.Match(PHPParserSemiColon)
			}

		}
		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())
	}
	{
		p.SetState(738)
		p.InnerStatementList()
	}

	return localctx
}

// ISwitchDefaultBlockContext is an interface to support dynamic dispatch.
type ISwitchDefaultBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchDefaultBlockContext differentiates from other interfaces.
	IsSwitchDefaultBlockContext()
}

type SwitchDefaultBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchDefaultBlockContext() *SwitchDefaultBlockContext {
	var p = new(SwitchDefaultBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_switchDefaultBlock
	return p
}

func (*SwitchDefaultBlockContext) IsSwitchDefaultBlockContext() {}

func NewSwitchDefaultBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchDefaultBlockContext {
	var p = new(SwitchDefaultBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_switchDefaultBlock

	return p
}

func (s *SwitchDefaultBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchDefaultBlockContext) Default() antlr.TerminalNode {
	return s.GetToken(PHPParserDefault, 0)
}

func (s *SwitchDefaultBlockContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *SwitchDefaultBlockContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *SwitchDefaultBlockContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(PHPParserSemiColon)
}

func (s *SwitchDefaultBlockContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, i)
}

func (s *SwitchDefaultBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchDefaultBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchDefaultBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitSwitchDefaultBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) SwitchDefaultBlock() (localctx ISwitchDefaultBlockContext) {
	this := p
	_ = this

	localctx = NewSwitchDefaultBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, PHPParserRULE_switchDefaultBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(740)
		p.Match(PHPParserDefault)
	}
	{
		p.SetState(741)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PHPParserColon || _la == PHPParserSemiColon) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(745)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(742)
				p.Match(PHPParserSemiColon)
			}

		}
		p.SetState(747)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())
	}
	{
		p.SetState(748)
		p.InnerStatementList()
	}

	return localctx
}

// ISwitchBlockContext is an interface to support dynamic dispatch.
type ISwitchBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchBlockContext differentiates from other interfaces.
	IsSwitchBlockContext()
}

type SwitchBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchBlockContext() *SwitchBlockContext {
	var p = new(SwitchBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_switchBlock
	return p
}

func (*SwitchBlockContext) IsSwitchBlockContext() {}

func NewSwitchBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchBlockContext {
	var p = new(SwitchBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_switchBlock

	return p
}

func (s *SwitchBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchBlockContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *SwitchBlockContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(PHPParserColon)
}

func (s *SwitchBlockContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserColon, i)
}

func (s *SwitchBlockContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(PHPParserSemiColon)
}

func (s *SwitchBlockContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, i)
}

func (s *SwitchBlockContext) AllDefault() []antlr.TerminalNode {
	return s.GetTokens(PHPParserDefault)
}

func (s *SwitchBlockContext) Default(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserDefault, i)
}

func (s *SwitchBlockContext) AllCase() []antlr.TerminalNode {
	return s.GetTokens(PHPParserCase)
}

func (s *SwitchBlockContext) Case(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserCase, i)
}

func (s *SwitchBlockContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *SwitchBlockContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SwitchBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitSwitchBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) SwitchBlock() (localctx ISwitchBlockContext) {
	this := p
	_ = this

	localctx = NewSwitchBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, PHPParserRULE_switchBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(753)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case PHPParserCase:
				{
					p.SetState(750)
					p.Match(PHPParserCase)
				}
				{
					p.SetState(751)
					p.expression(0)
				}

			case PHPParserDefault:
				{
					p.SetState(752)
					p.Match(PHPParserDefault)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(755)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PHPParserColon || _la == PHPParserSemiColon) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(759)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(756)
						p.Match(PHPParserSemiColon)
					}

				}
				p.SetState(761)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext())
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())
	}
	{
		p.SetState(766)
		p.InnerStatementList()
	}

	return localctx
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) Break() antlr.TerminalNode {
	return s.GetToken(PHPParserBreak, 0)
}

func (s *BreakStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *BreakStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) BreakStatement() (localctx IBreakStatementContext) {
	this := p
	_ = this

	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, PHPParserRULE_breakStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(768)
		p.Match(PHPParserBreak)
	}
	p.SetState(770)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
		{
			p.SetState(769)
			p.expression(0)
		}

	}
	{
		p.SetState(772)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) Continue() antlr.TerminalNode {
	return s.GetToken(PHPParserContinue, 0)
}

func (s *ContinueStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *ContinueStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ContinueStatement() (localctx IContinueStatementContext) {
	this := p
	_ = this

	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, PHPParserRULE_continueStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(774)
		p.Match(PHPParserContinue)
	}
	p.SetState(776)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
		{
			p.SetState(775)
			p.expression(0)
		}

	}
	{
		p.SetState(778)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Return() antlr.TerminalNode {
	return s.GetToken(PHPParserReturn, 0)
}

func (s *ReturnStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ReturnStatement() (localctx IReturnStatementContext) {
	this := p
	_ = this

	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, PHPParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(780)
		p.Match(PHPParserReturn)
	}
	p.SetState(782)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
		{
			p.SetState(781)
			p.expression(0)
		}

	}
	{
		p.SetState(784)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	this := p
	_ = this

	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, PHPParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(786)
		p.expression(0)
	}
	{
		p.SetState(787)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IUnsetStatementContext is an interface to support dynamic dispatch.
type IUnsetStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnsetStatementContext differentiates from other interfaces.
	IsUnsetStatementContext()
}

type UnsetStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnsetStatementContext() *UnsetStatementContext {
	var p = new(UnsetStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_unsetStatement
	return p
}

func (*UnsetStatementContext) IsUnsetStatementContext() {}

func NewUnsetStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnsetStatementContext {
	var p = new(UnsetStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_unsetStatement

	return p
}

func (s *UnsetStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UnsetStatementContext) Unset() antlr.TerminalNode {
	return s.GetToken(PHPParserUnset, 0)
}

func (s *UnsetStatementContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *UnsetStatementContext) ChainList() IChainListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainListContext)
}

func (s *UnsetStatementContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *UnsetStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *UnsetStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnsetStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnsetStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitUnsetStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) UnsetStatement() (localctx IUnsetStatementContext) {
	this := p
	_ = this

	localctx = NewUnsetStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, PHPParserRULE_unsetStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(789)
		p.Match(PHPParserUnset)
	}
	{
		p.SetState(790)
		p.Match(PHPParserOpenRoundBracket)
	}
	{
		p.SetState(791)
		p.ChainList()
	}
	{
		p.SetState(792)
		p.Match(PHPParserCloseRoundBracket)
	}
	{
		p.SetState(793)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IForeachStatementContext is an interface to support dynamic dispatch.
type IForeachStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeachStatementContext differentiates from other interfaces.
	IsForeachStatementContext()
}

type ForeachStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeachStatementContext() *ForeachStatementContext {
	var p = new(ForeachStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_foreachStatement
	return p
}

func (*ForeachStatementContext) IsForeachStatementContext() {}

func NewForeachStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForeachStatementContext {
	var p = new(ForeachStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_foreachStatement

	return p
}

func (s *ForeachStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForeachStatementContext) Foreach() antlr.TerminalNode {
	return s.GetToken(PHPParserForeach, 0)
}

func (s *ForeachStatementContext) AllOpenRoundBracket() []antlr.TerminalNode {
	return s.GetTokens(PHPParserOpenRoundBracket)
}

func (s *ForeachStatementContext) OpenRoundBracket(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, i)
}

func (s *ForeachStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForeachStatementContext) As() antlr.TerminalNode {
	return s.GetToken(PHPParserAs, 0)
}

func (s *ForeachStatementContext) ArrayDestructuring() IArrayDestructuringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayDestructuringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayDestructuringContext)
}

func (s *ForeachStatementContext) AllCloseRoundBracket() []antlr.TerminalNode {
	return s.GetTokens(PHPParserCloseRoundBracket)
}

func (s *ForeachStatementContext) CloseRoundBracket(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, i)
}

func (s *ForeachStatementContext) AllChain() []IChainContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IChainContext); ok {
			len++
		}
	}

	tst := make([]IChainContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IChainContext); ok {
			tst[i] = t.(IChainContext)
			i++
		}
	}

	return tst
}

func (s *ForeachStatementContext) Chain(i int) IChainContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *ForeachStatementContext) Assignable() IAssignableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignableContext)
}

func (s *ForeachStatementContext) List() antlr.TerminalNode {
	return s.GetToken(PHPParserList, 0)
}

func (s *ForeachStatementContext) AssignmentList() IAssignmentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentListContext)
}

func (s *ForeachStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForeachStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *ForeachStatementContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *ForeachStatementContext) EndForeach() antlr.TerminalNode {
	return s.GetToken(PHPParserEndForeach, 0)
}

func (s *ForeachStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *ForeachStatementContext) AllAmpersand() []antlr.TerminalNode {
	return s.GetTokens(PHPParserAmpersand)
}

func (s *ForeachStatementContext) Ampersand(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, i)
}

func (s *ForeachStatementContext) DoubleArrow() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleArrow, 0)
}

func (s *ForeachStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForeachStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForeachStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitForeachStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ForeachStatement() (localctx IForeachStatementContext) {
	this := p
	_ = this

	localctx = NewForeachStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, PHPParserRULE_foreachStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(795)
		p.Match(PHPParserForeach)
	}
	p.SetState(840)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(796)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(797)
			p.expression(0)
		}
		{
			p.SetState(798)
			p.Match(PHPParserAs)
		}
		{
			p.SetState(799)
			p.ArrayDestructuring()
		}
		{
			p.SetState(800)
			p.Match(PHPParserCloseRoundBracket)
		}

	case 2:
		{
			p.SetState(802)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(803)
			p.Chain()
		}
		{
			p.SetState(804)
			p.Match(PHPParserAs)
		}
		p.SetState(806)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAmpersand {
			{
				p.SetState(805)
				p.Match(PHPParserAmpersand)
			}

		}
		{
			p.SetState(808)
			p.Assignable()
		}
		p.SetState(814)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserDoubleArrow {
			{
				p.SetState(809)
				p.Match(PHPParserDoubleArrow)
			}
			p.SetState(811)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PHPParserAmpersand {
				{
					p.SetState(810)
					p.Match(PHPParserAmpersand)
				}

			}
			{
				p.SetState(813)
				p.Chain()
			}

		}
		{
			p.SetState(816)
			p.Match(PHPParserCloseRoundBracket)
		}

	case 3:
		{
			p.SetState(818)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(819)
			p.expression(0)
		}
		{
			p.SetState(820)
			p.Match(PHPParserAs)
		}
		{
			p.SetState(821)
			p.Assignable()
		}
		p.SetState(827)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserDoubleArrow {
			{
				p.SetState(822)
				p.Match(PHPParserDoubleArrow)
			}
			p.SetState(824)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PHPParserAmpersand {
				{
					p.SetState(823)
					p.Match(PHPParserAmpersand)
				}

			}
			{
				p.SetState(826)
				p.Chain()
			}

		}
		{
			p.SetState(829)
			p.Match(PHPParserCloseRoundBracket)
		}

	case 4:
		{
			p.SetState(831)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(832)
			p.Chain()
		}
		{
			p.SetState(833)
			p.Match(PHPParserAs)
		}
		{
			p.SetState(834)
			p.Match(PHPParserList)
		}
		{
			p.SetState(835)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(836)
			p.AssignmentList()
		}
		{
			p.SetState(837)
			p.Match(PHPParserCloseRoundBracket)
		}
		{
			p.SetState(838)
			p.Match(PHPParserCloseRoundBracket)
		}

	}
	p.SetState(848)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserHtmlText, PHPParserXmlStart, PHPParserHtmlScriptOpen, PHPParserHtmlStyleOpen, PHPParserHtmlDtd, PHPParserHtmlOpen, PHPParserHtmlClose, PHPParserHtmlSlashClose, PHPParserHtmlSlash, PHPParserHtmlEquals, PHPParserHtmlStartQuoteString, PHPParserHtmlStartDoubleQuoteString, PHPParserHtmlHex, PHPParserHtmlDecimal, PHPParserHtmlName, PHPParserHtmlEndQuoteString, PHPParserHtmlQuoteString, PHPParserHtmlEndDoubleQuoteString, PHPParserHtmlDoubleQuoteString, PHPParserScriptText, PHPParserHtmlScriptClose, PHPParserStyleBody, PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDefine, PHPParserDefined, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserEval, PHPParserAssert, PHPParserDie, PHPParserExit, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInclude, PHPParserIncludeOnce, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserIsSet, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserRequire, PHPParserRequireOnce, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserThrow, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUnset, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserInc, PHPParserDec, PHPParserStartNowDoc, PHPParserNamespaceSeparator, PHPParserAmpersand, PHPParserBang, PHPParserPlus, PHPParserMinus, PHPParserTilde, PHPParserSuppressWarnings, PHPParserDollar, PHPParserOpenRoundBracket, PHPParserOpenSquareBracket, PHPParserOpenCurlyBracket, PHPParserSemiColon, PHPParserSet_Include_Path, PHPParserVarName, PHPParserLabel, PHPParserOctal, PHPParserDecimal, PHPParserReal, PHPParserHex, PHPParserBinary, PHPParserBackQuoteString, PHPParserSingleQuoteString, PHPParserDoubleQuote:
		{
			p.SetState(842)
			p.Statement()
		}

	case PHPParserColon:
		{
			p.SetState(843)
			p.Match(PHPParserColon)
		}
		{
			p.SetState(844)
			p.InnerStatementList()
		}
		{
			p.SetState(845)
			p.Match(PHPParserEndForeach)
		}
		{
			p.SetState(846)
			p.Match(PHPParserSemiColon)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITryCatchFinallyContext is an interface to support dynamic dispatch.
type ITryCatchFinallyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryCatchFinallyContext differentiates from other interfaces.
	IsTryCatchFinallyContext()
}

type TryCatchFinallyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryCatchFinallyContext() *TryCatchFinallyContext {
	var p = new(TryCatchFinallyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_tryCatchFinally
	return p
}

func (*TryCatchFinallyContext) IsTryCatchFinallyContext() {}

func NewTryCatchFinallyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryCatchFinallyContext {
	var p = new(TryCatchFinallyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_tryCatchFinally

	return p
}

func (s *TryCatchFinallyContext) GetParser() antlr.Parser { return s.parser }

func (s *TryCatchFinallyContext) Try() antlr.TerminalNode {
	return s.GetToken(PHPParserTry, 0)
}

func (s *TryCatchFinallyContext) BlockStatement() IBlockStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *TryCatchFinallyContext) FinallyStatement() IFinallyStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFinallyStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFinallyStatementContext)
}

func (s *TryCatchFinallyContext) AllCatchClause() []ICatchClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICatchClauseContext); ok {
			len++
		}
	}

	tst := make([]ICatchClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICatchClauseContext); ok {
			tst[i] = t.(ICatchClauseContext)
			i++
		}
	}

	return tst
}

func (s *TryCatchFinallyContext) CatchClause(i int) ICatchClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICatchClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICatchClauseContext)
}

func (s *TryCatchFinallyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryCatchFinallyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryCatchFinallyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTryCatchFinally(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TryCatchFinally() (localctx ITryCatchFinallyContext) {
	this := p
	_ = this

	localctx = NewTryCatchFinallyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, PHPParserRULE_tryCatchFinally)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(850)
		p.Match(PHPParserTry)
	}
	{
		p.SetState(851)
		p.BlockStatement()
	}
	p.SetState(867)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) {
	case 1:
		p.SetState(853)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(852)
					p.CatchClause()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(855)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())
		}
		p.SetState(858)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(857)
				p.FinallyStatement()
			}

		}

	case 2:
		p.SetState(863)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserCatch {
			{
				p.SetState(860)
				p.CatchClause()
			}

			p.SetState(865)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(866)
			p.FinallyStatement()
		}

	}

	return localctx
}

// ICatchClauseContext is an interface to support dynamic dispatch.
type ICatchClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatchClauseContext differentiates from other interfaces.
	IsCatchClauseContext()
}

type CatchClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchClauseContext() *CatchClauseContext {
	var p = new(CatchClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_catchClause
	return p
}

func (*CatchClauseContext) IsCatchClauseContext() {}

func NewCatchClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchClauseContext {
	var p = new(CatchClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_catchClause

	return p
}

func (s *CatchClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchClauseContext) Catch() antlr.TerminalNode {
	return s.GetToken(PHPParserCatch, 0)
}

func (s *CatchClauseContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *CatchClauseContext) AllQualifiedStaticTypeRef() []IQualifiedStaticTypeRefContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			len++
		}
	}

	tst := make([]IQualifiedStaticTypeRefContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			tst[i] = t.(IQualifiedStaticTypeRefContext)
			i++
		}
	}

	return tst
}

func (s *CatchClauseContext) QualifiedStaticTypeRef(i int) IQualifiedStaticTypeRefContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedStaticTypeRefContext)
}

func (s *CatchClauseContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *CatchClauseContext) BlockStatement() IBlockStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *CatchClauseContext) AllPipe() []antlr.TerminalNode {
	return s.GetTokens(PHPParserPipe)
}

func (s *CatchClauseContext) Pipe(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserPipe, i)
}

func (s *CatchClauseContext) VarName() antlr.TerminalNode {
	return s.GetToken(PHPParserVarName, 0)
}

func (s *CatchClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitCatchClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) CatchClause() (localctx ICatchClauseContext) {
	this := p
	_ = this

	localctx = NewCatchClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, PHPParserRULE_catchClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(869)
		p.Match(PHPParserCatch)
	}
	{
		p.SetState(870)
		p.Match(PHPParserOpenRoundBracket)
	}
	{
		p.SetState(871)
		p.QualifiedStaticTypeRef()
	}
	p.SetState(876)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserPipe {
		{
			p.SetState(872)
			p.Match(PHPParserPipe)
		}
		{
			p.SetState(873)
			p.QualifiedStaticTypeRef()
		}

		p.SetState(878)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(880)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserVarName {
		{
			p.SetState(879)
			p.Match(PHPParserVarName)
		}

	}
	{
		p.SetState(882)
		p.Match(PHPParserCloseRoundBracket)
	}
	{
		p.SetState(883)
		p.BlockStatement()
	}

	return localctx
}

// IFinallyStatementContext is an interface to support dynamic dispatch.
type IFinallyStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinallyStatementContext differentiates from other interfaces.
	IsFinallyStatementContext()
}

type FinallyStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinallyStatementContext() *FinallyStatementContext {
	var p = new(FinallyStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_finallyStatement
	return p
}

func (*FinallyStatementContext) IsFinallyStatementContext() {}

func NewFinallyStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FinallyStatementContext {
	var p = new(FinallyStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_finallyStatement

	return p
}

func (s *FinallyStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FinallyStatementContext) Finally() antlr.TerminalNode {
	return s.GetToken(PHPParserFinally, 0)
}

func (s *FinallyStatementContext) BlockStatement() IBlockStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *FinallyStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FinallyStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FinallyStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFinallyStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) FinallyStatement() (localctx IFinallyStatementContext) {
	this := p
	_ = this

	localctx = NewFinallyStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, PHPParserRULE_finallyStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(885)
		p.Match(PHPParserFinally)
	}
	{
		p.SetState(886)
		p.BlockStatement()
	}

	return localctx
}

// IThrowStatementContext is an interface to support dynamic dispatch.
type IThrowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowStatementContext differentiates from other interfaces.
	IsThrowStatementContext()
}

type ThrowStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatementContext() *ThrowStatementContext {
	var p = new(ThrowStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_throwStatement
	return p
}

func (*ThrowStatementContext) IsThrowStatementContext() {}

func NewThrowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatementContext {
	var p = new(ThrowStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_throwStatement

	return p
}

func (s *ThrowStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowStatementContext) Throw() antlr.TerminalNode {
	return s.GetToken(PHPParserThrow, 0)
}

func (s *ThrowStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ThrowStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *ThrowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitThrowStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ThrowStatement() (localctx IThrowStatementContext) {
	this := p
	_ = this

	localctx = NewThrowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, PHPParserRULE_throwStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(888)
		p.Match(PHPParserThrow)
	}
	{
		p.SetState(889)
		p.expression(0)
	}
	{
		p.SetState(890)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IGotoStatementContext is an interface to support dynamic dispatch.
type IGotoStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGotoStatementContext differentiates from other interfaces.
	IsGotoStatementContext()
}

type GotoStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGotoStatementContext() *GotoStatementContext {
	var p = new(GotoStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_gotoStatement
	return p
}

func (*GotoStatementContext) IsGotoStatementContext() {}

func NewGotoStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GotoStatementContext {
	var p = new(GotoStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_gotoStatement

	return p
}

func (s *GotoStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GotoStatementContext) Goto() antlr.TerminalNode {
	return s.GetToken(PHPParserGoto, 0)
}

func (s *GotoStatementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *GotoStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *GotoStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GotoStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GotoStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitGotoStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) GotoStatement() (localctx IGotoStatementContext) {
	this := p
	_ = this

	localctx = NewGotoStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, PHPParserRULE_gotoStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(892)
		p.Match(PHPParserGoto)
	}
	{
		p.SetState(893)
		p.Identifier()
	}
	{
		p.SetState(894)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IDeclareStatementContext is an interface to support dynamic dispatch.
type IDeclareStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareStatementContext differentiates from other interfaces.
	IsDeclareStatementContext()
}

type DeclareStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareStatementContext() *DeclareStatementContext {
	var p = new(DeclareStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_declareStatement
	return p
}

func (*DeclareStatementContext) IsDeclareStatementContext() {}

func NewDeclareStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareStatementContext {
	var p = new(DeclareStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_declareStatement

	return p
}

func (s *DeclareStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareStatementContext) Declare() antlr.TerminalNode {
	return s.GetToken(PHPParserDeclare, 0)
}

func (s *DeclareStatementContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *DeclareStatementContext) DeclareList() IDeclareListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareListContext)
}

func (s *DeclareStatementContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *DeclareStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *DeclareStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *DeclareStatementContext) InnerStatementList() IInnerStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInnerStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInnerStatementListContext)
}

func (s *DeclareStatementContext) EndDeclare() antlr.TerminalNode {
	return s.GetToken(PHPParserEndDeclare, 0)
}

func (s *DeclareStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *DeclareStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitDeclareStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) DeclareStatement() (localctx IDeclareStatementContext) {
	this := p
	_ = this

	localctx = NewDeclareStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, PHPParserRULE_declareStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(896)
		p.Match(PHPParserDeclare)
	}
	{
		p.SetState(897)
		p.Match(PHPParserOpenRoundBracket)
	}
	{
		p.SetState(898)
		p.DeclareList()
	}
	{
		p.SetState(899)
		p.Match(PHPParserCloseRoundBracket)
	}
	p.SetState(906)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserHtmlText, PHPParserXmlStart, PHPParserHtmlScriptOpen, PHPParserHtmlStyleOpen, PHPParserHtmlDtd, PHPParserHtmlOpen, PHPParserHtmlClose, PHPParserHtmlSlashClose, PHPParserHtmlSlash, PHPParserHtmlEquals, PHPParserHtmlStartQuoteString, PHPParserHtmlStartDoubleQuoteString, PHPParserHtmlHex, PHPParserHtmlDecimal, PHPParserHtmlName, PHPParserHtmlEndQuoteString, PHPParserHtmlQuoteString, PHPParserHtmlEndDoubleQuoteString, PHPParserHtmlDoubleQuoteString, PHPParserScriptText, PHPParserHtmlScriptClose, PHPParserStyleBody, PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDefine, PHPParserDefined, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserEval, PHPParserAssert, PHPParserDie, PHPParserExit, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInclude, PHPParserIncludeOnce, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserIsSet, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserRequire, PHPParserRequireOnce, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserThrow, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUnset, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserInc, PHPParserDec, PHPParserStartNowDoc, PHPParserNamespaceSeparator, PHPParserAmpersand, PHPParserBang, PHPParserPlus, PHPParserMinus, PHPParserTilde, PHPParserSuppressWarnings, PHPParserDollar, PHPParserOpenRoundBracket, PHPParserOpenSquareBracket, PHPParserOpenCurlyBracket, PHPParserSemiColon, PHPParserSet_Include_Path, PHPParserVarName, PHPParserLabel, PHPParserOctal, PHPParserDecimal, PHPParserReal, PHPParserHex, PHPParserBinary, PHPParserBackQuoteString, PHPParserSingleQuoteString, PHPParserDoubleQuote:
		{
			p.SetState(900)
			p.Statement()
		}

	case PHPParserColon:
		{
			p.SetState(901)
			p.Match(PHPParserColon)
		}
		{
			p.SetState(902)
			p.InnerStatementList()
		}
		{
			p.SetState(903)
			p.Match(PHPParserEndDeclare)
		}
		{
			p.SetState(904)
			p.Match(PHPParserSemiColon)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInlineHtmlStatementContext is an interface to support dynamic dispatch.
type IInlineHtmlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInlineHtmlStatementContext differentiates from other interfaces.
	IsInlineHtmlStatementContext()
}

type InlineHtmlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInlineHtmlStatementContext() *InlineHtmlStatementContext {
	var p = new(InlineHtmlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_inlineHtmlStatement
	return p
}

func (*InlineHtmlStatementContext) IsInlineHtmlStatementContext() {}

func NewInlineHtmlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InlineHtmlStatementContext {
	var p = new(InlineHtmlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_inlineHtmlStatement

	return p
}

func (s *InlineHtmlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InlineHtmlStatementContext) AllInlineHtml() []IInlineHtmlContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInlineHtmlContext); ok {
			len++
		}
	}

	tst := make([]IInlineHtmlContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInlineHtmlContext); ok {
			tst[i] = t.(IInlineHtmlContext)
			i++
		}
	}

	return tst
}

func (s *InlineHtmlStatementContext) InlineHtml(i int) IInlineHtmlContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInlineHtmlContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInlineHtmlContext)
}

func (s *InlineHtmlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineHtmlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InlineHtmlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitInlineHtmlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) InlineHtmlStatement() (localctx IInlineHtmlStatementContext) {
	this := p
	_ = this

	localctx = NewInlineHtmlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, PHPParserRULE_inlineHtmlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(909)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(908)
				p.InlineHtml()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(911)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())
	}

	return localctx
}

// IDeclareListContext is an interface to support dynamic dispatch.
type IDeclareListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareListContext differentiates from other interfaces.
	IsDeclareListContext()
}

type DeclareListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareListContext() *DeclareListContext {
	var p = new(DeclareListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_declareList
	return p
}

func (*DeclareListContext) IsDeclareListContext() {}

func NewDeclareListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareListContext {
	var p = new(DeclareListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_declareList

	return p
}

func (s *DeclareListContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareListContext) AllDirective() []IDirectiveContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDirectiveContext); ok {
			len++
		}
	}

	tst := make([]IDirectiveContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDirectiveContext); ok {
			tst[i] = t.(IDirectiveContext)
			i++
		}
	}

	return tst
}

func (s *DeclareListContext) Directive(i int) IDirectiveContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDirectiveContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDirectiveContext)
}

func (s *DeclareListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *DeclareListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *DeclareListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitDeclareList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) DeclareList() (localctx IDeclareListContext) {
	this := p
	_ = this

	localctx = NewDeclareListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, PHPParserRULE_declareList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(913)
		p.Directive()
	}
	p.SetState(918)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(914)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(915)
			p.Directive()
		}

		p.SetState(920)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDirectiveContext is an interface to support dynamic dispatch.
type IDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectiveContext differentiates from other interfaces.
	IsDirectiveContext()
}

type DirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectiveContext() *DirectiveContext {
	var p = new(DirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_directive
	return p
}

func (*DirectiveContext) IsDirectiveContext() {}

func NewDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectiveContext {
	var p = new(DirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_directive

	return p
}

func (s *DirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectiveContext) Ticks() antlr.TerminalNode {
	return s.GetToken(PHPParserTicks, 0)
}

func (s *DirectiveContext) Eq() antlr.TerminalNode {
	return s.GetToken(PHPParserEq, 0)
}

func (s *DirectiveContext) NumericConstant() INumericConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericConstantContext)
}

func (s *DirectiveContext) Real() antlr.TerminalNode {
	return s.GetToken(PHPParserReal, 0)
}

func (s *DirectiveContext) Encoding() antlr.TerminalNode {
	return s.GetToken(PHPParserEncoding, 0)
}

func (s *DirectiveContext) SingleQuoteString() antlr.TerminalNode {
	return s.GetToken(PHPParserSingleQuoteString, 0)
}

func (s *DirectiveContext) StrictTypes() antlr.TerminalNode {
	return s.GetToken(PHPParserStrictTypes, 0)
}

func (s *DirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectiveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitDirective(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Directive() (localctx IDirectiveContext) {
	this := p
	_ = this

	localctx = NewDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, PHPParserRULE_directive)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(933)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserTicks:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(921)
			p.Match(PHPParserTicks)
		}
		{
			p.SetState(922)
			p.Match(PHPParserEq)
		}
		p.SetState(925)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PHPParserOctal, PHPParserDecimal, PHPParserHex, PHPParserBinary:
			{
				p.SetState(923)
				p.NumericConstant()
			}

		case PHPParserReal:
			{
				p.SetState(924)
				p.Match(PHPParserReal)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case PHPParserEncoding:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(927)
			p.Match(PHPParserEncoding)
		}
		{
			p.SetState(928)
			p.Match(PHPParserEq)
		}
		{
			p.SetState(929)
			p.Match(PHPParserSingleQuoteString)
		}

	case PHPParserStrictTypes:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(930)
			p.Match(PHPParserStrictTypes)
		}
		{
			p.SetState(931)
			p.Match(PHPParserEq)
		}
		{
			p.SetState(932)
			p.NumericConstant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFormalParameterListContext is an interface to support dynamic dispatch.
type IFormalParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameterListContext differentiates from other interfaces.
	IsFormalParameterListContext()
}

type FormalParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterListContext() *FormalParameterListContext {
	var p = new(FormalParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_formalParameterList
	return p
}

func (*FormalParameterListContext) IsFormalParameterListContext() {}

func NewFormalParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterListContext {
	var p = new(FormalParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_formalParameterList

	return p
}

func (s *FormalParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterListContext) AllFormalParameter() []IFormalParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormalParameterContext); ok {
			len++
		}
	}

	tst := make([]IFormalParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormalParameterContext); ok {
			tst[i] = t.(IFormalParameterContext)
			i++
		}
	}

	return tst
}

func (s *FormalParameterListContext) FormalParameter(i int) IFormalParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParameterContext)
}

func (s *FormalParameterListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *FormalParameterListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *FormalParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFormalParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) FormalParameterList() (localctx IFormalParameterListContext) {
	this := p
	_ = this

	localctx = NewFormalParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, PHPParserRULE_formalParameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(936)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-43)) & ^0x3f) == 0 && ((int64(1)<<(_la-43))&-289919354861092865) != 0 || (int64((_la-107)) & ^0x3f) == 0 && ((int64(1)<<(_la-107))&288230376134666239) != 0 || (int64((_la-197)) & ^0x3f) == 0 && ((int64(1)<<(_la-197))&6442582035) != 0 {
		{
			p.SetState(935)
			p.FormalParameter()
		}

	}
	p.SetState(942)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(938)
				p.Match(PHPParserComma)
			}
			{
				p.SetState(939)
				p.FormalParameter()
			}

		}
		p.SetState(944)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())
	}
	p.SetState(946)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserComma {
		{
			p.SetState(945)
			p.Match(PHPParserComma)
		}

	}

	return localctx
}

// IFormalParameterContext is an interface to support dynamic dispatch.
type IFormalParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameterContext differentiates from other interfaces.
	IsFormalParameterContext()
}

type FormalParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterContext() *FormalParameterContext {
	var p = new(FormalParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_formalParameter
	return p
}

func (*FormalParameterContext) IsFormalParameterContext() {}

func NewFormalParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterContext {
	var p = new(FormalParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_formalParameter

	return p
}

func (s *FormalParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterContext) VariableInitializer() IVariableInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableInitializerContext)
}

func (s *FormalParameterContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FormalParameterContext) AllMemberModifier() []IMemberModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemberModifierContext); ok {
			len++
		}
	}

	tst := make([]IMemberModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemberModifierContext); ok {
			tst[i] = t.(IMemberModifierContext)
			i++
		}
	}

	return tst
}

func (s *FormalParameterContext) MemberModifier(i int) IMemberModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberModifierContext)
}

func (s *FormalParameterContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(PHPParserQuestionMark, 0)
}

func (s *FormalParameterContext) TypeHint() ITypeHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeHintContext)
}

func (s *FormalParameterContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *FormalParameterContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(PHPParserEllipsis, 0)
}

func (s *FormalParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFormalParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) FormalParameter() (localctx IFormalParameterContext) {
	this := p
	_ = this

	localctx = NewFormalParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, PHPParserRULE_formalParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(949)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAttributeStart {
		{
			p.SetState(948)
			p.Attributes()
		}

	}
	p.SetState(954)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(951)
				p.MemberModifier()
			}

		}
		p.SetState(956)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())
	}
	p.SetState(958)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserQuestionMark {
		{
			p.SetState(957)
			p.Match(PHPParserQuestionMark)
		}

	}
	p.SetState(961)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-144959677430546433) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&144115188067333119) != 0 || _la == PHPParserNamespaceSeparator || _la == PHPParserLabel {
		{
			p.SetState(960)
			p.typeHint(0)
		}

	}
	p.SetState(964)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAmpersand {
		{
			p.SetState(963)
			p.Match(PHPParserAmpersand)
		}

	}
	p.SetState(967)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserEllipsis {
		{
			p.SetState(966)
			p.Match(PHPParserEllipsis)
		}

	}
	{
		p.SetState(969)
		p.VariableInitializer()
	}

	return localctx
}

// ITypeHintContext is an interface to support dynamic dispatch.
type ITypeHintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeHintContext differentiates from other interfaces.
	IsTypeHintContext()
}

type TypeHintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeHintContext() *TypeHintContext {
	var p = new(TypeHintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_typeHint
	return p
}

func (*TypeHintContext) IsTypeHintContext() {}

func NewTypeHintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeHintContext {
	var p = new(TypeHintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_typeHint

	return p
}

func (s *TypeHintContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeHintContext) Callable() antlr.TerminalNode {
	return s.GetToken(PHPParserCallable, 0)
}

func (s *TypeHintContext) PrimitiveType() IPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *TypeHintContext) QualifiedStaticTypeRef() IQualifiedStaticTypeRefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedStaticTypeRefContext)
}

func (s *TypeHintContext) AllTypeHint() []ITypeHintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeHintContext); ok {
			len++
		}
	}

	tst := make([]ITypeHintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeHintContext); ok {
			tst[i] = t.(ITypeHintContext)
			i++
		}
	}

	return tst
}

func (s *TypeHintContext) TypeHint(i int) ITypeHintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeHintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeHintContext)
}

func (s *TypeHintContext) Pipe() antlr.TerminalNode {
	return s.GetToken(PHPParserPipe, 0)
}

func (s *TypeHintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeHintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeHintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTypeHint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TypeHint() (localctx ITypeHintContext) {
	return p.typeHint(0)
}

func (p *PHPParser) typeHint(_p int) (localctx ITypeHintContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTypeHintContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITypeHintContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 122
	p.EnterRecursionRule(localctx, 122, PHPParserRULE_typeHint, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(975)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(972)
			p.Match(PHPParserCallable)
		}

	case 2:
		{
			p.SetState(973)
			p.PrimitiveType()
		}

	case 3:
		{
			p.SetState(974)
			p.QualifiedStaticTypeRef()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(982)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTypeHintContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_typeHint)
			p.SetState(977)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(978)
				p.Match(PHPParserPipe)
			}
			{
				p.SetState(979)
				p.typeHint(2)
			}

		}
		p.SetState(984)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext())
	}

	return localctx
}

// IGlobalStatementContext is an interface to support dynamic dispatch.
type IGlobalStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGlobalStatementContext differentiates from other interfaces.
	IsGlobalStatementContext()
}

type GlobalStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGlobalStatementContext() *GlobalStatementContext {
	var p = new(GlobalStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_globalStatement
	return p
}

func (*GlobalStatementContext) IsGlobalStatementContext() {}

func NewGlobalStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GlobalStatementContext {
	var p = new(GlobalStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_globalStatement

	return p
}

func (s *GlobalStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GlobalStatementContext) Global() antlr.TerminalNode {
	return s.GetToken(PHPParserGlobal, 0)
}

func (s *GlobalStatementContext) AllGlobalVar() []IGlobalVarContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGlobalVarContext); ok {
			len++
		}
	}

	tst := make([]IGlobalVarContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGlobalVarContext); ok {
			tst[i] = t.(IGlobalVarContext)
			i++
		}
	}

	return tst
}

func (s *GlobalStatementContext) GlobalVar(i int) IGlobalVarContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGlobalVarContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGlobalVarContext)
}

func (s *GlobalStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *GlobalStatementContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *GlobalStatementContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *GlobalStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GlobalStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GlobalStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitGlobalStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) GlobalStatement() (localctx IGlobalStatementContext) {
	this := p
	_ = this

	localctx = NewGlobalStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, PHPParserRULE_globalStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(985)
		p.Match(PHPParserGlobal)
	}
	{
		p.SetState(986)
		p.GlobalVar()
	}
	p.SetState(991)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(987)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(988)
			p.GlobalVar()
		}

		p.SetState(993)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(994)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IGlobalVarContext is an interface to support dynamic dispatch.
type IGlobalVarContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGlobalVarContext differentiates from other interfaces.
	IsGlobalVarContext()
}

type GlobalVarContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGlobalVarContext() *GlobalVarContext {
	var p = new(GlobalVarContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_globalVar
	return p
}

func (*GlobalVarContext) IsGlobalVarContext() {}

func NewGlobalVarContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GlobalVarContext {
	var p = new(GlobalVarContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_globalVar

	return p
}

func (s *GlobalVarContext) GetParser() antlr.Parser { return s.parser }

func (s *GlobalVarContext) VarName() antlr.TerminalNode {
	return s.GetToken(PHPParserVarName, 0)
}

func (s *GlobalVarContext) Dollar() antlr.TerminalNode {
	return s.GetToken(PHPParserDollar, 0)
}

func (s *GlobalVarContext) Chain() IChainContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *GlobalVarContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *GlobalVarContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GlobalVarContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *GlobalVarContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GlobalVarContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GlobalVarContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitGlobalVar(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) GlobalVar() (localctx IGlobalVarContext) {
	this := p
	_ = this

	localctx = NewGlobalVarContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, PHPParserRULE_globalVar)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1004)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(996)
			p.Match(PHPParserVarName)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(997)
			p.Match(PHPParserDollar)
		}
		{
			p.SetState(998)
			p.Chain()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(999)
			p.Match(PHPParserDollar)
		}
		{
			p.SetState(1000)
			p.Match(PHPParserOpenCurlyBracket)
		}
		{
			p.SetState(1001)
			p.expression(0)
		}
		{
			p.SetState(1002)
			p.Match(PHPParserCloseCurlyBracket)
		}

	}

	return localctx
}

// IEchoStatementContext is an interface to support dynamic dispatch.
type IEchoStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEchoStatementContext differentiates from other interfaces.
	IsEchoStatementContext()
}

type EchoStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEchoStatementContext() *EchoStatementContext {
	var p = new(EchoStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_echoStatement
	return p
}

func (*EchoStatementContext) IsEchoStatementContext() {}

func NewEchoStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EchoStatementContext {
	var p = new(EchoStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_echoStatement

	return p
}

func (s *EchoStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EchoStatementContext) Echo() antlr.TerminalNode {
	return s.GetToken(PHPParserEcho, 0)
}

func (s *EchoStatementContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *EchoStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *EchoStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EchoStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EchoStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitEchoStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) EchoStatement() (localctx IEchoStatementContext) {
	this := p
	_ = this

	localctx = NewEchoStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, PHPParserRULE_echoStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1006)
		p.Match(PHPParserEcho)
	}
	{
		p.SetState(1007)
		p.ExpressionList()
	}
	{
		p.SetState(1008)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IStaticVariableStatementContext is an interface to support dynamic dispatch.
type IStaticVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStaticVariableStatementContext differentiates from other interfaces.
	IsStaticVariableStatementContext()
}

type StaticVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticVariableStatementContext() *StaticVariableStatementContext {
	var p = new(StaticVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_staticVariableStatement
	return p
}

func (*StaticVariableStatementContext) IsStaticVariableStatementContext() {}

func NewStaticVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticVariableStatementContext {
	var p = new(StaticVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_staticVariableStatement

	return p
}

func (s *StaticVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StaticVariableStatementContext) Static() antlr.TerminalNode {
	return s.GetToken(PHPParserStatic, 0)
}

func (s *StaticVariableStatementContext) AllVariableInitializer() []IVariableInitializerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableInitializerContext); ok {
			len++
		}
	}

	tst := make([]IVariableInitializerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableInitializerContext); ok {
			tst[i] = t.(IVariableInitializerContext)
			i++
		}
	}

	return tst
}

func (s *StaticVariableStatementContext) VariableInitializer(i int) IVariableInitializerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableInitializerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableInitializerContext)
}

func (s *StaticVariableStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *StaticVariableStatementContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *StaticVariableStatementContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *StaticVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StaticVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitStaticVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) StaticVariableStatement() (localctx IStaticVariableStatementContext) {
	this := p
	_ = this

	localctx = NewStaticVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, PHPParserRULE_staticVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1010)
		p.Match(PHPParserStatic)
	}
	{
		p.SetState(1011)
		p.VariableInitializer()
	}
	p.SetState(1016)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(1012)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(1013)
			p.VariableInitializer()
		}

		p.SetState(1018)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1019)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IClassStatementContext is an interface to support dynamic dispatch.
type IClassStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassStatementContext differentiates from other interfaces.
	IsClassStatementContext()
}

type ClassStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassStatementContext() *ClassStatementContext {
	var p = new(ClassStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_classStatement
	return p
}

func (*ClassStatementContext) IsClassStatementContext() {}

func NewClassStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassStatementContext {
	var p = new(ClassStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_classStatement

	return p
}

func (s *ClassStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassStatementContext) CopyFrom(ctx *ClassStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ClassStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FunctionContext struct {
	*ClassStatementContext
}

func NewFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionContext {
	var p = new(FunctionContext)

	p.ClassStatementContext = NewEmptyClassStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ClassStatementContext))

	return p
}

func (s *FunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionContext) Function_() antlr.TerminalNode {
	return s.GetToken(PHPParserFunction_, 0)
}

func (s *FunctionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *FunctionContext) FormalParameterList() IFormalParameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *FunctionContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *FunctionContext) MethodBody() IMethodBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodBodyContext)
}

func (s *FunctionContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionContext) MemberModifiers() IMemberModifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberModifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberModifiersContext)
}

func (s *FunctionContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *FunctionContext) BaseCtorCall() IBaseCtorCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBaseCtorCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBaseCtorCallContext)
}

func (s *FunctionContext) ReturnTypeDecl() IReturnTypeDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnTypeDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnTypeDeclContext)
}

func (s *FunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

type TraitUseContext struct {
	*ClassStatementContext
}

func NewTraitUseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TraitUseContext {
	var p = new(TraitUseContext)

	p.ClassStatementContext = NewEmptyClassStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ClassStatementContext))

	return p
}

func (s *TraitUseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TraitUseContext) Use() antlr.TerminalNode {
	return s.GetToken(PHPParserUse, 0)
}

func (s *TraitUseContext) QualifiedNamespaceNameList() IQualifiedNamespaceNameListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameListContext)
}

func (s *TraitUseContext) TraitAdaptations() ITraitAdaptationsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITraitAdaptationsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITraitAdaptationsContext)
}

func (s *TraitUseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTraitUse(s)

	default:
		return t.VisitChildren(s)
	}
}

type ConstContext struct {
	*ClassStatementContext
}

func NewConstContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstContext {
	var p = new(ConstContext)

	p.ClassStatementContext = NewEmptyClassStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ClassStatementContext))

	return p
}

func (s *ConstContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstContext) Const() antlr.TerminalNode {
	return s.GetToken(PHPParserConst, 0)
}

func (s *ConstContext) AllIdentifierInitializer() []IIdentifierInitializerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierInitializerContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierInitializerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierInitializerContext); ok {
			tst[i] = t.(IIdentifierInitializerContext)
			i++
		}
	}

	return tst
}

func (s *ConstContext) IdentifierInitializer(i int) IIdentifierInitializerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierInitializerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierInitializerContext)
}

func (s *ConstContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *ConstContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *ConstContext) MemberModifiers() IMemberModifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberModifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberModifiersContext)
}

func (s *ConstContext) TypeHint() ITypeHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeHintContext)
}

func (s *ConstContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *ConstContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *ConstContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitConst(s)

	default:
		return t.VisitChildren(s)
	}
}

type PropertyModifiersVariableContext struct {
	*ClassStatementContext
}

func NewPropertyModifiersVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PropertyModifiersVariableContext {
	var p = new(PropertyModifiersVariableContext)

	p.ClassStatementContext = NewEmptyClassStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ClassStatementContext))

	return p
}

func (s *PropertyModifiersVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyModifiersVariableContext) PropertyModifiers() IPropertyModifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPropertyModifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPropertyModifiersContext)
}

func (s *PropertyModifiersVariableContext) AllVariableInitializer() []IVariableInitializerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableInitializerContext); ok {
			len++
		}
	}

	tst := make([]IVariableInitializerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableInitializerContext); ok {
			tst[i] = t.(IVariableInitializerContext)
			i++
		}
	}

	return tst
}

func (s *PropertyModifiersVariableContext) VariableInitializer(i int) IVariableInitializerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableInitializerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableInitializerContext)
}

func (s *PropertyModifiersVariableContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *PropertyModifiersVariableContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *PropertyModifiersVariableContext) TypeHint() ITypeHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeHintContext)
}

func (s *PropertyModifiersVariableContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *PropertyModifiersVariableContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *PropertyModifiersVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitPropertyModifiersVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ClassStatement() (localctx IClassStatementContext) {
	this := p
	_ = this

	localctx = NewClassStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, PHPParserRULE_classStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1082)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTraitUseContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1021)
			p.Match(PHPParserUse)
		}
		{
			p.SetState(1022)
			p.QualifiedNamespaceNameList()
		}
		{
			p.SetState(1023)
			p.TraitAdaptations()
		}

	case 2:
		localctx = NewPropertyModifiersVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1026)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAttributeStart {
			{
				p.SetState(1025)
				p.Attributes()
			}

		}
		{
			p.SetState(1028)
			p.PropertyModifiers()
		}
		p.SetState(1030)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-144959677430546433) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&144115188067333119) != 0 || _la == PHPParserNamespaceSeparator || _la == PHPParserLabel {
			{
				p.SetState(1029)
				p.typeHint(0)
			}

		}
		{
			p.SetState(1032)
			p.VariableInitializer()
		}
		p.SetState(1037)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserComma {
			{
				p.SetState(1033)
				p.Match(PHPParserComma)
			}
			{
				p.SetState(1034)
				p.VariableInitializer()
			}

			p.SetState(1039)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1040)
			p.Match(PHPParserSemiColon)
		}

	case 3:
		localctx = NewConstContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1043)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAttributeStart {
			{
				p.SetState(1042)
				p.Attributes()
			}

		}
		p.SetState(1046)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAbstract || (int64((_la-81)) & ^0x3f) == 0 && ((int64(1)<<(_la-81))&2327872274433) != 0 {
			{
				p.SetState(1045)
				p.MemberModifiers()
			}

		}
		{
			p.SetState(1048)
			p.Match(PHPParserConst)
		}
		p.SetState(1050)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1049)
				p.typeHint(0)
			}

		}
		{
			p.SetState(1052)
			p.IdentifierInitializer()
		}
		p.SetState(1057)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserComma {
			{
				p.SetState(1053)
				p.Match(PHPParserComma)
			}
			{
				p.SetState(1054)
				p.IdentifierInitializer()
			}

			p.SetState(1059)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1060)
			p.Match(PHPParserSemiColon)
		}

	case 4:
		localctx = NewFunctionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1063)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAttributeStart {
			{
				p.SetState(1062)
				p.Attributes()
			}

		}
		p.SetState(1066)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAbstract || (int64((_la-81)) & ^0x3f) == 0 && ((int64(1)<<(_la-81))&2327872274433) != 0 {
			{
				p.SetState(1065)
				p.MemberModifiers()
			}

		}
		{
			p.SetState(1068)
			p.Match(PHPParserFunction_)
		}
		p.SetState(1070)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAmpersand {
			{
				p.SetState(1069)
				p.Match(PHPParserAmpersand)
			}

		}
		{
			p.SetState(1072)
			p.Identifier()
		}
		{
			p.SetState(1073)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1074)
			p.FormalParameterList()
		}
		{
			p.SetState(1075)
			p.Match(PHPParserCloseRoundBracket)
		}
		p.SetState(1078)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1076)
				p.BaseCtorCall()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1077)
				p.ReturnTypeDecl()
			}

		}
		{
			p.SetState(1080)
			p.MethodBody()
		}

	}

	return localctx
}

// ITraitAdaptationsContext is an interface to support dynamic dispatch.
type ITraitAdaptationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTraitAdaptationsContext differentiates from other interfaces.
	IsTraitAdaptationsContext()
}

type TraitAdaptationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTraitAdaptationsContext() *TraitAdaptationsContext {
	var p = new(TraitAdaptationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_traitAdaptations
	return p
}

func (*TraitAdaptationsContext) IsTraitAdaptationsContext() {}

func NewTraitAdaptationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TraitAdaptationsContext {
	var p = new(TraitAdaptationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_traitAdaptations

	return p
}

func (s *TraitAdaptationsContext) GetParser() antlr.Parser { return s.parser }

func (s *TraitAdaptationsContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *TraitAdaptationsContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *TraitAdaptationsContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *TraitAdaptationsContext) AllTraitAdaptationStatement() []ITraitAdaptationStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITraitAdaptationStatementContext); ok {
			len++
		}
	}

	tst := make([]ITraitAdaptationStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITraitAdaptationStatementContext); ok {
			tst[i] = t.(ITraitAdaptationStatementContext)
			i++
		}
	}

	return tst
}

func (s *TraitAdaptationsContext) TraitAdaptationStatement(i int) ITraitAdaptationStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITraitAdaptationStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITraitAdaptationStatementContext)
}

func (s *TraitAdaptationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TraitAdaptationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TraitAdaptationsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTraitAdaptations(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TraitAdaptations() (localctx ITraitAdaptationsContext) {
	this := p
	_ = this

	localctx = NewTraitAdaptationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, PHPParserRULE_traitAdaptations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1093)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserSemiColon:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1084)
			p.Match(PHPParserSemiColon)
		}

	case PHPParserOpenCurlyBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1085)
			p.Match(PHPParserOpenCurlyBracket)
		}
		p.SetState(1089)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-144959677430546433) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&144115188067333119) != 0 || _la == PHPParserNamespaceSeparator || _la == PHPParserLabel {
			{
				p.SetState(1086)
				p.TraitAdaptationStatement()
			}

			p.SetState(1091)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1092)
			p.Match(PHPParserCloseCurlyBracket)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITraitAdaptationStatementContext is an interface to support dynamic dispatch.
type ITraitAdaptationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTraitAdaptationStatementContext differentiates from other interfaces.
	IsTraitAdaptationStatementContext()
}

type TraitAdaptationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTraitAdaptationStatementContext() *TraitAdaptationStatementContext {
	var p = new(TraitAdaptationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_traitAdaptationStatement
	return p
}

func (*TraitAdaptationStatementContext) IsTraitAdaptationStatementContext() {}

func NewTraitAdaptationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TraitAdaptationStatementContext {
	var p = new(TraitAdaptationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_traitAdaptationStatement

	return p
}

func (s *TraitAdaptationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TraitAdaptationStatementContext) TraitPrecedence() ITraitPrecedenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITraitPrecedenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITraitPrecedenceContext)
}

func (s *TraitAdaptationStatementContext) TraitAlias() ITraitAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITraitAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITraitAliasContext)
}

func (s *TraitAdaptationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TraitAdaptationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TraitAdaptationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTraitAdaptationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TraitAdaptationStatement() (localctx ITraitAdaptationStatementContext) {
	this := p
	_ = this

	localctx = NewTraitAdaptationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, PHPParserRULE_traitAdaptationStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1097)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1095)
			p.TraitPrecedence()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1096)
			p.TraitAlias()
		}

	}

	return localctx
}

// ITraitPrecedenceContext is an interface to support dynamic dispatch.
type ITraitPrecedenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTraitPrecedenceContext differentiates from other interfaces.
	IsTraitPrecedenceContext()
}

type TraitPrecedenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTraitPrecedenceContext() *TraitPrecedenceContext {
	var p = new(TraitPrecedenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_traitPrecedence
	return p
}

func (*TraitPrecedenceContext) IsTraitPrecedenceContext() {}

func NewTraitPrecedenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TraitPrecedenceContext {
	var p = new(TraitPrecedenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_traitPrecedence

	return p
}

func (s *TraitPrecedenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TraitPrecedenceContext) QualifiedNamespaceName() IQualifiedNamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameContext)
}

func (s *TraitPrecedenceContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *TraitPrecedenceContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TraitPrecedenceContext) InsteadOf() antlr.TerminalNode {
	return s.GetToken(PHPParserInsteadOf, 0)
}

func (s *TraitPrecedenceContext) QualifiedNamespaceNameList() IQualifiedNamespaceNameListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameListContext)
}

func (s *TraitPrecedenceContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *TraitPrecedenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TraitPrecedenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TraitPrecedenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTraitPrecedence(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TraitPrecedence() (localctx ITraitPrecedenceContext) {
	this := p
	_ = this

	localctx = NewTraitPrecedenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, PHPParserRULE_traitPrecedence)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1099)
		p.QualifiedNamespaceName()
	}
	{
		p.SetState(1100)
		p.Match(PHPParserDoubleColon)
	}
	{
		p.SetState(1101)
		p.Identifier()
	}
	{
		p.SetState(1102)
		p.Match(PHPParserInsteadOf)
	}
	{
		p.SetState(1103)
		p.QualifiedNamespaceNameList()
	}
	{
		p.SetState(1104)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// ITraitAliasContext is an interface to support dynamic dispatch.
type ITraitAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTraitAliasContext differentiates from other interfaces.
	IsTraitAliasContext()
}

type TraitAliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTraitAliasContext() *TraitAliasContext {
	var p = new(TraitAliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_traitAlias
	return p
}

func (*TraitAliasContext) IsTraitAliasContext() {}

func NewTraitAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TraitAliasContext {
	var p = new(TraitAliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_traitAlias

	return p
}

func (s *TraitAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *TraitAliasContext) TraitMethodReference() ITraitMethodReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITraitMethodReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITraitMethodReferenceContext)
}

func (s *TraitAliasContext) As() antlr.TerminalNode {
	return s.GetToken(PHPParserAs, 0)
}

func (s *TraitAliasContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *TraitAliasContext) MemberModifier() IMemberModifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberModifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberModifierContext)
}

func (s *TraitAliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TraitAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TraitAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TraitAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTraitAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TraitAlias() (localctx ITraitAliasContext) {
	this := p
	_ = this

	localctx = NewTraitAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, PHPParserRULE_traitAlias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1106)
		p.TraitMethodReference()
	}
	{
		p.SetState(1107)
		p.Match(PHPParserAs)
	}
	p.SetState(1113)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1108)
			p.MemberModifier()
		}

	case 2:
		p.SetState(1110)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1109)
				p.MemberModifier()
			}

		}
		{
			p.SetState(1112)
			p.Identifier()
		}

	}
	{
		p.SetState(1115)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// ITraitMethodReferenceContext is an interface to support dynamic dispatch.
type ITraitMethodReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTraitMethodReferenceContext differentiates from other interfaces.
	IsTraitMethodReferenceContext()
}

type TraitMethodReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTraitMethodReferenceContext() *TraitMethodReferenceContext {
	var p = new(TraitMethodReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_traitMethodReference
	return p
}

func (*TraitMethodReferenceContext) IsTraitMethodReferenceContext() {}

func NewTraitMethodReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TraitMethodReferenceContext {
	var p = new(TraitMethodReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_traitMethodReference

	return p
}

func (s *TraitMethodReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TraitMethodReferenceContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TraitMethodReferenceContext) QualifiedNamespaceName() IQualifiedNamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameContext)
}

func (s *TraitMethodReferenceContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *TraitMethodReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TraitMethodReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TraitMethodReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTraitMethodReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TraitMethodReference() (localctx ITraitMethodReferenceContext) {
	this := p
	_ = this

	localctx = NewTraitMethodReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, PHPParserRULE_traitMethodReference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1120)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1117)
			p.QualifiedNamespaceName()
		}
		{
			p.SetState(1118)
			p.Match(PHPParserDoubleColon)
		}

	}
	{
		p.SetState(1122)
		p.Identifier()
	}

	return localctx
}

// IBaseCtorCallContext is an interface to support dynamic dispatch.
type IBaseCtorCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBaseCtorCallContext differentiates from other interfaces.
	IsBaseCtorCallContext()
}

type BaseCtorCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseCtorCallContext() *BaseCtorCallContext {
	var p = new(BaseCtorCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_baseCtorCall
	return p
}

func (*BaseCtorCallContext) IsBaseCtorCallContext() {}

func NewBaseCtorCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseCtorCallContext {
	var p = new(BaseCtorCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_baseCtorCall

	return p
}

func (s *BaseCtorCallContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseCtorCallContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *BaseCtorCallContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *BaseCtorCallContext) Arguments() IArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *BaseCtorCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseCtorCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseCtorCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitBaseCtorCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) BaseCtorCall() (localctx IBaseCtorCallContext) {
	this := p
	_ = this

	localctx = NewBaseCtorCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, PHPParserRULE_baseCtorCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1124)
		p.Match(PHPParserColon)
	}
	{
		p.SetState(1125)
		p.Identifier()
	}
	p.SetState(1127)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserOpenRoundBracket {
		{
			p.SetState(1126)
			p.Arguments()
		}

	}

	return localctx
}

// IReturnTypeDeclContext is an interface to support dynamic dispatch.
type IReturnTypeDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnTypeDeclContext differentiates from other interfaces.
	IsReturnTypeDeclContext()
}

type ReturnTypeDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnTypeDeclContext() *ReturnTypeDeclContext {
	var p = new(ReturnTypeDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_returnTypeDecl
	return p
}

func (*ReturnTypeDeclContext) IsReturnTypeDeclContext() {}

func NewReturnTypeDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnTypeDeclContext {
	var p = new(ReturnTypeDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_returnTypeDecl

	return p
}

func (s *ReturnTypeDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnTypeDeclContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *ReturnTypeDeclContext) TypeHint() ITypeHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeHintContext)
}

func (s *ReturnTypeDeclContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(PHPParserQuestionMark, 0)
}

func (s *ReturnTypeDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnTypeDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnTypeDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitReturnTypeDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ReturnTypeDecl() (localctx IReturnTypeDeclContext) {
	this := p
	_ = this

	localctx = NewReturnTypeDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, PHPParserRULE_returnTypeDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1129)
		p.Match(PHPParserColon)
	}
	p.SetState(1131)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserQuestionMark {
		{
			p.SetState(1130)
			p.Match(PHPParserQuestionMark)
		}

	}
	{
		p.SetState(1133)
		p.typeHint(0)
	}

	return localctx
}

// IMethodBodyContext is an interface to support dynamic dispatch.
type IMethodBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethodBodyContext differentiates from other interfaces.
	IsMethodBodyContext()
}

type MethodBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodBodyContext() *MethodBodyContext {
	var p = new(MethodBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_methodBody
	return p
}

func (*MethodBodyContext) IsMethodBodyContext() {}

func NewMethodBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodBodyContext {
	var p = new(MethodBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_methodBody

	return p
}

func (s *MethodBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodBodyContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *MethodBodyContext) BlockStatement() IBlockStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *MethodBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMethodBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) MethodBody() (localctx IMethodBodyContext) {
	this := p
	_ = this

	localctx = NewMethodBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, PHPParserRULE_methodBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1137)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserSemiColon:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1135)
			p.Match(PHPParserSemiColon)
		}

	case PHPParserOpenCurlyBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1136)
			p.BlockStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPropertyModifiersContext is an interface to support dynamic dispatch.
type IPropertyModifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyModifiersContext differentiates from other interfaces.
	IsPropertyModifiersContext()
}

type PropertyModifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyModifiersContext() *PropertyModifiersContext {
	var p = new(PropertyModifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_propertyModifiers
	return p
}

func (*PropertyModifiersContext) IsPropertyModifiersContext() {}

func NewPropertyModifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyModifiersContext {
	var p = new(PropertyModifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_propertyModifiers

	return p
}

func (s *PropertyModifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyModifiersContext) MemberModifiers() IMemberModifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberModifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberModifiersContext)
}

func (s *PropertyModifiersContext) Var() antlr.TerminalNode {
	return s.GetToken(PHPParserVar, 0)
}

func (s *PropertyModifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyModifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyModifiersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitPropertyModifiers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) PropertyModifiers() (localctx IPropertyModifiersContext) {
	this := p
	_ = this

	localctx = NewPropertyModifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, PHPParserRULE_propertyModifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1141)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserAbstract, PHPParserFinal, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserStatic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1139)
			p.MemberModifiers()
		}

	case PHPParserVar:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1140)
			p.Match(PHPParserVar)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMemberModifiersContext is an interface to support dynamic dispatch.
type IMemberModifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberModifiersContext differentiates from other interfaces.
	IsMemberModifiersContext()
}

type MemberModifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberModifiersContext() *MemberModifiersContext {
	var p = new(MemberModifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_memberModifiers
	return p
}

func (*MemberModifiersContext) IsMemberModifiersContext() {}

func NewMemberModifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberModifiersContext {
	var p = new(MemberModifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_memberModifiers

	return p
}

func (s *MemberModifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberModifiersContext) AllMemberModifier() []IMemberModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemberModifierContext); ok {
			len++
		}
	}

	tst := make([]IMemberModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemberModifierContext); ok {
			tst[i] = t.(IMemberModifierContext)
			i++
		}
	}

	return tst
}

func (s *MemberModifiersContext) MemberModifier(i int) IMemberModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberModifierContext)
}

func (s *MemberModifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberModifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberModifiersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMemberModifiers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) MemberModifiers() (localctx IMemberModifiersContext) {
	this := p
	_ = this

	localctx = NewMemberModifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, PHPParserRULE_memberModifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1144)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1143)
				p.MemberModifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1146)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableInitializerContext is an interface to support dynamic dispatch.
type IVariableInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableInitializerContext differentiates from other interfaces.
	IsVariableInitializerContext()
}

type VariableInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableInitializerContext() *VariableInitializerContext {
	var p = new(VariableInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_variableInitializer
	return p
}

func (*VariableInitializerContext) IsVariableInitializerContext() {}

func NewVariableInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableInitializerContext {
	var p = new(VariableInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_variableInitializer

	return p
}

func (s *VariableInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableInitializerContext) VarName() antlr.TerminalNode {
	return s.GetToken(PHPParserVarName, 0)
}

func (s *VariableInitializerContext) Eq() antlr.TerminalNode {
	return s.GetToken(PHPParserEq, 0)
}

func (s *VariableInitializerContext) ConstantInitializer() IConstantInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantInitializerContext)
}

func (s *VariableInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitVariableInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) VariableInitializer() (localctx IVariableInitializerContext) {
	this := p
	_ = this

	localctx = NewVariableInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, PHPParserRULE_variableInitializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1148)
		p.Match(PHPParserVarName)
	}
	p.SetState(1151)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserEq {
		{
			p.SetState(1149)
			p.Match(PHPParserEq)
		}
		{
			p.SetState(1150)
			p.ConstantInitializer()
		}

	}

	return localctx
}

// IIdentifierInitializerContext is an interface to support dynamic dispatch.
type IIdentifierInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierInitializerContext differentiates from other interfaces.
	IsIdentifierInitializerContext()
}

type IdentifierInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierInitializerContext() *IdentifierInitializerContext {
	var p = new(IdentifierInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_identifierInitializer
	return p
}

func (*IdentifierInitializerContext) IsIdentifierInitializerContext() {}

func NewIdentifierInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierInitializerContext {
	var p = new(IdentifierInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_identifierInitializer

	return p
}

func (s *IdentifierInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierInitializerContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierInitializerContext) Eq() antlr.TerminalNode {
	return s.GetToken(PHPParserEq, 0)
}

func (s *IdentifierInitializerContext) ConstantInitializer() IConstantInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantInitializerContext)
}

func (s *IdentifierInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIdentifierInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) IdentifierInitializer() (localctx IIdentifierInitializerContext) {
	this := p
	_ = this

	localctx = NewIdentifierInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, PHPParserRULE_identifierInitializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1153)
		p.Identifier()
	}
	{
		p.SetState(1154)
		p.Match(PHPParserEq)
	}
	{
		p.SetState(1155)
		p.ConstantInitializer()
	}

	return localctx
}

// IGlobalConstantDeclarationContext is an interface to support dynamic dispatch.
type IGlobalConstantDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGlobalConstantDeclarationContext differentiates from other interfaces.
	IsGlobalConstantDeclarationContext()
}

type GlobalConstantDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGlobalConstantDeclarationContext() *GlobalConstantDeclarationContext {
	var p = new(GlobalConstantDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_globalConstantDeclaration
	return p
}

func (*GlobalConstantDeclarationContext) IsGlobalConstantDeclarationContext() {}

func NewGlobalConstantDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GlobalConstantDeclarationContext {
	var p = new(GlobalConstantDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_globalConstantDeclaration

	return p
}

func (s *GlobalConstantDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *GlobalConstantDeclarationContext) Const() antlr.TerminalNode {
	return s.GetToken(PHPParserConst, 0)
}

func (s *GlobalConstantDeclarationContext) AllIdentifierInitializer() []IIdentifierInitializerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierInitializerContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierInitializerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierInitializerContext); ok {
			tst[i] = t.(IIdentifierInitializerContext)
			i++
		}
	}

	return tst
}

func (s *GlobalConstantDeclarationContext) IdentifierInitializer(i int) IIdentifierInitializerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierInitializerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierInitializerContext)
}

func (s *GlobalConstantDeclarationContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *GlobalConstantDeclarationContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *GlobalConstantDeclarationContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *GlobalConstantDeclarationContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *GlobalConstantDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GlobalConstantDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GlobalConstantDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitGlobalConstantDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) GlobalConstantDeclaration() (localctx IGlobalConstantDeclarationContext) {
	this := p
	_ = this

	localctx = NewGlobalConstantDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, PHPParserRULE_globalConstantDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1158)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAttributeStart {
		{
			p.SetState(1157)
			p.Attributes()
		}

	}
	{
		p.SetState(1160)
		p.Match(PHPParserConst)
	}
	{
		p.SetState(1161)
		p.IdentifierInitializer()
	}
	p.SetState(1166)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(1162)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(1163)
			p.IdentifierInitializer()
		}

		p.SetState(1168)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1169)
		p.Match(PHPParserSemiColon)
	}

	return localctx
}

// IEnumDeclarationContext is an interface to support dynamic dispatch.
type IEnumDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumDeclarationContext differentiates from other interfaces.
	IsEnumDeclarationContext()
}

type EnumDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDeclarationContext() *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_enumDeclaration
	return p
}

func (*EnumDeclarationContext) IsEnumDeclarationContext() {}

func NewEnumDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_enumDeclaration

	return p
}

func (s *EnumDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDeclarationContext) Enum_() antlr.TerminalNode {
	return s.GetToken(PHPParserEnum_, 0)
}

func (s *EnumDeclarationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumDeclarationContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *EnumDeclarationContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *EnumDeclarationContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *EnumDeclarationContext) Implements() antlr.TerminalNode {
	return s.GetToken(PHPParserImplements, 0)
}

func (s *EnumDeclarationContext) InterfaceList() IInterfaceListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceListContext)
}

func (s *EnumDeclarationContext) AllEnumItem() []IEnumItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumItemContext); ok {
			len++
		}
	}

	tst := make([]IEnumItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumItemContext); ok {
			tst[i] = t.(IEnumItemContext)
			i++
		}
	}

	return tst
}

func (s *EnumDeclarationContext) EnumItem(i int) IEnumItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumItemContext)
}

func (s *EnumDeclarationContext) IntType() antlr.TerminalNode {
	return s.GetToken(PHPParserIntType, 0)
}

func (s *EnumDeclarationContext) StringType() antlr.TerminalNode {
	return s.GetToken(PHPParserStringType, 0)
}

func (s *EnumDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitEnumDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) EnumDeclaration() (localctx IEnumDeclarationContext) {
	this := p
	_ = this

	localctx = NewEnumDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, PHPParserRULE_enumDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1171)
		p.Match(PHPParserEnum_)
	}
	{
		p.SetState(1172)
		p.Identifier()
	}
	p.SetState(1175)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserColon {
		{
			p.SetState(1173)
			p.Match(PHPParserColon)
		}
		{
			p.SetState(1174)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserIntType || _la == PHPParserStringType) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1179)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserImplements {
		{
			p.SetState(1177)
			p.Match(PHPParserImplements)
		}
		{
			p.SetState(1178)
			p.InterfaceList()
		}

	}
	{
		p.SetState(1181)
		p.Match(PHPParserOpenCurlyBracket)
	}
	p.SetState(1185)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4529987906437120) != 0 || (int64((_la-81)) & ^0x3f) == 0 && ((int64(1)<<(_la-81))&2254127685959713) != 0 {
		{
			p.SetState(1182)
			p.EnumItem()
		}

		p.SetState(1187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1188)
		p.Match(PHPParserCloseCurlyBracket)
	}

	return localctx
}

// IEnumItemContext is an interface to support dynamic dispatch.
type IEnumItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumItemContext differentiates from other interfaces.
	IsEnumItemContext()
}

type EnumItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumItemContext() *EnumItemContext {
	var p = new(EnumItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_enumItem
	return p
}

func (*EnumItemContext) IsEnumItemContext() {}

func NewEnumItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumItemContext {
	var p = new(EnumItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_enumItem

	return p
}

func (s *EnumItemContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumItemContext) Case() antlr.TerminalNode {
	return s.GetToken(PHPParserCase, 0)
}

func (s *EnumItemContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumItemContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(PHPParserSemiColon, 0)
}

func (s *EnumItemContext) Eq() antlr.TerminalNode {
	return s.GetToken(PHPParserEq, 0)
}

func (s *EnumItemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EnumItemContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *EnumItemContext) MemberModifiers() IMemberModifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberModifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberModifiersContext)
}

func (s *EnumItemContext) Use() antlr.TerminalNode {
	return s.GetToken(PHPParserUse, 0)
}

func (s *EnumItemContext) QualifiedNamespaceNameList() IQualifiedNamespaceNameListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameListContext)
}

func (s *EnumItemContext) TraitAdaptations() ITraitAdaptationsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITraitAdaptationsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITraitAdaptationsContext)
}

func (s *EnumItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitEnumItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) EnumItem() (localctx IEnumItemContext) {
	this := p
	_ = this

	localctx = NewEnumItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, PHPParserRULE_enumItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1206)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserCase:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1190)
			p.Match(PHPParserCase)
		}
		{
			p.SetState(1191)
			p.Identifier()
		}
		p.SetState(1194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserEq {
			{
				p.SetState(1192)
				p.Match(PHPParserEq)
			}
			{
				p.SetState(1193)
				p.expression(0)
			}

		}
		{
			p.SetState(1196)
			p.Match(PHPParserSemiColon)
		}

	case PHPParserAttributeStart, PHPParserAbstract, PHPParserFinal, PHPParserFunction_, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserStatic:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAbstract || (int64((_la-81)) & ^0x3f) == 0 && ((int64(1)<<(_la-81))&2327872274433) != 0 {
			{
				p.SetState(1198)
				p.MemberModifiers()
			}

		}
		{
			p.SetState(1201)
			p.FunctionDeclaration()
		}

	case PHPParserUse:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1202)
			p.Match(PHPParserUse)
		}
		{
			p.SetState(1203)
			p.QualifiedNamespaceNameList()
		}
		{
			p.SetState(1204)
			p.TraitAdaptations()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *ExpressionListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ExpressionList() (localctx IExpressionListContext) {
	this := p
	_ = this

	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, PHPParserRULE_expressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1208)
		p.expression(0)
	}
	p.SetState(1213)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(1209)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(1210)
			p.expression(0)
		}

		p.SetState(1215)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParenthesesContext is an interface to support dynamic dispatch.
type IParenthesesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParenthesesContext differentiates from other interfaces.
	IsParenthesesContext()
}

type ParenthesesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesesContext() *ParenthesesContext {
	var p = new(ParenthesesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_parentheses
	return p
}

func (*ParenthesesContext) IsParenthesesContext() {}

func NewParenthesesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParenthesesContext {
	var p = new(ParenthesesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_parentheses

	return p
}

func (s *ParenthesesContext) GetParser() antlr.Parser { return s.parser }

func (s *ParenthesesContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *ParenthesesContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesesContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *ParenthesesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParenthesesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitParentheses(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Parentheses() (localctx IParenthesesContext) {
	this := p
	_ = this

	localctx = NewParenthesesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, PHPParserRULE_parentheses)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1216)
		p.Match(PHPParserOpenRoundBracket)
	}
	{
		p.SetState(1217)
		p.expression(0)
	}
	{
		p.SetState(1218)
		p.Match(PHPParserCloseRoundBracket)
	}

	return localctx
}

// IFullyQualifiedNamespaceExprContext is an interface to support dynamic dispatch.
type IFullyQualifiedNamespaceExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFullyQualifiedNamespaceExprContext differentiates from other interfaces.
	IsFullyQualifiedNamespaceExprContext()
}

type FullyQualifiedNamespaceExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFullyQualifiedNamespaceExprContext() *FullyQualifiedNamespaceExprContext {
	var p = new(FullyQualifiedNamespaceExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_fullyQualifiedNamespaceExpr
	return p
}

func (*FullyQualifiedNamespaceExprContext) IsFullyQualifiedNamespaceExprContext() {}

func NewFullyQualifiedNamespaceExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FullyQualifiedNamespaceExprContext {
	var p = new(FullyQualifiedNamespaceExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_fullyQualifiedNamespaceExpr

	return p
}

func (s *FullyQualifiedNamespaceExprContext) GetParser() antlr.Parser { return s.parser }

func (s *FullyQualifiedNamespaceExprContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *FullyQualifiedNamespaceExprContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FullyQualifiedNamespaceExprContext) AllNamespaceSeparator() []antlr.TerminalNode {
	return s.GetTokens(PHPParserNamespaceSeparator)
}

func (s *FullyQualifiedNamespaceExprContext) NamespaceSeparator(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserNamespaceSeparator, i)
}

func (s *FullyQualifiedNamespaceExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullyQualifiedNamespaceExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FullyQualifiedNamespaceExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFullyQualifiedNamespaceExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) FullyQualifiedNamespaceExpr() (localctx IFullyQualifiedNamespaceExprContext) {
	this := p
	_ = this

	localctx = NewFullyQualifiedNamespaceExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, PHPParserRULE_fullyQualifiedNamespaceExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1221)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserNamespaceSeparator {
		{
			p.SetState(1220)
			p.Match(PHPParserNamespaceSeparator)
		}

	}
	{
		p.SetState(1223)
		p.Identifier()
	}
	{
		p.SetState(1224)
		p.Match(PHPParserNamespaceSeparator)
	}
	p.SetState(1230)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1225)
				p.Identifier()
			}
			{
				p.SetState(1226)
				p.Match(PHPParserNamespaceSeparator)
			}

		}
		p.SetState(1232)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())
	}
	{
		p.SetState(1233)
		p.Identifier()
	}

	return localctx
}

// IStaticClassExprContext is an interface to support dynamic dispatch.
type IStaticClassExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStaticClassExprContext differentiates from other interfaces.
	IsStaticClassExprContext()
}

type StaticClassExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticClassExprContext() *StaticClassExprContext {
	var p = new(StaticClassExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_staticClassExpr
	return p
}

func (*StaticClassExprContext) IsStaticClassExprContext() {}

func NewStaticClassExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticClassExprContext {
	var p = new(StaticClassExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_staticClassExpr

	return p
}

func (s *StaticClassExprContext) GetParser() antlr.Parser { return s.parser }

func (s *StaticClassExprContext) StaticClassExprFunctionMember() IStaticClassExprFunctionMemberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticClassExprFunctionMemberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticClassExprFunctionMemberContext)
}

func (s *StaticClassExprContext) StaticClassExprVariableMember() IStaticClassExprVariableMemberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticClassExprVariableMemberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticClassExprVariableMemberContext)
}

func (s *StaticClassExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticClassExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StaticClassExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitStaticClassExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) StaticClassExpr() (localctx IStaticClassExprContext) {
	this := p
	_ = this

	localctx = NewStaticClassExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, PHPParserRULE_staticClassExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1237)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1235)
			p.StaticClassExprFunctionMember()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1236)
			p.StaticClassExprVariableMember()
		}

	}

	return localctx
}

// IStaticClassExprFunctionMemberContext is an interface to support dynamic dispatch.
type IStaticClassExprFunctionMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStaticClassExprFunctionMemberContext differentiates from other interfaces.
	IsStaticClassExprFunctionMemberContext()
}

type StaticClassExprFunctionMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticClassExprFunctionMemberContext() *StaticClassExprFunctionMemberContext {
	var p = new(StaticClassExprFunctionMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_staticClassExprFunctionMember
	return p
}

func (*StaticClassExprFunctionMemberContext) IsStaticClassExprFunctionMemberContext() {}

func NewStaticClassExprFunctionMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticClassExprFunctionMemberContext {
	var p = new(StaticClassExprFunctionMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_staticClassExprFunctionMember

	return p
}

func (s *StaticClassExprFunctionMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *StaticClassExprFunctionMemberContext) CopyFrom(ctx *StaticClassExprFunctionMemberContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *StaticClassExprFunctionMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticClassExprFunctionMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ClassStaticFunctionMemberContext struct {
	*StaticClassExprFunctionMemberContext
}

func NewClassStaticFunctionMemberContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ClassStaticFunctionMemberContext {
	var p = new(ClassStaticFunctionMemberContext)

	p.StaticClassExprFunctionMemberContext = NewEmptyStaticClassExprFunctionMemberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StaticClassExprFunctionMemberContext))

	return p
}

func (s *ClassStaticFunctionMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassStaticFunctionMemberContext) FullyQualifiedNamespaceExpr() IFullyQualifiedNamespaceExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFullyQualifiedNamespaceExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFullyQualifiedNamespaceExprContext)
}

func (s *ClassStaticFunctionMemberContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *ClassStaticFunctionMemberContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ClassStaticFunctionMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitClassStaticFunctionMember(s)

	default:
		return t.VisitChildren(s)
	}
}

type StringAsIndirectClassStaticFunctionMemberContext struct {
	*StaticClassExprFunctionMemberContext
}

func NewStringAsIndirectClassStaticFunctionMemberContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StringAsIndirectClassStaticFunctionMemberContext {
	var p = new(StringAsIndirectClassStaticFunctionMemberContext)

	p.StaticClassExprFunctionMemberContext = NewEmptyStaticClassExprFunctionMemberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StaticClassExprFunctionMemberContext))

	return p
}

func (s *StringAsIndirectClassStaticFunctionMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringAsIndirectClassStaticFunctionMemberContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *StringAsIndirectClassStaticFunctionMemberContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *StringAsIndirectClassStaticFunctionMemberContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StringAsIndirectClassStaticFunctionMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitStringAsIndirectClassStaticFunctionMember(s)

	default:
		return t.VisitChildren(s)
	}
}

type VariableAsIndirectClassStaticFunctionMemberContext struct {
	*StaticClassExprFunctionMemberContext
}

func NewVariableAsIndirectClassStaticFunctionMemberContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VariableAsIndirectClassStaticFunctionMemberContext {
	var p = new(VariableAsIndirectClassStaticFunctionMemberContext)

	p.StaticClassExprFunctionMemberContext = NewEmptyStaticClassExprFunctionMemberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StaticClassExprFunctionMemberContext))

	return p
}

func (s *VariableAsIndirectClassStaticFunctionMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableAsIndirectClassStaticFunctionMemberContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *VariableAsIndirectClassStaticFunctionMemberContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *VariableAsIndirectClassStaticFunctionMemberContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *VariableAsIndirectClassStaticFunctionMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitVariableAsIndirectClassStaticFunctionMember(s)

	default:
		return t.VisitChildren(s)
	}
}

type ClassDirectFunctionMemberContext struct {
	*StaticClassExprFunctionMemberContext
}

func NewClassDirectFunctionMemberContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ClassDirectFunctionMemberContext {
	var p = new(ClassDirectFunctionMemberContext)

	p.StaticClassExprFunctionMemberContext = NewEmptyStaticClassExprFunctionMemberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StaticClassExprFunctionMemberContext))

	return p
}

func (s *ClassDirectFunctionMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDirectFunctionMemberContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ClassDirectFunctionMemberContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ClassDirectFunctionMemberContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *ClassDirectFunctionMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitClassDirectFunctionMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) StaticClassExprFunctionMember() (localctx IStaticClassExprFunctionMemberContext) {
	this := p
	_ = this

	localctx = NewStaticClassExprFunctionMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, PHPParserRULE_staticClassExprFunctionMember)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1255)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext()) {
	case 1:
		localctx = NewClassStaticFunctionMemberContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1239)
			p.FullyQualifiedNamespaceExpr()
		}
		{
			p.SetState(1240)
			p.Match(PHPParserDoubleColon)
		}
		{
			p.SetState(1241)
			p.Identifier()
		}

	case 2:
		localctx = NewClassDirectFunctionMemberContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1243)
			p.Identifier()
		}
		{
			p.SetState(1244)
			p.Match(PHPParserDoubleColon)
		}
		{
			p.SetState(1245)
			p.Identifier()
		}

	case 3:
		localctx = NewStringAsIndirectClassStaticFunctionMemberContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1247)
			p.String_()
		}
		{
			p.SetState(1248)
			p.Match(PHPParserDoubleColon)
		}
		{
			p.SetState(1249)
			p.Identifier()
		}

	case 4:
		localctx = NewVariableAsIndirectClassStaticFunctionMemberContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1251)
			p.Variable()
		}
		{
			p.SetState(1252)
			p.Match(PHPParserDoubleColon)
		}
		{
			p.SetState(1253)
			p.Identifier()
		}

	}

	return localctx
}

// IStaticClassExprVariableMemberContext is an interface to support dynamic dispatch.
type IStaticClassExprVariableMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStaticClassExprVariableMemberContext differentiates from other interfaces.
	IsStaticClassExprVariableMemberContext()
}

type StaticClassExprVariableMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticClassExprVariableMemberContext() *StaticClassExprVariableMemberContext {
	var p = new(StaticClassExprVariableMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_staticClassExprVariableMember
	return p
}

func (*StaticClassExprVariableMemberContext) IsStaticClassExprVariableMemberContext() {}

func NewStaticClassExprVariableMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticClassExprVariableMemberContext {
	var p = new(StaticClassExprVariableMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_staticClassExprVariableMember

	return p
}

func (s *StaticClassExprVariableMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *StaticClassExprVariableMemberContext) CopyFrom(ctx *StaticClassExprVariableMemberContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *StaticClassExprVariableMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticClassExprVariableMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type StringAsIndirectClassStaticVariableContext struct {
	*StaticClassExprVariableMemberContext
}

func NewStringAsIndirectClassStaticVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StringAsIndirectClassStaticVariableContext {
	var p = new(StringAsIndirectClassStaticVariableContext)

	p.StaticClassExprVariableMemberContext = NewEmptyStaticClassExprVariableMemberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StaticClassExprVariableMemberContext))

	return p
}

func (s *StringAsIndirectClassStaticVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringAsIndirectClassStaticVariableContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *StringAsIndirectClassStaticVariableContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *StringAsIndirectClassStaticVariableContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *StringAsIndirectClassStaticVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitStringAsIndirectClassStaticVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

type VariableAsIndirectClassStaticVariableContext struct {
	*StaticClassExprVariableMemberContext
}

func NewVariableAsIndirectClassStaticVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VariableAsIndirectClassStaticVariableContext {
	var p = new(VariableAsIndirectClassStaticVariableContext)

	p.StaticClassExprVariableMemberContext = NewEmptyStaticClassExprVariableMemberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StaticClassExprVariableMemberContext))

	return p
}

func (s *VariableAsIndirectClassStaticVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableAsIndirectClassStaticVariableContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *VariableAsIndirectClassStaticVariableContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *VariableAsIndirectClassStaticVariableContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *VariableAsIndirectClassStaticVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitVariableAsIndirectClassStaticVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

type ClassDirectStaticVariableContext struct {
	*StaticClassExprVariableMemberContext
}

func NewClassDirectStaticVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ClassDirectStaticVariableContext {
	var p = new(ClassDirectStaticVariableContext)

	p.StaticClassExprVariableMemberContext = NewEmptyStaticClassExprVariableMemberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StaticClassExprVariableMemberContext))

	return p
}

func (s *ClassDirectStaticVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDirectStaticVariableContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ClassDirectStaticVariableContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *ClassDirectStaticVariableContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *ClassDirectStaticVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitClassDirectStaticVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

type ClassStaticVariableContext struct {
	*StaticClassExprVariableMemberContext
}

func NewClassStaticVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ClassStaticVariableContext {
	var p = new(ClassStaticVariableContext)

	p.StaticClassExprVariableMemberContext = NewEmptyStaticClassExprVariableMemberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StaticClassExprVariableMemberContext))

	return p
}

func (s *ClassStaticVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassStaticVariableContext) FullyQualifiedNamespaceExpr() IFullyQualifiedNamespaceExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFullyQualifiedNamespaceExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFullyQualifiedNamespaceExprContext)
}

func (s *ClassStaticVariableContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *ClassStaticVariableContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *ClassStaticVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitClassStaticVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) StaticClassExprVariableMember() (localctx IStaticClassExprVariableMemberContext) {
	this := p
	_ = this

	localctx = NewStaticClassExprVariableMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, PHPParserRULE_staticClassExprVariableMember)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1273)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) {
	case 1:
		localctx = NewClassStaticVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1257)
			p.FullyQualifiedNamespaceExpr()
		}
		{
			p.SetState(1258)
			p.Match(PHPParserDoubleColon)
		}
		{
			p.SetState(1259)
			p.flexiVariable(0)
		}

	case 2:
		localctx = NewClassDirectStaticVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1261)
			p.Identifier()
		}
		{
			p.SetState(1262)
			p.Match(PHPParserDoubleColon)
		}
		{
			p.SetState(1263)
			p.flexiVariable(0)
		}

	case 3:
		localctx = NewStringAsIndirectClassStaticVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1265)
			p.String_()
		}
		{
			p.SetState(1266)
			p.Match(PHPParserDoubleColon)
		}
		{
			p.SetState(1267)
			p.flexiVariable(0)
		}

	case 4:
		localctx = NewVariableAsIndirectClassStaticVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1269)
			p.Variable()
		}
		{
			p.SetState(1270)
			p.Match(PHPParserDoubleColon)
		}
		{
			p.SetState(1271)
			p.flexiVariable(0)
		}

	}

	return localctx
}

// IMemberCallKeyContext is an interface to support dynamic dispatch.
type IMemberCallKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberCallKeyContext differentiates from other interfaces.
	IsMemberCallKeyContext()
}

type MemberCallKeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberCallKeyContext() *MemberCallKeyContext {
	var p = new(MemberCallKeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_memberCallKey
	return p
}

func (*MemberCallKeyContext) IsMemberCallKeyContext() {}

func NewMemberCallKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberCallKeyContext {
	var p = new(MemberCallKeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_memberCallKey

	return p
}

func (s *MemberCallKeyContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberCallKeyContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *MemberCallKeyContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *MemberCallKeyContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *MemberCallKeyContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *MemberCallKeyContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MemberCallKeyContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *MemberCallKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberCallKeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberCallKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMemberCallKey(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) MemberCallKey() (localctx IMemberCallKeyContext) {
	this := p
	_ = this

	localctx = NewMemberCallKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, PHPParserRULE_memberCallKey)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1282)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserLabel:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1275)
			p.Identifier()
		}

	case PHPParserStartNowDoc, PHPParserSingleQuoteString, PHPParserDoubleQuote:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1276)
			p.String_()
		}

	case PHPParserDollar, PHPParserVarName:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1277)
			p.Variable()
		}

	case PHPParserOpenCurlyBracket:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1278)
			p.Match(PHPParserOpenCurlyBracket)
		}
		{
			p.SetState(1279)
			p.expression(0)
		}
		{
			p.SetState(1280)
			p.Match(PHPParserCloseCurlyBracket)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndexMemberCallKeyContext is an interface to support dynamic dispatch.
type IIndexMemberCallKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexMemberCallKeyContext differentiates from other interfaces.
	IsIndexMemberCallKeyContext()
}

type IndexMemberCallKeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexMemberCallKeyContext() *IndexMemberCallKeyContext {
	var p = new(IndexMemberCallKeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_indexMemberCallKey
	return p
}

func (*IndexMemberCallKeyContext) IsIndexMemberCallKeyContext() {}

func NewIndexMemberCallKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexMemberCallKeyContext {
	var p = new(IndexMemberCallKeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_indexMemberCallKey

	return p
}

func (s *IndexMemberCallKeyContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexMemberCallKeyContext) MemberCallKey() IMemberCallKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberCallKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberCallKeyContext)
}

func (s *IndexMemberCallKeyContext) NumericConstant() INumericConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericConstantContext)
}

func (s *IndexMemberCallKeyContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexMemberCallKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexMemberCallKeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexMemberCallKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIndexMemberCallKey(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) IndexMemberCallKey() (localctx IIndexMemberCallKeyContext) {
	this := p
	_ = this

	localctx = NewIndexMemberCallKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, PHPParserRULE_indexMemberCallKey)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1287)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1284)
			p.MemberCallKey()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1285)
			p.NumericConstant()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1286)
			p.expression(0)
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SpecialWordExpressionContext struct {
	*ExpressionContext
}

func NewSpecialWordExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpecialWordExpressionContext {
	var p = new(SpecialWordExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SpecialWordExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecialWordExpressionContext) Yield() antlr.TerminalNode {
	return s.GetToken(PHPParserYield, 0)
}

func (s *SpecialWordExpressionContext) List() antlr.TerminalNode {
	return s.GetToken(PHPParserList, 0)
}

func (s *SpecialWordExpressionContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *SpecialWordExpressionContext) AssignmentList() IAssignmentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentListContext)
}

func (s *SpecialWordExpressionContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *SpecialWordExpressionContext) Eq() antlr.TerminalNode {
	return s.GetToken(PHPParserEq, 0)
}

func (s *SpecialWordExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SpecialWordExpressionContext) IsSet() antlr.TerminalNode {
	return s.GetToken(PHPParserIsSet, 0)
}

func (s *SpecialWordExpressionContext) ChainList() IChainListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainListContext)
}

func (s *SpecialWordExpressionContext) Empty() antlr.TerminalNode {
	return s.GetToken(PHPParserEmpty, 0)
}

func (s *SpecialWordExpressionContext) Chain() IChainContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *SpecialWordExpressionContext) Exit() antlr.TerminalNode {
	return s.GetToken(PHPParserExit, 0)
}

func (s *SpecialWordExpressionContext) Die() antlr.TerminalNode {
	return s.GetToken(PHPParserDie, 0)
}

func (s *SpecialWordExpressionContext) Throw() antlr.TerminalNode {
	return s.GetToken(PHPParserThrow, 0)
}

func (s *SpecialWordExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitSpecialWordExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShortQualifiedNameExpressionContext struct {
	*ExpressionContext
}

func NewShortQualifiedNameExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShortQualifiedNameExpressionContext {
	var p = new(ShortQualifiedNameExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ShortQualifiedNameExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShortQualifiedNameExpressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ShortQualifiedNameExpressionContext) NamespaceSeparator() antlr.TerminalNode {
	return s.GetToken(PHPParserNamespaceSeparator, 0)
}

func (s *ShortQualifiedNameExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitShortQualifiedNameExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArrayCreationExpressionContext struct {
	*ExpressionContext
}

func NewArrayCreationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArrayCreationExpressionContext {
	var p = new(ArrayCreationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ArrayCreationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayCreationExpressionContext) ArrayCreation() IArrayCreationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayCreationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayCreationContext)
}

func (s *ArrayCreationExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitArrayCreationExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BackQuoteStringExpressionContext struct {
	*ExpressionContext
}

func NewBackQuoteStringExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BackQuoteStringExpressionContext {
	var p = new(BackQuoteStringExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *BackQuoteStringExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BackQuoteStringExpressionContext) BackQuoteString() antlr.TerminalNode {
	return s.GetToken(PHPParserBackQuoteString, 0)
}

func (s *BackQuoteStringExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitBackQuoteStringExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArrayCreationUnpackExpressionContext struct {
	*ExpressionContext
}

func NewArrayCreationUnpackExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArrayCreationUnpackExpressionContext {
	var p = new(ArrayCreationUnpackExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ArrayCreationUnpackExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayCreationUnpackExpressionContext) LeftArrayCreation() ILeftArrayCreationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftArrayCreationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftArrayCreationContext)
}

func (s *ArrayCreationUnpackExpressionContext) Eq() antlr.TerminalNode {
	return s.GetToken(PHPParserEq, 0)
}

func (s *ArrayCreationUnpackExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayCreationUnpackExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitArrayCreationUnpackExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type KeywordNewExpressionContext struct {
	*ExpressionContext
}

func NewKeywordNewExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *KeywordNewExpressionContext {
	var p = new(KeywordNewExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *KeywordNewExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordNewExpressionContext) NewExpr() INewExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INewExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INewExprContext)
}

func (s *KeywordNewExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitKeywordNewExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type MatchExpressionContext struct {
	*ExpressionContext
}

func NewMatchExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MatchExpressionContext {
	var p = new(MatchExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *MatchExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchExpressionContext) MatchExpr() IMatchExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchExprContext)
}

func (s *MatchExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMatchExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type FunctionCallExpressionContext struct {
	*ExpressionContext
}

func NewFunctionCallExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallExpressionContext {
	var p = new(FunctionCallExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *FunctionCallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallExpressionContext) Arguments() IArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *FunctionCallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFunctionCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalExpressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewLogicalExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalExpressionContext {
	var p = new(LogicalExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *LogicalExpressionContext) GetOp() antlr.Token { return s.op }

func (s *LogicalExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *LogicalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *LogicalExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LogicalExpressionContext) LogicalAnd() antlr.TerminalNode {
	return s.GetToken(PHPParserLogicalAnd, 0)
}

func (s *LogicalExpressionContext) LogicalXor() antlr.TerminalNode {
	return s.GetToken(PHPParserLogicalXor, 0)
}

func (s *LogicalExpressionContext) LogicalOr() antlr.TerminalNode {
	return s.GetToken(PHPParserLogicalOr, 0)
}

func (s *LogicalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitLogicalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrintExpressionContext struct {
	*ExpressionContext
}

func NewPrintExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrintExpressionContext {
	var p = new(PrintExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PrintExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintExpressionContext) Print() antlr.TerminalNode {
	return s.GetToken(PHPParserPrint, 0)
}

func (s *PrintExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrintExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitPrintExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PostfixIncDecExpressionContext struct {
	*ExpressionContext
}

func NewPostfixIncDecExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PostfixIncDecExpressionContext {
	var p = new(PostfixIncDecExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PostfixIncDecExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixIncDecExpressionContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *PostfixIncDecExpressionContext) Inc() antlr.TerminalNode {
	return s.GetToken(PHPParserInc, 0)
}

func (s *PostfixIncDecExpressionContext) Dec() antlr.TerminalNode {
	return s.GetToken(PHPParserDec, 0)
}

func (s *PostfixIncDecExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitPostfixIncDecExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type MemerCallExpressionContext struct {
	*ExpressionContext
}

func NewMemerCallExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MemerCallExpressionContext {
	var p = new(MemerCallExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *MemerCallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemerCallExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MemerCallExpressionContext) ObjectOperator() antlr.TerminalNode {
	return s.GetToken(PHPParserObjectOperator, 0)
}

func (s *MemerCallExpressionContext) MemberCallKey() IMemberCallKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberCallKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberCallKeyContext)
}

func (s *MemerCallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMemerCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type IncludeExpressionContext struct {
	*ExpressionContext
}

func NewIncludeExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IncludeExpressionContext {
	var p = new(IncludeExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *IncludeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncludeExpressionContext) Include() IIncludeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIncludeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIncludeContext)
}

func (s *IncludeExpressionContext) Set_Include_Path() antlr.TerminalNode {
	return s.GetToken(PHPParserSet_Include_Path, 0)
}

func (s *IncludeExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IncludeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIncludeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexCallExpressionContext struct {
	*ExpressionContext
}

func NewIndexCallExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexCallExpressionContext {
	var p = new(IndexCallExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *IndexCallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexCallExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexCallExpressionContext) OpenSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenSquareBracket, 0)
}

func (s *IndexCallExpressionContext) IndexMemberCallKey() IIndexMemberCallKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexMemberCallKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexMemberCallKeyContext)
}

func (s *IndexCallExpressionContext) CloseSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseSquareBracket, 0)
}

func (s *IndexCallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIndexCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type CodeExecExpressionContext struct {
	*ExpressionContext
}

func NewCodeExecExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CodeExecExpressionContext {
	var p = new(CodeExecExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *CodeExecExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CodeExecExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CodeExecExpressionContext) Eval() antlr.TerminalNode {
	return s.GetToken(PHPParserEval, 0)
}

func (s *CodeExecExpressionContext) Assert() antlr.TerminalNode {
	return s.GetToken(PHPParserAssert, 0)
}

func (s *CodeExecExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitCodeExecExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type CloneExpressionContext struct {
	*ExpressionContext
}

func NewCloneExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CloneExpressionContext {
	var p = new(CloneExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *CloneExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CloneExpressionContext) Clone() antlr.TerminalNode {
	return s.GetToken(PHPParserClone, 0)
}

func (s *CloneExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CloneExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitCloneExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticClassMemberCallAssignmentExpressionContext struct {
	*ExpressionContext
}

func NewStaticClassMemberCallAssignmentExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticClassMemberCallAssignmentExpressionContext {
	var p = new(StaticClassMemberCallAssignmentExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *StaticClassMemberCallAssignmentExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticClassMemberCallAssignmentExpressionContext) StaticClassExprVariableMember() IStaticClassExprVariableMemberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticClassExprVariableMemberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticClassExprVariableMemberContext)
}

func (s *StaticClassMemberCallAssignmentExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *StaticClassMemberCallAssignmentExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StaticClassMemberCallAssignmentExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitStaticClassMemberCallAssignmentExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnaryOperatorExpressionContext struct {
	*ExpressionContext
}

func NewUnaryOperatorExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryOperatorExpressionContext {
	var p = new(UnaryOperatorExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *UnaryOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOperatorExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnaryOperatorExpressionContext) Tilde() antlr.TerminalNode {
	return s.GetToken(PHPParserTilde, 0)
}

func (s *UnaryOperatorExpressionContext) SuppressWarnings() antlr.TerminalNode {
	return s.GetToken(PHPParserSuppressWarnings, 0)
}

func (s *UnaryOperatorExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(PHPParserBang, 0)
}

func (s *UnaryOperatorExpressionContext) Plus() antlr.TerminalNode {
	return s.GetToken(PHPParserPlus, 0)
}

func (s *UnaryOperatorExpressionContext) Minus() antlr.TerminalNode {
	return s.GetToken(PHPParserMinus, 0)
}

func (s *UnaryOperatorExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitUnaryOperatorExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParenthesisExpressionContext struct {
	*ExpressionContext
}

func NewParenthesisExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesisExpressionContext {
	var p = new(ParenthesisExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ParenthesisExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesisExpressionContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *ParenthesisExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesisExpressionContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *ParenthesisExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitParenthesisExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type SpaceshipExpressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewSpaceshipExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpaceshipExpressionContext {
	var p = new(SpaceshipExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SpaceshipExpressionContext) GetOp() antlr.Token { return s.op }

func (s *SpaceshipExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *SpaceshipExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpaceshipExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *SpaceshipExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SpaceshipExpressionContext) Spaceship() antlr.TerminalNode {
	return s.GetToken(PHPParserSpaceship, 0)
}

func (s *SpaceshipExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitSpaceshipExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ConditionalExpressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewConditionalExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ConditionalExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ConditionalExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ConditionalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ConditionalExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalExpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *ConditionalExpressionContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(PHPParserQuestionMark, 0)
}

func (s *ConditionalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitConditionalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type TemplateExpressionContext struct {
	*ExpressionContext
}

func NewTemplateExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TemplateExpressionContext {
	var p = new(TemplateExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *TemplateExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateExpressionContext) AllDoubleQuote() []antlr.TerminalNode {
	return s.GetTokens(PHPParserDoubleQuote)
}

func (s *TemplateExpressionContext) DoubleQuote(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleQuote, i)
}

func (s *TemplateExpressionContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *TemplateExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TemplateExpressionContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *TemplateExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTemplateExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type VariableExpressionContext struct {
	*ExpressionContext
}

func NewVariableExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VariableExpressionContext {
	var p = new(VariableExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *VariableExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableExpressionContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *VariableExpressionContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *VariableExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitVariableExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type NullCoalescingExpressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewNullCoalescingExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NullCoalescingExpressionContext {
	var p = new(NullCoalescingExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *NullCoalescingExpressionContext) GetOp() antlr.Token { return s.op }

func (s *NullCoalescingExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *NullCoalescingExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullCoalescingExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *NullCoalescingExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NullCoalescingExpressionContext) NullCoalescing() antlr.TerminalNode {
	return s.GetToken(PHPParserNullCoalescing, 0)
}

func (s *NullCoalescingExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitNullCoalescingExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type DefinedOrScanDefinedExpressionContext struct {
	*ExpressionContext
}

func NewDefinedOrScanDefinedExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefinedOrScanDefinedExpressionContext {
	var p = new(DefinedOrScanDefinedExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *DefinedOrScanDefinedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinedOrScanDefinedExpressionContext) DefineExpr() IDefineExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefineExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefineExprContext)
}

func (s *DefinedOrScanDefinedExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitDefinedOrScanDefinedExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArithmeticExpressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewArithmeticExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArithmeticExpressionContext {
	var p = new(ArithmeticExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ArithmeticExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ArithmeticExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ArithmeticExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArithmeticExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ArithmeticExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArithmeticExpressionContext) Pow() antlr.TerminalNode {
	return s.GetToken(PHPParserPow, 0)
}

func (s *ArithmeticExpressionContext) Asterisk() antlr.TerminalNode {
	return s.GetToken(PHPParserAsterisk, 0)
}

func (s *ArithmeticExpressionContext) Divide() antlr.TerminalNode {
	return s.GetToken(PHPParserDivide, 0)
}

func (s *ArithmeticExpressionContext) Percent() antlr.TerminalNode {
	return s.GetToken(PHPParserPercent, 0)
}

func (s *ArithmeticExpressionContext) Plus() antlr.TerminalNode {
	return s.GetToken(PHPParserPlus, 0)
}

func (s *ArithmeticExpressionContext) Minus() antlr.TerminalNode {
	return s.GetToken(PHPParserMinus, 0)
}

func (s *ArithmeticExpressionContext) Dot() antlr.TerminalNode {
	return s.GetToken(PHPParserDot, 0)
}

func (s *ArithmeticExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitArithmeticExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ScalarExpressionContext struct {
	*ExpressionContext
}

func NewScalarExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ScalarExpressionContext {
	var p = new(ScalarExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ScalarExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScalarExpressionContext) Constant() IConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *ScalarExpressionContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *ScalarExpressionContext) Label() antlr.TerminalNode {
	return s.GetToken(PHPParserLabel, 0)
}

func (s *ScalarExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitScalarExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrefixIncDecExpressionContext struct {
	*ExpressionContext
}

func NewPrefixIncDecExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrefixIncDecExpressionContext {
	var p = new(PrefixIncDecExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PrefixIncDecExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixIncDecExpressionContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *PrefixIncDecExpressionContext) Inc() antlr.TerminalNode {
	return s.GetToken(PHPParserInc, 0)
}

func (s *PrefixIncDecExpressionContext) Dec() antlr.TerminalNode {
	return s.GetToken(PHPParserDec, 0)
}

func (s *PrefixIncDecExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitPrefixIncDecExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ComparisonExpressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewComparisonExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ComparisonExpressionContext {
	var p = new(ComparisonExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ComparisonExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ComparisonExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ComparisonExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ComparisonExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ComparisonExpressionContext) ShiftLeft() antlr.TerminalNode {
	return s.GetToken(PHPParserShiftLeft, 0)
}

func (s *ComparisonExpressionContext) ShiftRight() antlr.TerminalNode {
	return s.GetToken(PHPParserShiftRight, 0)
}

func (s *ComparisonExpressionContext) Less() antlr.TerminalNode {
	return s.GetToken(PHPParserLess, 0)
}

func (s *ComparisonExpressionContext) IsSmallerOrEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserIsSmallerOrEqual, 0)
}

func (s *ComparisonExpressionContext) Greater() antlr.TerminalNode {
	return s.GetToken(PHPParserGreater, 0)
}

func (s *ComparisonExpressionContext) IsGreaterOrEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserIsGreaterOrEqual, 0)
}

func (s *ComparisonExpressionContext) IsIdentical() antlr.TerminalNode {
	return s.GetToken(PHPParserIsIdentical, 0)
}

func (s *ComparisonExpressionContext) IsNoidentical() antlr.TerminalNode {
	return s.GetToken(PHPParserIsNoidentical, 0)
}

func (s *ComparisonExpressionContext) IsEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserIsEqual, 0)
}

func (s *ComparisonExpressionContext) IsNotEq() antlr.TerminalNode {
	return s.GetToken(PHPParserIsNotEq, 0)
}

func (s *ComparisonExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitComparisonExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexLegacyCallExpressionContext struct {
	*ExpressionContext
}

func NewIndexLegacyCallExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexLegacyCallExpressionContext {
	var p = new(IndexLegacyCallExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *IndexLegacyCallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexLegacyCallExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexLegacyCallExpressionContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *IndexLegacyCallExpressionContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *IndexLegacyCallExpressionContext) ObjectOperator() antlr.TerminalNode {
	return s.GetToken(PHPParserObjectOperator, 0)
}

func (s *IndexLegacyCallExpressionContext) IndexMemberCallKey() IIndexMemberCallKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexMemberCallKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexMemberCallKeyContext)
}

func (s *IndexLegacyCallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIndexLegacyCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type OrdinaryAssignmentExpressionContext struct {
	*ExpressionContext
}

func NewOrdinaryAssignmentExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OrdinaryAssignmentExpressionContext {
	var p = new(OrdinaryAssignmentExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *OrdinaryAssignmentExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrdinaryAssignmentExpressionContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *OrdinaryAssignmentExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *OrdinaryAssignmentExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OrdinaryAssignmentExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitOrdinaryAssignmentExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type CastExpressionContext struct {
	*ExpressionContext
}

func NewCastExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CastExpressionContext {
	var p = new(CastExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *CastExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastExpressionContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *CastExpressionContext) CastOperation() ICastOperationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICastOperationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICastOperationContext)
}

func (s *CastExpressionContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *CastExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CastExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitCastExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type InstanceOfExpressionContext struct {
	*ExpressionContext
}

func NewInstanceOfExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstanceOfExpressionContext {
	var p = new(InstanceOfExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *InstanceOfExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstanceOfExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InstanceOfExpressionContext) InstanceOf() antlr.TerminalNode {
	return s.GetToken(PHPParserInstanceOf, 0)
}

func (s *InstanceOfExpressionContext) TypeRef() ITypeRefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeRefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeRefContext)
}

func (s *InstanceOfExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitInstanceOfExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LambdaFunctionExpressionContext struct {
	*ExpressionContext
}

func NewLambdaFunctionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LambdaFunctionExpressionContext {
	var p = new(LambdaFunctionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *LambdaFunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaFunctionExpressionContext) LambdaFunctionExpr() ILambdaFunctionExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaFunctionExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaFunctionExprContext)
}

func (s *LambdaFunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitLambdaFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitwiseExpressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewBitwiseExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitwiseExpressionContext {
	var p = new(BitwiseExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *BitwiseExpressionContext) GetOp() antlr.Token { return s.op }

func (s *BitwiseExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *BitwiseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BitwiseExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitwiseExpressionContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *BitwiseExpressionContext) Caret() antlr.TerminalNode {
	return s.GetToken(PHPParserCaret, 0)
}

func (s *BitwiseExpressionContext) Pipe() antlr.TerminalNode {
	return s.GetToken(PHPParserPipe, 0)
}

func (s *BitwiseExpressionContext) BooleanAnd() antlr.TerminalNode {
	return s.GetToken(PHPParserBooleanAnd, 0)
}

func (s *BitwiseExpressionContext) BooleanOr() antlr.TerminalNode {
	return s.GetToken(PHPParserBooleanOr, 0)
}

func (s *BitwiseExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitBitwiseExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type FullyQualifiedNamespaceExpressionContext struct {
	*ExpressionContext
}

func NewFullyQualifiedNamespaceExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FullyQualifiedNamespaceExpressionContext {
	var p = new(FullyQualifiedNamespaceExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *FullyQualifiedNamespaceExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullyQualifiedNamespaceExpressionContext) FullyQualifiedNamespaceExpr() IFullyQualifiedNamespaceExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFullyQualifiedNamespaceExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFullyQualifiedNamespaceExprContext)
}

func (s *FullyQualifiedNamespaceExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFullyQualifiedNamespaceExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticClassAccessExpressionContext struct {
	*ExpressionContext
}

func NewStaticClassAccessExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticClassAccessExpressionContext {
	var p = new(StaticClassAccessExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *StaticClassAccessExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticClassAccessExpressionContext) StaticClassExpr() IStaticClassExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticClassExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticClassExprContext)
}

func (s *StaticClassAccessExpressionContext) NamespaceSeparator() antlr.TerminalNode {
	return s.GetToken(PHPParserNamespaceSeparator, 0)
}

func (s *StaticClassAccessExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitStaticClassAccessExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *PHPParser) expression(_p int) (localctx IExpressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 180
	p.EnterRecursionRule(localctx, 180, PHPParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1384)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCloneExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1290)
			p.Match(PHPParserClone)
		}
		{
			p.SetState(1291)
			p.expression(57)
		}

	case 2:
		localctx = NewKeywordNewExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1292)
			p.NewExpr()
		}

	case 3:
		localctx = NewFullyQualifiedNamespaceExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1293)
			p.FullyQualifiedNamespaceExpr()
		}

	case 4:
		localctx = NewShortQualifiedNameExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1294)
			p.Identifier()
		}

	case 5:
		localctx = NewShortQualifiedNameExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1295)
			p.Match(PHPParserNamespaceSeparator)
		}
		{
			p.SetState(1296)
			p.Identifier()
		}

	case 6:
		localctx = NewStaticClassAccessExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(1298)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1297)
				p.Match(PHPParserNamespaceSeparator)
			}

		}
		{
			p.SetState(1300)
			p.StaticClassExpr()
		}

	case 7:
		localctx = NewVariableExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(1302)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAmpersand {
			{
				p.SetState(1301)
				p.Match(PHPParserAmpersand)
			}

		}
		{
			p.SetState(1304)
			p.flexiVariable(0)
		}

	case 8:
		localctx = NewArrayCreationExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1305)
			p.ArrayCreation()
		}

	case 9:
		localctx = NewScalarExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1306)
			p.Constant()
		}

	case 10:
		localctx = NewScalarExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1307)
			p.String_()
		}

	case 11:
		localctx = NewDefinedOrScanDefinedExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1308)
			p.DefineExpr()
		}

	case 12:
		localctx = NewPrintExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1309)
			p.Match(PHPParserPrint)
		}
		{
			p.SetState(1310)
			p.expression(42)
		}

	case 13:
		localctx = NewScalarExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1311)
			p.Match(PHPParserLabel)
		}

	case 14:
		localctx = NewBackQuoteStringExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1312)
			p.Match(PHPParserBackQuoteString)
		}

	case 15:
		localctx = NewParenthesisExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1313)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1314)
			p.expression(0)
		}
		{
			p.SetState(1315)
			p.Match(PHPParserCloseRoundBracket)
		}

	case 16:
		localctx = NewIncludeExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1317)
			p.Include()
		}

	case 17:
		localctx = NewIncludeExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1318)
			p.Match(PHPParserSet_Include_Path)
		}
		{
			p.SetState(1319)
			p.expression(37)
		}

	case 18:
		localctx = NewSpecialWordExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1320)
			p.Match(PHPParserYield)
		}

	case 19:
		localctx = NewSpecialWordExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1321)
			p.Match(PHPParserList)
		}
		{
			p.SetState(1322)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1323)
			p.AssignmentList()
		}
		{
			p.SetState(1324)
			p.Match(PHPParserCloseRoundBracket)
		}
		{
			p.SetState(1325)
			p.Match(PHPParserEq)
		}
		{
			p.SetState(1326)
			p.expression(35)
		}

	case 20:
		localctx = NewSpecialWordExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1328)
			p.Match(PHPParserIsSet)
		}
		{
			p.SetState(1329)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1330)
			p.ChainList()
		}
		{
			p.SetState(1331)
			p.Match(PHPParserCloseRoundBracket)
		}

	case 21:
		localctx = NewSpecialWordExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1333)
			p.Match(PHPParserEmpty)
		}
		{
			p.SetState(1334)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1335)
			p.Chain()
		}
		{
			p.SetState(1336)
			p.Match(PHPParserCloseRoundBracket)
		}

	case 22:
		localctx = NewSpecialWordExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1338)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserDie || _la == PHPParserExit) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1344)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1339)
				p.Match(PHPParserOpenRoundBracket)
			}
			p.SetState(1341)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
				{
					p.SetState(1340)
					p.expression(0)
				}

			}
			{
				p.SetState(1343)
				p.Match(PHPParserCloseRoundBracket)
			}

		}

	case 23:
		localctx = NewCodeExecExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1346)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserEval || _la == PHPParserAssert) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1347)
			p.expression(31)
		}

	case 24:
		localctx = NewSpecialWordExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1348)
			p.Match(PHPParserThrow)
		}
		{
			p.SetState(1349)
			p.expression(30)
		}

	case 25:
		localctx = NewLambdaFunctionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1350)
			p.LambdaFunctionExpr()
		}

	case 26:
		localctx = NewMatchExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1351)
			p.MatchExpr()
		}

	case 27:
		localctx = NewCastExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1352)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1353)
			p.CastOperation()
		}
		{
			p.SetState(1354)
			p.Match(PHPParserCloseRoundBracket)
		}
		{
			p.SetState(1355)
			p.expression(27)
		}

	case 28:
		localctx = NewUnaryOperatorExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1357)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserTilde || _la == PHPParserSuppressWarnings) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1358)
			p.expression(26)
		}

	case 29:
		localctx = NewUnaryOperatorExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1359)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-203)) & ^0x3f) == 0 && ((int64(1)<<(_la-203))&13) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1360)
			p.expression(25)
		}

	case 30:
		localctx = NewPrefixIncDecExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1361)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserInc || _la == PHPParserDec) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1362)
			p.flexiVariable(0)
		}

	case 31:
		localctx = NewPostfixIncDecExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1363)
			p.flexiVariable(0)
		}
		{
			p.SetState(1364)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserInc || _la == PHPParserDec) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 32:
		localctx = NewArrayCreationUnpackExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1366)
			p.LeftArrayCreation()
		}
		{
			p.SetState(1367)
			p.Match(PHPParserEq)
		}
		{
			p.SetState(1368)
			p.expression(7)
		}

	case 33:
		localctx = NewStaticClassMemberCallAssignmentExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1370)
			p.StaticClassExprVariableMember()
		}
		{
			p.SetState(1371)
			p.AssignmentOperator()
		}
		{
			p.SetState(1372)
			p.expression(6)
		}

	case 34:
		localctx = NewOrdinaryAssignmentExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1374)
			p.flexiVariable(0)
		}
		{
			p.SetState(1375)
			p.AssignmentOperator()
		}
		{
			p.SetState(1376)
			p.expression(5)
		}

	case 35:
		localctx = NewTemplateExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1378)
			p.Match(PHPParserDoubleQuote)
		}
		{
			p.SetState(1379)
			p.Match(PHPParserOpenCurlyBracket)
		}
		{
			p.SetState(1380)
			p.expression(0)
		}
		{
			p.SetState(1381)
			p.Match(PHPParserCloseCurlyBracket)
		}
		{
			p.SetState(1382)
			p.Match(PHPParserDoubleQuote)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1465)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1463)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext()) {
			case 1:
				localctx = NewArithmeticExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1386)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(1387)

					var _m = p.Match(PHPParserPow)

					localctx.(*ArithmeticExpressionContext).op = _m
				}
				{
					p.SetState(1388)
					p.expression(22)
				}

			case 2:
				localctx = NewArithmeticExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1389)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(1390)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ArithmeticExpressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-207)) & ^0x3f) == 0 && ((int64(1)<<(_la-207))&7) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ArithmeticExpressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1391)
					p.expression(21)
				}

			case 3:
				localctx = NewArithmeticExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1392)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(1393)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ArithmeticExpressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-205)) & ^0x3f) == 0 && ((int64(1)<<(_la-205))&259) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ArithmeticExpressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1394)
					p.expression(20)
				}

			case 4:
				localctx = NewComparisonExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1395)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(1396)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ComparisonExpressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == PHPParserShiftLeft || _la == PHPParserShiftRight) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ComparisonExpressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1397)
					p.expression(19)
				}

			case 5:
				localctx = NewComparisonExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1398)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(1399)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ComparisonExpressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-173)) & ^0x3f) == 0 && ((int64(1)<<(_la-173))&201326595) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ComparisonExpressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1400)
					p.expression(18)
				}

			case 6:
				localctx = NewComparisonExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1401)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(1402)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ComparisonExpressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-169)) & ^0x3f) == 0 && ((int64(1)<<(_la-169))&15) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ComparisonExpressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1403)
					p.expression(17)
				}

			case 7:
				localctx = NewBitwiseExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1404)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(1405)

					var _m = p.Match(PHPParserAmpersand)

					localctx.(*BitwiseExpressionContext).op = _m
				}
				{
					p.SetState(1406)
					p.expression(16)
				}

			case 8:
				localctx = NewBitwiseExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1407)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(1408)

					var _m = p.Match(PHPParserCaret)

					localctx.(*BitwiseExpressionContext).op = _m
				}
				{
					p.SetState(1409)
					p.expression(15)
				}

			case 9:
				localctx = NewBitwiseExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1410)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(1411)

					var _m = p.Match(PHPParserPipe)

					localctx.(*BitwiseExpressionContext).op = _m
				}
				{
					p.SetState(1412)
					p.expression(14)
				}

			case 10:
				localctx = NewBitwiseExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1413)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1414)

					var _m = p.Match(PHPParserBooleanAnd)

					localctx.(*BitwiseExpressionContext).op = _m
				}
				{
					p.SetState(1415)
					p.expression(13)
				}

			case 11:
				localctx = NewBitwiseExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1416)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(1417)

					var _m = p.Match(PHPParserBooleanOr)

					localctx.(*BitwiseExpressionContext).op = _m
				}
				{
					p.SetState(1418)
					p.expression(12)
				}

			case 12:
				localctx = NewConditionalExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1419)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(1420)

					var _m = p.Match(PHPParserQuestionMark)

					localctx.(*ConditionalExpressionContext).op = _m
				}
				p.SetState(1422)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
					{
						p.SetState(1421)
						p.expression(0)
					}

				}
				{
					p.SetState(1424)
					p.Match(PHPParserColon)
				}
				{
					p.SetState(1425)
					p.expression(11)
				}

			case 13:
				localctx = NewNullCoalescingExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1426)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1427)

					var _m = p.Match(PHPParserNullCoalescing)

					localctx.(*NullCoalescingExpressionContext).op = _m
				}
				{
					p.SetState(1428)
					p.expression(10)
				}

			case 14:
				localctx = NewSpaceshipExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1429)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(1430)

					var _m = p.Match(PHPParserSpaceship)

					localctx.(*SpaceshipExpressionContext).op = _m
				}
				{
					p.SetState(1431)
					p.expression(9)
				}

			case 15:
				localctx = NewLogicalExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1432)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(1433)

					var _m = p.Match(PHPParserLogicalAnd)

					localctx.(*LogicalExpressionContext).op = _m
				}
				{
					p.SetState(1434)
					p.expression(5)
				}

			case 16:
				localctx = NewLogicalExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1435)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1436)

					var _m = p.Match(PHPParserLogicalXor)

					localctx.(*LogicalExpressionContext).op = _m
				}
				{
					p.SetState(1437)
					p.expression(4)
				}

			case 17:
				localctx = NewLogicalExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1438)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1439)

					var _m = p.Match(PHPParserLogicalOr)

					localctx.(*LogicalExpressionContext).op = _m
				}
				{
					p.SetState(1440)
					p.expression(3)
				}

			case 18:
				localctx = NewMemerCallExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1441)

				if !(p.Precpred(p.GetParserRuleContext(), 54)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 54)", ""))
				}
				{
					p.SetState(1442)
					p.Match(PHPParserObjectOperator)
				}
				{
					p.SetState(1443)
					p.MemberCallKey()
				}

			case 19:
				localctx = NewIndexCallExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1444)

				if !(p.Precpred(p.GetParserRuleContext(), 53)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 53)", ""))
				}
				{
					p.SetState(1445)
					p.Match(PHPParserOpenSquareBracket)
				}
				{
					p.SetState(1446)
					p.IndexMemberCallKey()
				}
				{
					p.SetState(1447)
					p.Match(PHPParserCloseSquareBracket)
				}

			case 20:
				localctx = NewIndexLegacyCallExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1449)

				if !(p.Precpred(p.GetParserRuleContext(), 52)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 52)", ""))
				}
				p.SetState(1451)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PHPParserObjectOperator {
					{
						p.SetState(1450)
						p.Match(PHPParserObjectOperator)
					}

				}
				{
					p.SetState(1453)
					p.Match(PHPParserOpenCurlyBracket)
				}
				p.SetState(1455)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334562462241) != 0 {
					{
						p.SetState(1454)
						p.IndexMemberCallKey()
					}

				}
				{
					p.SetState(1457)
					p.Match(PHPParserCloseCurlyBracket)
				}

			case 21:
				localctx = NewFunctionCallExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1458)

				if !(p.Precpred(p.GetParserRuleContext(), 51)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 51)", ""))
				}
				{
					p.SetState(1459)
					p.Arguments()
				}

			case 22:
				localctx = NewInstanceOfExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_expression)
				p.SetState(1460)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(1461)
					p.Match(PHPParserInstanceOf)
				}
				{
					p.SetState(1462)
					p.TypeRef()
				}

			}

		}
		p.SetState(1467)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())
	}

	return localctx
}

// IFlexiVariableContext is an interface to support dynamic dispatch.
type IFlexiVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlexiVariableContext differentiates from other interfaces.
	IsFlexiVariableContext()
}

type FlexiVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlexiVariableContext() *FlexiVariableContext {
	var p = new(FlexiVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_flexiVariable
	return p
}

func (*FlexiVariableContext) IsFlexiVariableContext() {}

func NewFlexiVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlexiVariableContext {
	var p = new(FlexiVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_flexiVariable

	return p
}

func (s *FlexiVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *FlexiVariableContext) CopyFrom(ctx *FlexiVariableContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FlexiVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlexiVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IndexLegacyCallVariableContext struct {
	*FlexiVariableContext
}

func NewIndexLegacyCallVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexLegacyCallVariableContext {
	var p = new(IndexLegacyCallVariableContext)

	p.FlexiVariableContext = NewEmptyFlexiVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlexiVariableContext))

	return p
}

func (s *IndexLegacyCallVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexLegacyCallVariableContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *IndexLegacyCallVariableContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *IndexLegacyCallVariableContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *IndexLegacyCallVariableContext) IndexMemberCallKey() IIndexMemberCallKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexMemberCallKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexMemberCallKeyContext)
}

func (s *IndexLegacyCallVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIndexLegacyCallVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexVariableContext struct {
	*FlexiVariableContext
}

func NewIndexVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexVariableContext {
	var p = new(IndexVariableContext)

	p.FlexiVariableContext = NewEmptyFlexiVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlexiVariableContext))

	return p
}

func (s *IndexVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexVariableContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *IndexVariableContext) OpenSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenSquareBracket, 0)
}

func (s *IndexVariableContext) CloseSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseSquareBracket, 0)
}

func (s *IndexVariableContext) IndexMemberCallKey() IIndexMemberCallKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexMemberCallKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexMemberCallKeyContext)
}

func (s *IndexVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIndexVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

type CustomVariableContext struct {
	*FlexiVariableContext
}

func NewCustomVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CustomVariableContext {
	var p = new(CustomVariableContext)

	p.FlexiVariableContext = NewEmptyFlexiVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlexiVariableContext))

	return p
}

func (s *CustomVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CustomVariableContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *CustomVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitCustomVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

type MemberVariableContext struct {
	*FlexiVariableContext
}

func NewMemberVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MemberVariableContext {
	var p = new(MemberVariableContext)

	p.FlexiVariableContext = NewEmptyFlexiVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlexiVariableContext))

	return p
}

func (s *MemberVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberVariableContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *MemberVariableContext) ObjectOperator() antlr.TerminalNode {
	return s.GetToken(PHPParserObjectOperator, 0)
}

func (s *MemberVariableContext) MemberCallKey() IMemberCallKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberCallKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberCallKeyContext)
}

func (s *MemberVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMemberVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) FlexiVariable() (localctx IFlexiVariableContext) {
	return p.flexiVariable(0)
}

func (p *PHPParser) flexiVariable(_p int) (localctx IFlexiVariableContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewFlexiVariableContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFlexiVariableContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 182
	p.EnterRecursionRule(localctx, 182, PHPParserRULE_flexiVariable, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewCustomVariableContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1469)
		p.Variable()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1488)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1486)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext()) {
			case 1:
				localctx = NewIndexVariableContext(p, NewFlexiVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_flexiVariable)
				p.SetState(1471)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1472)
					p.Match(PHPParserOpenSquareBracket)
				}
				p.SetState(1474)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334562462241) != 0 {
					{
						p.SetState(1473)
						p.IndexMemberCallKey()
					}

				}
				{
					p.SetState(1476)
					p.Match(PHPParserCloseSquareBracket)
				}

			case 2:
				localctx = NewIndexLegacyCallVariableContext(p, NewFlexiVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_flexiVariable)
				p.SetState(1477)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1478)
					p.Match(PHPParserOpenCurlyBracket)
				}
				p.SetState(1480)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334562462241) != 0 {
					{
						p.SetState(1479)
						p.IndexMemberCallKey()
					}

				}
				{
					p.SetState(1482)
					p.Match(PHPParserCloseCurlyBracket)
				}

			case 3:
				localctx = NewMemberVariableContext(p, NewFlexiVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, PHPParserRULE_flexiVariable)
				p.SetState(1483)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1484)
					p.Match(PHPParserObjectOperator)
				}
				{
					p.SetState(1485)
					p.MemberCallKey()
				}

			}

		}
		p.SetState(1490)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext())
	}

	return localctx
}

// IDefineExprContext is an interface to support dynamic dispatch.
type IDefineExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefineExprContext differentiates from other interfaces.
	IsDefineExprContext()
}

type DefineExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefineExprContext() *DefineExprContext {
	var p = new(DefineExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_defineExpr
	return p
}

func (*DefineExprContext) IsDefineExprContext() {}

func NewDefineExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefineExprContext {
	var p = new(DefineExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_defineExpr

	return p
}

func (s *DefineExprContext) GetParser() antlr.Parser { return s.parser }

func (s *DefineExprContext) Define() antlr.TerminalNode {
	return s.GetToken(PHPParserDefine, 0)
}

func (s *DefineExprContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *DefineExprContext) ConstantString() IConstantStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantStringContext)
}

func (s *DefineExprContext) Comma() antlr.TerminalNode {
	return s.GetToken(PHPParserComma, 0)
}

func (s *DefineExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DefineExprContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *DefineExprContext) Defined() antlr.TerminalNode {
	return s.GetToken(PHPParserDefined, 0)
}

func (s *DefineExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefineExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefineExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitDefineExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) DefineExpr() (localctx IDefineExprContext) {
	this := p
	_ = this

	localctx = NewDefineExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, PHPParserRULE_defineExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1503)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserDefine:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1491)
			p.Match(PHPParserDefine)
		}
		{
			p.SetState(1492)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1493)
			p.ConstantString()
		}
		{
			p.SetState(1494)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(1495)
			p.expression(0)
		}
		{
			p.SetState(1496)
			p.Match(PHPParserCloseRoundBracket)
		}

	case PHPParserDefined:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1498)
			p.Match(PHPParserDefined)
		}
		{
			p.SetState(1499)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1500)
			p.ConstantString()
		}
		{
			p.SetState(1501)
			p.Match(PHPParserCloseRoundBracket)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_variable
	return p
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) CopyFrom(ctx *VariableContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type NormalVariableContext struct {
	*VariableContext
}

func NewNormalVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NormalVariableContext {
	var p = new(NormalVariableContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *NormalVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NormalVariableContext) VarName() antlr.TerminalNode {
	return s.GetToken(PHPParserVarName, 0)
}

func (s *NormalVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitNormalVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

type DynamicVariableContext struct {
	*VariableContext
}

func NewDynamicVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DynamicVariableContext {
	var p = new(DynamicVariableContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *DynamicVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DynamicVariableContext) VarName() antlr.TerminalNode {
	return s.GetToken(PHPParserVarName, 0)
}

func (s *DynamicVariableContext) AllDollar() []antlr.TerminalNode {
	return s.GetTokens(PHPParserDollar)
}

func (s *DynamicVariableContext) Dollar(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserDollar, i)
}

func (s *DynamicVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitDynamicVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

type MemberCallVariableContext struct {
	*VariableContext
}

func NewMemberCallVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MemberCallVariableContext {
	var p = new(MemberCallVariableContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *MemberCallVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberCallVariableContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *MemberCallVariableContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MemberCallVariableContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *MemberCallVariableContext) AllDollar() []antlr.TerminalNode {
	return s.GetTokens(PHPParserDollar)
}

func (s *MemberCallVariableContext) Dollar(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserDollar, i)
}

func (s *MemberCallVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMemberCallVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Variable() (localctx IVariableContext) {
	this := p
	_ = this

	localctx = NewVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, PHPParserRULE_variable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1521)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) {
	case 1:
		localctx = NewNormalVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1505)
			p.Match(PHPParserVarName)
		}

	case 2:
		localctx = NewDynamicVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1507)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PHPParserDollar {
			{
				p.SetState(1506)
				p.Match(PHPParserDollar)
			}

			p.SetState(1509)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1511)
			p.Match(PHPParserVarName)
		}

	case 3:
		localctx = NewMemberCallVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1513)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PHPParserDollar {
			{
				p.SetState(1512)
				p.Match(PHPParserDollar)
			}

			p.SetState(1515)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1517)
			p.Match(PHPParserOpenCurlyBracket)
		}
		{
			p.SetState(1518)
			p.expression(0)
		}
		{
			p.SetState(1519)
			p.Match(PHPParserCloseCurlyBracket)
		}

	}

	return localctx
}

// IIncludeContext is an interface to support dynamic dispatch.
type IIncludeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncludeContext differentiates from other interfaces.
	IsIncludeContext()
}

type IncludeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncludeContext() *IncludeContext {
	var p = new(IncludeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_include
	return p
}

func (*IncludeContext) IsIncludeContext() {}

func NewIncludeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncludeContext {
	var p = new(IncludeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_include

	return p
}

func (s *IncludeContext) GetParser() antlr.Parser { return s.parser }

func (s *IncludeContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IncludeContext) Include() antlr.TerminalNode {
	return s.GetToken(PHPParserInclude, 0)
}

func (s *IncludeContext) IncludeOnce() antlr.TerminalNode {
	return s.GetToken(PHPParserIncludeOnce, 0)
}

func (s *IncludeContext) Require() antlr.TerminalNode {
	return s.GetToken(PHPParserRequire, 0)
}

func (s *IncludeContext) RequireOnce() antlr.TerminalNode {
	return s.GetToken(PHPParserRequireOnce, 0)
}

func (s *IncludeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncludeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncludeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitInclude(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Include() (localctx IIncludeContext) {
	this := p
	_ = this

	localctx = NewIncludeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, PHPParserRULE_include)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1523)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-92)) & ^0x3f) == 0 && ((int64(1)<<(_la-92))&201326595) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1524)
		p.expression(0)
	}

	return localctx
}

// ILeftArrayCreationContext is an interface to support dynamic dispatch.
type ILeftArrayCreationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftArrayCreationContext differentiates from other interfaces.
	IsLeftArrayCreationContext()
}

type LeftArrayCreationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftArrayCreationContext() *LeftArrayCreationContext {
	var p = new(LeftArrayCreationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_leftArrayCreation
	return p
}

func (*LeftArrayCreationContext) IsLeftArrayCreationContext() {}

func NewLeftArrayCreationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftArrayCreationContext {
	var p = new(LeftArrayCreationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_leftArrayCreation

	return p
}

func (s *LeftArrayCreationContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftArrayCreationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LeftArrayCreationContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *LeftArrayCreationContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *LeftArrayCreationContext) ArrayItemList() IArrayItemListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayItemListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayItemListContext)
}

func (s *LeftArrayCreationContext) ArrayDestructuring() IArrayDestructuringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayDestructuringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayDestructuringContext)
}

func (s *LeftArrayCreationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftArrayCreationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftArrayCreationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitLeftArrayCreation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) LeftArrayCreation() (localctx ILeftArrayCreationContext) {
	this := p
	_ = this

	localctx = NewLeftArrayCreationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, PHPParserRULE_leftArrayCreation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1534)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserLabel:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1526)
			p.Identifier()
		}
		{
			p.SetState(1527)
			p.Match(PHPParserOpenRoundBracket)
		}
		p.SetState(1529)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
			{
				p.SetState(1528)
				p.ArrayItemList()
			}

		}
		{
			p.SetState(1531)
			p.Match(PHPParserCloseRoundBracket)
		}

	case PHPParserOpenSquareBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1533)
			p.ArrayDestructuring()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssignableContext is an interface to support dynamic dispatch.
type IAssignableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignableContext differentiates from other interfaces.
	IsAssignableContext()
}

type AssignableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignableContext() *AssignableContext {
	var p = new(AssignableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_assignable
	return p
}

func (*AssignableContext) IsAssignableContext() {}

func NewAssignableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignableContext {
	var p = new(AssignableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_assignable

	return p
}

func (s *AssignableContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignableContext) Chain() IChainContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *AssignableContext) ArrayCreation() IArrayCreationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayCreationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayCreationContext)
}

func (s *AssignableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitAssignable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Assignable() (localctx IAssignableContext) {
	this := p
	_ = this

	localctx = NewAssignableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, PHPParserRULE_assignable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1538)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1536)
			p.Chain()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1537)
			p.ArrayCreation()
		}

	}

	return localctx
}

// IArrayCreationContext is an interface to support dynamic dispatch.
type IArrayCreationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayCreationContext differentiates from other interfaces.
	IsArrayCreationContext()
}

type ArrayCreationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayCreationContext() *ArrayCreationContext {
	var p = new(ArrayCreationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_arrayCreation
	return p
}

func (*ArrayCreationContext) IsArrayCreationContext() {}

func NewArrayCreationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayCreationContext {
	var p = new(ArrayCreationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_arrayCreation

	return p
}

func (s *ArrayCreationContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayCreationContext) Array() antlr.TerminalNode {
	return s.GetToken(PHPParserArray, 0)
}

func (s *ArrayCreationContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *ArrayCreationContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *ArrayCreationContext) ArrayItemList() IArrayItemListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayItemListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayItemListContext)
}

func (s *ArrayCreationContext) List() antlr.TerminalNode {
	return s.GetToken(PHPParserList, 0)
}

func (s *ArrayCreationContext) OpenSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenSquareBracket, 0)
}

func (s *ArrayCreationContext) CloseSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseSquareBracket, 0)
}

func (s *ArrayCreationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayCreationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayCreationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitArrayCreation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ArrayCreation() (localctx IArrayCreationContext) {
	this := p
	_ = this

	localctx = NewArrayCreationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, PHPParserRULE_arrayCreation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1557)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserArray:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1540)
			p.Match(PHPParserArray)
		}
		{
			p.SetState(1541)
			p.Match(PHPParserOpenRoundBracket)
		}
		p.SetState(1543)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
			{
				p.SetState(1542)
				p.ArrayItemList()
			}

		}
		{
			p.SetState(1545)
			p.Match(PHPParserCloseRoundBracket)
		}

	case PHPParserList:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1546)
			p.Match(PHPParserList)
		}
		{
			p.SetState(1547)
			p.Match(PHPParserOpenRoundBracket)
		}
		p.SetState(1549)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
			{
				p.SetState(1548)
				p.ArrayItemList()
			}

		}
		{
			p.SetState(1551)
			p.Match(PHPParserCloseRoundBracket)
		}

	case PHPParserOpenSquareBracket:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1552)
			p.Match(PHPParserOpenSquareBracket)
		}
		p.SetState(1554)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
			{
				p.SetState(1553)
				p.ArrayItemList()
			}

		}
		{
			p.SetState(1556)
			p.Match(PHPParserCloseSquareBracket)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArrayDestructuringContext is an interface to support dynamic dispatch.
type IArrayDestructuringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayDestructuringContext differentiates from other interfaces.
	IsArrayDestructuringContext()
}

type ArrayDestructuringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayDestructuringContext() *ArrayDestructuringContext {
	var p = new(ArrayDestructuringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_arrayDestructuring
	return p
}

func (*ArrayDestructuringContext) IsArrayDestructuringContext() {}

func NewArrayDestructuringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayDestructuringContext {
	var p = new(ArrayDestructuringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_arrayDestructuring

	return p
}

func (s *ArrayDestructuringContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayDestructuringContext) OpenSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenSquareBracket, 0)
}

func (s *ArrayDestructuringContext) AllIndexedDestructItem() []IIndexedDestructItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexedDestructItemContext); ok {
			len++
		}
	}

	tst := make([]IIndexedDestructItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexedDestructItemContext); ok {
			tst[i] = t.(IIndexedDestructItemContext)
			i++
		}
	}

	return tst
}

func (s *ArrayDestructuringContext) IndexedDestructItem(i int) IIndexedDestructItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexedDestructItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexedDestructItemContext)
}

func (s *ArrayDestructuringContext) CloseSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseSquareBracket, 0)
}

func (s *ArrayDestructuringContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *ArrayDestructuringContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *ArrayDestructuringContext) AllKeyedDestructItem() []IKeyedDestructItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IKeyedDestructItemContext); ok {
			len++
		}
	}

	tst := make([]IKeyedDestructItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IKeyedDestructItemContext); ok {
			tst[i] = t.(IKeyedDestructItemContext)
			i++
		}
	}

	return tst
}

func (s *ArrayDestructuringContext) KeyedDestructItem(i int) IKeyedDestructItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyedDestructItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyedDestructItemContext)
}

func (s *ArrayDestructuringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayDestructuringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayDestructuringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitArrayDestructuring(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ArrayDestructuring() (localctx IArrayDestructuringContext) {
	this := p
	_ = this

	localctx = NewArrayDestructuringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, PHPParserRULE_arrayDestructuring)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1604)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1559)
			p.Match(PHPParserOpenSquareBracket)
		}
		p.SetState(1563)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserComma {
			{
				p.SetState(1560)
				p.Match(PHPParserComma)
			}

			p.SetState(1565)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1566)
			p.IndexedDestructItem()
		}
		p.SetState(1575)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(1568)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == PHPParserComma {
					{
						p.SetState(1567)
						p.Match(PHPParserComma)
					}

					p.SetState(1570)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1572)
					p.IndexedDestructItem()
				}

			}
			p.SetState(1577)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext())
		}
		p.SetState(1581)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserComma {
			{
				p.SetState(1578)
				p.Match(PHPParserComma)
			}

			p.SetState(1583)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1584)
			p.Match(PHPParserCloseSquareBracket)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1586)
			p.Match(PHPParserOpenSquareBracket)
		}
		{
			p.SetState(1587)
			p.KeyedDestructItem()
		}
		p.SetState(1596)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(1589)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == PHPParserComma {
					{
						p.SetState(1588)
						p.Match(PHPParserComma)
					}

					p.SetState(1591)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1593)
					p.KeyedDestructItem()
				}

			}
			p.SetState(1598)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())
		}
		p.SetState(1600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserComma {
			{
				p.SetState(1599)
				p.Match(PHPParserComma)
			}

		}
		{
			p.SetState(1602)
			p.Match(PHPParserCloseSquareBracket)
		}

	}

	return localctx
}

// IIndexedDestructItemContext is an interface to support dynamic dispatch.
type IIndexedDestructItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexedDestructItemContext differentiates from other interfaces.
	IsIndexedDestructItemContext()
}

type IndexedDestructItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexedDestructItemContext() *IndexedDestructItemContext {
	var p = new(IndexedDestructItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_indexedDestructItem
	return p
}

func (*IndexedDestructItemContext) IsIndexedDestructItemContext() {}

func NewIndexedDestructItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexedDestructItemContext {
	var p = new(IndexedDestructItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_indexedDestructItem

	return p
}

func (s *IndexedDestructItemContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexedDestructItemContext) Chain() IChainContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *IndexedDestructItemContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *IndexedDestructItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexedDestructItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexedDestructItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIndexedDestructItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) IndexedDestructItem() (localctx IIndexedDestructItemContext) {
	this := p
	_ = this

	localctx = NewIndexedDestructItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, PHPParserRULE_indexedDestructItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1607)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAmpersand {
		{
			p.SetState(1606)
			p.Match(PHPParserAmpersand)
		}

	}
	{
		p.SetState(1609)
		p.Chain()
	}

	return localctx
}

// IKeyedDestructItemContext is an interface to support dynamic dispatch.
type IKeyedDestructItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyedDestructItemContext differentiates from other interfaces.
	IsKeyedDestructItemContext()
}

type KeyedDestructItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyedDestructItemContext() *KeyedDestructItemContext {
	var p = new(KeyedDestructItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_keyedDestructItem
	return p
}

func (*KeyedDestructItemContext) IsKeyedDestructItemContext() {}

func NewKeyedDestructItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyedDestructItemContext {
	var p = new(KeyedDestructItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_keyedDestructItem

	return p
}

func (s *KeyedDestructItemContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyedDestructItemContext) Chain() IChainContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *KeyedDestructItemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *KeyedDestructItemContext) DoubleArrow() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleArrow, 0)
}

func (s *KeyedDestructItemContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *KeyedDestructItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyedDestructItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyedDestructItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitKeyedDestructItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) KeyedDestructItem() (localctx IKeyedDestructItemContext) {
	this := p
	_ = this

	localctx = NewKeyedDestructItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, PHPParserRULE_keyedDestructItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1614)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1611)
			p.expression(0)
		}
		{
			p.SetState(1612)
			p.Match(PHPParserDoubleArrow)
		}

	}
	p.SetState(1617)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAmpersand {
		{
			p.SetState(1616)
			p.Match(PHPParserAmpersand)
		}

	}
	{
		p.SetState(1619)
		p.Chain()
	}

	return localctx
}

// ILambdaFunctionExprContext is an interface to support dynamic dispatch.
type ILambdaFunctionExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaFunctionExprContext differentiates from other interfaces.
	IsLambdaFunctionExprContext()
}

type LambdaFunctionExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaFunctionExprContext() *LambdaFunctionExprContext {
	var p = new(LambdaFunctionExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_lambdaFunctionExpr
	return p
}

func (*LambdaFunctionExprContext) IsLambdaFunctionExprContext() {}

func NewLambdaFunctionExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaFunctionExprContext {
	var p = new(LambdaFunctionExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_lambdaFunctionExpr

	return p
}

func (s *LambdaFunctionExprContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaFunctionExprContext) Function_() antlr.TerminalNode {
	return s.GetToken(PHPParserFunction_, 0)
}

func (s *LambdaFunctionExprContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *LambdaFunctionExprContext) FormalParameterList() IFormalParameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *LambdaFunctionExprContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *LambdaFunctionExprContext) BlockStatement() IBlockStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *LambdaFunctionExprContext) Static() antlr.TerminalNode {
	return s.GetToken(PHPParserStatic, 0)
}

func (s *LambdaFunctionExprContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *LambdaFunctionExprContext) LambdaFunctionUseVars() ILambdaFunctionUseVarsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaFunctionUseVarsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaFunctionUseVarsContext)
}

func (s *LambdaFunctionExprContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *LambdaFunctionExprContext) TypeHint() ITypeHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeHintContext)
}

func (s *LambdaFunctionExprContext) LambdaFn() antlr.TerminalNode {
	return s.GetToken(PHPParserLambdaFn, 0)
}

func (s *LambdaFunctionExprContext) DoubleArrow() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleArrow, 0)
}

func (s *LambdaFunctionExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LambdaFunctionExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaFunctionExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaFunctionExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitLambdaFunctionExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) LambdaFunctionExpr() (localctx ILambdaFunctionExprContext) {
	this := p
	_ = this

	localctx = NewLambdaFunctionExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, PHPParserRULE_lambdaFunctionExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1647)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserFunction_, PHPParserStatic:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1622)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserStatic {
			{
				p.SetState(1621)
				p.Match(PHPParserStatic)
			}

		}
		{
			p.SetState(1624)
			p.Match(PHPParserFunction_)
		}
		p.SetState(1626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserAmpersand {
			{
				p.SetState(1625)
				p.Match(PHPParserAmpersand)
			}

		}
		{
			p.SetState(1628)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1629)
			p.FormalParameterList()
		}
		{
			p.SetState(1630)
			p.Match(PHPParserCloseRoundBracket)
		}
		p.SetState(1632)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserUse {
			{
				p.SetState(1631)
				p.LambdaFunctionUseVars()
			}

		}
		p.SetState(1636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserColon {
			{
				p.SetState(1634)
				p.Match(PHPParserColon)
			}
			{
				p.SetState(1635)
				p.typeHint(0)
			}

		}
		{
			p.SetState(1638)
			p.BlockStatement()
		}

	case PHPParserLambdaFn:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1640)
			p.Match(PHPParserLambdaFn)
		}
		{
			p.SetState(1641)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(1642)
			p.FormalParameterList()
		}
		{
			p.SetState(1643)
			p.Match(PHPParserCloseRoundBracket)
		}
		{
			p.SetState(1644)
			p.Match(PHPParserDoubleArrow)
		}
		{
			p.SetState(1645)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMatchExprContext is an interface to support dynamic dispatch.
type IMatchExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchExprContext differentiates from other interfaces.
	IsMatchExprContext()
}

type MatchExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchExprContext() *MatchExprContext {
	var p = new(MatchExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_matchExpr
	return p
}

func (*MatchExprContext) IsMatchExprContext() {}

func NewMatchExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchExprContext {
	var p = new(MatchExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_matchExpr

	return p
}

func (s *MatchExprContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchExprContext) Match_() antlr.TerminalNode {
	return s.GetToken(PHPParserMatch_, 0)
}

func (s *MatchExprContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *MatchExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchExprContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *MatchExprContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *MatchExprContext) AllMatchItem() []IMatchItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchItemContext); ok {
			len++
		}
	}

	tst := make([]IMatchItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchItemContext); ok {
			tst[i] = t.(IMatchItemContext)
			i++
		}
	}

	return tst
}

func (s *MatchExprContext) MatchItem(i int) IMatchItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchItemContext)
}

func (s *MatchExprContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *MatchExprContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *MatchExprContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *MatchExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMatchExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) MatchExpr() (localctx IMatchExprContext) {
	this := p
	_ = this

	localctx = NewMatchExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, PHPParserRULE_matchExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1649)
		p.Match(PHPParserMatch_)
	}
	{
		p.SetState(1650)
		p.Match(PHPParserOpenRoundBracket)
	}
	{
		p.SetState(1651)
		p.expression(0)
	}
	{
		p.SetState(1652)
		p.Match(PHPParserCloseRoundBracket)
	}
	{
		p.SetState(1653)
		p.Match(PHPParserOpenCurlyBracket)
	}
	{
		p.SetState(1654)
		p.MatchItem()
	}
	p.SetState(1659)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1655)
				p.Match(PHPParserComma)
			}
			{
				p.SetState(1656)
				p.MatchItem()
			}

		}
		p.SetState(1661)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())
	}
	p.SetState(1663)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserComma {
		{
			p.SetState(1662)
			p.Match(PHPParserComma)
		}

	}
	{
		p.SetState(1665)
		p.Match(PHPParserCloseCurlyBracket)
	}

	return localctx
}

// IMatchItemContext is an interface to support dynamic dispatch.
type IMatchItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchItemContext differentiates from other interfaces.
	IsMatchItemContext()
}

type MatchItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchItemContext() *MatchItemContext {
	var p = new(MatchItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_matchItem
	return p
}

func (*MatchItemContext) IsMatchItemContext() {}

func NewMatchItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchItemContext {
	var p = new(MatchItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_matchItem

	return p
}

func (s *MatchItemContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchItemContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *MatchItemContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchItemContext) DoubleArrow() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleArrow, 0)
}

func (s *MatchItemContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *MatchItemContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *MatchItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMatchItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) MatchItem() (localctx IMatchItemContext) {
	this := p
	_ = this

	localctx = NewMatchItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, PHPParserRULE_matchItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1667)
		p.expression(0)
	}
	p.SetState(1672)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(1668)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(1669)
			p.expression(0)
		}

		p.SetState(1674)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1675)
		p.Match(PHPParserDoubleArrow)
	}
	{
		p.SetState(1676)
		p.expression(0)
	}

	return localctx
}

// INewExprContext is an interface to support dynamic dispatch.
type INewExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewExprContext differentiates from other interfaces.
	IsNewExprContext()
}

type NewExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewExprContext() *NewExprContext {
	var p = new(NewExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_newExpr
	return p
}

func (*NewExprContext) IsNewExprContext() {}

func NewNewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewExprContext {
	var p = new(NewExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_newExpr

	return p
}

func (s *NewExprContext) GetParser() antlr.Parser { return s.parser }

func (s *NewExprContext) New() antlr.TerminalNode {
	return s.GetToken(PHPParserNew, 0)
}

func (s *NewExprContext) AnonymousClass() IAnonymousClassContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnonymousClassContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnonymousClassContext)
}

func (s *NewExprContext) TypeRef() ITypeRefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeRefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeRefContext)
}

func (s *NewExprContext) Arguments() IArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *NewExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitNewExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) NewExpr() (localctx INewExprContext) {
	this := p
	_ = this

	localctx = NewNewExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, PHPParserRULE_newExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1685)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1678)
			p.Match(PHPParserNew)
		}
		{
			p.SetState(1679)
			p.AnonymousClass()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1680)
			p.Match(PHPParserNew)
		}
		{
			p.SetState(1681)
			p.TypeRef()
		}
		p.SetState(1683)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1682)
				p.Arguments()
			}

		}

	}

	return localctx
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_assignmentOperator
	return p
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentOperatorContext) Eq() antlr.TerminalNode {
	return s.GetToken(PHPParserEq, 0)
}

func (s *AssignmentOperatorContext) PlusEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserPlusEqual, 0)
}

func (s *AssignmentOperatorContext) MinusEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserMinusEqual, 0)
}

func (s *AssignmentOperatorContext) MulEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserMulEqual, 0)
}

func (s *AssignmentOperatorContext) PowEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserPowEqual, 0)
}

func (s *AssignmentOperatorContext) DivEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserDivEqual, 0)
}

func (s *AssignmentOperatorContext) Concaequal() antlr.TerminalNode {
	return s.GetToken(PHPParserConcaequal, 0)
}

func (s *AssignmentOperatorContext) ModEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserModEqual, 0)
}

func (s *AssignmentOperatorContext) AndEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserAndEqual, 0)
}

func (s *AssignmentOperatorContext) OrEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserOrEqual, 0)
}

func (s *AssignmentOperatorContext) XorEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserXorEqual, 0)
}

func (s *AssignmentOperatorContext) ShiftLeftEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserShiftLeftEqual, 0)
}

func (s *AssignmentOperatorContext) ShiftRightEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserShiftRightEqual, 0)
}

func (s *AssignmentOperatorContext) NullCoalescingEqual() antlr.TerminalNode {
	return s.GetToken(PHPParserNullCoalescingEqual, 0)
}

func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitAssignmentOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	this := p
	_ = this

	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, PHPParserRULE_assignmentOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1687)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-175)) & ^0x3f) == 0 && ((int64(1)<<(_la-175))&562949953495031) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IYieldExpressionContext is an interface to support dynamic dispatch.
type IYieldExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldExpressionContext differentiates from other interfaces.
	IsYieldExpressionContext()
}

type YieldExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldExpressionContext() *YieldExpressionContext {
	var p = new(YieldExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_yieldExpression
	return p
}

func (*YieldExpressionContext) IsYieldExpressionContext() {}

func NewYieldExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldExpressionContext {
	var p = new(YieldExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_yieldExpression

	return p
}

func (s *YieldExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldExpressionContext) Yield() antlr.TerminalNode {
	return s.GetToken(PHPParserYield, 0)
}

func (s *YieldExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *YieldExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *YieldExpressionContext) From() antlr.TerminalNode {
	return s.GetToken(PHPParserFrom, 0)
}

func (s *YieldExpressionContext) DoubleArrow() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleArrow, 0)
}

func (s *YieldExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitYieldExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) YieldExpression() (localctx IYieldExpressionContext) {
	this := p
	_ = this

	localctx = NewYieldExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, PHPParserRULE_yieldExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1689)
		p.Match(PHPParserYield)
	}
	p.SetState(1697)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1690)
			p.expression(0)
		}
		p.SetState(1693)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserDoubleArrow {
			{
				p.SetState(1691)
				p.Match(PHPParserDoubleArrow)
			}
			{
				p.SetState(1692)
				p.expression(0)
			}

		}

	case 2:
		{
			p.SetState(1695)
			p.Match(PHPParserFrom)
		}
		{
			p.SetState(1696)
			p.expression(0)
		}

	}

	return localctx
}

// IArrayItemListContext is an interface to support dynamic dispatch.
type IArrayItemListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayItemListContext differentiates from other interfaces.
	IsArrayItemListContext()
}

type ArrayItemListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayItemListContext() *ArrayItemListContext {
	var p = new(ArrayItemListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_arrayItemList
	return p
}

func (*ArrayItemListContext) IsArrayItemListContext() {}

func NewArrayItemListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayItemListContext {
	var p = new(ArrayItemListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_arrayItemList

	return p
}

func (s *ArrayItemListContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayItemListContext) AllArrayItem() []IArrayItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArrayItemContext); ok {
			len++
		}
	}

	tst := make([]IArrayItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArrayItemContext); ok {
			tst[i] = t.(IArrayItemContext)
			i++
		}
	}

	return tst
}

func (s *ArrayItemListContext) ArrayItem(i int) IArrayItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayItemContext)
}

func (s *ArrayItemListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *ArrayItemListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *ArrayItemListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayItemListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayItemListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitArrayItemList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ArrayItemList() (localctx IArrayItemListContext) {
	this := p
	_ = this

	localctx = NewArrayItemListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, PHPParserRULE_arrayItemList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1699)
		p.ArrayItem()
	}
	p.SetState(1704)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1700)
				p.Match(PHPParserComma)
			}
			{
				p.SetState(1701)
				p.ArrayItem()
			}

		}
		p.SetState(1706)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())
	}
	p.SetState(1708)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1707)
			p.Match(PHPParserComma)
		}

	}

	return localctx
}

// IArrayItemContext is an interface to support dynamic dispatch.
type IArrayItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayItemContext differentiates from other interfaces.
	IsArrayItemContext()
}

type ArrayItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayItemContext() *ArrayItemContext {
	var p = new(ArrayItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_arrayItem
	return p
}

func (*ArrayItemContext) IsArrayItemContext() {}

func NewArrayItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayItemContext {
	var p = new(ArrayItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_arrayItem

	return p
}

func (s *ArrayItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayItemContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ArrayItemContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayItemContext) DoubleArrow() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleArrow, 0)
}

func (s *ArrayItemContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *ArrayItemContext) Chain() IChainContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *ArrayItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitArrayItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ArrayItem() (localctx IArrayItemContext) {
	this := p
	_ = this

	localctx = NewArrayItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, PHPParserRULE_arrayItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1722)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1710)
			p.expression(0)
		}
		p.SetState(1713)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserDoubleArrow {
			{
				p.SetState(1711)
				p.Match(PHPParserDoubleArrow)
			}
			{
				p.SetState(1712)
				p.expression(0)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1718)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1715)
				p.expression(0)
			}
			{
				p.SetState(1716)
				p.Match(PHPParserDoubleArrow)
			}

		}
		{
			p.SetState(1720)
			p.Match(PHPParserAmpersand)
		}
		{
			p.SetState(1721)
			p.Chain()
		}

	}

	return localctx
}

// ILambdaFunctionUseVarsContext is an interface to support dynamic dispatch.
type ILambdaFunctionUseVarsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaFunctionUseVarsContext differentiates from other interfaces.
	IsLambdaFunctionUseVarsContext()
}

type LambdaFunctionUseVarsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaFunctionUseVarsContext() *LambdaFunctionUseVarsContext {
	var p = new(LambdaFunctionUseVarsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_lambdaFunctionUseVars
	return p
}

func (*LambdaFunctionUseVarsContext) IsLambdaFunctionUseVarsContext() {}

func NewLambdaFunctionUseVarsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaFunctionUseVarsContext {
	var p = new(LambdaFunctionUseVarsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_lambdaFunctionUseVars

	return p
}

func (s *LambdaFunctionUseVarsContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaFunctionUseVarsContext) Use() antlr.TerminalNode {
	return s.GetToken(PHPParserUse, 0)
}

func (s *LambdaFunctionUseVarsContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *LambdaFunctionUseVarsContext) AllLambdaFunctionUseVar() []ILambdaFunctionUseVarContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILambdaFunctionUseVarContext); ok {
			len++
		}
	}

	tst := make([]ILambdaFunctionUseVarContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILambdaFunctionUseVarContext); ok {
			tst[i] = t.(ILambdaFunctionUseVarContext)
			i++
		}
	}

	return tst
}

func (s *LambdaFunctionUseVarsContext) LambdaFunctionUseVar(i int) ILambdaFunctionUseVarContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaFunctionUseVarContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaFunctionUseVarContext)
}

func (s *LambdaFunctionUseVarsContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *LambdaFunctionUseVarsContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *LambdaFunctionUseVarsContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *LambdaFunctionUseVarsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaFunctionUseVarsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaFunctionUseVarsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitLambdaFunctionUseVars(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) LambdaFunctionUseVars() (localctx ILambdaFunctionUseVarsContext) {
	this := p
	_ = this

	localctx = NewLambdaFunctionUseVarsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, PHPParserRULE_lambdaFunctionUseVars)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1724)
		p.Match(PHPParserUse)
	}
	{
		p.SetState(1725)
		p.Match(PHPParserOpenRoundBracket)
	}
	{
		p.SetState(1726)
		p.LambdaFunctionUseVar()
	}
	p.SetState(1731)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(1727)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(1728)
			p.LambdaFunctionUseVar()
		}

		p.SetState(1733)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1734)
		p.Match(PHPParserCloseRoundBracket)
	}

	return localctx
}

// ILambdaFunctionUseVarContext is an interface to support dynamic dispatch.
type ILambdaFunctionUseVarContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaFunctionUseVarContext differentiates from other interfaces.
	IsLambdaFunctionUseVarContext()
}

type LambdaFunctionUseVarContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaFunctionUseVarContext() *LambdaFunctionUseVarContext {
	var p = new(LambdaFunctionUseVarContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_lambdaFunctionUseVar
	return p
}

func (*LambdaFunctionUseVarContext) IsLambdaFunctionUseVarContext() {}

func NewLambdaFunctionUseVarContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaFunctionUseVarContext {
	var p = new(LambdaFunctionUseVarContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_lambdaFunctionUseVar

	return p
}

func (s *LambdaFunctionUseVarContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaFunctionUseVarContext) VarName() antlr.TerminalNode {
	return s.GetToken(PHPParserVarName, 0)
}

func (s *LambdaFunctionUseVarContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *LambdaFunctionUseVarContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaFunctionUseVarContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaFunctionUseVarContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitLambdaFunctionUseVar(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) LambdaFunctionUseVar() (localctx ILambdaFunctionUseVarContext) {
	this := p
	_ = this

	localctx = NewLambdaFunctionUseVarContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, PHPParserRULE_lambdaFunctionUseVar)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1737)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAmpersand {
		{
			p.SetState(1736)
			p.Match(PHPParserAmpersand)
		}

	}
	{
		p.SetState(1739)
		p.Match(PHPParserVarName)
	}

	return localctx
}

// IQualifiedStaticTypeRefContext is an interface to support dynamic dispatch.
type IQualifiedStaticTypeRefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedStaticTypeRefContext differentiates from other interfaces.
	IsQualifiedStaticTypeRefContext()
}

type QualifiedStaticTypeRefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedStaticTypeRefContext() *QualifiedStaticTypeRefContext {
	var p = new(QualifiedStaticTypeRefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_qualifiedStaticTypeRef
	return p
}

func (*QualifiedStaticTypeRefContext) IsQualifiedStaticTypeRefContext() {}

func NewQualifiedStaticTypeRefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedStaticTypeRefContext {
	var p = new(QualifiedStaticTypeRefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_qualifiedStaticTypeRef

	return p
}

func (s *QualifiedStaticTypeRefContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedStaticTypeRefContext) QualifiedNamespaceName() IQualifiedNamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameContext)
}

func (s *QualifiedStaticTypeRefContext) Static() antlr.TerminalNode {
	return s.GetToken(PHPParserStatic, 0)
}

func (s *QualifiedStaticTypeRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedStaticTypeRefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedStaticTypeRefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitQualifiedStaticTypeRef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) QualifiedStaticTypeRef() (localctx IQualifiedStaticTypeRefContext) {
	this := p
	_ = this

	localctx = NewQualifiedStaticTypeRefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, PHPParserRULE_qualifiedStaticTypeRef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1743)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1741)
			p.QualifiedNamespaceName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1742)
			p.Match(PHPParserStatic)
		}

	}

	return localctx
}

// ITypeRefContext is an interface to support dynamic dispatch.
type ITypeRefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeRefContext differentiates from other interfaces.
	IsTypeRefContext()
}

type TypeRefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeRefContext() *TypeRefContext {
	var p = new(TypeRefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_typeRef
	return p
}

func (*TypeRefContext) IsTypeRefContext() {}

func NewTypeRefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeRefContext {
	var p = new(TypeRefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_typeRef

	return p
}

func (s *TypeRefContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeRefContext) QualifiedNamespaceName() IQualifiedNamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameContext)
}

func (s *TypeRefContext) IndirectTypeRef() IIndirectTypeRefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndirectTypeRefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndirectTypeRefContext)
}

func (s *TypeRefContext) PrimitiveType() IPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *TypeRefContext) Static() antlr.TerminalNode {
	return s.GetToken(PHPParserStatic, 0)
}

func (s *TypeRefContext) AnonymousClass() IAnonymousClassContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnonymousClassContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnonymousClassContext)
}

func (s *TypeRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeRefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeRefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitTypeRef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) TypeRef() (localctx ITypeRefContext) {
	this := p
	_ = this

	localctx = NewTypeRefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, PHPParserRULE_typeRef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1752)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1747)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1745)
				p.QualifiedNamespaceName()
			}

		case 2:
			{
				p.SetState(1746)
				p.IndirectTypeRef()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1749)
			p.PrimitiveType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1750)
			p.Match(PHPParserStatic)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1751)
			p.AnonymousClass()
		}

	}

	return localctx
}

// IAnonymousClassContext is an interface to support dynamic dispatch.
type IAnonymousClassContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnonymousClassContext differentiates from other interfaces.
	IsAnonymousClassContext()
}

type AnonymousClassContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnonymousClassContext() *AnonymousClassContext {
	var p = new(AnonymousClassContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_anonymousClass
	return p
}

func (*AnonymousClassContext) IsAnonymousClassContext() {}

func NewAnonymousClassContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnonymousClassContext {
	var p = new(AnonymousClassContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_anonymousClass

	return p
}

func (s *AnonymousClassContext) GetParser() antlr.Parser { return s.parser }

func (s *AnonymousClassContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *AnonymousClassContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *AnonymousClassContext) ClassEntryType() IClassEntryTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassEntryTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassEntryTypeContext)
}

func (s *AnonymousClassContext) Interface() antlr.TerminalNode {
	return s.GetToken(PHPParserInterface, 0)
}

func (s *AnonymousClassContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AnonymousClassContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *AnonymousClassContext) Private() antlr.TerminalNode {
	return s.GetToken(PHPParserPrivate, 0)
}

func (s *AnonymousClassContext) Modifier() IModifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModifierContext)
}

func (s *AnonymousClassContext) Partial() antlr.TerminalNode {
	return s.GetToken(PHPParserPartial, 0)
}

func (s *AnonymousClassContext) Arguments() IArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *AnonymousClassContext) AllClassStatement() []IClassStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClassStatementContext); ok {
			len++
		}
	}

	tst := make([]IClassStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClassStatementContext); ok {
			tst[i] = t.(IClassStatementContext)
			i++
		}
	}

	return tst
}

func (s *AnonymousClassContext) ClassStatement(i int) IClassStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassStatementContext)
}

func (s *AnonymousClassContext) Extends() antlr.TerminalNode {
	return s.GetToken(PHPParserExtends, 0)
}

func (s *AnonymousClassContext) QualifiedStaticTypeRef() IQualifiedStaticTypeRefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedStaticTypeRefContext)
}

func (s *AnonymousClassContext) Implements() antlr.TerminalNode {
	return s.GetToken(PHPParserImplements, 0)
}

func (s *AnonymousClassContext) InterfaceList() IInterfaceListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceListContext)
}

func (s *AnonymousClassContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnonymousClassContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnonymousClassContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitAnonymousClass(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) AnonymousClass() (localctx IAnonymousClassContext) {
	this := p
	_ = this

	localctx = NewAnonymousClassContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, PHPParserRULE_anonymousClass)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1755)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAttributeStart {
		{
			p.SetState(1754)
			p.Attributes()
		}

	}
	p.SetState(1758)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserPrivate {
		{
			p.SetState(1757)
			p.Match(PHPParserPrivate)
		}

	}
	p.SetState(1761)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserAbstract || _la == PHPParserFinal {
		{
			p.SetState(1760)
			p.Modifier()
		}

	}
	p.SetState(1764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserPartial {
		{
			p.SetState(1763)
			p.Match(PHPParserPartial)
		}

	}
	p.SetState(1781)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserClass, PHPParserTrait:
		{
			p.SetState(1766)
			p.ClassEntryType()
		}
		p.SetState(1769)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserExtends {
			{
				p.SetState(1767)
				p.Match(PHPParserExtends)
			}
			{
				p.SetState(1768)
				p.QualifiedStaticTypeRef()
			}

		}
		p.SetState(1773)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserImplements {
			{
				p.SetState(1771)
				p.Match(PHPParserImplements)
			}
			{
				p.SetState(1772)
				p.InterfaceList()
			}

		}

	case PHPParserInterface:
		{
			p.SetState(1775)
			p.Match(PHPParserInterface)
		}
		{
			p.SetState(1776)
			p.Identifier()
		}
		p.SetState(1779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserExtends {
			{
				p.SetState(1777)
				p.Match(PHPParserExtends)
			}
			{
				p.SetState(1778)
				p.InterfaceList()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserOpenRoundBracket {
		{
			p.SetState(1783)
			p.Arguments()
		}

	}
	{
		p.SetState(1786)
		p.Match(PHPParserOpenCurlyBracket)
	}
	p.SetState(1790)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&72083982316994560) != 0 || (int64((_la-81)) & ^0x3f) == 0 && ((int64(1)<<(_la-81))&6757727313330209) != 0 {
		{
			p.SetState(1787)
			p.ClassStatement()
		}

		p.SetState(1792)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1793)
		p.Match(PHPParserCloseCurlyBracket)
	}

	return localctx
}

// IIndirectTypeRefContext is an interface to support dynamic dispatch.
type IIndirectTypeRefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndirectTypeRefContext differentiates from other interfaces.
	IsIndirectTypeRefContext()
}

type IndirectTypeRefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndirectTypeRefContext() *IndirectTypeRefContext {
	var p = new(IndirectTypeRefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_indirectTypeRef
	return p
}

func (*IndirectTypeRefContext) IsIndirectTypeRefContext() {}

func NewIndirectTypeRefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndirectTypeRefContext {
	var p = new(IndirectTypeRefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_indirectTypeRef

	return p
}

func (s *IndirectTypeRefContext) GetParser() antlr.Parser { return s.parser }

func (s *IndirectTypeRefContext) ChainBase() IChainBaseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainBaseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainBaseContext)
}

func (s *IndirectTypeRefContext) AllObjectOperator() []antlr.TerminalNode {
	return s.GetTokens(PHPParserObjectOperator)
}

func (s *IndirectTypeRefContext) ObjectOperator(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserObjectOperator, i)
}

func (s *IndirectTypeRefContext) AllKeyedFieldName() []IKeyedFieldNameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IKeyedFieldNameContext); ok {
			len++
		}
	}

	tst := make([]IKeyedFieldNameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IKeyedFieldNameContext); ok {
			tst[i] = t.(IKeyedFieldNameContext)
			i++
		}
	}

	return tst
}

func (s *IndirectTypeRefContext) KeyedFieldName(i int) IKeyedFieldNameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyedFieldNameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyedFieldNameContext)
}

func (s *IndirectTypeRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndirectTypeRefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndirectTypeRefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIndirectTypeRef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) IndirectTypeRef() (localctx IIndirectTypeRefContext) {
	this := p
	_ = this

	localctx = NewIndirectTypeRefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, PHPParserRULE_indirectTypeRef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1795)
		p.ChainBase()
	}
	p.SetState(1800)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1796)
				p.Match(PHPParserObjectOperator)
			}
			{
				p.SetState(1797)
				p.KeyedFieldName()
			}

		}
		p.SetState(1802)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())
	}

	return localctx
}

// IQualifiedNamespaceNameContext is an interface to support dynamic dispatch.
type IQualifiedNamespaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedNamespaceNameContext differentiates from other interfaces.
	IsQualifiedNamespaceNameContext()
}

type QualifiedNamespaceNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedNamespaceNameContext() *QualifiedNamespaceNameContext {
	var p = new(QualifiedNamespaceNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_qualifiedNamespaceName
	return p
}

func (*QualifiedNamespaceNameContext) IsQualifiedNamespaceNameContext() {}

func NewQualifiedNamespaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedNamespaceNameContext {
	var p = new(QualifiedNamespaceNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_qualifiedNamespaceName

	return p
}

func (s *QualifiedNamespaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedNamespaceNameContext) NamespaceNameList() INamespaceNameListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceNameListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceNameListContext)
}

func (s *QualifiedNamespaceNameContext) Namespace() antlr.TerminalNode {
	return s.GetToken(PHPParserNamespace, 0)
}

func (s *QualifiedNamespaceNameContext) NamespaceSeparator() antlr.TerminalNode {
	return s.GetToken(PHPParserNamespaceSeparator, 0)
}

func (s *QualifiedNamespaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedNamespaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedNamespaceNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitQualifiedNamespaceName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) QualifiedNamespaceName() (localctx IQualifiedNamespaceNameContext) {
	this := p
	_ = this

	localctx = NewQualifiedNamespaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, PHPParserRULE_qualifiedNamespaceName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1804)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1803)
			p.Match(PHPParserNamespace)
		}

	}
	p.SetState(1807)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserNamespaceSeparator {
		{
			p.SetState(1806)
			p.Match(PHPParserNamespaceSeparator)
		}

	}
	{
		p.SetState(1809)
		p.NamespaceNameList()
	}

	return localctx
}

// INamespaceNameListContext is an interface to support dynamic dispatch.
type INamespaceNameListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceNameListContext differentiates from other interfaces.
	IsNamespaceNameListContext()
}

type NamespaceNameListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceNameListContext() *NamespaceNameListContext {
	var p = new(NamespaceNameListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_namespaceNameList
	return p
}

func (*NamespaceNameListContext) IsNamespaceNameListContext() {}

func NewNamespaceNameListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceNameListContext {
	var p = new(NamespaceNameListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_namespaceNameList

	return p
}

func (s *NamespaceNameListContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceNameListContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *NamespaceNameListContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamespaceNameListContext) AllNamespaceSeparator() []antlr.TerminalNode {
	return s.GetTokens(PHPParserNamespaceSeparator)
}

func (s *NamespaceNameListContext) NamespaceSeparator(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserNamespaceSeparator, i)
}

func (s *NamespaceNameListContext) NamespaceNameTail() INamespaceNameTailContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceNameTailContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceNameTailContext)
}

func (s *NamespaceNameListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceNameListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceNameListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitNamespaceNameList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) NamespaceNameList() (localctx INamespaceNameListContext) {
	this := p
	_ = this

	localctx = NewNamespaceNameListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, PHPParserRULE_namespaceNameList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1823)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1811)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1812)
			p.Identifier()
		}
		p.SetState(1815)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1813)
					p.Match(PHPParserNamespaceSeparator)
				}
				{
					p.SetState(1814)
					p.Identifier()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1817)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext())
		}
		p.SetState(1821)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1819)
				p.Match(PHPParserNamespaceSeparator)
			}
			{
				p.SetState(1820)
				p.NamespaceNameTail()
			}

		}

	}

	return localctx
}

// INamespaceNameTailContext is an interface to support dynamic dispatch.
type INamespaceNameTailContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceNameTailContext differentiates from other interfaces.
	IsNamespaceNameTailContext()
}

type NamespaceNameTailContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceNameTailContext() *NamespaceNameTailContext {
	var p = new(NamespaceNameTailContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_namespaceNameTail
	return p
}

func (*NamespaceNameTailContext) IsNamespaceNameTailContext() {}

func NewNamespaceNameTailContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceNameTailContext {
	var p = new(NamespaceNameTailContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_namespaceNameTail

	return p
}

func (s *NamespaceNameTailContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceNameTailContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *NamespaceNameTailContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamespaceNameTailContext) As() antlr.TerminalNode {
	return s.GetToken(PHPParserAs, 0)
}

func (s *NamespaceNameTailContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *NamespaceNameTailContext) AllNamespaceNameTail() []INamespaceNameTailContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INamespaceNameTailContext); ok {
			len++
		}
	}

	tst := make([]INamespaceNameTailContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INamespaceNameTailContext); ok {
			tst[i] = t.(INamespaceNameTailContext)
			i++
		}
	}

	return tst
}

func (s *NamespaceNameTailContext) NamespaceNameTail(i int) INamespaceNameTailContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceNameTailContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceNameTailContext)
}

func (s *NamespaceNameTailContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *NamespaceNameTailContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *NamespaceNameTailContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *NamespaceNameTailContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceNameTailContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceNameTailContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitNamespaceNameTail(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) NamespaceNameTail() (localctx INamespaceNameTailContext) {
	this := p
	_ = this

	localctx = NewNamespaceNameTailContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, PHPParserRULE_namespaceNameTail)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1844)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserLabel:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1825)
			p.Identifier()
		}
		p.SetState(1828)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1826)
				p.Match(PHPParserAs)
			}
			{
				p.SetState(1827)
				p.Identifier()
			}

		}

	case PHPParserOpenCurlyBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1830)
			p.Match(PHPParserOpenCurlyBracket)
		}
		{
			p.SetState(1831)
			p.NamespaceNameTail()
		}
		p.SetState(1836)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1832)
					p.Match(PHPParserComma)
				}
				{
					p.SetState(1833)
					p.NamespaceNameTail()
				}

			}
			p.SetState(1838)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())
		}
		p.SetState(1840)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserComma {
			{
				p.SetState(1839)
				p.Match(PHPParserComma)
			}

		}
		{
			p.SetState(1842)
			p.Match(PHPParserCloseCurlyBracket)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQualifiedNamespaceNameListContext is an interface to support dynamic dispatch.
type IQualifiedNamespaceNameListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedNamespaceNameListContext differentiates from other interfaces.
	IsQualifiedNamespaceNameListContext()
}

type QualifiedNamespaceNameListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedNamespaceNameListContext() *QualifiedNamespaceNameListContext {
	var p = new(QualifiedNamespaceNameListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_qualifiedNamespaceNameList
	return p
}

func (*QualifiedNamespaceNameListContext) IsQualifiedNamespaceNameListContext() {}

func NewQualifiedNamespaceNameListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedNamespaceNameListContext {
	var p = new(QualifiedNamespaceNameListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_qualifiedNamespaceNameList

	return p
}

func (s *QualifiedNamespaceNameListContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedNamespaceNameListContext) AllQualifiedNamespaceName() []IQualifiedNamespaceNameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IQualifiedNamespaceNameContext); ok {
			len++
		}
	}

	tst := make([]IQualifiedNamespaceNameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IQualifiedNamespaceNameContext); ok {
			tst[i] = t.(IQualifiedNamespaceNameContext)
			i++
		}
	}

	return tst
}

func (s *QualifiedNamespaceNameListContext) QualifiedNamespaceName(i int) IQualifiedNamespaceNameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameContext)
}

func (s *QualifiedNamespaceNameListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *QualifiedNamespaceNameListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *QualifiedNamespaceNameListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedNamespaceNameListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedNamespaceNameListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitQualifiedNamespaceNameList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) QualifiedNamespaceNameList() (localctx IQualifiedNamespaceNameListContext) {
	this := p
	_ = this

	localctx = NewQualifiedNamespaceNameListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, PHPParserRULE_qualifiedNamespaceNameList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1846)
		p.QualifiedNamespaceName()
	}
	p.SetState(1851)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(1847)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(1848)
			p.QualifiedNamespaceName()
		}

		p.SetState(1853)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IArgumentsContext is an interface to support dynamic dispatch.
type IArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentsContext differentiates from other interfaces.
	IsArgumentsContext()
}

type ArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentsContext() *ArgumentsContext {
	var p = new(ArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_arguments
	return p
}

func (*ArgumentsContext) IsArgumentsContext() {}

func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentsContext {
	var p = new(ArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_arguments

	return p
}

func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentsContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *ArgumentsContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *ArgumentsContext) AllActualArgument() []IActualArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IActualArgumentContext); ok {
			len++
		}
	}

	tst := make([]IActualArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IActualArgumentContext); ok {
			tst[i] = t.(IActualArgumentContext)
			i++
		}
	}

	return tst
}

func (s *ArgumentsContext) ActualArgument(i int) IActualArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IActualArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IActualArgumentContext)
}

func (s *ArgumentsContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *ArgumentsContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Arguments() (localctx IArgumentsContext) {
	this := p
	_ = this

	localctx = NewArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, PHPParserRULE_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1854)
		p.Match(PHPParserOpenRoundBracket)
	}
	p.SetState(1856)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334562462305) != 0 {
		{
			p.SetState(1855)
			p.ActualArgument()
		}

	}
	p.SetState(1862)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 223, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1858)
				p.Match(PHPParserComma)
			}
			{
				p.SetState(1859)
				p.ActualArgument()
			}

		}
		p.SetState(1864)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 223, p.GetParserRuleContext())
	}
	p.SetState(1866)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PHPParserComma {
		{
			p.SetState(1865)
			p.Match(PHPParserComma)
		}

	}
	{
		p.SetState(1868)
		p.Match(PHPParserCloseRoundBracket)
	}

	return localctx
}

// IActualArgumentContext is an interface to support dynamic dispatch.
type IActualArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsActualArgumentContext differentiates from other interfaces.
	IsActualArgumentContext()
}

type ActualArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyActualArgumentContext() *ActualArgumentContext {
	var p = new(ActualArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_actualArgument
	return p
}

func (*ActualArgumentContext) IsActualArgumentContext() {}

func NewActualArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ActualArgumentContext {
	var p = new(ActualArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_actualArgument

	return p
}

func (s *ActualArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *ActualArgumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ActualArgumentContext) ArgumentName() IArgumentNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentNameContext)
}

func (s *ActualArgumentContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(PHPParserEllipsis, 0)
}

func (s *ActualArgumentContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *ActualArgumentContext) FlexiVariable() IFlexiVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFlexiVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFlexiVariableContext)
}

func (s *ActualArgumentContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *ActualArgumentContext) Ampersand() antlr.TerminalNode {
	return s.GetToken(PHPParserAmpersand, 0)
}

func (s *ActualArgumentContext) Chain() IChainContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *ActualArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ActualArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ActualArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitActualArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ActualArgument() (localctx IActualArgumentContext) {
	this := p
	_ = this

	localctx = NewActualArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, PHPParserRULE_actualArgument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1883)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1871)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1870)
				p.ArgumentName()
			}

		}
		p.SetState(1874)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserEllipsis {
			{
				p.SetState(1873)
				p.Match(PHPParserEllipsis)
			}

		}
		{
			p.SetState(1876)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1877)
			p.Match(PHPParserOpenCurlyBracket)
		}
		{
			p.SetState(1878)
			p.flexiVariable(0)
		}
		{
			p.SetState(1879)
			p.Match(PHPParserCloseCurlyBracket)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1881)
			p.Match(PHPParserAmpersand)
		}
		{
			p.SetState(1882)
			p.Chain()
		}

	}

	return localctx
}

// IArgumentNameContext is an interface to support dynamic dispatch.
type IArgumentNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentNameContext differentiates from other interfaces.
	IsArgumentNameContext()
}

type ArgumentNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentNameContext() *ArgumentNameContext {
	var p = new(ArgumentNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_argumentName
	return p
}

func (*ArgumentNameContext) IsArgumentNameContext() {}

func NewArgumentNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentNameContext {
	var p = new(ArgumentNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_argumentName

	return p
}

func (s *ArgumentNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentNameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ArgumentNameContext) Colon() antlr.TerminalNode {
	return s.GetToken(PHPParserColon, 0)
}

func (s *ArgumentNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitArgumentName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ArgumentName() (localctx IArgumentNameContext) {
	this := p
	_ = this

	localctx = NewArgumentNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, PHPParserRULE_argumentName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1885)
		p.Identifier()
	}
	{
		p.SetState(1886)
		p.Match(PHPParserColon)
	}

	return localctx
}

// IConstantInitializerContext is an interface to support dynamic dispatch.
type IConstantInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantInitializerContext differentiates from other interfaces.
	IsConstantInitializerContext()
}

type ConstantInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantInitializerContext() *ConstantInitializerContext {
	var p = new(ConstantInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_constantInitializer
	return p
}

func (*ConstantInitializerContext) IsConstantInitializerContext() {}

func NewConstantInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantInitializerContext {
	var p = new(ConstantInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_constantInitializer

	return p
}

func (s *ConstantInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantInitializerContext) AllConstantString() []IConstantStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IConstantStringContext); ok {
			len++
		}
	}

	tst := make([]IConstantStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IConstantStringContext); ok {
			tst[i] = t.(IConstantStringContext)
			i++
		}
	}

	return tst
}

func (s *ConstantInitializerContext) ConstantString(i int) IConstantStringContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantStringContext)
}

func (s *ConstantInitializerContext) AllDot() []antlr.TerminalNode {
	return s.GetTokens(PHPParserDot)
}

func (s *ConstantInitializerContext) Dot(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserDot, i)
}

func (s *ConstantInitializerContext) Array() antlr.TerminalNode {
	return s.GetToken(PHPParserArray, 0)
}

func (s *ConstantInitializerContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *ConstantInitializerContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *ConstantInitializerContext) ArrayItemList() IArrayItemListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayItemListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayItemListContext)
}

func (s *ConstantInitializerContext) Comma() antlr.TerminalNode {
	return s.GetToken(PHPParserComma, 0)
}

func (s *ConstantInitializerContext) OpenSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenSquareBracket, 0)
}

func (s *ConstantInitializerContext) CloseSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseSquareBracket, 0)
}

func (s *ConstantInitializerContext) ConstantInitializer() IConstantInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantInitializerContext)
}

func (s *ConstantInitializerContext) Plus() antlr.TerminalNode {
	return s.GetToken(PHPParserPlus, 0)
}

func (s *ConstantInitializerContext) Minus() antlr.TerminalNode {
	return s.GetToken(PHPParserMinus, 0)
}

func (s *ConstantInitializerContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConstantInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitConstantInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ConstantInitializer() (localctx IConstantInitializerContext) {
	this := p
	_ = this

	localctx = NewConstantInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, PHPParserRULE_constantInitializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1916)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1888)
			p.ConstantString()
		}
		p.SetState(1893)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserDot {
			{
				p.SetState(1889)
				p.Match(PHPParserDot)
			}
			{
				p.SetState(1890)
				p.ConstantString()
			}

			p.SetState(1895)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1896)
			p.Match(PHPParserArray)
		}
		{
			p.SetState(1897)
			p.Match(PHPParserOpenRoundBracket)
		}
		p.SetState(1902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
			{
				p.SetState(1898)
				p.ArrayItemList()
			}
			p.SetState(1900)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PHPParserComma {
				{
					p.SetState(1899)
					p.Match(PHPParserComma)
				}

			}

		}
		{
			p.SetState(1904)
			p.Match(PHPParserCloseRoundBracket)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1905)
			p.Match(PHPParserOpenSquareBracket)
		}
		p.SetState(1910)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
			{
				p.SetState(1906)
				p.ArrayItemList()
			}
			p.SetState(1908)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PHPParserComma {
				{
					p.SetState(1907)
					p.Match(PHPParserComma)
				}

			}

		}
		{
			p.SetState(1912)
			p.Match(PHPParserCloseSquareBracket)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1913)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserPlus || _la == PHPParserMinus) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1914)
			p.ConstantInitializer()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1915)
			p.expression(0)
		}

	}

	return localctx
}

// IConstantStringContext is an interface to support dynamic dispatch.
type IConstantStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantStringContext differentiates from other interfaces.
	IsConstantStringContext()
}

type ConstantStringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantStringContext() *ConstantStringContext {
	var p = new(ConstantStringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_constantString
	return p
}

func (*ConstantStringContext) IsConstantStringContext() {}

func NewConstantStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantStringContext {
	var p = new(ConstantStringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_constantString

	return p
}

func (s *ConstantStringContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantStringContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *ConstantStringContext) Constant() IConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *ConstantStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantStringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantStringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitConstantString(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ConstantString() (localctx IConstantStringContext) {
	this := p
	_ = this

	localctx = NewConstantStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, PHPParserRULE_constantString)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1920)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserStartNowDoc, PHPParserSingleQuoteString, PHPParserDoubleQuote:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1918)
			p.String_()
		}

	case PHPParserBooleanConstant, PHPParserNull, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserLabel, PHPParserOctal, PHPParserDecimal, PHPParserReal, PHPParserHex, PHPParserBinary:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1919)
			p.Constant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) Null() antlr.TerminalNode {
	return s.GetToken(PHPParserNull, 0)
}

func (s *ConstantContext) LiteralConstant() ILiteralConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralConstantContext)
}

func (s *ConstantContext) MagicConstant() IMagicConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMagicConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMagicConstantContext)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Constant() (localctx IConstantContext) {
	this := p
	_ = this

	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, PHPParserRULE_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1925)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserNull:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1922)
			p.Match(PHPParserNull)
		}

	case PHPParserBooleanConstant, PHPParserLabel, PHPParserOctal, PHPParserDecimal, PHPParserReal, PHPParserHex, PHPParserBinary:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1923)
			p.LiteralConstant()
		}

	case PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1924)
			p.MagicConstant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILiteralConstantContext is an interface to support dynamic dispatch.
type ILiteralConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralConstantContext differentiates from other interfaces.
	IsLiteralConstantContext()
}

type LiteralConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralConstantContext() *LiteralConstantContext {
	var p = new(LiteralConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_literalConstant
	return p
}

func (*LiteralConstantContext) IsLiteralConstantContext() {}

func NewLiteralConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralConstantContext {
	var p = new(LiteralConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_literalConstant

	return p
}

func (s *LiteralConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralConstantContext) Real() antlr.TerminalNode {
	return s.GetToken(PHPParserReal, 0)
}

func (s *LiteralConstantContext) BooleanConstant() antlr.TerminalNode {
	return s.GetToken(PHPParserBooleanConstant, 0)
}

func (s *LiteralConstantContext) NumericConstant() INumericConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericConstantContext)
}

func (s *LiteralConstantContext) StringConstant() IStringConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringConstantContext)
}

func (s *LiteralConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitLiteralConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) LiteralConstant() (localctx ILiteralConstantContext) {
	this := p
	_ = this

	localctx = NewLiteralConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, PHPParserRULE_literalConstant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1931)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserReal:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1927)
			p.Match(PHPParserReal)
		}

	case PHPParserBooleanConstant:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1928)
			p.Match(PHPParserBooleanConstant)
		}

	case PHPParserOctal, PHPParserDecimal, PHPParserHex, PHPParserBinary:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1929)
			p.NumericConstant()
		}

	case PHPParserLabel:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1930)
			p.StringConstant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INumericConstantContext is an interface to support dynamic dispatch.
type INumericConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumericConstantContext differentiates from other interfaces.
	IsNumericConstantContext()
}

type NumericConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericConstantContext() *NumericConstantContext {
	var p = new(NumericConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_numericConstant
	return p
}

func (*NumericConstantContext) IsNumericConstantContext() {}

func NewNumericConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericConstantContext {
	var p = new(NumericConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_numericConstant

	return p
}

func (s *NumericConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericConstantContext) Octal() antlr.TerminalNode {
	return s.GetToken(PHPParserOctal, 0)
}

func (s *NumericConstantContext) Decimal() antlr.TerminalNode {
	return s.GetToken(PHPParserDecimal, 0)
}

func (s *NumericConstantContext) Hex() antlr.TerminalNode {
	return s.GetToken(PHPParserHex, 0)
}

func (s *NumericConstantContext) Binary() antlr.TerminalNode {
	return s.GetToken(PHPParserBinary, 0)
}

func (s *NumericConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitNumericConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) NumericConstant() (localctx INumericConstantContext) {
	this := p
	_ = this

	localctx = NewNumericConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, PHPParserRULE_numericConstant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1933)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-230)) & ^0x3f) == 0 && ((int64(1)<<(_la-230))&27) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IClassConstantContext is an interface to support dynamic dispatch.
type IClassConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassConstantContext differentiates from other interfaces.
	IsClassConstantContext()
}

type ClassConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassConstantContext() *ClassConstantContext {
	var p = new(ClassConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_classConstant
	return p
}

func (*ClassConstantContext) IsClassConstantContext() {}

func NewClassConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassConstantContext {
	var p = new(ClassConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_classConstant

	return p
}

func (s *ClassConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassConstantContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *ClassConstantContext) Class() antlr.TerminalNode {
	return s.GetToken(PHPParserClass, 0)
}

func (s *ClassConstantContext) Parent_() antlr.TerminalNode {
	return s.GetToken(PHPParserParent_, 0)
}

func (s *ClassConstantContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ClassConstantContext) Constructor() antlr.TerminalNode {
	return s.GetToken(PHPParserConstructor, 0)
}

func (s *ClassConstantContext) Get() antlr.TerminalNode {
	return s.GetToken(PHPParserGet, 0)
}

func (s *ClassConstantContext) Set() antlr.TerminalNode {
	return s.GetToken(PHPParserSet, 0)
}

func (s *ClassConstantContext) QualifiedStaticTypeRef() IQualifiedStaticTypeRefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedStaticTypeRefContext)
}

func (s *ClassConstantContext) AllKeyedVariable() []IKeyedVariableContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IKeyedVariableContext); ok {
			len++
		}
	}

	tst := make([]IKeyedVariableContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IKeyedVariableContext); ok {
			tst[i] = t.(IKeyedVariableContext)
			i++
		}
	}

	return tst
}

func (s *ClassConstantContext) KeyedVariable(i int) IKeyedVariableContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyedVariableContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyedVariableContext)
}

func (s *ClassConstantContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *ClassConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitClassConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ClassConstant() (localctx IClassConstantContext) {
	this := p
	_ = this

	localctx = NewClassConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, PHPParserRULE_classConstant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1953)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1935)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PHPParserClass || _la == PHPParserParent_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1936)
			p.Match(PHPParserDoubleColon)
		}
		p.SetState(1941)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1937)
				p.Identifier()
			}

		case 2:
			{
				p.SetState(1938)
				p.Match(PHPParserConstructor)
			}

		case 3:
			{
				p.SetState(1939)
				p.Match(PHPParserGet)
			}

		case 4:
			{
				p.SetState(1940)
				p.Match(PHPParserSet)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1946)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserNamespaceSeparator, PHPParserLabel:
			{
				p.SetState(1943)
				p.QualifiedStaticTypeRef()
			}

		case PHPParserDollar, PHPParserVarName:
			{
				p.SetState(1944)
				p.KeyedVariable()
			}

		case PHPParserStartNowDoc, PHPParserSingleQuoteString, PHPParserDoubleQuote:
			{
				p.SetState(1945)
				p.String_()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1948)
			p.Match(PHPParserDoubleColon)
		}
		p.SetState(1951)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserLabel:
			{
				p.SetState(1949)
				p.Identifier()
			}

		case PHPParserDollar, PHPParserVarName:
			{
				p.SetState(1950)
				p.KeyedVariable()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// IStringConstantContext is an interface to support dynamic dispatch.
type IStringConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringConstantContext differentiates from other interfaces.
	IsStringConstantContext()
}

type StringConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringConstantContext() *StringConstantContext {
	var p = new(StringConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_stringConstant
	return p
}

func (*StringConstantContext) IsStringConstantContext() {}

func NewStringConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringConstantContext {
	var p = new(StringConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_stringConstant

	return p
}

func (s *StringConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *StringConstantContext) Label() antlr.TerminalNode {
	return s.GetToken(PHPParserLabel, 0)
}

func (s *StringConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitStringConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) StringConstant() (localctx IStringConstantContext) {
	this := p
	_ = this

	localctx = NewStringConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, PHPParserRULE_stringConstant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1955)
		p.Match(PHPParserLabel)
	}

	return localctx
}

// IStringContext is an interface to support dynamic dispatch.
type IStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringContext differentiates from other interfaces.
	IsStringContext()
}

type StringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringContext() *StringContext {
	var p = new(StringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_string
	return p
}

func (*StringContext) IsStringContext() {}

func NewStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringContext {
	var p = new(StringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_string

	return p
}

func (s *StringContext) GetParser() antlr.Parser { return s.parser }

func (s *StringContext) StartNowDoc() antlr.TerminalNode {
	return s.GetToken(PHPParserStartNowDoc, 0)
}

func (s *StringContext) HereDocIdentiferName() antlr.TerminalNode {
	return s.GetToken(PHPParserHereDocIdentiferName, 0)
}

func (s *StringContext) HereDocIdentifierBreak() antlr.TerminalNode {
	return s.GetToken(PHPParserHereDocIdentifierBreak, 0)
}

func (s *StringContext) EndDoc() antlr.TerminalNode {
	return s.GetToken(PHPParserEndDoc, 0)
}

func (s *StringContext) HereDocContent() IHereDocContentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHereDocContentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHereDocContentContext)
}

func (s *StringContext) SingleQuoteString() antlr.TerminalNode {
	return s.GetToken(PHPParserSingleQuoteString, 0)
}

func (s *StringContext) AllDoubleQuote() []antlr.TerminalNode {
	return s.GetTokens(PHPParserDoubleQuote)
}

func (s *StringContext) DoubleQuote(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleQuote, i)
}

func (s *StringContext) AllInterpolatedStringPart() []IInterpolatedStringPartContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInterpolatedStringPartContext); ok {
			len++
		}
	}

	tst := make([]IInterpolatedStringPartContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInterpolatedStringPartContext); ok {
			tst[i] = t.(IInterpolatedStringPartContext)
			i++
		}
	}

	return tst
}

func (s *StringContext) InterpolatedStringPart(i int) IInterpolatedStringPartContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterpolatedStringPartContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterpolatedStringPartContext)
}

func (s *StringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitString(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) String_() (localctx IStringContext) {
	this := p
	_ = this

	localctx = NewStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, PHPParserRULE_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1973)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserStartNowDoc:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1957)
			p.Match(PHPParserStartNowDoc)
		}
		{
			p.SetState(1958)
			p.Match(PHPParserHereDocIdentiferName)
		}
		{
			p.SetState(1959)
			p.Match(PHPParserHereDocIdentifierBreak)
		}
		p.SetState(1961)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PHPParserHereDocText {
			{
				p.SetState(1960)
				p.HereDocContent()
			}

		}
		{
			p.SetState(1963)
			p.Match(PHPParserEndDoc)
		}

	case PHPParserSingleQuoteString:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1964)
			p.Match(PHPParserSingleQuoteString)
		}

	case PHPParserDoubleQuote:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1965)
			p.Match(PHPParserDoubleQuote)
		}
		p.SetState(1969)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1966)
					p.InterpolatedStringPart()
				}

			}
			p.SetState(1971)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext())
		}
		{
			p.SetState(1972)
			p.Match(PHPParserDoubleQuote)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IHereDocContentContext is an interface to support dynamic dispatch.
type IHereDocContentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHereDocContentContext differentiates from other interfaces.
	IsHereDocContentContext()
}

type HereDocContentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHereDocContentContext() *HereDocContentContext {
	var p = new(HereDocContentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_hereDocContent
	return p
}

func (*HereDocContentContext) IsHereDocContentContext() {}

func NewHereDocContentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HereDocContentContext {
	var p = new(HereDocContentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_hereDocContent

	return p
}

func (s *HereDocContentContext) GetParser() antlr.Parser { return s.parser }

func (s *HereDocContentContext) AllHereDocText() []antlr.TerminalNode {
	return s.GetTokens(PHPParserHereDocText)
}

func (s *HereDocContentContext) HereDocText(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserHereDocText, i)
}

func (s *HereDocContentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HereDocContentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HereDocContentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitHereDocContent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) HereDocContent() (localctx IHereDocContentContext) {
	this := p
	_ = this

	localctx = NewHereDocContentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, PHPParserRULE_hereDocContent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1976)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == PHPParserHereDocText {
		{
			p.SetState(1975)
			p.Match(PHPParserHereDocText)
		}

		p.SetState(1978)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IInterpolatedStringPartContext is an interface to support dynamic dispatch.
type IInterpolatedStringPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterpolatedStringPartContext differentiates from other interfaces.
	IsInterpolatedStringPartContext()
}

type InterpolatedStringPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterpolatedStringPartContext() *InterpolatedStringPartContext {
	var p = new(InterpolatedStringPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_interpolatedStringPart
	return p
}

func (*InterpolatedStringPartContext) IsInterpolatedStringPartContext() {}

func NewInterpolatedStringPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterpolatedStringPartContext {
	var p = new(InterpolatedStringPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_interpolatedStringPart

	return p
}

func (s *InterpolatedStringPartContext) GetParser() antlr.Parser { return s.parser }

func (s *InterpolatedStringPartContext) StringPart() antlr.TerminalNode {
	return s.GetToken(PHPParserStringPart, 0)
}

func (s *InterpolatedStringPartContext) UnicodeEscape() antlr.TerminalNode {
	return s.GetToken(PHPParserUnicodeEscape, 0)
}

func (s *InterpolatedStringPartContext) Chain() IChainContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *InterpolatedStringPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterpolatedStringPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterpolatedStringPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitInterpolatedStringPart(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) InterpolatedStringPart() (localctx IInterpolatedStringPartContext) {
	this := p
	_ = this

	localctx = NewInterpolatedStringPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, PHPParserRULE_interpolatedStringPart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1983)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserStringPart:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1980)
			p.Match(PHPParserStringPart)
		}

	case PHPParserUnicodeEscape:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1981)
			p.Match(PHPParserUnicodeEscape)
		}

	case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserStartNowDoc, PHPParserNamespaceSeparator, PHPParserDollar, PHPParserOpenRoundBracket, PHPParserOpenSquareBracket, PHPParserVarName, PHPParserLabel, PHPParserSingleQuoteString, PHPParserDoubleQuote:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1982)
			p.Chain()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChainListContext is an interface to support dynamic dispatch.
type IChainListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChainListContext differentiates from other interfaces.
	IsChainListContext()
}

type ChainListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChainListContext() *ChainListContext {
	var p = new(ChainListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_chainList
	return p
}

func (*ChainListContext) IsChainListContext() {}

func NewChainListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChainListContext {
	var p = new(ChainListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_chainList

	return p
}

func (s *ChainListContext) GetParser() antlr.Parser { return s.parser }

func (s *ChainListContext) AllChain() []IChainContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IChainContext); ok {
			len++
		}
	}

	tst := make([]IChainContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IChainContext); ok {
			tst[i] = t.(IChainContext)
			i++
		}
	}

	return tst
}

func (s *ChainListContext) Chain(i int) IChainContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *ChainListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *ChainListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *ChainListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChainListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChainListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitChainList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ChainList() (localctx IChainListContext) {
	this := p
	_ = this

	localctx = NewChainListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, PHPParserRULE_chainList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1985)
		p.Chain()
	}
	p.SetState(1990)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(1986)
			p.Match(PHPParserComma)
		}
		{
			p.SetState(1987)
			p.Chain()
		}

		p.SetState(1992)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChainContext is an interface to support dynamic dispatch.
type IChainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChainContext differentiates from other interfaces.
	IsChainContext()
}

type ChainContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChainContext() *ChainContext {
	var p = new(ChainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_chain
	return p
}

func (*ChainContext) IsChainContext() {}

func NewChainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChainContext {
	var p = new(ChainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_chain

	return p
}

func (s *ChainContext) GetParser() antlr.Parser { return s.parser }

func (s *ChainContext) ChainOrigin() IChainOriginContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainOriginContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainOriginContext)
}

func (s *ChainContext) AllMemberAccess() []IMemberAccessContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemberAccessContext); ok {
			len++
		}
	}

	tst := make([]IMemberAccessContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemberAccessContext); ok {
			tst[i] = t.(IMemberAccessContext)
			i++
		}
	}

	return tst
}

func (s *ChainContext) MemberAccess(i int) IMemberAccessContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberAccessContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberAccessContext)
}

func (s *ChainContext) ArrayCreation() IArrayCreationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayCreationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayCreationContext)
}

func (s *ChainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChainContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitChain(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Chain() (localctx IChainContext) {
	this := p
	_ = this

	localctx = NewChainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, PHPParserRULE_chain)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2001)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1993)
			p.ChainOrigin()
		}
		p.SetState(1997)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PHPParserObjectOperator {
			{
				p.SetState(1994)
				p.MemberAccess()
			}

			p.SetState(1999)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2000)
			p.ArrayCreation()
		}

	}

	return localctx
}

// IChainOriginContext is an interface to support dynamic dispatch.
type IChainOriginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChainOriginContext differentiates from other interfaces.
	IsChainOriginContext()
}

type ChainOriginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChainOriginContext() *ChainOriginContext {
	var p = new(ChainOriginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_chainOrigin
	return p
}

func (*ChainOriginContext) IsChainOriginContext() {}

func NewChainOriginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChainOriginContext {
	var p = new(ChainOriginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_chainOrigin

	return p
}

func (s *ChainOriginContext) GetParser() antlr.Parser { return s.parser }

func (s *ChainOriginContext) ChainBase() IChainBaseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainBaseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainBaseContext)
}

func (s *ChainOriginContext) FunctionCall() IFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *ChainOriginContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *ChainOriginContext) NewExpr() INewExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INewExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INewExprContext)
}

func (s *ChainOriginContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *ChainOriginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChainOriginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChainOriginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitChainOrigin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ChainOrigin() (localctx IChainOriginContext) {
	this := p
	_ = this

	localctx = NewChainOriginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, PHPParserRULE_chainOrigin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2009)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2003)
			p.ChainBase()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2004)
			p.FunctionCall()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2005)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(2006)
			p.NewExpr()
		}
		{
			p.SetState(2007)
			p.Match(PHPParserCloseRoundBracket)
		}

	}

	return localctx
}

// IMemberAccessContext is an interface to support dynamic dispatch.
type IMemberAccessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberAccessContext differentiates from other interfaces.
	IsMemberAccessContext()
}

type MemberAccessContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberAccessContext() *MemberAccessContext {
	var p = new(MemberAccessContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_memberAccess
	return p
}

func (*MemberAccessContext) IsMemberAccessContext() {}

func NewMemberAccessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberAccessContext {
	var p = new(MemberAccessContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_memberAccess

	return p
}

func (s *MemberAccessContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberAccessContext) ObjectOperator() antlr.TerminalNode {
	return s.GetToken(PHPParserObjectOperator, 0)
}

func (s *MemberAccessContext) KeyedFieldName() IKeyedFieldNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyedFieldNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyedFieldNameContext)
}

func (s *MemberAccessContext) ActualArguments() IActualArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IActualArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IActualArgumentsContext)
}

func (s *MemberAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberAccessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMemberAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) MemberAccess() (localctx IMemberAccessContext) {
	this := p
	_ = this

	localctx = NewMemberAccessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, PHPParserRULE_memberAccess)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2011)
		p.Match(PHPParserObjectOperator)
	}
	{
		p.SetState(2012)
		p.KeyedFieldName()
	}
	p.SetState(2014)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 250, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2013)
			p.ActualArguments()
		}

	}

	return localctx
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) FunctionCallName() IFunctionCallNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallNameContext)
}

func (s *FunctionCallContext) ActualArguments() IActualArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IActualArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IActualArgumentsContext)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) FunctionCall() (localctx IFunctionCallContext) {
	this := p
	_ = this

	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, PHPParserRULE_functionCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2016)
		p.FunctionCallName()
	}
	{
		p.SetState(2017)
		p.ActualArguments()
	}

	return localctx
}

// IFunctionCallNameContext is an interface to support dynamic dispatch.
type IFunctionCallNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallNameContext differentiates from other interfaces.
	IsFunctionCallNameContext()
}

type FunctionCallNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallNameContext() *FunctionCallNameContext {
	var p = new(FunctionCallNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_functionCallName
	return p
}

func (*FunctionCallNameContext) IsFunctionCallNameContext() {}

func NewFunctionCallNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallNameContext {
	var p = new(FunctionCallNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_functionCallName

	return p
}

func (s *FunctionCallNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallNameContext) QualifiedNamespaceName() IQualifiedNamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNamespaceNameContext)
}

func (s *FunctionCallNameContext) ClassConstant() IClassConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassConstantContext)
}

func (s *FunctionCallNameContext) ChainBase() IChainBaseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainBaseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainBaseContext)
}

func (s *FunctionCallNameContext) Parentheses() IParenthesesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesesContext)
}

func (s *FunctionCallNameContext) Label() antlr.TerminalNode {
	return s.GetToken(PHPParserLabel, 0)
}

func (s *FunctionCallNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitFunctionCallName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) FunctionCallName() (localctx IFunctionCallNameContext) {
	this := p
	_ = this

	localctx = NewFunctionCallNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, PHPParserRULE_functionCallName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2024)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2019)
			p.QualifiedNamespaceName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2020)
			p.ClassConstant()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2021)
			p.ChainBase()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2022)
			p.Parentheses()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2023)
			p.Match(PHPParserLabel)
		}

	}

	return localctx
}

// IActualArgumentsContext is an interface to support dynamic dispatch.
type IActualArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsActualArgumentsContext differentiates from other interfaces.
	IsActualArgumentsContext()
}

type ActualArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyActualArgumentsContext() *ActualArgumentsContext {
	var p = new(ActualArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_actualArguments
	return p
}

func (*ActualArgumentsContext) IsActualArgumentsContext() {}

func NewActualArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ActualArgumentsContext {
	var p = new(ActualArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_actualArguments

	return p
}

func (s *ActualArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ActualArgumentsContext) AllArguments() []IArgumentsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArgumentsContext); ok {
			len++
		}
	}

	tst := make([]IArgumentsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArgumentsContext); ok {
			tst[i] = t.(IArgumentsContext)
			i++
		}
	}

	return tst
}

func (s *ActualArgumentsContext) Arguments(i int) IArgumentsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *ActualArgumentsContext) AllSquareCurlyExpression() []ISquareCurlyExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISquareCurlyExpressionContext); ok {
			len++
		}
	}

	tst := make([]ISquareCurlyExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISquareCurlyExpressionContext); ok {
			tst[i] = t.(ISquareCurlyExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ActualArgumentsContext) SquareCurlyExpression(i int) ISquareCurlyExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISquareCurlyExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISquareCurlyExpressionContext)
}

func (s *ActualArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ActualArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ActualArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitActualArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ActualArguments() (localctx IActualArgumentsContext) {
	this := p
	_ = this

	localctx = NewActualArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, PHPParserRULE_actualArguments)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2027)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2026)
				p.Arguments()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2029)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext())
	}
	p.SetState(2034)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2031)
				p.SquareCurlyExpression()
			}

		}
		p.SetState(2036)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext())
	}

	return localctx
}

// IChainBaseContext is an interface to support dynamic dispatch.
type IChainBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChainBaseContext differentiates from other interfaces.
	IsChainBaseContext()
}

type ChainBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChainBaseContext() *ChainBaseContext {
	var p = new(ChainBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_chainBase
	return p
}

func (*ChainBaseContext) IsChainBaseContext() {}

func NewChainBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChainBaseContext {
	var p = new(ChainBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_chainBase

	return p
}

func (s *ChainBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *ChainBaseContext) AllKeyedVariable() []IKeyedVariableContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IKeyedVariableContext); ok {
			len++
		}
	}

	tst := make([]IKeyedVariableContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IKeyedVariableContext); ok {
			tst[i] = t.(IKeyedVariableContext)
			i++
		}
	}

	return tst
}

func (s *ChainBaseContext) KeyedVariable(i int) IKeyedVariableContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyedVariableContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyedVariableContext)
}

func (s *ChainBaseContext) DoubleColon() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleColon, 0)
}

func (s *ChainBaseContext) QualifiedStaticTypeRef() IQualifiedStaticTypeRefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedStaticTypeRefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedStaticTypeRefContext)
}

func (s *ChainBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChainBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChainBaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitChainBase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) ChainBase() (localctx IChainBaseContext) {
	this := p
	_ = this

	localctx = NewChainBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, PHPParserRULE_chainBase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2046)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserDollar, PHPParserVarName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2037)
			p.KeyedVariable()
		}
		p.SetState(2040)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2038)
				p.Match(PHPParserDoubleColon)
			}
			{
				p.SetState(2039)
				p.KeyedVariable()
			}

		}

	case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserNamespaceSeparator, PHPParserLabel:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2042)
			p.QualifiedStaticTypeRef()
		}
		{
			p.SetState(2043)
			p.Match(PHPParserDoubleColon)
		}
		{
			p.SetState(2044)
			p.KeyedVariable()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IKeyedFieldNameContext is an interface to support dynamic dispatch.
type IKeyedFieldNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyedFieldNameContext differentiates from other interfaces.
	IsKeyedFieldNameContext()
}

type KeyedFieldNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyedFieldNameContext() *KeyedFieldNameContext {
	var p = new(KeyedFieldNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_keyedFieldName
	return p
}

func (*KeyedFieldNameContext) IsKeyedFieldNameContext() {}

func NewKeyedFieldNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyedFieldNameContext {
	var p = new(KeyedFieldNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_keyedFieldName

	return p
}

func (s *KeyedFieldNameContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyedFieldNameContext) KeyedSimpleFieldName() IKeyedSimpleFieldNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyedSimpleFieldNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyedSimpleFieldNameContext)
}

func (s *KeyedFieldNameContext) KeyedVariable() IKeyedVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyedVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyedVariableContext)
}

func (s *KeyedFieldNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyedFieldNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyedFieldNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitKeyedFieldName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) KeyedFieldName() (localctx IKeyedFieldNameContext) {
	this := p
	_ = this

	localctx = NewKeyedFieldNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, PHPParserRULE_keyedFieldName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2050)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserOpenCurlyBracket, PHPParserLabel:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2048)
			p.KeyedSimpleFieldName()
		}

	case PHPParserDollar, PHPParserVarName:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2049)
			p.KeyedVariable()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IKeyedSimpleFieldNameContext is an interface to support dynamic dispatch.
type IKeyedSimpleFieldNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyedSimpleFieldNameContext differentiates from other interfaces.
	IsKeyedSimpleFieldNameContext()
}

type KeyedSimpleFieldNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyedSimpleFieldNameContext() *KeyedSimpleFieldNameContext {
	var p = new(KeyedSimpleFieldNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_keyedSimpleFieldName
	return p
}

func (*KeyedSimpleFieldNameContext) IsKeyedSimpleFieldNameContext() {}

func NewKeyedSimpleFieldNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyedSimpleFieldNameContext {
	var p = new(KeyedSimpleFieldNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_keyedSimpleFieldName

	return p
}

func (s *KeyedSimpleFieldNameContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyedSimpleFieldNameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *KeyedSimpleFieldNameContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *KeyedSimpleFieldNameContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *KeyedSimpleFieldNameContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *KeyedSimpleFieldNameContext) AllSquareCurlyExpression() []ISquareCurlyExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISquareCurlyExpressionContext); ok {
			len++
		}
	}

	tst := make([]ISquareCurlyExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISquareCurlyExpressionContext); ok {
			tst[i] = t.(ISquareCurlyExpressionContext)
			i++
		}
	}

	return tst
}

func (s *KeyedSimpleFieldNameContext) SquareCurlyExpression(i int) ISquareCurlyExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISquareCurlyExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISquareCurlyExpressionContext)
}

func (s *KeyedSimpleFieldNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyedSimpleFieldNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyedSimpleFieldNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitKeyedSimpleFieldName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) KeyedSimpleFieldName() (localctx IKeyedSimpleFieldNameContext) {
	this := p
	_ = this

	localctx = NewKeyedSimpleFieldNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, PHPParserRULE_keyedSimpleFieldName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2057)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__, PHPParserLabel:
		{
			p.SetState(2052)
			p.Identifier()
		}

	case PHPParserOpenCurlyBracket:
		{
			p.SetState(2053)
			p.Match(PHPParserOpenCurlyBracket)
		}
		{
			p.SetState(2054)
			p.expression(0)
		}
		{
			p.SetState(2055)
			p.Match(PHPParserCloseCurlyBracket)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2062)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2059)
				p.SquareCurlyExpression()
			}

		}
		p.SetState(2064)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext())
	}

	return localctx
}

// IKeyedVariableContext is an interface to support dynamic dispatch.
type IKeyedVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyedVariableContext differentiates from other interfaces.
	IsKeyedVariableContext()
}

type KeyedVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyedVariableContext() *KeyedVariableContext {
	var p = new(KeyedVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_keyedVariable
	return p
}

func (*KeyedVariableContext) IsKeyedVariableContext() {}

func NewKeyedVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyedVariableContext {
	var p = new(KeyedVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_keyedVariable

	return p
}

func (s *KeyedVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyedVariableContext) VarName() antlr.TerminalNode {
	return s.GetToken(PHPParserVarName, 0)
}

func (s *KeyedVariableContext) AllDollar() []antlr.TerminalNode {
	return s.GetTokens(PHPParserDollar)
}

func (s *KeyedVariableContext) Dollar(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserDollar, i)
}

func (s *KeyedVariableContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *KeyedVariableContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *KeyedVariableContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *KeyedVariableContext) AllSquareCurlyExpression() []ISquareCurlyExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISquareCurlyExpressionContext); ok {
			len++
		}
	}

	tst := make([]ISquareCurlyExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISquareCurlyExpressionContext); ok {
			tst[i] = t.(ISquareCurlyExpressionContext)
			i++
		}
	}

	return tst
}

func (s *KeyedVariableContext) SquareCurlyExpression(i int) ISquareCurlyExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISquareCurlyExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISquareCurlyExpressionContext)
}

func (s *KeyedVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyedVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyedVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitKeyedVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) KeyedVariable() (localctx IKeyedVariableContext) {
	this := p
	_ = this

	localctx = NewKeyedVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, PHPParserRULE_keyedVariable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2068)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 259, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2065)
				p.Match(PHPParserDollar)
			}

		}
		p.SetState(2070)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 259, p.GetParserRuleContext())
	}
	p.SetState(2077)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserVarName:
		{
			p.SetState(2071)
			p.Match(PHPParserVarName)
		}

	case PHPParserDollar:
		{
			p.SetState(2072)
			p.Match(PHPParserDollar)
		}
		{
			p.SetState(2073)
			p.Match(PHPParserOpenCurlyBracket)
		}
		{
			p.SetState(2074)
			p.expression(0)
		}
		{
			p.SetState(2075)
			p.Match(PHPParserCloseCurlyBracket)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2082)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2079)
				p.SquareCurlyExpression()
			}

		}
		p.SetState(2084)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext())
	}

	return localctx
}

// ISquareCurlyExpressionContext is an interface to support dynamic dispatch.
type ISquareCurlyExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSquareCurlyExpressionContext differentiates from other interfaces.
	IsSquareCurlyExpressionContext()
}

type SquareCurlyExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySquareCurlyExpressionContext() *SquareCurlyExpressionContext {
	var p = new(SquareCurlyExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_squareCurlyExpression
	return p
}

func (*SquareCurlyExpressionContext) IsSquareCurlyExpressionContext() {}

func NewSquareCurlyExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SquareCurlyExpressionContext {
	var p = new(SquareCurlyExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_squareCurlyExpression

	return p
}

func (s *SquareCurlyExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SquareCurlyExpressionContext) OpenSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenSquareBracket, 0)
}

func (s *SquareCurlyExpressionContext) CloseSquareBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseSquareBracket, 0)
}

func (s *SquareCurlyExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SquareCurlyExpressionContext) OpenCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenCurlyBracket, 0)
}

func (s *SquareCurlyExpressionContext) CloseCurlyBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseCurlyBracket, 0)
}

func (s *SquareCurlyExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SquareCurlyExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SquareCurlyExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitSquareCurlyExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) SquareCurlyExpression() (localctx ISquareCurlyExpressionContext) {
	this := p
	_ = this

	localctx = NewSquareCurlyExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, PHPParserRULE_squareCurlyExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2094)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserOpenSquareBracket:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2085)
			p.Match(PHPParserOpenSquareBracket)
		}
		p.SetState(2087)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
			{
				p.SetState(2086)
				p.expression(0)
			}

		}
		{
			p.SetState(2089)
			p.Match(PHPParserCloseSquareBracket)
		}

	case PHPParserOpenCurlyBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2090)
			p.Match(PHPParserOpenCurlyBracket)
		}
		{
			p.SetState(2091)
			p.expression(0)
		}
		{
			p.SetState(2092)
			p.Match(PHPParserCloseCurlyBracket)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssignmentListContext is an interface to support dynamic dispatch.
type IAssignmentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentListContext differentiates from other interfaces.
	IsAssignmentListContext()
}

type AssignmentListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentListContext() *AssignmentListContext {
	var p = new(AssignmentListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_assignmentList
	return p
}

func (*AssignmentListContext) IsAssignmentListContext() {}

func NewAssignmentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentListContext {
	var p = new(AssignmentListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_assignmentList

	return p
}

func (s *AssignmentListContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentListContext) AllAssignmentListElement() []IAssignmentListElementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAssignmentListElementContext); ok {
			len++
		}
	}

	tst := make([]IAssignmentListElementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAssignmentListElementContext); ok {
			tst[i] = t.(IAssignmentListElementContext)
			i++
		}
	}

	return tst
}

func (s *AssignmentListContext) AssignmentListElement(i int) IAssignmentListElementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentListElementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentListElementContext)
}

func (s *AssignmentListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(PHPParserComma)
}

func (s *AssignmentListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(PHPParserComma, i)
}

func (s *AssignmentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitAssignmentList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) AssignmentList() (localctx IAssignmentListContext) {
	this := p
	_ = this

	localctx = NewAssignmentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, PHPParserRULE_assignmentList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2097)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
		{
			p.SetState(2096)
			p.AssignmentListElement()
		}

	}
	p.SetState(2105)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PHPParserComma {
		{
			p.SetState(2099)
			p.Match(PHPParserComma)
		}
		p.SetState(2101)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-1) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&1873497444977737727) != 0 || (int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&70334428244513) != 0 {
			{
				p.SetState(2100)
				p.AssignmentListElement()
			}

		}

		p.SetState(2107)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAssignmentListElementContext is an interface to support dynamic dispatch.
type IAssignmentListElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentListElementContext differentiates from other interfaces.
	IsAssignmentListElementContext()
}

type AssignmentListElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentListElementContext() *AssignmentListElementContext {
	var p = new(AssignmentListElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_assignmentListElement
	return p
}

func (*AssignmentListElementContext) IsAssignmentListElementContext() {}

func NewAssignmentListElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentListElementContext {
	var p = new(AssignmentListElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_assignmentListElement

	return p
}

func (s *AssignmentListElementContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentListElementContext) Chain() IChainContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChainContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChainContext)
}

func (s *AssignmentListElementContext) List() antlr.TerminalNode {
	return s.GetToken(PHPParserList, 0)
}

func (s *AssignmentListElementContext) OpenRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserOpenRoundBracket, 0)
}

func (s *AssignmentListElementContext) AssignmentList() IAssignmentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentListContext)
}

func (s *AssignmentListElementContext) CloseRoundBracket() antlr.TerminalNode {
	return s.GetToken(PHPParserCloseRoundBracket, 0)
}

func (s *AssignmentListElementContext) ArrayItem() IArrayItemContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayItemContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayItemContext)
}

func (s *AssignmentListElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentListElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentListElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitAssignmentListElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) AssignmentListElement() (localctx IAssignmentListElementContext) {
	this := p
	_ = this

	localctx = NewAssignmentListElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, PHPParserRULE_assignmentListElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2115)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 267, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2108)
			p.Chain()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2109)
			p.Match(PHPParserList)
		}
		{
			p.SetState(2110)
			p.Match(PHPParserOpenRoundBracket)
		}
		{
			p.SetState(2111)
			p.AssignmentList()
		}
		{
			p.SetState(2112)
			p.Match(PHPParserCloseRoundBracket)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2114)
			p.ArrayItem()
		}

	}

	return localctx
}

// IModifierContext is an interface to support dynamic dispatch.
type IModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierContext differentiates from other interfaces.
	IsModifierContext()
}

type ModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierContext() *ModifierContext {
	var p = new(ModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_modifier
	return p
}

func (*ModifierContext) IsModifierContext() {}

func NewModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierContext {
	var p = new(ModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_modifier

	return p
}

func (s *ModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierContext) Abstract() antlr.TerminalNode {
	return s.GetToken(PHPParserAbstract, 0)
}

func (s *ModifierContext) Final() antlr.TerminalNode {
	return s.GetToken(PHPParserFinal, 0)
}

func (s *ModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitModifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Modifier() (localctx IModifierContext) {
	this := p
	_ = this

	localctx = NewModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, PHPParserRULE_modifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2117)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PHPParserAbstract || _la == PHPParserFinal) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Label() antlr.TerminalNode {
	return s.GetToken(PHPParserLabel, 0)
}

func (s *IdentifierContext) Key() IKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Identifier() (localctx IIdentifierContext) {
	this := p
	_ = this

	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, PHPParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2121)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PHPParserLabel:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2119)
			p.Match(PHPParserLabel)
		}

	case PHPParserAbstract, PHPParserArray, PHPParserAs, PHPParserBinaryCast, PHPParserBoolType, PHPParserBooleanConstant, PHPParserBreak, PHPParserCallable, PHPParserCase, PHPParserCatch, PHPParserClass, PHPParserClone, PHPParserConst, PHPParserContinue, PHPParserDeclare, PHPParserDefault, PHPParserDo, PHPParserDoubleCast, PHPParserDoubleType, PHPParserEcho, PHPParserElse, PHPParserElseIf, PHPParserEmpty, PHPParserEnum_, PHPParserEndDeclare, PHPParserEndFor, PHPParserEndForeach, PHPParserEndIf, PHPParserEndSwitch, PHPParserEndWhile, PHPParserExtends, PHPParserFinal, PHPParserFinally, PHPParserFloatCast, PHPParserFor, PHPParserForeach, PHPParserFunction_, PHPParserGlobal, PHPParserGoto, PHPParserIf, PHPParserImplements, PHPParserImport, PHPParserInstanceOf, PHPParserInsteadOf, PHPParserInt8Cast, PHPParserInt16Cast, PHPParserInt64Type, PHPParserIntType, PHPParserInterface, PHPParserList, PHPParserLogicalAnd, PHPParserLogicalOr, PHPParserLogicalXor, PHPParserMatch_, PHPParserNamespace, PHPParserNew, PHPParserNull, PHPParserObjectType, PHPParserParent_, PHPParserPartial, PHPParserPrint, PHPParserPrivate, PHPParserProtected, PHPParserPublic, PHPParserReadonly, PHPParserResource, PHPParserReturn, PHPParserStatic, PHPParserStringType, PHPParserSwitch, PHPParserTrait, PHPParserTry, PHPParserTypeof, PHPParserUintCast, PHPParserUnicodeCast, PHPParserUse, PHPParserVar, PHPParserWhile, PHPParserYield, PHPParserFrom, PHPParserLambdaFn, PHPParserTicks, PHPParserEncoding, PHPParserStrictTypes, PHPParserGet, PHPParserSet, PHPParserCall, PHPParserCallStatic, PHPParserConstructor, PHPParserDestruct, PHPParserWakeup, PHPParserSleep, PHPParserAutoload, PHPParserIsSet__, PHPParserUnset__, PHPParserToString__, PHPParserInvoke, PHPParserSetState, PHPParserClone__, PHPParserDebugInfo, PHPParserNamespace__, PHPParserClass__, PHPParserTraic__, PHPParserFunction__, PHPParserMethod__, PHPParserLine__, PHPParserFile__, PHPParserDir__:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2120)
			p.Key()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IKeyContext is an interface to support dynamic dispatch.
type IKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyContext differentiates from other interfaces.
	IsKeyContext()
}

type KeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyContext() *KeyContext {
	var p = new(KeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_key
	return p
}

func (*KeyContext) IsKeyContext() {}

func NewKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyContext {
	var p = new(KeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_key

	return p
}

func (s *KeyContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyContext) Abstract() antlr.TerminalNode {
	return s.GetToken(PHPParserAbstract, 0)
}

func (s *KeyContext) Array() antlr.TerminalNode {
	return s.GetToken(PHPParserArray, 0)
}

func (s *KeyContext) As() antlr.TerminalNode {
	return s.GetToken(PHPParserAs, 0)
}

func (s *KeyContext) BinaryCast() antlr.TerminalNode {
	return s.GetToken(PHPParserBinaryCast, 0)
}

func (s *KeyContext) BoolType() antlr.TerminalNode {
	return s.GetToken(PHPParserBoolType, 0)
}

func (s *KeyContext) BooleanConstant() antlr.TerminalNode {
	return s.GetToken(PHPParserBooleanConstant, 0)
}

func (s *KeyContext) Break() antlr.TerminalNode {
	return s.GetToken(PHPParserBreak, 0)
}

func (s *KeyContext) Callable() antlr.TerminalNode {
	return s.GetToken(PHPParserCallable, 0)
}

func (s *KeyContext) Case() antlr.TerminalNode {
	return s.GetToken(PHPParserCase, 0)
}

func (s *KeyContext) Catch() antlr.TerminalNode {
	return s.GetToken(PHPParserCatch, 0)
}

func (s *KeyContext) Class() antlr.TerminalNode {
	return s.GetToken(PHPParserClass, 0)
}

func (s *KeyContext) Clone() antlr.TerminalNode {
	return s.GetToken(PHPParserClone, 0)
}

func (s *KeyContext) Const() antlr.TerminalNode {
	return s.GetToken(PHPParserConst, 0)
}

func (s *KeyContext) Continue() antlr.TerminalNode {
	return s.GetToken(PHPParserContinue, 0)
}

func (s *KeyContext) Declare() antlr.TerminalNode {
	return s.GetToken(PHPParserDeclare, 0)
}

func (s *KeyContext) Default() antlr.TerminalNode {
	return s.GetToken(PHPParserDefault, 0)
}

func (s *KeyContext) Do() antlr.TerminalNode {
	return s.GetToken(PHPParserDo, 0)
}

func (s *KeyContext) DoubleCast() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleCast, 0)
}

func (s *KeyContext) DoubleType() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleType, 0)
}

func (s *KeyContext) Echo() antlr.TerminalNode {
	return s.GetToken(PHPParserEcho, 0)
}

func (s *KeyContext) Else() antlr.TerminalNode {
	return s.GetToken(PHPParserElse, 0)
}

func (s *KeyContext) ElseIf() antlr.TerminalNode {
	return s.GetToken(PHPParserElseIf, 0)
}

func (s *KeyContext) Empty() antlr.TerminalNode {
	return s.GetToken(PHPParserEmpty, 0)
}

func (s *KeyContext) EndDeclare() antlr.TerminalNode {
	return s.GetToken(PHPParserEndDeclare, 0)
}

func (s *KeyContext) EndFor() antlr.TerminalNode {
	return s.GetToken(PHPParserEndFor, 0)
}

func (s *KeyContext) EndForeach() antlr.TerminalNode {
	return s.GetToken(PHPParserEndForeach, 0)
}

func (s *KeyContext) EndIf() antlr.TerminalNode {
	return s.GetToken(PHPParserEndIf, 0)
}

func (s *KeyContext) EndSwitch() antlr.TerminalNode {
	return s.GetToken(PHPParserEndSwitch, 0)
}

func (s *KeyContext) EndWhile() antlr.TerminalNode {
	return s.GetToken(PHPParserEndWhile, 0)
}

func (s *KeyContext) Extends() antlr.TerminalNode {
	return s.GetToken(PHPParserExtends, 0)
}

func (s *KeyContext) Final() antlr.TerminalNode {
	return s.GetToken(PHPParserFinal, 0)
}

func (s *KeyContext) Finally() antlr.TerminalNode {
	return s.GetToken(PHPParserFinally, 0)
}

func (s *KeyContext) FloatCast() antlr.TerminalNode {
	return s.GetToken(PHPParserFloatCast, 0)
}

func (s *KeyContext) For() antlr.TerminalNode {
	return s.GetToken(PHPParserFor, 0)
}

func (s *KeyContext) Foreach() antlr.TerminalNode {
	return s.GetToken(PHPParserForeach, 0)
}

func (s *KeyContext) Function_() antlr.TerminalNode {
	return s.GetToken(PHPParserFunction_, 0)
}

func (s *KeyContext) Global() antlr.TerminalNode {
	return s.GetToken(PHPParserGlobal, 0)
}

func (s *KeyContext) Goto() antlr.TerminalNode {
	return s.GetToken(PHPParserGoto, 0)
}

func (s *KeyContext) If() antlr.TerminalNode {
	return s.GetToken(PHPParserIf, 0)
}

func (s *KeyContext) Implements() antlr.TerminalNode {
	return s.GetToken(PHPParserImplements, 0)
}

func (s *KeyContext) Import() antlr.TerminalNode {
	return s.GetToken(PHPParserImport, 0)
}

func (s *KeyContext) InstanceOf() antlr.TerminalNode {
	return s.GetToken(PHPParserInstanceOf, 0)
}

func (s *KeyContext) InsteadOf() antlr.TerminalNode {
	return s.GetToken(PHPParserInsteadOf, 0)
}

func (s *KeyContext) Int16Cast() antlr.TerminalNode {
	return s.GetToken(PHPParserInt16Cast, 0)
}

func (s *KeyContext) Int64Type() antlr.TerminalNode {
	return s.GetToken(PHPParserInt64Type, 0)
}

func (s *KeyContext) Int8Cast() antlr.TerminalNode {
	return s.GetToken(PHPParserInt8Cast, 0)
}

func (s *KeyContext) Interface() antlr.TerminalNode {
	return s.GetToken(PHPParserInterface, 0)
}

func (s *KeyContext) IntType() antlr.TerminalNode {
	return s.GetToken(PHPParserIntType, 0)
}

func (s *KeyContext) LambdaFn() antlr.TerminalNode {
	return s.GetToken(PHPParserLambdaFn, 0)
}

func (s *KeyContext) List() antlr.TerminalNode {
	return s.GetToken(PHPParserList, 0)
}

func (s *KeyContext) LogicalAnd() antlr.TerminalNode {
	return s.GetToken(PHPParserLogicalAnd, 0)
}

func (s *KeyContext) LogicalOr() antlr.TerminalNode {
	return s.GetToken(PHPParserLogicalOr, 0)
}

func (s *KeyContext) LogicalXor() antlr.TerminalNode {
	return s.GetToken(PHPParserLogicalXor, 0)
}

func (s *KeyContext) Namespace() antlr.TerminalNode {
	return s.GetToken(PHPParserNamespace, 0)
}

func (s *KeyContext) New() antlr.TerminalNode {
	return s.GetToken(PHPParserNew, 0)
}

func (s *KeyContext) Null() antlr.TerminalNode {
	return s.GetToken(PHPParserNull, 0)
}

func (s *KeyContext) ObjectType() antlr.TerminalNode {
	return s.GetToken(PHPParserObjectType, 0)
}

func (s *KeyContext) Parent_() antlr.TerminalNode {
	return s.GetToken(PHPParserParent_, 0)
}

func (s *KeyContext) Partial() antlr.TerminalNode {
	return s.GetToken(PHPParserPartial, 0)
}

func (s *KeyContext) Print() antlr.TerminalNode {
	return s.GetToken(PHPParserPrint, 0)
}

func (s *KeyContext) Private() antlr.TerminalNode {
	return s.GetToken(PHPParserPrivate, 0)
}

func (s *KeyContext) Protected() antlr.TerminalNode {
	return s.GetToken(PHPParserProtected, 0)
}

func (s *KeyContext) Public() antlr.TerminalNode {
	return s.GetToken(PHPParserPublic, 0)
}

func (s *KeyContext) Readonly() antlr.TerminalNode {
	return s.GetToken(PHPParserReadonly, 0)
}

func (s *KeyContext) Resource() antlr.TerminalNode {
	return s.GetToken(PHPParserResource, 0)
}

func (s *KeyContext) Return() antlr.TerminalNode {
	return s.GetToken(PHPParserReturn, 0)
}

func (s *KeyContext) Static() antlr.TerminalNode {
	return s.GetToken(PHPParserStatic, 0)
}

func (s *KeyContext) StringType() antlr.TerminalNode {
	return s.GetToken(PHPParserStringType, 0)
}

func (s *KeyContext) Switch() antlr.TerminalNode {
	return s.GetToken(PHPParserSwitch, 0)
}

func (s *KeyContext) Trait() antlr.TerminalNode {
	return s.GetToken(PHPParserTrait, 0)
}

func (s *KeyContext) Try() antlr.TerminalNode {
	return s.GetToken(PHPParserTry, 0)
}

func (s *KeyContext) Typeof() antlr.TerminalNode {
	return s.GetToken(PHPParserTypeof, 0)
}

func (s *KeyContext) UintCast() antlr.TerminalNode {
	return s.GetToken(PHPParserUintCast, 0)
}

func (s *KeyContext) UnicodeCast() antlr.TerminalNode {
	return s.GetToken(PHPParserUnicodeCast, 0)
}

func (s *KeyContext) Use() antlr.TerminalNode {
	return s.GetToken(PHPParserUse, 0)
}

func (s *KeyContext) Var() antlr.TerminalNode {
	return s.GetToken(PHPParserVar, 0)
}

func (s *KeyContext) While() antlr.TerminalNode {
	return s.GetToken(PHPParserWhile, 0)
}

func (s *KeyContext) Yield() antlr.TerminalNode {
	return s.GetToken(PHPParserYield, 0)
}

func (s *KeyContext) From() antlr.TerminalNode {
	return s.GetToken(PHPParserFrom, 0)
}

func (s *KeyContext) Enum_() antlr.TerminalNode {
	return s.GetToken(PHPParserEnum_, 0)
}

func (s *KeyContext) Match_() antlr.TerminalNode {
	return s.GetToken(PHPParserMatch_, 0)
}

func (s *KeyContext) Ticks() antlr.TerminalNode {
	return s.GetToken(PHPParserTicks, 0)
}

func (s *KeyContext) Encoding() antlr.TerminalNode {
	return s.GetToken(PHPParserEncoding, 0)
}

func (s *KeyContext) StrictTypes() antlr.TerminalNode {
	return s.GetToken(PHPParserStrictTypes, 0)
}

func (s *KeyContext) Get() antlr.TerminalNode {
	return s.GetToken(PHPParserGet, 0)
}

func (s *KeyContext) Set() antlr.TerminalNode {
	return s.GetToken(PHPParserSet, 0)
}

func (s *KeyContext) Call() antlr.TerminalNode {
	return s.GetToken(PHPParserCall, 0)
}

func (s *KeyContext) CallStatic() antlr.TerminalNode {
	return s.GetToken(PHPParserCallStatic, 0)
}

func (s *KeyContext) Constructor() antlr.TerminalNode {
	return s.GetToken(PHPParserConstructor, 0)
}

func (s *KeyContext) Destruct() antlr.TerminalNode {
	return s.GetToken(PHPParserDestruct, 0)
}

func (s *KeyContext) Wakeup() antlr.TerminalNode {
	return s.GetToken(PHPParserWakeup, 0)
}

func (s *KeyContext) Sleep() antlr.TerminalNode {
	return s.GetToken(PHPParserSleep, 0)
}

func (s *KeyContext) Autoload() antlr.TerminalNode {
	return s.GetToken(PHPParserAutoload, 0)
}

func (s *KeyContext) IsSet__() antlr.TerminalNode {
	return s.GetToken(PHPParserIsSet__, 0)
}

func (s *KeyContext) Unset__() antlr.TerminalNode {
	return s.GetToken(PHPParserUnset__, 0)
}

func (s *KeyContext) ToString__() antlr.TerminalNode {
	return s.GetToken(PHPParserToString__, 0)
}

func (s *KeyContext) Invoke() antlr.TerminalNode {
	return s.GetToken(PHPParserInvoke, 0)
}

func (s *KeyContext) SetState() antlr.TerminalNode {
	return s.GetToken(PHPParserSetState, 0)
}

func (s *KeyContext) Clone__() antlr.TerminalNode {
	return s.GetToken(PHPParserClone__, 0)
}

func (s *KeyContext) DebugInfo() antlr.TerminalNode {
	return s.GetToken(PHPParserDebugInfo, 0)
}

func (s *KeyContext) Namespace__() antlr.TerminalNode {
	return s.GetToken(PHPParserNamespace__, 0)
}

func (s *KeyContext) Class__() antlr.TerminalNode {
	return s.GetToken(PHPParserClass__, 0)
}

func (s *KeyContext) Traic__() antlr.TerminalNode {
	return s.GetToken(PHPParserTraic__, 0)
}

func (s *KeyContext) Function__() antlr.TerminalNode {
	return s.GetToken(PHPParserFunction__, 0)
}

func (s *KeyContext) Method__() antlr.TerminalNode {
	return s.GetToken(PHPParserMethod__, 0)
}

func (s *KeyContext) Line__() antlr.TerminalNode {
	return s.GetToken(PHPParserLine__, 0)
}

func (s *KeyContext) File__() antlr.TerminalNode {
	return s.GetToken(PHPParserFile__, 0)
}

func (s *KeyContext) Dir__() antlr.TerminalNode {
	return s.GetToken(PHPParserDir__, 0)
}

func (s *KeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitKey(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) Key() (localctx IKeyContext) {
	this := p
	_ = this

	localctx = NewKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, PHPParserRULE_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2123)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&-144959677430546433) != 0 || (int64((_la-108)) & ^0x3f) == 0 && ((int64(1)<<(_la-108))&144115188067333119) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMemberModifierContext is an interface to support dynamic dispatch.
type IMemberModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberModifierContext differentiates from other interfaces.
	IsMemberModifierContext()
}

type MemberModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberModifierContext() *MemberModifierContext {
	var p = new(MemberModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_memberModifier
	return p
}

func (*MemberModifierContext) IsMemberModifierContext() {}

func NewMemberModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberModifierContext {
	var p = new(MemberModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_memberModifier

	return p
}

func (s *MemberModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberModifierContext) Public() antlr.TerminalNode {
	return s.GetToken(PHPParserPublic, 0)
}

func (s *MemberModifierContext) Protected() antlr.TerminalNode {
	return s.GetToken(PHPParserProtected, 0)
}

func (s *MemberModifierContext) Private() antlr.TerminalNode {
	return s.GetToken(PHPParserPrivate, 0)
}

func (s *MemberModifierContext) Static() antlr.TerminalNode {
	return s.GetToken(PHPParserStatic, 0)
}

func (s *MemberModifierContext) Abstract() antlr.TerminalNode {
	return s.GetToken(PHPParserAbstract, 0)
}

func (s *MemberModifierContext) Final() antlr.TerminalNode {
	return s.GetToken(PHPParserFinal, 0)
}

func (s *MemberModifierContext) Readonly() antlr.TerminalNode {
	return s.GetToken(PHPParserReadonly, 0)
}

func (s *MemberModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberModifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMemberModifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) MemberModifier() (localctx IMemberModifierContext) {
	this := p
	_ = this

	localctx = NewMemberModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, PHPParserRULE_memberModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2125)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PHPParserAbstract || (int64((_la-81)) & ^0x3f) == 0 && ((int64(1)<<(_la-81))&2327872274433) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMagicConstantContext is an interface to support dynamic dispatch.
type IMagicConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMagicConstantContext differentiates from other interfaces.
	IsMagicConstantContext()
}

type MagicConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMagicConstantContext() *MagicConstantContext {
	var p = new(MagicConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_magicConstant
	return p
}

func (*MagicConstantContext) IsMagicConstantContext() {}

func NewMagicConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MagicConstantContext {
	var p = new(MagicConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_magicConstant

	return p
}

func (s *MagicConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *MagicConstantContext) Namespace__() antlr.TerminalNode {
	return s.GetToken(PHPParserNamespace__, 0)
}

func (s *MagicConstantContext) Class__() antlr.TerminalNode {
	return s.GetToken(PHPParserClass__, 0)
}

func (s *MagicConstantContext) Traic__() antlr.TerminalNode {
	return s.GetToken(PHPParserTraic__, 0)
}

func (s *MagicConstantContext) Function__() antlr.TerminalNode {
	return s.GetToken(PHPParserFunction__, 0)
}

func (s *MagicConstantContext) Method__() antlr.TerminalNode {
	return s.GetToken(PHPParserMethod__, 0)
}

func (s *MagicConstantContext) Line__() antlr.TerminalNode {
	return s.GetToken(PHPParserLine__, 0)
}

func (s *MagicConstantContext) File__() antlr.TerminalNode {
	return s.GetToken(PHPParserFile__, 0)
}

func (s *MagicConstantContext) Dir__() antlr.TerminalNode {
	return s.GetToken(PHPParserDir__, 0)
}

func (s *MagicConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MagicConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MagicConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMagicConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) MagicConstant() (localctx IMagicConstantContext) {
	this := p
	_ = this

	localctx = NewMagicConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, PHPParserRULE_magicConstant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2127)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-157)) & ^0x3f) == 0 && ((int64(1)<<(_la-157))&255) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMagicMethodContext is an interface to support dynamic dispatch.
type IMagicMethodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMagicMethodContext differentiates from other interfaces.
	IsMagicMethodContext()
}

type MagicMethodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMagicMethodContext() *MagicMethodContext {
	var p = new(MagicMethodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_magicMethod
	return p
}

func (*MagicMethodContext) IsMagicMethodContext() {}

func NewMagicMethodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MagicMethodContext {
	var p = new(MagicMethodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_magicMethod

	return p
}

func (s *MagicMethodContext) GetParser() antlr.Parser { return s.parser }

func (s *MagicMethodContext) Get() antlr.TerminalNode {
	return s.GetToken(PHPParserGet, 0)
}

func (s *MagicMethodContext) Set() antlr.TerminalNode {
	return s.GetToken(PHPParserSet, 0)
}

func (s *MagicMethodContext) Call() antlr.TerminalNode {
	return s.GetToken(PHPParserCall, 0)
}

func (s *MagicMethodContext) CallStatic() antlr.TerminalNode {
	return s.GetToken(PHPParserCallStatic, 0)
}

func (s *MagicMethodContext) Constructor() antlr.TerminalNode {
	return s.GetToken(PHPParserConstructor, 0)
}

func (s *MagicMethodContext) Destruct() antlr.TerminalNode {
	return s.GetToken(PHPParserDestruct, 0)
}

func (s *MagicMethodContext) Wakeup() antlr.TerminalNode {
	return s.GetToken(PHPParserWakeup, 0)
}

func (s *MagicMethodContext) Sleep() antlr.TerminalNode {
	return s.GetToken(PHPParserSleep, 0)
}

func (s *MagicMethodContext) Autoload() antlr.TerminalNode {
	return s.GetToken(PHPParserAutoload, 0)
}

func (s *MagicMethodContext) IsSet__() antlr.TerminalNode {
	return s.GetToken(PHPParserIsSet__, 0)
}

func (s *MagicMethodContext) Unset__() antlr.TerminalNode {
	return s.GetToken(PHPParserUnset__, 0)
}

func (s *MagicMethodContext) ToString__() antlr.TerminalNode {
	return s.GetToken(PHPParserToString__, 0)
}

func (s *MagicMethodContext) Invoke() antlr.TerminalNode {
	return s.GetToken(PHPParserInvoke, 0)
}

func (s *MagicMethodContext) SetState() antlr.TerminalNode {
	return s.GetToken(PHPParserSetState, 0)
}

func (s *MagicMethodContext) Clone__() antlr.TerminalNode {
	return s.GetToken(PHPParserClone__, 0)
}

func (s *MagicMethodContext) DebugInfo() antlr.TerminalNode {
	return s.GetToken(PHPParserDebugInfo, 0)
}

func (s *MagicMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MagicMethodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MagicMethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitMagicMethod(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) MagicMethod() (localctx IMagicMethodContext) {
	this := p
	_ = this

	localctx = NewMagicMethodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, PHPParserRULE_magicMethod)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2129)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-141)) & ^0x3f) == 0 && ((int64(1)<<(_la-141))&65535) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrimitiveTypeContext is an interface to support dynamic dispatch.
type IPrimitiveTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitiveTypeContext differentiates from other interfaces.
	IsPrimitiveTypeContext()
}

type PrimitiveTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitiveTypeContext() *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_primitiveType
	return p
}

func (*PrimitiveTypeContext) IsPrimitiveTypeContext() {}

func NewPrimitiveTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_primitiveType

	return p
}

func (s *PrimitiveTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitiveTypeContext) BoolType() antlr.TerminalNode {
	return s.GetToken(PHPParserBoolType, 0)
}

func (s *PrimitiveTypeContext) IntType() antlr.TerminalNode {
	return s.GetToken(PHPParserIntType, 0)
}

func (s *PrimitiveTypeContext) Int64Type() antlr.TerminalNode {
	return s.GetToken(PHPParserInt64Type, 0)
}

func (s *PrimitiveTypeContext) DoubleType() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleType, 0)
}

func (s *PrimitiveTypeContext) StringType() antlr.TerminalNode {
	return s.GetToken(PHPParserStringType, 0)
}

func (s *PrimitiveTypeContext) Resource() antlr.TerminalNode {
	return s.GetToken(PHPParserResource, 0)
}

func (s *PrimitiveTypeContext) ObjectType() antlr.TerminalNode {
	return s.GetToken(PHPParserObjectType, 0)
}

func (s *PrimitiveTypeContext) Array() antlr.TerminalNode {
	return s.GetToken(PHPParserArray, 0)
}

func (s *PrimitiveTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitiveTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitiveTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitPrimitiveType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) PrimitiveType() (localctx IPrimitiveTypeContext) {
	this := p
	_ = this

	localctx = NewPrimitiveTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, PHPParserRULE_primitiveType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2131)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PHPParserArray || _la == PHPParserBoolType || (int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&648588766625136641) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICastOperationContext is an interface to support dynamic dispatch.
type ICastOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCastOperationContext differentiates from other interfaces.
	IsCastOperationContext()
}

type CastOperationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastOperationContext() *CastOperationContext {
	var p = new(CastOperationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PHPParserRULE_castOperation
	return p
}

func (*CastOperationContext) IsCastOperationContext() {}

func NewCastOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastOperationContext {
	var p = new(CastOperationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PHPParserRULE_castOperation

	return p
}

func (s *CastOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *CastOperationContext) BoolType() antlr.TerminalNode {
	return s.GetToken(PHPParserBoolType, 0)
}

func (s *CastOperationContext) Int8Cast() antlr.TerminalNode {
	return s.GetToken(PHPParserInt8Cast, 0)
}

func (s *CastOperationContext) Int16Cast() antlr.TerminalNode {
	return s.GetToken(PHPParserInt16Cast, 0)
}

func (s *CastOperationContext) IntType() antlr.TerminalNode {
	return s.GetToken(PHPParserIntType, 0)
}

func (s *CastOperationContext) Int64Type() antlr.TerminalNode {
	return s.GetToken(PHPParserInt64Type, 0)
}

func (s *CastOperationContext) UintCast() antlr.TerminalNode {
	return s.GetToken(PHPParserUintCast, 0)
}

func (s *CastOperationContext) DoubleCast() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleCast, 0)
}

func (s *CastOperationContext) DoubleType() antlr.TerminalNode {
	return s.GetToken(PHPParserDoubleType, 0)
}

func (s *CastOperationContext) FloatCast() antlr.TerminalNode {
	return s.GetToken(PHPParserFloatCast, 0)
}

func (s *CastOperationContext) StringType() antlr.TerminalNode {
	return s.GetToken(PHPParserStringType, 0)
}

func (s *CastOperationContext) BinaryCast() antlr.TerminalNode {
	return s.GetToken(PHPParserBinaryCast, 0)
}

func (s *CastOperationContext) UnicodeCast() antlr.TerminalNode {
	return s.GetToken(PHPParserUnicodeCast, 0)
}

func (s *CastOperationContext) Array() antlr.TerminalNode {
	return s.GetToken(PHPParserArray, 0)
}

func (s *CastOperationContext) ObjectType() antlr.TerminalNode {
	return s.GetToken(PHPParserObjectType, 0)
}

func (s *CastOperationContext) Resource() antlr.TerminalNode {
	return s.GetToken(PHPParserResource, 0)
}

func (s *CastOperationContext) Unset() antlr.TerminalNode {
	return s.GetToken(PHPParserUnset, 0)
}

func (s *CastOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case PHPParserVisitor:
		return t.VisitCastOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *PHPParser) CastOperation() (localctx ICastOperationContext) {
	this := p
	_ = this

	localctx = NewCastOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, PHPParserRULE_castOperation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2133)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-45)) & ^0x3f) == 0 && ((int64(1)<<(_la-45))&33777272083972109) != 0 || (int64((_la-110)) & ^0x3f) == 0 && ((int64(1)<<(_la-110))&3679233) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *PHPParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 61:
		var t *TypeHintContext = nil
		if localctx != nil {
			t = localctx.(*TypeHintContext)
		}
		return p.TypeHint_Sempred(t, predIndex)

	case 90:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 91:
		var t *FlexiVariableContext = nil
		if localctx != nil {
			t = localctx.(*FlexiVariableContext)
		}
		return p.FlexiVariable_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *PHPParser) TypeHint_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PHPParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 54)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 53)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 52)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 51)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 21)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PHPParser) FlexiVariable_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 23:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 24:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 25:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
