// 放在yakit runner中检查报错信息和位置
var a1 
if 1 {
	a1 = 1
}
b = a1

// not declare variable 
// var a2 -> undefined
if 1 {
	a2 = 1
}
c = a2


try {
	a2 = 1
	a3 = 1
} catch err {
	a2 = 2
	a3 = 2
} finally {
	a2 = 3
	// a3 = 3 // a3 undefined
}
b = a2
b = a3


a = {
	"A": 1,
}

a["A"] = 2
a.A = 3

Key = "B"
a.$Key = 4
a.$UndefineKey = 5

a = f"arst${undefineVariable}"

# freeValue 
{
	a  := 1
	f = () => {
		b := a
	}
}

{
	a := 1
	if 1 {
		b := 2
		f = () => {
			c = a // get a(1) FreeValue 
			c = b // get b(2) FreeValue
			c = d 
		}
	}
}


err := recover()
if err != nil {
	print(err.Error())
}


// 1 = 1 
a = 1

// 1 = n
a = 1, 2
a = 1, 2, 3

// n = n
a, b, c = 1, 2, 3

// m = n 
a, b = 1, 2, 3       // err 2 != 3
a, b, c = 1, 2, 3, 4 // err 3 != 4


param("a") // extern value 
param = "" // value
f =() =>{
	param.a().b() // freeValue 
}

# this function return: (string, error)
codec.DecodeUrl("")
# (1) = (m contain error)
value = codec.DecodeUrl("")
# err not handler
value, err = codec.DecodeUrl("")
# ignore error 
value, _ = codec.DecodeUrl("")
# handle error 
value, err = codec.DecodeUrl("")
die(err) 
// this function with dropError return: (string)
codec.DecodeUrl("")~
a = codec.DecodeUrl("")~
a, err = codec.DecodeUrl("")~

# this function return: ([]byte, []byte, err)
tls.GenerateSM2KeyPair()
# (1) = (3 contain error)
a = tls.GenerateSM2KeyPair()
a = tls.GenerateSM2KeyPair()
a[2]
a = tls.GenerateSM2KeyPair()
e = a[2]
# (2) = (3)
a, b = tls.GenerateSM2KeyPair()
# (3) = (3)
a, b, _ = tls.GenerateSM2KeyPair()

// # this function with dropError return: ([]byte, []byte)
tls.GenerateSM2KeyPair()~ 
a = tls.GenerateSM2KeyPair()~ 
a, b = tls.GenerateSM2KeyPair()~ 
a, b, e = tls.GenerateSM2KeyPair()~ 



# this function: arg(any, string, string, int) ret(int, string)
xhtml.MatchBetween("", "", "", 1)
# this function con't drop error 	
xhtml.MatchBetween("", "", "", 1)~
# arg miss match 
xhtml.MatchBetween("", "", "")

a, b = xhtml.MatchBetween("", "", "", 1)
# (1) = (m not error)
a = xhtml.MatchBetween("", "", "", 1)

a, b = xhtml.MatchBetween("", "", "", 1)
a[1] 
b[1] 


a = 1 
a[1] 
a.B 
b = a.C 

f = () => {return 1}
f.A 
a = f().A 
a = [] 
a.Append(1)

a1 = "aaa"
a1.A 



{
	a1 = 1 
	f = () => {
		print(a1) 
	}
	f()
}
f()

{
	closureA1 := 1
	f2 = () => {
		print(closureA1)
	}
	f2()
}
f2()
