package java

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/yaklang/yaklang/common/yak/ssaapi"
	"github.com/yaklang/yaklang/common/yak/ssaapi/test/ssatest"
)

func Test_Command_Injection(t *testing.T) {
	code := `
	package org.example;

public class Main {
    public static void main(String[] args) {
        String ip = request.getParameter("ip");
        if(null==ip){
            //handle error
        }
        Boolean ret = Pattern.matches("((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))", ip);
        if(!ret){
            //handle error
        }
        String[] cmd = new String[]{"ping", "-c", "2", ip};
        Runtime rt = Runtime.getRuntime();
        Process proc = rt.exec(cmd);
    }
}`

	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			func(prog *ssaapi.Program) error {
				res, err := prog.SyntaxFlowWithError(`request.getParameter() --> as $res`)
				assert.NoError(t, err)
				res.Show()
				assert.Contains(t, res.GetValues("res").String(), "rt.exec")
				return nil
			},
			// 	"res": {"Undefined-rt.exec(valid)(make([]any))"},
			ssaapi.WithLanguage(ssaapi.JAVA),
		)
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		ssatest.CheckSyntaxFlowContain(t, code,
			`Runtime.getRuntime().exec(* #-> as $target)`,
			map[string][]string{
				"target": {"\"-c\"", "\"2\"", "\"ip\"", "\"ping\"", "Undefined-request"},
			}, ssaapi.WithLanguage(ssaapi.JAVA),
		)
	})

}

func Test_Command_Injection_With_WhiteList(t *testing.T) {
	code := `
	package org.example;

public class Main {
   public static void main(String[] args) {
			   String dir=request.getParameter("dir");
		if(dir.length < 1 ){
			dir = "tmp";
		}else {
			dir = "tmp" + dir;
		}
		Runtime runtime=Runtime.getRuntime();
		Process process=runtime.exec(dir);
		int result=process.waitFor();

   }
}`
	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"runtime.exec"}),
			ssaapi.WithLanguage(ssaapi.JAVA))
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		ssatest.CheckSyntaxFlowContain(t, code,
			`Runtime.getRuntime().exec() #-> * as $target`,
			map[string][]string{
				"target": {
					`Undefined-Runtime`,
					`"tmp"`,
					`"tmp"`,
					`Undefined-request`,
					`lt(Undefined-dir.length(valid), 1)`,
					`1`,
					`"dir"`,
					"Undefined-dir.length",
				},
			},
			ssaapi.WithLanguage(ssaapi.JAVA))
	})
}

func Test_SQL_Injection_Statement(t *testing.T) {
	code := `
package org.example;
public class Main {
    public static void main(String[] args) {
        String userName = request.getParameter("name");
        if(null==userName){
            //handle error
        }
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/yak", "yak111", "yak222");;
        String query = "SELECT * FROM Users where user="+userName;
        Statement statement=conn.Statement(query);
        statement.execute();
    }
}`
	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"conn.Statement"}),
			ssaapi.WithLanguage(ssaapi.JAVA),
		)
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		ssatest.CheckSyntaxFlowContain(t, code,
			`DriverManager.getConnection().Statement() #-> * as $target`,
			map[string][]string{
				"target": {
					`Undefined-DriverManager`,
					`"jdbc:mysql://localhost:3306/yak"`,
					`"yak111"`,
					`"yak222"`,
					`"SELECT * FROM Users where user="`,
					`Undefined-request`,
					`"name"`,
				},
			},
			ssaapi.WithLanguage(ssaapi.JAVA))
	})

}

func Test_Code_Injection(t *testing.T) {
	code := `
package org.example;
class Main{
 public static void main(String[] args) {
    Object obj = null;
    try {
        String className = request.getParameter("className");
        if(null==className){
            //handle error
        }
        if (whiteList.containsKey(className)) {                 //白名单
            obj = whiteList.get(className).newInstance();
        }
    } catch (InstantiationException e) {
        //do something
    }
    return obj;
}
	

}`
	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"whiteList.get"}),
			ssaapi.WithLanguage(ssaapi.JAVA))
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		ssatest.CheckSyntaxFlowContain(t, code,
			`whiteList.get(* #->  as $target)`,
			map[string][]string{
				"target": {
					`"className"`,
					"Undefined-request",
				},
			}, ssaapi.WithLanguage(ssaapi.JAVA),
		)
	})
}
