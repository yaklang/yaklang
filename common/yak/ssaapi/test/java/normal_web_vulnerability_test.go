package java

import (
	"github.com/yaklang/yaklang/common/yak/ssaapi"
	"strings"
	"testing"
)

func Test_Command_Injection(t *testing.T) {
	prog, err := ssaapi.Parse(`
	package org.example;

public class Main {
    public static void main(String[] args) {
        String ip = request.getParameter("ip");
        if(null==ip){
            //handle error
        }
        Boolean ret = Pattern.matches("((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))", ip);
        if(!ret){
            //handle error
        }
        String[] cmd = new String[]{"ping", "-c", "2", ip};
        Runtime rt = Runtime.getRuntime();
        Process proc = rt.exec(cmd);
    }
}`, ssaapi.WithLanguage("java"))

	if err != nil {
		t.Fatal("prog parser error", err)
	}

	// reverse code analysis
	isSink := false
	values := prog.Ref("cmd")
	for _, v := range values {
		v.GetAllMember().ForEach(func(v *ssaapi.Value) {
			if strings.Contains(v.GetTopDefs().StringEx(0), "request.getParameter") {
				v.GetTopDefs().Show()
				isSink = true
			}
		})
	}

	if !isSink {
		t.Fatal("no command injection")
	}
}

func Test_Command_Injection_With_WhiteList(t *testing.T) {
	prog, err := ssaapi.Parse(`
	package org.example;

public class Main {
   public static void main(String[] args) {
			   String dir=request.getParameter("dir");
		if(null==dir){
			//handle error
		}
		switch (dir){
			case "test1":dir="test1";
				break;
			case "test2":order_by="test2";
				break;
			default:order_by="test";
		}
		Runtime runtime=Runtime.getRuntime();
		Process process=runtime.exec(new String[]{"ls", dir});
		int result=process.waitFor();
		//do something
   }
}`, ssaapi.WithLanguage("java"))

	if err != nil {
		t.Fatal("prog parser error", err)
	}

	// forward code analysis
	//prog.Show()

	// reverse code analysis
	isSink := false
	for _, v := range prog.Ref("process") {
		callArgs := v.GetCallArgs()
		for _, callArg := range callArgs {
			callArg.GetAllMember().ForEach(func(value *ssaapi.Value) {
				value.GetTopDefs().Show()
				if strings.Contains(value.GetTopDefs().StringEx(0), "Undefined: Undefined-request.getParameter(valid)") {
					isSink = true
				}
			})
		}
	}
	if !isSink {
		t.Fatal("data source can not flow into sink")
	}

}

func Test_SQL_Injection_PreparedStatement(t *testing.T) {
	prog, err := ssaapi.Parse(`public class Main {
    public static void main(String[] args) {
        String userName = request.getParameter("name");
        if(null==userName){
            //handle error
        }
        Connection con = null;
        String query = "SELECT * FROM Users where user=";
        Statement query=conn.Statement(query+userName);
        query.execute();
    }
}`, ssaapi.WithLanguage("java"))
	if err != nil {
		t.Fatal("prog parser error")
	}

	// forward code analysis
	cRef := prog.Ref("request").Ref("\"getParameter\"").GetBottomUses()
	cRef.Show()

	isSink := false
	if strings.Contains(cRef.StringEx(0), "Call: Undefined-conn.Statement(valid)(add(\"SELECT * FROM Users where user=\", Undefined-request.getParameter(valid)(\"name\")))") {
		isSink = true
	}
	if !isSink {
		t.Fatal("data source can not flow into sink")
	}

	// reverse code analysis
	isSink = false
	for _, v := range prog.Ref("query") {
		callArgs := v.GetCallArgs()
		for _, callArg := range callArgs {
			callArg.GetTopDefs().Show()
		}
	}

}

func Test_Path_Travel(t *testing.T) {
	prog, err := ssaapi.Parse(`public class Serve {
  public static String serve(String path) {
    String data="";
    if (path.startsWith("/srv/uploads")) {
      InputStream stream = null ;
      int length; 
      byte[] buf = new byte[1024];
      try {
        File f = new File(path);
        stream = new FileInputStream(f);
        while ((length = stream.read(buf)) != -1) {
          data += new String(buf);
          buf = new byte[1024];
        } 
        data = data.trim();
      } catch (Exception e) {
      e.printStackTrace();
      } finally {
        try { 
          if (stream != null) {
            stream.close();
          } 
        } catch (Exception e) {
          e.printStackTrace();
        } 
      } 
    } 
    return data;
  } 
} 
`, ssaapi.WithLanguage("java"))
	if err != nil {
		t.Fatal("prog parse fail", err)
	}

	prog.Show()

}
