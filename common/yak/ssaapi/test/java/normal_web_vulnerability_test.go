package java

import (
	"strings"
	"testing"

	"github.com/yaklang/yaklang/common/yak/ssaapi"
	"github.com/yaklang/yaklang/common/yak/ssaapi/ssatest"
)

func Test_Command_Injection(t *testing.T) {
	code := `
	package org.example;

public class Main {
    public static void main(String[] args) {
        String ip = request.getParameter("ip");
        if(null==ip){
            //handle error
        }
        Boolean ret = Pattern.matches("((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))", ip);
        if(!ret){
            //handle error
        }
        String[] cmd = new String[]{"ping", "-c", "2", ip};
        Runtime rt = Runtime.getRuntime();
        Process proc = rt.exec(cmd);
    }
}`

	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"rt.exec"}),
			ssaapi.JAVA)
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		prog, err := ssaapi.Parse(code, ssaapi.WithLanguage("java"))
		if err != nil {
			t.Fatal("prog parse error", err)
		}

		isSink := false
		runtime := prog.Ref("Runtime").Ref("getRuntime")[0].GetCalledBy()
		exec := runtime.Ref("exec")[0]
		args := exec.GetCalledBy()[0].GetCallArgs()
		args.GetTopDefs().ShowWithSource()
		if strings.Contains(args.GetTopDefs().StringEx(0), "request.getParameter") {
			isSink = true
		}
		if !isSink {
			t.Fatal("data can not flow into sink")
		}
	})

}

func Test_Command_Injection_With_WhiteList(t *testing.T) {
	code := `
	package org.example;

public class Main {
   public static void main(String[] args) {
			   String dir=request.getParameter("dir");
		if(dir.length < 1 ){
			dir = "tmp";
		}else {
			dir = "tmp" + dir;
		}
		Runtime runtime=Runtime.getRuntime();
		Process process=runtime.exec(dir);
		int result=process.waitFor();

   }
}`
	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"runtime.exec"}),
			ssaapi.JAVA)
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		prog, err := ssaapi.Parse(code,
			ssaapi.WithLanguage("java"))
		if err != nil {
			t.Fatal("prog parse error", err)
		}

		isSink := false
		runtime := prog.Ref("Runtime").Ref("getRuntime")[0].GetCalledBy()
		exec := runtime.Ref("exec")[0]
		args := exec.GetCalledBy()[0].GetCallArgs()
		for _, arg := range args {
			arg.GetTopDefs().ShowWithSource()
			if strings.Contains(arg.GetTopDefs().StringEx(0), "request.getParameter") {
				isSink = true
			}
		}

		if !isSink {
			t.Fatal("data can not flow into sink")
		}

	})
}

func Test_SQL_Injection_Statement(t *testing.T) {
	code := `public class Main {
    public static void main(String[] args) {
        String userName = request.getParameter("name");
        if(null==userName){
            //handle error
        }
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/yak", "yak111", "yak222");;
        String query = "SELECT * FROM Users where user="+userName;
        Statement statement=conn.Statement(query);
        statement.execute();
    }
}`
	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"conn.Statement"}),
			ssaapi.JAVA,
		)
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		prog, err := ssaapi.Parse(code, ssaapi.WithLanguage("java"))
		if err != nil {
			t.Fatal("prog parse error", err)
		}

		isSink := false
		conn := prog.Ref("DriverManager").Ref("getConnection")[0].GetCalledBy()
		statement := conn.Ref("Statement")[0].GetCalledBy()
		args := statement[0].GetCallArgs()

		for _, arg := range args {
			arg.GetTopDefs().Show()
			if strings.Contains(arg.GetTopDefs().StringEx(0), "request.getParameter") {
				// sql有执行statement.execute();
				if statement.Ref("execute") != nil {
					isSink = true
				}
			}
		}

		if !isSink {
			t.Fatal("data can not flow into sink")
		}

	})

}

func Test_Code_Injection(t *testing.T) {
	code := `class Main{
 public static void main(String[] args) {
    Object obj = null;
    try {
        String className = request.getParameter("className");
        if(null==className){
            //handle error
        }
        if (whiteList.containsKey(className)) {                 //白名单
            obj = whiteList.get(className).newInstance();
        }
    } catch (InstantiationException e) {
        //do something
    }
    return obj;
}
	

}`
	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"whiteList.get"}),
			ssaapi.JAVA)
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		prog, err := ssaapi.Parse(code, ssaapi.WithLanguage("java"))
		if err != nil {
			t.Fatal("prog parse error", err)
		}

		isSink := false
		get := prog.Ref("whiteList").Ref("get")[0].GetCalledBy()
		args := get[0].GetCallArgs()
		for _, arg := range args {
			arg.GetTopDefs().ShowWithSource()
			if strings.Contains(arg.GetTopDefs().StringEx(0), "request.getParameter") {
				isSink = true
			}
		}

		if !isSink {
			t.Fatal("data can not flow into sink")
		}
	})
}

func Test_Directory_Traversal(t *testing.T) {
	code := `
public class main {
	public static void main(String[] args) {
		String directory=request.getParameter("directory");
			if(null==directory){
				//handle error
			}
			switch (directory){
				case "./image": directory="./image";
					break;
				case "./page": directory="./page";
					break;
				default:directory="./image";
			}
			while(line = readFile(directory))
			{
				//do something
			}
	}
}
`
	prog, err := ssaapi.Parse(code, ssaapi.WithLanguage("java"))
	if err != nil {
		t.Fatal("prog parse fail", err)
	}

	isSafe := true
	readFile := prog.Ref("readFile")[0].GetCalledBy()
	directory := readFile[0].GetCallArgs().GetTopDefs()
	directory.ShowWithSource()
	if strings.Contains(directory.StringEx(0), "request.getParameter") {
		isSafe = false
	}

	if !isSafe {
		t.Fatal("directory traversal vulnerability is detected")
	}

}
