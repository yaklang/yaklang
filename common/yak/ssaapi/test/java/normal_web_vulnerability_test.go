package java

import (
	"github.com/yaklang/yaklang/common/yak/ssaapi"
	"github.com/yaklang/yaklang/common/yak/ssaapi/ssatest"
	"strings"
	"testing"
)

func Test_Command_Injection(t *testing.T) {
	code := `
	package org.example;

public class Main {
    public static void main(String[] args) {
        String ip = request.getParameter("ip");
        if(null==ip){
            //handle error
        }
        Boolean ret = Pattern.matches("((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))", ip);
        if(!ret){
            //handle error
        }
        String[] cmd = new String[]{"ping", "-c", "2", ip};
        Runtime rt = Runtime.getRuntime();
        Process proc = rt.exec(cmd);
    }
}`

	//t.Run("forward code analysis", func(t *testing.T) {
	//	ssatest.Check(t, code,
	//		ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"re.exec"}),
	//		ssaapi.JAVA)
	//})

	t.Run("reverse code analysis", func(t *testing.T) {
		prog, err := ssaapi.Parse(code, ssaapi.WithLanguage("java"))
		if err != nil {
			t.Fatal("prog parse error", err)
		}

		isSink := false
		runtime := prog.Ref("Runtime").Ref("getRuntime")[0].GetCalledBy()
		exec := runtime.Ref("exec")[0]
		args := exec.GetCalledBy()[0].GetCallArgs()
		for _, arg := range args {
			arg.GetAllMember().GetTopDefs().Show()
			if strings.Contains(arg.GetAllMember().GetTopDefs().StringEx(0), "request.getParameter") {
				isSink = true
			}
		}

		if !isSink {
			t.Fatal("data can not flow into sink")
		}
	})

}

func Test_Command_Injection_With_WhiteList(t *testing.T) {
	code := `
	package org.example;

public class Main {
   public static void main(String[] args) {
			   String dir=request.getParameter("dir");
		if(dir.length < 1 ){
			dir = "tmp";
		}else {
			dir = "tmp" + dir;
		}
		Runtime runtime=Runtime.getRuntime();
		Process process=runtime.exec(dir);
		int result=process.waitFor();

   }
}`
	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"runtime.exec"}),
			ssaapi.JAVA)
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		prog, err := ssaapi.Parse(code,
			ssaapi.WithLanguage("java"))
		if err != nil {
			t.Fatal("prog parse error", err)
		}

		isSink := false
		runtime := prog.Ref("Runtime").Ref("getRuntime")[0].GetCalledBy()
		exec := runtime.Ref("exec")[0]
		args := exec.GetCalledBy()[0].GetCallArgs()
		for _, arg := range args {
			arg.GetTopDefs().ShowWithSource()
			if strings.Contains(arg.GetTopDefs().StringEx(0), "request.getParameter") {
				isSink = true
			}
		}

		if !isSink {
			t.Fatal("data can not flow into sink")
		}

	})
}

func Test_SQL_Injection_PreparedStatement(t *testing.T) {
	code := `public class Main {
    public static void main(String[] args) {
        String userName = request.getParameter("name");
        if(null==userName){
            //handle error
        }
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/yak", "yak111", "yak222");;
        String query = "SELECT * FROM Users where user="+userName;
        Statement statement=conn.Statement(query);
        statement.execute();
    }
}`
	t.Run("forward code analysis", func(t *testing.T) {
		ssatest.Check(t, code,
			ssatest.CheckBottomUserCall_Contain("request.getParameter", []string{"conn.Statement"}),
			ssaapi.JAVA,
		)
	})

	t.Run("reverse code analysis", func(t *testing.T) {
		prog, err := ssaapi.Parse(code, ssaapi.WithLanguage("java"))
		if err != nil {
			t.Fatal("prog parse error", err)
		}

		isSink := false
		conn := prog.Ref("DriverManager").Ref("getConnection")[0].GetCalledBy()
		statement := conn.Ref("Statement")[0].GetCalledBy()
		args := statement[0].GetCallArgs()

		for _, arg := range args {
			arg.GetTopDefs().Show()
			if strings.Contains(arg.GetTopDefs().StringEx(0), "request.getParameter") {
				// sql有执行statement.execute();
				if statement.Ref("execute") != nil {
					isSink = true
				}
			}
		}

		if !isSink {
			t.Fatal("data can not flow into sink")
		}

	})

}
