host, port = tcp.MockTCPProtocol("aaaa")
targets = []
targets.Push(str.HostPort(host, port))

host2, port2 = tcp.MockTCPProtocol("ccccc")
targets.Push(str.HostPort(host2, port2))

count = 0
countLock = sync.NewLock()
bruter, err := brute.New(
    "ssh",
    brute.concurrentTarget(256),
    brute.debug(true),
    brute.userList("root", "root123"),
    brute.passList("admin123", "password"),
    brute.okToStop(true),
    brute.bruteHandler(fn(i) {
        countLock.Lock()
        count++
        countLock.Unlock()
        result = i.Result()

        if result.Target.Contains(f"${port2}") {
            dump(f"SKIP PORT2: ${port2}")
            die("1")
            return result
        }


        if result.Username == "root123" && result.Password == "password" {
            result.Ok = true
            return result
        }
        die("1")
        return result
    }),
)
die(err)

res, err := bruter.Start(targets...)
die(err)

check = false
for res := range res {
    if res.Ok {
        check = true
    }

    println(res.String())
}

dump(count)
assert count == 8
assert check