token = str.RandStr(16)
prefix = "token=%#v" % token
for index in 5 {
    db.SetKey(f"${token}_${index+1}", 0)
}

yakit.AutoInitYakit();

name = db.CreateTemporaryYakScript("mitm",  prefix + `
yakit.AutoInitYakit();
mirrorHTTPFlow = (isHttps, url, req, rsp, body) => {
    var key = f"${token}_1"
    db.SetKey(key, atoi(db.GetKey(key))~ + 1)
}

mirrorNewWebsite = (https, url, req, rsp, body) => {
    var key = f"${token}_2"
    db.SetKey(key, atoi(db.GetKey(key))~ + 1)
}

mirrorNewWebsitePath = (https, url, req, rsp, body) => {
    var key = f"${token}_3"
    db.SetKey(key, atoi(db.GetKey(key))~ + 1)
}

mirrorNewWebsitePathParams = (https, url, req, rsp, body) => {
    var key = f"${token}_4"
    db.SetKey(key, atoi(db.GetKey(key))~ + 1)
}
`)~
defer db.DeleteYakScriptByName(name)


name2 = db.CreateTemporaryYakScript("port-scan", prefix + `
handle = (result) => {
    var key = f"${token}_5"
    db.SetKey(key, atoi(db.GetKey(key))~ + 1)
    dump(result)
}
`)~
defer db.DeleteYakScriptByName(name2)


caller = hook.NewMixPluginCaller()~
die(caller.LoadPlugin(name))
die(caller.LoadPlugin(name2))

host, port = str.ParseStringToHostPort(getParam("VULINBOX"))~
addr = f"${host}:${port}"

for url in [
    f"https://${addr}/abc/",
    f"https://${addr}/abc/12",
    f"https://${addr}/abc/13",
    f"https://${addr}/abc/14",
    f"https://${addr}/abc/14?a=1",
    f"https://${addr}/abc/14?a=1",
    f"https://${addr}/abc/14?a=2",
    f"https://${addr}/abc/14?a=2&&c=1",
    f"https://${addr}/abc/14?a=2&&c=1",
    f"https://localhost:${port}/abc/14?a=2&&c=1",
] {
    isHttps, req = poc.ParseUrlToHTTPRequestRaw("GET", url)~
    caller.MirrorHTTPFlow(isHttps, url, req, []byte(""), []byte(""))
}


caller.Wait()

assert atoi(db.GetKey(f"${token}_1"))~ == 10,f"mirrorHTTPFlow: ${atoi(db.GetKey(f`${token}_1`))~}"
assert atoi(db.GetKey(f"${token}_2"))~ == 2,f"mirrorHTTPFlow: ${atoi(db.GetKey(f`${token}_3`))~}"
assert atoi(db.GetKey(f"${token}_3"))~ == 5,f"mirrorHTTPFlow: ${atoi(db.GetKey(f`${token}_3`))~}"
v = atoi(db.GetKey(f`${token}_4`))~
dump(v)
assert v == 7, f"mirrorNewWebsitePathParams trigger ${v}"
assert atoi(db.GetKey(f`${token}_5`))~ == 2, "portscan failed"

