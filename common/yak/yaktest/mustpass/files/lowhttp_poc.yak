port = os.GetRandomAvailableTCPPort()
check = false
check2 = false
check3 = false
check4 = false
check5 = false
check6 = false
rs = randstr(100)
rs1 = randstr(1000)
go func {
    httpserver.Serve(
        "0.0.0.0",
        port,
        httpserver.handler((rsp, req) => {
            raw = http.dump(req)~
            reqBytes = http.dump(req)~
            println(string(reqBytes))
            if raw.Contains("application/json") && raw.Contains(`"a":`) && raw.Contains(`"b"`) {
                check = true
            }
            if raw.Contains(rs) {
                check2 = true
            }
            if raw.Contains("x-www-form-urlencoded") {
                check3 = true
            }
            if !raw.Contains("x-www-form-urlencoded") && raw.Contains(rs1) {
                check4 = true
            }
            if raw.Contains("query?" + rs1) {
                check5 = true
            }
            if raw.Contains("query?a=b") { check6 = true }
            rsp.Write(`{"key": "value"}`)
        }),
    )~
}

os.WaitConnect(f"127.0.0.1:${port}", 3)~
rsp, req = poc.Post(f"http://127.0.0.1:${port}", poc.json({"a": "b"}))~
assert check
assert rsp.Json().key == "value"
poc.Post(f"http://127.0.0.1:${port}", poc.body(rs))~
assert check2

poc.Post(f"http://127.0.0.1:${port}", poc.postParams({"a": "b"}))~; assert check3;
poc.Post(f"http://127.0.0.1:${port}", poc.postData(rs1))~; assert check4;
poc.Post(f"http://127.0.0.1:${port}/query", poc.query(rs1))~; assert check5;
poc.Post(f"http://127.0.0.1:${port}/query", poc.query({"a": "b"}))~; assert check6;