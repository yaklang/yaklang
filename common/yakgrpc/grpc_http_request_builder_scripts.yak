pluginName = "被动指纹检测"
ctx = context.Background()
reqs = [{"RawHTTPRequest": b`GET / HTTP/1.1
Host: www.example.com
`, "IsHttps": true}]

isUrlParam = false
pluginType = "mitm"
isSmoking = false
runtimeId = ""
if getParams("REQUESTS") != undefined {
    reqs = getParams("REQUESTS")
    ctx = getParams("CTX")
    pluginName = getParams("PLUGIN_NAME")
    isUrlParam = getParams("IS_URL_PARAM")
    pluginType = getParams("PLUGIN_TYPE")
    isSmoking = getParams("IS_SMOKING")
    runtimeId = getParams("RUNTIME_ID")
}

/*
Init Yakit
*/
yakit.AutoInitYakit()
yakit.Info("Start to load plugin: %v", pluginName)
yakit.Info("RuntimeID: %v", RUNTIME_ID)

caller, err := hook.NewMixPluginCaller()
if err != nil { die(err) }
caller.SetRuntimeId(runtimeId)
err = caller.LoadPluginByName(ctx,pluginName,[])
if err != nil { die(err) }
caller.SetCache(false)
caller.SetConcurrent(len(reqs))

swg = sync.NewSizedWaitGroup(10)
filter = str.NewFilter()
for req in reqs {
    reqHash = codec.Sha256(sprintf("%v:%v", req.IsHttps, req.RawHTTPRequest))
    if filter.Exist(reqHash) {
        continue
    }
    filter.Insert(reqHash)

    swg.Add()
    req := req
    go fn {
        defer swg.Done()
        try {
            if isUrlParam {
                u = str.ExtractURLFromHTTPRequestRaw(req.RawHTTPRequest, req.IsHttps /*type: bool*/)~
                caller.MirrorHTTPFlow(req.IsHttps, u.String(), req.RawHTTPRequest, "", "")
            } else {
                rspIns, _ := poc.HTTPEx(req.RawHTTPRequest, poc.https(req.IsHttps))~
                rsp = rspIns.RawPacket
                firstRsp = rspIns.RedirectRawPackets[0].Response
                firstReq = rspIns.RedirectRawPackets[0].Request
                reqRaw = rspIns.RedirectRawPackets[-1].Request
                if poc.GetHTTPPacketHeader(firstRsp, "Set-Cookie") == "" {
                    reqRaw = firstReq
                }
                println("---------------------")
                println(string(reqRaw))
                println(string(rsp))
                println("---------------------")
                isHttps = req.IsHttps

                u = str.ExtractURLFromHTTPRequestRaw(reqRaw, isHttps /*type: bool*/)~
                header, body = poc.Split(rsp)~
                caller.MirrorHTTPFlowEx(!isSmoking, isHttps, u.String(), reqRaw, rsp, body)
            }
        } catch err {
            println("===================packet=================== \n%v" % string(req.RawHTTPRequest))
            log.warn("exec request failed: %v", err)
        }
    }
}
swg.Wait()
caller.Wait()