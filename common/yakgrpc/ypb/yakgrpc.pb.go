// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.2
// source: yakgrpc.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WebShell
type ShellType int32

const (
	ShellType_Behinder ShellType = 0
	ShellType_Godzilla ShellType = 1
	ShellType_YakShell ShellType = 2
)

// Enum value maps for ShellType.
var (
	ShellType_name = map[int32]string{
		0: "Behinder",
		1: "Godzilla",
		2: "YakShell",
	}
	ShellType_value = map[string]int32{
		"Behinder": 0,
		"Godzilla": 1,
		"YakShell": 2,
	}
)

func (x ShellType) Enum() *ShellType {
	p := new(ShellType)
	*p = x
	return p
}

func (x ShellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellType) Descriptor() protoreflect.EnumDescriptor {
	return file_yakgrpc_proto_enumTypes[0].Descriptor()
}

func (ShellType) Type() protoreflect.EnumType {
	return &file_yakgrpc_proto_enumTypes[0]
}

func (x ShellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShellType.Descriptor instead.
func (ShellType) EnumDescriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{0}
}

type ShellScript int32

const (
	ShellScript_JSP  ShellScript = 0
	ShellScript_JSPX ShellScript = 1
	ShellScript_ASP  ShellScript = 2
	ShellScript_ASPX ShellScript = 3
	ShellScript_PHP  ShellScript = 4
)

// Enum value maps for ShellScript.
var (
	ShellScript_name = map[int32]string{
		0: "JSP",
		1: "JSPX",
		2: "ASP",
		3: "ASPX",
		4: "PHP",
	}
	ShellScript_value = map[string]int32{
		"JSP":  0,
		"JSPX": 1,
		"ASP":  2,
		"ASPX": 3,
		"PHP":  4,
	}
)

func (x ShellScript) Enum() *ShellScript {
	p := new(ShellScript)
	*p = x
	return p
}

func (x ShellScript) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellScript) Descriptor() protoreflect.EnumDescriptor {
	return file_yakgrpc_proto_enumTypes[1].Descriptor()
}

func (ShellScript) Type() protoreflect.EnumType {
	return &file_yakgrpc_proto_enumTypes[1]
}

func (x ShellScript) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShellScript.Descriptor instead.
func (ShellScript) EnumDescriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{1}
}

type EncMode int32

const (
	EncMode_Raw       EncMode = 0
	EncMode_Base64    EncMode = 1
	EncMode_AesRaw    EncMode = 2
	EncMode_AesBase64 EncMode = 3
	EncMode_XorRaw    EncMode = 4
	EncMode_XorBase64 EncMode = 5
)

// Enum value maps for EncMode.
var (
	EncMode_name = map[int32]string{
		0: "Raw",
		1: "Base64",
		2: "AesRaw",
		3: "AesBase64",
		4: "XorRaw",
		5: "XorBase64",
	}
	EncMode_value = map[string]int32{
		"Raw":       0,
		"Base64":    1,
		"AesRaw":    2,
		"AesBase64": 3,
		"XorRaw":    4,
		"XorBase64": 5,
	}
)

func (x EncMode) Enum() *EncMode {
	p := new(EncMode)
	*p = x
	return p
}

func (x EncMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yakgrpc_proto_enumTypes[2].Descriptor()
}

func (EncMode) Type() protoreflect.EnumType {
	return &file_yakgrpc_proto_enumTypes[2]
}

func (x EncMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncMode.Descriptor instead.
func (EncMode) EnumDescriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{2}
}

type GenerateYakCodeByPacketRequest_Template int32

const (
	GenerateYakCodeByPacketRequest_Ordinary GenerateYakCodeByPacketRequest_Template = 0
	GenerateYakCodeByPacketRequest_Batch    GenerateYakCodeByPacketRequest_Template = 1
)

// Enum value maps for GenerateYakCodeByPacketRequest_Template.
var (
	GenerateYakCodeByPacketRequest_Template_name = map[int32]string{
		0: "Ordinary",
		1: "Batch",
	}
	GenerateYakCodeByPacketRequest_Template_value = map[string]int32{
		"Ordinary": 0,
		"Batch":    1,
	}
)

func (x GenerateYakCodeByPacketRequest_Template) Enum() *GenerateYakCodeByPacketRequest_Template {
	p := new(GenerateYakCodeByPacketRequest_Template)
	*p = x
	return p
}

func (x GenerateYakCodeByPacketRequest_Template) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateYakCodeByPacketRequest_Template) Descriptor() protoreflect.EnumDescriptor {
	return file_yakgrpc_proto_enumTypes[3].Descriptor()
}

func (GenerateYakCodeByPacketRequest_Template) Type() protoreflect.EnumType {
	return &file_yakgrpc_proto_enumTypes[3]
}

func (x GenerateYakCodeByPacketRequest_Template) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateYakCodeByPacketRequest_Template.Descriptor instead.
func (GenerateYakCodeByPacketRequest_Template) EnumDescriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{353, 0}
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_yakgrpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{0}
}

type VersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_yakgrpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GeneralResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneralResponse) Reset() {
	*x = GeneralResponse{}
	mi := &file_yakgrpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneralResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralResponse) ProtoMessage() {}

func (x *GeneralResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralResponse.ProtoReflect.Descriptor instead.
func (*GeneralResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{2}
}

func (x *GeneralResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GeneralResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DeleteYakScriptRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Ids           []int64                `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteYakScriptRequest) Reset() {
	*x = DeleteYakScriptRequest{}
	mi := &file_yakgrpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptRequest) ProtoMessage() {}

func (x *DeleteYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteYakScriptRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteYakScriptRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ExecBatchYakScriptRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 目标会被自动拆分
	Target     string `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	TargetFile string `protobuf:"bytes,11,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	// 额外参数可以被添加
	ExtraParams []*ExecParamItem `protobuf:"bytes,7,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
	// 筛选与限制
	Keyword               string   `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	ExcludedYakScript     []string `protobuf:"bytes,22,rep,name=ExcludedYakScript,proto3" json:"ExcludedYakScript,omitempty"`
	DisableNucleiWorkflow bool     `protobuf:"varint,23,opt,name=DisableNucleiWorkflow,proto3" json:"DisableNucleiWorkflow,omitempty"`
	Limit                 int64    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// 默认总用时
	TotalTimeoutSeconds int64 `protobuf:"varint,4,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	// 模块类型，默认为 nuclei
	Type string `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	// 并发（进程）
	Concurrent int64 `protobuf:"varint,6,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	// 精确使用脚本名称
	// 要注意，这个 Scripts 和 PluginFilter 是冲突的
	ScriptNames []string `protobuf:"bytes,8,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	// Tags with exclude / include
	PluginFilter       *QueryYakScriptRequest `protobuf:"bytes,12,opt,name=PluginFilter,proto3" json:"PluginFilter,omitempty"`
	EnablePluginFilter bool                   `protobuf:"varint,13,opt,name=EnablePluginFilter,proto3" json:"EnablePluginFilter,omitempty"`
	// 设置一个代理
	Proxy string `protobuf:"bytes,14,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	// 每个进程的任务数量
	ProgressTaskCount int64 `protobuf:"varint,15,opt,name=ProgressTaskCount,proto3" json:"ProgressTaskCount,omitempty"`
	// 基础进度 - 这个默认是 0.1 一般别用，只在 Recover 的时候可能才会有用处
	BaseProgress float64 `protobuf:"fixed64,16,opt,name=BaseProgress,proto3" json:"BaseProgress,omitempty"`
	// 这个很关键，不然会报错
	FromRecover          bool   `protobuf:"varint,17,opt,name=FromRecover,proto3" json:"FromRecover,omitempty"`
	YakScriptOnlineGroup string `protobuf:"bytes,18,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string `protobuf:"bytes,19,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ExecBatchYakScriptRequest) Reset() {
	*x = ExecBatchYakScriptRequest{}
	mi := &file_yakgrpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecBatchYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptRequest) ProtoMessage() {}

func (x *ExecBatchYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{4}
}

func (x *ExecBatchYakScriptRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetExtraParams() []*ExecParamItem {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetExcludedYakScript() []string {
	if x != nil {
		return x.ExcludedYakScript
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetDisableNucleiWorkflow() bool {
	if x != nil {
		return x.DisableNucleiWorkflow
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetPluginFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.PluginFilter
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetEnablePluginFilter() bool {
	if x != nil {
		return x.EnablePluginFilter
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetProgressTaskCount() int64 {
	if x != nil {
		return x.ProgressTaskCount
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetBaseProgress() float64 {
	if x != nil {
		return x.BaseProgress
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetFromRecover() bool {
	if x != nil {
		return x.FromRecover
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type ExecBatchYakScriptResult struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Status      string                 `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Ok          bool                   `protobuf:"varint,4,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason      string                 `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Exploitable bool                   `protobuf:"varint,6,opt,name=Exploitable,proto3" json:"Exploitable,omitempty"`
	// 脚本的详细信息
	PoC    *YakScript  `protobuf:"bytes,7,opt,name=PoC,proto3" json:"PoC,omitempty"`
	Result *ExecResult `protobuf:"bytes,8,opt,name=Result,proto3" json:"Result,omitempty"`
	// 如果是整体进度信息，则在这儿展示
	// 处理这几个消息的时候，其他都不应该生效
	ProgressMessage bool    `protobuf:"varint,9,opt,name=ProgressMessage,proto3" json:"ProgressMessage,omitempty"`
	ProgressPercent float64 `protobuf:"fixed64,10,opt,name=ProgressPercent,proto3" json:"ProgressPercent,omitempty"`
	ProgressTotal   int64   `protobuf:"varint,11,opt,name=ProgressTotal,proto3" json:"ProgressTotal,omitempty"`
	ProgressCount   int64   `protobuf:"varint,12,opt,name=ProgressCount,proto3" json:"ProgressCount,omitempty"`
	// 正在执行中的进程数
	ProgressRunning int64 `protobuf:"varint,17,opt,name=ProgressRunning,proto3" json:"ProgressRunning,omitempty"`
	// 正在执行中的扫描任务数量
	ScanTaskExecutingCount int64 `protobuf:"varint,18,opt,name=ScanTaskExecutingCount,proto3" json:"ScanTaskExecutingCount,omitempty"`
	// 任务相关内容
	Target     string           `protobuf:"bytes,13,opt,name=Target,proto3" json:"Target,omitempty"`
	ExtraParam []*ExecParamItem `protobuf:"bytes,14,rep,name=ExtraParam,proto3" json:"ExtraParam,omitempty"`
	TaskId     string           `protobuf:"bytes,15,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	// 当前时间
	Timestamp     int64 `protobuf:"varint,16,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecBatchYakScriptResult) Reset() {
	*x = ExecBatchYakScriptResult{}
	mi := &file_yakgrpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecBatchYakScriptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptResult) ProtoMessage() {}

func (x *ExecBatchYakScriptResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptResult.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{5}
}

func (x *ExecBatchYakScriptResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExploitable() bool {
	if x != nil {
		return x.Exploitable
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetPoC() *YakScript {
	if x != nil {
		return x.PoC
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetResult() *ExecResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetProgressMessage() bool {
	if x != nil {
		return x.ProgressMessage
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetProgressPercent() float64 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressTotal() int64 {
	if x != nil {
		return x.ProgressTotal
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressCount() int64 {
	if x != nil {
		return x.ProgressCount
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressRunning() int64 {
	if x != nil {
		return x.ProgressRunning
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetScanTaskExecutingCount() int64 {
	if x != nil {
		return x.ScanTaskExecutingCount
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExtraParam() []*ExecParamItem {
	if x != nil {
		return x.ExtraParam
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetYakScriptByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYakScriptByIdRequest) Reset() {
	*x = GetYakScriptByIdRequest{}
	mi := &file_yakgrpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYakScriptByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByIdRequest) ProtoMessage() {}

func (x *GetYakScriptByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByIdRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetYakScriptByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetYakScriptByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	UUID          string                 `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYakScriptByNameRequest) Reset() {
	*x = GetYakScriptByNameRequest{}
	mi := &file_yakgrpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYakScriptByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByNameRequest) ProtoMessage() {}

func (x *GetYakScriptByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByNameRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByNameRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetYakScriptByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetYakScriptByNameRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type GetYakScriptByOnlineIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UUID          string                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OnlineID      int64                  `protobuf:"varint,2,opt,name=OnlineID,proto3" json:"OnlineID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYakScriptByOnlineIDRequest) Reset() {
	*x = GetYakScriptByOnlineIDRequest{}
	mi := &file_yakgrpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYakScriptByOnlineIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByOnlineIDRequest) ProtoMessage() {}

func (x *GetYakScriptByOnlineIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByOnlineIDRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByOnlineIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetYakScriptByOnlineIDRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *GetYakScriptByOnlineIDRequest) GetOnlineID() int64 {
	if x != nil {
		return x.OnlineID
	}
	return 0
}

type VerifySystemCertificateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Valid         bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifySystemCertificateResponse) Reset() {
	*x = VerifySystemCertificateResponse{}
	mi := &file_yakgrpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifySystemCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySystemCertificateResponse) ProtoMessage() {}

func (x *VerifySystemCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySystemCertificateResponse.ProtoReflect.Descriptor instead.
func (*VerifySystemCertificateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{9}
}

func (x *VerifySystemCertificateResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *VerifySystemCertificateResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ExportKnowledgeBaseRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseId,proto3" json:"KnowledgeBaseId,omitempty"`
	TargetPath      string                 `protobuf:"bytes,2,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExportKnowledgeBaseRequest) Reset() {
	*x = ExportKnowledgeBaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKnowledgeBaseRequest) ProtoMessage() {}

func (x *ExportKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*ExportKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{10}
}

func (x *ExportKnowledgeBaseRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *ExportKnowledgeBaseRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type ImportKnowledgeBaseRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NewKnowledgeBaseName string                 `protobuf:"bytes,1,opt,name=NewKnowledgeBaseName,proto3" json:"NewKnowledgeBaseName,omitempty"`
	InputPath            string                 `protobuf:"bytes,2,opt,name=InputPath,proto3" json:"InputPath,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ImportKnowledgeBaseRequest) Reset() {
	*x = ImportKnowledgeBaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKnowledgeBaseRequest) ProtoMessage() {}

func (x *ImportKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*ImportKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{11}
}

func (x *ImportKnowledgeBaseRequest) GetNewKnowledgeBaseName() string {
	if x != nil {
		return x.NewKnowledgeBaseName
	}
	return ""
}

func (x *ImportKnowledgeBaseRequest) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

type GeneralProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Percent       float64                `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType   string                 `protobuf:"bytes,3,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneralProgress) Reset() {
	*x = GeneralProgress{}
	mi := &file_yakgrpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneralProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralProgress) ProtoMessage() {}

func (x *GeneralProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralProgress.ProtoReflect.Descriptor instead.
func (*GeneralProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{12}
}

func (x *GeneralProgress) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *GeneralProgress) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GeneralProgress) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type AddMCPServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	URL           string                 `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	Command       string                 `protobuf:"bytes,4,opt,name=Command,proto3" json:"Command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMCPServerRequest) Reset() {
	*x = AddMCPServerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMCPServerRequest) ProtoMessage() {}

func (x *AddMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMCPServerRequest.ProtoReflect.Descriptor instead.
func (*AddMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{13}
}

func (x *AddMCPServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddMCPServerRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddMCPServerRequest) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *AddMCPServerRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type DeleteMCPServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMCPServerRequest) Reset() {
	*x = DeleteMCPServerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMCPServerRequest) ProtoMessage() {}

func (x *DeleteMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMCPServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteMCPServerRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type UpdateMCPServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	URL           string                 `protobuf:"bytes,4,opt,name=URL,proto3" json:"URL,omitempty"`
	Command       string                 `protobuf:"bytes,5,opt,name=Command,proto3" json:"Command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMCPServerRequest) Reset() {
	*x = UpdateMCPServerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMCPServerRequest) ProtoMessage() {}

func (x *UpdateMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMCPServerRequest.ProtoReflect.Descriptor instead.
func (*UpdateMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateMCPServerRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateMCPServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateMCPServerRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateMCPServerRequest) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *UpdateMCPServerRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

// 支持分页查询
type GetAllMCPServersRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Keyword        string                 `protobuf:"bytes,1,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	ID             int64                  `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Pagination     *Paging                `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	IsShowToolList bool                   `protobuf:"varint,4,opt,name=IsShowToolList,proto3" json:"IsShowToolList,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetAllMCPServersRequest) Reset() {
	*x = GetAllMCPServersRequest{}
	mi := &file_yakgrpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllMCPServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMCPServersRequest) ProtoMessage() {}

func (x *GetAllMCPServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMCPServersRequest.ProtoReflect.Descriptor instead.
func (*GetAllMCPServersRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetAllMCPServersRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *GetAllMCPServersRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GetAllMCPServersRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetAllMCPServersRequest) GetIsShowToolList() bool {
	if x != nil {
		return x.IsShowToolList
	}
	return false
}

type MCPServerToolParamInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Default       string                 `protobuf:"bytes,3,opt,name=Default,proto3" json:"Default,omitempty"`
	Required      bool                   `protobuf:"varint,4,opt,name=Required,proto3" json:"Required,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServerToolParamInfo) Reset() {
	*x = MCPServerToolParamInfo{}
	mi := &file_yakgrpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServerToolParamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServerToolParamInfo) ProtoMessage() {}

func (x *MCPServerToolParamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServerToolParamInfo.ProtoReflect.Descriptor instead.
func (*MCPServerToolParamInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{17}
}

func (x *MCPServerToolParamInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MCPServerToolParamInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MCPServerToolParamInfo) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *MCPServerToolParamInfo) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *MCPServerToolParamInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MCPServerTool struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Name          string                    `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                    `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Params        []*MCPServerToolParamInfo `protobuf:"bytes,3,rep,name=Params,proto3" json:"Params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServerTool) Reset() {
	*x = MCPServerTool{}
	mi := &file_yakgrpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServerTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServerTool) ProtoMessage() {}

func (x *MCPServerTool) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServerTool.ProtoReflect.Descriptor instead.
func (*MCPServerTool) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{18}
}

func (x *MCPServerTool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MCPServerTool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MCPServerTool) GetParams() []*MCPServerToolParamInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

type MCPServer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	URL           string                 `protobuf:"bytes,4,opt,name=URL,proto3" json:"URL,omitempty"`
	Command       string                 `protobuf:"bytes,5,opt,name=Command,proto3" json:"Command,omitempty"`
	Tools         []*MCPServerTool       `protobuf:"bytes,6,rep,name=Tools,proto3" json:"Tools,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServer) Reset() {
	*x = MCPServer{}
	mi := &file_yakgrpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServer) ProtoMessage() {}

func (x *MCPServer) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServer.ProtoReflect.Descriptor instead.
func (*MCPServer) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{19}
}

func (x *MCPServer) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MCPServer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MCPServer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MCPServer) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *MCPServer) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *MCPServer) GetTools() []*MCPServerTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

type GetAllMCPServersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MCPServers    []*MCPServer           `protobuf:"bytes,1,rep,name=MCPServers,proto3" json:"MCPServers,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllMCPServersResponse) Reset() {
	*x = GetAllMCPServersResponse{}
	mi := &file_yakgrpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllMCPServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMCPServersResponse) ProtoMessage() {}

func (x *GetAllMCPServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMCPServersResponse.ProtoReflect.Descriptor instead.
func (*GetAllMCPServersResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{20}
}

func (x *GetAllMCPServersResponse) GetMCPServers() []*MCPServer {
	if x != nil {
		return x.MCPServers
	}
	return nil
}

func (x *GetAllMCPServersResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetAllMCPServersResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type EntityRepository struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	HiddenIndex   string                 `protobuf:"bytes,4,opt,name=HiddenIndex,proto3" json:"HiddenIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityRepository) Reset() {
	*x = EntityRepository{}
	mi := &file_yakgrpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRepository) ProtoMessage() {}

func (x *EntityRepository) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRepository.ProtoReflect.Descriptor instead.
func (*EntityRepository) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{21}
}

func (x *EntityRepository) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *EntityRepository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityRepository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EntityRepository) GetHiddenIndex() string {
	if x != nil {
		return x.HiddenIndex
	}
	return ""
}

type ListEntityRepositoryResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	EntityRepositories []*EntityRepository    `protobuf:"bytes,1,rep,name=EntityRepositories,proto3" json:"EntityRepositories,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListEntityRepositoryResponse) Reset() {
	*x = ListEntityRepositoryResponse{}
	mi := &file_yakgrpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEntityRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntityRepositoryResponse) ProtoMessage() {}

func (x *ListEntityRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntityRepositoryResponse.ProtoReflect.Descriptor instead.
func (*ListEntityRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{22}
}

func (x *ListEntityRepositoryResponse) GetEntityRepositories() []*EntityRepository {
	if x != nil {
		return x.EntityRepositories
	}
	return nil
}

type Entity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            uint64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	BaseID        uint64                 `protobuf:"varint,5,opt,name=BaseID,proto3" json:"BaseID,omitempty"`
	BaseIndex     string                 `protobuf:"bytes,9,opt,name=BaseIndex,proto3" json:"BaseIndex,omitempty"`
	Attributes    []*KVPair              `protobuf:"bytes,6,rep,name=Attributes,proto3" json:"Attributes,omitempty"`
	Rationale     string                 `protobuf:"bytes,7,opt,name=Rationale,proto3" json:"Rationale,omitempty"`
	HiddenIndex   string                 `protobuf:"bytes,8,opt,name=HiddenIndex,proto3" json:"HiddenIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entity) Reset() {
	*x = Entity{}
	mi := &file_yakgrpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{23}
}

func (x *Entity) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Entity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Entity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Entity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Entity) GetBaseID() uint64 {
	if x != nil {
		return x.BaseID
	}
	return 0
}

func (x *Entity) GetBaseIndex() string {
	if x != nil {
		return x.BaseIndex
	}
	return ""
}

func (x *Entity) GetAttributes() []*KVPair {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Entity) GetRationale() string {
	if x != nil {
		return x.Rationale
	}
	return ""
}

func (x *Entity) GetHiddenIndex() string {
	if x != nil {
		return x.HiddenIndex
	}
	return ""
}

type EntityFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseID        uint64                 `protobuf:"varint,1,opt,name=BaseID,proto3" json:"BaseID,omitempty"`
	BaseIndex     string                 `protobuf:"bytes,6,opt,name=BaseIndex,proto3" json:"BaseIndex,omitempty"`
	ReposName     string                 `protobuf:"bytes,8,opt,name=ReposName,proto3" json:"ReposName,omitempty"`
	IDs           []uint64               `protobuf:"varint,2,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	Types         []string               `protobuf:"bytes,3,rep,name=Types,proto3" json:"Types,omitempty"`
	Names         []string               `protobuf:"bytes,4,rep,name=Names,proto3" json:"Names,omitempty"`
	HiddenIndex   []string               `protobuf:"bytes,5,rep,name=HiddenIndex,proto3" json:"HiddenIndex,omitempty"`
	RuntimeID     []string               `protobuf:"bytes,7,rep,name=RuntimeID,proto3" json:"RuntimeID,omitempty"`
	Keywords      []string               `protobuf:"bytes,9,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityFilter) Reset() {
	*x = EntityFilter{}
	mi := &file_yakgrpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityFilter) ProtoMessage() {}

func (x *EntityFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityFilter.ProtoReflect.Descriptor instead.
func (*EntityFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{24}
}

func (x *EntityFilter) GetBaseID() uint64 {
	if x != nil {
		return x.BaseID
	}
	return 0
}

func (x *EntityFilter) GetBaseIndex() string {
	if x != nil {
		return x.BaseIndex
	}
	return ""
}

func (x *EntityFilter) GetReposName() string {
	if x != nil {
		return x.ReposName
	}
	return ""
}

func (x *EntityFilter) GetIDs() []uint64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *EntityFilter) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *EntityFilter) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *EntityFilter) GetHiddenIndex() []string {
	if x != nil {
		return x.HiddenIndex
	}
	return nil
}

func (x *EntityFilter) GetRuntimeID() []string {
	if x != nil {
		return x.RuntimeID
	}
	return nil
}

func (x *EntityFilter) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type QueryEntityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *EntityFilter          `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryEntityRequest) Reset() {
	*x = QueryEntityRequest{}
	mi := &file_yakgrpc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEntityRequest) ProtoMessage() {}

func (x *QueryEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEntityRequest.ProtoReflect.Descriptor instead.
func (*QueryEntityRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{25}
}

func (x *QueryEntityRequest) GetFilter() *EntityFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryEntityRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryEntityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*Entity              `protobuf:"bytes,1,rep,name=Entities,proto3" json:"Entities,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         uint64                 `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryEntityResponse) Reset() {
	*x = QueryEntityResponse{}
	mi := &file_yakgrpc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEntityResponse) ProtoMessage() {}

func (x *QueryEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEntityResponse.ProtoReflect.Descriptor instead.
func (*QueryEntityResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{26}
}

func (x *QueryEntityResponse) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *QueryEntityResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryEntityResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteEntityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *EntityFilter          `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEntityRequest) Reset() {
	*x = DeleteEntityRequest{}
	mi := &file_yakgrpc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEntityRequest) ProtoMessage() {}

func (x *DeleteEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEntityRequest.ProtoReflect.Descriptor instead.
func (*DeleteEntityRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteEntityRequest) GetFilter() *EntityFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type Relationship struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ID                uint64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type              string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	SourceEntityID    uint64                 `protobuf:"varint,3,opt,name=SourceEntityID,proto3" json:"SourceEntityID,omitempty"`
	TargetEntityID    uint64                 `protobuf:"varint,4,opt,name=TargetEntityID,proto3" json:"TargetEntityID,omitempty"`
	Attributes        []*KVPair              `protobuf:"bytes,5,rep,name=Attributes,proto3" json:"Attributes,omitempty"`
	Rationale         string                 `protobuf:"bytes,6,opt,name=Rationale,proto3" json:"Rationale,omitempty"`
	SourceEntityIndex string                 `protobuf:"bytes,7,opt,name=SourceEntityIndex,proto3" json:"SourceEntityIndex,omitempty"`
	TargetEntityIndex string                 `protobuf:"bytes,8,opt,name=TargetEntityIndex,proto3" json:"TargetEntityIndex,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Relationship) Reset() {
	*x = Relationship{}
	mi := &file_yakgrpc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relationship) ProtoMessage() {}

func (x *Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relationship.ProtoReflect.Descriptor instead.
func (*Relationship) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{28}
}

func (x *Relationship) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Relationship) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Relationship) GetSourceEntityID() uint64 {
	if x != nil {
		return x.SourceEntityID
	}
	return 0
}

func (x *Relationship) GetTargetEntityID() uint64 {
	if x != nil {
		return x.TargetEntityID
	}
	return 0
}

func (x *Relationship) GetAttributes() []*KVPair {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Relationship) GetRationale() string {
	if x != nil {
		return x.Rationale
	}
	return ""
}

func (x *Relationship) GetSourceEntityIndex() string {
	if x != nil {
		return x.SourceEntityIndex
	}
	return ""
}

func (x *Relationship) GetTargetEntityIndex() string {
	if x != nil {
		return x.TargetEntityIndex
	}
	return ""
}

type RelationshipFilter struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BaseID            uint64                 `protobuf:"varint,1,opt,name=BaseID,proto3" json:"BaseID,omitempty"`
	BaseIndex         string                 `protobuf:"bytes,10,opt,name=BaseIndex,proto3" json:"BaseIndex,omitempty"`
	IDs               []uint64               `protobuf:"varint,2,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	Types             []string               `protobuf:"bytes,3,rep,name=Types,proto3" json:"Types,omitempty"`
	SourceEntityIDs   []uint64               `protobuf:"varint,4,rep,packed,name=SourceEntityIDs,proto3" json:"SourceEntityIDs,omitempty"`
	TargetEntityIDs   []uint64               `protobuf:"varint,5,rep,packed,name=TargetEntityIDs,proto3" json:"TargetEntityIDs,omitempty"`
	AboutEntityIDs    []uint64               `protobuf:"varint,6,rep,packed,name=AboutEntityIDs,proto3" json:"AboutEntityIDs,omitempty"` // Source or Target
	SourceEntityIndex []string               `protobuf:"bytes,7,rep,name=SourceEntityIndex,proto3" json:"SourceEntityIndex,omitempty"`
	TargetEntityIndex []string               `protobuf:"bytes,8,rep,name=TargetEntityIndex,proto3" json:"TargetEntityIndex,omitempty"`
	AboutEntityIndex  []string               `protobuf:"bytes,9,rep,name=AboutEntityIndex,proto3" json:"AboutEntityIndex,omitempty"` // Source or Target
	UUIDS             []string               `protobuf:"bytes,11,rep,name=UUIDS,proto3" json:"UUIDS,omitempty"`
	RuntimeID         []string               `protobuf:"bytes,12,rep,name=RuntimeID,proto3" json:"RuntimeID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RelationshipFilter) Reset() {
	*x = RelationshipFilter{}
	mi := &file_yakgrpc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationshipFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationshipFilter) ProtoMessage() {}

func (x *RelationshipFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationshipFilter.ProtoReflect.Descriptor instead.
func (*RelationshipFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{29}
}

func (x *RelationshipFilter) GetBaseID() uint64 {
	if x != nil {
		return x.BaseID
	}
	return 0
}

func (x *RelationshipFilter) GetBaseIndex() string {
	if x != nil {
		return x.BaseIndex
	}
	return ""
}

func (x *RelationshipFilter) GetIDs() []uint64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *RelationshipFilter) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *RelationshipFilter) GetSourceEntityIDs() []uint64 {
	if x != nil {
		return x.SourceEntityIDs
	}
	return nil
}

func (x *RelationshipFilter) GetTargetEntityIDs() []uint64 {
	if x != nil {
		return x.TargetEntityIDs
	}
	return nil
}

func (x *RelationshipFilter) GetAboutEntityIDs() []uint64 {
	if x != nil {
		return x.AboutEntityIDs
	}
	return nil
}

func (x *RelationshipFilter) GetSourceEntityIndex() []string {
	if x != nil {
		return x.SourceEntityIndex
	}
	return nil
}

func (x *RelationshipFilter) GetTargetEntityIndex() []string {
	if x != nil {
		return x.TargetEntityIndex
	}
	return nil
}

func (x *RelationshipFilter) GetAboutEntityIndex() []string {
	if x != nil {
		return x.AboutEntityIndex
	}
	return nil
}

func (x *RelationshipFilter) GetUUIDS() []string {
	if x != nil {
		return x.UUIDS
	}
	return nil
}

func (x *RelationshipFilter) GetRuntimeID() []string {
	if x != nil {
		return x.RuntimeID
	}
	return nil
}

type QueryRelationshipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *RelationshipFilter    `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRelationshipRequest) Reset() {
	*x = QueryRelationshipRequest{}
	mi := &file_yakgrpc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRelationshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRelationshipRequest) ProtoMessage() {}

func (x *QueryRelationshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRelationshipRequest.ProtoReflect.Descriptor instead.
func (*QueryRelationshipRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{30}
}

func (x *QueryRelationshipRequest) GetFilter() *RelationshipFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryRelationshipRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryRelationshipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Relationships []*Relationship        `protobuf:"bytes,1,rep,name=Relationships,proto3" json:"Relationships,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         uint64                 `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRelationshipResponse) Reset() {
	*x = QueryRelationshipResponse{}
	mi := &file_yakgrpc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRelationshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRelationshipResponse) ProtoMessage() {}

func (x *QueryRelationshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRelationshipResponse.ProtoReflect.Descriptor instead.
func (*QueryRelationshipResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{31}
}

func (x *QueryRelationshipResponse) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *QueryRelationshipResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryRelationshipResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QuerySubERMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *EntityFilter          `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Depth         uint64                 `protobuf:"varint,2,opt,name=Depth,proto3" json:"Depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySubERMRequest) Reset() {
	*x = QuerySubERMRequest{}
	mi := &file_yakgrpc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySubERMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubERMRequest) ProtoMessage() {}

func (x *QuerySubERMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubERMRequest.ProtoReflect.Descriptor instead.
func (*QuerySubERMRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{32}
}

func (x *QuerySubERMRequest) GetFilter() *EntityFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QuerySubERMRequest) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

type QuerySubERMResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*Entity              `protobuf:"bytes,1,rep,name=Entities,proto3" json:"Entities,omitempty"`
	Relationships []*Relationship        `protobuf:"bytes,2,rep,name=Relationships,proto3" json:"Relationships,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySubERMResponse) Reset() {
	*x = QuerySubERMResponse{}
	mi := &file_yakgrpc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySubERMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubERMResponse) ProtoMessage() {}

func (x *QuerySubERMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubERMResponse.ProtoReflect.Descriptor instead.
func (*QuerySubERMResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{33}
}

func (x *QuerySubERMResponse) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *QuerySubERMResponse) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

type GenerateERMDotRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *EntityFilter          `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Depth         uint64                 `protobuf:"varint,2,opt,name=Depth,proto3" json:"Depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateERMDotRequest) Reset() {
	*x = GenerateERMDotRequest{}
	mi := &file_yakgrpc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateERMDotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateERMDotRequest) ProtoMessage() {}

func (x *GenerateERMDotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateERMDotRequest.ProtoReflect.Descriptor instead.
func (*GenerateERMDotRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{34}
}

func (x *GenerateERMDotRequest) GetFilter() *EntityFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GenerateERMDotRequest) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

type GenerateERMDotResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dot           string                 `protobuf:"bytes,1,opt,name=Dot,proto3" json:"Dot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateERMDotResponse) Reset() {
	*x = GenerateERMDotResponse{}
	mi := &file_yakgrpc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateERMDotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateERMDotResponse) ProtoMessage() {}

func (x *GenerateERMDotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateERMDotResponse.ProtoReflect.Descriptor instead.
func (*GenerateERMDotResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{35}
}

func (x *GenerateERMDotResponse) GetDot() string {
	if x != nil {
		return x.Dot
	}
	return ""
}

type StartedLocalModelInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ModelType     string                 `protobuf:"bytes,2,opt,name=ModelType,proto3" json:"ModelType,omitempty"`
	Host          string                 `protobuf:"bytes,3,opt,name=Host,proto3" json:"Host,omitempty"`
	Port          int32                  `protobuf:"varint,4,opt,name=Port,proto3" json:"Port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartedLocalModelInfo) Reset() {
	*x = StartedLocalModelInfo{}
	mi := &file_yakgrpc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartedLocalModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartedLocalModelInfo) ProtoMessage() {}

func (x *StartedLocalModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartedLocalModelInfo.ProtoReflect.Descriptor instead.
func (*StartedLocalModelInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{36}
}

func (x *StartedLocalModelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartedLocalModelInfo) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *StartedLocalModelInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StartedLocalModelInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type GetAllStartedLocalModelsResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Models        []*StartedLocalModelInfo `protobuf:"bytes,1,rep,name=Models,proto3" json:"Models,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllStartedLocalModelsResponse) Reset() {
	*x = GetAllStartedLocalModelsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllStartedLocalModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStartedLocalModelsResponse) ProtoMessage() {}

func (x *GetAllStartedLocalModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStartedLocalModelsResponse.ProtoReflect.Descriptor instead.
func (*GetAllStartedLocalModelsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{37}
}

func (x *GetAllStartedLocalModelsResponse) GetModels() []*StartedLocalModelInfo {
	if x != nil {
		return x.Models
	}
	return nil
}

type ClearAllModelsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DeleteSourceFile bool                   `protobuf:"varint,1,opt,name=DeleteSourceFile,proto3" json:"DeleteSourceFile,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ClearAllModelsRequest) Reset() {
	*x = ClearAllModelsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearAllModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAllModelsRequest) ProtoMessage() {}

func (x *ClearAllModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAllModelsRequest.ProtoReflect.Descriptor instead.
func (*ClearAllModelsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{38}
}

func (x *ClearAllModelsRequest) GetDeleteSourceFile() bool {
	if x != nil {
		return x.DeleteSourceFile
	}
	return false
}

type UpdateLocalModelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ModelType     string                 `protobuf:"bytes,2,opt,name=ModelType,proto3" json:"ModelType,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=Path,proto3" json:"Path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLocalModelRequest) Reset() {
	*x = UpdateLocalModelRequest{}
	mi := &file_yakgrpc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLocalModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocalModelRequest) ProtoMessage() {}

func (x *UpdateLocalModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocalModelRequest.ProtoReflect.Descriptor instead.
func (*UpdateLocalModelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateLocalModelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLocalModelRequest) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *UpdateLocalModelRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateLocalModelRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AddLocalModelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ModelType     string                 `protobuf:"bytes,2,opt,name=ModelType,proto3" json:"ModelType,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=Path,proto3" json:"Path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddLocalModelRequest) Reset() {
	*x = AddLocalModelRequest{}
	mi := &file_yakgrpc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLocalModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLocalModelRequest) ProtoMessage() {}

func (x *AddLocalModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLocalModelRequest.ProtoReflect.Descriptor instead.
func (*AddLocalModelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{40}
}

func (x *AddLocalModelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddLocalModelRequest) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *AddLocalModelRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddLocalModelRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DeleteLocalModelRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DeleteSourceFile bool                   `protobuf:"varint,2,opt,name=DeleteSourceFile,proto3" json:"DeleteSourceFile,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeleteLocalModelRequest) Reset() {
	*x = DeleteLocalModelRequest{}
	mi := &file_yakgrpc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLocalModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLocalModelRequest) ProtoMessage() {}

func (x *DeleteLocalModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLocalModelRequest.ProtoReflect.Descriptor instead.
func (*DeleteLocalModelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteLocalModelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteLocalModelRequest) GetDeleteSourceFile() bool {
	if x != nil {
		return x.DeleteSourceFile
	}
	return false
}

type StopLocalModelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelName     string                 `protobuf:"bytes,1,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopLocalModelRequest) Reset() {
	*x = StopLocalModelRequest{}
	mi := &file_yakgrpc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopLocalModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopLocalModelRequest) ProtoMessage() {}

func (x *StopLocalModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopLocalModelRequest.ProtoReflect.Descriptor instead.
func (*StopLocalModelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{42}
}

func (x *StopLocalModelRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type LocalModelStatus struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Status          string                 `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Host            string                 `protobuf:"bytes,3,opt,name=Host,proto3" json:"Host,omitempty"`
	Port            int32                  `protobuf:"varint,4,opt,name=Port,proto3" json:"Port,omitempty"`
	Model           string                 `protobuf:"bytes,5,opt,name=Model,proto3" json:"Model,omitempty"`
	ModelPath       string                 `protobuf:"bytes,6,opt,name=ModelPath,proto3" json:"ModelPath,omitempty"`
	LlamaServerPath string                 `protobuf:"bytes,7,opt,name=LlamaServerPath,proto3" json:"LlamaServerPath,omitempty"`
	ContextSize     int32                  `protobuf:"varint,8,opt,name=ContextSize,proto3" json:"ContextSize,omitempty"`
	ContBatching    bool                   `protobuf:"varint,9,opt,name=ContBatching,proto3" json:"ContBatching,omitempty"`
	BatchSize       int32                  `protobuf:"varint,10,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	Threads         int32                  `protobuf:"varint,11,opt,name=Threads,proto3" json:"Threads,omitempty"`
	Detached        bool                   `protobuf:"varint,12,opt,name=Detached,proto3" json:"Detached,omitempty"`
	Debug           bool                   `protobuf:"varint,13,opt,name=Debug,proto3" json:"Debug,omitempty"`
	Pooling         string                 `protobuf:"bytes,14,opt,name=Pooling,proto3" json:"Pooling,omitempty"`
	StartupTimeout  int32                  `protobuf:"varint,15,opt,name=StartupTimeout,proto3" json:"StartupTimeout,omitempty"`
	Args            []string               `protobuf:"bytes,16,rep,name=Args,proto3" json:"Args,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LocalModelStatus) Reset() {
	*x = LocalModelStatus{}
	mi := &file_yakgrpc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalModelStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalModelStatus) ProtoMessage() {}

func (x *LocalModelStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalModelStatus.ProtoReflect.Descriptor instead.
func (*LocalModelStatus) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{43}
}

func (x *LocalModelStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LocalModelStatus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *LocalModelStatus) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LocalModelStatus) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *LocalModelStatus) GetModelPath() string {
	if x != nil {
		return x.ModelPath
	}
	return ""
}

func (x *LocalModelStatus) GetLlamaServerPath() string {
	if x != nil {
		return x.LlamaServerPath
	}
	return ""
}

func (x *LocalModelStatus) GetContextSize() int32 {
	if x != nil {
		return x.ContextSize
	}
	return 0
}

func (x *LocalModelStatus) GetContBatching() bool {
	if x != nil {
		return x.ContBatching
	}
	return false
}

func (x *LocalModelStatus) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *LocalModelStatus) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *LocalModelStatus) GetDetached() bool {
	if x != nil {
		return x.Detached
	}
	return false
}

func (x *LocalModelStatus) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *LocalModelStatus) GetPooling() string {
	if x != nil {
		return x.Pooling
	}
	return ""
}

func (x *LocalModelStatus) GetStartupTimeout() int32 {
	if x != nil {
		return x.StartupTimeout
	}
	return 0
}

func (x *LocalModelStatus) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type ThirdPartyBinary struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Name                   string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	SupportCurrentPlatform bool                   `protobuf:"varint,2,opt,name=SupportCurrentPlatform,proto3" json:"SupportCurrentPlatform,omitempty"`
	Description            string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	InstallPath            string                 `protobuf:"bytes,4,opt,name=InstallPath,proto3" json:"InstallPath,omitempty"`
	DownloadURL            string                 `protobuf:"bytes,5,opt,name=DownloadURL,proto3" json:"DownloadURL,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ThirdPartyBinary) Reset() {
	*x = ThirdPartyBinary{}
	mi := &file_yakgrpc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyBinary) ProtoMessage() {}

func (x *ThirdPartyBinary) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyBinary.ProtoReflect.Descriptor instead.
func (*ThirdPartyBinary) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{44}
}

func (x *ThirdPartyBinary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThirdPartyBinary) GetSupportCurrentPlatform() bool {
	if x != nil {
		return x.SupportCurrentPlatform
	}
	return false
}

func (x *ThirdPartyBinary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ThirdPartyBinary) GetInstallPath() string {
	if x != nil {
		return x.InstallPath
	}
	return ""
}

func (x *ThirdPartyBinary) GetDownloadURL() string {
	if x != nil {
		return x.DownloadURL
	}
	return ""
}

type ListThirdPartyBinaryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Binaries      []*ThirdPartyBinary    `protobuf:"bytes,1,rep,name=Binaries,proto3" json:"Binaries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListThirdPartyBinaryResponse) Reset() {
	*x = ListThirdPartyBinaryResponse{}
	mi := &file_yakgrpc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListThirdPartyBinaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThirdPartyBinaryResponse) ProtoMessage() {}

func (x *ListThirdPartyBinaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThirdPartyBinaryResponse.ProtoReflect.Descriptor instead.
func (*ListThirdPartyBinaryResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{45}
}

func (x *ListThirdPartyBinaryResponse) GetBinaries() []*ThirdPartyBinary {
	if x != nil {
		return x.Binaries
	}
	return nil
}

type InstallThirdPartyBinaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Proxy         string                 `protobuf:"bytes,2,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	Force         bool                   `protobuf:"varint,3,opt,name=Force,proto3" json:"Force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallThirdPartyBinaryRequest) Reset() {
	*x = InstallThirdPartyBinaryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallThirdPartyBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallThirdPartyBinaryRequest) ProtoMessage() {}

func (x *InstallThirdPartyBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallThirdPartyBinaryRequest.ProtoReflect.Descriptor instead.
func (*InstallThirdPartyBinaryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{46}
}

func (x *InstallThirdPartyBinaryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstallThirdPartyBinaryRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *InstallThirdPartyBinaryRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type UninstallThirdPartyBinaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UninstallThirdPartyBinaryRequest) Reset() {
	*x = UninstallThirdPartyBinaryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UninstallThirdPartyBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallThirdPartyBinaryRequest) ProtoMessage() {}

func (x *UninstallThirdPartyBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallThirdPartyBinaryRequest.ProtoReflect.Descriptor instead.
func (*UninstallThirdPartyBinaryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{47}
}

func (x *UninstallThirdPartyBinaryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IsThirdPartyBinaryReadyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsThirdPartyBinaryReadyRequest) Reset() {
	*x = IsThirdPartyBinaryReadyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsThirdPartyBinaryReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsThirdPartyBinaryReadyRequest) ProtoMessage() {}

func (x *IsThirdPartyBinaryReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsThirdPartyBinaryReadyRequest.ProtoReflect.Descriptor instead.
func (*IsThirdPartyBinaryReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{48}
}

func (x *IsThirdPartyBinaryReadyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IsThirdPartyBinaryReadyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsReady       bool                   `protobuf:"varint,1,opt,name=IsReady,proto3" json:"IsReady,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsThirdPartyBinaryReadyResponse) Reset() {
	*x = IsThirdPartyBinaryReadyResponse{}
	mi := &file_yakgrpc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsThirdPartyBinaryReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsThirdPartyBinaryReadyResponse) ProtoMessage() {}

func (x *IsThirdPartyBinaryReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsThirdPartyBinaryReadyResponse.ProtoReflect.Descriptor instead.
func (*IsThirdPartyBinaryReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{49}
}

func (x *IsThirdPartyBinaryReadyResponse) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *IsThirdPartyBinaryReadyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StartThirdPartyBinaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=Args,proto3" json:"Args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartThirdPartyBinaryRequest) Reset() {
	*x = StartThirdPartyBinaryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartThirdPartyBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartThirdPartyBinaryRequest) ProtoMessage() {}

func (x *StartThirdPartyBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartThirdPartyBinaryRequest.ProtoReflect.Descriptor instead.
func (*StartThirdPartyBinaryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{50}
}

func (x *StartThirdPartyBinaryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartThirdPartyBinaryRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type BuildVectorIndexForKnowledgeBaseEntryRequest struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseEntryId          int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseEntryId,proto3" json:"KnowledgeBaseEntryId,omitempty"`
	KnowledgeBaseEntryHiddenIndex string                 `protobuf:"bytes,13,opt,name=KnowledgeBaseEntryHiddenIndex,proto3" json:"KnowledgeBaseEntryHiddenIndex,omitempty"`
	KnowledgeBaseId               int64                  `protobuf:"varint,12,opt,name=KnowledgeBaseId,proto3" json:"KnowledgeBaseId,omitempty"`
	BaseUrl                       string                 `protobuf:"bytes,2,opt,name=BaseUrl,proto3" json:"BaseUrl,omitempty"`
	ApiKey                        string                 `protobuf:"bytes,3,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	Proxy                         string                 `protobuf:"bytes,4,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	ModelName                     string                 `protobuf:"bytes,5,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	Dimension                     int32                  `protobuf:"varint,6,opt,name=Dimension,proto3" json:"Dimension,omitempty"`
	M                             int32                  `protobuf:"varint,7,opt,name=M,proto3" json:"M,omitempty"`
	Ml                            float32                `protobuf:"fixed32,8,opt,name=Ml,proto3" json:"Ml,omitempty"`
	EfSearch                      int32                  `protobuf:"varint,9,opt,name=EfSearch,proto3" json:"EfSearch,omitempty"`
	EfConstruct                   int32                  `protobuf:"varint,10,opt,name=EfConstruct,proto3" json:"EfConstruct,omitempty"`
	DistanceFuncType              string                 `protobuf:"bytes,11,opt,name=DistanceFuncType,proto3" json:"DistanceFuncType,omitempty"`
	RelatedEntityUUIDS            string                 `protobuf:"bytes,14,opt,name=RelatedEntityUUIDS,proto3" json:"RelatedEntityUUIDS,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) Reset() {
	*x = BuildVectorIndexForKnowledgeBaseEntryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildVectorIndexForKnowledgeBaseEntryRequest) ProtoMessage() {}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildVectorIndexForKnowledgeBaseEntryRequest.ProtoReflect.Descriptor instead.
func (*BuildVectorIndexForKnowledgeBaseEntryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{51}
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetKnowledgeBaseEntryId() int64 {
	if x != nil {
		return x.KnowledgeBaseEntryId
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetKnowledgeBaseEntryHiddenIndex() string {
	if x != nil {
		return x.KnowledgeBaseEntryHiddenIndex
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetMl() float32 {
	if x != nil {
		return x.Ml
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetEfSearch() int32 {
	if x != nil {
		return x.EfSearch
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetEfConstruct() int32 {
	if x != nil {
		return x.EfConstruct
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetDistanceFuncType() string {
	if x != nil {
		return x.DistanceFuncType
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseEntryRequest) GetRelatedEntityUUIDS() string {
	if x != nil {
		return x.RelatedEntityUUIDS
	}
	return ""
}

type BuildVectorIndexForKnowledgeBaseRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId  int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseId,proto3" json:"KnowledgeBaseId,omitempty"`
	BaseUrl          string                 `protobuf:"bytes,2,opt,name=BaseUrl,proto3" json:"BaseUrl,omitempty"`
	ApiKey           string                 `protobuf:"bytes,3,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	Proxy            string                 `protobuf:"bytes,4,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	ModelName        string                 `protobuf:"bytes,5,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	Dimension        int32                  `protobuf:"varint,6,opt,name=Dimension,proto3" json:"Dimension,omitempty"`
	M                int32                  `protobuf:"varint,7,opt,name=M,proto3" json:"M,omitempty"`
	Ml               float32                `protobuf:"fixed32,8,opt,name=Ml,proto3" json:"Ml,omitempty"`
	EfSearch         int32                  `protobuf:"varint,9,opt,name=EfSearch,proto3" json:"EfSearch,omitempty"`
	EfConstruct      int32                  `protobuf:"varint,10,opt,name=EfConstruct,proto3" json:"EfConstruct,omitempty"`
	DistanceFuncType string                 `protobuf:"bytes,11,opt,name=DistanceFuncType,proto3" json:"DistanceFuncType,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) Reset() {
	*x = BuildVectorIndexForKnowledgeBaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildVectorIndexForKnowledgeBaseRequest) ProtoMessage() {}

func (x *BuildVectorIndexForKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildVectorIndexForKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*BuildVectorIndexForKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{52}
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetMl() float32 {
	if x != nil {
		return x.Ml
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetEfSearch() int32 {
	if x != nil {
		return x.EfSearch
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetEfConstruct() int32 {
	if x != nil {
		return x.EfConstruct
	}
	return 0
}

func (x *BuildVectorIndexForKnowledgeBaseRequest) GetDistanceFuncType() string {
	if x != nil {
		return x.DistanceFuncType
	}
	return ""
}

type GetKnowledgeBaseNameListResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseNames []string               `protobuf:"bytes,1,rep,name=KnowledgeBaseNames,proto3" json:"KnowledgeBaseNames,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetKnowledgeBaseNameListResponse) Reset() {
	*x = GetKnowledgeBaseNameListResponse{}
	mi := &file_yakgrpc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseNameListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseNameListResponse) ProtoMessage() {}

func (x *GetKnowledgeBaseNameListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseNameListResponse.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseNameListResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{53}
}

func (x *GetKnowledgeBaseNameListResponse) GetKnowledgeBaseNames() []string {
	if x != nil {
		return x.KnowledgeBaseNames
	}
	return nil
}

type KnowledgeBaseType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseType) Reset() {
	*x = KnowledgeBaseType{}
	mi := &file_yakgrpc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseType) ProtoMessage() {}

func (x *KnowledgeBaseType) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseType.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseType) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{54}
}

func (x *KnowledgeBaseType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KnowledgeBaseType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KnowledgeBaseType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetKnowledgeBaseTypeListResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseTypes []*KnowledgeBaseType   `protobuf:"bytes,1,rep,name=KnowledgeBaseTypes,proto3" json:"KnowledgeBaseTypes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetKnowledgeBaseTypeListResponse) Reset() {
	*x = GetKnowledgeBaseTypeListResponse{}
	mi := &file_yakgrpc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseTypeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseTypeListResponse) ProtoMessage() {}

func (x *GetKnowledgeBaseTypeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseTypeListResponse.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseTypeListResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{55}
}

func (x *GetKnowledgeBaseTypeListResponse) GetKnowledgeBaseTypes() []*KnowledgeBaseType {
	if x != nil {
		return x.KnowledgeBaseTypes
	}
	return nil
}

type GetKnowledgeBaseRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseId,proto3" json:"KnowledgeBaseId,omitempty"`
	Keyword         string                 `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Pagination      *Paging                `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetKnowledgeBaseRequest) Reset() {
	*x = GetKnowledgeBaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseRequest) ProtoMessage() {}

func (x *GetKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{56}
}

func (x *GetKnowledgeBaseRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *GetKnowledgeBaseRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *GetKnowledgeBaseRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type KnowledgeBaseInfo struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ID                       int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	KnowledgeBaseName        string                 `protobuf:"bytes,2,opt,name=KnowledgeBaseName,proto3" json:"KnowledgeBaseName,omitempty"`
	KnowledgeBaseDescription string                 `protobuf:"bytes,3,opt,name=KnowledgeBaseDescription,proto3" json:"KnowledgeBaseDescription,omitempty"`
	KnowledgeBaseType        string                 `protobuf:"bytes,4,opt,name=KnowledgeBaseType,proto3" json:"KnowledgeBaseType,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *KnowledgeBaseInfo) Reset() {
	*x = KnowledgeBaseInfo{}
	mi := &file_yakgrpc_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseInfo) ProtoMessage() {}

func (x *KnowledgeBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseInfo.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{57}
}

func (x *KnowledgeBaseInfo) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *KnowledgeBaseInfo) GetKnowledgeBaseName() string {
	if x != nil {
		return x.KnowledgeBaseName
	}
	return ""
}

func (x *KnowledgeBaseInfo) GetKnowledgeBaseDescription() string {
	if x != nil {
		return x.KnowledgeBaseDescription
	}
	return ""
}

func (x *KnowledgeBaseInfo) GetKnowledgeBaseType() string {
	if x != nil {
		return x.KnowledgeBaseType
	}
	return ""
}

type GetKnowledgeBaseResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBases []*KnowledgeBaseInfo   `protobuf:"bytes,1,rep,name=KnowledgeBases,proto3" json:"KnowledgeBases,omitempty"`
	Pagination     *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total          int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetKnowledgeBaseResponse) Reset() {
	*x = GetKnowledgeBaseResponse{}
	mi := &file_yakgrpc_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseResponse) ProtoMessage() {}

func (x *GetKnowledgeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseResponse.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{58}
}

func (x *GetKnowledgeBaseResponse) GetKnowledgeBases() []*KnowledgeBaseInfo {
	if x != nil {
		return x.KnowledgeBases
	}
	return nil
}

func (x *GetKnowledgeBaseResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetKnowledgeBaseResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateKnowledgeBaseRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseName        string                 `protobuf:"bytes,1,opt,name=KnowledgeBaseName,proto3" json:"KnowledgeBaseName,omitempty"`
	KnowledgeBaseDescription string                 `protobuf:"bytes,2,opt,name=KnowledgeBaseDescription,proto3" json:"KnowledgeBaseDescription,omitempty"`
	KnowledgeBaseType        string                 `protobuf:"bytes,3,opt,name=KnowledgeBaseType,proto3" json:"KnowledgeBaseType,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseRequest) Reset() {
	*x = CreateKnowledgeBaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseRequest) ProtoMessage() {}

func (x *CreateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{59}
}

func (x *CreateKnowledgeBaseRequest) GetKnowledgeBaseName() string {
	if x != nil {
		return x.KnowledgeBaseName
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetKnowledgeBaseDescription() string {
	if x != nil {
		return x.KnowledgeBaseDescription
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetKnowledgeBaseType() string {
	if x != nil {
		return x.KnowledgeBaseType
	}
	return ""
}

type UpdateKnowledgeBaseRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId          int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseId,proto3" json:"KnowledgeBaseId,omitempty"`
	KnowledgeBaseName        string                 `protobuf:"bytes,2,opt,name=KnowledgeBaseName,proto3" json:"KnowledgeBaseName,omitempty"`
	KnowledgeBaseDescription string                 `protobuf:"bytes,3,opt,name=KnowledgeBaseDescription,proto3" json:"KnowledgeBaseDescription,omitempty"`
	KnowledgeBaseType        string                 `protobuf:"bytes,4,opt,name=KnowledgeBaseType,proto3" json:"KnowledgeBaseType,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseRequest) Reset() {
	*x = UpdateKnowledgeBaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseRequest) ProtoMessage() {}

func (x *UpdateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateKnowledgeBaseRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *UpdateKnowledgeBaseRequest) GetKnowledgeBaseName() string {
	if x != nil {
		return x.KnowledgeBaseName
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetKnowledgeBaseDescription() string {
	if x != nil {
		return x.KnowledgeBaseDescription
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetKnowledgeBaseType() string {
	if x != nil {
		return x.KnowledgeBaseType
	}
	return ""
}

type DeleteKnowledgeBaseEntryRequest struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseEntryId          int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseEntryId,proto3" json:"KnowledgeBaseEntryId,omitempty"`
	KnowledgeBaseEntryHiddenIndex string                 `protobuf:"bytes,3,opt,name=KnowledgeBaseEntryHiddenIndex,proto3" json:"KnowledgeBaseEntryHiddenIndex,omitempty"`
	KnowledgeBaseId               int64                  `protobuf:"varint,2,opt,name=KnowledgeBaseId,proto3" json:"KnowledgeBaseId,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseEntryRequest) Reset() {
	*x = DeleteKnowledgeBaseEntryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseEntryRequest) ProtoMessage() {}

func (x *DeleteKnowledgeBaseEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseEntryRequest.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseEntryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{61}
}

func (x *DeleteKnowledgeBaseEntryRequest) GetKnowledgeBaseEntryId() int64 {
	if x != nil {
		return x.KnowledgeBaseEntryId
	}
	return 0
}

func (x *DeleteKnowledgeBaseEntryRequest) GetKnowledgeBaseEntryHiddenIndex() string {
	if x != nil {
		return x.KnowledgeBaseEntryHiddenIndex
	}
	return ""
}

func (x *DeleteKnowledgeBaseEntryRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

type SearchKnowledgeBaseEntryRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseId,proto3" json:"KnowledgeBaseId,omitempty"`
	Keyword         string                 `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Pagination      *Paging                `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SearchKnowledgeBaseEntryRequest) Reset() {
	*x = SearchKnowledgeBaseEntryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchKnowledgeBaseEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKnowledgeBaseEntryRequest) ProtoMessage() {}

func (x *SearchKnowledgeBaseEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKnowledgeBaseEntryRequest.ProtoReflect.Descriptor instead.
func (*SearchKnowledgeBaseEntryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{62}
}

func (x *SearchKnowledgeBaseEntryRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *SearchKnowledgeBaseEntryRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchKnowledgeBaseEntryRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryKnowledgeBaseByAIRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Query               string                 `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	EnhancePlan         string                 `protobuf:"bytes,2,opt,name=EnhancePlan,proto3" json:"EnhancePlan,omitempty"`
	KnowledgeBaseID     int64                  `protobuf:"varint,3,opt,name=KnowledgeBaseID,proto3" json:"KnowledgeBaseID,omitempty"`
	QueryAllCollections bool                   `protobuf:"varint,4,opt,name=QueryAllCollections,proto3" json:"QueryAllCollections,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QueryKnowledgeBaseByAIRequest) Reset() {
	*x = QueryKnowledgeBaseByAIRequest{}
	mi := &file_yakgrpc_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKnowledgeBaseByAIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKnowledgeBaseByAIRequest) ProtoMessage() {}

func (x *QueryKnowledgeBaseByAIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKnowledgeBaseByAIRequest.ProtoReflect.Descriptor instead.
func (*QueryKnowledgeBaseByAIRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{63}
}

func (x *QueryKnowledgeBaseByAIRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryKnowledgeBaseByAIRequest) GetEnhancePlan() string {
	if x != nil {
		return x.EnhancePlan
	}
	return ""
}

func (x *QueryKnowledgeBaseByAIRequest) GetKnowledgeBaseID() int64 {
	if x != nil {
		return x.KnowledgeBaseID
	}
	return 0
}

func (x *QueryKnowledgeBaseByAIRequest) GetQueryAllCollections() bool {
	if x != nil {
		return x.QueryAllCollections
	}
	return false
}

type QueryKnowledgeBaseByAIResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType   string                 `protobuf:"bytes,2,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryKnowledgeBaseByAIResponse) Reset() {
	*x = QueryKnowledgeBaseByAIResponse{}
	mi := &file_yakgrpc_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKnowledgeBaseByAIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKnowledgeBaseByAIResponse) ProtoMessage() {}

func (x *QueryKnowledgeBaseByAIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKnowledgeBaseByAIResponse.ProtoReflect.Descriptor instead.
func (*QueryKnowledgeBaseByAIResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{64}
}

func (x *QueryKnowledgeBaseByAIResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryKnowledgeBaseByAIResponse) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *QueryKnowledgeBaseByAIResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type SearchKnowledgeBaseEntryResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseEntries []*KnowledgeBaseEntry  `protobuf:"bytes,1,rep,name=KnowledgeBaseEntries,proto3" json:"KnowledgeBaseEntries,omitempty"`
	Pagination           *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total                int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SearchKnowledgeBaseEntryResponse) Reset() {
	*x = SearchKnowledgeBaseEntryResponse{}
	mi := &file_yakgrpc_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchKnowledgeBaseEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKnowledgeBaseEntryResponse) ProtoMessage() {}

func (x *SearchKnowledgeBaseEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKnowledgeBaseEntryResponse.ProtoReflect.Descriptor instead.
func (*SearchKnowledgeBaseEntryResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{65}
}

func (x *SearchKnowledgeBaseEntryResponse) GetKnowledgeBaseEntries() []*KnowledgeBaseEntry {
	if x != nil {
		return x.KnowledgeBaseEntries
	}
	return nil
}

func (x *SearchKnowledgeBaseEntryResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchKnowledgeBaseEntryResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateKnowledgeBaseEntryRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseID          int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseID,proto3" json:"KnowledgeBaseID,omitempty"`
	KnowledgeTitle           string                 `protobuf:"bytes,2,opt,name=KnowledgeTitle,proto3" json:"KnowledgeTitle,omitempty"`
	KnowledgeType            string                 `protobuf:"bytes,3,opt,name=KnowledgeType,proto3" json:"KnowledgeType,omitempty"`
	ImportanceScore          int32                  `protobuf:"varint,4,opt,name=ImportanceScore,proto3" json:"ImportanceScore,omitempty"`
	Keywords                 []string               `protobuf:"bytes,5,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	KnowledgeDetails         string                 `protobuf:"bytes,6,opt,name=KnowledgeDetails,proto3" json:"KnowledgeDetails,omitempty"`
	Summary                  string                 `protobuf:"bytes,7,opt,name=Summary,proto3" json:"Summary,omitempty"`
	SourcePage               int32                  `protobuf:"varint,8,opt,name=SourcePage,proto3" json:"SourcePage,omitempty"`
	PotentialQuestions       []string               `protobuf:"bytes,9,rep,name=PotentialQuestions,proto3" json:"PotentialQuestions,omitempty"`
	PotentialQuestionsVector []float32              `protobuf:"fixed32,10,rep,packed,name=PotentialQuestionsVector,proto3" json:"PotentialQuestionsVector,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseEntryRequest) Reset() {
	*x = CreateKnowledgeBaseEntryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseEntryRequest) ProtoMessage() {}

func (x *CreateKnowledgeBaseEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseEntryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{66}
}

func (x *CreateKnowledgeBaseEntryRequest) GetKnowledgeBaseID() int64 {
	if x != nil {
		return x.KnowledgeBaseID
	}
	return 0
}

func (x *CreateKnowledgeBaseEntryRequest) GetKnowledgeTitle() string {
	if x != nil {
		return x.KnowledgeTitle
	}
	return ""
}

func (x *CreateKnowledgeBaseEntryRequest) GetKnowledgeType() string {
	if x != nil {
		return x.KnowledgeType
	}
	return ""
}

func (x *CreateKnowledgeBaseEntryRequest) GetImportanceScore() int32 {
	if x != nil {
		return x.ImportanceScore
	}
	return 0
}

func (x *CreateKnowledgeBaseEntryRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *CreateKnowledgeBaseEntryRequest) GetKnowledgeDetails() string {
	if x != nil {
		return x.KnowledgeDetails
	}
	return ""
}

func (x *CreateKnowledgeBaseEntryRequest) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *CreateKnowledgeBaseEntryRequest) GetSourcePage() int32 {
	if x != nil {
		return x.SourcePage
	}
	return 0
}

func (x *CreateKnowledgeBaseEntryRequest) GetPotentialQuestions() []string {
	if x != nil {
		return x.PotentialQuestions
	}
	return nil
}

func (x *CreateKnowledgeBaseEntryRequest) GetPotentialQuestionsVector() []float32 {
	if x != nil {
		return x.PotentialQuestionsVector
	}
	return nil
}

type UpdateKnowledgeBaseEntryRequest struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseID               int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseID,proto3" json:"KnowledgeBaseID,omitempty"`
	KnowledgeBaseEntryID          int64                  `protobuf:"varint,2,opt,name=KnowledgeBaseEntryID,proto3" json:"KnowledgeBaseEntryID,omitempty"`
	KnowledgeBaseEntryHiddenIndex string                 `protobuf:"bytes,11,opt,name=KnowledgeBaseEntryHiddenIndex,proto3" json:"KnowledgeBaseEntryHiddenIndex,omitempty"`
	KnowledgeTitle                string                 `protobuf:"bytes,3,opt,name=KnowledgeTitle,proto3" json:"KnowledgeTitle,omitempty"`
	KnowledgeType                 string                 `protobuf:"bytes,4,opt,name=KnowledgeType,proto3" json:"KnowledgeType,omitempty"`
	ImportanceScore               int32                  `protobuf:"varint,5,opt,name=ImportanceScore,proto3" json:"ImportanceScore,omitempty"`
	Keywords                      []string               `protobuf:"bytes,6,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	KnowledgeDetails              string                 `protobuf:"bytes,7,opt,name=KnowledgeDetails,proto3" json:"KnowledgeDetails,omitempty"`
	Summary                       string                 `protobuf:"bytes,8,opt,name=Summary,proto3" json:"Summary,omitempty"`
	SourcePage                    int32                  `protobuf:"varint,9,opt,name=SourcePage,proto3" json:"SourcePage,omitempty"`
	PotentialQuestions            []string               `protobuf:"bytes,10,rep,name=PotentialQuestions,proto3" json:"PotentialQuestions,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseEntryRequest) Reset() {
	*x = UpdateKnowledgeBaseEntryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseEntryRequest) ProtoMessage() {}

func (x *UpdateKnowledgeBaseEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseEntryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateKnowledgeBaseEntryRequest) GetKnowledgeBaseID() int64 {
	if x != nil {
		return x.KnowledgeBaseID
	}
	return 0
}

func (x *UpdateKnowledgeBaseEntryRequest) GetKnowledgeBaseEntryID() int64 {
	if x != nil {
		return x.KnowledgeBaseEntryID
	}
	return 0
}

func (x *UpdateKnowledgeBaseEntryRequest) GetKnowledgeBaseEntryHiddenIndex() string {
	if x != nil {
		return x.KnowledgeBaseEntryHiddenIndex
	}
	return ""
}

func (x *UpdateKnowledgeBaseEntryRequest) GetKnowledgeTitle() string {
	if x != nil {
		return x.KnowledgeTitle
	}
	return ""
}

func (x *UpdateKnowledgeBaseEntryRequest) GetKnowledgeType() string {
	if x != nil {
		return x.KnowledgeType
	}
	return ""
}

func (x *UpdateKnowledgeBaseEntryRequest) GetImportanceScore() int32 {
	if x != nil {
		return x.ImportanceScore
	}
	return 0
}

func (x *UpdateKnowledgeBaseEntryRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *UpdateKnowledgeBaseEntryRequest) GetKnowledgeDetails() string {
	if x != nil {
		return x.KnowledgeDetails
	}
	return ""
}

func (x *UpdateKnowledgeBaseEntryRequest) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *UpdateKnowledgeBaseEntryRequest) GetSourcePage() int32 {
	if x != nil {
		return x.SourcePage
	}
	return 0
}

func (x *UpdateKnowledgeBaseEntryRequest) GetPotentialQuestions() []string {
	if x != nil {
		return x.PotentialQuestions
	}
	return nil
}

type KnowledgeBaseEntry struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ID                       int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	KnowledgeBaseId          int64                  `protobuf:"varint,2,opt,name=KnowledgeBaseId,proto3" json:"KnowledgeBaseId,omitempty"`
	KnowledgeTitle           string                 `protobuf:"bytes,3,opt,name=KnowledgeTitle,proto3" json:"KnowledgeTitle,omitempty"`
	KnowledgeType            string                 `protobuf:"bytes,4,opt,name=KnowledgeType,proto3" json:"KnowledgeType,omitempty"`
	ImportanceScore          int32                  `protobuf:"varint,5,opt,name=ImportanceScore,proto3" json:"ImportanceScore,omitempty"`
	Keywords                 []string               `protobuf:"bytes,6,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	KnowledgeDetails         string                 `protobuf:"bytes,7,opt,name=KnowledgeDetails,proto3" json:"KnowledgeDetails,omitempty"`
	Summary                  string                 `protobuf:"bytes,8,opt,name=Summary,proto3" json:"Summary,omitempty"`
	SourcePage               int32                  `protobuf:"varint,9,opt,name=SourcePage,proto3" json:"SourcePage,omitempty"`
	PotentialQuestions       []string               `protobuf:"bytes,10,rep,name=PotentialQuestions,proto3" json:"PotentialQuestions,omitempty"`
	PotentialQuestionsVector []float32              `protobuf:"fixed32,11,rep,packed,name=PotentialQuestionsVector,proto3" json:"PotentialQuestionsVector,omitempty"`
	HiddenIndex              string                 `protobuf:"bytes,12,opt,name=HiddenIndex,proto3" json:"HiddenIndex,omitempty"`
	RelatedEntityUUIDS       string                 `protobuf:"bytes,13,opt,name=RelatedEntityUUIDS,proto3" json:"RelatedEntityUUIDS,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *KnowledgeBaseEntry) Reset() {
	*x = KnowledgeBaseEntry{}
	mi := &file_yakgrpc_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseEntry) ProtoMessage() {}

func (x *KnowledgeBaseEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseEntry.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseEntry) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{68}
}

func (x *KnowledgeBaseEntry) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *KnowledgeBaseEntry) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *KnowledgeBaseEntry) GetKnowledgeTitle() string {
	if x != nil {
		return x.KnowledgeTitle
	}
	return ""
}

func (x *KnowledgeBaseEntry) GetKnowledgeType() string {
	if x != nil {
		return x.KnowledgeType
	}
	return ""
}

func (x *KnowledgeBaseEntry) GetImportanceScore() int32 {
	if x != nil {
		return x.ImportanceScore
	}
	return 0
}

func (x *KnowledgeBaseEntry) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *KnowledgeBaseEntry) GetKnowledgeDetails() string {
	if x != nil {
		return x.KnowledgeDetails
	}
	return ""
}

func (x *KnowledgeBaseEntry) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *KnowledgeBaseEntry) GetSourcePage() int32 {
	if x != nil {
		return x.SourcePage
	}
	return 0
}

func (x *KnowledgeBaseEntry) GetPotentialQuestions() []string {
	if x != nil {
		return x.PotentialQuestions
	}
	return nil
}

func (x *KnowledgeBaseEntry) GetPotentialQuestionsVector() []float32 {
	if x != nil {
		return x.PotentialQuestionsVector
	}
	return nil
}

func (x *KnowledgeBaseEntry) GetHiddenIndex() string {
	if x != nil {
		return x.HiddenIndex
	}
	return ""
}

func (x *KnowledgeBaseEntry) GetRelatedEntityUUIDS() string {
	if x != nil {
		return x.RelatedEntityUUIDS
	}
	return ""
}

type DeleteKnowledgeBaseRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=KnowledgeBaseId,proto3" json:"KnowledgeBaseId,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseRequest) Reset() {
	*x = DeleteKnowledgeBaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseRequest) ProtoMessage() {}

func (x *DeleteKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteKnowledgeBaseRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

type DeleteSearchVectorDatabaseRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CollectionNames []string               `protobuf:"bytes,1,rep,name=CollectionNames,proto3" json:"CollectionNames,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeleteSearchVectorDatabaseRequest) Reset() {
	*x = DeleteSearchVectorDatabaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSearchVectorDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSearchVectorDatabaseRequest) ProtoMessage() {}

func (x *DeleteSearchVectorDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSearchVectorDatabaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteSearchVectorDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteSearchVectorDatabaseRequest) GetCollectionNames() []string {
	if x != nil {
		return x.CollectionNames
	}
	return nil
}

type VectorStoreCollection struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description      string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	ID               int64                  `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	ModelName        string                 `protobuf:"bytes,4,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	Dimension        int32                  `protobuf:"varint,5,opt,name=Dimension,proto3" json:"Dimension,omitempty"`
	M                int32                  `protobuf:"varint,6,opt,name=M,proto3" json:"M,omitempty"`
	Ml               float32                `protobuf:"fixed32,7,opt,name=Ml,proto3" json:"Ml,omitempty"`
	EfSearch         int32                  `protobuf:"varint,8,opt,name=EfSearch,proto3" json:"EfSearch,omitempty"`
	EfConstruct      int32                  `protobuf:"varint,9,opt,name=EfConstruct,proto3" json:"EfConstruct,omitempty"`
	DistanceFuncType string                 `protobuf:"bytes,10,opt,name=DistanceFuncType,proto3" json:"DistanceFuncType,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VectorStoreCollection) Reset() {
	*x = VectorStoreCollection{}
	mi := &file_yakgrpc_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorStoreCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorStoreCollection) ProtoMessage() {}

func (x *VectorStoreCollection) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorStoreCollection.ProtoReflect.Descriptor instead.
func (*VectorStoreCollection) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{71}
}

func (x *VectorStoreCollection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VectorStoreCollection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VectorStoreCollection) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *VectorStoreCollection) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *VectorStoreCollection) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *VectorStoreCollection) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *VectorStoreCollection) GetMl() float32 {
	if x != nil {
		return x.Ml
	}
	return 0
}

func (x *VectorStoreCollection) GetEfSearch() int32 {
	if x != nil {
		return x.EfSearch
	}
	return 0
}

func (x *VectorStoreCollection) GetEfConstruct() int32 {
	if x != nil {
		return x.EfConstruct
	}
	return 0
}

func (x *VectorStoreCollection) GetDistanceFuncType() string {
	if x != nil {
		return x.DistanceFuncType
	}
	return ""
}

type ListVectorStoreEntriesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CollectionID   int64                  `protobuf:"varint,1,opt,name=CollectionID,proto3" json:"CollectionID,omitempty"`
	Keyword        string                 `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Pagination     *Paging                `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	CollectionName string                 `protobuf:"bytes,4,opt,name=CollectionName,proto3" json:"CollectionName,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListVectorStoreEntriesRequest) Reset() {
	*x = ListVectorStoreEntriesRequest{}
	mi := &file_yakgrpc_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVectorStoreEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVectorStoreEntriesRequest) ProtoMessage() {}

func (x *ListVectorStoreEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVectorStoreEntriesRequest.ProtoReflect.Descriptor instead.
func (*ListVectorStoreEntriesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{72}
}

func (x *ListVectorStoreEntriesRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *ListVectorStoreEntriesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListVectorStoreEntriesRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListVectorStoreEntriesRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

type CreateVectorStoreEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UID           string                 `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Metadata      string                 `protobuf:"bytes,3,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVectorStoreEntryRequest) Reset() {
	*x = CreateVectorStoreEntryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVectorStoreEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVectorStoreEntryRequest) ProtoMessage() {}

func (x *CreateVectorStoreEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVectorStoreEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateVectorStoreEntryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{73}
}

func (x *CreateVectorStoreEntryRequest) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *CreateVectorStoreEntryRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateVectorStoreEntryRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type VectorStoreEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UID           string                 `protobuf:"bytes,2,opt,name=UID,proto3" json:"UID,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	Metadata      string                 `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	Embedding     []float32              `protobuf:"fixed32,5,rep,packed,name=Embedding,proto3" json:"Embedding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VectorStoreEntry) Reset() {
	*x = VectorStoreEntry{}
	mi := &file_yakgrpc_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorStoreEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorStoreEntry) ProtoMessage() {}

func (x *VectorStoreEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorStoreEntry.ProtoReflect.Descriptor instead.
func (*VectorStoreEntry) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{74}
}

func (x *VectorStoreEntry) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *VectorStoreEntry) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *VectorStoreEntry) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *VectorStoreEntry) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *VectorStoreEntry) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

type ListVectorStoreEntriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*VectorStoreEntry    `protobuf:"bytes,1,rep,name=Entries,proto3" json:"Entries,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVectorStoreEntriesResponse) Reset() {
	*x = ListVectorStoreEntriesResponse{}
	mi := &file_yakgrpc_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVectorStoreEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVectorStoreEntriesResponse) ProtoMessage() {}

func (x *ListVectorStoreEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVectorStoreEntriesResponse.ProtoReflect.Descriptor instead.
func (*ListVectorStoreEntriesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{75}
}

func (x *ListVectorStoreEntriesResponse) GetEntries() []*VectorStoreEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ListVectorStoreEntriesResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListVectorStoreEntriesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetDocumentByVectorStoreEntryIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDocumentByVectorStoreEntryIDRequest) Reset() {
	*x = GetDocumentByVectorStoreEntryIDRequest{}
	mi := &file_yakgrpc_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDocumentByVectorStoreEntryIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentByVectorStoreEntryIDRequest) ProtoMessage() {}

func (x *GetDocumentByVectorStoreEntryIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentByVectorStoreEntryIDRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentByVectorStoreEntryIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{76}
}

func (x *GetDocumentByVectorStoreEntryIDRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetDocumentByVectorStoreEntryIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Document      *KnowledgeBaseEntry    `protobuf:"bytes,1,opt,name=Document,proto3" json:"Document,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDocumentByVectorStoreEntryIDResponse) Reset() {
	*x = GetDocumentByVectorStoreEntryIDResponse{}
	mi := &file_yakgrpc_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDocumentByVectorStoreEntryIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentByVectorStoreEntryIDResponse) ProtoMessage() {}

func (x *GetDocumentByVectorStoreEntryIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentByVectorStoreEntryIDResponse.ProtoReflect.Descriptor instead.
func (*GetDocumentByVectorStoreEntryIDResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{77}
}

func (x *GetDocumentByVectorStoreEntryIDResponse) GetDocument() *KnowledgeBaseEntry {
	if x != nil {
		return x.Document
	}
	return nil
}

type UpdateVectorStoreCollectionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	ID            int64                  `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVectorStoreCollectionRequest) Reset() {
	*x = UpdateVectorStoreCollectionRequest{}
	mi := &file_yakgrpc_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVectorStoreCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVectorStoreCollectionRequest) ProtoMessage() {}

func (x *UpdateVectorStoreCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVectorStoreCollectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateVectorStoreCollectionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{78}
}

func (x *UpdateVectorStoreCollectionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVectorStoreCollectionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateVectorStoreCollectionRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// 带分页
type GetAllVectorStoreCollectionsWithFilterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyword       string                 `protobuf:"bytes,1,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	ID            int64                  `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllVectorStoreCollectionsWithFilterRequest) Reset() {
	*x = GetAllVectorStoreCollectionsWithFilterRequest{}
	mi := &file_yakgrpc_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllVectorStoreCollectionsWithFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVectorStoreCollectionsWithFilterRequest) ProtoMessage() {}

func (x *GetAllVectorStoreCollectionsWithFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVectorStoreCollectionsWithFilterRequest.ProtoReflect.Descriptor instead.
func (*GetAllVectorStoreCollectionsWithFilterRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{79}
}

func (x *GetAllVectorStoreCollectionsWithFilterRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *GetAllVectorStoreCollectionsWithFilterRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GetAllVectorStoreCollectionsWithFilterRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetAllVectorStoreCollectionsWithFilterResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Collections   []*VectorStoreCollection `protobuf:"bytes,1,rep,name=Collections,proto3" json:"Collections,omitempty"`
	Pagination    *Paging                  `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                    `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllVectorStoreCollectionsWithFilterResponse) Reset() {
	*x = GetAllVectorStoreCollectionsWithFilterResponse{}
	mi := &file_yakgrpc_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllVectorStoreCollectionsWithFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVectorStoreCollectionsWithFilterResponse) ProtoMessage() {}

func (x *GetAllVectorStoreCollectionsWithFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVectorStoreCollectionsWithFilterResponse.ProtoReflect.Descriptor instead.
func (*GetAllVectorStoreCollectionsWithFilterResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{80}
}

func (x *GetAllVectorStoreCollectionsWithFilterResponse) GetCollections() []*VectorStoreCollection {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *GetAllVectorStoreCollectionsWithFilterResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetAllVectorStoreCollectionsWithFilterResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAllVectorStoreCollectionsResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Collections   []*VectorStoreCollection `protobuf:"bytes,1,rep,name=Collections,proto3" json:"Collections,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllVectorStoreCollectionsResponse) Reset() {
	*x = GetAllVectorStoreCollectionsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllVectorStoreCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVectorStoreCollectionsResponse) ProtoMessage() {}

func (x *GetAllVectorStoreCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVectorStoreCollectionsResponse.ProtoReflect.Descriptor instead.
func (*GetAllVectorStoreCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{81}
}

func (x *GetAllVectorStoreCollectionsResponse) GetCollections() []*VectorStoreCollection {
	if x != nil {
		return x.Collections
	}
	return nil
}

type IsSearchVectorDatabaseReadyRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CollectionNames []string               `protobuf:"bytes,1,rep,name=CollectionNames,proto3" json:"CollectionNames,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IsSearchVectorDatabaseReadyRequest) Reset() {
	*x = IsSearchVectorDatabaseReadyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsSearchVectorDatabaseReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSearchVectorDatabaseReadyRequest) ProtoMessage() {}

func (x *IsSearchVectorDatabaseReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSearchVectorDatabaseReadyRequest.ProtoReflect.Descriptor instead.
func (*IsSearchVectorDatabaseReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{82}
}

func (x *IsSearchVectorDatabaseReadyRequest) GetCollectionNames() []string {
	if x != nil {
		return x.CollectionNames
	}
	return nil
}

type IsSearchVectorDatabaseReadyResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	IsReady                 bool                   `protobuf:"varint,1,opt,name=IsReady,proto3" json:"IsReady,omitempty"`
	NotReadyCollectionNames []string               `protobuf:"bytes,2,rep,name=NotReadyCollectionNames,proto3" json:"NotReadyCollectionNames,omitempty"`
	Message                 string                 `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *IsSearchVectorDatabaseReadyResponse) Reset() {
	*x = IsSearchVectorDatabaseReadyResponse{}
	mi := &file_yakgrpc_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsSearchVectorDatabaseReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSearchVectorDatabaseReadyResponse) ProtoMessage() {}

func (x *IsSearchVectorDatabaseReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSearchVectorDatabaseReadyResponse.ProtoReflect.Descriptor instead.
func (*IsSearchVectorDatabaseReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{83}
}

func (x *IsSearchVectorDatabaseReadyResponse) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *IsSearchVectorDatabaseReadyResponse) GetNotReadyCollectionNames() []string {
	if x != nil {
		return x.NotReadyCollectionNames
	}
	return nil
}

func (x *IsSearchVectorDatabaseReadyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type InitSearchVectorDatabaseRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Proxy           string                 `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	CollectionNames []string               `protobuf:"bytes,2,rep,name=CollectionNames,proto3" json:"CollectionNames,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InitSearchVectorDatabaseRequest) Reset() {
	*x = InitSearchVectorDatabaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitSearchVectorDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitSearchVectorDatabaseRequest) ProtoMessage() {}

func (x *InitSearchVectorDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitSearchVectorDatabaseRequest.ProtoReflect.Descriptor instead.
func (*InitSearchVectorDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{84}
}

func (x *InitSearchVectorDatabaseRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *InitSearchVectorDatabaseRequest) GetCollectionNames() []string {
	if x != nil {
		return x.CollectionNames
	}
	return nil
}

type GetToolSetListResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ToolSetList     []*ToolSetInfo         `protobuf:"bytes,1,rep,name=ToolSetList,proto3" json:"ToolSetList,omitempty"`
	ResourceSetList []*ResourceSetInfo     `protobuf:"bytes,2,rep,name=ResourceSetList,proto3" json:"ResourceSetList,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetToolSetListResponse) Reset() {
	*x = GetToolSetListResponse{}
	mi := &file_yakgrpc_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolSetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolSetListResponse) ProtoMessage() {}

func (x *GetToolSetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolSetListResponse.ProtoReflect.Descriptor instead.
func (*GetToolSetListResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{85}
}

func (x *GetToolSetListResponse) GetToolSetList() []*ToolSetInfo {
	if x != nil {
		return x.ToolSetList
	}
	return nil
}

func (x *GetToolSetListResponse) GetResourceSetList() []*ResourceSetInfo {
	if x != nil {
		return x.ResourceSetList
	}
	return nil
}

type ToolSetInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolSetInfo) Reset() {
	*x = ToolSetInfo{}
	mi := &file_yakgrpc_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolSetInfo) ProtoMessage() {}

func (x *ToolSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolSetInfo.ProtoReflect.Descriptor instead.
func (*ToolSetInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{86}
}

func (x *ToolSetInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResourceSetInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceSetInfo) Reset() {
	*x = ResourceSetInfo{}
	mi := &file_yakgrpc_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSetInfo) ProtoMessage() {}

func (x *ResourceSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSetInfo.ProtoReflect.Descriptor instead.
func (*ResourceSetInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{87}
}

func (x *ResourceSetInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AIToolGenerateMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=ToolName,proto3" json:"ToolName,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIToolGenerateMetadataRequest) Reset() {
	*x = AIToolGenerateMetadataRequest{}
	mi := &file_yakgrpc_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIToolGenerateMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIToolGenerateMetadataRequest) ProtoMessage() {}

func (x *AIToolGenerateMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIToolGenerateMetadataRequest.ProtoReflect.Descriptor instead.
func (*AIToolGenerateMetadataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{88}
}

func (x *AIToolGenerateMetadataRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *AIToolGenerateMetadataRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type AIToolGenerateMetadataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Keywords      []string               `protobuf:"bytes,3,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIToolGenerateMetadataResponse) Reset() {
	*x = AIToolGenerateMetadataResponse{}
	mi := &file_yakgrpc_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIToolGenerateMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIToolGenerateMetadataResponse) ProtoMessage() {}

func (x *AIToolGenerateMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIToolGenerateMetadataResponse.ProtoReflect.Descriptor instead.
func (*AIToolGenerateMetadataResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{89}
}

func (x *AIToolGenerateMetadataResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AIToolGenerateMetadataResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AIToolGenerateMetadataResponse) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type SaveAIToolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	ToolPath      string                 `protobuf:"bytes,4,opt,name=ToolPath,proto3" json:"ToolPath,omitempty"`
	Keywords      []string               `protobuf:"bytes,5,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveAIToolRequest) Reset() {
	*x = SaveAIToolRequest{}
	mi := &file_yakgrpc_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveAIToolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAIToolRequest) ProtoMessage() {}

func (x *SaveAIToolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAIToolRequest.ProtoReflect.Descriptor instead.
func (*SaveAIToolRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{90}
}

func (x *SaveAIToolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SaveAIToolRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SaveAIToolRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SaveAIToolRequest) GetToolPath() string {
	if x != nil {
		return x.ToolPath
	}
	return ""
}

func (x *SaveAIToolRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type SaveAIToolV2Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSuccess     bool                   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	AITool        *AITool                `protobuf:"bytes,3,opt,name=AITool,proto3" json:"AITool,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveAIToolV2Response) Reset() {
	*x = SaveAIToolV2Response{}
	mi := &file_yakgrpc_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveAIToolV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAIToolV2Response) ProtoMessage() {}

func (x *SaveAIToolV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAIToolV2Response.ProtoReflect.Descriptor instead.
func (*SaveAIToolV2Response) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{91}
}

func (x *SaveAIToolV2Response) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *SaveAIToolV2Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SaveAIToolV2Response) GetAITool() *AITool {
	if x != nil {
		return x.AITool
	}
	return nil
}

type UpdateAIToolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"`
	ToolPath      string                 `protobuf:"bytes,5,opt,name=ToolPath,proto3" json:"ToolPath,omitempty"`
	Keywords      []string               `protobuf:"bytes,6,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAIToolRequest) Reset() {
	*x = UpdateAIToolRequest{}
	mi := &file_yakgrpc_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAIToolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAIToolRequest) ProtoMessage() {}

func (x *UpdateAIToolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAIToolRequest.ProtoReflect.Descriptor instead.
func (*UpdateAIToolRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{92}
}

func (x *UpdateAIToolRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateAIToolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAIToolRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAIToolRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateAIToolRequest) GetToolPath() string {
	if x != nil {
		return x.ToolPath
	}
	return ""
}

func (x *UpdateAIToolRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type DeleteAIToolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolNames     []string               `protobuf:"bytes,1,rep,name=ToolNames,proto3" json:"ToolNames,omitempty"`
	IDs           []int64                `protobuf:"varint,2,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAIToolRequest) Reset() {
	*x = DeleteAIToolRequest{}
	mi := &file_yakgrpc_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAIToolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAIToolRequest) ProtoMessage() {}

func (x *DeleteAIToolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAIToolRequest.ProtoReflect.Descriptor instead.
func (*DeleteAIToolRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{93}
}

func (x *DeleteAIToolRequest) GetToolNames() []string {
	if x != nil {
		return x.ToolNames
	}
	return nil
}

func (x *DeleteAIToolRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

type ToggleAIToolFavoriteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=ToolName,proto3" json:"ToolName,omitempty"`
	ID            int64                  `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleAIToolFavoriteRequest) Reset() {
	*x = ToggleAIToolFavoriteRequest{}
	mi := &file_yakgrpc_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleAIToolFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleAIToolFavoriteRequest) ProtoMessage() {}

func (x *ToggleAIToolFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleAIToolFavoriteRequest.ProtoReflect.Descriptor instead.
func (*ToggleAIToolFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{94}
}

func (x *ToggleAIToolFavoriteRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ToggleAIToolFavoriteRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ToggleAIToolFavoriteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsFavorite    bool                   `protobuf:"varint,1,opt,name=IsFavorite,proto3" json:"IsFavorite,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleAIToolFavoriteResponse) Reset() {
	*x = ToggleAIToolFavoriteResponse{}
	mi := &file_yakgrpc_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleAIToolFavoriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleAIToolFavoriteResponse) ProtoMessage() {}

func (x *ToggleAIToolFavoriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleAIToolFavoriteResponse.ProtoReflect.Descriptor instead.
func (*ToggleAIToolFavoriteResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{95}
}

func (x *ToggleAIToolFavoriteResponse) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *ToggleAIToolFavoriteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AITool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	ToolPath      string                 `protobuf:"bytes,4,opt,name=ToolPath,proto3" json:"ToolPath,omitempty"`
	Keywords      []string               `protobuf:"bytes,5,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	IsFavorite    bool                   `protobuf:"varint,6,opt,name=IsFavorite,proto3" json:"IsFavorite,omitempty"`
	ID            int64                  `protobuf:"varint,7,opt,name=ID,proto3" json:"ID,omitempty"`
	VerboseName   string                 `protobuf:"bytes,8,opt,name=VerboseName,proto3" json:"VerboseName,omitempty"` // 给用户看的展示名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AITool) Reset() {
	*x = AITool{}
	mi := &file_yakgrpc_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AITool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITool) ProtoMessage() {}

func (x *AITool) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITool.ProtoReflect.Descriptor instead.
func (*AITool) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{96}
}

func (x *AITool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AITool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AITool) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AITool) GetToolPath() string {
	if x != nil {
		return x.ToolPath
	}
	return ""
}

func (x *AITool) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *AITool) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *AITool) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AITool) GetVerboseName() string {
	if x != nil {
		return x.VerboseName
	}
	return ""
}

type GetAIToolListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tools         []*AITool              `protobuf:"bytes,1,rep,name=Tools,proto3" json:"Tools,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAIToolListResponse) Reset() {
	*x = GetAIToolListResponse{}
	mi := &file_yakgrpc_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAIToolListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAIToolListResponse) ProtoMessage() {}

func (x *GetAIToolListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAIToolListResponse.ProtoReflect.Descriptor instead.
func (*GetAIToolListResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{97}
}

func (x *GetAIToolListResponse) GetTools() []*AITool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *GetAIToolListResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetAIToolListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAIToolListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	ToolName      string                 `protobuf:"bytes,2,opt,name=ToolName,proto3" json:"ToolName,omitempty"`
	ToolID        int64                  `protobuf:"varint,5,opt,name=ToolID,proto3" json:"ToolID,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	OnlyFavorites bool                   `protobuf:"varint,4,opt,name=OnlyFavorites,proto3" json:"OnlyFavorites,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAIToolListRequest) Reset() {
	*x = GetAIToolListRequest{}
	mi := &file_yakgrpc_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAIToolListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAIToolListRequest) ProtoMessage() {}

func (x *GetAIToolListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAIToolListRequest.ProtoReflect.Descriptor instead.
func (*GetAIToolListRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{98}
}

func (x *GetAIToolListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetAIToolListRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *GetAIToolListRequest) GetToolID() int64 {
	if x != nil {
		return x.ToolID
	}
	return 0
}

func (x *GetAIToolListRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetAIToolListRequest) GetOnlyFavorites() bool {
	if x != nil {
		return x.OnlyFavorites
	}
	return false
}

type AIOutputEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CoordinatorId   string                 `protobuf:"bytes,1,opt,name=CoordinatorId,proto3" json:"CoordinatorId,omitempty"`
	Type            string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	NodeId          string                 `protobuf:"bytes,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	IsSystem        bool                   `protobuf:"varint,4,opt,name=IsSystem,proto3" json:"IsSystem,omitempty"`
	IsStream        bool                   `protobuf:"varint,5,opt,name=IsStream,proto3" json:"IsStream,omitempty"`
	IsReason        bool                   `protobuf:"varint,6,opt,name=IsReason,proto3" json:"IsReason,omitempty"`
	StreamDelta     []byte                 `protobuf:"bytes,7,opt,name=StreamDelta,proto3" json:"StreamDelta,omitempty"`
	IsJson          bool                   `protobuf:"varint,8,opt,name=IsJson,proto3" json:"IsJson,omitempty"`
	IsResult        bool                   `protobuf:"varint,15,opt,name=IsResult,proto3" json:"IsResult,omitempty"`
	Content         []byte                 `protobuf:"bytes,9,opt,name=Content,proto3" json:"Content,omitempty"`
	Timestamp       int64                  `protobuf:"varint,10,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TaskIndex       string                 `protobuf:"bytes,11,opt,name=TaskIndex,proto3" json:"TaskIndex,omitempty"`
	DisableMarkdown bool                   `protobuf:"varint,13,opt,name=DisableMarkdown,proto3" json:"DisableMarkdown,omitempty"`
	IsSync          bool                   `protobuf:"varint,12,opt,name=IsSync,proto3" json:"IsSync,omitempty"`              // 是否是同步消息
	SyncID          string                 `protobuf:"bytes,14,opt,name=SyncID,proto3" json:"SyncID,omitempty"`               // 用于同步消息的 ID
	EventUUID       string                 `protobuf:"bytes,16,opt,name=EventUUID,proto3" json:"EventUUID,omitempty"`         // 事件的唯一ID, used via stream stream-finished
	NodeIdVerbose   *I18N                  `protobuf:"bytes,17,opt,name=NodeIdVerbose,proto3" json:"NodeIdVerbose,omitempty"` // 用于展示的节点ID，可能是节点名称
	ContentType     string                 `protobuf:"bytes,18,opt,name=ContentType,proto3" json:"ContentType,omitempty"`     // markdown / yaklang_code / plain_code
	CallToolID      string                 `protobuf:"bytes,19,opt,name=CallToolID,proto3" json:"CallToolID,omitempty"`       // 如果是调用工具相关的事件，那么这里是调用的ID
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AIOutputEvent) Reset() {
	*x = AIOutputEvent{}
	mi := &file_yakgrpc_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIOutputEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIOutputEvent) ProtoMessage() {}

func (x *AIOutputEvent) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIOutputEvent.ProtoReflect.Descriptor instead.
func (*AIOutputEvent) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{99}
}

func (x *AIOutputEvent) GetCoordinatorId() string {
	if x != nil {
		return x.CoordinatorId
	}
	return ""
}

func (x *AIOutputEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AIOutputEvent) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AIOutputEvent) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *AIOutputEvent) GetIsStream() bool {
	if x != nil {
		return x.IsStream
	}
	return false
}

func (x *AIOutputEvent) GetIsReason() bool {
	if x != nil {
		return x.IsReason
	}
	return false
}

func (x *AIOutputEvent) GetStreamDelta() []byte {
	if x != nil {
		return x.StreamDelta
	}
	return nil
}

func (x *AIOutputEvent) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *AIOutputEvent) GetIsResult() bool {
	if x != nil {
		return x.IsResult
	}
	return false
}

func (x *AIOutputEvent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *AIOutputEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AIOutputEvent) GetTaskIndex() string {
	if x != nil {
		return x.TaskIndex
	}
	return ""
}

func (x *AIOutputEvent) GetDisableMarkdown() bool {
	if x != nil {
		return x.DisableMarkdown
	}
	return false
}

func (x *AIOutputEvent) GetIsSync() bool {
	if x != nil {
		return x.IsSync
	}
	return false
}

func (x *AIOutputEvent) GetSyncID() string {
	if x != nil {
		return x.SyncID
	}
	return ""
}

func (x *AIOutputEvent) GetEventUUID() string {
	if x != nil {
		return x.EventUUID
	}
	return ""
}

func (x *AIOutputEvent) GetNodeIdVerbose() *I18N {
	if x != nil {
		return x.NodeIdVerbose
	}
	return nil
}

func (x *AIOutputEvent) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *AIOutputEvent) GetCallToolID() string {
	if x != nil {
		return x.CallToolID
	}
	return ""
}

type I18N struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Zh            string                 `protobuf:"bytes,1,opt,name=Zh,proto3" json:"Zh,omitempty"`
	En            string                 `protobuf:"bytes,2,opt,name=En,proto3" json:"En,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *I18N) Reset() {
	*x = I18N{}
	mi := &file_yakgrpc_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *I18N) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I18N) ProtoMessage() {}

func (x *I18N) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I18N.ProtoReflect.Descriptor instead.
func (*I18N) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{100}
}

func (x *I18N) GetZh() string {
	if x != nil {
		return x.Zh
	}
	return ""
}

func (x *I18N) GetEn() string {
	if x != nil {
		return x.En
	}
	return ""
}

type AIInputEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IsStart          bool                   `protobuf:"varint,1,opt,name=IsStart,proto3" json:"IsStart,omitempty"`
	IsConfigHotpatch bool                   `protobuf:"varint,8,opt,name=IsConfigHotpatch,proto3" json:"IsConfigHotpatch,omitempty"`
	HotpatchType     string                 `protobuf:"bytes,9,opt,name=HotpatchType,proto3" json:"HotpatchType,omitempty"`
	// 如果是配置热补丁，那么 Params 就是热补丁的参数
	Params               *AIStartParams `protobuf:"bytes,2,opt,name=Params,proto3" json:"Params,omitempty"`
	IsInteractiveMessage bool           `protobuf:"varint,3,opt,name=IsInteractiveMessage,proto3" json:"IsInteractiveMessage,omitempty"`
	InteractiveId        string         `protobuf:"bytes,4,opt,name=InteractiveId,proto3" json:"InteractiveId,omitempty"`
	InteractiveJSONInput string         `protobuf:"bytes,5,opt,name=InteractiveJSONInput,proto3" json:"InteractiveJSONInput,omitempty"`
	IsSyncMessage        bool           `protobuf:"varint,6,opt,name=IsSyncMessage,proto3" json:"IsSyncMessage,omitempty"`
	SyncType             string         `protobuf:"bytes,7,opt,name=SyncType,proto3" json:"SyncType,omitempty"`
	SyncJsonInput        string         `protobuf:"bytes,10,opt,name=SyncJsonInput,proto3" json:"SyncJsonInput,omitempty"`
	IsFreeInput          bool           `protobuf:"varint,11,opt,name=IsFreeInput,proto3" json:"IsFreeInput,omitempty"`
	FreeInput            string         `protobuf:"bytes,12,opt,name=FreeInput,proto3" json:"FreeInput,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AIInputEvent) Reset() {
	*x = AIInputEvent{}
	mi := &file_yakgrpc_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIInputEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIInputEvent) ProtoMessage() {}

func (x *AIInputEvent) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIInputEvent.ProtoReflect.Descriptor instead.
func (*AIInputEvent) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{101}
}

func (x *AIInputEvent) GetIsStart() bool {
	if x != nil {
		return x.IsStart
	}
	return false
}

func (x *AIInputEvent) GetIsConfigHotpatch() bool {
	if x != nil {
		return x.IsConfigHotpatch
	}
	return false
}

func (x *AIInputEvent) GetHotpatchType() string {
	if x != nil {
		return x.HotpatchType
	}
	return ""
}

func (x *AIInputEvent) GetParams() *AIStartParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *AIInputEvent) GetIsInteractiveMessage() bool {
	if x != nil {
		return x.IsInteractiveMessage
	}
	return false
}

func (x *AIInputEvent) GetInteractiveId() string {
	if x != nil {
		return x.InteractiveId
	}
	return ""
}

func (x *AIInputEvent) GetInteractiveJSONInput() string {
	if x != nil {
		return x.InteractiveJSONInput
	}
	return ""
}

func (x *AIInputEvent) GetIsSyncMessage() bool {
	if x != nil {
		return x.IsSyncMessage
	}
	return false
}

func (x *AIInputEvent) GetSyncType() string {
	if x != nil {
		return x.SyncType
	}
	return ""
}

func (x *AIInputEvent) GetSyncJsonInput() string {
	if x != nil {
		return x.SyncJsonInput
	}
	return ""
}

func (x *AIInputEvent) GetIsFreeInput() bool {
	if x != nil {
		return x.IsFreeInput
	}
	return false
}

func (x *AIInputEvent) GetFreeInput() string {
	if x != nil {
		return x.FreeInput
	}
	return ""
}

type AITriageInputEvent struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	IsStart              bool                   `protobuf:"varint,1,opt,name=IsStart,proto3" json:"IsStart,omitempty"`
	Params               *AIStartParams         `protobuf:"bytes,2,opt,name=Params,proto3" json:"Params,omitempty"`
	IsInteractiveMessage bool                   `protobuf:"varint,3,opt,name=IsInteractiveMessage,proto3" json:"IsInteractiveMessage,omitempty"`
	InteractiveId        string                 `protobuf:"bytes,4,opt,name=InteractiveId,proto3" json:"InteractiveId,omitempty"`
	InteractiveJSONInput string                 `protobuf:"bytes,5,opt,name=InteractiveJSONInput,proto3" json:"InteractiveJSONInput,omitempty"`
	IsFreeInput          bool                   `protobuf:"varint,6,opt,name=IsFreeInput,proto3" json:"IsFreeInput,omitempty"`
	FreeInput            string                 `protobuf:"bytes,7,opt,name=FreeInput,proto3" json:"FreeInput,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AITriageInputEvent) Reset() {
	*x = AITriageInputEvent{}
	mi := &file_yakgrpc_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AITriageInputEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITriageInputEvent) ProtoMessage() {}

func (x *AITriageInputEvent) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITriageInputEvent.ProtoReflect.Descriptor instead.
func (*AITriageInputEvent) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{102}
}

func (x *AITriageInputEvent) GetIsStart() bool {
	if x != nil {
		return x.IsStart
	}
	return false
}

func (x *AITriageInputEvent) GetParams() *AIStartParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *AITriageInputEvent) GetIsInteractiveMessage() bool {
	if x != nil {
		return x.IsInteractiveMessage
	}
	return false
}

func (x *AITriageInputEvent) GetInteractiveId() string {
	if x != nil {
		return x.InteractiveId
	}
	return ""
}

func (x *AITriageInputEvent) GetInteractiveJSONInput() string {
	if x != nil {
		return x.InteractiveJSONInput
	}
	return ""
}

func (x *AITriageInputEvent) GetIsFreeInput() bool {
	if x != nil {
		return x.IsFreeInput
	}
	return false
}

func (x *AITriageInputEvent) GetFreeInput() string {
	if x != nil {
		return x.FreeInput
	}
	return ""
}

type McpConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpConfig) Reset() {
	*x = McpConfig{}
	mi := &file_yakgrpc_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpConfig) ProtoMessage() {}

func (x *McpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpConfig.ProtoReflect.Descriptor instead.
func (*McpConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{103}
}

func (x *McpConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *McpConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *McpConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AIStartParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// if set will try recovery
	CoordinatorId string       `protobuf:"bytes,17,opt,name=CoordinatorId,proto3" json:"CoordinatorId,omitempty"`
	Sequence      int64        `protobuf:"varint,18,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	McpServers    []*McpConfig `protobuf:"bytes,1,rep,name=McpServers,proto3" json:"McpServers,omitempty"`
	UserQuery     string       `protobuf:"bytes,2,opt,name=UserQuery,proto3" json:"UserQuery,omitempty"`
	// allow ai to use the fs
	EnableSystemFileSystemOperator bool `protobuf:"varint,3,opt,name=EnableSystemFileSystemOperator,proto3" json:"EnableSystemFileSystemOperator,omitempty"`
	UseDefaultAIConfig             bool `protobuf:"varint,4,opt,name=UseDefaultAIConfig,proto3" json:"UseDefaultAIConfig,omitempty"`
	// Forge 就是 AI 模版
	ForgeName   string           `protobuf:"bytes,5,opt,name=ForgeName,proto3" json:"ForgeName,omitempty"`
	ForgeParams []*ExecParamItem `protobuf:"bytes,6,rep,name=ForgeParams,proto3" json:"ForgeParams,omitempty"`
	// 是否禁用人机交互（AI 可能会主动问人问题）
	// 在 AI ReAct 中，他对应的是 EnableUserInteract
	// 在 AI Coordinator 中，还是原来的样子
	DisallowRequireForUserPrompt bool `protobuf:"varint,7,opt,name=DisallowRequireForUserPrompt,proto3" json:"DisallowRequireForUserPrompt,omitempty"`
	// Review 政策
	// 一般来说，如果 Review Handler 被 Forge 接管了，这个就不应该可以设置。
	// 普通的 Forge 并不会设置 Review 政策
	// ReviewPolicy 可选的选项如下：
	// 1. manual (全手动，大事小事所有的事情都由人来决策)
	// 2. yolo (全自动，所有的事情，都直接执行，无需参与 - 效果差，危险程度高)
	// 3. ai (AI 来进行初步决策，如果AI觉得风险程度比较高，则转交给人)
	ReviewPolicy string `protobuf:"bytes,8,opt,name=ReviewPolicy,proto3" json:"ReviewPolicy,omitempty"`
	// 如果 Review 交给 AI 来做的话，那么就会涉及到一个风险打分
	// AIReviewRiskControlScore 就是低于这个分数，AI 自动同意。
	// 如果高于这个分数，转成手动。
	AIReviewRiskControlScore float64 `protobuf:"fixed64,81,opt,name=AIReviewRiskControlScore,proto3" json:"AIReviewRiskControlScore,omitempty"`
	// 禁用任何外部工具，这就是一个纯聊天机器了，一般没啥用了
	DisableToolUse bool `protobuf:"varint,9,opt,name=DisableToolUse,proto3" json:"DisableToolUse,omitempty"`
	// 默认是3，一般是说如果远端AI不稳定（网络原因）的时候，某一次对话重试几次？
	AICallAutoRetry int64 `protobuf:"varint,10,opt,name=AICallAutoRetry,proto3" json:"AICallAutoRetry,omitempty"`
	// 默认5，AI如果回答质量不高的时候，调大AITransactionRetry可以有效重试回答。
	AITransactionRetry int64 `protobuf:"varint,11,opt,name=AITransactionRetry,proto3" json:"AITransactionRetry,omitempty"`
	// 是否启用AI搜索本地工具的功能？
	EnableAISearchTool bool `protobuf:"varint,12,opt,name=EnableAISearchTool,proto3" json:"EnableAISearchTool,omitempty"`
	// 是否启用AI搜索互联网搜索引擎的功能？
	EnableAISearchInternet       bool     `protobuf:"varint,13,opt,name=EnableAISearchInternet,proto3" json:"EnableAISearchInternet,omitempty"`
	IncludeSuggestedToolNames    []string `protobuf:"bytes,14,rep,name=IncludeSuggestedToolNames,proto3" json:"IncludeSuggestedToolNames,omitempty"`
	IncludeSuggestedToolKeywords []string `protobuf:"bytes,16,rep,name=IncludeSuggestedToolKeywords,proto3" json:"IncludeSuggestedToolKeywords,omitempty"`
	ExcludeToolNames             []string `protobuf:"bytes,15,rep,name=ExcludeToolNames,proto3" json:"ExcludeToolNames,omitempty"`
	// ollama 本地模型部署可以使用 /nothink 关闭，使用这个选项可以移除 qwen3 的思考模式
	EnableQwenNoThinkMode bool `protobuf:"varint,19,opt,name=EnableQwenNoThinkMode,proto3" json:"EnableQwenNoThinkMode,omitempty"`
	// 在任务规划的时候，AI 是否被允许主动问用户问题
	AllowPlanUserInteract bool `protobuf:"varint,20,opt,name=AllowPlanUserInteract,proto3" json:"AllowPlanUserInteract,omitempty"`
	// 在任务规划的时候，如果AI允许问用户问题，那么最多问几次？
	PlanUserInteractMaxCount int64 `protobuf:"varint,23,opt,name=PlanUserInteractMaxCount,proto3" json:"PlanUserInteractMaxCount,omitempty"`
	// 是否允许生成报告，默认不允许
	AllowGenerateReport  bool  `protobuf:"varint,24,opt,name=AllowGenerateReport,proto3" json:"AllowGenerateReport,omitempty"`
	TaskMaxContinueCount int64 `protobuf:"varint,25,opt,name=TaskMaxContinueCount,proto3" json:"TaskMaxContinueCount,omitempty"`
	// 选择 AI 服务
	AIService         string `protobuf:"bytes,26,opt,name=AIService,proto3" json:"AIService,omitempty"`
	ReActMaxIteration int64  `protobuf:"varint,27,opt,name=ReActMaxIteration,proto3" json:"ReActMaxIteration,omitempty"`
	// 限制 Timeline 的最大条目和最大内容大小（bytes）
	TimelineItemLimit        int64 `protobuf:"varint,28,opt,name=TimelineItemLimit,proto3" json:"TimelineItemLimit,omitempty"` // 已经废弃，功能不可用了，只需要关注 TimelineContentSizeLimit 就好
	TimelineContentSizeLimit int64 `protobuf:"varint,29,opt,name=TimelineContentSizeLimit,proto3" json:"TimelineContentSizeLimit,omitempty"`
	// 用户交互的最大次数限制,超过这个次数，AI 将不再被允许问用户问题
	UserInteractLimit int64 `protobuf:"varint,30,opt,name=UserInteractLimit,proto3" json:"UserInteractLimit,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AIStartParams) Reset() {
	*x = AIStartParams{}
	mi := &file_yakgrpc_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIStartParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIStartParams) ProtoMessage() {}

func (x *AIStartParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIStartParams.ProtoReflect.Descriptor instead.
func (*AIStartParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{104}
}

func (x *AIStartParams) GetCoordinatorId() string {
	if x != nil {
		return x.CoordinatorId
	}
	return ""
}

func (x *AIStartParams) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AIStartParams) GetMcpServers() []*McpConfig {
	if x != nil {
		return x.McpServers
	}
	return nil
}

func (x *AIStartParams) GetUserQuery() string {
	if x != nil {
		return x.UserQuery
	}
	return ""
}

func (x *AIStartParams) GetEnableSystemFileSystemOperator() bool {
	if x != nil {
		return x.EnableSystemFileSystemOperator
	}
	return false
}

func (x *AIStartParams) GetUseDefaultAIConfig() bool {
	if x != nil {
		return x.UseDefaultAIConfig
	}
	return false
}

func (x *AIStartParams) GetForgeName() string {
	if x != nil {
		return x.ForgeName
	}
	return ""
}

func (x *AIStartParams) GetForgeParams() []*ExecParamItem {
	if x != nil {
		return x.ForgeParams
	}
	return nil
}

func (x *AIStartParams) GetDisallowRequireForUserPrompt() bool {
	if x != nil {
		return x.DisallowRequireForUserPrompt
	}
	return false
}

func (x *AIStartParams) GetReviewPolicy() string {
	if x != nil {
		return x.ReviewPolicy
	}
	return ""
}

func (x *AIStartParams) GetAIReviewRiskControlScore() float64 {
	if x != nil {
		return x.AIReviewRiskControlScore
	}
	return 0
}

func (x *AIStartParams) GetDisableToolUse() bool {
	if x != nil {
		return x.DisableToolUse
	}
	return false
}

func (x *AIStartParams) GetAICallAutoRetry() int64 {
	if x != nil {
		return x.AICallAutoRetry
	}
	return 0
}

func (x *AIStartParams) GetAITransactionRetry() int64 {
	if x != nil {
		return x.AITransactionRetry
	}
	return 0
}

func (x *AIStartParams) GetEnableAISearchTool() bool {
	if x != nil {
		return x.EnableAISearchTool
	}
	return false
}

func (x *AIStartParams) GetEnableAISearchInternet() bool {
	if x != nil {
		return x.EnableAISearchInternet
	}
	return false
}

func (x *AIStartParams) GetIncludeSuggestedToolNames() []string {
	if x != nil {
		return x.IncludeSuggestedToolNames
	}
	return nil
}

func (x *AIStartParams) GetIncludeSuggestedToolKeywords() []string {
	if x != nil {
		return x.IncludeSuggestedToolKeywords
	}
	return nil
}

func (x *AIStartParams) GetExcludeToolNames() []string {
	if x != nil {
		return x.ExcludeToolNames
	}
	return nil
}

func (x *AIStartParams) GetEnableQwenNoThinkMode() bool {
	if x != nil {
		return x.EnableQwenNoThinkMode
	}
	return false
}

func (x *AIStartParams) GetAllowPlanUserInteract() bool {
	if x != nil {
		return x.AllowPlanUserInteract
	}
	return false
}

func (x *AIStartParams) GetPlanUserInteractMaxCount() int64 {
	if x != nil {
		return x.PlanUserInteractMaxCount
	}
	return 0
}

func (x *AIStartParams) GetAllowGenerateReport() bool {
	if x != nil {
		return x.AllowGenerateReport
	}
	return false
}

func (x *AIStartParams) GetTaskMaxContinueCount() int64 {
	if x != nil {
		return x.TaskMaxContinueCount
	}
	return 0
}

func (x *AIStartParams) GetAIService() string {
	if x != nil {
		return x.AIService
	}
	return ""
}

func (x *AIStartParams) GetReActMaxIteration() int64 {
	if x != nil {
		return x.ReActMaxIteration
	}
	return 0
}

func (x *AIStartParams) GetTimelineItemLimit() int64 {
	if x != nil {
		return x.TimelineItemLimit
	}
	return 0
}

func (x *AIStartParams) GetTimelineContentSizeLimit() int64 {
	if x != nil {
		return x.TimelineContentSizeLimit
	}
	return 0
}

func (x *AIStartParams) GetUserInteractLimit() int64 {
	if x != nil {
		return x.UserInteractLimit
	}
	return 0
}

type AITaskFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          []string               `protobuf:"bytes,1,rep,name=Name,proto3" json:"Name,omitempty"`
	Keyword       []string               `protobuf:"bytes,2,rep,name=Keyword,proto3" json:"Keyword,omitempty"`
	ForgeName     []string               `protobuf:"bytes,3,rep,name=ForgeName,proto3" json:"ForgeName,omitempty"`
	CoordinatorId []string               `protobuf:"bytes,5,rep,name=CoordinatorId,proto3" json:"CoordinatorId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AITaskFilter) Reset() {
	*x = AITaskFilter{}
	mi := &file_yakgrpc_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AITaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITaskFilter) ProtoMessage() {}

func (x *AITaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITaskFilter.ProtoReflect.Descriptor instead.
func (*AITaskFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{105}
}

func (x *AITaskFilter) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AITaskFilter) GetKeyword() []string {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *AITaskFilter) GetForgeName() []string {
	if x != nil {
		return x.ForgeName
	}
	return nil
}

func (x *AITaskFilter) GetCoordinatorId() []string {
	if x != nil {
		return x.CoordinatorId
	}
	return nil
}

type AIEventFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventUUIDS    []string               `protobuf:"bytes,1,rep,name=EventUUIDS,proto3" json:"EventUUIDS,omitempty"`
	EventType     []string               `protobuf:"bytes,2,rep,name=EventType,proto3" json:"EventType,omitempty"`
	CoordinatorId []string               `protobuf:"bytes,3,rep,name=CoordinatorId,proto3" json:"CoordinatorId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIEventFilter) Reset() {
	*x = AIEventFilter{}
	mi := &file_yakgrpc_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIEventFilter) ProtoMessage() {}

func (x *AIEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIEventFilter.ProtoReflect.Descriptor instead.
func (*AIEventFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{106}
}

func (x *AIEventFilter) GetEventUUIDS() []string {
	if x != nil {
		return x.EventUUIDS
	}
	return nil
}

func (x *AIEventFilter) GetEventType() []string {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *AIEventFilter) GetCoordinatorId() []string {
	if x != nil {
		return x.CoordinatorId
	}
	return nil
}

type AIEventQueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *AIEventFilter         `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ProcessID     string                 `protobuf:"bytes,2,opt,name=ProcessID,proto3" json:"ProcessID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIEventQueryRequest) Reset() {
	*x = AIEventQueryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIEventQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIEventQueryRequest) ProtoMessage() {}

func (x *AIEventQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIEventQueryRequest.ProtoReflect.Descriptor instead.
func (*AIEventQueryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{107}
}

func (x *AIEventQueryRequest) GetFilter() *AIEventFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AIEventQueryRequest) GetProcessID() string {
	if x != nil {
		return x.ProcessID
	}
	return ""
}

type AIEventQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*AIOutputEvent       `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIEventQueryResponse) Reset() {
	*x = AIEventQueryResponse{}
	mi := &file_yakgrpc_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIEventQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIEventQueryResponse) ProtoMessage() {}

func (x *AIEventQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIEventQueryResponse.ProtoReflect.Descriptor instead.
func (*AIEventQueryResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{108}
}

func (x *AIEventQueryResponse) GetEvents() []*AIOutputEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type AITaskQueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *AITaskFilter          `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AITaskQueryRequest) Reset() {
	*x = AITaskQueryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AITaskQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITaskQueryRequest) ProtoMessage() {}

func (x *AITaskQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITaskQueryRequest.ProtoReflect.Descriptor instead.
func (*AITaskQueryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{109}
}

func (x *AITaskQueryRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *AITaskQueryRequest) GetFilter() *AITaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type AITaskQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*AITask              `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AITaskQueryResponse) Reset() {
	*x = AITaskQueryResponse{}
	mi := &file_yakgrpc_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AITaskQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITaskQueryResponse) ProtoMessage() {}

func (x *AITaskQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITaskQueryResponse.ProtoReflect.Descriptor instead.
func (*AITaskQueryResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{110}
}

func (x *AITaskQueryResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *AITaskQueryResponse) GetData() []*AITask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AITaskQueryResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AITaskDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *AITaskFilter          `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AITaskDeleteRequest) Reset() {
	*x = AITaskDeleteRequest{}
	mi := &file_yakgrpc_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AITaskDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITaskDeleteRequest) ProtoMessage() {}

func (x *AITaskDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITaskDeleteRequest.ProtoReflect.Descriptor instead.
func (*AITaskDeleteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{111}
}

func (x *AITaskDeleteRequest) GetFilter() *AITaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type AITask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CoordinatorId string                 `protobuf:"bytes,1,opt,name=CoordinatorId,proto3" json:"CoordinatorId,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Seq           int64                  `protobuf:"varint,3,opt,name=Seq,proto3" json:"Seq,omitempty"`
	UserInput     string                 `protobuf:"bytes,4,opt,name=UserInput,proto3" json:"UserInput,omitempty"`
	ForgeName     string                 `protobuf:"bytes,5,opt,name=ForgeName,proto3" json:"ForgeName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AITask) Reset() {
	*x = AITask{}
	mi := &file_yakgrpc_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AITask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITask) ProtoMessage() {}

func (x *AITask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITask.ProtoReflect.Descriptor instead.
func (*AITask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{112}
}

func (x *AITask) GetCoordinatorId() string {
	if x != nil {
		return x.CoordinatorId
	}
	return ""
}

func (x *AITask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AITask) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *AITask) GetUserInput() string {
	if x != nil {
		return x.UserInput
	}
	return ""
}

func (x *AITask) GetForgeName() string {
	if x != nil {
		return x.ForgeName
	}
	return ""
}

type AIForgeFilter struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ForgeName  string                 `protobuf:"bytes,1,opt,name=ForgeName,proto3" json:"ForgeName,omitempty"`
	ForgeNames []string               `protobuf:"bytes,11,rep,name=ForgeNames,proto3" json:"ForgeNames,omitempty"`
	ForgeType  string                 `protobuf:"bytes,2,opt,name=ForgeType,proto3" json:"ForgeType,omitempty"` // enum: yak or config
	Keyword    string                 `protobuf:"bytes,3,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	// tag
	Tag           []string `protobuf:"bytes,4,rep,name=Tag,proto3" json:"Tag,omitempty"`
	Id            int64    `protobuf:"varint,5,opt,name=Id,proto3" json:"Id,omitempty"`
	ShowTemporary bool     `protobuf:"varint,6,opt,name=ShowTemporary,proto3" json:"ShowTemporary,omitempty"` // 是否展示临时 forge，默认不展示
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIForgeFilter) Reset() {
	*x = AIForgeFilter{}
	mi := &file_yakgrpc_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIForgeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIForgeFilter) ProtoMessage() {}

func (x *AIForgeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIForgeFilter.ProtoReflect.Descriptor instead.
func (*AIForgeFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{113}
}

func (x *AIForgeFilter) GetForgeName() string {
	if x != nil {
		return x.ForgeName
	}
	return ""
}

func (x *AIForgeFilter) GetForgeNames() []string {
	if x != nil {
		return x.ForgeNames
	}
	return nil
}

func (x *AIForgeFilter) GetForgeType() string {
	if x != nil {
		return x.ForgeType
	}
	return ""
}

func (x *AIForgeFilter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *AIForgeFilter) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *AIForgeFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AIForgeFilter) GetShowTemporary() bool {
	if x != nil {
		return x.ShowTemporary
	}
	return false
}

type AIForge struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ForgeName          string                 `protobuf:"bytes,2,opt,name=ForgeName,proto3" json:"ForgeName,omitempty"`
	ForgeContent       string                 `protobuf:"bytes,3,opt,name=ForgeContent,proto3" json:"ForgeContent,omitempty"` // yak type is yak script, config type is empty
	ForgeType          string                 `protobuf:"bytes,4,opt,name=ForgeType,proto3" json:"ForgeType,omitempty"`       // yak or config
	Description        string                 `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	ParamsUIConfig     string                 `protobuf:"bytes,6,opt,name=ParamsUIConfig,proto3" json:"ParamsUIConfig,omitempty"`         // json config for UI
	Params             string                 `protobuf:"bytes,7,opt,name=Params,proto3" json:"Params,omitempty"`                         // cli parameters
	UserPersistentData string                 `protobuf:"bytes,8,opt,name=UserPersistentData,proto3" json:"UserPersistentData,omitempty"` // for user preferences
	ToolNames          []string               `protobuf:"bytes,9,rep,name=ToolNames,proto3" json:"ToolNames,omitempty"`
	ToolKeywords       []string               `protobuf:"bytes,10,rep,name=ToolKeywords,proto3" json:"ToolKeywords,omitempty"`
	Action             string                 `protobuf:"bytes,11,opt,name=Action,proto3" json:"Action,omitempty"`
	Tag                []string               `protobuf:"bytes,12,rep,name=Tag,proto3" json:"Tag,omitempty"`
	InitPrompt         string                 `protobuf:"bytes,13,opt,name=InitPrompt,proto3" json:"InitPrompt,omitempty"`             // 初始提示语
	PersistentPrompt   string                 `protobuf:"bytes,14,opt,name=PersistentPrompt,proto3" json:"PersistentPrompt,omitempty"` // 持久化提示语
	PlanPrompt         string                 `protobuf:"bytes,15,opt,name=PlanPrompt,proto3" json:"PlanPrompt,omitempty"`             // 计划提示语
	ResultPrompt       string                 `protobuf:"bytes,16,opt,name=ResultPrompt,proto3" json:"ResultPrompt,omitempty"`         // 结果提示语
	ForgeVerboseName   string                 `protobuf:"bytes,17,opt,name=ForgeVerboseName,proto3" json:"ForgeVerboseName,omitempty"` // 给用户看的展示名称
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AIForge) Reset() {
	*x = AIForge{}
	mi := &file_yakgrpc_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIForge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIForge) ProtoMessage() {}

func (x *AIForge) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIForge.ProtoReflect.Descriptor instead.
func (*AIForge) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{114}
}

func (x *AIForge) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AIForge) GetForgeName() string {
	if x != nil {
		return x.ForgeName
	}
	return ""
}

func (x *AIForge) GetForgeContent() string {
	if x != nil {
		return x.ForgeContent
	}
	return ""
}

func (x *AIForge) GetForgeType() string {
	if x != nil {
		return x.ForgeType
	}
	return ""
}

func (x *AIForge) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AIForge) GetParamsUIConfig() string {
	if x != nil {
		return x.ParamsUIConfig
	}
	return ""
}

func (x *AIForge) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *AIForge) GetUserPersistentData() string {
	if x != nil {
		return x.UserPersistentData
	}
	return ""
}

func (x *AIForge) GetToolNames() []string {
	if x != nil {
		return x.ToolNames
	}
	return nil
}

func (x *AIForge) GetToolKeywords() []string {
	if x != nil {
		return x.ToolKeywords
	}
	return nil
}

func (x *AIForge) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AIForge) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *AIForge) GetInitPrompt() string {
	if x != nil {
		return x.InitPrompt
	}
	return ""
}

func (x *AIForge) GetPersistentPrompt() string {
	if x != nil {
		return x.PersistentPrompt
	}
	return ""
}

func (x *AIForge) GetPlanPrompt() string {
	if x != nil {
		return x.PlanPrompt
	}
	return ""
}

func (x *AIForge) GetResultPrompt() string {
	if x != nil {
		return x.ResultPrompt
	}
	return ""
}

func (x *AIForge) GetForgeVerboseName() string {
	if x != nil {
		return x.ForgeVerboseName
	}
	return ""
}

type QueryAIForgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *AIForgeFilter         `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAIForgeRequest) Reset() {
	*x = QueryAIForgeRequest{}
	mi := &file_yakgrpc_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAIForgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAIForgeRequest) ProtoMessage() {}

func (x *QueryAIForgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAIForgeRequest.ProtoReflect.Descriptor instead.
func (*QueryAIForgeRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{115}
}

func (x *QueryAIForgeRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryAIForgeRequest) GetFilter() *AIForgeFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QueryAIForgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*AIForge             `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAIForgeResponse) Reset() {
	*x = QueryAIForgeResponse{}
	mi := &file_yakgrpc_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAIForgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAIForgeResponse) ProtoMessage() {}

func (x *QueryAIForgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAIForgeResponse.ProtoReflect.Descriptor instead.
func (*QueryAIForgeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{116}
}

func (x *QueryAIForgeResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryAIForgeResponse) GetData() []*AIForge {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryAIForgeResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAIForgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ForgeName     string                 `protobuf:"bytes,2,opt,name=ForgeName,proto3" json:"ForgeName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAIForgeRequest) Reset() {
	*x = GetAIForgeRequest{}
	mi := &file_yakgrpc_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAIForgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAIForgeRequest) ProtoMessage() {}

func (x *GetAIForgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAIForgeRequest.ProtoReflect.Descriptor instead.
func (*GetAIForgeRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{117}
}

func (x *GetAIForgeRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GetAIForgeRequest) GetForgeName() string {
	if x != nil {
		return x.ForgeName
	}
	return ""
}

type StartMcpServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// listen host
	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	// listen port
	Port int32 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	// enable tool sets, split by ','
	Tool []string `protobuf:"bytes,3,rep,name=Tool,proto3" json:"Tool,omitempty"`
	// disable tool sets, split by ','
	DisableTool []string `protobuf:"bytes,4,rep,name=DisableTool,proto3" json:"DisableTool,omitempty"`
	// enable resource sets, split by ','
	Resource []string `protobuf:"bytes,5,rep,name=Resource,proto3" json:"Resource,omitempty"`
	// disable resource sets, split by ','
	DisableResource []string `protobuf:"bytes,6,rep,name=DisableResource,proto3" json:"DisableResource,omitempty"`
	// add the dynamic Yak script as a tool to the MCP server
	Script []string `protobuf:"bytes,7,rep,name=Script,proto3" json:"Script,omitempty"`
	// enable all tool sets
	EnableAll     bool `protobuf:"varint,8,opt,name=EnableAll,proto3" json:"EnableAll,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartMcpServerRequest) Reset() {
	*x = StartMcpServerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMcpServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMcpServerRequest) ProtoMessage() {}

func (x *StartMcpServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMcpServerRequest.ProtoReflect.Descriptor instead.
func (*StartMcpServerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{118}
}

func (x *StartMcpServerRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StartMcpServerRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StartMcpServerRequest) GetTool() []string {
	if x != nil {
		return x.Tool
	}
	return nil
}

func (x *StartMcpServerRequest) GetDisableTool() []string {
	if x != nil {
		return x.DisableTool
	}
	return nil
}

func (x *StartMcpServerRequest) GetResource() []string {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *StartMcpServerRequest) GetDisableResource() []string {
	if x != nil {
		return x.DisableResource
	}
	return nil
}

func (x *StartMcpServerRequest) GetScript() []string {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *StartMcpServerRequest) GetEnableAll() bool {
	if x != nil {
		return x.EnableAll
	}
	return false
}

type StartMcpServerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// server status: "starting", "running", "stopped", "error"
	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	// server message or error message
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	// server URL
	ServerUrl     string `protobuf:"bytes,3,opt,name=ServerUrl,proto3" json:"ServerUrl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartMcpServerResponse) Reset() {
	*x = StartMcpServerResponse{}
	mi := &file_yakgrpc_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMcpServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMcpServerResponse) ProtoMessage() {}

func (x *StartMcpServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMcpServerResponse.ProtoReflect.Descriptor instead.
func (*StartMcpServerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{119}
}

func (x *StartMcpServerResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StartMcpServerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StartMcpServerResponse) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

type GetSpaceEngineAccountStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Account       string                 `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Domain        string                 `protobuf:"bytes,4,opt,name=Domain,proto3" json:"Domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpaceEngineAccountStatusRequest) Reset() {
	*x = GetSpaceEngineAccountStatusRequest{}
	mi := &file_yakgrpc_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpaceEngineAccountStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceEngineAccountStatusRequest) ProtoMessage() {}

func (x *GetSpaceEngineAccountStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceEngineAccountStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSpaceEngineAccountStatusRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{120}
}

func (x *GetSpaceEngineAccountStatusRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetSpaceEngineAccountStatusRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetSpaceEngineAccountStatusRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetSpaceEngineAccountStatusRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type GetSpaceEngineStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpaceEngineStatusRequest) Reset() {
	*x = GetSpaceEngineStatusRequest{}
	mi := &file_yakgrpc_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpaceEngineStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceEngineStatusRequest) ProtoMessage() {}

func (x *GetSpaceEngineStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceEngineStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSpaceEngineStatusRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{121}
}

func (x *GetSpaceEngineStatusRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SpaceEngineStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Info          string                 `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info,omitempty"`
	Raw           []byte                 `protobuf:"bytes,4,opt,name=Raw,proto3" json:"Raw,omitempty"`
	Used          int64                  `protobuf:"varint,5,opt,name=Used,proto3" json:"Used,omitempty"`
	Remain        int64                  `protobuf:"varint,6,opt,name=Remain,proto3" json:"Remain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpaceEngineStatus) Reset() {
	*x = SpaceEngineStatus{}
	mi := &file_yakgrpc_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpaceEngineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceEngineStatus) ProtoMessage() {}

func (x *SpaceEngineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceEngineStatus.ProtoReflect.Descriptor instead.
func (*SpaceEngineStatus) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{122}
}

func (x *SpaceEngineStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpaceEngineStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpaceEngineStatus) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *SpaceEngineStatus) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *SpaceEngineStatus) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *SpaceEngineStatus) GetRemain() int64 {
	if x != nil {
		return x.Remain
	}
	return 0
}

type FetchPortAssetFromSpaceEngineRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// zoomeye / hunter / fofa
	Type      string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Filter    string `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	MaxPage   int64  `protobuf:"varint,3,opt,name=MaxPage,proto3" json:"MaxPage,omitempty"`
	MaxRecord int64  `protobuf:"varint,4,opt,name=MaxRecord,proto3" json:"MaxRecord,omitempty"`
	// page limit
	PageSize       int64  `protobuf:"varint,5,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	ScanBeforeSave bool   `protobuf:"varint,6,opt,name=ScanBeforeSave,proto3" json:"ScanBeforeSave,omitempty"`
	Proxy          string `protobuf:"bytes,7,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	Concurrent     int64  `protobuf:"varint,8,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	RandomDelay    uint32 `protobuf:"varint,9,opt,name=RandomDelay,proto3" json:"RandomDelay,omitempty"`
	RetryTimes     uint32 `protobuf:"varint,10,opt,name=RetryTimes,proto3" json:"RetryTimes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FetchPortAssetFromSpaceEngineRequest) Reset() {
	*x = FetchPortAssetFromSpaceEngineRequest{}
	mi := &file_yakgrpc_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchPortAssetFromSpaceEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchPortAssetFromSpaceEngineRequest) ProtoMessage() {}

func (x *FetchPortAssetFromSpaceEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchPortAssetFromSpaceEngineRequest.ProtoReflect.Descriptor instead.
func (*FetchPortAssetFromSpaceEngineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{123}
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetMaxPage() int64 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetMaxRecord() int64 {
	if x != nil {
		return x.MaxRecord
	}
	return 0
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetScanBeforeSave() bool {
	if x != nil {
		return x.ScanBeforeSave
	}
	return false
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetRandomDelay() uint32 {
	if x != nil {
		return x.RandomDelay
	}
	return 0
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetRetryTimes() uint32 {
	if x != nil {
		return x.RetryTimes
	}
	return 0
}

type DeleteHybridScanTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	DeleteAll     bool                   `protobuf:"varint,2,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Filter        *HybridScanTaskFilter  `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteHybridScanTaskRequest) Reset() {
	*x = DeleteHybridScanTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHybridScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHybridScanTaskRequest) ProtoMessage() {}

func (x *DeleteHybridScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHybridScanTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteHybridScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{124}
}

func (x *DeleteHybridScanTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DeleteHybridScanTaskRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteHybridScanTaskRequest) GetFilter() *HybridScanTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type HybridScanTask struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Id        int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt int64                  `protobuf:"varint,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	TaskId    string                 `protobuf:"bytes,4,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	Status    string                 `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"` // executing / paused / done
	// exec status
	TotalTargets    int64  `protobuf:"varint,6,opt,name=TotalTargets,proto3" json:"TotalTargets,omitempty"`
	TotalPlugins    int64  `protobuf:"varint,7,opt,name=TotalPlugins,proto3" json:"TotalPlugins,omitempty"`
	TotalTasks      int64  `protobuf:"varint,8,opt,name=TotalTasks,proto3" json:"TotalTasks,omitempty"`
	FinishedTasks   int64  `protobuf:"varint,9,opt,name=FinishedTasks,proto3" json:"FinishedTasks,omitempty"`
	FinishedTargets int64  `protobuf:"varint,10,opt,name=FinishedTargets,proto3" json:"FinishedTargets,omitempty"`
	FirstTarget     string `protobuf:"bytes,11,opt,name=FirstTarget,proto3" json:"FirstTarget,omitempty"`
	Reason          string `protobuf:"bytes,12,opt,name=Reason,proto3" json:"Reason,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HybridScanTask) Reset() {
	*x = HybridScanTask{}
	mi := &file_yakgrpc_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridScanTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanTask) ProtoMessage() {}

func (x *HybridScanTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanTask.ProtoReflect.Descriptor instead.
func (*HybridScanTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{125}
}

func (x *HybridScanTask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HybridScanTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HybridScanTask) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HybridScanTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *HybridScanTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HybridScanTask) GetTotalTargets() int64 {
	if x != nil {
		return x.TotalTargets
	}
	return 0
}

func (x *HybridScanTask) GetTotalPlugins() int64 {
	if x != nil {
		return x.TotalPlugins
	}
	return 0
}

func (x *HybridScanTask) GetTotalTasks() int64 {
	if x != nil {
		return x.TotalTasks
	}
	return 0
}

func (x *HybridScanTask) GetFinishedTasks() int64 {
	if x != nil {
		return x.FinishedTasks
	}
	return 0
}

func (x *HybridScanTask) GetFinishedTargets() int64 {
	if x != nil {
		return x.FinishedTargets
	}
	return 0
}

func (x *HybridScanTask) GetFirstTarget() string {
	if x != nil {
		return x.FirstTarget
	}
	return ""
}

func (x *HybridScanTask) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type QueryHybridScanTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*HybridScanTask      `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHybridScanTaskResponse) Reset() {
	*x = QueryHybridScanTaskResponse{}
	mi := &file_yakgrpc_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHybridScanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHybridScanTaskResponse) ProtoMessage() {}

func (x *QueryHybridScanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHybridScanTaskResponse.ProtoReflect.Descriptor instead.
func (*QueryHybridScanTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{126}
}

func (x *QueryHybridScanTaskResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHybridScanTaskResponse) GetData() []*HybridScanTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHybridScanTaskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryHybridScanTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	FromId        int64                  `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId       int64                  `protobuf:"varint,3,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Filter        *HybridScanTaskFilter  `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHybridScanTaskRequest) Reset() {
	*x = QueryHybridScanTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHybridScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHybridScanTaskRequest) ProtoMessage() {}

func (x *QueryHybridScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHybridScanTaskRequest.ProtoReflect.Descriptor instead.
func (*QueryHybridScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{127}
}

func (x *QueryHybridScanTaskRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHybridScanTaskRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryHybridScanTaskRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *QueryHybridScanTaskRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *QueryHybridScanTaskRequest) GetFilter() *HybridScanTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type HybridScanTaskFilter struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TaskId               []string               `protobuf:"bytes,1,rep,name=TaskId,proto3" json:"TaskId,omitempty"`
	Status               []string               `protobuf:"bytes,2,rep,name=Status,proto3" json:"Status,omitempty"`
	Target               string                 `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	FromId               int64                  `protobuf:"varint,4,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId              int64                  `protobuf:"varint,5,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	HybridScanTaskSource []string               `protobuf:"bytes,6,rep,name=HybridScanTaskSource,proto3" json:"HybridScanTaskSource,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HybridScanTaskFilter) Reset() {
	*x = HybridScanTaskFilter{}
	mi := &file_yakgrpc_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridScanTaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanTaskFilter) ProtoMessage() {}

func (x *HybridScanTaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanTaskFilter.ProtoReflect.Descriptor instead.
func (*HybridScanTaskFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{128}
}

func (x *HybridScanTaskFilter) GetTaskId() []string {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *HybridScanTaskFilter) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HybridScanTaskFilter) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HybridScanTaskFilter) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *HybridScanTaskFilter) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *HybridScanTaskFilter) GetHybridScanTaskSource() []string {
	if x != nil {
		return x.HybridScanTaskSource
	}
	return nil
}

type HybridScanResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 计算整体任务进度等信息
	TotalTargets    int64 `protobuf:"varint,1,opt,name=TotalTargets,proto3" json:"TotalTargets,omitempty"`
	TotalPlugins    int64 `protobuf:"varint,2,opt,name=TotalPlugins,proto3" json:"TotalPlugins,omitempty"`
	TotalTasks      int64 `protobuf:"varint,3,opt,name=TotalTasks,proto3" json:"TotalTasks,omitempty"`
	FinishedTasks   int64 `protobuf:"varint,4,opt,name=FinishedTasks,proto3" json:"FinishedTasks,omitempty"`
	FinishedTargets int64 `protobuf:"varint,5,opt,name=FinishedTargets,proto3" json:"FinishedTargets,omitempty"`
	ActiveTasks     int64 `protobuf:"varint,6,opt,name=ActiveTasks,proto3" json:"ActiveTasks,omitempty"`
	ActiveTargets   int64 `protobuf:"varint,7,opt,name=ActiveTargets,proto3" json:"ActiveTargets,omitempty"`
	// 混合扫描任务ID，一般用来恢复任务或者暂停任务
	HybridScanTaskId  string      `protobuf:"bytes,8,opt,name=HybridScanTaskId,proto3" json:"HybridScanTaskId,omitempty"`
	CurrentPluginName string      `protobuf:"bytes,9,opt,name=CurrentPluginName,proto3" json:"CurrentPluginName,omitempty"`
	ExecResult        *ExecResult `protobuf:"bytes,10,opt,name=ExecResult,proto3" json:"ExecResult,omitempty"`
	// 这字段表示的是，正在执行的任务可以展示出来
	UpdateActiveTask *HybridScanUpdateActiveTaskTable `protobuf:"bytes,11,opt,name=UpdateActiveTask,proto3" json:"UpdateActiveTask,omitempty"`
	// 任务配置  废弃 使用 HybridScanConfig
	ScanConfig string `protobuf:"bytes,12,opt,name=ScanConfig,proto3" json:"ScanConfig,omitempty"` // json序列化会有base64
	// 任务状态
	Status string `protobuf:"bytes,13,opt,name=Status,proto3" json:"Status,omitempty"`
	// task config
	HybridScanConfig *HybridScanRequest `protobuf:"bytes,14,opt,name=HybridScanConfig,proto3" json:"HybridScanConfig,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HybridScanResponse) Reset() {
	*x = HybridScanResponse{}
	mi := &file_yakgrpc_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanResponse) ProtoMessage() {}

func (x *HybridScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanResponse.ProtoReflect.Descriptor instead.
func (*HybridScanResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{129}
}

func (x *HybridScanResponse) GetTotalTargets() int64 {
	if x != nil {
		return x.TotalTargets
	}
	return 0
}

func (x *HybridScanResponse) GetTotalPlugins() int64 {
	if x != nil {
		return x.TotalPlugins
	}
	return 0
}

func (x *HybridScanResponse) GetTotalTasks() int64 {
	if x != nil {
		return x.TotalTasks
	}
	return 0
}

func (x *HybridScanResponse) GetFinishedTasks() int64 {
	if x != nil {
		return x.FinishedTasks
	}
	return 0
}

func (x *HybridScanResponse) GetFinishedTargets() int64 {
	if x != nil {
		return x.FinishedTargets
	}
	return 0
}

func (x *HybridScanResponse) GetActiveTasks() int64 {
	if x != nil {
		return x.ActiveTasks
	}
	return 0
}

func (x *HybridScanResponse) GetActiveTargets() int64 {
	if x != nil {
		return x.ActiveTargets
	}
	return 0
}

func (x *HybridScanResponse) GetHybridScanTaskId() string {
	if x != nil {
		return x.HybridScanTaskId
	}
	return ""
}

func (x *HybridScanResponse) GetCurrentPluginName() string {
	if x != nil {
		return x.CurrentPluginName
	}
	return ""
}

func (x *HybridScanResponse) GetExecResult() *ExecResult {
	if x != nil {
		return x.ExecResult
	}
	return nil
}

func (x *HybridScanResponse) GetUpdateActiveTask() *HybridScanUpdateActiveTaskTable {
	if x != nil {
		return x.UpdateActiveTask
	}
	return nil
}

func (x *HybridScanResponse) GetScanConfig() string {
	if x != nil {
		return x.ScanConfig
	}
	return ""
}

func (x *HybridScanResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HybridScanResponse) GetHybridScanConfig() *HybridScanRequest {
	if x != nil {
		return x.HybridScanConfig
	}
	return nil
}

type HybridScanUpdateActiveTaskTable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// create: 这个任务正在执行，推入栈中
	// remove: 这个任务执行完毕，弹出栈
	Operator      string `protobuf:"bytes,1,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Index         string `protobuf:"bytes,2,opt,name=Index,proto3" json:"Index,omitempty"`
	IsHttps       bool   `protobuf:"varint,3,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	HTTPRequest   []byte `protobuf:"bytes,4,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	Url           string `protobuf:"bytes,6,opt,name=Url,proto3" json:"Url,omitempty"`
	PluginName    string `protobuf:"bytes,5,opt,name=PluginName,proto3" json:"PluginName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridScanUpdateActiveTaskTable) Reset() {
	*x = HybridScanUpdateActiveTaskTable{}
	mi := &file_yakgrpc_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridScanUpdateActiveTaskTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanUpdateActiveTaskTable) ProtoMessage() {}

func (x *HybridScanUpdateActiveTaskTable) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanUpdateActiveTaskTable.ProtoReflect.Descriptor instead.
func (*HybridScanUpdateActiveTaskTable) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{130}
}

func (x *HybridScanUpdateActiveTaskTable) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *HybridScanUpdateActiveTaskTable) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *HybridScanUpdateActiveTaskTable) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HybridScanUpdateActiveTaskTable) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

func (x *HybridScanUpdateActiveTaskTable) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HybridScanUpdateActiveTaskTable) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

// 输入目标，可以通过 input/file + template 构建可能带认证或其他内容的模版
type HybridScanInputTarget struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	Input               string                    `protobuf:"bytes,1,opt,name=Input,proto3" json:"Input,omitempty"`
	InputFile           []string                  `protobuf:"bytes,2,rep,name=InputFile,proto3" json:"InputFile,omitempty"`
	HTTPRequestTemplate *HTTPRequestBuilderParams `protobuf:"bytes,3,opt,name=HTTPRequestTemplate,proto3" json:"HTTPRequestTemplate,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HybridScanInputTarget) Reset() {
	*x = HybridScanInputTarget{}
	mi := &file_yakgrpc_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridScanInputTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanInputTarget) ProtoMessage() {}

func (x *HybridScanInputTarget) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanInputTarget.ProtoReflect.Descriptor instead.
func (*HybridScanInputTarget) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{131}
}

func (x *HybridScanInputTarget) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *HybridScanInputTarget) GetInputFile() []string {
	if x != nil {
		return x.InputFile
	}
	return nil
}

func (x *HybridScanInputTarget) GetHTTPRequestTemplate() *HTTPRequestBuilderParams {
	if x != nil {
		return x.HTTPRequestTemplate
	}
	return nil
}

// 输入插件：幂等的，相同的参数，结果是一致的，这样通过记录索引就能恢复进度
type HybridScanPluginConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PluginNames   []string               `protobuf:"bytes,1,rep,name=PluginNames,proto3" json:"PluginNames,omitempty"`
	Filter        *QueryYakScriptRequest `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridScanPluginConfig) Reset() {
	*x = HybridScanPluginConfig{}
	mi := &file_yakgrpc_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridScanPluginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanPluginConfig) ProtoMessage() {}

func (x *HybridScanPluginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanPluginConfig.ProtoReflect.Descriptor instead.
func (*HybridScanPluginConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{132}
}

func (x *HybridScanPluginConfig) GetPluginNames() []string {
	if x != nil {
		return x.PluginNames
	}
	return nil
}

func (x *HybridScanPluginConfig) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

type HybridScanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 控制帧字段
	Control bool `protobuf:"varint,9,opt,name=Control,proto3" json:"Control,omitempty"`
	// new: 新任务
	// resume: 恢复任务
	// pause: 暂停任务
	// stop: 停止任务
	// status: 查询任务状态
	HybridScanMode string `protobuf:"bytes,8,opt,name=HybridScanMode,proto3" json:"HybridScanMode,omitempty"`
	ResumeTaskId   string `protobuf:"bytes,1,opt,name=ResumeTaskId,proto3" json:"ResumeTaskId,omitempty"`
	// 其他参数
	Concurrent          int64   `protobuf:"varint,2,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	TotalTimeoutSecond  float32 `protobuf:"fixed32,3,opt,name=TotalTimeoutSecond,proto3" json:"TotalTimeoutSecond,omitempty"`
	Proxy               string  `protobuf:"bytes,4,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	SingleTimeoutSecond float32 `protobuf:"fixed32,5,opt,name=SingleTimeoutSecond,proto3" json:"SingleTimeoutSecond,omitempty"`
	Detach              bool    `protobuf:"varint,10,opt,name=Detach,proto3" json:"Detach,omitempty"` // 背后执行，就算进程结束了，也会执行，不太关心 context
	// 新任务
	Plugin  *HybridScanPluginConfig `protobuf:"bytes,6,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	Targets *HybridScanInputTarget  `protobuf:"bytes,7,opt,name=Targets,proto3" json:"Targets,omitempty"`
	// hybridScanTaskSource
	HybridScanTaskSource string `protobuf:"bytes,11,opt,name=HybridScanTaskSource,proto3" json:"HybridScanTaskSource,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HybridScanRequest) Reset() {
	*x = HybridScanRequest{}
	mi := &file_yakgrpc_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanRequest) ProtoMessage() {}

func (x *HybridScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanRequest.ProtoReflect.Descriptor instead.
func (*HybridScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{133}
}

func (x *HybridScanRequest) GetControl() bool {
	if x != nil {
		return x.Control
	}
	return false
}

func (x *HybridScanRequest) GetHybridScanMode() string {
	if x != nil {
		return x.HybridScanMode
	}
	return ""
}

func (x *HybridScanRequest) GetResumeTaskId() string {
	if x != nil {
		return x.ResumeTaskId
	}
	return ""
}

func (x *HybridScanRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *HybridScanRequest) GetTotalTimeoutSecond() float32 {
	if x != nil {
		return x.TotalTimeoutSecond
	}
	return 0
}

func (x *HybridScanRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *HybridScanRequest) GetSingleTimeoutSecond() float32 {
	if x != nil {
		return x.SingleTimeoutSecond
	}
	return 0
}

func (x *HybridScanRequest) GetDetach() bool {
	if x != nil {
		return x.Detach
	}
	return false
}

func (x *HybridScanRequest) GetPlugin() *HybridScanPluginConfig {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *HybridScanRequest) GetTargets() *HybridScanInputTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *HybridScanRequest) GetHybridScanTaskSource() string {
	if x != nil {
		return x.HybridScanTaskSource
	}
	return ""
}

type DuplexConnectionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	MessageType   string                 `protobuf:"bytes,2,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DuplexConnectionRequest) Reset() {
	*x = DuplexConnectionRequest{}
	mi := &file_yakgrpc_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DuplexConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplexConnectionRequest) ProtoMessage() {}

func (x *DuplexConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplexConnectionRequest.ProtoReflect.Descriptor instead.
func (*DuplexConnectionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{134}
}

func (x *DuplexConnectionRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DuplexConnectionRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *DuplexConnectionRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DuplexConnectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	MessageType   string                 `protobuf:"bytes,2,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DuplexConnectionResponse) Reset() {
	*x = DuplexConnectionResponse{}
	mi := &file_yakgrpc_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DuplexConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplexConnectionResponse) ProtoMessage() {}

func (x *DuplexConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplexConnectionResponse.ProtoReflect.Descriptor instead.
func (*DuplexConnectionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{135}
}

func (x *DuplexConnectionResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DuplexConnectionResponse) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *DuplexConnectionResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PcapMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PcapMetadataRequest) Reset() {
	*x = PcapMetadataRequest{}
	mi := &file_yakgrpc_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PcapMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapMetadataRequest) ProtoMessage() {}

func (x *PcapMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapMetadataRequest.ProtoReflect.Descriptor instead.
func (*PcapMetadataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{136}
}

type PcapMetadata struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	AvailablePcapDevices         []*NetInterface        `protobuf:"bytes,1,rep,name=AvailablePcapDevices,proto3" json:"AvailablePcapDevices,omitempty"`
	AvailableSessionTypes        []*KVPair              `protobuf:"bytes,2,rep,name=AvailableSessionTypes,proto3" json:"AvailableSessionTypes,omitempty"`
	AvailableLinkLayerTypes      []*KVPair              `protobuf:"bytes,3,rep,name=AvailableLinkLayerTypes,proto3" json:"AvailableLinkLayerTypes,omitempty"`
	AvailableNetworkLayerTypes   []*KVPair              `protobuf:"bytes,4,rep,name=AvailableNetworkLayerTypes,proto3" json:"AvailableNetworkLayerTypes,omitempty"`
	AvailableTransportLayerTypes []*KVPair              `protobuf:"bytes,5,rep,name=AvailableTransportLayerTypes,proto3" json:"AvailableTransportLayerTypes,omitempty"`
	// AutoDetect Public Net If
	DefaultPublicNetInterface *NetInterface `protobuf:"bytes,6,opt,name=DefaultPublicNetInterface,proto3" json:"DefaultPublicNetInterface,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *PcapMetadata) Reset() {
	*x = PcapMetadata{}
	mi := &file_yakgrpc_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PcapMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapMetadata) ProtoMessage() {}

func (x *PcapMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapMetadata.ProtoReflect.Descriptor instead.
func (*PcapMetadata) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{137}
}

func (x *PcapMetadata) GetAvailablePcapDevices() []*NetInterface {
	if x != nil {
		return x.AvailablePcapDevices
	}
	return nil
}

func (x *PcapMetadata) GetAvailableSessionTypes() []*KVPair {
	if x != nil {
		return x.AvailableSessionTypes
	}
	return nil
}

func (x *PcapMetadata) GetAvailableLinkLayerTypes() []*KVPair {
	if x != nil {
		return x.AvailableLinkLayerTypes
	}
	return nil
}

func (x *PcapMetadata) GetAvailableNetworkLayerTypes() []*KVPair {
	if x != nil {
		return x.AvailableNetworkLayerTypes
	}
	return nil
}

func (x *PcapMetadata) GetAvailableTransportLayerTypes() []*KVPair {
	if x != nil {
		return x.AvailableTransportLayerTypes
	}
	return nil
}

func (x *PcapMetadata) GetDefaultPublicNetInterface() *NetInterface {
	if x != nil {
		return x.DefaultPublicNetInterface
	}
	return nil
}

type QueryTrafficPacketRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Pagination            *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	TimestampNow          int64                  `protobuf:"varint,2,opt,name=TimestampNow,proto3" json:"TimestampNow,omitempty"`
	SessionId             string                 `protobuf:"bytes,3,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	LinkLayerTypes        string                 `protobuf:"bytes,4,opt,name=LinkLayerTypes,proto3" json:"LinkLayerTypes,omitempty"`
	NetworkLayerTypes     string                 `protobuf:"bytes,5,opt,name=NetworkLayerTypes,proto3" json:"NetworkLayerTypes,omitempty"`
	TransportLayerTypes   string                 `protobuf:"bytes,6,opt,name=TransportLayerTypes,proto3" json:"TransportLayerTypes,omitempty"`
	ApplicationLayerTypes string                 `protobuf:"bytes,7,opt,name=ApplicationLayerTypes,proto3" json:"ApplicationLayerTypes,omitempty"`
	SrcIP                 string                 `protobuf:"bytes,8,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP                 string                 `protobuf:"bytes,9,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	SrcPort               string                 `protobuf:"bytes,10,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort               string                 `protobuf:"bytes,11,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	FromId                int64                  `protobuf:"varint,12,opt,name=FromId,proto3" json:"FromId,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QueryTrafficPacketRequest) Reset() {
	*x = QueryTrafficPacketRequest{}
	mi := &file_yakgrpc_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTrafficPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficPacketRequest) ProtoMessage() {}

func (x *QueryTrafficPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficPacketRequest.ProtoReflect.Descriptor instead.
func (*QueryTrafficPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{138}
}

func (x *QueryTrafficPacketRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficPacketRequest) GetTimestampNow() int64 {
	if x != nil {
		return x.TimestampNow
	}
	return 0
}

func (x *QueryTrafficPacketRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetLinkLayerTypes() string {
	if x != nil {
		return x.LinkLayerTypes
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetNetworkLayerTypes() string {
	if x != nil {
		return x.NetworkLayerTypes
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetTransportLayerTypes() string {
	if x != nil {
		return x.TransportLayerTypes
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetApplicationLayerTypes() string {
	if x != nil {
		return x.ApplicationLayerTypes
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetSrcIP() string {
	if x != nil {
		return x.SrcIP
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetDstIP() string {
	if x != nil {
		return x.DstIP
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetSrcPort() string {
	if x != nil {
		return x.SrcPort
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetDstPort() string {
	if x != nil {
		return x.DstPort
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

type QueryTrafficTCPReassembledRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	FromNow       bool                   `protobuf:"varint,2,opt,name=FromNow,proto3" json:"FromNow,omitempty"` // ignore it
	SessionId     string                 `protobuf:"bytes,3,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	FromId        int64                  `protobuf:"varint,4,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId       int64                  `protobuf:"varint,5,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	TimestampNow  int64                  `protobuf:"varint,6,opt,name=TimestampNow,proto3" json:"TimestampNow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTrafficTCPReassembledRequest) Reset() {
	*x = QueryTrafficTCPReassembledRequest{}
	mi := &file_yakgrpc_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTrafficTCPReassembledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficTCPReassembledRequest) ProtoMessage() {}

func (x *QueryTrafficTCPReassembledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficTCPReassembledRequest.ProtoReflect.Descriptor instead.
func (*QueryTrafficTCPReassembledRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{139}
}

func (x *QueryTrafficTCPReassembledRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficTCPReassembledRequest) GetFromNow() bool {
	if x != nil {
		return x.FromNow
	}
	return false
}

func (x *QueryTrafficTCPReassembledRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *QueryTrafficTCPReassembledRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryTrafficTCPReassembledRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *QueryTrafficTCPReassembledRequest) GetTimestampNow() int64 {
	if x != nil {
		return x.TimestampNow
	}
	return 0
}

type TrafficSession struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SessionType           string                 `protobuf:"bytes,2,opt,name=SessionType,proto3" json:"SessionType,omitempty"`
	Uuid                  string                 `protobuf:"bytes,3,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	DeviceName            string                 `protobuf:"bytes,4,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	DeviceType            string                 `protobuf:"bytes,5,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	IsLinkLayerEthernet   bool                   `protobuf:"varint,6,opt,name=IsLinkLayerEthernet,proto3" json:"IsLinkLayerEthernet,omitempty"`
	LinkLayerSrc          string                 `protobuf:"bytes,7,opt,name=LinkLayerSrc,proto3" json:"LinkLayerSrc,omitempty"`
	LinkLayerDst          string                 `protobuf:"bytes,8,opt,name=LinkLayerDst,proto3" json:"LinkLayerDst,omitempty"`
	IsIpv4                bool                   `protobuf:"varint,9,opt,name=IsIpv4,proto3" json:"IsIpv4,omitempty"`
	IsIpv6                bool                   `protobuf:"varint,10,opt,name=IsIpv6,proto3" json:"IsIpv6,omitempty"`
	NetworkSrcIP          string                 `protobuf:"bytes,11,opt,name=NetworkSrcIP,proto3" json:"NetworkSrcIP,omitempty"`
	NetworkDstIP          string                 `protobuf:"bytes,12,opt,name=NetworkDstIP,proto3" json:"NetworkDstIP,omitempty"`
	IsTcpIpStack          bool                   `protobuf:"varint,13,opt,name=IsTcpIpStack,proto3" json:"IsTcpIpStack,omitempty"`
	TransportLayerSrcPort int64                  `protobuf:"varint,14,opt,name=TransportLayerSrcPort,proto3" json:"TransportLayerSrcPort,omitempty"`
	TransportLayerDstPort int64                  `protobuf:"varint,15,opt,name=TransportLayerDstPort,proto3" json:"TransportLayerDstPort,omitempty"`
	IsTCPReassembled      bool                   `protobuf:"varint,16,opt,name=IsTCPReassembled,proto3" json:"IsTCPReassembled,omitempty"`
	IsHalfOpen            bool                   `protobuf:"varint,17,opt,name=IsHalfOpen,proto3" json:"IsHalfOpen,omitempty"`
	IsClosed              bool                   `protobuf:"varint,18,opt,name=IsClosed,proto3" json:"IsClosed,omitempty"`
	IsForceClosed         bool                   `protobuf:"varint,19,opt,name=IsForceClosed,proto3" json:"IsForceClosed,omitempty"`
	HaveClientHello       bool                   `protobuf:"varint,20,opt,name=HaveClientHello,proto3" json:"HaveClientHello,omitempty"`
	SNI                   string                 `protobuf:"bytes,21,opt,name=SNI,proto3" json:"SNI,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TrafficSession) Reset() {
	*x = TrafficSession{}
	mi := &file_yakgrpc_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSession) ProtoMessage() {}

func (x *TrafficSession) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSession.ProtoReflect.Descriptor instead.
func (*TrafficSession) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{140}
}

func (x *TrafficSession) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrafficSession) GetSessionType() string {
	if x != nil {
		return x.SessionType
	}
	return ""
}

func (x *TrafficSession) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TrafficSession) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *TrafficSession) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *TrafficSession) GetIsLinkLayerEthernet() bool {
	if x != nil {
		return x.IsLinkLayerEthernet
	}
	return false
}

func (x *TrafficSession) GetLinkLayerSrc() string {
	if x != nil {
		return x.LinkLayerSrc
	}
	return ""
}

func (x *TrafficSession) GetLinkLayerDst() string {
	if x != nil {
		return x.LinkLayerDst
	}
	return ""
}

func (x *TrafficSession) GetIsIpv4() bool {
	if x != nil {
		return x.IsIpv4
	}
	return false
}

func (x *TrafficSession) GetIsIpv6() bool {
	if x != nil {
		return x.IsIpv6
	}
	return false
}

func (x *TrafficSession) GetNetworkSrcIP() string {
	if x != nil {
		return x.NetworkSrcIP
	}
	return ""
}

func (x *TrafficSession) GetNetworkDstIP() string {
	if x != nil {
		return x.NetworkDstIP
	}
	return ""
}

func (x *TrafficSession) GetIsTcpIpStack() bool {
	if x != nil {
		return x.IsTcpIpStack
	}
	return false
}

func (x *TrafficSession) GetTransportLayerSrcPort() int64 {
	if x != nil {
		return x.TransportLayerSrcPort
	}
	return 0
}

func (x *TrafficSession) GetTransportLayerDstPort() int64 {
	if x != nil {
		return x.TransportLayerDstPort
	}
	return 0
}

func (x *TrafficSession) GetIsTCPReassembled() bool {
	if x != nil {
		return x.IsTCPReassembled
	}
	return false
}

func (x *TrafficSession) GetIsHalfOpen() bool {
	if x != nil {
		return x.IsHalfOpen
	}
	return false
}

func (x *TrafficSession) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *TrafficSession) GetIsForceClosed() bool {
	if x != nil {
		return x.IsForceClosed
	}
	return false
}

func (x *TrafficSession) GetHaveClientHello() bool {
	if x != nil {
		return x.HaveClientHello
	}
	return false
}

func (x *TrafficSession) GetSNI() string {
	if x != nil {
		return x.SNI
	}
	return ""
}

type QueryTrafficSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*TrafficSession      `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTrafficSessionResponse) Reset() {
	*x = QueryTrafficSessionResponse{}
	mi := &file_yakgrpc_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTrafficSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficSessionResponse) ProtoMessage() {}

func (x *QueryTrafficSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficSessionResponse.ProtoReflect.Descriptor instead.
func (*QueryTrafficSessionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{141}
}

func (x *QueryTrafficSessionResponse) GetData() []*TrafficSession {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryTrafficSessionResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficSessionResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TrafficPacket struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	LinkLayerType                   string                 `protobuf:"bytes,1,opt,name=LinkLayerType,proto3" json:"LinkLayerType,omitempty"`
	NetworkLayerType                string                 `protobuf:"bytes,2,opt,name=NetworkLayerType,proto3" json:"NetworkLayerType,omitempty"`
	TransportLayerType              string                 `protobuf:"bytes,3,opt,name=TransportLayerType,proto3" json:"TransportLayerType,omitempty"`
	ApplicationLayerType            string                 `protobuf:"bytes,4,opt,name=ApplicationLayerType,proto3" json:"ApplicationLayerType,omitempty"`
	Payload                         []byte                 `protobuf:"bytes,5,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Raw                             []byte                 `protobuf:"bytes,6,opt,name=Raw,proto3" json:"Raw,omitempty"`
	EthernetEndpointHardwareAddrSrc string                 `protobuf:"bytes,7,opt,name=EthernetEndpointHardwareAddrSrc,proto3" json:"EthernetEndpointHardwareAddrSrc,omitempty"`
	EthernetEndpointHardwareAddrDst string                 `protobuf:"bytes,8,opt,name=EthernetEndpointHardwareAddrDst,proto3" json:"EthernetEndpointHardwareAddrDst,omitempty"`
	IsIpv4                          bool                   `protobuf:"varint,9,opt,name=IsIpv4,proto3" json:"IsIpv4,omitempty"`
	IsIpv6                          bool                   `protobuf:"varint,10,opt,name=IsIpv6,proto3" json:"IsIpv6,omitempty"`
	NetworkEndpointIPSrc            string                 `protobuf:"bytes,11,opt,name=NetworkEndpointIPSrc,proto3" json:"NetworkEndpointIPSrc,omitempty"`
	NetworkEndpointIPDst            string                 `protobuf:"bytes,12,opt,name=NetworkEndpointIPDst,proto3" json:"NetworkEndpointIPDst,omitempty"`
	TransportEndpointPortSrc        int64                  `protobuf:"varint,13,opt,name=TransportEndpointPortSrc,proto3" json:"TransportEndpointPortSrc,omitempty"`
	TransportEndpointPortDst        int64                  `protobuf:"varint,14,opt,name=TransportEndpointPortDst,proto3" json:"TransportEndpointPortDst,omitempty"`
	SessionId                       string                 `protobuf:"bytes,15,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	Id                              int64                  `protobuf:"varint,16,opt,name=Id,proto3" json:"Id,omitempty"`
	Protocol                        string                 `protobuf:"bytes,17,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Info                            string                 `protobuf:"bytes,18,opt,name=Info,proto3" json:"Info,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *TrafficPacket) Reset() {
	*x = TrafficPacket{}
	mi := &file_yakgrpc_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPacket) ProtoMessage() {}

func (x *TrafficPacket) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPacket.ProtoReflect.Descriptor instead.
func (*TrafficPacket) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{142}
}

func (x *TrafficPacket) GetLinkLayerType() string {
	if x != nil {
		return x.LinkLayerType
	}
	return ""
}

func (x *TrafficPacket) GetNetworkLayerType() string {
	if x != nil {
		return x.NetworkLayerType
	}
	return ""
}

func (x *TrafficPacket) GetTransportLayerType() string {
	if x != nil {
		return x.TransportLayerType
	}
	return ""
}

func (x *TrafficPacket) GetApplicationLayerType() string {
	if x != nil {
		return x.ApplicationLayerType
	}
	return ""
}

func (x *TrafficPacket) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TrafficPacket) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *TrafficPacket) GetEthernetEndpointHardwareAddrSrc() string {
	if x != nil {
		return x.EthernetEndpointHardwareAddrSrc
	}
	return ""
}

func (x *TrafficPacket) GetEthernetEndpointHardwareAddrDst() string {
	if x != nil {
		return x.EthernetEndpointHardwareAddrDst
	}
	return ""
}

func (x *TrafficPacket) GetIsIpv4() bool {
	if x != nil {
		return x.IsIpv4
	}
	return false
}

func (x *TrafficPacket) GetIsIpv6() bool {
	if x != nil {
		return x.IsIpv6
	}
	return false
}

func (x *TrafficPacket) GetNetworkEndpointIPSrc() string {
	if x != nil {
		return x.NetworkEndpointIPSrc
	}
	return ""
}

func (x *TrafficPacket) GetNetworkEndpointIPDst() string {
	if x != nil {
		return x.NetworkEndpointIPDst
	}
	return ""
}

func (x *TrafficPacket) GetTransportEndpointPortSrc() int64 {
	if x != nil {
		return x.TransportEndpointPortSrc
	}
	return 0
}

func (x *TrafficPacket) GetTransportEndpointPortDst() int64 {
	if x != nil {
		return x.TransportEndpointPortDst
	}
	return 0
}

func (x *TrafficPacket) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrafficPacket) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrafficPacket) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TrafficPacket) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type QueryTrafficPacketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*TrafficPacket       `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTrafficPacketResponse) Reset() {
	*x = QueryTrafficPacketResponse{}
	mi := &file_yakgrpc_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTrafficPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficPacketResponse) ProtoMessage() {}

func (x *QueryTrafficPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficPacketResponse.ProtoReflect.Descriptor instead.
func (*QueryTrafficPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{143}
}

func (x *QueryTrafficPacketResponse) GetData() []*TrafficPacket {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryTrafficPacketResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficPacketResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TrafficTCPReassembled struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SessionUuid   string                 `protobuf:"bytes,2,opt,name=SessionUuid,proto3" json:"SessionUuid,omitempty"`
	Raw           []byte                 `protobuf:"bytes,3,opt,name=Raw,proto3" json:"Raw,omitempty"`
	Seq           int64                  `protobuf:"varint,4,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Timestamp     int64                  `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Source        string                 `protobuf:"bytes,6,opt,name=Source,proto3" json:"Source,omitempty"`
	Destination   string                 `protobuf:"bytes,7,opt,name=Destination,proto3" json:"Destination,omitempty"`
	Protocol      string                 `protobuf:"bytes,8,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrafficTCPReassembled) Reset() {
	*x = TrafficTCPReassembled{}
	mi := &file_yakgrpc_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficTCPReassembled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTCPReassembled) ProtoMessage() {}

func (x *TrafficTCPReassembled) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTCPReassembled.ProtoReflect.Descriptor instead.
func (*TrafficTCPReassembled) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{144}
}

func (x *TrafficTCPReassembled) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrafficTCPReassembled) GetSessionUuid() string {
	if x != nil {
		return x.SessionUuid
	}
	return ""
}

func (x *TrafficTCPReassembled) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *TrafficTCPReassembled) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *TrafficTCPReassembled) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TrafficTCPReassembled) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TrafficTCPReassembled) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TrafficTCPReassembled) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

type QueryTrafficTCPReassembledResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Data          []*TrafficTCPReassembled `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination    *Paging                  `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                    `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTrafficTCPReassembledResponse) Reset() {
	*x = QueryTrafficTCPReassembledResponse{}
	mi := &file_yakgrpc_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTrafficTCPReassembledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficTCPReassembledResponse) ProtoMessage() {}

func (x *QueryTrafficTCPReassembledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficTCPReassembledResponse.ProtoReflect.Descriptor instead.
func (*QueryTrafficTCPReassembledResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{145}
}

func (x *QueryTrafficTCPReassembledResponse) GetData() []*TrafficTCPReassembled {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryTrafficTCPReassembledResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficTCPReassembledResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryTrafficSessionRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Pagination *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	// active traffic
	FromNow       bool  `protobuf:"varint,2,opt,name=FromNow,proto3" json:"FromNow,omitempty"` // ignore it, bad field
	FromId        int64 `protobuf:"varint,3,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId       int64 `protobuf:"varint,4,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	TimestampNow  int64 `protobuf:"varint,5,opt,name=TimestampNow,proto3" json:"TimestampNow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTrafficSessionRequest) Reset() {
	*x = QueryTrafficSessionRequest{}
	mi := &file_yakgrpc_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTrafficSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficSessionRequest) ProtoMessage() {}

func (x *QueryTrafficSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficSessionRequest.ProtoReflect.Descriptor instead.
func (*QueryTrafficSessionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{146}
}

func (x *QueryTrafficSessionRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficSessionRequest) GetFromNow() bool {
	if x != nil {
		return x.FromNow
	}
	return false
}

func (x *QueryTrafficSessionRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryTrafficSessionRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *QueryTrafficSessionRequest) GetTimestampNow() int64 {
	if x != nil {
		return x.TimestampNow
	}
	return 0
}

type PcapXRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// first request
	NetInterfaceList []string        `protobuf:"bytes,1,rep,name=NetInterfaceList,proto3" json:"NetInterfaceList,omitempty"`
	TimeoutFloat     float64         `protobuf:"fixed64,2,opt,name=TimeoutFloat,proto3" json:"TimeoutFloat,omitempty"`
	SuricataLoader   *SuricataConfig `protobuf:"bytes,3,opt,name=SuricataLoader,proto3" json:"SuricataLoader,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PcapXRequest) Reset() {
	*x = PcapXRequest{}
	mi := &file_yakgrpc_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PcapXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapXRequest) ProtoMessage() {}

func (x *PcapXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapXRequest.ProtoReflect.Descriptor instead.
func (*PcapXRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{147}
}

func (x *PcapXRequest) GetNetInterfaceList() []string {
	if x != nil {
		return x.NetInterfaceList
	}
	return nil
}

func (x *PcapXRequest) GetTimeoutFloat() float64 {
	if x != nil {
		return x.TimeoutFloat
	}
	return 0
}

func (x *PcapXRequest) GetSuricataLoader() *SuricataConfig {
	if x != nil {
		return x.SuricataLoader
	}
	return nil
}

type SuricataConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuricataConfig) Reset() {
	*x = SuricataConfig{}
	mi := &file_yakgrpc_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuricataConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuricataConfig) ProtoMessage() {}

func (x *SuricataConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuricataConfig.ProtoReflect.Descriptor instead.
func (*SuricataConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{148}
}

type PcapXResponse struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	PacketFrameCounter               int64                  `protobuf:"varint,1,opt,name=PacketFrameCounter,proto3" json:"PacketFrameCounter,omitempty"`
	NetInterfaceTransferKBPerSeconds int64                  `protobuf:"varint,2,opt,name=NetInterfaceTransferKBPerSeconds,proto3" json:"NetInterfaceTransferKBPerSeconds,omitempty"`
	TCPReassembledCount              int64                  `protobuf:"varint,3,opt,name=TCPReassembledCount,proto3" json:"TCPReassembledCount,omitempty"`
	TrafficSessionCount              int64                  `protobuf:"varint,4,opt,name=TrafficSessionCount,proto3" json:"TrafficSessionCount,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *PcapXResponse) Reset() {
	*x = PcapXResponse{}
	mi := &file_yakgrpc_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PcapXResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapXResponse) ProtoMessage() {}

func (x *PcapXResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapXResponse.ProtoReflect.Descriptor instead.
func (*PcapXResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{149}
}

func (x *PcapXResponse) GetPacketFrameCounter() int64 {
	if x != nil {
		return x.PacketFrameCounter
	}
	return 0
}

func (x *PcapXResponse) GetNetInterfaceTransferKBPerSeconds() int64 {
	if x != nil {
		return x.NetInterfaceTransferKBPerSeconds
	}
	return 0
}

func (x *PcapXResponse) GetTCPReassembledCount() int64 {
	if x != nil {
		return x.TCPReassembledCount
	}
	return 0
}

func (x *PcapXResponse) GetTrafficSessionCount() int64 {
	if x != nil {
		return x.TrafficSessionCount
	}
	return 0
}

type RequestYakURLParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// files:
	// GET: means fetch details
	// POST: means update
	// PUT: means create
	// DELETE: means delete
	// HEAD: means check
	Method        string  `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Url           *YakURL `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	Body          []byte  `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"` // 用于存储文件的内容
	Page          int64   `protobuf:"varint,4,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize      int64   `protobuf:"varint,5,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestYakURLParams) Reset() {
	*x = RequestYakURLParams{}
	mi := &file_yakgrpc_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestYakURLParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestYakURLParams) ProtoMessage() {}

func (x *RequestYakURLParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestYakURLParams.ProtoReflect.Descriptor instead.
func (*RequestYakURLParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{150}
}

func (x *RequestYakURLParams) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RequestYakURLParams) GetUrl() *YakURL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *RequestYakURLParams) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RequestYakURLParams) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RequestYakURLParams) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type YakURL struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// YakURL is abstract general fs loader system
	// URL means schema://user:pass@location(:port)/path?query
	FromRaw string `protobuf:"bytes,1,opt,name=FromRaw,proto3" json:"FromRaw,omitempty"`
	// means: file/webshell-.../directory
	Schema        string    `protobuf:"bytes,2,opt,name=Schema,proto3" json:"Schema,omitempty"`
	User          string    `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
	Pass          string    `protobuf:"bytes,4,opt,name=Pass,proto3" json:"Pass,omitempty"`
	Location      string    `protobuf:"bytes,5,opt,name=Location,proto3" json:"Location,omitempty"`
	Path          string    `protobuf:"bytes,6,opt,name=Path,proto3" json:"Path,omitempty"`
	Query         []*KVPair `protobuf:"bytes,7,rep,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YakURL) Reset() {
	*x = YakURL{}
	mi := &file_yakgrpc_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakURL) ProtoMessage() {}

func (x *YakURL) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakURL.ProtoReflect.Descriptor instead.
func (*YakURL) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{151}
}

func (x *YakURL) GetFromRaw() string {
	if x != nil {
		return x.FromRaw
	}
	return ""
}

func (x *YakURL) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *YakURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *YakURL) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *YakURL) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *YakURL) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *YakURL) GetQuery() []*KVPair {
	if x != nil {
		return x.Query
	}
	return nil
}

type YakURLResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// file / bytes
	ResourceType string `protobuf:"bytes,1,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`
	VerboseType  string `protobuf:"bytes,2,opt,name=VerboseType,proto3" json:"VerboseType,omitempty"`
	// path filename
	ResourceName string `protobuf:"bytes,3,opt,name=ResourceName,proto3" json:"ResourceName,omitempty"`
	VerboseName  string `protobuf:"bytes,4,opt,name=VerboseName,proto3" json:"VerboseName,omitempty"`
	Size         int64  `protobuf:"varint,5,opt,name=Size,proto3" json:"Size,omitempty"`
	SizeVerbose  string `protobuf:"bytes,6,opt,name=SizeVerbose,proto3" json:"SizeVerbose,omitempty"`
	// Modified
	ModifiedTimestamp int64 `protobuf:"varint,8,opt,name=ModifiedTimestamp,proto3" json:"ModifiedTimestamp,omitempty"`
	// General URL
	Path              string    `protobuf:"bytes,9,opt,name=Path,proto3" json:"Path,omitempty"`
	YakURLVerbose     string    `protobuf:"bytes,10,opt,name=YakURLVerbose,proto3" json:"YakURLVerbose,omitempty"`
	Url               *YakURL   `protobuf:"bytes,11,opt,name=Url,proto3" json:"Url,omitempty"`
	Extra             []*KVPair `protobuf:"bytes,12,rep,name=Extra,proto3" json:"Extra,omitempty"`
	HaveChildrenNodes bool      `protobuf:"varint,13,opt,name=HaveChildrenNodes,proto3" json:"HaveChildrenNodes,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *YakURLResource) Reset() {
	*x = YakURLResource{}
	mi := &file_yakgrpc_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakURLResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakURLResource) ProtoMessage() {}

func (x *YakURLResource) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakURLResource.ProtoReflect.Descriptor instead.
func (*YakURLResource) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{152}
}

func (x *YakURLResource) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *YakURLResource) GetVerboseType() string {
	if x != nil {
		return x.VerboseType
	}
	return ""
}

func (x *YakURLResource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *YakURLResource) GetVerboseName() string {
	if x != nil {
		return x.VerboseName
	}
	return ""
}

func (x *YakURLResource) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *YakURLResource) GetSizeVerbose() string {
	if x != nil {
		return x.SizeVerbose
	}
	return ""
}

func (x *YakURLResource) GetModifiedTimestamp() int64 {
	if x != nil {
		return x.ModifiedTimestamp
	}
	return 0
}

func (x *YakURLResource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *YakURLResource) GetYakURLVerbose() string {
	if x != nil {
		return x.YakURLVerbose
	}
	return ""
}

func (x *YakURLResource) GetUrl() *YakURL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *YakURLResource) GetExtra() []*KVPair {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *YakURLResource) GetHaveChildrenNodes() bool {
	if x != nil {
		return x.HaveChildrenNodes
	}
	return false
}

type RequestYakURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize      int64                  `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Resources     []*YakURLResource      `protobuf:"bytes,4,rep,name=Resources,proto3" json:"Resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestYakURLResponse) Reset() {
	*x = RequestYakURLResponse{}
	mi := &file_yakgrpc_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestYakURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestYakURLResponse) ProtoMessage() {}

func (x *RequestYakURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestYakURLResponse.ProtoReflect.Descriptor instead.
func (*RequestYakURLResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{153}
}

func (x *RequestYakURLResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RequestYakURLResponse) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RequestYakURLResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RequestYakURLResponse) GetResources() []*YakURLResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type PacketPrettifyHelperRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Packet []byte                 `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	// SetReplaceBody: replace body for prettier
	SetReplaceBody bool   `protobuf:"varint,2,opt,name=SetReplaceBody,proto3" json:"SetReplaceBody,omitempty"`
	Body           []byte `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PacketPrettifyHelperRequest) Reset() {
	*x = PacketPrettifyHelperRequest{}
	mi := &file_yakgrpc_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketPrettifyHelperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketPrettifyHelperRequest) ProtoMessage() {}

func (x *PacketPrettifyHelperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketPrettifyHelperRequest.ProtoReflect.Descriptor instead.
func (*PacketPrettifyHelperRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{154}
}

func (x *PacketPrettifyHelperRequest) GetPacket() []byte {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *PacketPrettifyHelperRequest) GetSetReplaceBody() bool {
	if x != nil {
		return x.SetReplaceBody
	}
	return false
}

func (x *PacketPrettifyHelperRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type PacketPrettifyHelperResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 处理后的 Packet
	Packet        []byte `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	ContentType   string `protobuf:"bytes,2,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	IsImage       bool   `protobuf:"varint,3,opt,name=IsImage,proto3" json:"IsImage,omitempty"`
	ImageHtmlTag  []byte `protobuf:"bytes,4,opt,name=ImageHtmlTag,proto3" json:"ImageHtmlTag,omitempty"`
	Body          []byte `protobuf:"bytes,5,opt,name=Body,proto3" json:"Body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketPrettifyHelperResponse) Reset() {
	*x = PacketPrettifyHelperResponse{}
	mi := &file_yakgrpc_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketPrettifyHelperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketPrettifyHelperResponse) ProtoMessage() {}

func (x *PacketPrettifyHelperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketPrettifyHelperResponse.ProtoReflect.Descriptor instead.
func (*PacketPrettifyHelperResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{155}
}

func (x *PacketPrettifyHelperResponse) GetPacket() []byte {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *PacketPrettifyHelperResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *PacketPrettifyHelperResponse) GetIsImage() bool {
	if x != nil {
		return x.IsImage
	}
	return false
}

func (x *PacketPrettifyHelperResponse) GetImageHtmlTag() []byte {
	if x != nil {
		return x.ImageHtmlTag
	}
	return nil
}

func (x *PacketPrettifyHelperResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type DiagnoseNetworkDNSRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiagnoseNetworkDNSRequest) Reset() {
	*x = DiagnoseNetworkDNSRequest{}
	mi := &file_yakgrpc_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiagnoseNetworkDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnoseNetworkDNSRequest) ProtoMessage() {}

func (x *DiagnoseNetworkDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnoseNetworkDNSRequest.ProtoReflect.Descriptor instead.
func (*DiagnoseNetworkDNSRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{156}
}

func (x *DiagnoseNetworkDNSRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type ResetGlobalNetworkConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetGlobalNetworkConfigRequest) Reset() {
	*x = ResetGlobalNetworkConfigRequest{}
	mi := &file_yakgrpc_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetGlobalNetworkConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetGlobalNetworkConfigRequest) ProtoMessage() {}

func (x *ResetGlobalNetworkConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetGlobalNetworkConfigRequest.ProtoReflect.Descriptor instead.
func (*ResetGlobalNetworkConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{157}
}

type GetGlobalNetworkConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGlobalNetworkConfigRequest) Reset() {
	*x = GetGlobalNetworkConfigRequest{}
	mi := &file_yakgrpc_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGlobalNetworkConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalNetworkConfigRequest) ProtoMessage() {}

func (x *GetGlobalNetworkConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalNetworkConfigRequest.ProtoReflect.Descriptor instead.
func (*GetGlobalNetworkConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{158}
}

type ValidP12PassWordRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Pkcs12Bytes    []byte                 `protobuf:"bytes,1,opt,name=Pkcs12Bytes,proto3" json:"Pkcs12Bytes,omitempty"`
	Pkcs12Password []byte                 `protobuf:"bytes,2,opt,name=Pkcs12Password,proto3" json:"Pkcs12Password,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidP12PassWordRequest) Reset() {
	*x = ValidP12PassWordRequest{}
	mi := &file_yakgrpc_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidP12PassWordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidP12PassWordRequest) ProtoMessage() {}

func (x *ValidP12PassWordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidP12PassWordRequest.ProtoReflect.Descriptor instead.
func (*ValidP12PassWordRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{159}
}

func (x *ValidP12PassWordRequest) GetPkcs12Bytes() []byte {
	if x != nil {
		return x.Pkcs12Bytes
	}
	return nil
}

func (x *ValidP12PassWordRequest) GetPkcs12Password() []byte {
	if x != nil {
		return x.Pkcs12Password
	}
	return nil
}

type ValidP12PassWordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSetPassWord bool                   `protobuf:"varint,1,opt,name=IsSetPassWord,proto3" json:"IsSetPassWord,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidP12PassWordResponse) Reset() {
	*x = ValidP12PassWordResponse{}
	mi := &file_yakgrpc_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidP12PassWordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidP12PassWordResponse) ProtoMessage() {}

func (x *ValidP12PassWordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidP12PassWordResponse.ProtoReflect.Descriptor instead.
func (*ValidP12PassWordResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{160}
}

func (x *ValidP12PassWordResponse) GetIsSetPassWord() bool {
	if x != nil {
		return x.IsSetPassWord
	}
	return false
}

type GlobalNetworkConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Config DNS
	DisableSystemDNS bool     `protobuf:"varint,1,opt,name=DisableSystemDNS,proto3" json:"DisableSystemDNS,omitempty"`
	CustomDNSServers []string `protobuf:"bytes,2,rep,name=CustomDNSServers,proto3" json:"CustomDNSServers,omitempty"`
	DNSFallbackTCP   bool     `protobuf:"varint,3,opt,name=DNSFallbackTCP,proto3" json:"DNSFallbackTCP,omitempty"`
	DNSFallbackDoH   bool     `protobuf:"varint,4,opt,name=DNSFallbackDoH,proto3" json:"DNSFallbackDoH,omitempty"`
	CustomDoHServers []string `protobuf:"bytes,5,rep,name=CustomDoHServers,proto3" json:"CustomDoHServers,omitempty"`
	// certificates
	ClientCertificates []*Certificate `protobuf:"bytes,6,rep,name=ClientCertificates,proto3" json:"ClientCertificates,omitempty"`
	// network
	DisallowIPAddress []string `protobuf:"bytes,7,rep,name=DisallowIPAddress,proto3" json:"DisallowIPAddress,omitempty"`
	DisallowDomain    []string `protobuf:"bytes,8,rep,name=DisallowDomain,proto3" json:"DisallowDomain,omitempty"`
	// default proxy
	GlobalProxy              []string `protobuf:"bytes,9,rep,name=GlobalProxy,proto3" json:"GlobalProxy,omitempty"`
	EnableSystemProxyFromEnv bool     `protobuf:"varint,10,opt,name=EnableSystemProxyFromEnv,proto3" json:"EnableSystemProxyFromEnv,omitempty"`
	// default skip save HTTPFlow
	SkipSaveHTTPFlow bool `protobuf:"varint,11,opt,name=SkipSaveHTTPFlow,proto3" json:"SkipSaveHTTPFlow,omitempty"`
	// 第三方APIKey获取
	AppConfigs []*ThirdPartyApplicationConfig `protobuf:"bytes,12,rep,name=AppConfigs,proto3" json:"AppConfigs,omitempty"`
	// http auth info
	AuthInfos []*AuthInfo `protobuf:"bytes,13,rep,name=AuthInfos,proto3" json:"AuthInfos,omitempty"`
	// syn扫描选择的网卡
	SynScanNetInterface   string   `protobuf:"bytes,14,opt,name=SynScanNetInterface,proto3" json:"SynScanNetInterface,omitempty"`
	ExcludePluginScanURIs []string `protobuf:"bytes,15,rep,name=ExcludePluginScanURIs,proto3" json:"ExcludePluginScanURIs,omitempty"`
	IncludePluginScanURIs []string `protobuf:"bytes,16,rep,name=IncludePluginScanURIs,proto3" json:"IncludePluginScanURIs,omitempty"`
	// AI Primary Config 首选 AI 配置项
	// openai / chatglm
	PrimaryAIType string   `protobuf:"bytes,17,opt,name=PrimaryAIType,proto3" json:"PrimaryAIType,omitempty"`
	AiApiPriority []string `protobuf:"bytes,18,rep,name=AiApiPriority,proto3" json:"AiApiPriority,omitempty"`
	// 开启数据库同步存储
	DbSaveSync bool `protobuf:"varint,19,opt,name=DbSaveSync,proto3" json:"DbSaveSync,omitempty"`
	// 插件执行配置
	CallPluginTimeout float32 `protobuf:"fixed32,20,opt,name=CallPluginTimeout,proto3" json:"CallPluginTimeout,omitempty"`
	MinTlsVersion     uint64  `protobuf:"varint,21,opt,name=MinTlsVersion,proto3" json:"MinTlsVersion,omitempty"`
	MaxTlsVersion     uint64  `protobuf:"varint,22,opt,name=MaxTlsVersion,proto3" json:"MaxTlsVersion,omitempty"`
	MaxContentLength  uint64  `protobuf:"varint,23,opt,name=MaxContentLength,proto3" json:"MaxContentLength,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GlobalNetworkConfig) Reset() {
	*x = GlobalNetworkConfig{}
	mi := &file_yakgrpc_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNetworkConfig) ProtoMessage() {}

func (x *GlobalNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNetworkConfig.ProtoReflect.Descriptor instead.
func (*GlobalNetworkConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{161}
}

func (x *GlobalNetworkConfig) GetDisableSystemDNS() bool {
	if x != nil {
		return x.DisableSystemDNS
	}
	return false
}

func (x *GlobalNetworkConfig) GetCustomDNSServers() []string {
	if x != nil {
		return x.CustomDNSServers
	}
	return nil
}

func (x *GlobalNetworkConfig) GetDNSFallbackTCP() bool {
	if x != nil {
		return x.DNSFallbackTCP
	}
	return false
}

func (x *GlobalNetworkConfig) GetDNSFallbackDoH() bool {
	if x != nil {
		return x.DNSFallbackDoH
	}
	return false
}

func (x *GlobalNetworkConfig) GetCustomDoHServers() []string {
	if x != nil {
		return x.CustomDoHServers
	}
	return nil
}

func (x *GlobalNetworkConfig) GetClientCertificates() []*Certificate {
	if x != nil {
		return x.ClientCertificates
	}
	return nil
}

func (x *GlobalNetworkConfig) GetDisallowIPAddress() []string {
	if x != nil {
		return x.DisallowIPAddress
	}
	return nil
}

func (x *GlobalNetworkConfig) GetDisallowDomain() []string {
	if x != nil {
		return x.DisallowDomain
	}
	return nil
}

func (x *GlobalNetworkConfig) GetGlobalProxy() []string {
	if x != nil {
		return x.GlobalProxy
	}
	return nil
}

func (x *GlobalNetworkConfig) GetEnableSystemProxyFromEnv() bool {
	if x != nil {
		return x.EnableSystemProxyFromEnv
	}
	return false
}

func (x *GlobalNetworkConfig) GetSkipSaveHTTPFlow() bool {
	if x != nil {
		return x.SkipSaveHTTPFlow
	}
	return false
}

func (x *GlobalNetworkConfig) GetAppConfigs() []*ThirdPartyApplicationConfig {
	if x != nil {
		return x.AppConfigs
	}
	return nil
}

func (x *GlobalNetworkConfig) GetAuthInfos() []*AuthInfo {
	if x != nil {
		return x.AuthInfos
	}
	return nil
}

func (x *GlobalNetworkConfig) GetSynScanNetInterface() string {
	if x != nil {
		return x.SynScanNetInterface
	}
	return ""
}

func (x *GlobalNetworkConfig) GetExcludePluginScanURIs() []string {
	if x != nil {
		return x.ExcludePluginScanURIs
	}
	return nil
}

func (x *GlobalNetworkConfig) GetIncludePluginScanURIs() []string {
	if x != nil {
		return x.IncludePluginScanURIs
	}
	return nil
}

func (x *GlobalNetworkConfig) GetPrimaryAIType() string {
	if x != nil {
		return x.PrimaryAIType
	}
	return ""
}

func (x *GlobalNetworkConfig) GetAiApiPriority() []string {
	if x != nil {
		return x.AiApiPriority
	}
	return nil
}

func (x *GlobalNetworkConfig) GetDbSaveSync() bool {
	if x != nil {
		return x.DbSaveSync
	}
	return false
}

func (x *GlobalNetworkConfig) GetCallPluginTimeout() float32 {
	if x != nil {
		return x.CallPluginTimeout
	}
	return 0
}

func (x *GlobalNetworkConfig) GetMinTlsVersion() uint64 {
	if x != nil {
		return x.MinTlsVersion
	}
	return 0
}

func (x *GlobalNetworkConfig) GetMaxTlsVersion() uint64 {
	if x != nil {
		return x.MaxTlsVersion
	}
	return 0
}

func (x *GlobalNetworkConfig) GetMaxContentLength() uint64 {
	if x != nil {
		return x.MaxContentLength
	}
	return 0
}

type AuthInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuthUsername  string                 `protobuf:"bytes,1,opt,name=AuthUsername,proto3" json:"AuthUsername,omitempty"`
	AuthPassword  string                 `protobuf:"bytes,2,opt,name=AuthPassword,proto3" json:"AuthPassword,omitempty"`
	AuthType      string                 `protobuf:"bytes,3,opt,name=AuthType,proto3" json:"AuthType,omitempty"`
	Host          string                 `protobuf:"bytes,4,opt,name=Host,proto3" json:"Host,omitempty"`
	Forbidden     bool                   `protobuf:"varint,5,opt,name=Forbidden,proto3" json:"Forbidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthInfo) Reset() {
	*x = AuthInfo{}
	mi := &file_yakgrpc_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInfo) ProtoMessage() {}

func (x *AuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInfo.ProtoReflect.Descriptor instead.
func (*AuthInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{162}
}

func (x *AuthInfo) GetAuthUsername() string {
	if x != nil {
		return x.AuthUsername
	}
	return ""
}

func (x *AuthInfo) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *AuthInfo) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *AuthInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AuthInfo) GetForbidden() bool {
	if x != nil {
		return x.Forbidden
	}
	return false
}

type ThirdPartyApplicationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// zoomeye / hunter / shodan / fofa / github / openai / token
	Type           string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	APIKey         string    `protobuf:"bytes,2,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	UserIdentifier string    `protobuf:"bytes,3,opt,name=UserIdentifier,proto3" json:"UserIdentifier,omitempty"`
	UserSecret     string    `protobuf:"bytes,4,opt,name=UserSecret,proto3" json:"UserSecret,omitempty"`
	Namespace      string    `protobuf:"bytes,5,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Domain         string    `protobuf:"bytes,6,opt,name=Domain,proto3" json:"Domain,omitempty"`
	WebhookURL     string    `protobuf:"bytes,7,opt,name=WebhookURL,proto3" json:"WebhookURL,omitempty"`
	ExtraParams    []*KVPair `protobuf:"bytes,8,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ThirdPartyApplicationConfig) Reset() {
	*x = ThirdPartyApplicationConfig{}
	mi := &file_yakgrpc_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyApplicationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyApplicationConfig) ProtoMessage() {}

func (x *ThirdPartyApplicationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyApplicationConfig.ProtoReflect.Descriptor instead.
func (*ThirdPartyApplicationConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{163}
}

func (x *ThirdPartyApplicationConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetUserIdentifier() string {
	if x != nil {
		return x.UserIdentifier
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetUserSecret() string {
	if x != nil {
		return x.UserSecret
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetWebhookURL() string {
	if x != nil {
		return x.WebhookURL
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetExtraParams() []*KVPair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type DiagnoseNetworkRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NetworkTimeout float64                `protobuf:"fixed64,1,opt,name=NetworkTimeout,proto3" json:"NetworkTimeout,omitempty"`
	// 想要连接或扫描的目标是否都可达？
	// 网络是否可达？网管是什么
	// 如果是一个主机的话，他的 TCP 是否开放？
	// 如果包含域名的话，他的解析结果是什么？不存在？还是本地解析？
	// 多个服务器解析到同一个 IP？
	ConnectTarget string `protobuf:"bytes,2,opt,name=ConnectTarget,proto3" json:"ConnectTarget,omitempty"`
	// 代理是否配置正确？
	Proxy             string   `protobuf:"bytes,3,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	ProxyAuthUsername string   `protobuf:"bytes,4,opt,name=ProxyAuthUsername,proto3" json:"ProxyAuthUsername,omitempty"`
	ProxyAuthPassword string   `protobuf:"bytes,5,opt,name=ProxyAuthPassword,proto3" json:"ProxyAuthPassword,omitempty"`
	ProxyToAddr       string   `protobuf:"bytes,8,opt,name=ProxyToAddr,proto3" json:"ProxyToAddr,omitempty"`
	Domain            string   `protobuf:"bytes,6,opt,name=Domain,proto3" json:"Domain,omitempty"`
	DNSServers        []string `protobuf:"bytes,7,rep,name=DNSServers,proto3" json:"DNSServers,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DiagnoseNetworkRequest) Reset() {
	*x = DiagnoseNetworkRequest{}
	mi := &file_yakgrpc_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiagnoseNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnoseNetworkRequest) ProtoMessage() {}

func (x *DiagnoseNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnoseNetworkRequest.ProtoReflect.Descriptor instead.
func (*DiagnoseNetworkRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{164}
}

func (x *DiagnoseNetworkRequest) GetNetworkTimeout() float64 {
	if x != nil {
		return x.NetworkTimeout
	}
	return 0
}

func (x *DiagnoseNetworkRequest) GetConnectTarget() string {
	if x != nil {
		return x.ConnectTarget
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetProxyAuthUsername() string {
	if x != nil {
		return x.ProxyAuthUsername
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetProxyAuthPassword() string {
	if x != nil {
		return x.ProxyAuthPassword
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetProxyToAddr() string {
	if x != nil {
		return x.ProxyToAddr
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetDNSServers() []string {
	if x != nil {
		return x.DNSServers
	}
	return nil
}

type DiagnoseNetworkResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Title          string                 `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	DiagnoseType   string                 `protobuf:"bytes,2,opt,name=DiagnoseType,proto3" json:"DiagnoseType,omitempty"`
	DiagnoseResult string                 `protobuf:"bytes,3,opt,name=DiagnoseResult,proto3" json:"DiagnoseResult,omitempty"`
	// info/verbose
	// warning
	LogLevel      string `protobuf:"bytes,5,opt,name=LogLevel,proto3" json:"LogLevel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiagnoseNetworkResponse) Reset() {
	*x = DiagnoseNetworkResponse{}
	mi := &file_yakgrpc_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiagnoseNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnoseNetworkResponse) ProtoMessage() {}

func (x *DiagnoseNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnoseNetworkResponse.ProtoReflect.Descriptor instead.
func (*DiagnoseNetworkResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{165}
}

func (x *DiagnoseNetworkResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DiagnoseNetworkResponse) GetDiagnoseType() string {
	if x != nil {
		return x.DiagnoseType
	}
	return ""
}

func (x *DiagnoseNetworkResponse) GetDiagnoseResult() string {
	if x != nil {
		return x.DiagnoseResult
	}
	return ""
}

func (x *DiagnoseNetworkResponse) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

type DisconnectVulinboxAgentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectVulinboxAgentRequest) Reset() {
	*x = DisconnectVulinboxAgentRequest{}
	mi := &file_yakgrpc_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectVulinboxAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectVulinboxAgentRequest) ProtoMessage() {}

func (x *DisconnectVulinboxAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectVulinboxAgentRequest.ProtoReflect.Descriptor instead.
func (*DisconnectVulinboxAgentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{166}
}

func (x *DisconnectVulinboxAgentRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type GetRegisteredAgentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRegisteredAgentRequest) Reset() {
	*x = GetRegisteredAgentRequest{}
	mi := &file_yakgrpc_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRegisteredAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredAgentRequest) ProtoMessage() {}

func (x *GetRegisteredAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredAgentRequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredAgentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{167}
}

type GetRegisteredAgentResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Agents        []*IsRemoteAddrAvailableResponse `protobuf:"bytes,1,rep,name=Agents,proto3" json:"Agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRegisteredAgentResponse) Reset() {
	*x = GetRegisteredAgentResponse{}
	mi := &file_yakgrpc_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRegisteredAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredAgentResponse) ProtoMessage() {}

func (x *GetRegisteredAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredAgentResponse.ProtoReflect.Descriptor instead.
func (*GetRegisteredAgentResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{168}
}

func (x *GetRegisteredAgentResponse) GetAgents() []*IsRemoteAddrAvailableResponse {
	if x != nil {
		return x.Agents
	}
	return nil
}

type SmokingEvaluatePluginRequest struct {
	state    protoimpl.MessageState      `protogen:"open.v1"`
	Requests []*HTTPRequestBuilderParams `protobuf:"bytes,1,rep,name=Requests,proto3" json:"Requests,omitempty"`
	// 只支持插件名评估
	PluginName string `protobuf:"bytes,2,opt,name=PluginName,proto3" json:"PluginName,omitempty"`
	Code       string `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
	// "syntaxflow" | "nuclei" | "mitm" | "port-scan" | "codec" | "yak"
	PluginType    string `protobuf:"bytes,4,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmokingEvaluatePluginRequest) Reset() {
	*x = SmokingEvaluatePluginRequest{}
	mi := &file_yakgrpc_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmokingEvaluatePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginRequest) ProtoMessage() {}

func (x *SmokingEvaluatePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginRequest.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{169}
}

func (x *SmokingEvaluatePluginRequest) GetRequests() []*HTTPRequestBuilderParams {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *SmokingEvaluatePluginRequest) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *SmokingEvaluatePluginRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SmokingEvaluatePluginRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

type SmokingEvaluateResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Item          string                 `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
	Suggestion    string                 `protobuf:"bytes,2,opt,name=Suggestion,proto3" json:"Suggestion,omitempty"`
	ExtraInfo     []byte                 `protobuf:"bytes,3,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`
	Range         *Range                 `protobuf:"bytes,4,opt,name=Range,proto3" json:"Range,omitempty"`
	Severity      string                 `protobuf:"bytes,5,opt,name=Severity,proto3" json:"Severity,omitempty"` // Error || Warning
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmokingEvaluateResult) Reset() {
	*x = SmokingEvaluateResult{}
	mi := &file_yakgrpc_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmokingEvaluateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluateResult) ProtoMessage() {}

func (x *SmokingEvaluateResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluateResult.ProtoReflect.Descriptor instead.
func (*SmokingEvaluateResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{170}
}

func (x *SmokingEvaluateResult) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *SmokingEvaluateResult) GetSuggestion() string {
	if x != nil {
		return x.Suggestion
	}
	return ""
}

func (x *SmokingEvaluateResult) GetExtraInfo() []byte {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *SmokingEvaluateResult) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *SmokingEvaluateResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

type SmokingEvaluatePluginResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Score         int64                    `protobuf:"varint,1,opt,name=Score,proto3" json:"Score,omitempty"`
	Results       []*SmokingEvaluateResult `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmokingEvaluatePluginResponse) Reset() {
	*x = SmokingEvaluatePluginResponse{}
	mi := &file_yakgrpc_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmokingEvaluatePluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginResponse) ProtoMessage() {}

func (x *SmokingEvaluatePluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginResponse.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{171}
}

func (x *SmokingEvaluatePluginResponse) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SmokingEvaluatePluginResponse) GetResults() []*SmokingEvaluateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type IsVulinboxReadyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsVulinboxReadyRequest) Reset() {
	*x = IsVulinboxReadyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsVulinboxReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsVulinboxReadyRequest) ProtoMessage() {}

func (x *IsVulinboxReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsVulinboxReadyRequest.ProtoReflect.Descriptor instead.
func (*IsVulinboxReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{172}
}

type IsVulinboxReadyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsVulinboxReadyResponse) Reset() {
	*x = IsVulinboxReadyResponse{}
	mi := &file_yakgrpc_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsVulinboxReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsVulinboxReadyResponse) ProtoMessage() {}

func (x *IsVulinboxReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsVulinboxReadyResponse.ProtoReflect.Descriptor instead.
func (*IsVulinboxReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{173}
}

func (x *IsVulinboxReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsVulinboxReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type InstallVulinboxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proxy         string                 `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallVulinboxRequest) Reset() {
	*x = InstallVulinboxRequest{}
	mi := &file_yakgrpc_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallVulinboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallVulinboxRequest) ProtoMessage() {}

func (x *InstallVulinboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallVulinboxRequest.ProtoReflect.Descriptor instead.
func (*InstallVulinboxRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{174}
}

func (x *InstallVulinboxRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type StartVulinboxRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 默认应该是 127.0.0.1
	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	// 默认应该是 8787
	Port string `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
	// 不启用 HTTPS
	NoHttps bool `protobuf:"varint,3,opt,name=NoHttps,proto3" json:"NoHttps,omitempty"`
	// 安全模式：不启用命令执行靶场
	SafeMode      bool `protobuf:"varint,4,opt,name=SafeMode,proto3" json:"SafeMode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartVulinboxRequest) Reset() {
	*x = StartVulinboxRequest{}
	mi := &file_yakgrpc_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVulinboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVulinboxRequest) ProtoMessage() {}

func (x *StartVulinboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVulinboxRequest.ProtoReflect.Descriptor instead.
func (*StartVulinboxRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{175}
}

func (x *StartVulinboxRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StartVulinboxRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *StartVulinboxRequest) GetNoHttps() bool {
	if x != nil {
		return x.NoHttps
	}
	return false
}

func (x *StartVulinboxRequest) GetSafeMode() bool {
	if x != nil {
		return x.SafeMode
	}
	return false
}

type GenQualityInspectionReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptNames   []string               `protobuf:"bytes,1,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	TaskName      string                 `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenQualityInspectionReportRequest) Reset() {
	*x = GenQualityInspectionReportRequest{}
	mi := &file_yakgrpc_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenQualityInspectionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenQualityInspectionReportRequest) ProtoMessage() {}

func (x *GenQualityInspectionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenQualityInspectionReportRequest.ProtoReflect.Descriptor instead.
func (*GenQualityInspectionReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{176}
}

func (x *GenQualityInspectionReportRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *GenQualityInspectionReportRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type DebugPluginRequest struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	Code                string                    `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	PluginType          string                    `protobuf:"bytes,2,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
	Input               string                    `protobuf:"bytes,3,opt,name=Input,proto3" json:"Input,omitempty"`
	HTTPRequestTemplate *HTTPRequestBuilderParams `protobuf:"bytes,4,opt,name=HTTPRequestTemplate,proto3" json:"HTTPRequestTemplate,omitempty"`
	ExecParams          []*KVPair                 `protobuf:"bytes,5,rep,name=ExecParams,proto3" json:"ExecParams,omitempty"`
	LinkPluginConfig    *HybridScanPluginConfig   `protobuf:"bytes,6,opt,name=LinkPluginConfig,proto3" json:"LinkPluginConfig,omitempty"`
	// plugin name, if not empty, will use code
	PluginName string `protobuf:"bytes,7,opt,name=PluginName,proto3" json:"PluginName,omitempty"`
	// runtime id ,if empty, will create a new runtime
	RuntimeId     string `protobuf:"bytes,8,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugPluginRequest) Reset() {
	*x = DebugPluginRequest{}
	mi := &file_yakgrpc_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugPluginRequest) ProtoMessage() {}

func (x *DebugPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugPluginRequest.ProtoReflect.Descriptor instead.
func (*DebugPluginRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{177}
}

func (x *DebugPluginRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DebugPluginRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

func (x *DebugPluginRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *DebugPluginRequest) GetHTTPRequestTemplate() *HTTPRequestBuilderParams {
	if x != nil {
		return x.HTTPRequestTemplate
	}
	return nil
}

func (x *DebugPluginRequest) GetExecParams() []*KVPair {
	if x != nil {
		return x.ExecParams
	}
	return nil
}

func (x *DebugPluginRequest) GetLinkPluginConfig() *HybridScanPluginConfig {
	if x != nil {
		return x.LinkPluginConfig
	}
	return nil
}

func (x *DebugPluginRequest) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *DebugPluginRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type HTTPRequestBuilderResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHttps       bool                   `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	HTTPRequest   []byte                 `protobuf:"bytes,3,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPRequestBuilderResult) Reset() {
	*x = HTTPRequestBuilderResult{}
	mi := &file_yakgrpc_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestBuilderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestBuilderResult) ProtoMessage() {}

func (x *HTTPRequestBuilderResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestBuilderResult.ProtoReflect.Descriptor instead.
func (*HTTPRequestBuilderResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{178}
}

func (x *HTTPRequestBuilderResult) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HTTPRequestBuilderResult) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPRequestBuilderResult) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

type HTTPRequestBuilderResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Results       []*HTTPRequestBuilderResult `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	Templates     string                      `protobuf:"bytes,2,opt,name=Templates,proto3" json:"Templates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPRequestBuilderResponse) Reset() {
	*x = HTTPRequestBuilderResponse{}
	mi := &file_yakgrpc_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestBuilderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestBuilderResponse) ProtoMessage() {}

func (x *HTTPRequestBuilderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestBuilderResponse.ProtoReflect.Descriptor instead.
func (*HTTPRequestBuilderResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{179}
}

func (x *HTTPRequestBuilderResponse) GetResults() []*HTTPRequestBuilderResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *HTTPRequestBuilderResponse) GetTemplates() string {
	if x != nil {
		return x.Templates
	}
	return ""
}

type HTTPRequestBuilderParams struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IsRawHTTPRequest bool                   `protobuf:"varint,1,opt,name=IsRawHTTPRequest,proto3" json:"IsRawHTTPRequest,omitempty"`
	IsHttps          bool                   `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	RawHTTPRequest   []byte                 `protobuf:"bytes,3,opt,name=RawHTTPRequest,proto3" json:"RawHTTPRequest,omitempty"`
	// fields
	Method string `protobuf:"bytes,4,opt,name=Method,proto3" json:"Method,omitempty"`
	// path 增强型
	Path      []string  `protobuf:"bytes,6,rep,name=Path,proto3" json:"Path,omitempty"`
	GetParams []*KVPair `protobuf:"bytes,9,rep,name=GetParams,proto3" json:"GetParams,omitempty"`
	Headers   []*KVPair `protobuf:"bytes,7,rep,name=Headers,proto3" json:"Headers,omitempty"`
	Cookie    []*KVPair `protobuf:"bytes,8,rep,name=Cookie,proto3" json:"Cookie,omitempty"`
	// body 增强
	Body                []byte    `protobuf:"bytes,10,opt,name=Body,proto3" json:"Body,omitempty"`
	PostParams          []*KVPair `protobuf:"bytes,11,rep,name=PostParams,proto3" json:"PostParams,omitempty"`
	MultipartParams     []*KVPair `protobuf:"bytes,12,rep,name=MultipartParams,proto3" json:"MultipartParams,omitempty"`
	MultipartFileParams []*KVPair `protobuf:"bytes,13,rep,name=MultipartFileParams,proto3" json:"MultipartFileParams,omitempty"`
	IsHttpFlowId        bool      `protobuf:"varint,14,opt,name=IsHttpFlowId,proto3" json:"IsHttpFlowId,omitempty"`
	HTTPFlowId          []int64   `protobuf:"varint,15,rep,packed,name=HTTPFlowId,proto3" json:"HTTPFlowId,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HTTPRequestBuilderParams) Reset() {
	*x = HTTPRequestBuilderParams{}
	mi := &file_yakgrpc_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestBuilderParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestBuilderParams) ProtoMessage() {}

func (x *HTTPRequestBuilderParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestBuilderParams.ProtoReflect.Descriptor instead.
func (*HTTPRequestBuilderParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{180}
}

func (x *HTTPRequestBuilderParams) GetIsRawHTTPRequest() bool {
	if x != nil {
		return x.IsRawHTTPRequest
	}
	return false
}

func (x *HTTPRequestBuilderParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HTTPRequestBuilderParams) GetRawHTTPRequest() []byte {
	if x != nil {
		return x.RawHTTPRequest
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPRequestBuilderParams) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetGetParams() []*KVPair {
	if x != nil {
		return x.GetParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetHeaders() []*KVPair {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetCookie() []*KVPair {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetPostParams() []*KVPair {
	if x != nil {
		return x.PostParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetMultipartParams() []*KVPair {
	if x != nil {
		return x.MultipartParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetMultipartFileParams() []*KVPair {
	if x != nil {
		return x.MultipartFileParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetIsHttpFlowId() bool {
	if x != nil {
		return x.IsHttpFlowId
	}
	return false
}

func (x *HTTPRequestBuilderParams) GetHTTPFlowId() []int64 {
	if x != nil {
		return x.HTTPFlowId
	}
	return nil
}

type ScreenRecorder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"`
	NoteInfo      string                 `protobuf:"bytes,3,opt,name=NoteInfo,proto3" json:"NoteInfo,omitempty"`
	Project       string                 `protobuf:"bytes,4,opt,name=Project,proto3" json:"Project,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,6,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	VideoName     string                 `protobuf:"bytes,7,opt,name=VideoName,proto3" json:"VideoName,omitempty"`
	Cover         string                 `protobuf:"bytes,8,opt,name=Cover,proto3" json:"Cover,omitempty"`
	Duration      string                 `protobuf:"bytes,9,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Before        bool                   `protobuf:"varint,10,opt,name=Before,proto3" json:"Before,omitempty"`
	After         bool                   `protobuf:"varint,11,opt,name=After,proto3" json:"After,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScreenRecorder) Reset() {
	*x = ScreenRecorder{}
	mi := &file_yakgrpc_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScreenRecorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenRecorder) ProtoMessage() {}

func (x *ScreenRecorder) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenRecorder.ProtoReflect.Descriptor instead.
func (*ScreenRecorder) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{181}
}

func (x *ScreenRecorder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScreenRecorder) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ScreenRecorder) GetNoteInfo() string {
	if x != nil {
		return x.NoteInfo
	}
	return ""
}

func (x *ScreenRecorder) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ScreenRecorder) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ScreenRecorder) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ScreenRecorder) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

func (x *ScreenRecorder) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *ScreenRecorder) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *ScreenRecorder) GetBefore() bool {
	if x != nil {
		return x.Before
	}
	return false
}

func (x *ScreenRecorder) GetAfter() bool {
	if x != nil {
		return x.After
	}
	return false
}

type QueryScreenRecorderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Keywords      string                 `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Ids           []int64                `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryScreenRecorderRequest) Reset() {
	*x = QueryScreenRecorderRequest{}
	mi := &file_yakgrpc_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScreenRecorderRequest) ProtoMessage() {}

func (x *QueryScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*QueryScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{182}
}

func (x *QueryScreenRecorderRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryScreenRecorderRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryScreenRecorderRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryScreenRecorderRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UploadScreenRecorderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Keywords      string                 `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Ids           []int64                `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadScreenRecorderRequest) Reset() {
	*x = UploadScreenRecorderRequest{}
	mi := &file_yakgrpc_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadScreenRecorderRequest) ProtoMessage() {}

func (x *UploadScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*UploadScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{183}
}

func (x *UploadScreenRecorderRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UploadScreenRecorderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UploadScreenRecorderRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *UploadScreenRecorderRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetOneScreenRecorderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Order         string                 `protobuf:"bytes,2,opt,name=Order,proto3" json:"Order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOneScreenRecorderRequest) Reset() {
	*x = GetOneScreenRecorderRequest{}
	mi := &file_yakgrpc_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOneScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneScreenRecorderRequest) ProtoMessage() {}

func (x *GetOneScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*GetOneScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{184}
}

func (x *GetOneScreenRecorderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetOneScreenRecorderRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type UpdateScreenRecorderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	VideoName     string                 `protobuf:"bytes,2,opt,name=VideoName,proto3" json:"VideoName,omitempty"`
	NoteInfo      string                 `protobuf:"bytes,3,opt,name=NoteInfo,proto3" json:"NoteInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateScreenRecorderRequest) Reset() {
	*x = UpdateScreenRecorderRequest{}
	mi := &file_yakgrpc_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScreenRecorderRequest) ProtoMessage() {}

func (x *UpdateScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*UpdateScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{185}
}

func (x *UpdateScreenRecorderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateScreenRecorderRequest) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

func (x *UpdateScreenRecorderRequest) GetNoteInfo() string {
	if x != nil {
		return x.NoteInfo
	}
	return ""
}

type QueryScreenRecorderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*ScreenRecorder      `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryScreenRecorderResponse) Reset() {
	*x = QueryScreenRecorderResponse{}
	mi := &file_yakgrpc_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryScreenRecorderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScreenRecorderResponse) ProtoMessage() {}

func (x *QueryScreenRecorderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScreenRecorderResponse.ProtoReflect.Descriptor instead.
func (*QueryScreenRecorderResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{186}
}

func (x *QueryScreenRecorderResponse) GetData() []*ScreenRecorder {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryScreenRecorderResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryScreenRecorderResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type StartScrecorderRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Framerate      int64                  `protobuf:"varint,1,opt,name=Framerate,proto3" json:"Framerate,omitempty"`
	ResolutionSize string                 `protobuf:"bytes,2,opt,name=ResolutionSize,proto3" json:"ResolutionSize,omitempty"`
	CoefficientPTS float64                `protobuf:"fixed64,3,opt,name=CoefficientPTS,proto3" json:"CoefficientPTS,omitempty"`
	DisableMouse   bool                   `protobuf:"varint,4,opt,name=DisableMouse,proto3" json:"DisableMouse,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StartScrecorderRequest) Reset() {
	*x = StartScrecorderRequest{}
	mi := &file_yakgrpc_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartScrecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartScrecorderRequest) ProtoMessage() {}

func (x *StartScrecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartScrecorderRequest.ProtoReflect.Descriptor instead.
func (*StartScrecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{187}
}

func (x *StartScrecorderRequest) GetFramerate() int64 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *StartScrecorderRequest) GetResolutionSize() string {
	if x != nil {
		return x.ResolutionSize
	}
	return ""
}

func (x *StartScrecorderRequest) GetCoefficientPTS() float64 {
	if x != nil {
		return x.CoefficientPTS
	}
	return 0
}

func (x *StartScrecorderRequest) GetDisableMouse() bool {
	if x != nil {
		return x.DisableMouse
	}
	return false
}

type InstallScrecorderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proxy         string                 `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallScrecorderRequest) Reset() {
	*x = InstallScrecorderRequest{}
	mi := &file_yakgrpc_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallScrecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallScrecorderRequest) ProtoMessage() {}

func (x *InstallScrecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallScrecorderRequest.ProtoReflect.Descriptor instead.
func (*InstallScrecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{188}
}

func (x *InstallScrecorderRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type IsScrecorderReadyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsScrecorderReadyRequest) Reset() {
	*x = IsScrecorderReadyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsScrecorderReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsScrecorderReadyRequest) ProtoMessage() {}

func (x *IsScrecorderReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsScrecorderReadyRequest.ProtoReflect.Descriptor instead.
func (*IsScrecorderReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{189}
}

type IsScrecorderReadyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsScrecorderReadyResponse) Reset() {
	*x = IsScrecorderReadyResponse{}
	mi := &file_yakgrpc_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsScrecorderReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsScrecorderReadyResponse) ProtoMessage() {}

func (x *IsScrecorderReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsScrecorderReadyResponse.ProtoReflect.Descriptor instead.
func (*IsScrecorderReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{190}
}

func (x *IsScrecorderReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsScrecorderReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetCVERequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CVE           string                 `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCVERequest) Reset() {
	*x = GetCVERequest{}
	mi := &file_yakgrpc_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCVERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCVERequest) ProtoMessage() {}

func (x *GetCVERequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCVERequest.ProtoReflect.Descriptor instead.
func (*GetCVERequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{191}
}

func (x *GetCVERequest) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

type QueryCVERequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Pagination *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	// NETWORK/LOCAL/ADJACENT_NETWORK/PHYSICAL
	AccessVector string `protobuf:"bytes,2,opt,name=AccessVector,proto3" json:"AccessVector,omitempty"`
	// HIGH/MIDDLE/LOW
	AccessComplexity string  `protobuf:"bytes,3,opt,name=AccessComplexity,proto3" json:"AccessComplexity,omitempty"`
	CWE              string  `protobuf:"bytes,4,opt,name=CWE,proto3" json:"CWE,omitempty"`
	Year             string  `protobuf:"bytes,5,opt,name=Year,proto3" json:"Year,omitempty"`
	Severity         string  `protobuf:"bytes,6,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Score            float64 `protobuf:"fixed64,7,opt,name=Score,proto3" json:"Score,omitempty"`
	Product          string  `protobuf:"bytes,8,opt,name=Product,proto3" json:"Product,omitempty"`
	// by published_date
	AfterYear               string `protobuf:"bytes,9,opt,name=AfterYear,proto3" json:"AfterYear,omitempty"`
	ChineseTranslationFirst bool   `protobuf:"varint,10,opt,name=ChineseTranslationFirst,proto3" json:"ChineseTranslationFirst,omitempty"`
	Keywords                string `protobuf:"bytes,11,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *QueryCVERequest) Reset() {
	*x = QueryCVERequest{}
	mi := &file_yakgrpc_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCVERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCVERequest) ProtoMessage() {}

func (x *QueryCVERequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCVERequest.ProtoReflect.Descriptor instead.
func (*QueryCVERequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{192}
}

func (x *QueryCVERequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryCVERequest) GetAccessVector() string {
	if x != nil {
		return x.AccessVector
	}
	return ""
}

func (x *QueryCVERequest) GetAccessComplexity() string {
	if x != nil {
		return x.AccessComplexity
	}
	return ""
}

func (x *QueryCVERequest) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *QueryCVERequest) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *QueryCVERequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *QueryCVERequest) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QueryCVERequest) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *QueryCVERequest) GetAfterYear() string {
	if x != nil {
		return x.AfterYear
	}
	return ""
}

func (x *QueryCVERequest) GetChineseTranslationFirst() bool {
	if x != nil {
		return x.ChineseTranslationFirst
	}
	return false
}

func (x *QueryCVERequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

type CWEDetail struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CWE               string                 `protobuf:"bytes,1,opt,name=CWE,proto3" json:"CWE,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NameZh            string                 `protobuf:"bytes,3,opt,name=NameZh,proto3" json:"NameZh,omitempty"` //  repeated CWEDetail InterTo = 4;
	Status            string                 `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	Stable            bool                   `protobuf:"varint,6,opt,name=Stable,proto3" json:"Stable,omitempty"`
	Incomplete        bool                   `protobuf:"varint,7,opt,name=Incomplete,proto3" json:"Incomplete,omitempty"`
	Description       string                 `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	DescriptionZh     string                 `protobuf:"bytes,9,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	LongDescription   string                 `protobuf:"bytes,10,opt,name=LongDescription,proto3" json:"LongDescription,omitempty"`
	LongDescriptionZh string                 `protobuf:"bytes,11,opt,name=LongDescriptionZh,proto3" json:"LongDescriptionZh,omitempty"`
	RelativeLanguage  []string               `protobuf:"bytes,12,rep,name=RelativeLanguage,proto3" json:"RelativeLanguage,omitempty"`
	Solution          string                 `protobuf:"bytes,13,opt,name=Solution,proto3" json:"Solution,omitempty"`
	RelativeCVE       []string               `protobuf:"bytes,14,rep,name=RelativeCVE,proto3" json:"RelativeCVE,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CWEDetail) Reset() {
	*x = CWEDetail{}
	mi := &file_yakgrpc_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWEDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWEDetail) ProtoMessage() {}

func (x *CWEDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWEDetail.ProtoReflect.Descriptor instead.
func (*CWEDetail) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{193}
}

func (x *CWEDetail) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *CWEDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CWEDetail) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *CWEDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CWEDetail) GetStable() bool {
	if x != nil {
		return x.Stable
	}
	return false
}

func (x *CWEDetail) GetIncomplete() bool {
	if x != nil {
		return x.Incomplete
	}
	return false
}

func (x *CWEDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CWEDetail) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *CWEDetail) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *CWEDetail) GetLongDescriptionZh() string {
	if x != nil {
		return x.LongDescriptionZh
	}
	return ""
}

func (x *CWEDetail) GetRelativeLanguage() []string {
	if x != nil {
		return x.RelativeLanguage
	}
	return nil
}

func (x *CWEDetail) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CWEDetail) GetRelativeCVE() []string {
	if x != nil {
		return x.RelativeCVE
	}
	return nil
}

type CVEDetailEx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CVE           *CVEDetail             `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
	CWE           []*CWEDetail           `protobuf:"bytes,2,rep,name=CWE,proto3" json:"CWE,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVEDetailEx) Reset() {
	*x = CVEDetailEx{}
	mi := &file_yakgrpc_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVEDetailEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEDetailEx) ProtoMessage() {}

func (x *CVEDetailEx) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEDetailEx.ProtoReflect.Descriptor instead.
func (*CVEDetailEx) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{194}
}

func (x *CVEDetailEx) GetCVE() *CVEDetail {
	if x != nil {
		return x.CVE
	}
	return nil
}

func (x *CVEDetailEx) GetCWE() []*CWEDetail {
	if x != nil {
		return x.CWE
	}
	return nil
}

type CVEDetail struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CVE                     string                 `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
	DescriptionZh           string                 `protobuf:"bytes,2,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	DescriptionOrigin       string                 `protobuf:"bytes,3,opt,name=DescriptionOrigin,proto3" json:"DescriptionOrigin,omitempty"`
	Title                   string                 `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Solution                string                 `protobuf:"bytes,5,opt,name=Solution,proto3" json:"Solution,omitempty"`
	References              string                 `protobuf:"bytes,6,opt,name=References,proto3" json:"References,omitempty"`
	AccessVector            string                 `protobuf:"bytes,7,opt,name=AccessVector,proto3" json:"AccessVector,omitempty"`
	AccessComplexity        string                 `protobuf:"bytes,8,opt,name=AccessComplexity,proto3" json:"AccessComplexity,omitempty"`
	Authentication          string                 `protobuf:"bytes,9,opt,name=Authentication,proto3" json:"Authentication,omitempty"`
	ConfidentialityImpact   string                 `protobuf:"bytes,10,opt,name=ConfidentialityImpact,proto3" json:"ConfidentialityImpact,omitempty"`
	IntegrityImpact         string                 `protobuf:"bytes,11,opt,name=IntegrityImpact,proto3" json:"IntegrityImpact,omitempty"`
	AvailabilityImpact      string                 `protobuf:"bytes,12,opt,name=AvailabilityImpact,proto3" json:"AvailabilityImpact,omitempty"`
	Severity                string                 `protobuf:"bytes,14,opt,name=Severity,proto3" json:"Severity,omitempty"`
	PublishedAt             int64                  `protobuf:"varint,15,opt,name=PublishedAt,proto3" json:"PublishedAt,omitempty"`
	CWE                     string                 `protobuf:"bytes,16,opt,name=CWE,proto3" json:"CWE,omitempty"`
	CVSSVersion             string                 `protobuf:"bytes,17,opt,name=CVSSVersion,proto3" json:"CVSSVersion,omitempty"`
	CVSSVectorString        string                 `protobuf:"bytes,18,opt,name=CVSSVectorString,proto3" json:"CVSSVectorString,omitempty"`
	BaseCVSSv2Score         float64                `protobuf:"fixed64,19,opt,name=BaseCVSSv2Score,proto3" json:"BaseCVSSv2Score,omitempty"`
	ExploitabilityScore     float64                `protobuf:"fixed64,20,opt,name=ExploitabilityScore,proto3" json:"ExploitabilityScore,omitempty"`
	ObtainAllPrivileged     bool                   `protobuf:"varint,21,opt,name=ObtainAllPrivileged,proto3" json:"ObtainAllPrivileged,omitempty"`
	ObtainUserPrivileged    bool                   `protobuf:"varint,22,opt,name=ObtainUserPrivileged,proto3" json:"ObtainUserPrivileged,omitempty"`
	ObtainOtherPrivileged   bool                   `protobuf:"varint,23,opt,name=ObtainOtherPrivileged,proto3" json:"ObtainOtherPrivileged,omitempty"`
	UserInteractionRequired bool                   `protobuf:"varint,24,opt,name=UserInteractionRequired,proto3" json:"UserInteractionRequired,omitempty"`
	Product                 string                 `protobuf:"bytes,25,opt,name=Product,proto3" json:"Product,omitempty"`
	UpdatedAt               int64                  `protobuf:"varint,26,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	LastModifiedData        int64                  `protobuf:"varint,27,opt,name=LastModifiedData,proto3" json:"LastModifiedData,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CVEDetail) Reset() {
	*x = CVEDetail{}
	mi := &file_yakgrpc_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVEDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEDetail) ProtoMessage() {}

func (x *CVEDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEDetail.ProtoReflect.Descriptor instead.
func (*CVEDetail) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{195}
}

func (x *CVEDetail) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *CVEDetail) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *CVEDetail) GetDescriptionOrigin() string {
	if x != nil {
		return x.DescriptionOrigin
	}
	return ""
}

func (x *CVEDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CVEDetail) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CVEDetail) GetReferences() string {
	if x != nil {
		return x.References
	}
	return ""
}

func (x *CVEDetail) GetAccessVector() string {
	if x != nil {
		return x.AccessVector
	}
	return ""
}

func (x *CVEDetail) GetAccessComplexity() string {
	if x != nil {
		return x.AccessComplexity
	}
	return ""
}

func (x *CVEDetail) GetAuthentication() string {
	if x != nil {
		return x.Authentication
	}
	return ""
}

func (x *CVEDetail) GetConfidentialityImpact() string {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return ""
}

func (x *CVEDetail) GetIntegrityImpact() string {
	if x != nil {
		return x.IntegrityImpact
	}
	return ""
}

func (x *CVEDetail) GetAvailabilityImpact() string {
	if x != nil {
		return x.AvailabilityImpact
	}
	return ""
}

func (x *CVEDetail) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *CVEDetail) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *CVEDetail) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *CVEDetail) GetCVSSVersion() string {
	if x != nil {
		return x.CVSSVersion
	}
	return ""
}

func (x *CVEDetail) GetCVSSVectorString() string {
	if x != nil {
		return x.CVSSVectorString
	}
	return ""
}

func (x *CVEDetail) GetBaseCVSSv2Score() float64 {
	if x != nil {
		return x.BaseCVSSv2Score
	}
	return 0
}

func (x *CVEDetail) GetExploitabilityScore() float64 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *CVEDetail) GetObtainAllPrivileged() bool {
	if x != nil {
		return x.ObtainAllPrivileged
	}
	return false
}

func (x *CVEDetail) GetObtainUserPrivileged() bool {
	if x != nil {
		return x.ObtainUserPrivileged
	}
	return false
}

func (x *CVEDetail) GetObtainOtherPrivileged() bool {
	if x != nil {
		return x.ObtainOtherPrivileged
	}
	return false
}

func (x *CVEDetail) GetUserInteractionRequired() bool {
	if x != nil {
		return x.UserInteractionRequired
	}
	return false
}

func (x *CVEDetail) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CVEDetail) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CVEDetail) GetLastModifiedData() int64 {
	if x != nil {
		return x.LastModifiedData
	}
	return 0
}

type QueryCVEResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*CVEDetail           `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCVEResponse) Reset() {
	*x = QueryCVEResponse{}
	mi := &file_yakgrpc_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCVEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCVEResponse) ProtoMessage() {}

func (x *QueryCVEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCVEResponse.ProtoReflect.Descriptor instead.
func (*QueryCVEResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{196}
}

func (x *QueryCVEResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryCVEResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCVEResponse) GetData() []*CVEDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type SaveTextToTemporalFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          []byte                 `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveTextToTemporalFileRequest) Reset() {
	*x = SaveTextToTemporalFileRequest{}
	mi := &file_yakgrpc_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveTextToTemporalFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTextToTemporalFileRequest) ProtoMessage() {}

func (x *SaveTextToTemporalFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTextToTemporalFileRequest.ProtoReflect.Descriptor instead.
func (*SaveTextToTemporalFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{197}
}

func (x *SaveTextToTemporalFileRequest) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

type SaveTextToTemporalFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveTextToTemporalFileResponse) Reset() {
	*x = SaveTextToTemporalFileResponse{}
	mi := &file_yakgrpc_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveTextToTemporalFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTextToTemporalFileResponse) ProtoMessage() {}

func (x *SaveTextToTemporalFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTextToTemporalFileResponse.ProtoReflect.Descriptor instead.
func (*SaveTextToTemporalFileResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{198}
}

func (x *SaveTextToTemporalFileResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type ImportChaosMakerRulesRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Content string                 `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	// suricata / http-request / icmp
	RuleType      string `protobuf:"bytes,2,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	AIDecoration  bool   `protobuf:"varint,3,opt,name=AIDecoration,proto3" json:"AIDecoration,omitempty"`
	Domain        string `protobuf:"bytes,4,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Proxy         string `protobuf:"bytes,5,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	Key           string `protobuf:"bytes,6,opt,name=Key,proto3" json:"Key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportChaosMakerRulesRequest) Reset() {
	*x = ImportChaosMakerRulesRequest{}
	mi := &file_yakgrpc_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportChaosMakerRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportChaosMakerRulesRequest) ProtoMessage() {}

func (x *ImportChaosMakerRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportChaosMakerRulesRequest.ProtoReflect.Descriptor instead.
func (*ImportChaosMakerRulesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{199}
}

func (x *ImportChaosMakerRulesRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ImportChaosMakerRulesRequest) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *ImportChaosMakerRulesRequest) GetAIDecoration() bool {
	if x != nil {
		return x.AIDecoration
	}
	return false
}

func (x *ImportChaosMakerRulesRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ImportChaosMakerRulesRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *ImportChaosMakerRulesRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChaosMakerRuleGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Keywords      string                 `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Protocols     []string               `protobuf:"bytes,4,rep,name=Protocols,proto3" json:"Protocols,omitempty"`
	Solution      string                 `protobuf:"bytes,5,opt,name=Solution,proto3" json:"Solution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChaosMakerRuleGroup) Reset() {
	*x = ChaosMakerRuleGroup{}
	mi := &file_yakgrpc_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChaosMakerRuleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosMakerRuleGroup) ProtoMessage() {}

func (x *ChaosMakerRuleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosMakerRuleGroup.ProtoReflect.Descriptor instead.
func (*ChaosMakerRuleGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{200}
}

func (x *ChaosMakerRuleGroup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChaosMakerRuleGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChaosMakerRuleGroup) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ChaosMakerRuleGroup) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *ChaosMakerRuleGroup) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

type IsRemoteAddrAvailableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Timeout       int64                  `protobuf:"varint,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Probe         string                 `protobuf:"bytes,3,opt,name=Probe,proto3" json:"Probe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsRemoteAddrAvailableRequest) Reset() {
	*x = IsRemoteAddrAvailableRequest{}
	mi := &file_yakgrpc_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsRemoteAddrAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRemoteAddrAvailableRequest) ProtoMessage() {}

func (x *IsRemoteAddrAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRemoteAddrAvailableRequest.ProtoReflect.Descriptor instead.
func (*IsRemoteAddrAvailableRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{201}
}

func (x *IsRemoteAddrAvailableRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *IsRemoteAddrAvailableRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *IsRemoteAddrAvailableRequest) GetProbe() string {
	if x != nil {
		return x.Probe
	}
	return ""
}

type IsRemoteAddrAvailableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	IsAvailable   bool                   `protobuf:"varint,2,opt,name=IsAvailable,proto3" json:"IsAvailable,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	PingCount     int64                  `protobuf:"varint,5,opt,name=PingCount,proto3" json:"PingCount,omitempty"`
	RequestCount  int64                  `protobuf:"varint,6,opt,name=RequestCount,proto3" json:"RequestCount,omitempty"`
	LastActiveAt  int64                  `protobuf:"varint,7,opt,name=LastActiveAt,proto3" json:"LastActiveAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsRemoteAddrAvailableResponse) Reset() {
	*x = IsRemoteAddrAvailableResponse{}
	mi := &file_yakgrpc_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsRemoteAddrAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRemoteAddrAvailableResponse) ProtoMessage() {}

func (x *IsRemoteAddrAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRemoteAddrAvailableResponse.ProtoReflect.Descriptor instead.
func (*IsRemoteAddrAvailableResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{202}
}

func (x *IsRemoteAddrAvailableResponse) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *IsRemoteAddrAvailableResponse) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *IsRemoteAddrAvailableResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IsRemoteAddrAvailableResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsRemoteAddrAvailableResponse) GetPingCount() int64 {
	if x != nil {
		return x.PingCount
	}
	return 0
}

func (x *IsRemoteAddrAvailableResponse) GetRequestCount() int64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *IsRemoteAddrAvailableResponse) GetLastActiveAt() int64 {
	if x != nil {
		return x.LastActiveAt
	}
	return 0
}

type ExecuteChaosMakerRuleRequest struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	Groups                          []*ChaosMakerRuleGroup `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	ExtraOverrideDestinationAddress []string               `protobuf:"bytes,2,rep,name=ExtraOverrideDestinationAddress,proto3" json:"ExtraOverrideDestinationAddress,omitempty"`
	// 随机延迟
	Concurrent             int64 `protobuf:"varint,3,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	TrafficDelayMinSeconds int32 `protobuf:"varint,4,opt,name=TrafficDelayMinSeconds,proto3" json:"TrafficDelayMinSeconds,omitempty"`
	TrafficDelayMaxSeconds int32 `protobuf:"varint,5,opt,name=TrafficDelayMaxSeconds,proto3" json:"TrafficDelayMaxSeconds,omitempty"`
	// 额外重复，如果为 -1 认为是永久重复
	ExtraRepeat int64 `protobuf:"varint,6,opt,name=ExtraRepeat,proto3" json:"ExtraRepeat,omitempty"`
	// 每组流量之间重复的次数
	GroupGapSeconds int64 `protobuf:"varint,7,opt,name=GroupGapSeconds,proto3" json:"GroupGapSeconds,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExecuteChaosMakerRuleRequest) Reset() {
	*x = ExecuteChaosMakerRuleRequest{}
	mi := &file_yakgrpc_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteChaosMakerRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteChaosMakerRuleRequest) ProtoMessage() {}

func (x *ExecuteChaosMakerRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteChaosMakerRuleRequest.ProtoReflect.Descriptor instead.
func (*ExecuteChaosMakerRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{203}
}

func (x *ExecuteChaosMakerRuleRequest) GetGroups() []*ChaosMakerRuleGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ExecuteChaosMakerRuleRequest) GetExtraOverrideDestinationAddress() []string {
	if x != nil {
		return x.ExtraOverrideDestinationAddress
	}
	return nil
}

func (x *ExecuteChaosMakerRuleRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetTrafficDelayMinSeconds() int32 {
	if x != nil {
		return x.TrafficDelayMinSeconds
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetTrafficDelayMaxSeconds() int32 {
	if x != nil {
		return x.TrafficDelayMaxSeconds
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetExtraRepeat() int64 {
	if x != nil {
		return x.ExtraRepeat
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetGroupGapSeconds() int64 {
	if x != nil {
		return x.GroupGapSeconds
	}
	return 0
}

type ChaosMakerRule struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	Id                              int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RawTrafficBeyondIpPacketBase64  string                 `protobuf:"bytes,2,opt,name=RawTrafficBeyondIpPacketBase64,proto3" json:"RawTrafficBeyondIpPacketBase64,omitempty"`
	RawTrafficBeyondLinkLayerBase64 string                 `protobuf:"bytes,3,opt,name=RawTrafficBeyondLinkLayerBase64,proto3" json:"RawTrafficBeyondLinkLayerBase64,omitempty"`
	RawTrafficBeyondHttpBase64      string                 `protobuf:"bytes,4,opt,name=RawTrafficBeyondHttpBase64,proto3" json:"RawTrafficBeyondHttpBase64,omitempty"`
	RuleType                        string                 `protobuf:"bytes,5,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	SuricataRaw                     string                 `protobuf:"bytes,6,opt,name=SuricataRaw,proto3" json:"SuricataRaw,omitempty"`
	Protocol                        string                 `protobuf:"bytes,7,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Action                          string                 `protobuf:"bytes,8,opt,name=Action,proto3" json:"Action,omitempty"`
	Name                            string                 `protobuf:"bytes,9,opt,name=Name,proto3" json:"Name,omitempty"`
	NameZh                          string                 `protobuf:"bytes,10,opt,name=NameZh,proto3" json:"NameZh,omitempty"`
	ClassType                       string                 `protobuf:"bytes,11,opt,name=ClassType,proto3" json:"ClassType,omitempty"`
	ClassTypeZh                     string                 `protobuf:"bytes,12,opt,name=ClassTypeZh,proto3" json:"ClassTypeZh,omitempty"`
	Group                           string                 `protobuf:"bytes,13,opt,name=Group,proto3" json:"Group,omitempty"`
	Keywords                        string                 `protobuf:"bytes,15,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	KeywordsZh                      string                 `protobuf:"bytes,16,opt,name=KeywordsZh,proto3" json:"KeywordsZh,omitempty"`
	Description                     string                 `protobuf:"bytes,17,opt,name=Description,proto3" json:"Description,omitempty"`
	DescriptionZh                   string                 `protobuf:"bytes,18,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	CVE                             []string               `protobuf:"bytes,19,rep,name=CVE,proto3" json:"CVE,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ChaosMakerRule) Reset() {
	*x = ChaosMakerRule{}
	mi := &file_yakgrpc_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChaosMakerRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosMakerRule) ProtoMessage() {}

func (x *ChaosMakerRule) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosMakerRule.ProtoReflect.Descriptor instead.
func (*ChaosMakerRule) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{204}
}

func (x *ChaosMakerRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChaosMakerRule) GetRawTrafficBeyondIpPacketBase64() string {
	if x != nil {
		return x.RawTrafficBeyondIpPacketBase64
	}
	return ""
}

func (x *ChaosMakerRule) GetRawTrafficBeyondLinkLayerBase64() string {
	if x != nil {
		return x.RawTrafficBeyondLinkLayerBase64
	}
	return ""
}

func (x *ChaosMakerRule) GetRawTrafficBeyondHttpBase64() string {
	if x != nil {
		return x.RawTrafficBeyondHttpBase64
	}
	return ""
}

func (x *ChaosMakerRule) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *ChaosMakerRule) GetSuricataRaw() string {
	if x != nil {
		return x.SuricataRaw
	}
	return ""
}

func (x *ChaosMakerRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ChaosMakerRule) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ChaosMakerRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChaosMakerRule) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *ChaosMakerRule) GetClassType() string {
	if x != nil {
		return x.ClassType
	}
	return ""
}

func (x *ChaosMakerRule) GetClassTypeZh() string {
	if x != nil {
		return x.ClassTypeZh
	}
	return ""
}

func (x *ChaosMakerRule) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ChaosMakerRule) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ChaosMakerRule) GetKeywordsZh() string {
	if x != nil {
		return x.KeywordsZh
	}
	return ""
}

func (x *ChaosMakerRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChaosMakerRule) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *ChaosMakerRule) GetCVE() []string {
	if x != nil {
		return x.CVE
	}
	return nil
}

type QueryChaosMakerRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*ChaosMakerRule      `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryChaosMakerRuleResponse) Reset() {
	*x = QueryChaosMakerRuleResponse{}
	mi := &file_yakgrpc_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryChaosMakerRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaosMakerRuleResponse) ProtoMessage() {}

func (x *QueryChaosMakerRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaosMakerRuleResponse.ProtoReflect.Descriptor instead.
func (*QueryChaosMakerRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{205}
}

func (x *QueryChaosMakerRuleResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryChaosMakerRuleResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryChaosMakerRuleResponse) GetData() []*ChaosMakerRule {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteChaosMakerRuleByIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChaosMakerRuleByIDRequest) Reset() {
	*x = DeleteChaosMakerRuleByIDRequest{}
	mi := &file_yakgrpc_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChaosMakerRuleByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChaosMakerRuleByIDRequest) ProtoMessage() {}

func (x *DeleteChaosMakerRuleByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChaosMakerRuleByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteChaosMakerRuleByIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{206}
}

func (x *DeleteChaosMakerRuleByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryChaosMakerRuleRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Pagination *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	RuleType   string                 `protobuf:"bytes,2,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	Keywords   []string               `protobuf:"bytes,3,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	// offset
	FromId        int64 `protobuf:"varint,4,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId       int64 `protobuf:"varint,5,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryChaosMakerRuleRequest) Reset() {
	*x = QueryChaosMakerRuleRequest{}
	mi := &file_yakgrpc_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryChaosMakerRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaosMakerRuleRequest) ProtoMessage() {}

func (x *QueryChaosMakerRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaosMakerRuleRequest.ProtoReflect.Descriptor instead.
func (*QueryChaosMakerRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{207}
}

func (x *QueryChaosMakerRuleRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryChaosMakerRuleRequest) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *QueryChaosMakerRuleRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *QueryChaosMakerRuleRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryChaosMakerRuleRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

type ImportsProfileDatabaseRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LocalProfileFile string                 `protobuf:"bytes,1,opt,name=LocalProfileFile,proto3" json:"LocalProfileFile,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ImportsProfileDatabaseRequest) Reset() {
	*x = ImportsProfileDatabaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportsProfileDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportsProfileDatabaseRequest) ProtoMessage() {}

func (x *ImportsProfileDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportsProfileDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ImportsProfileDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{208}
}

func (x *ImportsProfileDatabaseRequest) GetLocalProfileFile() string {
	if x != nil {
		return x.LocalProfileFile
	}
	return ""
}

type ExportsProfileDatabaseRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LocalProfileFile string                 `protobuf:"bytes,1,opt,name=LocalProfileFile,proto3" json:"LocalProfileFile,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExportsProfileDatabaseRequest) Reset() {
	*x = ExportsProfileDatabaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportsProfileDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportsProfileDatabaseRequest) ProtoMessage() {}

func (x *ExportsProfileDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportsProfileDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ExportsProfileDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{209}
}

func (x *ExportsProfileDatabaseRequest) GetLocalProfileFile() string {
	if x != nil {
		return x.LocalProfileFile
	}
	return ""
}

type UpdateCVEDatabaseRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Proxy               string                 `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	JustUpdateLatestCVE bool                   `protobuf:"varint,2,opt,name=JustUpdateLatestCVE,proto3" json:"JustUpdateLatestCVE,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateCVEDatabaseRequest) Reset() {
	*x = UpdateCVEDatabaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCVEDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCVEDatabaseRequest) ProtoMessage() {}

func (x *UpdateCVEDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCVEDatabaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCVEDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{210}
}

func (x *UpdateCVEDatabaseRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateCVEDatabaseRequest) GetJustUpdateLatestCVE() bool {
	if x != nil {
		return x.JustUpdateLatestCVE
	}
	return false
}

type IsCVEDatabaseReadyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	ShouldUpdate  bool                   `protobuf:"varint,3,opt,name=ShouldUpdate,proto3" json:"ShouldUpdate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsCVEDatabaseReadyResponse) Reset() {
	*x = IsCVEDatabaseReadyResponse{}
	mi := &file_yakgrpc_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCVEDatabaseReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCVEDatabaseReadyResponse) ProtoMessage() {}

func (x *IsCVEDatabaseReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCVEDatabaseReadyResponse.ProtoReflect.Descriptor instead.
func (*IsCVEDatabaseReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{211}
}

func (x *IsCVEDatabaseReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsCVEDatabaseReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IsCVEDatabaseReadyResponse) GetShouldUpdate() bool {
	if x != nil {
		return x.ShouldUpdate
	}
	return false
}

type IsCVEDatabaseReadyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsCVEDatabaseReadyRequest) Reset() {
	*x = IsCVEDatabaseReadyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCVEDatabaseReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCVEDatabaseReadyRequest) ProtoMessage() {}

func (x *IsCVEDatabaseReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCVEDatabaseReadyRequest.ProtoReflect.Descriptor instead.
func (*IsCVEDatabaseReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{212}
}

type MITMRuleExtractedData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt      int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	SourceType     string                 `protobuf:"bytes,3,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	TraceId        string                 `protobuf:"bytes,4,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Regexp         string                 `protobuf:"bytes,5,opt,name=Regexp,proto3" json:"Regexp,omitempty"`
	RuleName       string                 `protobuf:"bytes,6,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Data           string                 `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
	Index          int64                  `protobuf:"varint,8,opt,name=Index,proto3" json:"Index,omitempty"`
	Length         int64                  `protobuf:"varint,9,opt,name=Length,proto3" json:"Length,omitempty"`
	IsMatchRequest bool                   `protobuf:"varint,10,opt,name=IsMatchRequest,proto3" json:"IsMatchRequest,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MITMRuleExtractedData) Reset() {
	*x = MITMRuleExtractedData{}
	mi := &file_yakgrpc_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MITMRuleExtractedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMRuleExtractedData) ProtoMessage() {}

func (x *MITMRuleExtractedData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMRuleExtractedData.ProtoReflect.Descriptor instead.
func (*MITMRuleExtractedData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{213}
}

func (x *MITMRuleExtractedData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MITMRuleExtractedData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MITMRuleExtractedData) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *MITMRuleExtractedData) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *MITMRuleExtractedData) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

func (x *MITMRuleExtractedData) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *MITMRuleExtractedData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *MITMRuleExtractedData) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MITMRuleExtractedData) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *MITMRuleExtractedData) GetIsMatchRequest() bool {
	if x != nil {
		return x.IsMatchRequest
	}
	return false
}

type QueryMITMRuleExtractedDataResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Data          []*MITMRuleExtractedData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                    `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Pagination    *Paging                  `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryMITMRuleExtractedDataResponse) Reset() {
	*x = QueryMITMRuleExtractedDataResponse{}
	mi := &file_yakgrpc_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMITMRuleExtractedDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMITMRuleExtractedDataResponse) ProtoMessage() {}

func (x *QueryMITMRuleExtractedDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMITMRuleExtractedDataResponse.ProtoReflect.Descriptor instead.
func (*QueryMITMRuleExtractedDataResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{214}
}

func (x *QueryMITMRuleExtractedDataResponse) GetData() []*MITMRuleExtractedData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryMITMRuleExtractedDataResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryMITMRuleExtractedDataResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryMITMRuleExtractedDataRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Pagination          *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	HTTPFlowHash        string                 `protobuf:"bytes,2,opt,name=HTTPFlowHash,proto3" json:"HTTPFlowHash,omitempty"`
	HTTPFlowHiddenIndex string                 `protobuf:"bytes,3,opt,name=HTTPFlowHiddenIndex,proto3" json:"HTTPFlowHiddenIndex,omitempty"`
	Filter              *ExtractedDataFilter   `protobuf:"bytes,4,opt,name=Filter,proto3" json:"Filter,omitempty"`
	OnlyName            bool                   `protobuf:"varint,5,opt,name=OnlyName,proto3" json:"OnlyName,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QueryMITMRuleExtractedDataRequest) Reset() {
	*x = QueryMITMRuleExtractedDataRequest{}
	mi := &file_yakgrpc_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMITMRuleExtractedDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMITMRuleExtractedDataRequest) ProtoMessage() {}

func (x *QueryMITMRuleExtractedDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMITMRuleExtractedDataRequest.ProtoReflect.Descriptor instead.
func (*QueryMITMRuleExtractedDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{215}
}

func (x *QueryMITMRuleExtractedDataRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryMITMRuleExtractedDataRequest) GetHTTPFlowHash() string {
	if x != nil {
		return x.HTTPFlowHash
	}
	return ""
}

func (x *QueryMITMRuleExtractedDataRequest) GetHTTPFlowHiddenIndex() string {
	if x != nil {
		return x.HTTPFlowHiddenIndex
	}
	return ""
}

func (x *QueryMITMRuleExtractedDataRequest) GetFilter() *ExtractedDataFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryMITMRuleExtractedDataRequest) GetOnlyName() bool {
	if x != nil {
		return x.OnlyName
	}
	return false
}

type ExtractedDataFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceID       []string               `protobuf:"bytes,1,rep,name=TraceID,proto3" json:"TraceID,omitempty"`
	RuleVerbose   []string               `protobuf:"bytes,2,rep,name=RuleVerbose,proto3" json:"RuleVerbose,omitempty"`
	AnalyzedIds   []int64                `protobuf:"varint,3,rep,packed,name=AnalyzedIds,proto3" json:"AnalyzedIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractedDataFilter) Reset() {
	*x = ExtractedDataFilter{}
	mi := &file_yakgrpc_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractedDataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractedDataFilter) ProtoMessage() {}

func (x *ExtractedDataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractedDataFilter.ProtoReflect.Descriptor instead.
func (*ExtractedDataFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{216}
}

func (x *ExtractedDataFilter) GetTraceID() []string {
	if x != nil {
		return x.TraceID
	}
	return nil
}

func (x *ExtractedDataFilter) GetRuleVerbose() []string {
	if x != nil {
		return x.RuleVerbose
	}
	return nil
}

func (x *ExtractedDataFilter) GetAnalyzedIds() []int64 {
	if x != nil {
		return x.AnalyzedIds
	}
	return nil
}

type ExportMITMRuleExtractedDataRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Filter         *ExtractedDataFilter   `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ExportFilePath string                 `protobuf:"bytes,2,opt,name=ExportFilePath,proto3" json:"ExportFilePath,omitempty"`
	Type           string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"` // csv/json 默认为csv
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExportMITMRuleExtractedDataRequest) Reset() {
	*x = ExportMITMRuleExtractedDataRequest{}
	mi := &file_yakgrpc_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMITMRuleExtractedDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMITMRuleExtractedDataRequest) ProtoMessage() {}

func (x *ExportMITMRuleExtractedDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMITMRuleExtractedDataRequest.ProtoReflect.Descriptor instead.
func (*ExportMITMRuleExtractedDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{217}
}

func (x *ExportMITMRuleExtractedDataRequest) GetFilter() *ExtractedDataFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExportMITMRuleExtractedDataRequest) GetExportFilePath() string {
	if x != nil {
		return x.ExportFilePath
	}
	return ""
}

func (x *ExportMITMRuleExtractedDataRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ExportMITMRuleExtractedDataResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ExportFilePath string                 `protobuf:"bytes,1,opt,name=ExportFilePath,proto3" json:"ExportFilePath,omitempty"`
	Percent        float64                `protobuf:"fixed64,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	Verbose        string                 `protobuf:"bytes,4,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExportMITMRuleExtractedDataResponse) Reset() {
	*x = ExportMITMRuleExtractedDataResponse{}
	mi := &file_yakgrpc_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMITMRuleExtractedDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMITMRuleExtractedDataResponse) ProtoMessage() {}

func (x *ExportMITMRuleExtractedDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMITMRuleExtractedDataResponse.ProtoReflect.Descriptor instead.
func (*ExportMITMRuleExtractedDataResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{218}
}

func (x *ExportMITMRuleExtractedDataResponse) GetExportFilePath() string {
	if x != nil {
		return x.ExportFilePath
	}
	return ""
}

func (x *ExportMITMRuleExtractedDataResponse) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ExportMITMRuleExtractedDataResponse) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type ExportProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Id            int64                  `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportProjectRequest) Reset() {
	*x = ExportProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportProjectRequest) ProtoMessage() {}

func (x *ExportProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportProjectRequest.ProtoReflect.Descriptor instead.
func (*ExportProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{219}
}

func (x *ExportProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ExportProjectRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ExportProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProjectIOProgress struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TargetPath string                 `protobuf:"bytes,1,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
	// 如果未完成，这个是百分比 0-1.0
	Percent float64 `protobuf:"fixed64,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	// 展示的提示语，可能是中断原因或者错误原因之类的
	Verbose       string `protobuf:"bytes,4,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectIOProgress) Reset() {
	*x = ProjectIOProgress{}
	mi := &file_yakgrpc_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectIOProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectIOProgress) ProtoMessage() {}

func (x *ProjectIOProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectIOProgress.ProtoReflect.Descriptor instead.
func (*ProjectIOProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{220}
}

func (x *ProjectIOProgress) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

func (x *ProjectIOProgress) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ProjectIOProgress) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type ImportProjectRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LocalProjectName string                 `protobuf:"bytes,1,opt,name=LocalProjectName,proto3" json:"LocalProjectName,omitempty"`
	ProjectFilePath  string                 `protobuf:"bytes,2,opt,name=ProjectFilePath,proto3" json:"ProjectFilePath,omitempty"`
	Password         string                 `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	FolderId         int64                  `protobuf:"varint,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId    int64                  `protobuf:"varint,5,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type             string                 `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"` // "project"(yakit) | "ssa_project"(irify)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ImportProjectRequest) Reset() {
	*x = ImportProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProjectRequest) ProtoMessage() {}

func (x *ImportProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProjectRequest.ProtoReflect.Descriptor instead.
func (*ImportProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{221}
}

func (x *ImportProjectRequest) GetLocalProjectName() string {
	if x != nil {
		return x.LocalProjectName
	}
	return ""
}

func (x *ImportProjectRequest) GetProjectFilePath() string {
	if x != nil {
		return x.ProjectFilePath
	}
	return ""
}

func (x *ImportProjectRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ImportProjectRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ImportProjectRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *ImportProjectRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type IsPrivilegedForNetRawResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsPrivileged  bool                   `protobuf:"varint,1,opt,name=IsPrivileged,proto3" json:"IsPrivileged,omitempty"`
	Advice        string                 `protobuf:"bytes,2,opt,name=Advice,proto3" json:"Advice,omitempty"`
	AdviceVerbose string                 `protobuf:"bytes,3,opt,name=AdviceVerbose,proto3" json:"AdviceVerbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsPrivilegedForNetRawResponse) Reset() {
	*x = IsPrivilegedForNetRawResponse{}
	mi := &file_yakgrpc_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsPrivilegedForNetRawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPrivilegedForNetRawResponse) ProtoMessage() {}

func (x *IsPrivilegedForNetRawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPrivilegedForNetRawResponse.ProtoReflect.Descriptor instead.
func (*IsPrivilegedForNetRawResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{222}
}

func (x *IsPrivilegedForNetRawResponse) GetIsPrivileged() bool {
	if x != nil {
		return x.IsPrivileged
	}
	return false
}

func (x *IsPrivilegedForNetRawResponse) GetAdvice() string {
	if x != nil {
		return x.Advice
	}
	return ""
}

func (x *IsPrivilegedForNetRawResponse) GetAdviceVerbose() string {
	if x != nil {
		return x.AdviceVerbose
	}
	return ""
}

type RemoveProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveProjectRequest) Reset() {
	*x = RemoveProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveProjectRequest) ProtoMessage() {}

func (x *RemoveProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveProjectRequest.ProtoReflect.Descriptor instead.
func (*RemoveProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{223}
}

func (x *RemoveProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type IsProjectNameValidRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	FolderId      int64                  `protobuf:"varint,2,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId int64                  `protobuf:"varint,3,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type          string                 `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsProjectNameValidRequest) Reset() {
	*x = IsProjectNameValidRequest{}
	mi := &file_yakgrpc_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsProjectNameValidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsProjectNameValidRequest) ProtoMessage() {}

func (x *IsProjectNameValidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsProjectNameValidRequest.ProtoReflect.Descriptor instead.
func (*IsProjectNameValidRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{224}
}

func (x *IsProjectNameValidRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *IsProjectNameValidRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *IsProjectNameValidRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *IsProjectNameValidRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type NewProjectRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ProjectName         string                 `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Description         string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	FolderId            int64                  `protobuf:"varint,3,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId       int64                  `protobuf:"varint,4,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type                string                 `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	Id                  int64                  `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	Database            string                 `protobuf:"bytes,7,opt,name=Database,proto3" json:"Database,omitempty"`
	ExternalModule      string                 `protobuf:"bytes,8,opt,name=ExternalModule,proto3" json:"ExternalModule,omitempty"`
	ExternalProjectCode string                 `protobuf:"bytes,9,opt,name=ExternalProjectCode,proto3" json:"ExternalProjectCode,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NewProjectRequest) Reset() {
	*x = NewProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProjectRequest) ProtoMessage() {}

func (x *NewProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProjectRequest.ProtoReflect.Descriptor instead.
func (*NewProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{225}
}

func (x *NewProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *NewProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewProjectRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *NewProjectRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *NewProjectRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewProjectRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *NewProjectRequest) GetExternalModule() string {
	if x != nil {
		return x.ExternalModule
	}
	return ""
}

func (x *NewProjectRequest) GetExternalProjectCode() string {
	if x != nil {
		return x.ExternalProjectCode
	}
	return ""
}

type NewProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProjectName   string                 `protobuf:"bytes,2,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewProjectResponse) Reset() {
	*x = NewProjectResponse{}
	mi := &file_yakgrpc_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProjectResponse) ProtoMessage() {}

func (x *NewProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProjectResponse.ProtoReflect.Descriptor instead.
func (*NewProjectResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{226}
}

func (x *NewProjectResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewProjectResponse) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type GetProjectsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	FolderId      int64                  `protobuf:"varint,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId int64                  `protobuf:"varint,5,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	// this type is filter ""(all) | "project"(yakit) | file(only-folder) | "ssa_project"(irify)
	Type string `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`
	// this type effect response.ProjectTotal, this type mark kind of frontend
	// "project"(yakit) | "ssa_project"(irify)
	FrontendType        string `protobuf:"bytes,7,opt,name=FrontendType,proto3" json:"FrontendType,omitempty"`
	AfterUpdatedAt      int64  `protobuf:"varint,8,opt,name=AfterUpdatedAt,proto3" json:"AfterUpdatedAt,omitempty"`
	ExternalModule      string `protobuf:"bytes,9,opt,name=ExternalModule,proto3" json:"ExternalModule,omitempty"`
	ExternalProjectCode string `protobuf:"bytes,10,opt,name=ExternalProjectCode,proto3" json:"ExternalProjectCode,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetProjectsRequest) Reset() {
	*x = GetProjectsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsRequest) ProtoMessage() {}

func (x *GetProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsRequest.ProtoReflect.Descriptor instead.
func (*GetProjectsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{227}
}

func (x *GetProjectsRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GetProjectsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetProjectsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProjectsRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *GetProjectsRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *GetProjectsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetProjectsRequest) GetFrontendType() string {
	if x != nil {
		return x.FrontendType
	}
	return ""
}

func (x *GetProjectsRequest) GetAfterUpdatedAt() int64 {
	if x != nil {
		return x.AfterUpdatedAt
	}
	return 0
}

func (x *GetProjectsRequest) GetExternalModule() string {
	if x != nil {
		return x.ExternalModule
	}
	return ""
}

func (x *GetProjectsRequest) GetExternalProjectCode() string {
	if x != nil {
		return x.ExternalProjectCode
	}
	return ""
}

type ProjectDescription struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	ProjectName  string                 `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Description  string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Id           int64                  `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	DatabasePath string                 `protobuf:"bytes,4,opt,name=DatabasePath,proto3" json:"DatabasePath,omitempty"`
	// 创建时间
	CreatedAt           int64  `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	FolderId            int64  `protobuf:"varint,6,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId       int64  `protobuf:"varint,7,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type                string `protobuf:"bytes,8,opt,name=Type,proto3" json:"Type,omitempty"`
	UpdateAt            int64  `protobuf:"varint,9,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	FolderName          string `protobuf:"bytes,10,opt,name=FolderName,proto3" json:"FolderName,omitempty"`
	ChildFolderName     string `protobuf:"bytes,11,opt,name=ChildFolderName,proto3" json:"ChildFolderName,omitempty"`
	FileSize            string `protobuf:"bytes,12,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	ExternalModule      string `protobuf:"bytes,13,opt,name=ExternalModule,proto3" json:"ExternalModule,omitempty"`
	ExternalProjectCode string `protobuf:"bytes,14,opt,name=ExternalProjectCode,proto3" json:"ExternalProjectCode,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProjectDescription) Reset() {
	*x = ProjectDescription{}
	mi := &file_yakgrpc_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDescription) ProtoMessage() {}

func (x *ProjectDescription) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDescription.ProtoReflect.Descriptor instead.
func (*ProjectDescription) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{228}
}

func (x *ProjectDescription) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProjectDescription) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectDescription) GetDatabasePath() string {
	if x != nil {
		return x.DatabasePath
	}
	return ""
}

func (x *ProjectDescription) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProjectDescription) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ProjectDescription) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *ProjectDescription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProjectDescription) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *ProjectDescription) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

func (x *ProjectDescription) GetChildFolderName() string {
	if x != nil {
		return x.ChildFolderName
	}
	return ""
}

func (x *ProjectDescription) GetFileSize() string {
	if x != nil {
		return x.FileSize
	}
	return ""
}

func (x *ProjectDescription) GetExternalModule() string {
	if x != nil {
		return x.ExternalModule
	}
	return ""
}

func (x *ProjectDescription) GetExternalProjectCode() string {
	if x != nil {
		return x.ExternalProjectCode
	}
	return ""
}

type GetProjectsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Projects      []*ProjectDescription  `protobuf:"bytes,1,rep,name=Projects,proto3" json:"Projects,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage     int64                  `protobuf:"varint,4,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
	ProjectToTal  int64                  `protobuf:"varint,9,opt,name=ProjectToTal,proto3" json:"ProjectToTal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectsResponse) Reset() {
	*x = GetProjectsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsResponse) ProtoMessage() {}

func (x *GetProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsResponse.ProtoReflect.Descriptor instead.
func (*GetProjectsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{229}
}

func (x *GetProjectsResponse) GetProjects() []*ProjectDescription {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *GetProjectsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProjectsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetProjectsResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetProjectsResponse) GetProjectToTal() int64 {
	if x != nil {
		return x.ProjectToTal
	}
	return 0
}

type SetCurrentProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ProjectName
	ProjectName   string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Id            int64  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Type          string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"` // "project"(yakit) | "ssa_project"(irify)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCurrentProjectRequest) Reset() {
	*x = SetCurrentProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCurrentProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCurrentProjectRequest) ProtoMessage() {}

func (x *SetCurrentProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCurrentProjectRequest.ProtoReflect.Descriptor instead.
func (*SetCurrentProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{230}
}

func (x *SetCurrentProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *SetCurrentProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetCurrentProjectRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetCurrentProjectExRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"` // "project"(yakit) | "ssa_project"(irify)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrentProjectExRequest) Reset() {
	*x = GetCurrentProjectExRequest{}
	mi := &file_yakgrpc_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentProjectExRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentProjectExRequest) ProtoMessage() {}

func (x *GetCurrentProjectExRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentProjectExRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentProjectExRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{231}
}

func (x *GetCurrentProjectExRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IsDeleteLocal bool                   `protobuf:"varint,2,opt,name=IsDeleteLocal,proto3" json:"IsDeleteLocal,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"` // "project"(yakit) | "ssa_project"(irify)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{232}
}

func (x *DeleteProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteProjectRequest) GetIsDeleteLocal() bool {
	if x != nil {
		return x.IsDeleteLocal
	}
	return false
}

func (x *DeleteProjectRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetDefaultProjectExRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"` // "project"(yakit) | "ssa_project"(irify)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDefaultProjectExRequest) Reset() {
	*x = GetDefaultProjectExRequest{}
	mi := &file_yakgrpc_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDefaultProjectExRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultProjectExRequest) ProtoMessage() {}

func (x *GetDefaultProjectExRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultProjectExRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultProjectExRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{233}
}

func (x *GetDefaultProjectExRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type QueryProjectDetailRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProjectDetailRequest) Reset() {
	*x = QueryProjectDetailRequest{}
	mi := &file_yakgrpc_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProjectDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProjectDetailRequest) ProtoMessage() {}

func (x *QueryProjectDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProjectDetailRequest.ProtoReflect.Descriptor instead.
func (*QueryProjectDetailRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{234}
}

func (x *QueryProjectDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTemporaryProjectExRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"` // "project"(yakit) | "ssa_project"(irify)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTemporaryProjectExRequest) Reset() {
	*x = GetTemporaryProjectExRequest{}
	mi := &file_yakgrpc_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTemporaryProjectExRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemporaryProjectExRequest) ProtoMessage() {}

func (x *GetTemporaryProjectExRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemporaryProjectExRequest.ProtoReflect.Descriptor instead.
func (*GetTemporaryProjectExRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{235}
}

func (x *GetTemporaryProjectExRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AttachCombinedOutputRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachCombinedOutputRequest) Reset() {
	*x = AttachCombinedOutputRequest{}
	mi := &file_yakgrpc_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachCombinedOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachCombinedOutputRequest) ProtoMessage() {}

func (x *AttachCombinedOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachCombinedOutputRequest.ProtoReflect.Descriptor instead.
func (*AttachCombinedOutputRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{236}
}

type YaklangShellRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         string                 `protobuf:"bytes,1,opt,name=Input,proto3" json:"Input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangShellRequest) Reset() {
	*x = YaklangShellRequest{}
	mi := &file_yakgrpc_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangShellRequest) ProtoMessage() {}

func (x *YaklangShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangShellRequest.ProtoReflect.Descriptor instead.
func (*YaklangShellRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{237}
}

func (x *YaklangShellRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type YaklangShellKVPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	ValueVerbose  string                 `protobuf:"bytes,3,opt,name=ValueVerbose,proto3" json:"ValueVerbose,omitempty"`
	SymbolId      int64                  `protobuf:"varint,4,opt,name=SymbolId,proto3" json:"SymbolId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangShellKVPair) Reset() {
	*x = YaklangShellKVPair{}
	mi := &file_yakgrpc_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangShellKVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangShellKVPair) ProtoMessage() {}

func (x *YaklangShellKVPair) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangShellKVPair.ProtoReflect.Descriptor instead.
func (*YaklangShellKVPair) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{238}
}

func (x *YaklangShellKVPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YaklangShellKVPair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *YaklangShellKVPair) GetValueVerbose() string {
	if x != nil {
		return x.ValueVerbose
	}
	return ""
}

func (x *YaklangShellKVPair) GetSymbolId() int64 {
	if x != nil {
		return x.SymbolId
	}
	return 0
}

type YaklangShellResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawResult     *ExecResult            `protobuf:"bytes,1,opt,name=RawResult,proto3" json:"RawResult,omitempty"`
	Scope         []*YaklangShellKVPair  `protobuf:"bytes,2,rep,name=Scope,proto3" json:"Scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangShellResponse) Reset() {
	*x = YaklangShellResponse{}
	mi := &file_yakgrpc_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangShellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangShellResponse) ProtoMessage() {}

func (x *YaklangShellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangShellResponse.ProtoReflect.Descriptor instead.
func (*YaklangShellResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{239}
}

func (x *YaklangShellResponse) GetRawResult() *ExecResult {
	if x != nil {
		return x.RawResult
	}
	return nil
}

func (x *YaklangShellResponse) GetScope() []*YaklangShellKVPair {
	if x != nil {
		return x.Scope
	}
	return nil
}

type ResetAndInvalidUserDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetAndInvalidUserDataRequest) Reset() {
	*x = ResetAndInvalidUserDataRequest{}
	mi := &file_yakgrpc_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetAndInvalidUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetAndInvalidUserDataRequest) ProtoMessage() {}

func (x *ResetAndInvalidUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetAndInvalidUserDataRequest.ProtoReflect.Descriptor instead.
func (*ResetAndInvalidUserDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{240}
}

type RegisterFacadesHTTPRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 这个优先级比较高，如果有这个的话，他的响应应该像是
	// /_yakit/history/<id>
	HTTPFlowID int64 `protobuf:"varint,1,opt,name=HTTPFlowID,proto3" json:"HTTPFlowID,omitempty"`
	// 散装 HTTPFlow
	HTTPResponse  []byte `protobuf:"bytes,2,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	Url           string `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterFacadesHTTPRequest) Reset() {
	*x = RegisterFacadesHTTPRequest{}
	mi := &file_yakgrpc_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterFacadesHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFacadesHTTPRequest) ProtoMessage() {}

func (x *RegisterFacadesHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFacadesHTTPRequest.ProtoReflect.Descriptor instead.
func (*RegisterFacadesHTTPRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{241}
}

func (x *RegisterFacadesHTTPRequest) GetHTTPFlowID() int64 {
	if x != nil {
		return x.HTTPFlowID
	}
	return 0
}

func (x *RegisterFacadesHTTPRequest) GetHTTPResponse() []byte {
	if x != nil {
		return x.HTTPResponse
	}
	return nil
}

func (x *RegisterFacadesHTTPRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type RegisterFacadesHTTPResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// http(s)://localhost:<facadesport>/...
	FacadesUrl    string `protobuf:"bytes,1,opt,name=FacadesUrl,proto3" json:"FacadesUrl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterFacadesHTTPResponse) Reset() {
	*x = RegisterFacadesHTTPResponse{}
	mi := &file_yakgrpc_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterFacadesHTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFacadesHTTPResponse) ProtoMessage() {}

func (x *RegisterFacadesHTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFacadesHTTPResponse.ProtoReflect.Descriptor instead.
func (*RegisterFacadesHTTPResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{242}
}

func (x *RegisterFacadesHTTPResponse) GetFacadesUrl() string {
	if x != nil {
		return x.FacadesUrl
	}
	return ""
}

type GetHTTPPacketBodyRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Packet             string                 `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	PacketRaw          []byte                 `protobuf:"bytes,2,opt,name=PacketRaw,proto3" json:"PacketRaw,omitempty"`
	ForceRenderFuzztag bool                   `protobuf:"varint,3,opt,name=ForceRenderFuzztag,proto3" json:"ForceRenderFuzztag,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetHTTPPacketBodyRequest) Reset() {
	*x = GetHTTPPacketBodyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHTTPPacketBodyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPPacketBodyRequest) ProtoMessage() {}

func (x *GetHTTPPacketBodyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPPacketBodyRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPPacketBodyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{243}
}

func (x *GetHTTPPacketBodyRequest) GetPacket() string {
	if x != nil {
		return x.Packet
	}
	return ""
}

func (x *GetHTTPPacketBodyRequest) GetPacketRaw() []byte {
	if x != nil {
		return x.PacketRaw
	}
	return nil
}

func (x *GetHTTPPacketBodyRequest) GetForceRenderFuzztag() bool {
	if x != nil {
		return x.ForceRenderFuzztag
	}
	return false
}

type DownloadBodyByHTTPFlowIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadBodyByHTTPFlowIDRequest) Reset() {
	*x = DownloadBodyByHTTPFlowIDRequest{}
	mi := &file_yakgrpc_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadBodyByHTTPFlowIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBodyByHTTPFlowIDRequest) ProtoMessage() {}

func (x *DownloadBodyByHTTPFlowIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBodyByHTTPFlowIDRequest.ProtoReflect.Descriptor instead.
func (*DownloadBodyByHTTPFlowIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{244}
}

func (x *DownloadBodyByHTTPFlowIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Bytes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Raw           []byte                 `protobuf:"bytes,1,opt,name=Raw,proto3" json:"Raw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	mi := &file_yakgrpc_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{245}
}

func (x *Bytes) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type ExtractDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Extracted     []byte                 `protobuf:"bytes,2,opt,name=Extracted,proto3" json:"Extracted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractDataResponse) Reset() {
	*x = ExtractDataResponse{}
	mi := &file_yakgrpc_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataResponse) ProtoMessage() {}

func (x *ExtractDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataResponse.ProtoReflect.Descriptor instead.
func (*ExtractDataResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{246}
}

func (x *ExtractDataResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExtractDataResponse) GetExtracted() []byte {
	if x != nil {
		return x.Extracted
	}
	return nil
}

type SaveFuzzerLabelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*FuzzerLabel         `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveFuzzerLabelRequest) Reset() {
	*x = SaveFuzzerLabelRequest{}
	mi := &file_yakgrpc_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveFuzzerLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFuzzerLabelRequest) ProtoMessage() {}

func (x *SaveFuzzerLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFuzzerLabelRequest.ProtoReflect.Descriptor instead.
func (*SaveFuzzerLabelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{247}
}

func (x *SaveFuzzerLabelRequest) GetData() []*FuzzerLabel {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryFuzzerLabelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*FuzzerLabel         `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFuzzerLabelResponse) Reset() {
	*x = QueryFuzzerLabelResponse{}
	mi := &file_yakgrpc_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFuzzerLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFuzzerLabelResponse) ProtoMessage() {}

func (x *QueryFuzzerLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFuzzerLabelResponse.ProtoReflect.Descriptor instead.
func (*QueryFuzzerLabelResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{248}
}

func (x *QueryFuzzerLabelResponse) GetData() []*FuzzerLabel {
	if x != nil {
		return x.Data
	}
	return nil
}

type FuzzerLabel struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Label              string                 `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	DefaultDescription string                 `protobuf:"bytes,4,opt,name=DefaultDescription,proto3" json:"DefaultDescription,omitempty"`
	Hash               string                 `protobuf:"bytes,5,opt,name=Hash,proto3" json:"Hash,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FuzzerLabel) Reset() {
	*x = FuzzerLabel{}
	mi := &file_yakgrpc_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzerLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerLabel) ProtoMessage() {}

func (x *FuzzerLabel) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerLabel.ProtoReflect.Descriptor instead.
func (*FuzzerLabel) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{249}
}

func (x *FuzzerLabel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FuzzerLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FuzzerLabel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FuzzerLabel) GetDefaultDescription() string {
	if x != nil {
		return x.DefaultDescription
	}
	return ""
}

func (x *FuzzerLabel) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type DeleteFuzzerLabelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFuzzerLabelRequest) Reset() {
	*x = DeleteFuzzerLabelRequest{}
	mi := &file_yakgrpc_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFuzzerLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFuzzerLabelRequest) ProtoMessage() {}

func (x *DeleteFuzzerLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFuzzerLabelRequest.ProtoReflect.Descriptor instead.
func (*DeleteFuzzerLabelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{250}
}

func (x *DeleteFuzzerLabelRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type SaveFuzzerConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*FuzzerConfig        `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveFuzzerConfigRequest) Reset() {
	*x = SaveFuzzerConfigRequest{}
	mi := &file_yakgrpc_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveFuzzerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFuzzerConfigRequest) ProtoMessage() {}

func (x *SaveFuzzerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFuzzerConfigRequest.ProtoReflect.Descriptor instead.
func (*SaveFuzzerConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{251}
}

func (x *SaveFuzzerConfigRequest) GetData() []*FuzzerConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryFuzzerConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	PageId        []string               `protobuf:"bytes,2,rep,name=PageId,proto3" json:"PageId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFuzzerConfigRequest) Reset() {
	*x = QueryFuzzerConfigRequest{}
	mi := &file_yakgrpc_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFuzzerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFuzzerConfigRequest) ProtoMessage() {}

func (x *QueryFuzzerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFuzzerConfigRequest.ProtoReflect.Descriptor instead.
func (*QueryFuzzerConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{252}
}

func (x *QueryFuzzerConfigRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryFuzzerConfigRequest) GetPageId() []string {
	if x != nil {
		return x.PageId
	}
	return nil
}

type QueryFuzzerConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*FuzzerConfig        `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFuzzerConfigResponse) Reset() {
	*x = QueryFuzzerConfigResponse{}
	mi := &file_yakgrpc_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFuzzerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFuzzerConfigResponse) ProtoMessage() {}

func (x *QueryFuzzerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFuzzerConfigResponse.ProtoReflect.Descriptor instead.
func (*QueryFuzzerConfigResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{253}
}

func (x *QueryFuzzerConfigResponse) GetData() []*FuzzerConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type FuzzerConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageId        string                 `protobuf:"bytes,1,opt,name=PageId,proto3" json:"PageId,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Config        string                 `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzzerConfig) Reset() {
	*x = FuzzerConfig{}
	mi := &file_yakgrpc_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerConfig) ProtoMessage() {}

func (x *FuzzerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerConfig.ProtoReflect.Descriptor instead.
func (*FuzzerConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{254}
}

func (x *FuzzerConfig) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *FuzzerConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FuzzerConfig) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type DeleteFuzzerConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageId        []string               `protobuf:"bytes,1,rep,name=PageId,proto3" json:"PageId,omitempty"`
	DeleteAll     bool                   `protobuf:"varint,2,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFuzzerConfigRequest) Reset() {
	*x = DeleteFuzzerConfigRequest{}
	mi := &file_yakgrpc_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFuzzerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFuzzerConfigRequest) ProtoMessage() {}

func (x *DeleteFuzzerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFuzzerConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteFuzzerConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{255}
}

func (x *DeleteFuzzerConfigRequest) GetPageId() []string {
	if x != nil {
		return x.PageId
	}
	return nil
}

func (x *DeleteFuzzerConfigRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

type ExtractDataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Data  []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	// regexp mode -> regexp between 模式
	Mode string `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	// 根据前后缀提取
	PrefixRegexp string `protobuf:"bytes,3,opt,name=PrefixRegexp,proto3" json:"PrefixRegexp,omitempty"`
	SuffixRegexp string `protobuf:"bytes,4,opt,name=SuffixRegexp,proto3" json:"SuffixRegexp,omitempty"`
	// 根据一个正则提取
	MatchRegexp string `protobuf:"bytes,5,opt,name=MatchRegexp,proto3" json:"MatchRegexp,omitempty"`
	// Token 用来标注这个数据是谁的，一般可以用来处理提取的数据
	Token string `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	// 如果不再有数据了，设置这个 flag
	End           bool `protobuf:"varint,7,opt,name=End,proto3" json:"End,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractDataRequest) Reset() {
	*x = ExtractDataRequest{}
	mi := &file_yakgrpc_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataRequest) ProtoMessage() {}

func (x *ExtractDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataRequest.ProtoReflect.Descriptor instead.
func (*ExtractDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{256}
}

func (x *ExtractDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtractDataRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ExtractDataRequest) GetPrefixRegexp() string {
	if x != nil {
		return x.PrefixRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetSuffixRegexp() string {
	if x != nil {
		return x.SuffixRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetMatchRegexp() string {
	if x != nil {
		return x.MatchRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExtractDataRequest) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

type GenerateExtractRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要提取规则的样例数据
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	// 选择的文本
	Selected []byte `protobuf:"bytes,2,opt,name=Selected,proto3" json:"Selected,omitempty"`
	// 选择前后缀的偏移量
	OffsetSize    int64 `protobuf:"varint,3,opt,name=OffsetSize,proto3" json:"OffsetSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateExtractRuleRequest) Reset() {
	*x = GenerateExtractRuleRequest{}
	mi := &file_yakgrpc_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateExtractRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateExtractRuleRequest) ProtoMessage() {}

func (x *GenerateExtractRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateExtractRuleRequest.ProtoReflect.Descriptor instead.
func (*GenerateExtractRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{257}
}

func (x *GenerateExtractRuleRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GenerateExtractRuleRequest) GetSelected() []byte {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *GenerateExtractRuleRequest) GetOffsetSize() int64 {
	if x != nil {
		return x.OffsetSize
	}
	return 0
}

type GenerateExtractRuleResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PrefixRegexp   string                 `protobuf:"bytes,1,opt,name=PrefixRegexp,proto3" json:"PrefixRegexp,omitempty"`
	SuffixRegexp   string                 `protobuf:"bytes,2,opt,name=SuffixRegexp,proto3" json:"SuffixRegexp,omitempty"`
	SelectedRegexp string                 `protobuf:"bytes,3,opt,name=SelectedRegexp,proto3" json:"SelectedRegexp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenerateExtractRuleResponse) Reset() {
	*x = GenerateExtractRuleResponse{}
	mi := &file_yakgrpc_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateExtractRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateExtractRuleResponse) ProtoMessage() {}

func (x *GenerateExtractRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateExtractRuleResponse.ProtoReflect.Descriptor instead.
func (*GenerateExtractRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{258}
}

func (x *GenerateExtractRuleResponse) GetPrefixRegexp() string {
	if x != nil {
		return x.PrefixRegexp
	}
	return ""
}

func (x *GenerateExtractRuleResponse) GetSuffixRegexp() string {
	if x != nil {
		return x.SuffixRegexp
	}
	return ""
}

func (x *GenerateExtractRuleResponse) GetSelectedRegexp() string {
	if x != nil {
		return x.SelectedRegexp
	}
	return ""
}

type GetMachineIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MachineID     string                 `protobuf:"bytes,1,opt,name=MachineID,proto3" json:"MachineID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMachineIDResponse) Reset() {
	*x = GetMachineIDResponse{}
	mi := &file_yakgrpc_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMachineIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineIDResponse) ProtoMessage() {}

func (x *GetMachineIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineIDResponse.ProtoReflect.Descriptor instead.
func (*GetMachineIDResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{259}
}

func (x *GetMachineIDResponse) GetMachineID() string {
	if x != nil {
		return x.MachineID
	}
	return ""
}

type QueryHTTPFuzzerResponseByTaskIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用来索引对应的请求
	TaskId           int64  `protobuf:"varint,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	FuzzRequestToken string `protobuf:"bytes,2,opt,name=FuzzRequestToken,proto3" json:"FuzzRequestToken,omitempty"`
	// 上一个请求的时间戳
	LastResponseTimestamp int64   `protobuf:"varint,3,opt,name=LastResponseTimestamp,proto3" json:"LastResponseTimestamp,omitempty"`
	Pagination            *Paging `protobuf:"bytes,4,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) Reset() {
	*x = QueryHTTPFuzzerResponseByTaskIdRequest{}
	mi := &file_yakgrpc_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFuzzerResponseByTaskIdRequest) ProtoMessage() {}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFuzzerResponseByTaskIdRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFuzzerResponseByTaskIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{260}
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetFuzzRequestToken() string {
	if x != nil {
		return x.FuzzRequestToken
	}
	return ""
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetLastResponseTimestamp() int64 {
	if x != nil {
		return x.LastResponseTimestamp
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryHTTPFuzzerResponseByTaskIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*FuzzerResponse      `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage     int64                  `protobuf:"varint,4,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) Reset() {
	*x = QueryHTTPFuzzerResponseByTaskIdResponse{}
	mi := &file_yakgrpc_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFuzzerResponseByTaskIdResponse) ProtoMessage() {}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFuzzerResponseByTaskIdResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFuzzerResponseByTaskIdResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{261}
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetData() []*FuzzerResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

type QueryWebsocketFlowByHTTPFlowWebsocketHashRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	WebsocketRequestHash string                 `protobuf:"bytes,1,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
	Pagination           *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) Reset() {
	*x = QueryWebsocketFlowByHTTPFlowWebsocketHashRequest{}
	mi := &file_yakgrpc_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoMessage() {}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWebsocketFlowByHTTPFlowWebsocketHashRequest.ProtoReflect.Descriptor instead.
func (*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{262}
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	WebsocketRequestHash string                 `protobuf:"bytes,1,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) Reset() {
	*x = DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest{}
	mi := &file_yakgrpc_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoMessage() {}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{263}
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

type ClientWebsocketRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IsTLS          bool                   `protobuf:"varint,1,opt,name=IsTLS,proto3" json:"IsTLS,omitempty"`
	UpgradeRequest []byte                 `protobuf:"bytes,2,opt,name=UpgradeRequest,proto3" json:"UpgradeRequest,omitempty"`
	// 要发送到服务器的请求
	ToServer []byte   `protobuf:"bytes,3,opt,name=ToServer,proto3" json:"ToServer,omitempty"`
	Encode   []string `protobuf:"bytes,4,rep,name=Encode,proto3" json:"Encode,omitempty"`
	// 是否允许 fuzz 标签渲染，然后发送
	AllowToFuzz         bool   `protobuf:"varint,5,opt,name=AllowToFuzz,proto3" json:"AllowToFuzz,omitempty"`
	TotalTimeoutSeconds int64  `protobuf:"varint,6,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	Proxy               string `protobuf:"bytes,7,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ClientWebsocketRequest) Reset() {
	*x = ClientWebsocketRequest{}
	mi := &file_yakgrpc_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebsocketRequest) ProtoMessage() {}

func (x *ClientWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebsocketRequest.ProtoReflect.Descriptor instead.
func (*ClientWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{264}
}

func (x *ClientWebsocketRequest) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

func (x *ClientWebsocketRequest) GetUpgradeRequest() []byte {
	if x != nil {
		return x.UpgradeRequest
	}
	return nil
}

func (x *ClientWebsocketRequest) GetToServer() []byte {
	if x != nil {
		return x.ToServer
	}
	return nil
}

func (x *ClientWebsocketRequest) GetEncode() []string {
	if x != nil {
		return x.Encode
	}
	return nil
}

func (x *ClientWebsocketRequest) GetAllowToFuzz() bool {
	if x != nil {
		return x.AllowToFuzz
	}
	return false
}

func (x *ClientWebsocketRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ClientWebsocketRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type ClientWebsocketResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 切换协议是否成功
	SwitchProtocolSucceeded bool `protobuf:"varint,2,opt,name=SwitchProtocolSucceeded,proto3" json:"SwitchProtocolSucceeded,omitempty"`
	// 是 Websocket 数据帧吗？
	IsDataFrame bool `protobuf:"varint,1,opt,name=IsDataFrame,proto3" json:"IsDataFrame,omitempty"`
	// 服务器端返回还是？
	FromServer bool `protobuf:"varint,4,opt,name=FromServer,proto3" json:"FromServer,omitempty"`
	// 编码是啥样的？
	GuessEncode []string `protobuf:"bytes,5,rep,name=GuessEncode,proto3" json:"GuessEncode,omitempty"`
	// 其他状态，以及出现问题的原因
	StatusVerbose string `protobuf:"bytes,6,opt,name=StatusVerbose,proto3" json:"StatusVerbose,omitempty"`
	ReasonVerbose string `protobuf:"bytes,7,opt,name=ReasonVerbose,proto3" json:"ReasonVerbose,omitempty"`
	// DataLength
	DataLength     int64  `protobuf:"varint,8,opt,name=DataLength,proto3" json:"DataLength,omitempty"`
	Data           []byte `protobuf:"bytes,9,opt,name=Data,proto3" json:"Data,omitempty"`
	IsJson         bool   `protobuf:"varint,10,opt,name=IsJson,proto3" json:"IsJson,omitempty"`
	IsProtobuf     bool   `protobuf:"varint,11,opt,name=IsProtobuf,proto3" json:"IsProtobuf,omitempty"`
	DataFrameIndex int64  `protobuf:"varint,12,opt,name=DataFrameIndex,proto3" json:"DataFrameIndex,omitempty"`
	WebsocketHash  string `protobuf:"bytes,13,opt,name=WebsocketHash,proto3" json:"WebsocketHash,omitempty"`
	// 设置大小
	DataSizeVerbose string `protobuf:"bytes,14,opt,name=DataSizeVerbose,proto3" json:"DataSizeVerbose,omitempty"`
	DataVerbose     string `protobuf:"bytes,15,opt,name=DataVerbose,proto3" json:"DataVerbose,omitempty"`
	// 升级
	IsUpgradeResponse bool   `protobuf:"varint,16,opt,name=IsUpgradeResponse,proto3" json:"IsUpgradeResponse,omitempty"`
	UpgradeResponse   []byte `protobuf:"bytes,17,opt,name=UpgradeResponse,proto3" json:"UpgradeResponse,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClientWebsocketResponse) Reset() {
	*x = ClientWebsocketResponse{}
	mi := &file_yakgrpc_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientWebsocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebsocketResponse) ProtoMessage() {}

func (x *ClientWebsocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebsocketResponse.ProtoReflect.Descriptor instead.
func (*ClientWebsocketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{265}
}

func (x *ClientWebsocketResponse) GetSwitchProtocolSucceeded() bool {
	if x != nil {
		return x.SwitchProtocolSucceeded
	}
	return false
}

func (x *ClientWebsocketResponse) GetIsDataFrame() bool {
	if x != nil {
		return x.IsDataFrame
	}
	return false
}

func (x *ClientWebsocketResponse) GetFromServer() bool {
	if x != nil {
		return x.FromServer
	}
	return false
}

func (x *ClientWebsocketResponse) GetGuessEncode() []string {
	if x != nil {
		return x.GuessEncode
	}
	return nil
}

func (x *ClientWebsocketResponse) GetStatusVerbose() string {
	if x != nil {
		return x.StatusVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetReasonVerbose() string {
	if x != nil {
		return x.ReasonVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataLength() int64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *ClientWebsocketResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClientWebsocketResponse) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *ClientWebsocketResponse) GetIsProtobuf() bool {
	if x != nil {
		return x.IsProtobuf
	}
	return false
}

func (x *ClientWebsocketResponse) GetDataFrameIndex() int64 {
	if x != nil {
		return x.DataFrameIndex
	}
	return 0
}

func (x *ClientWebsocketResponse) GetWebsocketHash() string {
	if x != nil {
		return x.WebsocketHash
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataSizeVerbose() string {
	if x != nil {
		return x.DataSizeVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataVerbose() string {
	if x != nil {
		return x.DataVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetIsUpgradeResponse() bool {
	if x != nil {
		return x.IsUpgradeResponse
	}
	return false
}

func (x *ClientWebsocketResponse) GetUpgradeResponse() []byte {
	if x != nil {
		return x.UpgradeResponse
	}
	return nil
}

type DefaultProxyResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proxy         string                 `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultProxyResult) Reset() {
	*x = DefaultProxyResult{}
	mi := &file_yakgrpc_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultProxyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultProxyResult) ProtoMessage() {}

func (x *DefaultProxyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultProxyResult.ProtoReflect.Descriptor instead.
func (*DefaultProxyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{266}
}

func (x *DefaultProxyResult) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type ExecPacketScanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 选择 HTTPFlow 进行扫描
	HTTPFlow    []int64 `protobuf:"varint,1,rep,packed,name=HTTPFlow,proto3" json:"HTTPFlow,omitempty"`
	HTTPRequest []byte  `protobuf:"bytes,2,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	HTTPS       bool    `protobuf:"varint,3,opt,name=HTTPS,proto3" json:"HTTPS,omitempty"`
	// 允许数据包的 Fuzz 打开
	AllowFuzzTag bool `protobuf:"varint,5,opt,name=AllowFuzzTag,proto3" json:"AllowFuzzTag,omitempty"`
	// 扫描进程总超时
	TotalTimeoutSeconds int64 `protobuf:"varint,6,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	// 默认发包的 Timeout
	Timeout int64 `protobuf:"varint,7,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// 并发
	PluginConcurrent int64 `protobuf:"varint,8,opt,name=PluginConcurrent,proto3" json:"PluginConcurrent,omitempty"`
	PacketConcurrent int64 `protobuf:"varint,9,opt,name=PacketConcurrent,proto3" json:"PacketConcurrent,omitempty"`
	// 插件列表
	PluginList []string `protobuf:"bytes,10,rep,name=PluginList,proto3" json:"PluginList,omitempty"`
	// 设置代理
	Proxy         string `protobuf:"bytes,11,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecPacketScanRequest) Reset() {
	*x = ExecPacketScanRequest{}
	mi := &file_yakgrpc_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecPacketScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecPacketScanRequest) ProtoMessage() {}

func (x *ExecPacketScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecPacketScanRequest.ProtoReflect.Descriptor instead.
func (*ExecPacketScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{267}
}

func (x *ExecPacketScanRequest) GetHTTPFlow() []int64 {
	if x != nil {
		return x.HTTPFlow
	}
	return nil
}

func (x *ExecPacketScanRequest) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

func (x *ExecPacketScanRequest) GetHTTPS() bool {
	if x != nil {
		return x.HTTPS
	}
	return false
}

func (x *ExecPacketScanRequest) GetAllowFuzzTag() bool {
	if x != nil {
		return x.AllowFuzzTag
	}
	return false
}

func (x *ExecPacketScanRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ExecPacketScanRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPluginConcurrent() int64 {
	if x != nil {
		return x.PluginConcurrent
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPacketConcurrent() int64 {
	if x != nil {
		return x.PacketConcurrent
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPluginList() []string {
	if x != nil {
		return x.PluginList
	}
	return nil
}

func (x *ExecPacketScanRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type Range struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	StartLine     int64                  `protobuf:"varint,2,opt,name=StartLine,proto3" json:"StartLine,omitempty"`
	StartColumn   int64                  `protobuf:"varint,3,opt,name=StartColumn,proto3" json:"StartColumn,omitempty"`
	EndLine       int64                  `protobuf:"varint,4,opt,name=EndLine,proto3" json:"EndLine,omitempty"`
	EndColumn     int64                  `protobuf:"varint,5,opt,name=EndColumn,proto3" json:"EndColumn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Range) Reset() {
	*x = Range{}
	mi := &file_yakgrpc_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{268}
}

func (x *Range) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Range) GetStartLine() int64 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Range) GetStartColumn() int64 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *Range) GetEndLine() int64 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *Range) GetEndColumn() int64 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type YaklangInspectInformationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptType string                 `protobuf:"bytes,1,opt,name=YakScriptType,proto3" json:"YakScriptType,omitempty"`
	YakScriptCode string                 `protobuf:"bytes,2,opt,name=YakScriptCode,proto3" json:"YakScriptCode,omitempty"`
	Range         *Range                 `protobuf:"bytes,3,opt,name=Range,proto3" json:"Range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangInspectInformationRequest) Reset() {
	*x = YaklangInspectInformationRequest{}
	mi := &file_yakgrpc_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangInspectInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangInspectInformationRequest) ProtoMessage() {}

func (x *YaklangInspectInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangInspectInformationRequest.ProtoReflect.Descriptor instead.
func (*YaklangInspectInformationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{269}
}

func (x *YaklangInspectInformationRequest) GetYakScriptType() string {
	if x != nil {
		return x.YakScriptType
	}
	return ""
}

func (x *YaklangInspectInformationRequest) GetYakScriptCode() string {
	if x != nil {
		return x.YakScriptCode
	}
	return ""
}

func (x *YaklangInspectInformationRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type YaklangLanguageSuggestionRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	InspectType string                 `protobuf:"bytes,1,opt,name=InspectType,proto3" json:"InspectType,omitempty"` // completion(补全) / hover(提示) / signature(签名) / definition(找定义) / reference(找引用)
	// {
	// from source code : support all InspectType
	YakScriptType string `protobuf:"bytes,2,opt,name=YakScriptType,proto3" json:"YakScriptType,omitempty"`
	YakScriptCode string `protobuf:"bytes,3,opt,name=YakScriptCode,proto3" json:"YakScriptCode,omitempty"` // }
	Range         *Range `protobuf:"bytes,4,opt,name=Range,proto3" json:"Range,omitempty"`                 // selected range
	ModelID       string `protobuf:"bytes,5,opt,name=ModelID,proto3" json:"ModelID,omitempty"`             // monaco model id
	// {
	// from database : support getReference
	// if set this progranName will use this from database
	ProgramName   string `protobuf:"bytes,6,opt,name=ProgramName,proto3" json:"ProgramName,omitempty"`
	FileName      string `protobuf:"bytes,7,opt,name=FileName,proto3" json:"FileName,omitempty"` // }
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangLanguageSuggestionRequest) Reset() {
	*x = YaklangLanguageSuggestionRequest{}
	mi := &file_yakgrpc_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangLanguageSuggestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangLanguageSuggestionRequest) ProtoMessage() {}

func (x *YaklangLanguageSuggestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangLanguageSuggestionRequest.ProtoReflect.Descriptor instead.
func (*YaklangLanguageSuggestionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{270}
}

func (x *YaklangLanguageSuggestionRequest) GetInspectType() string {
	if x != nil {
		return x.InspectType
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetYakScriptType() string {
	if x != nil {
		return x.YakScriptType
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetYakScriptCode() string {
	if x != nil {
		return x.YakScriptCode
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *YaklangLanguageSuggestionRequest) GetModelID() string {
	if x != nil {
		return x.ModelID
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type YaklangInformationKV struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Key           string                  `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         []byte                  `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Extern        []*YaklangInformationKV `protobuf:"bytes,3,rep,name=Extern,proto3" json:"Extern,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangInformationKV) Reset() {
	*x = YaklangInformationKV{}
	mi := &file_yakgrpc_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangInformationKV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangInformationKV) ProtoMessage() {}

func (x *YaklangInformationKV) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangInformationKV.ProtoReflect.Descriptor instead.
func (*YaklangInformationKV) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{271}
}

func (x *YaklangInformationKV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YaklangInformationKV) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *YaklangInformationKV) GetExtern() []*YaklangInformationKV {
	if x != nil {
		return x.Extern
	}
	return nil
}

type YaklangInformation struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Name          string                  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Data          []*YaklangInformationKV `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangInformation) Reset() {
	*x = YaklangInformation{}
	mi := &file_yakgrpc_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangInformation) ProtoMessage() {}

func (x *YaklangInformation) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangInformation.ProtoReflect.Descriptor instead.
func (*YaklangInformation) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{272}
}

func (x *YaklangInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *YaklangInformation) GetData() []*YaklangInformationKV {
	if x != nil {
		return x.Data
	}
	return nil
}

type YaklangLanguageSuggestionResponse struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	SuggestionMessage []*SuggestionDescription `protobuf:"bytes,1,rep,name=SuggestionMessage,proto3" json:"SuggestionMessage,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *YaklangLanguageSuggestionResponse) Reset() {
	*x = YaklangLanguageSuggestionResponse{}
	mi := &file_yakgrpc_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangLanguageSuggestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangLanguageSuggestionResponse) ProtoMessage() {}

func (x *YaklangLanguageSuggestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangLanguageSuggestionResponse.ProtoReflect.Descriptor instead.
func (*YaklangLanguageSuggestionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{273}
}

func (x *YaklangLanguageSuggestionResponse) GetSuggestionMessage() []*SuggestionDescription {
	if x != nil {
		return x.SuggestionMessage
	}
	return nil
}

type YaklangLanguageFindResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	URI           string                 `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
	Ranges        []*Range               `protobuf:"bytes,2,rep,name=Ranges,proto3" json:"Ranges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangLanguageFindResponse) Reset() {
	*x = YaklangLanguageFindResponse{}
	mi := &file_yakgrpc_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangLanguageFindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangLanguageFindResponse) ProtoMessage() {}

func (x *YaklangLanguageFindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangLanguageFindResponse.ProtoReflect.Descriptor instead.
func (*YaklangLanguageFindResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{274}
}

func (x *YaklangLanguageFindResponse) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *YaklangLanguageFindResponse) GetRanges() []*Range {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type YaklangInspectInformationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Information   []*YaklangInformation  `protobuf:"bytes,1,rep,name=Information,proto3" json:"Information,omitempty"`
	CliParameter  []*YakScriptParam      `protobuf:"bytes,2,rep,name=CliParameter,proto3" json:"CliParameter,omitempty"`
	RiskInfo      []*YakRiskInfo         `protobuf:"bytes,3,rep,name=RiskInfo,proto3" json:"RiskInfo,omitempty"`
	UIInfo        []*YakUIInfo           `protobuf:"bytes,4,rep,name=UIInfo,proto3" json:"UIInfo,omitempty"`
	Tags          []string               `protobuf:"bytes,5,rep,name=Tags,proto3" json:"Tags,omitempty"`
	PluginEnvKey  []string               `protobuf:"bytes,6,rep,name=PluginEnvKey,proto3" json:"PluginEnvKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangInspectInformationResponse) Reset() {
	*x = YaklangInspectInformationResponse{}
	mi := &file_yakgrpc_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangInspectInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangInspectInformationResponse) ProtoMessage() {}

func (x *YaklangInspectInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangInspectInformationResponse.ProtoReflect.Descriptor instead.
func (*YaklangInspectInformationResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{275}
}

func (x *YaklangInspectInformationResponse) GetInformation() []*YaklangInformation {
	if x != nil {
		return x.Information
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetCliParameter() []*YakScriptParam {
	if x != nil {
		return x.CliParameter
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetRiskInfo() []*YakRiskInfo {
	if x != nil {
		return x.RiskInfo
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetUIInfo() []*YakUIInfo {
	if x != nil {
		return x.UIInfo
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetPluginEnvKey() []string {
	if x != nil {
		return x.PluginEnvKey
	}
	return nil
}

type YakUIInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Typ            string                 `protobuf:"bytes,1,opt,name=Typ,proto3" json:"Typ,omitempty"`
	Effected       []string               `protobuf:"bytes,2,rep,name=Effected,proto3" json:"Effected,omitempty"`
	WhenExpression string                 `protobuf:"bytes,3,opt,name=WhenExpression,proto3" json:"WhenExpression,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *YakUIInfo) Reset() {
	*x = YakUIInfo{}
	mi := &file_yakgrpc_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakUIInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakUIInfo) ProtoMessage() {}

func (x *YakUIInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakUIInfo.ProtoReflect.Descriptor instead.
func (*YakUIInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{276}
}

func (x *YakUIInfo) GetTyp() string {
	if x != nil {
		return x.Typ
	}
	return ""
}

func (x *YakUIInfo) GetEffected() []string {
	if x != nil {
		return x.Effected
	}
	return nil
}

func (x *YakUIInfo) GetWhenExpression() string {
	if x != nil {
		return x.WhenExpression
	}
	return ""
}

type YakRiskInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         string                 `protobuf:"bytes,1,opt,name=Level,proto3" json:"Level,omitempty"`
	TypeVerbose   string                 `protobuf:"bytes,2,opt,name=TypeVerbose,proto3" json:"TypeVerbose,omitempty"`
	CVE           string                 `protobuf:"bytes,3,opt,name=CVE,proto3" json:"CVE,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Solution      string                 `protobuf:"bytes,5,opt,name=Solution,proto3" json:"Solution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YakRiskInfo) Reset() {
	*x = YakRiskInfo{}
	mi := &file_yakgrpc_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakRiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakRiskInfo) ProtoMessage() {}

func (x *YakRiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakRiskInfo.ProtoReflect.Descriptor instead.
func (*YakRiskInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{277}
}

func (x *YakRiskInfo) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *YakRiskInfo) GetTypeVerbose() string {
	if x != nil {
		return x.TypeVerbose
	}
	return ""
}

func (x *YakRiskInfo) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *YakRiskInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *YakRiskInfo) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

type YaklangGetCliCodeFromDatabaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	NeedHandle    bool                   `protobuf:"varint,2,opt,name=NeedHandle,proto3" json:"NeedHandle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangGetCliCodeFromDatabaseResponse) Reset() {
	*x = YaklangGetCliCodeFromDatabaseResponse{}
	mi := &file_yakgrpc_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangGetCliCodeFromDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangGetCliCodeFromDatabaseResponse) ProtoMessage() {}

func (x *YaklangGetCliCodeFromDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangGetCliCodeFromDatabaseResponse.ProtoReflect.Descriptor instead.
func (*YaklangGetCliCodeFromDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{278}
}

func (x *YaklangGetCliCodeFromDatabaseResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *YaklangGetCliCodeFromDatabaseResponse) GetNeedHandle() bool {
	if x != nil {
		return x.NeedHandle
	}
	return false
}

type YaklangGetCliCodeFromDatabaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptName    string                 `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangGetCliCodeFromDatabaseRequest) Reset() {
	*x = YaklangGetCliCodeFromDatabaseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangGetCliCodeFromDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangGetCliCodeFromDatabaseRequest) ProtoMessage() {}

func (x *YaklangGetCliCodeFromDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangGetCliCodeFromDatabaseRequest.ProtoReflect.Descriptor instead.
func (*YaklangGetCliCodeFromDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{279}
}

func (x *YaklangGetCliCodeFromDatabaseRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

type StaticAnalyzeErrorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          []byte                 `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	PluginType    string                 `protobuf:"bytes,2,opt,name=PluginType,proto3" json:"PluginType,omitempty"` // "yak" "mitm" "port-scan" "codec" "syntaxflow"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StaticAnalyzeErrorRequest) Reset() {
	*x = StaticAnalyzeErrorRequest{}
	mi := &file_yakgrpc_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticAnalyzeErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalyzeErrorRequest) ProtoMessage() {}

func (x *StaticAnalyzeErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalyzeErrorRequest.ProtoReflect.Descriptor instead.
func (*StaticAnalyzeErrorRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{280}
}

func (x *StaticAnalyzeErrorRequest) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *StaticAnalyzeErrorRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

type YaklangCompileAndFormatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangCompileAndFormatRequest) Reset() {
	*x = YaklangCompileAndFormatRequest{}
	mi := &file_yakgrpc_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangCompileAndFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangCompileAndFormatRequest) ProtoMessage() {}

func (x *YaklangCompileAndFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangCompileAndFormatRequest.ProtoReflect.Descriptor instead.
func (*YaklangCompileAndFormatRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{281}
}

func (x *YaklangCompileAndFormatRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type YaklangCompileAndFormatResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Code          string                      `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Errors        []*StaticAnalyzeErrorResult `protobuf:"bytes,2,rep,name=Errors,proto3" json:"Errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YaklangCompileAndFormatResponse) Reset() {
	*x = YaklangCompileAndFormatResponse{}
	mi := &file_yakgrpc_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YaklangCompileAndFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangCompileAndFormatResponse) ProtoMessage() {}

func (x *YaklangCompileAndFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangCompileAndFormatResponse.ProtoReflect.Descriptor instead.
func (*YaklangCompileAndFormatResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{282}
}

func (x *YaklangCompileAndFormatResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *YaklangCompileAndFormatResponse) GetErrors() []*StaticAnalyzeErrorResult {
	if x != nil {
		return x.Errors
	}
	return nil
}

type StaticAnalyzeErrorResult struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Message         []byte                 `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	StartLineNumber int64                  `protobuf:"varint,2,opt,name=StartLineNumber,proto3" json:"StartLineNumber,omitempty"`
	EndLineNumber   int64                  `protobuf:"varint,3,opt,name=EndLineNumber,proto3" json:"EndLineNumber,omitempty"`
	StartColumn     int64                  `protobuf:"varint,4,opt,name=StartColumn,proto3" json:"StartColumn,omitempty"`
	EndColumn       int64                  `protobuf:"varint,5,opt,name=EndColumn,proto3" json:"EndColumn,omitempty"`
	RawMessage      []byte                 `protobuf:"bytes,6,opt,name=RawMessage,proto3" json:"RawMessage,omitempty"`
	Severity        string                 `protobuf:"bytes,7,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Tag             string                 `protobuf:"bytes,8,opt,name=Tag,proto3" json:"Tag,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StaticAnalyzeErrorResult) Reset() {
	*x = StaticAnalyzeErrorResult{}
	mi := &file_yakgrpc_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticAnalyzeErrorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalyzeErrorResult) ProtoMessage() {}

func (x *StaticAnalyzeErrorResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalyzeErrorResult.ProtoReflect.Descriptor instead.
func (*StaticAnalyzeErrorResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{283}
}

func (x *StaticAnalyzeErrorResult) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *StaticAnalyzeErrorResult) GetStartLineNumber() int64 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetEndLineNumber() int64 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetStartColumn() int64 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetEndColumn() int64 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetRawMessage() []byte {
	if x != nil {
		return x.RawMessage
	}
	return nil
}

func (x *StaticAnalyzeErrorResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *StaticAnalyzeErrorResult) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type StaticAnalyzeErrorResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Result        []*StaticAnalyzeErrorResult `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StaticAnalyzeErrorResponse) Reset() {
	*x = StaticAnalyzeErrorResponse{}
	mi := &file_yakgrpc_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticAnalyzeErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalyzeErrorResponse) ProtoMessage() {}

func (x *StaticAnalyzeErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalyzeErrorResponse.ProtoReflect.Descriptor instead.
func (*StaticAnalyzeErrorResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{284}
}

func (x *StaticAnalyzeErrorResponse) GetResult() []*StaticAnalyzeErrorResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type SavePayloadProgress struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Progress            float64                `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`                     // 进度
	HandledBytes        int64                  `protobuf:"varint,2,opt,name=HandledBytes,proto3" json:"HandledBytes,omitempty"`              // old
	HandledBytesVerbose string                 `protobuf:"bytes,3,opt,name=HandledBytesVerbose,proto3" json:"HandledBytesVerbose,omitempty"` // old
	TotalBytes          int64                  `protobuf:"varint,4,opt,name=TotalBytes,proto3" json:"TotalBytes,omitempty"`                  // old
	TotalBytesVerbose   string                 `protobuf:"bytes,5,opt,name=TotalBytesVerbose,proto3" json:"TotalBytesVerbose,omitempty"`     // old
	CostDuration        float64                `protobuf:"fixed64,6,opt,name=CostDuration,proto3" json:"CostDuration,omitempty"`             // old
	CostDurationVerbose string                 `protobuf:"bytes,7,opt,name=CostDurationVerbose,proto3" json:"CostDurationVerbose,omitempty"` // 耗时
	Speed               string                 `protobuf:"bytes,8,opt,name=Speed,proto3" json:"Speed,omitempty"`                             // 速度
	RestDurationVerbose string                 `protobuf:"bytes,9,opt,name=RestDurationVerbose,proto3" json:"RestDurationVerbose,omitempty"` // 剩余时间
	Message             string                 `protobuf:"bytes,10,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SavePayloadProgress) Reset() {
	*x = SavePayloadProgress{}
	mi := &file_yakgrpc_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SavePayloadProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePayloadProgress) ProtoMessage() {}

func (x *SavePayloadProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePayloadProgress.ProtoReflect.Descriptor instead.
func (*SavePayloadProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{285}
}

func (x *SavePayloadProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SavePayloadProgress) GetHandledBytes() int64 {
	if x != nil {
		return x.HandledBytes
	}
	return 0
}

func (x *SavePayloadProgress) GetHandledBytesVerbose() string {
	if x != nil {
		return x.HandledBytesVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *SavePayloadProgress) GetTotalBytesVerbose() string {
	if x != nil {
		return x.TotalBytesVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetCostDuration() float64 {
	if x != nil {
		return x.CostDuration
	}
	return 0
}

func (x *SavePayloadProgress) GetCostDurationVerbose() string {
	if x != nil {
		return x.CostDurationVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetSpeed() string {
	if x != nil {
		return x.Speed
	}
	return ""
}

func (x *SavePayloadProgress) GetRestDurationVerbose() string {
	if x != nil {
		return x.RestDurationVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExportPayloadBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	SavePath      string                 `protobuf:"bytes,2,opt,name=SavePath,proto3" json:"SavePath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportPayloadBatchRequest) Reset() {
	*x = ExportPayloadBatchRequest{}
	mi := &file_yakgrpc_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportPayloadBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPayloadBatchRequest) ProtoMessage() {}

func (x *ExportPayloadBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPayloadBatchRequest.ProtoReflect.Descriptor instead.
func (*ExportPayloadBatchRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{286}
}

func (x *ExportPayloadBatchRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ExportPayloadBatchRequest) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

type UploadPayloadToOnlineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Folder        string                 `protobuf:"bytes,3,opt,name=Folder,proto3" json:"Folder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadPayloadToOnlineRequest) Reset() {
	*x = UploadPayloadToOnlineRequest{}
	mi := &file_yakgrpc_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadPayloadToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPayloadToOnlineRequest) ProtoMessage() {}

func (x *UploadPayloadToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPayloadToOnlineRequest.ProtoReflect.Descriptor instead.
func (*UploadPayloadToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{287}
}

func (x *UploadPayloadToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UploadPayloadToOnlineRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *UploadPayloadToOnlineRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

type DownloadPayloadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Folder        string                 `protobuf:"bytes,3,opt,name=Folder,proto3" json:"Folder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadPayloadRequest) Reset() {
	*x = DownloadPayloadRequest{}
	mi := &file_yakgrpc_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPayloadRequest) ProtoMessage() {}

func (x *DownloadPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPayloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadPayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{288}
}

func (x *DownloadPayloadRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadPayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *DownloadPayloadRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

type DownloadProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      float64                `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType   string                 `protobuf:"bytes,3,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadProgress) Reset() {
	*x = DownloadProgress{}
	mi := &file_yakgrpc_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadProgress) ProtoMessage() {}

func (x *DownloadProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadProgress.ProtoReflect.Descriptor instead.
func (*DownloadProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{289}
}

func (x *DownloadProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DownloadProgress) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DownloadProgress) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type DeletePluginByUserIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OnlineBaseUrl string                 `protobuf:"bytes,2,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePluginByUserIDRequest) Reset() {
	*x = DeletePluginByUserIDRequest{}
	mi := &file_yakgrpc_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePluginByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePluginByUserIDRequest) ProtoMessage() {}

func (x *DeletePluginByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePluginByUserIDRequest.ProtoReflect.Descriptor instead.
func (*DeletePluginByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{290}
}

func (x *DeletePluginByUserIDRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *DeletePluginByUserIDRequest) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

type ExportPayloadDBAndFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []string               `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	SavePath      string                 `protobuf:"bytes,2,opt,name=SavePath,proto3" json:"SavePath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportPayloadDBAndFileRequest) Reset() {
	*x = ExportPayloadDBAndFileRequest{}
	mi := &file_yakgrpc_proto_msgTypes[291]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportPayloadDBAndFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPayloadDBAndFileRequest) ProtoMessage() {}

func (x *ExportPayloadDBAndFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[291]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPayloadDBAndFileRequest.ProtoReflect.Descriptor instead.
func (*ExportPayloadDBAndFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{291}
}

func (x *ExportPayloadDBAndFileRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ExportPayloadDBAndFileRequest) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

type DeleteLocalPluginsByWhereRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keywords      string                 `protobuf:"bytes,1,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	UserId        int64                  `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName      string                 `protobuf:"bytes,4,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Ids           []int64                `protobuf:"varint,5,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Tags          string                 `protobuf:"bytes,6,opt,name=Tags,proto3" json:"Tags,omitempty"`
	Groups        []string               `protobuf:"bytes,7,rep,name=Groups,proto3" json:"Groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLocalPluginsByWhereRequest) Reset() {
	*x = DeleteLocalPluginsByWhereRequest{}
	mi := &file_yakgrpc_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLocalPluginsByWhereRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLocalPluginsByWhereRequest) ProtoMessage() {}

func (x *DeleteLocalPluginsByWhereRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLocalPluginsByWhereRequest.ProtoReflect.Descriptor instead.
func (*DeleteLocalPluginsByWhereRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{292}
}

func (x *DeleteLocalPluginsByWhereRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteLocalPluginsByWhereRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteLocalPluginsByWhereRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type DownloadOnlinePluginProgress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 进度
	Progress      float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Log           string  `protobuf:"bytes,2,opt,name=Log,proto3" json:"Log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadOnlinePluginProgress) Reset() {
	*x = DownloadOnlinePluginProgress{}
	mi := &file_yakgrpc_proto_msgTypes[293]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadOnlinePluginProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginProgress) ProtoMessage() {}

func (x *DownloadOnlinePluginProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[293]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginProgress.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{293}
}

func (x *DownloadOnlinePluginProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DownloadOnlinePluginProgress) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type DownloadOnlinePluginByTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	BindMe        bool                   `protobuf:"varint,2,opt,name=BindMe,proto3" json:"BindMe,omitempty"`
	Keywords      string                 `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	PluginType    string                 `protobuf:"bytes,4,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	IsPrivate     string                 `protobuf:"bytes,6,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	Tags          string                 `protobuf:"bytes,7,opt,name=Tags,proto3" json:"Tags,omitempty"`
	UserName      string                 `protobuf:"bytes,8,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserId        int64                  `protobuf:"varint,9,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TimeSearch    string                 `protobuf:"bytes,10,opt,name=TimeSearch,proto3" json:"TimeSearch,omitempty"`
	Group         string                 `protobuf:"bytes,11,opt,name=Group,proto3" json:"Group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadOnlinePluginByTokenRequest) Reset() {
	*x = DownloadOnlinePluginByTokenRequest{}
	mi := &file_yakgrpc_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadOnlinePluginByTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByTokenRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByTokenRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByTokenRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{294}
}

func (x *DownloadOnlinePluginByTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetBindMe() bool {
	if x != nil {
		return x.BindMe
	}
	return false
}

func (x *DownloadOnlinePluginByTokenRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetIsPrivate() string {
	if x != nil {
		return x.IsPrivate
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DownloadOnlinePluginByTokenRequest) GetTimeSearch() string {
	if x != nil {
		return x.TimeSearch
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type DownloadOnlinePluginByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OnlineID      int64                  `protobuf:"varint,1,opt,name=OnlineID,proto3" json:"OnlineID,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	UUID          string                 `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadOnlinePluginByIdRequest) Reset() {
	*x = DownloadOnlinePluginByIdRequest{}
	mi := &file_yakgrpc_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadOnlinePluginByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByIdRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByIdRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{295}
}

func (x *DownloadOnlinePluginByIdRequest) GetOnlineID() int64 {
	if x != nil {
		return x.OnlineID
	}
	return 0
}

func (x *DownloadOnlinePluginByIdRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginByIdRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type DownloadOnlinePluginByIdsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OnlineIDs     []int64                `protobuf:"varint,1,rep,packed,name=OnlineIDs,proto3" json:"OnlineIDs,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	UUID          []string               `protobuf:"bytes,3,rep,name=UUID,proto3" json:"UUID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadOnlinePluginByIdsRequest) Reset() {
	*x = DownloadOnlinePluginByIdsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadOnlinePluginByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByIdsRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByIdsRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByIdsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{296}
}

func (x *DownloadOnlinePluginByIdsRequest) GetOnlineIDs() []int64 {
	if x != nil {
		return x.OnlineIDs
	}
	return nil
}

func (x *DownloadOnlinePluginByIdsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginByIdsRequest) GetUUID() []string {
	if x != nil {
		return x.UUID
	}
	return nil
}

type DownloadOnlinePluginsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	IsPrivate     []bool                 `protobuf:"varint,2,rep,packed,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	Keywords      string                 `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	PluginType    []string               `protobuf:"bytes,4,rep,name=PluginType,proto3" json:"PluginType,omitempty"`
	Tags          []string               `protobuf:"bytes,5,rep,name=Tags,proto3" json:"Tags,omitempty"`
	UserName      string                 `protobuf:"bytes,6,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserId        int64                  `protobuf:"varint,7,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TimeSearch    string                 `protobuf:"bytes,8,opt,name=TimeSearch,proto3" json:"TimeSearch,omitempty"`
	Group         []string               `protobuf:"bytes,9,rep,name=Group,proto3" json:"Group,omitempty"`
	ListType      string                 `protobuf:"bytes,10,opt,name=ListType,proto3" json:"ListType,omitempty"`
	Status        []int64                `protobuf:"varint,11,rep,packed,name=Status,proto3" json:"Status,omitempty"`
	UUID          []string               `protobuf:"bytes,12,rep,name=UUID,proto3" json:"UUID,omitempty"`
	ScriptName    []string               `protobuf:"bytes,13,rep,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	ExcludeTypes  []string               `protobuf:"bytes,14,rep,name=ExcludeTypes,proto3" json:"ExcludeTypes,omitempty"`
	FieldKeywords string                 `protobuf:"bytes,15,opt,name=FieldKeywords,proto3" json:"FieldKeywords,omitempty"`
	Official      []bool                 `protobuf:"varint,16,rep,packed,name=Official,proto3" json:"Official,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadOnlinePluginsRequest) Reset() {
	*x = DownloadOnlinePluginsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadOnlinePluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginsRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginsRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{297}
}

func (x *DownloadOnlinePluginsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetIsPrivate() []bool {
	if x != nil {
		return x.IsPrivate
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetPluginType() []string {
	if x != nil {
		return x.PluginType
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DownloadOnlinePluginsRequest) GetTimeSearch() string {
	if x != nil {
		return x.TimeSearch
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetListType() string {
	if x != nil {
		return x.ListType
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetStatus() []int64 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetUUID() []string {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetScriptName() []string {
	if x != nil {
		return x.ScriptName
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetExcludeTypes() []string {
	if x != nil {
		return x.ExcludeTypes
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetFieldKeywords() string {
	if x != nil {
		return x.FieldKeywords
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetOfficial() []bool {
	if x != nil {
		return x.Official
	}
	return nil
}

type QueryPluginGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnSetGroup    bool                   `protobuf:"varint,1,opt,name=UnSetGroup,proto3" json:"UnSetGroup,omitempty"`
	Group         []string               `protobuf:"bytes,2,rep,name=Group,proto3" json:"Group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPluginGroup) Reset() {
	*x = QueryPluginGroup{}
	mi := &file_yakgrpc_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPluginGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPluginGroup) ProtoMessage() {}

func (x *QueryPluginGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPluginGroup.ProtoReflect.Descriptor instead.
func (*QueryPluginGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{298}
}

func (x *QueryPluginGroup) GetUnSetGroup() bool {
	if x != nil {
		return x.UnSetGroup
	}
	return false
}

func (x *QueryPluginGroup) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

type DownloadOnlinePluginByScriptNamesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptNames   []string               `protobuf:"bytes,1,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadOnlinePluginByScriptNamesRequest) Reset() {
	*x = DownloadOnlinePluginByScriptNamesRequest{}
	mi := &file_yakgrpc_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadOnlinePluginByScriptNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByScriptNamesRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByScriptNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByScriptNamesRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByScriptNamesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{299}
}

func (x *DownloadOnlinePluginByScriptNamesRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *DownloadOnlinePluginByScriptNamesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DownloadOnlinePluginByScriptNamesResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Data          []*DownloadOnlinePluginByScriptName `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadOnlinePluginByScriptNamesResponse) Reset() {
	*x = DownloadOnlinePluginByScriptNamesResponse{}
	mi := &file_yakgrpc_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadOnlinePluginByScriptNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByScriptNamesResponse) ProtoMessage() {}

func (x *DownloadOnlinePluginByScriptNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByScriptNamesResponse.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByScriptNamesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{300}
}

func (x *DownloadOnlinePluginByScriptNamesResponse) GetData() []*DownloadOnlinePluginByScriptName {
	if x != nil {
		return x.Data
	}
	return nil
}

type DownloadOnlinePluginByScriptName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptName    string                 `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Id            int64                  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	HeadImg       string                 `protobuf:"bytes,3,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadOnlinePluginByScriptName) Reset() {
	*x = DownloadOnlinePluginByScriptName{}
	mi := &file_yakgrpc_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadOnlinePluginByScriptName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByScriptName) ProtoMessage() {}

func (x *DownloadOnlinePluginByScriptName) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByScriptName.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByScriptName) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{301}
}

func (x *DownloadOnlinePluginByScriptName) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *DownloadOnlinePluginByScriptName) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DownloadOnlinePluginByScriptName) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

type DownloadOnlinePluginByUUIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UUID          string                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadOnlinePluginByUUIDRequest) Reset() {
	*x = DownloadOnlinePluginByUUIDRequest{}
	mi := &file_yakgrpc_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadOnlinePluginByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByUUIDRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByUUIDRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{302}
}

func (x *DownloadOnlinePluginByUUIDRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DownloadOnlinePluginByUUIDRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type QueryOnlinePluginsRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Pagination    *Paging                       `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          *DownloadOnlinePluginsRequest `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryOnlinePluginsRequest) Reset() {
	*x = QueryOnlinePluginsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOnlinePluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOnlinePluginsRequest) ProtoMessage() {}

func (x *QueryOnlinePluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOnlinePluginsRequest.ProtoReflect.Descriptor instead.
func (*QueryOnlinePluginsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{303}
}

func (x *QueryOnlinePluginsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryOnlinePluginsRequest) GetData() *DownloadOnlinePluginsRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryOnlinePluginsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*OnlinePlugin        `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryOnlinePluginsResponse) Reset() {
	*x = QueryOnlinePluginsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOnlinePluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOnlinePluginsResponse) ProtoMessage() {}

func (x *QueryOnlinePluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOnlinePluginsResponse.ProtoReflect.Descriptor instead.
func (*QueryOnlinePluginsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{304}
}

func (x *QueryOnlinePluginsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryOnlinePluginsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryOnlinePluginsResponse) GetData() []*OnlinePlugin {
	if x != nil {
		return x.Data
	}
	return nil
}

type OnlinePlugin struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UpdatedAt            int64                  `protobuf:"varint,2,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedAt            int64                  `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Content              string                 `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"`
	Type                 string                 `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	Params               []*YakScriptParam      `protobuf:"bytes,6,rep,name=Params,proto3" json:"Params,omitempty"`
	IsPrivate            bool                   `protobuf:"varint,7,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	ScriptName           string                 `protobuf:"bytes,8,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Help                 string                 `protobuf:"bytes,9,opt,name=Help,proto3" json:"Help,omitempty"`
	Author               string                 `protobuf:"bytes,10,opt,name=Author,proto3" json:"Author,omitempty"`
	Tags                 string                 `protobuf:"bytes,11,opt,name=Tags,proto3" json:"Tags,omitempty"`
	EnablePluginSelector bool                   `protobuf:"varint,12,opt,name=EnablePluginSelector,proto3" json:"EnablePluginSelector,omitempty"`
	PluginSelectorTypes  string                 `protobuf:"bytes,13,opt,name=PluginSelectorTypes,proto3" json:"PluginSelectorTypes,omitempty"`
	UUID                 string                 `protobuf:"bytes,14,opt,name=UUID,proto3" json:"UUID,omitempty"`
	HeadImg              string                 `protobuf:"bytes,15,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	Official             bool                   `protobuf:"varint,16,opt,name=Official,proto3" json:"Official,omitempty"`
	Group                string                 `protobuf:"bytes,17,opt,name=Group,proto3" json:"Group,omitempty"`
	IsCorePlugin         bool                   `protobuf:"varint,18,opt,name=IsCorePlugin,proto3" json:"IsCorePlugin,omitempty"`
	// 协作者
	CollaboratorInfo []*Collaborator `protobuf:"bytes,19,rep,name=CollaboratorInfo,proto3" json:"CollaboratorInfo,omitempty"`
	RiskInfo         []*YakRiskInfo  `protobuf:"bytes,20,rep,name=RiskInfo,proto3" json:"RiskInfo,omitempty"`
	PluginEnvKey     []string        `protobuf:"bytes,21,rep,name=PluginEnvKey,proto3" json:"PluginEnvKey,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OnlinePlugin) Reset() {
	*x = OnlinePlugin{}
	mi := &file_yakgrpc_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnlinePlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlinePlugin) ProtoMessage() {}

func (x *OnlinePlugin) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlinePlugin.ProtoReflect.Descriptor instead.
func (*OnlinePlugin) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{305}
}

func (x *OnlinePlugin) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OnlinePlugin) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *OnlinePlugin) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OnlinePlugin) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OnlinePlugin) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OnlinePlugin) GetParams() []*YakScriptParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *OnlinePlugin) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *OnlinePlugin) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *OnlinePlugin) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *OnlinePlugin) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *OnlinePlugin) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *OnlinePlugin) GetEnablePluginSelector() bool {
	if x != nil {
		return x.EnablePluginSelector
	}
	return false
}

func (x *OnlinePlugin) GetPluginSelectorTypes() string {
	if x != nil {
		return x.PluginSelectorTypes
	}
	return ""
}

func (x *OnlinePlugin) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *OnlinePlugin) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *OnlinePlugin) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *OnlinePlugin) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *OnlinePlugin) GetIsCorePlugin() bool {
	if x != nil {
		return x.IsCorePlugin
	}
	return false
}

func (x *OnlinePlugin) GetCollaboratorInfo() []*Collaborator {
	if x != nil {
		return x.CollaboratorInfo
	}
	return nil
}

func (x *OnlinePlugin) GetRiskInfo() []*YakRiskInfo {
	if x != nil {
		return x.RiskInfo
	}
	return nil
}

func (x *OnlinePlugin) GetPluginEnvKey() []string {
	if x != nil {
		return x.PluginEnvKey
	}
	return nil
}

type OnlineProfile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseUrl       string                 `protobuf:"bytes,1,opt,name=BaseUrl,proto3" json:"BaseUrl,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Proxy         string                 `protobuf:"bytes,3,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	IsCompany     bool                   `protobuf:"varint,4,opt,name=IsCompany,proto3" json:"IsCompany,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnlineProfile) Reset() {
	*x = OnlineProfile{}
	mi := &file_yakgrpc_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnlineProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineProfile) ProtoMessage() {}

func (x *OnlineProfile) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineProfile.ProtoReflect.Descriptor instead.
func (*OnlineProfile) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{306}
}

func (x *OnlineProfile) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *OnlineProfile) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OnlineProfile) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *OnlineProfile) GetIsCompany() bool {
	if x != nil {
		return x.IsCompany
	}
	return false
}

type SetKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	TTL           int64                  `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetKeyRequest) Reset() {
	*x = SetKeyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyRequest) ProtoMessage() {}

func (x *SetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyRequest.ProtoReflect.Descriptor instead.
func (*SetKeyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{307}
}

func (x *SetKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetKeyRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SetKeyRequest) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

type GetKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[308]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[308]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{308}
}

func (x *GetKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetKeyResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyResult) Reset() {
	*x = GetKeyResult{}
	mi := &file_yakgrpc_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyResult) ProtoMessage() {}

func (x *GetKeyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyResult.ProtoReflect.Descriptor instead.
func (*GetKeyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{309}
}

func (x *GetKeyResult) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GeneralStorage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	ExpiredAt     int64                  `protobuf:"varint,3,opt,name=ExpiredAt,proto3" json:"ExpiredAt,omitempty"`
	ProcessEnv    bool                   `protobuf:"varint,4,opt,name=ProcessEnv,proto3" json:"ProcessEnv,omitempty"`
	Verbose       string                 `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Group         string                 `protobuf:"bytes,6,opt,name=Group,proto3" json:"Group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneralStorage) Reset() {
	*x = GeneralStorage{}
	mi := &file_yakgrpc_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneralStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralStorage) ProtoMessage() {}

func (x *GeneralStorage) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralStorage.ProtoReflect.Descriptor instead.
func (*GeneralStorage) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{310}
}

func (x *GeneralStorage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GeneralStorage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GeneralStorage) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *GeneralStorage) GetProcessEnv() bool {
	if x != nil {
		return x.ProcessEnv
	}
	return false
}

func (x *GeneralStorage) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *GeneralStorage) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type GetProcessEnvKeyResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*GeneralStorage      `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessEnvKeyResult) Reset() {
	*x = GetProcessEnvKeyResult{}
	mi := &file_yakgrpc_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessEnvKeyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessEnvKeyResult) ProtoMessage() {}

func (x *GetProcessEnvKeyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessEnvKeyResult.ProtoReflect.Descriptor instead.
func (*GetProcessEnvKeyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{311}
}

func (x *GetProcessEnvKeyResult) GetResults() []*GeneralStorage {
	if x != nil {
		return x.Results
	}
	return nil
}

type SetSystemProxyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HttpProxy     string                 `protobuf:"bytes,1,opt,name=HttpProxy,proto3" json:"HttpProxy,omitempty"`
	Enable        bool                   `protobuf:"varint,2,opt,name=Enable,proto3" json:"Enable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSystemProxyRequest) Reset() {
	*x = SetSystemProxyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[312]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSystemProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemProxyRequest) ProtoMessage() {}

func (x *SetSystemProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[312]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemProxyRequest.ProtoReflect.Descriptor instead.
func (*SetSystemProxyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{312}
}

func (x *SetSystemProxyRequest) GetHttpProxy() string {
	if x != nil {
		return x.HttpProxy
	}
	return ""
}

func (x *SetSystemProxyRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type GetSystemProxyResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrentProxy  string                 `protobuf:"bytes,1,opt,name=CurrentProxy,proto3" json:"CurrentProxy,omitempty"`
	Enable        bool                   `protobuf:"varint,2,opt,name=Enable,proto3" json:"Enable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSystemProxyResult) Reset() {
	*x = GetSystemProxyResult{}
	mi := &file_yakgrpc_proto_msgTypes[313]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemProxyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemProxyResult) ProtoMessage() {}

func (x *GetSystemProxyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[313]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemProxyResult.ProtoReflect.Descriptor instead.
func (*GetSystemProxyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{313}
}

func (x *GetSystemProxyResult) GetCurrentProxy() string {
	if x != nil {
		return x.CurrentProxy
	}
	return ""
}

func (x *GetSystemProxyResult) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

// --- Deprecated interface--
type GetExecBatchYakScriptUnfinishedTaskByUidRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) Reset() {
	*x = GetExecBatchYakScriptUnfinishedTaskByUidRequest{}
	mi := &file_yakgrpc_proto_msgTypes[314]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecBatchYakScriptUnfinishedTaskByUidRequest) ProtoMessage() {}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[314]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecBatchYakScriptUnfinishedTaskByUidRequest.ProtoReflect.Descriptor instead.
func (*GetExecBatchYakScriptUnfinishedTaskByUidRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{314}
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type RecoverExecBatchYakScriptUnfinishedTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) Reset() {
	*x = RecoverExecBatchYakScriptUnfinishedTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[315]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverExecBatchYakScriptUnfinishedTaskRequest) ProtoMessage() {}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[315]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverExecBatchYakScriptUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*RecoverExecBatchYakScriptUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{315}
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type ExecBatchYakScriptUnfinishedTask struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Percent              float64                `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Uid                  string                 `protobuf:"bytes,3,opt,name=Uid,proto3" json:"Uid,omitempty"`
	YakScriptOnlineGroup string                 `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string                 `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ExecBatchYakScriptUnfinishedTask) Reset() {
	*x = ExecBatchYakScriptUnfinishedTask{}
	mi := &file_yakgrpc_proto_msgTypes[316]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecBatchYakScriptUnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptUnfinishedTask) ProtoMessage() {}

func (x *ExecBatchYakScriptUnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[316]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptUnfinishedTask.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptUnfinishedTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{316}
}

func (x *ExecBatchYakScriptUnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ExecBatchYakScriptUnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ExecBatchYakScriptUnfinishedTask) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ExecBatchYakScriptUnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *ExecBatchYakScriptUnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type SimpleDetectUnfinishedTask struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Percent              float64                `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Uid                  string                 `protobuf:"bytes,3,opt,name=Uid,proto3" json:"Uid,omitempty"`
	YakScriptOnlineGroup string                 `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string                 `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	LastRecordPtr        int64                  `protobuf:"varint,6,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SimpleDetectUnfinishedTask) Reset() {
	*x = SimpleDetectUnfinishedTask{}
	mi := &file_yakgrpc_proto_msgTypes[317]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleDetectUnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleDetectUnfinishedTask) ProtoMessage() {}

func (x *SimpleDetectUnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[317]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleDetectUnfinishedTask.ProtoReflect.Descriptor instead.
func (*SimpleDetectUnfinishedTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{317}
}

func (x *SimpleDetectUnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *SimpleDetectUnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SimpleDetectUnfinishedTask) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

type GetExecBatchYakScriptUnfinishedTaskResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Tasks         []*ExecBatchYakScriptUnfinishedTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) Reset() {
	*x = GetExecBatchYakScriptUnfinishedTaskResponse{}
	mi := &file_yakgrpc_proto_msgTypes[318]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecBatchYakScriptUnfinishedTaskResponse) ProtoMessage() {}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[318]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecBatchYakScriptUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*GetExecBatchYakScriptUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{318}
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) GetTasks() []*ExecBatchYakScriptUnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetSimpleDetectUnfinishedTaskResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Tasks         []*SimpleDetectUnfinishedTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSimpleDetectUnfinishedTaskResponse) Reset() {
	*x = GetSimpleDetectUnfinishedTaskResponse{}
	mi := &file_yakgrpc_proto_msgTypes[319]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSimpleDetectUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimpleDetectUnfinishedTaskResponse) ProtoMessage() {}

func (x *GetSimpleDetectUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[319]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimpleDetectUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*GetSimpleDetectUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{319}
}

func (x *GetSimpleDetectUnfinishedTaskResponse) GetTasks() []*SimpleDetectUnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type UnfinishedTaskFilter struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RuntimeId      []string               `protobuf:"bytes,1,rep,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	ProgressSource []string               `protobuf:"bytes,2,rep,name=ProgressSource,proto3" json:"ProgressSource,omitempty"`
	TaskName       string                 `protobuf:"bytes,3,opt,name=TaskName,proto3" json:"TaskName,omitempty"` // support fuzzy search
	Target         string                 `protobuf:"bytes,4,opt,name=Target,proto3" json:"Target,omitempty"`     // support fuzzy search
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UnfinishedTaskFilter) Reset() {
	*x = UnfinishedTaskFilter{}
	mi := &file_yakgrpc_proto_msgTypes[320]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnfinishedTaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfinishedTaskFilter) ProtoMessage() {}

func (x *UnfinishedTaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[320]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfinishedTaskFilter.ProtoReflect.Descriptor instead.
func (*UnfinishedTaskFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{320}
}

func (x *UnfinishedTaskFilter) GetRuntimeId() []string {
	if x != nil {
		return x.RuntimeId
	}
	return nil
}

func (x *UnfinishedTaskFilter) GetProgressSource() []string {
	if x != nil {
		return x.ProgressSource
	}
	return nil
}

func (x *UnfinishedTaskFilter) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UnfinishedTaskFilter) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type QueryUnfinishedTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *UnfinishedTaskFilter  `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryUnfinishedTaskRequest) Reset() {
	*x = QueryUnfinishedTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[321]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUnfinishedTaskRequest) ProtoMessage() {}

func (x *QueryUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[321]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*QueryUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{321}
}

func (x *QueryUnfinishedTaskRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryUnfinishedTaskRequest) GetFilter() *UnfinishedTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DeleteUnfinishedTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *UnfinishedTaskFilter  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUnfinishedTaskRequest) Reset() {
	*x = DeleteUnfinishedTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[322]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUnfinishedTaskRequest) ProtoMessage() {}

func (x *DeleteUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[322]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{322}
}

func (x *DeleteUnfinishedTaskRequest) GetFilter() *UnfinishedTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UnfinishedTask struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Percent              float64                `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	RuntimeId            string                 `protobuf:"bytes,3,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	YakScriptOnlineGroup string                 `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string                 `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	LastRecordPtr        int64                  `protobuf:"varint,6,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
	Target               string                 `protobuf:"bytes,7,opt,name=Target,proto3" json:"Target,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UnfinishedTask) Reset() {
	*x = UnfinishedTask{}
	mi := &file_yakgrpc_proto_msgTypes[323]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfinishedTask) ProtoMessage() {}

func (x *UnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[323]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfinishedTask.ProtoReflect.Descriptor instead.
func (*UnfinishedTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{323}
}

func (x *UnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *UnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UnfinishedTask) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *UnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *UnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UnfinishedTask) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

func (x *UnfinishedTask) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type QueryUnfinishedTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*UnfinishedTask      `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryUnfinishedTaskResponse) Reset() {
	*x = QueryUnfinishedTaskResponse{}
	mi := &file_yakgrpc_proto_msgTypes[324]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUnfinishedTaskResponse) ProtoMessage() {}

func (x *QueryUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[324]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*QueryUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{324}
}

func (x *QueryUnfinishedTaskResponse) GetTasks() []*UnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *QueryUnfinishedTaskResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryUnfinishedTaskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetUnfinishedTaskDetailByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuntimeId     string                 `protobuf:"bytes,1,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUnfinishedTaskDetailByIdRequest) Reset() {
	*x = GetUnfinishedTaskDetailByIdRequest{}
	mi := &file_yakgrpc_proto_msgTypes[325]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnfinishedTaskDetailByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnfinishedTaskDetailByIdRequest) ProtoMessage() {}

func (x *GetUnfinishedTaskDetailByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[325]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnfinishedTaskDetailByIdRequest.ProtoReflect.Descriptor instead.
func (*GetUnfinishedTaskDetailByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{325}
}

func (x *GetUnfinishedTaskDetailByIdRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type RecoverUnfinishedTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuntimeId     string                 `protobuf:"bytes,1,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecoverUnfinishedTaskRequest) Reset() {
	*x = RecoverUnfinishedTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[326]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverUnfinishedTaskRequest) ProtoMessage() {}

func (x *RecoverUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[326]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*RecoverUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{326}
}

func (x *RecoverUnfinishedTaskRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type FixUploadPacketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       []byte                 `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixUploadPacketRequest) Reset() {
	*x = FixUploadPacketRequest{}
	mi := &file_yakgrpc_proto_msgTypes[327]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixUploadPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixUploadPacketRequest) ProtoMessage() {}

func (x *FixUploadPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[327]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixUploadPacketRequest.ProtoReflect.Descriptor instead.
func (*FixUploadPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{327}
}

func (x *FixUploadPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type FixUploadPacketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       []byte                 `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixUploadPacketResponse) Reset() {
	*x = FixUploadPacketResponse{}
	mi := &file_yakgrpc_proto_msgTypes[328]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixUploadPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixUploadPacketResponse) ProtoMessage() {}

func (x *FixUploadPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[328]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixUploadPacketResponse.ProtoReflect.Descriptor instead.
func (*FixUploadPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{328}
}

func (x *FixUploadPacketResponse) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type IsMultipartFormDataRequestResult struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IsMultipartFormData bool                   `protobuf:"varint,1,opt,name=IsMultipartFormData,proto3" json:"IsMultipartFormData,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *IsMultipartFormDataRequestResult) Reset() {
	*x = IsMultipartFormDataRequestResult{}
	mi := &file_yakgrpc_proto_msgTypes[329]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsMultipartFormDataRequestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMultipartFormDataRequestResult) ProtoMessage() {}

func (x *IsMultipartFormDataRequestResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[329]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMultipartFormDataRequestResult.ProtoReflect.Descriptor instead.
func (*IsMultipartFormDataRequestResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{329}
}

func (x *IsMultipartFormDataRequestResult) GetIsMultipartFormData() bool {
	if x != nil {
		return x.IsMultipartFormData
	}
	return false
}

type AutoDecodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          string                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	ModifyResult  []*AutoDecodeResult    `protobuf:"bytes,2,rep,name=ModifyResult,proto3" json:"ModifyResult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoDecodeRequest) Reset() {
	*x = AutoDecodeRequest{}
	mi := &file_yakgrpc_proto_msgTypes[330]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoDecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDecodeRequest) ProtoMessage() {}

func (x *AutoDecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[330]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDecodeRequest.ProtoReflect.Descriptor instead.
func (*AutoDecodeRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{330}
}

func (x *AutoDecodeRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *AutoDecodeRequest) GetModifyResult() []*AutoDecodeResult {
	if x != nil {
		return x.ModifyResult
	}
	return nil
}

type AutoDecodeResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	TypeVerbose   string                 `protobuf:"bytes,2,opt,name=TypeVerbose,proto3" json:"TypeVerbose,omitempty"`
	Origin        []byte                 `protobuf:"bytes,3,opt,name=Origin,proto3" json:"Origin,omitempty"`
	Result        []byte                 `protobuf:"bytes,4,opt,name=Result,proto3" json:"Result,omitempty"`
	Modify        bool                   `protobuf:"varint,5,opt,name=Modify,proto3" json:"Modify,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoDecodeResult) Reset() {
	*x = AutoDecodeResult{}
	mi := &file_yakgrpc_proto_msgTypes[331]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoDecodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDecodeResult) ProtoMessage() {}

func (x *AutoDecodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[331]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDecodeResult.ProtoReflect.Descriptor instead.
func (*AutoDecodeResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{331}
}

func (x *AutoDecodeResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AutoDecodeResult) GetTypeVerbose() string {
	if x != nil {
		return x.TypeVerbose
	}
	return ""
}

func (x *AutoDecodeResult) GetOrigin() []byte {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *AutoDecodeResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AutoDecodeResult) GetModify() bool {
	if x != nil {
		return x.Modify
	}
	return false
}

type AutoDecodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*AutoDecodeResult    `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoDecodeResponse) Reset() {
	*x = AutoDecodeResponse{}
	mi := &file_yakgrpc_proto_msgTypes[332]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoDecodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDecodeResponse) ProtoMessage() {}

func (x *AutoDecodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[332]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDecodeResponse.ProtoReflect.Descriptor instead.
func (*AutoDecodeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{332}
}

func (x *AutoDecodeResponse) GetResults() []*AutoDecodeResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type ExtractDataToFileResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractDataToFileResult) Reset() {
	*x = ExtractDataToFileResult{}
	mi := &file_yakgrpc_proto_msgTypes[333]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractDataToFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataToFileResult) ProtoMessage() {}

func (x *ExtractDataToFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[333]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataToFileResult.ProtoReflect.Descriptor instead.
func (*ExtractDataToFileResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{333}
}

func (x *ExtractDataToFileResult) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type GetYakScriptTagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           []*Tags                `protobuf:"bytes,1,rep,name=Tag,proto3" json:"Tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYakScriptTagsResponse) Reset() {
	*x = GetYakScriptTagsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[334]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYakScriptTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptTagsResponse) ProtoMessage() {}

func (x *GetYakScriptTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[334]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptTagsResponse.ProtoReflect.Descriptor instead.
func (*GetYakScriptTagsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{334}
}

func (x *GetYakScriptTagsResponse) GetTag() []*Tags {
	if x != nil {
		return x.Tag
	}
	return nil
}

type Tags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tags) Reset() {
	*x = Tags{}
	mi := &file_yakgrpc_proto_msgTypes[335]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[335]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{335}
}

func (x *Tags) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Tags) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryYakScriptLocalAndUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OnlineBaseUrl string                 `protobuf:"bytes,1,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptLocalAndUserRequest) Reset() {
	*x = QueryYakScriptLocalAndUserRequest{}
	mi := &file_yakgrpc_proto_msgTypes[336]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptLocalAndUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptLocalAndUserRequest) ProtoMessage() {}

func (x *QueryYakScriptLocalAndUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[336]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptLocalAndUserRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptLocalAndUserRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{336}
}

func (x *QueryYakScriptLocalAndUserRequest) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

func (x *QueryYakScriptLocalAndUserRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type QueryYakScriptLocalAndUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*YakScript           `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptLocalAndUserResponse) Reset() {
	*x = QueryYakScriptLocalAndUserResponse{}
	mi := &file_yakgrpc_proto_msgTypes[337]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptLocalAndUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptLocalAndUserResponse) ProtoMessage() {}

func (x *QueryYakScriptLocalAndUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[337]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptLocalAndUserResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptLocalAndUserResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{337}
}

func (x *QueryYakScriptLocalAndUserResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptByOnlineGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OnlineGroup   string                 `protobuf:"bytes,1,opt,name=OnlineGroup,proto3" json:"OnlineGroup,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptByOnlineGroupRequest) Reset() {
	*x = QueryYakScriptByOnlineGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[338]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptByOnlineGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByOnlineGroupRequest) ProtoMessage() {}

func (x *QueryYakScriptByOnlineGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[338]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByOnlineGroupRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByOnlineGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{338}
}

func (x *QueryYakScriptByOnlineGroupRequest) GetOnlineGroup() string {
	if x != nil {
		return x.OnlineGroup
	}
	return ""
}

type QueryYakScriptByNamesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptName []string               `protobuf:"bytes,1,rep,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptByNamesRequest) Reset() {
	*x = QueryYakScriptByNamesRequest{}
	mi := &file_yakgrpc_proto_msgTypes[339]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptByNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByNamesRequest) ProtoMessage() {}

func (x *QueryYakScriptByNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[339]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByNamesRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByNamesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{339}
}

func (x *QueryYakScriptByNamesRequest) GetYakScriptName() []string {
	if x != nil {
		return x.YakScriptName
	}
	return nil
}

type QueryYakScriptByIsCoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsCorePlugin  bool                   `protobuf:"varint,1,opt,name=IsCorePlugin,proto3" json:"IsCorePlugin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptByIsCoreRequest) Reset() {
	*x = QueryYakScriptByIsCoreRequest{}
	mi := &file_yakgrpc_proto_msgTypes[340]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptByIsCoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByIsCoreRequest) ProtoMessage() {}

func (x *QueryYakScriptByIsCoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[340]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByIsCoreRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByIsCoreRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{340}
}

func (x *QueryYakScriptByIsCoreRequest) GetIsCorePlugin() bool {
	if x != nil {
		return x.IsCorePlugin
	}
	return false
}

type QueryYakScriptByNamesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*YakScript           `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptByNamesResponse) Reset() {
	*x = QueryYakScriptByNamesResponse{}
	mi := &file_yakgrpc_proto_msgTypes[341]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptByNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByNamesResponse) ProtoMessage() {}

func (x *QueryYakScriptByNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[341]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByNamesResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByNamesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{341}
}

func (x *QueryYakScriptByNamesResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptByIsCoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*YakScript           `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptByIsCoreResponse) Reset() {
	*x = QueryYakScriptByIsCoreResponse{}
	mi := &file_yakgrpc_proto_msgTypes[342]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptByIsCoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByIsCoreResponse) ProtoMessage() {}

func (x *QueryYakScriptByIsCoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[342]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByIsCoreResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByIsCoreResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{342}
}

func (x *QueryYakScriptByIsCoreResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptRiskDetailByCWERequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CWEId         string                 `protobuf:"bytes,1,opt,name=CWEId,proto3" json:"CWEId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptRiskDetailByCWERequest) Reset() {
	*x = QueryYakScriptRiskDetailByCWERequest{}
	mi := &file_yakgrpc_proto_msgTypes[343]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptRiskDetailByCWERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptRiskDetailByCWERequest) ProtoMessage() {}

func (x *QueryYakScriptRiskDetailByCWERequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[343]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptRiskDetailByCWERequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptRiskDetailByCWERequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{343}
}

func (x *QueryYakScriptRiskDetailByCWERequest) GetCWEId() string {
	if x != nil {
		return x.CWEId
	}
	return ""
}

type QueryYakScriptRiskDetailByCWEResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CWEId         string                 `protobuf:"bytes,1,opt,name=CWEId,proto3" json:"CWEId,omitempty"`
	RiskType      string                 `protobuf:"bytes,2,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	CWESolution   string                 `protobuf:"bytes,4,opt,name=CWESolution,proto3" json:"CWESolution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptRiskDetailByCWEResponse) Reset() {
	*x = QueryYakScriptRiskDetailByCWEResponse{}
	mi := &file_yakgrpc_proto_msgTypes[344]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptRiskDetailByCWEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptRiskDetailByCWEResponse) ProtoMessage() {}

func (x *QueryYakScriptRiskDetailByCWEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[344]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptRiskDetailByCWEResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptRiskDetailByCWEResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{344}
}

func (x *QueryYakScriptRiskDetailByCWEResponse) GetCWEId() string {
	if x != nil {
		return x.CWEId
	}
	return ""
}

func (x *QueryYakScriptRiskDetailByCWEResponse) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *QueryYakScriptRiskDetailByCWEResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryYakScriptRiskDetailByCWEResponse) GetCWESolution() string {
	if x != nil {
		return x.CWESolution
	}
	return ""
}

type YakScriptRiskTypeListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*RiskTypeLists       `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YakScriptRiskTypeListResponse) Reset() {
	*x = YakScriptRiskTypeListResponse{}
	mi := &file_yakgrpc_proto_msgTypes[345]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakScriptRiskTypeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptRiskTypeListResponse) ProtoMessage() {}

func (x *YakScriptRiskTypeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[345]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptRiskTypeListResponse.ProtoReflect.Descriptor instead.
func (*YakScriptRiskTypeListResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{345}
}

func (x *YakScriptRiskTypeListResponse) GetData() []*RiskTypeLists {
	if x != nil {
		return x.Data
	}
	return nil
}

type RiskTypeLists struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RiskType      string                 `protobuf:"bytes,1,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	CWEId         string                 `protobuf:"bytes,2,opt,name=CWEId,proto3" json:"CWEId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskTypeLists) Reset() {
	*x = RiskTypeLists{}
	mi := &file_yakgrpc_proto_msgTypes[346]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskTypeLists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskTypeLists) ProtoMessage() {}

func (x *RiskTypeLists) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[346]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskTypeLists.ProtoReflect.Descriptor instead.
func (*RiskTypeLists) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{346}
}

func (x *RiskTypeLists) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *RiskTypeLists) GetCWEId() string {
	if x != nil {
		return x.CWEId
	}
	return ""
}

type ExtractDataToFileRequest struct {
	state           protoimpl.MessageState      `protogen:"open.v1"`
	JsonOutput      bool                        `protobuf:"varint,1,opt,name=JsonOutput,proto3" json:"JsonOutput,omitempty"`
	CSVOutput       bool                        `protobuf:"varint,2,opt,name=CSVOutput,proto3" json:"CSVOutput,omitempty"`
	DirName         string                      `protobuf:"bytes,3,opt,name=DirName,proto3" json:"DirName,omitempty"`
	Data            map[string]*ExtractableData `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FileNamePattern string                      `protobuf:"bytes,5,opt,name=FileNamePattern,proto3" json:"FileNamePattern,omitempty"`
	// 当没有数据的时候，执行这个即可
	Finished      bool `protobuf:"varint,6,opt,name=Finished,proto3" json:"Finished,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractDataToFileRequest) Reset() {
	*x = ExtractDataToFileRequest{}
	mi := &file_yakgrpc_proto_msgTypes[347]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractDataToFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataToFileRequest) ProtoMessage() {}

func (x *ExtractDataToFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[347]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataToFileRequest.ProtoReflect.Descriptor instead.
func (*ExtractDataToFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{347}
}

func (x *ExtractDataToFileRequest) GetJsonOutput() bool {
	if x != nil {
		return x.JsonOutput
	}
	return false
}

func (x *ExtractDataToFileRequest) GetCSVOutput() bool {
	if x != nil {
		return x.CSVOutput
	}
	return false
}

func (x *ExtractDataToFileRequest) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *ExtractDataToFileRequest) GetData() map[string]*ExtractableData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtractDataToFileRequest) GetFileNamePattern() string {
	if x != nil {
		return x.FileNamePattern
	}
	return ""
}

func (x *ExtractDataToFileRequest) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type ExtractableData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StringValue   string                 `protobuf:"bytes,1,opt,name=StringValue,proto3" json:"StringValue,omitempty"`
	BytesValue    []byte                 `protobuf:"bytes,2,opt,name=BytesValue,proto3" json:"BytesValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractableData) Reset() {
	*x = ExtractableData{}
	mi := &file_yakgrpc_proto_msgTypes[348]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractableData) ProtoMessage() {}

func (x *ExtractableData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[348]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractableData.ProtoReflect.Descriptor instead.
func (*ExtractableData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{348}
}

func (x *ExtractableData) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *ExtractableData) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

type MITMContentReplacers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*MITMContentReplacer `protobuf:"bytes,1,rep,name=Rules,proto3" json:"Rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MITMContentReplacers) Reset() {
	*x = MITMContentReplacers{}
	mi := &file_yakgrpc_proto_msgTypes[349]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MITMContentReplacers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMContentReplacers) ProtoMessage() {}

func (x *MITMContentReplacers) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[349]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMContentReplacers.ProtoReflect.Descriptor instead.
func (*MITMContentReplacers) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{349}
}

func (x *MITMContentReplacers) GetRules() []*MITMContentReplacer {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ImportMITMReplacerRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JsonRaw       []byte                 `protobuf:"bytes,1,opt,name=JsonRaw,proto3" json:"JsonRaw,omitempty"`
	ReplaceAll    bool                   `protobuf:"varint,2,opt,name=ReplaceAll,proto3" json:"ReplaceAll,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportMITMReplacerRulesRequest) Reset() {
	*x = ImportMITMReplacerRulesRequest{}
	mi := &file_yakgrpc_proto_msgTypes[350]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportMITMReplacerRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMITMReplacerRulesRequest) ProtoMessage() {}

func (x *ImportMITMReplacerRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[350]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMITMReplacerRulesRequest.ProtoReflect.Descriptor instead.
func (*ImportMITMReplacerRulesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{350}
}

func (x *ImportMITMReplacerRulesRequest) GetJsonRaw() []byte {
	if x != nil {
		return x.JsonRaw
	}
	return nil
}

func (x *ImportMITMReplacerRulesRequest) GetReplaceAll() bool {
	if x != nil {
		return x.ReplaceAll
	}
	return false
}

type ExportMITMReplacerRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JsonRaw       []byte                 `protobuf:"bytes,1,opt,name=JsonRaw,proto3" json:"JsonRaw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportMITMReplacerRulesResponse) Reset() {
	*x = ExportMITMReplacerRulesResponse{}
	mi := &file_yakgrpc_proto_msgTypes[351]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMITMReplacerRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMITMReplacerRulesResponse) ProtoMessage() {}

func (x *ExportMITMReplacerRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[351]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMITMReplacerRulesResponse.ProtoReflect.Descriptor instead.
func (*ExportMITMReplacerRulesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{351}
}

func (x *ExportMITMReplacerRulesResponse) GetJsonRaw() []byte {
	if x != nil {
		return x.JsonRaw
	}
	return nil
}

type ExecYakitPluginsByYakScriptFilterRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Filter *QueryYakScriptRequest `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	// 这个 Target 很复杂，URL / IP / CIDR / Host / Host:port
	Target        string           `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`
	Ports         string           `protobuf:"bytes,3,opt,name=Ports,proto3" json:"Ports,omitempty"`
	TargetFile    string           `protobuf:"bytes,5,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	ExtraParams   []*ExecParamItem `protobuf:"bytes,4,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) Reset() {
	*x = ExecYakitPluginsByYakScriptFilterRequest{}
	mi := &file_yakgrpc_proto_msgTypes[352]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecYakitPluginsByYakScriptFilterRequest) ProtoMessage() {}

func (x *ExecYakitPluginsByYakScriptFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[352]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecYakitPluginsByYakScriptFilterRequest.ProtoReflect.Descriptor instead.
func (*ExecYakitPluginsByYakScriptFilterRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{352}
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetExtraParams() []*ExecParamItem {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type GenerateYakCodeByPacketRequest struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	IsHttps       bool                                    `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request       []byte                                  `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	CodeTemplate  GenerateYakCodeByPacketRequest_Template `protobuf:"varint,3,opt,name=CodeTemplate,proto3,enum=ypb.GenerateYakCodeByPacketRequest_Template" json:"CodeTemplate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateYakCodeByPacketRequest) Reset() {
	*x = GenerateYakCodeByPacketRequest{}
	mi := &file_yakgrpc_proto_msgTypes[353]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateYakCodeByPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateYakCodeByPacketRequest) ProtoMessage() {}

func (x *GenerateYakCodeByPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[353]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateYakCodeByPacketRequest.ProtoReflect.Descriptor instead.
func (*GenerateYakCodeByPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{353}
}

func (x *GenerateYakCodeByPacketRequest) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *GenerateYakCodeByPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GenerateYakCodeByPacketRequest) GetCodeTemplate() GenerateYakCodeByPacketRequest_Template {
	if x != nil {
		return x.CodeTemplate
	}
	return GenerateYakCodeByPacketRequest_Ordinary
}

type GenerateCSRFPocByPacketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHttps       bool                   `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request       []byte                 `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateCSRFPocByPacketRequest) Reset() {
	*x = GenerateCSRFPocByPacketRequest{}
	mi := &file_yakgrpc_proto_msgTypes[354]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCSRFPocByPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRFPocByPacketRequest) ProtoMessage() {}

func (x *GenerateCSRFPocByPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[354]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRFPocByPacketRequest.ProtoReflect.Descriptor instead.
func (*GenerateCSRFPocByPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{354}
}

func (x *GenerateCSRFPocByPacketRequest) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *GenerateCSRFPocByPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type GenerateCSRFPocByPacketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          []byte                 `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateCSRFPocByPacketResponse) Reset() {
	*x = GenerateCSRFPocByPacketResponse{}
	mi := &file_yakgrpc_proto_msgTypes[355]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCSRFPocByPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRFPocByPacketResponse) ProtoMessage() {}

func (x *GenerateCSRFPocByPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[355]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRFPocByPacketResponse.ProtoReflect.Descriptor instead.
func (*GenerateCSRFPocByPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{355}
}

func (x *GenerateCSRFPocByPacketResponse) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type GenerateYakCodeByPacketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          []byte                 `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateYakCodeByPacketResponse) Reset() {
	*x = GenerateYakCodeByPacketResponse{}
	mi := &file_yakgrpc_proto_msgTypes[356]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateYakCodeByPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateYakCodeByPacketResponse) ProtoMessage() {}

func (x *GenerateYakCodeByPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[356]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateYakCodeByPacketResponse.ProtoReflect.Descriptor instead.
func (*GenerateYakCodeByPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{356}
}

func (x *GenerateYakCodeByPacketResponse) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type QueryReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"` // "project"(yakit) | "ssa_project"(irify)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryReportRequest) Reset() {
	*x = QueryReportRequest{}
	mi := &file_yakgrpc_proto_msgTypes[357]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportRequest) ProtoMessage() {}

func (x *QueryReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[357]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportRequest.ProtoReflect.Descriptor instead.
func (*QueryReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{357}
}

func (x *QueryReportRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryReportRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *QueryReportRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DeleteReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Filter        *QueryReportsRequest   `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	IDs           []int64                `protobuf:"varint,4,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	DeleteAll     bool                   `protobuf:"varint,5,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Type          string                 `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"` // "project"(yakit) | "ssa_project"(irify)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReportRequest) Reset() {
	*x = DeleteReportRequest{}
	mi := &file_yakgrpc_proto_msgTypes[358]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReportRequest) ProtoMessage() {}

func (x *DeleteReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[358]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{358}
}

func (x *DeleteReportRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteReportRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DeleteReportRequest) GetFilter() *QueryReportsRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteReportRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *DeleteReportRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteReportRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type QueryReportsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*Report              `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryReportsResponse) Reset() {
	*x = QueryReportsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[359]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportsResponse) ProtoMessage() {}

func (x *QueryReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[359]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportsResponse.ProtoReflect.Descriptor instead.
func (*QueryReportsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{359}
}

func (x *QueryReportsResponse) GetData() []*Report {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryReportsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryReportsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryReportsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	From          string                 `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	Keyword       string                 `protobuf:"bytes,4,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Title         string                 `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`
	Type          string                 `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"` // "project"(yakit) | "ssa_project"(irify)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryReportsRequest) Reset() {
	*x = QueryReportsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[360]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportsRequest) ProtoMessage() {}

func (x *QueryReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[360]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportsRequest.ProtoReflect.Descriptor instead.
func (*QueryReportsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{360}
}

func (x *QueryReportsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryReportsRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *QueryReportsRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *QueryReportsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryReportsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryReportsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Report struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	PublishedAt   uint64                 `protobuf:"varint,2,opt,name=PublishedAt,proto3" json:"PublishedAt,omitempty"`
	Hash          string                 `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Id            uint64                 `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`
	Owner         string                 `protobuf:"bytes,5,opt,name=Owner,proto3" json:"Owner,omitempty"`
	From          string                 `protobuf:"bytes,6,opt,name=From,proto3" json:"From,omitempty"`
	JsonRaw       string                 `protobuf:"bytes,7,opt,name=JsonRaw,proto3" json:"JsonRaw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Report) Reset() {
	*x = Report{}
	mi := &file_yakgrpc_proto_msgTypes[361]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[361]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{361}
}

func (x *Report) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Report) GetPublishedAt() uint64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *Report) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Report) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Report) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Report) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Report) GetJsonRaw() string {
	if x != nil {
		return x.JsonRaw
	}
	return ""
}

type SetTagForHTTPFlowRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            int64                   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash          string                  `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags          []string                `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CheckTags     []*CheckSetTagsHTTPFlow `protobuf:"bytes,4,rep,name=CheckTags,proto3" json:"CheckTags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTagForHTTPFlowRequest) Reset() {
	*x = SetTagForHTTPFlowRequest{}
	mi := &file_yakgrpc_proto_msgTypes[362]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagForHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagForHTTPFlowRequest) ProtoMessage() {}

func (x *SetTagForHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[362]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagForHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*SetTagForHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{362}
}

func (x *SetTagForHTTPFlowRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetTagForHTTPFlowRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SetTagForHTTPFlowRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SetTagForHTTPFlowRequest) GetCheckTags() []*CheckSetTagsHTTPFlow {
	if x != nil {
		return x.CheckTags
	}
	return nil
}

type CheckSetTagsHTTPFlow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckSetTagsHTTPFlow) Reset() {
	*x = CheckSetTagsHTTPFlow{}
	mi := &file_yakgrpc_proto_msgTypes[363]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckSetTagsHTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSetTagsHTTPFlow) ProtoMessage() {}

func (x *CheckSetTagsHTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[363]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSetTagsHTTPFlow.ProtoReflect.Descriptor instead.
func (*CheckSetTagsHTTPFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{363}
}

func (x *CheckSetTagsHTTPFlow) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CheckSetTagsHTTPFlow) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CheckSetTagsHTTPFlow) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RequireICMPRandomLengthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Length        int32                  `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	ExternalHost  string                 `protobuf:"bytes,2,opt,name=ExternalHost,proto3" json:"ExternalHost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequireICMPRandomLengthResponse) Reset() {
	*x = RequireICMPRandomLengthResponse{}
	mi := &file_yakgrpc_proto_msgTypes[364]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequireICMPRandomLengthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireICMPRandomLengthResponse) ProtoMessage() {}

func (x *RequireICMPRandomLengthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[364]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireICMPRandomLengthResponse.ProtoReflect.Descriptor instead.
func (*RequireICMPRandomLengthResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{364}
}

func (x *RequireICMPRandomLengthResponse) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RequireICMPRandomLengthResponse) GetExternalHost() string {
	if x != nil {
		return x.ExternalHost
	}
	return ""
}

type RandomPortTriggerNotification struct {
	state                                 protoimpl.MessageState `protogen:"open.v1"`
	RemoteAddr                            string                 `protobuf:"bytes,1,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP                              string                 `protobuf:"bytes,2,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort                            int32                  `protobuf:"varint,3,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	LocalPort                             int32                  `protobuf:"varint,4,opt,name=LocalPort,proto3" json:"LocalPort,omitempty"`
	History                               []string               `protobuf:"bytes,5,rep,name=History,proto3" json:"History,omitempty"`
	CurrentRemoteCachedConnectionCount    int32                  `protobuf:"varint,6,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	LocalPortCachedHistoryConnectionCount int32                  `protobuf:"varint,7,opt,name=LocalPortCachedHistoryConnectionCount,proto3" json:"LocalPortCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                      int64                  `protobuf:"varint,8,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                             int64                  `protobuf:"varint,9,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *RandomPortTriggerNotification) Reset() {
	*x = RandomPortTriggerNotification{}
	mi := &file_yakgrpc_proto_msgTypes[365]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandomPortTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPortTriggerNotification) ProtoMessage() {}

func (x *RandomPortTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[365]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPortTriggerNotification.ProtoReflect.Descriptor instead.
func (*RandomPortTriggerNotification) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{365}
}

func (x *RandomPortTriggerNotification) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *RandomPortTriggerNotification) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *RandomPortTriggerNotification) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *RandomPortTriggerNotification) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetLocalPortCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.LocalPortCachedHistoryConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QueryRandomPortTriggerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRandomPortTriggerRequest) Reset() {
	*x = QueryRandomPortTriggerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[366]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRandomPortTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRandomPortTriggerRequest) ProtoMessage() {}

func (x *QueryRandomPortTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[366]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRandomPortTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryRandomPortTriggerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{366}
}

func (x *QueryRandomPortTriggerRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RandomPortInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RandomPortInfo) Reset() {
	*x = RandomPortInfo{}
	mi := &file_yakgrpc_proto_msgTypes[367]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandomPortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPortInfo) ProtoMessage() {}

func (x *RandomPortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[367]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPortInfo.ProtoReflect.Descriptor instead.
func (*RandomPortInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{367}
}

func (x *RandomPortInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RandomPortInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *RandomPortInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DeleteHistoryHTTPFuzzerTaskRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int32                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	WebFuzzerIndex string                 `protobuf:"bytes,2,opt,name=WebFuzzerIndex,proto3" json:"WebFuzzerIndex,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) Reset() {
	*x = DeleteHistoryHTTPFuzzerTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[368]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHistoryHTTPFuzzerTaskRequest) ProtoMessage() {}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[368]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHistoryHTTPFuzzerTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteHistoryHTTPFuzzerTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{368}
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) GetWebFuzzerIndex() string {
	if x != nil {
		return x.WebFuzzerIndex
	}
	return ""
}

type RiskTableStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 最近一次更新的漏洞信息
	LatestCreatedAtTimestamp int64   `protobuf:"varint,1,opt,name=LatestCreatedAtTimestamp,proto3" json:"LatestCreatedAtTimestamp,omitempty"`
	RiskTypeStats            *Fields `protobuf:"bytes,2,opt,name=RiskTypeStats,proto3" json:"RiskTypeStats,omitempty"`
	RiskLevelStats           *Fields `protobuf:"bytes,3,opt,name=RiskLevelStats,proto3" json:"RiskLevelStats,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *RiskTableStats) Reset() {
	*x = RiskTableStats{}
	mi := &file_yakgrpc_proto_msgTypes[369]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskTableStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskTableStats) ProtoMessage() {}

func (x *RiskTableStats) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[369]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskTableStats.ProtoReflect.Descriptor instead.
func (*RiskTableStats) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{369}
}

func (x *RiskTableStats) GetLatestCreatedAtTimestamp() int64 {
	if x != nil {
		return x.LatestCreatedAtTimestamp
	}
	return 0
}

func (x *RiskTableStats) GetRiskTypeStats() *Fields {
	if x != nil {
		return x.RiskTypeStats
	}
	return nil
}

func (x *RiskTableStats) GetRiskLevelStats() *Fields {
	if x != nil {
		return x.RiskLevelStats
	}
	return nil
}

type MITMCert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CaCerts       []byte                 `protobuf:"bytes,1,opt,name=CaCerts,proto3" json:"CaCerts,omitempty"`
	LocalFile     string                 `protobuf:"bytes,2,opt,name=LocalFile,proto3" json:"LocalFile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MITMCert) Reset() {
	*x = MITMCert{}
	mi := &file_yakgrpc_proto_msgTypes[370]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MITMCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMCert) ProtoMessage() {}

func (x *MITMCert) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[370]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMCert.ProtoReflect.Descriptor instead.
func (*MITMCert) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{370}
}

func (x *MITMCert) GetCaCerts() []byte {
	if x != nil {
		return x.CaCerts
	}
	return nil
}

func (x *MITMCert) GetLocalFile() string {
	if x != nil {
		return x.LocalFile
	}
	return ""
}

type FieldName struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Name    string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Verbose string                 `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Total   int32                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	// 比上一次的增量/变化量
	Delta         int32 `protobuf:"varint,4,opt,name=Delta,proto3" json:"Delta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldName) Reset() {
	*x = FieldName{}
	mi := &file_yakgrpc_proto_msgTypes[371]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldName) ProtoMessage() {}

func (x *FieldName) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[371]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldName.ProtoReflect.Descriptor instead.
func (*FieldName) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{371}
}

func (x *FieldName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldName) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *FieldName) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FieldName) GetDelta() int32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type Fields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*FieldName           `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fields) Reset() {
	*x = Fields{}
	mi := &file_yakgrpc_proto_msgTypes[372]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fields) ProtoMessage() {}

func (x *Fields) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[372]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fields.ProtoReflect.Descriptor instead.
func (*Fields) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{372}
}

func (x *Fields) GetValues() []*FieldName {
	if x != nil {
		return x.Values
	}
	return nil
}

// 获取Gadget的Options
type YsoOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	NameVerbose   string                 `protobuf:"bytes,2,opt,name=NameVerbose,proto3" json:"NameVerbose,omitempty"`
	Help          string                 `protobuf:"bytes,3,opt,name=Help,proto3" json:"Help,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoOption) Reset() {
	*x = YsoOption{}
	mi := &file_yakgrpc_proto_msgTypes[373]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOption) ProtoMessage() {}

func (x *YsoOption) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[373]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOption.ProtoReflect.Descriptor instead.
func (*YsoOption) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{373}
}

func (x *YsoOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *YsoOption) GetNameVerbose() string {
	if x != nil {
		return x.NameVerbose
	}
	return ""
}

func (x *YsoOption) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

type YsoOptionsWithVerbose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Options       []*YsoOption           `protobuf:"bytes,1,rep,name=Options,proto3" json:"Options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoOptionsWithVerbose) Reset() {
	*x = YsoOptionsWithVerbose{}
	mi := &file_yakgrpc_proto_msgTypes[374]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoOptionsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptionsWithVerbose) ProtoMessage() {}

func (x *YsoOptionsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[374]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptionsWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoOptionsWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{374}
}

func (x *YsoOptionsWithVerbose) GetOptions() []*YsoOption {
	if x != nil {
		return x.Options
	}
	return nil
}

// 已弃用
type YsoOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=Names,proto3" json:"Names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoOptions) Reset() {
	*x = YsoOptions{}
	mi := &file_yakgrpc_proto_msgTypes[375]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptions) ProtoMessage() {}

func (x *YsoOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[375]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptions.ProtoReflect.Descriptor instead.
func (*YsoOptions) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{375}
}

func (x *YsoOptions) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// 类生成器的参数
type YsoClassGeneraterOptionsWithVerbose struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Key           string                                         `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	KeyVerbose    string                                         `protobuf:"bytes,2,opt,name=KeyVerbose,proto3" json:"KeyVerbose,omitempty"`
	Help          string                                         `protobuf:"bytes,3,opt,name=Help,proto3" json:"Help,omitempty"`
	Value         string                                         `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Type          string                                         `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	BindOptions   map[string]*YsoClassOptionsResponseWithVerbose `protobuf:"bytes,6,rep,name=BindOptions,proto3" json:"BindOptions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoClassGeneraterOptionsWithVerbose) Reset() {
	*x = YsoClassGeneraterOptionsWithVerbose{}
	mi := &file_yakgrpc_proto_msgTypes[376]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoClassGeneraterOptionsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassGeneraterOptionsWithVerbose) ProtoMessage() {}

func (x *YsoClassGeneraterOptionsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[376]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassGeneraterOptionsWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoClassGeneraterOptionsWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{376}
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetKeyVerbose() string {
	if x != nil {
		return x.KeyVerbose
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetBindOptions() map[string]*YsoClassOptionsResponseWithVerbose {
	if x != nil {
		return x.BindOptions
	}
	return nil
}

type YsoClassOptionsResponseWithVerbose struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Options       []*YsoClassGeneraterOptionsWithVerbose `protobuf:"bytes,1,rep,name=Options,proto3" json:"Options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoClassOptionsResponseWithVerbose) Reset() {
	*x = YsoClassOptionsResponseWithVerbose{}
	mi := &file_yakgrpc_proto_msgTypes[377]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoClassOptionsResponseWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassOptionsResponseWithVerbose) ProtoMessage() {}

func (x *YsoClassOptionsResponseWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[377]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassOptionsResponseWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoClassOptionsResponseWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{377}
}

func (x *YsoClassOptionsResponseWithVerbose) GetOptions() []*YsoClassGeneraterOptionsWithVerbose {
	if x != nil {
		return x.Options
	}
	return nil
}

// 已弃用
type YsoClassGeneraterOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoClassGeneraterOptions) Reset() {
	*x = YsoClassGeneraterOptions{}
	mi := &file_yakgrpc_proto_msgTypes[378]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoClassGeneraterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassGeneraterOptions) ProtoMessage() {}

func (x *YsoClassGeneraterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[378]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassGeneraterOptions.ProtoReflect.Descriptor instead.
func (*YsoClassGeneraterOptions) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{378}
}

func (x *YsoClassGeneraterOptions) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YsoClassGeneraterOptions) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *YsoClassGeneraterOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 已弃用
type YsoClassOptionsResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Options       []*YsoClassGeneraterOptions `protobuf:"bytes,1,rep,name=Options,proto3" json:"Options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoClassOptionsResponse) Reset() {
	*x = YsoClassOptionsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[379]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoClassOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassOptionsResponse) ProtoMessage() {}

func (x *YsoClassOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[379]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassOptionsResponse.ProtoReflect.Descriptor instead.
func (*YsoClassOptionsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{379}
}

func (x *YsoClassOptionsResponse) GetOptions() []*YsoClassGeneraterOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// 生成代码和字节码
type YsoOptionsRequerstWithVerbose struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Gadget        string                                 `protobuf:"bytes,1,opt,name=Gadget,proto3" json:"Gadget,omitempty"`
	Class         string                                 `protobuf:"bytes,2,opt,name=Class,proto3" json:"Class,omitempty"`
	Options       []*YsoClassGeneraterOptionsWithVerbose `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoOptionsRequerstWithVerbose) Reset() {
	*x = YsoOptionsRequerstWithVerbose{}
	mi := &file_yakgrpc_proto_msgTypes[380]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoOptionsRequerstWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptionsRequerstWithVerbose) ProtoMessage() {}

func (x *YsoOptionsRequerstWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[380]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptionsRequerstWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoOptionsRequerstWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{380}
}

func (x *YsoOptionsRequerstWithVerbose) GetGadget() string {
	if x != nil {
		return x.Gadget
	}
	return ""
}

func (x *YsoOptionsRequerstWithVerbose) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *YsoOptionsRequerstWithVerbose) GetOptions() []*YsoClassGeneraterOptionsWithVerbose {
	if x != nil {
		return x.Options
	}
	return nil
}

// 已弃用
type YsoOptionsRequerst struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Gadget        string                      `protobuf:"bytes,1,opt,name=Gadget,proto3" json:"Gadget,omitempty"`
	Class         string                      `protobuf:"bytes,2,opt,name=Class,proto3" json:"Class,omitempty"`
	Options       []*YsoClassGeneraterOptions `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoOptionsRequerst) Reset() {
	*x = YsoOptionsRequerst{}
	mi := &file_yakgrpc_proto_msgTypes[381]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoOptionsRequerst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptionsRequerst) ProtoMessage() {}

func (x *YsoOptionsRequerst) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[381]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptionsRequerst.ProtoReflect.Descriptor instead.
func (*YsoOptionsRequerst) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{381}
}

func (x *YsoOptionsRequerst) GetGadget() string {
	if x != nil {
		return x.Gadget
	}
	return ""
}

func (x *YsoOptionsRequerst) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *YsoOptionsRequerst) GetOptions() []*YsoClassGeneraterOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type YsoBytesObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoBytesObject) Reset() {
	*x = YsoBytesObject{}
	mi := &file_yakgrpc_proto_msgTypes[382]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoBytesObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoBytesObject) ProtoMessage() {}

func (x *YsoBytesObject) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[382]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoBytesObject.ProtoReflect.Descriptor instead.
func (*YsoBytesObject) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{382}
}

func (x *YsoBytesObject) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type YsoDumpResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          string                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoDumpResponse) Reset() {
	*x = YsoDumpResponse{}
	mi := &file_yakgrpc_proto_msgTypes[383]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoDumpResponse) ProtoMessage() {}

func (x *YsoDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[383]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoDumpResponse.ProtoReflect.Descriptor instead.
func (*YsoDumpResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{383}
}

func (x *YsoDumpResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type YsoCodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoCodeResponse) Reset() {
	*x = YsoCodeResponse{}
	mi := &file_yakgrpc_proto_msgTypes[384]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoCodeResponse) ProtoMessage() {}

func (x *YsoCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[384]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoCodeResponse.ProtoReflect.Descriptor instead.
func (*YsoCodeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{384}
}

func (x *YsoCodeResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type YsoBytesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Bytes         []byte                 `protobuf:"bytes,2,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsoBytesResponse) Reset() {
	*x = YsoBytesResponse{}
	mi := &file_yakgrpc_proto_msgTypes[385]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsoBytesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoBytesResponse) ProtoMessage() {}

func (x *YsoBytesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[385]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoBytesResponse.ProtoReflect.Descriptor instead.
func (*YsoBytesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{385}
}

func (x *YsoBytesResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *YsoBytesResponse) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type BytesToBase64Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bytes         []byte                 `protobuf:"bytes,1,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BytesToBase64Request) Reset() {
	*x = BytesToBase64Request{}
	mi := &file_yakgrpc_proto_msgTypes[386]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BytesToBase64Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesToBase64Request) ProtoMessage() {}

func (x *BytesToBase64Request) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[386]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesToBase64Request.ProtoReflect.Descriptor instead.
func (*BytesToBase64Request) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{386}
}

func (x *BytesToBase64Request) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type BytesToBase64Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base64        string                 `protobuf:"bytes,1,opt,name=Base64,proto3" json:"Base64,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BytesToBase64Response) Reset() {
	*x = BytesToBase64Response{}
	mi := &file_yakgrpc_proto_msgTypes[387]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BytesToBase64Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesToBase64Response) ProtoMessage() {}

func (x *BytesToBase64Response) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[387]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesToBase64Response.ProtoReflect.Descriptor instead.
func (*BytesToBase64Response) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{387}
}

func (x *BytesToBase64Response) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

type QueryICMPTriggerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Length        int32                  `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryICMPTriggerRequest) Reset() {
	*x = QueryICMPTriggerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[388]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryICMPTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryICMPTriggerRequest) ProtoMessage() {}

func (x *QueryICMPTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[388]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryICMPTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryICMPTriggerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{388}
}

func (x *QueryICMPTriggerRequest) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type QueryICMPTriggerResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Notification  []*ICMPTriggerNotification `protobuf:"bytes,1,rep,name=Notification,proto3" json:"Notification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryICMPTriggerResponse) Reset() {
	*x = QueryICMPTriggerResponse{}
	mi := &file_yakgrpc_proto_msgTypes[389]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryICMPTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryICMPTriggerResponse) ProtoMessage() {}

func (x *QueryICMPTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[389]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryICMPTriggerResponse.ProtoReflect.Descriptor instead.
func (*QueryICMPTriggerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{389}
}

func (x *QueryICMPTriggerResponse) GetNotification() []*ICMPTriggerNotification {
	if x != nil {
		return x.Notification
	}
	return nil
}

type QuerySupportedDnsLogPlatformsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Platforms     []string               `protobuf:"bytes,1,rep,name=Platforms,proto3" json:"Platforms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySupportedDnsLogPlatformsResponse) Reset() {
	*x = QuerySupportedDnsLogPlatformsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[390]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySupportedDnsLogPlatformsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySupportedDnsLogPlatformsResponse) ProtoMessage() {}

func (x *QuerySupportedDnsLogPlatformsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[390]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySupportedDnsLogPlatformsResponse.ProtoReflect.Descriptor instead.
func (*QuerySupportedDnsLogPlatformsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{390}
}

func (x *QuerySupportedDnsLogPlatformsResponse) GetPlatforms() []string {
	if x != nil {
		return x.Platforms
	}
	return nil
}

type ICMPTriggerNotification struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	Size                               int32                  `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	CurrentRemoteAddr                  string                 `protobuf:"bytes,2,opt,name=CurrentRemoteAddr,proto3" json:"CurrentRemoteAddr,omitempty"`
	Histories                          []string               `protobuf:"bytes,3,rep,name=Histories,proto3" json:"Histories,omitempty"`
	CurrentRemoteCachedConnectionCount int32                  `protobuf:"varint,4,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	SizedCachedHistoryConnectionCount  int32                  `protobuf:"varint,5,opt,name=SizedCachedHistoryConnectionCount,proto3" json:"SizedCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                   int64                  `protobuf:"varint,7,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                          int64                  `protobuf:"varint,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *ICMPTriggerNotification) Reset() {
	*x = ICMPTriggerNotification{}
	mi := &file_yakgrpc_proto_msgTypes[391]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICMPTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICMPTriggerNotification) ProtoMessage() {}

func (x *ICMPTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[391]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICMPTriggerNotification.ProtoReflect.Descriptor instead.
func (*ICMPTriggerNotification) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{391}
}

func (x *ICMPTriggerNotification) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ICMPTriggerNotification) GetCurrentRemoteAddr() string {
	if x != nil {
		return x.CurrentRemoteAddr
	}
	return ""
}

func (x *ICMPTriggerNotification) GetHistories() []string {
	if x != nil {
		return x.Histories
	}
	return nil
}

func (x *ICMPTriggerNotification) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetSizedCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.SizedCachedHistoryConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetHistoryHTTPFuzzerTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHistoryHTTPFuzzerTaskRequest) Reset() {
	*x = GetHistoryHTTPFuzzerTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[392]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryHTTPFuzzerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryHTTPFuzzerTaskRequest) ProtoMessage() {}

func (x *GetHistoryHTTPFuzzerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[392]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryHTTPFuzzerTaskRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryHTTPFuzzerTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{392}
}

func (x *GetHistoryHTTPFuzzerTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HistoryHTTPFuzzerTaskDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BasicInfo     *HistoryHTTPFuzzerTask `protobuf:"bytes,1,opt,name=BasicInfo,proto3" json:"BasicInfo,omitempty"`
	OriginRequest *FuzzerRequest         `protobuf:"bytes,2,opt,name=OriginRequest,proto3" json:"OriginRequest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryHTTPFuzzerTaskDetail) Reset() {
	*x = HistoryHTTPFuzzerTaskDetail{}
	mi := &file_yakgrpc_proto_msgTypes[393]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryHTTPFuzzerTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTaskDetail) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[393]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTaskDetail.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTaskDetail) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{393}
}

func (x *HistoryHTTPFuzzerTaskDetail) GetBasicInfo() *HistoryHTTPFuzzerTask {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *HistoryHTTPFuzzerTaskDetail) GetOriginRequest() *FuzzerRequest {
	if x != nil {
		return x.OriginRequest
	}
	return nil
}

type HistoryHTTPFuzzerTask struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int32                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt            int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	HTTPFlowTotal        int32                  `protobuf:"varint,3,opt,name=HTTPFlowTotal,proto3" json:"HTTPFlowTotal,omitempty"`
	HTTPFlowSuccessCount int32                  `protobuf:"varint,4,opt,name=HTTPFlowSuccessCount,proto3" json:"HTTPFlowSuccessCount,omitempty"`
	HTTPFlowFailedCount  int32                  `protobuf:"varint,5,opt,name=HTTPFlowFailedCount,proto3" json:"HTTPFlowFailedCount,omitempty"`
	Host                 string                 `protobuf:"bytes,6,opt,name=Host,proto3" json:"Host,omitempty"`
	Port                 int32                  `protobuf:"varint,7,opt,name=Port,proto3" json:"Port,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HistoryHTTPFuzzerTask) Reset() {
	*x = HistoryHTTPFuzzerTask{}
	mi := &file_yakgrpc_proto_msgTypes[394]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryHTTPFuzzerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTask) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[394]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTask.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{394}
}

func (x *HistoryHTTPFuzzerTask) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowTotal() int32 {
	if x != nil {
		return x.HTTPFlowTotal
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowSuccessCount() int32 {
	if x != nil {
		return x.HTTPFlowSuccessCount
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowFailedCount() int32 {
	if x != nil {
		return x.HTTPFlowFailedCount
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HistoryHTTPFuzzerTask) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type HistoryHTTPFuzzerTasks struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Tasks         []*HistoryHTTPFuzzerTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryHTTPFuzzerTasks) Reset() {
	*x = HistoryHTTPFuzzerTasks{}
	mi := &file_yakgrpc_proto_msgTypes[395]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryHTTPFuzzerTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTasks) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTasks) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[395]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTasks.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTasks) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{395}
}

func (x *HistoryHTTPFuzzerTasks) GetTasks() []*HistoryHTTPFuzzerTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type HistoryHTTPFuzzerTasksResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Data          []*HistoryHTTPFuzzerTaskDetail `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                          `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage     int64                          `protobuf:"varint,3,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
	Pagination    *Paging                        `protobuf:"bytes,4,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryHTTPFuzzerTasksResponse) Reset() {
	*x = HistoryHTTPFuzzerTasksResponse{}
	mi := &file_yakgrpc_proto_msgTypes[396]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryHTTPFuzzerTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTasksResponse) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[396]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTasksResponse.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTasksResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{396}
}

func (x *HistoryHTTPFuzzerTasksResponse) GetData() []*HistoryHTTPFuzzerTaskDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HistoryHTTPFuzzerTasksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HistoryHTTPFuzzerTasksResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *HistoryHTTPFuzzerTasksResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryHistoryHTTPFuzzerTaskExParams struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Pagination     *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Keyword        string                 `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	FuzzerTabIndex string                 `protobuf:"bytes,3,opt,name=FuzzerTabIndex,proto3" json:"FuzzerTabIndex,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) Reset() {
	*x = QueryHistoryHTTPFuzzerTaskExParams{}
	mi := &file_yakgrpc_proto_msgTypes[397]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHistoryHTTPFuzzerTaskExParams) ProtoMessage() {}

func (x *QueryHistoryHTTPFuzzerTaskExParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[397]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHistoryHTTPFuzzerTaskExParams.ProtoReflect.Descriptor instead.
func (*QueryHistoryHTTPFuzzerTaskExParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{397}
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetFuzzerTabIndex() string {
	if x != nil {
		return x.FuzzerTabIndex
	}
	return ""
}

type ExecutePacketYakScriptParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptName    string                 `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	IsHttps       bool                   `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request       []byte                 `protobuf:"bytes,3,opt,name=Request,proto3" json:"Request,omitempty"`
	Response      []byte                 `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutePacketYakScriptParams) Reset() {
	*x = ExecutePacketYakScriptParams{}
	mi := &file_yakgrpc_proto_msgTypes[398]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePacketYakScriptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePacketYakScriptParams) ProtoMessage() {}

func (x *ExecutePacketYakScriptParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[398]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePacketYakScriptParams.ProtoReflect.Descriptor instead.
func (*ExecutePacketYakScriptParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{398}
}

func (x *ExecutePacketYakScriptParams) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *ExecutePacketYakScriptParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *ExecutePacketYakScriptParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecutePacketYakScriptParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type ExecuteBatchPacketYakScriptParams struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ScriptName []string               `protobuf:"bytes,1,rep,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	IsHttps    bool                   `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request    []byte                 `protobuf:"bytes,3,opt,name=Request,proto3" json:"Request,omitempty"`
	Response   []byte                 `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
	// 并发
	Concurrent int32 `protobuf:"varint,5,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	// 设置单个超时时间
	PerTaskTimeout float64 `protobuf:"fixed64,6,opt,name=PerTaskTimeout,proto3" json:"PerTaskTimeout,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExecuteBatchPacketYakScriptParams) Reset() {
	*x = ExecuteBatchPacketYakScriptParams{}
	mi := &file_yakgrpc_proto_msgTypes[399]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteBatchPacketYakScriptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBatchPacketYakScriptParams) ProtoMessage() {}

func (x *ExecuteBatchPacketYakScriptParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[399]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteBatchPacketYakScriptParams.ProtoReflect.Descriptor instead.
func (*ExecuteBatchPacketYakScriptParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{399}
}

func (x *ExecuteBatchPacketYakScriptParams) GetScriptName() []string {
	if x != nil {
		return x.ScriptName
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *ExecuteBatchPacketYakScriptParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecuteBatchPacketYakScriptParams) GetPerTaskTimeout() float64 {
	if x != nil {
		return x.PerTaskTimeout
	}
	return 0
}

type WebShell struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Url         string                 `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	Pass        string                 `protobuf:"bytes,3,opt,name=Pass,proto3" json:"Pass,omitempty"`
	SecretKey   string                 `protobuf:"bytes,4,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	EncMode     string                 `protobuf:"bytes,5,opt,name=EncMode,proto3" json:"EncMode,omitempty"`
	Charset     string                 `protobuf:"bytes,6,opt,name=Charset,proto3" json:"Charset,omitempty"`
	ShellType   string                 `protobuf:"bytes,7,opt,name=ShellType,proto3" json:"ShellType,omitempty"`
	ShellScript string                 `protobuf:"bytes,8,opt,name=ShellScript,proto3" json:"ShellScript,omitempty"`
	Status      bool                   `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`
	Tag         string                 `protobuf:"bytes,10,opt,name=Tag,proto3" json:"Tag,omitempty"`
	// Proxy
	Proxy            string            `protobuf:"bytes,11,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	Headers          map[string]string `protobuf:"bytes,12,rep,name=Headers,proto3" json:"Headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Remark           string            `protobuf:"bytes,13,opt,name=Remark,proto3" json:"Remark,omitempty"`
	CreatedAt        int64             `protobuf:"varint,14,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        int64             `protobuf:"varint,15,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	PacketCodecName  string            `protobuf:"bytes,16,opt,name=PacketCodecName,proto3" json:"PacketCodecName,omitempty"`
	PayloadCodecName string            `protobuf:"bytes,17,opt,name=PayloadCodecName,proto3" json:"PayloadCodecName,omitempty"`
	Posts            map[string]string `protobuf:"bytes,18,rep,name=Posts,proto3" json:"Posts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ShellOptions     *ShellOptions     `protobuf:"bytes,19,opt,name=ShellOptions,proto3" json:"ShellOptions,omitempty"`
	Os               string            `protobuf:"bytes,20,opt,name=Os,proto3" json:"Os,omitempty"`
	ResDecMOde       string            `protobuf:"bytes,21,opt,name=ResDecMOde,proto3" json:"ResDecMOde,omitempty"` //解密方式
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WebShell) Reset() {
	*x = WebShell{}
	mi := &file_yakgrpc_proto_msgTypes[400]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebShell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebShell) ProtoMessage() {}

func (x *WebShell) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[400]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebShell.ProtoReflect.Descriptor instead.
func (*WebShell) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{400}
}

func (x *WebShell) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebShell) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebShell) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *WebShell) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *WebShell) GetEncMode() string {
	if x != nil {
		return x.EncMode
	}
	return ""
}

func (x *WebShell) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *WebShell) GetShellType() string {
	if x != nil {
		return x.ShellType
	}
	return ""
}

func (x *WebShell) GetShellScript() string {
	if x != nil {
		return x.ShellScript
	}
	return ""
}

func (x *WebShell) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *WebShell) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *WebShell) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *WebShell) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *WebShell) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *WebShell) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WebShell) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *WebShell) GetPacketCodecName() string {
	if x != nil {
		return x.PacketCodecName
	}
	return ""
}

func (x *WebShell) GetPayloadCodecName() string {
	if x != nil {
		return x.PayloadCodecName
	}
	return ""
}

func (x *WebShell) GetPosts() map[string]string {
	if x != nil {
		return x.Posts
	}
	return nil
}

func (x *WebShell) GetShellOptions() *ShellOptions {
	if x != nil {
		return x.ShellOptions
	}
	return nil
}

func (x *WebShell) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *WebShell) GetResDecMOde() string {
	if x != nil {
		return x.ResDecMOde
	}
	return ""
}

type ShellGenerate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncMode       EncMode                `protobuf:"varint,1,opt,name=EncMode,proto3,enum=ypb.EncMode" json:"EncMode,omitempty"`
	Script        ShellScript            `protobuf:"varint,2,opt,name=Script,proto3,enum=ypb.ShellScript" json:"Script,omitempty"`
	Pass          string                 `protobuf:"bytes,3,opt,name=Pass,proto3" json:"Pass,omitempty"`
	Confuse       bool                   `protobuf:"varint,4,opt,name=Confuse,proto3" json:"Confuse,omitempty"` //是否混淆
	IsSession     bool                   `protobuf:"varint,5,opt,name=IsSession,proto3" json:"IsSession,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellGenerate) Reset() {
	*x = ShellGenerate{}
	mi := &file_yakgrpc_proto_msgTypes[401]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellGenerate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellGenerate) ProtoMessage() {}

func (x *ShellGenerate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[401]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellGenerate.ProtoReflect.Descriptor instead.
func (*ShellGenerate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{401}
}

func (x *ShellGenerate) GetEncMode() EncMode {
	if x != nil {
		return x.EncMode
	}
	return EncMode_Raw
}

func (x *ShellGenerate) GetScript() ShellScript {
	if x != nil {
		return x.Script
	}
	return ShellScript_JSP
}

func (x *ShellGenerate) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *ShellGenerate) GetConfuse() bool {
	if x != nil {
		return x.Confuse
	}
	return false
}

func (x *ShellGenerate) GetIsSession() bool {
	if x != nil {
		return x.IsSession
	}
	return false
}

type ShellOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RetryCount    int64                  `protobuf:"varint,1,opt,name=RetryCount,proto3" json:"RetryCount,omitempty"` //重新时间
	Timeout       int64                  `protobuf:"varint,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`       //超时时间
	BlockSize     int64                  `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`   //分块大小
	MaxSize       int64                  `protobuf:"varint,4,opt,name=MaxSize,proto3" json:"MaxSize,omitempty"`       //上传的最大包（M）
	UpdateTime    int64                  `protobuf:"varint,5,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"` //更新时间，当是session-mode的时候涉及到session过期的问题
	IsSession     bool                   `protobuf:"varint,6,opt,name=IsSession,proto3" json:"IsSession,omitempty"`   //是否是session类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellOptions) Reset() {
	*x = ShellOptions{}
	mi := &file_yakgrpc_proto_msgTypes[402]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellOptions) ProtoMessage() {}

func (x *ShellOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[402]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellOptions.ProtoReflect.Descriptor instead.
func (*ShellOptions) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{402}
}

func (x *ShellOptions) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *ShellOptions) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ShellOptions) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *ShellOptions) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *ShellOptions) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ShellOptions) GetIsSession() bool {
	if x != nil {
		return x.IsSession
	}
	return false
}

type WebShellRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebShellRequest) Reset() {
	*x = WebShellRequest{}
	mi := &file_yakgrpc_proto_msgTypes[403]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebShellRequest) ProtoMessage() {}

func (x *WebShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[403]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebShellRequest.ProtoReflect.Descriptor instead.
func (*WebShellRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{403}
}

func (x *WebShellRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WebShellResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         bool                   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebShellResponse) Reset() {
	*x = WebShellResponse{}
	mi := &file_yakgrpc_proto_msgTypes[404]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebShellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebShellResponse) ProtoMessage() {}

func (x *WebShellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[404]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebShellResponse.ProtoReflect.Descriptor instead.
func (*WebShellResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{404}
}

func (x *WebShellResponse) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *WebShellResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryWebShellsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=Tag,proto3" json:"Tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryWebShellsRequest) Reset() {
	*x = QueryWebShellsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[405]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWebShellsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWebShellsRequest) ProtoMessage() {}

func (x *QueryWebShellsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[405]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWebShellsRequest.ProtoReflect.Descriptor instead.
func (*QueryWebShellsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{405}
}

func (x *QueryWebShellsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryWebShellsRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type QueryWebShellsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*WebShell            `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryWebShellsResponse) Reset() {
	*x = QueryWebShellsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[406]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWebShellsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWebShellsResponse) ProtoMessage() {}

func (x *QueryWebShellsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[406]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWebShellsResponse.ProtoReflect.Descriptor instead.
func (*QueryWebShellsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{406}
}

func (x *QueryWebShellsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryWebShellsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryWebShellsResponse) GetData() []*WebShell {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateWebShellRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	Pass          string                 `protobuf:"bytes,3,opt,name=Pass,proto3" json:"Pass,omitempty"`
	SecretKey     string                 `protobuf:"bytes,4,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	EncMode       string                 `protobuf:"bytes,5,opt,name=EncMode,proto3" json:"EncMode,omitempty"`
	Charset       string                 `protobuf:"bytes,6,opt,name=Charset,proto3" json:"Charset,omitempty"`
	ShellType     string                 `protobuf:"bytes,7,opt,name=ShellType,proto3" json:"ShellType,omitempty"`
	ShellScript   string                 `protobuf:"bytes,8,opt,name=ShellScript,proto3" json:"ShellScript,omitempty"`
	Tag           string                 `protobuf:"bytes,10,opt,name=Tag,proto3" json:"Tag,omitempty"`
	ShellOptions  *ShellOptions          `protobuf:"bytes,11,opt,name=ShellOptions,proto3" json:"ShellOptions,omitempty"`
	Os            string                 `protobuf:"bytes,12,opt,name=Os,proto3" json:"Os,omitempty"`
	ResDataMOde   string                 `protobuf:"bytes,13,opt,name=ResDataMOde,proto3" json:"ResDataMOde,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,14,rep,name=Headers,proto3" json:"Headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Posts         map[string]string      `protobuf:"bytes,15,rep,name=Posts,proto3" json:"Posts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWebShellRequest) Reset() {
	*x = UpdateWebShellRequest{}
	mi := &file_yakgrpc_proto_msgTypes[407]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWebShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWebShellRequest) ProtoMessage() {}

func (x *UpdateWebShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[407]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWebShellRequest.ProtoReflect.Descriptor instead.
func (*UpdateWebShellRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{407}
}

func (x *UpdateWebShellRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateWebShellRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateWebShellRequest) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *UpdateWebShellRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *UpdateWebShellRequest) GetEncMode() string {
	if x != nil {
		return x.EncMode
	}
	return ""
}

func (x *UpdateWebShellRequest) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *UpdateWebShellRequest) GetShellType() string {
	if x != nil {
		return x.ShellType
	}
	return ""
}

func (x *UpdateWebShellRequest) GetShellScript() string {
	if x != nil {
		return x.ShellScript
	}
	return ""
}

func (x *UpdateWebShellRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UpdateWebShellRequest) GetShellOptions() *ShellOptions {
	if x != nil {
		return x.ShellOptions
	}
	return nil
}

func (x *UpdateWebShellRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *UpdateWebShellRequest) GetResDataMOde() string {
	if x != nil {
		return x.ResDataMOde
	}
	return ""
}

func (x *UpdateWebShellRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *UpdateWebShellRequest) GetPosts() map[string]string {
	if x != nil {
		return x.Posts
	}
	return nil
}

type DeleteWebShellRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Ids           []int64                `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWebShellRequest) Reset() {
	*x = DeleteWebShellRequest{}
	mi := &file_yakgrpc_proto_msgTypes[408]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWebShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebShellRequest) ProtoMessage() {}

func (x *DeleteWebShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[408]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebShellRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebShellRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{408}
}

func (x *DeleteWebShellRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteWebShellRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type YakDNSLogBridgeAddr struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DNSLogAddr       string                 `protobuf:"bytes,1,opt,name=DNSLogAddr,proto3" json:"DNSLogAddr,omitempty"`
	DNSLogAddrSecret string                 `protobuf:"bytes,2,opt,name=DNSLogAddrSecret,proto3" json:"DNSLogAddrSecret,omitempty"`
	DNSMode          string                 `protobuf:"bytes,3,opt,name=DNSMode,proto3" json:"DNSMode,omitempty"`
	UseLocal         bool                   `protobuf:"varint,4,opt,name=UseLocal,proto3" json:"UseLocal,omitempty"`
	UseRemote        bool                   `protobuf:"varint,5,opt,name=UseRemote,proto3" json:"UseRemote,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *YakDNSLogBridgeAddr) Reset() {
	*x = YakDNSLogBridgeAddr{}
	mi := &file_yakgrpc_proto_msgTypes[409]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakDNSLogBridgeAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakDNSLogBridgeAddr) ProtoMessage() {}

func (x *YakDNSLogBridgeAddr) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[409]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakDNSLogBridgeAddr.ProtoReflect.Descriptor instead.
func (*YakDNSLogBridgeAddr) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{409}
}

func (x *YakDNSLogBridgeAddr) GetDNSLogAddr() string {
	if x != nil {
		return x.DNSLogAddr
	}
	return ""
}

func (x *YakDNSLogBridgeAddr) GetDNSLogAddrSecret() string {
	if x != nil {
		return x.DNSLogAddrSecret
	}
	return ""
}

func (x *YakDNSLogBridgeAddr) GetDNSMode() string {
	if x != nil {
		return x.DNSMode
	}
	return ""
}

func (x *YakDNSLogBridgeAddr) GetUseLocal() bool {
	if x != nil {
		return x.UseLocal
	}
	return false
}

func (x *YakDNSLogBridgeAddr) GetUseRemote() bool {
	if x != nil {
		return x.UseRemote
	}
	return false
}

type RequireDNSLogDomainByScriptRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	ScriptName    string                 `protobuf:"bytes,2,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequireDNSLogDomainByScriptRequest) Reset() {
	*x = RequireDNSLogDomainByScriptRequest{}
	mi := &file_yakgrpc_proto_msgTypes[410]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequireDNSLogDomainByScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireDNSLogDomainByScriptRequest) ProtoMessage() {}

func (x *RequireDNSLogDomainByScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[410]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireDNSLogDomainByScriptRequest.ProtoReflect.Descriptor instead.
func (*RequireDNSLogDomainByScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{410}
}

func (x *RequireDNSLogDomainByScriptRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireDNSLogDomainByScriptRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

type QueryDNSLogByTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	DNSLogAddr    string                 `protobuf:"bytes,2,opt,name=DNSLogAddr,proto3" json:"DNSLogAddr,omitempty"`
	DNSMode       string                 `protobuf:"bytes,3,opt,name=DNSMode,proto3" json:"DNSMode,omitempty"`
	UseLocal      bool                   `protobuf:"varint,4,opt,name=UseLocal,proto3" json:"UseLocal,omitempty"`
	UseRemote     bool                   `protobuf:"varint,5,opt,name=UseRemote,proto3" json:"UseRemote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryDNSLogByTokenRequest) Reset() {
	*x = QueryDNSLogByTokenRequest{}
	mi := &file_yakgrpc_proto_msgTypes[411]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDNSLogByTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSLogByTokenRequest) ProtoMessage() {}

func (x *QueryDNSLogByTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[411]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSLogByTokenRequest.ProtoReflect.Descriptor instead.
func (*QueryDNSLogByTokenRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{411}
}

func (x *QueryDNSLogByTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryDNSLogByTokenRequest) GetDNSLogAddr() string {
	if x != nil {
		return x.DNSLogAddr
	}
	return ""
}

func (x *QueryDNSLogByTokenRequest) GetDNSMode() string {
	if x != nil {
		return x.DNSMode
	}
	return ""
}

func (x *QueryDNSLogByTokenRequest) GetUseLocal() bool {
	if x != nil {
		return x.UseLocal
	}
	return false
}

func (x *QueryDNSLogByTokenRequest) GetUseRemote() bool {
	if x != nil {
		return x.UseRemote
	}
	return false
}

type QueryDNSLogByTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*DNSLogEvent         `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryDNSLogByTokenResponse) Reset() {
	*x = QueryDNSLogByTokenResponse{}
	mi := &file_yakgrpc_proto_msgTypes[412]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDNSLogByTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSLogByTokenResponse) ProtoMessage() {}

func (x *QueryDNSLogByTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[412]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSLogByTokenResponse.ProtoReflect.Descriptor instead.
func (*QueryDNSLogByTokenResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{412}
}

func (x *QueryDNSLogByTokenResponse) GetEvents() []*DNSLogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type DNSLogEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DNSType       string                 `protobuf:"bytes,1,opt,name=DNSType,proto3" json:"DNSType,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Domain        string                 `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	RemoteAddr    string                 `protobuf:"bytes,4,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP      string                 `protobuf:"bytes,5,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort    int32                  `protobuf:"varint,6,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	Raw           []byte                 `protobuf:"bytes,7,opt,name=Raw,proto3" json:"Raw,omitempty"`
	Timestamp     int64                  `protobuf:"varint,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSLogEvent) Reset() {
	*x = DNSLogEvent{}
	mi := &file_yakgrpc_proto_msgTypes[413]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSLogEvent) ProtoMessage() {}

func (x *DNSLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[413]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSLogEvent.ProtoReflect.Descriptor instead.
func (*DNSLogEvent) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{413}
}

func (x *DNSLogEvent) GetDNSType() string {
	if x != nil {
		return x.DNSType
	}
	return ""
}

func (x *DNSLogEvent) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DNSLogEvent) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *DNSLogEvent) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *DNSLogEvent) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *DNSLogEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DNSLogRootDomain struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSLogRootDomain) Reset() {
	*x = DNSLogRootDomain{}
	mi := &file_yakgrpc_proto_msgTypes[414]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSLogRootDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSLogRootDomain) ProtoMessage() {}

func (x *DNSLogRootDomain) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[414]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSLogRootDomain.ProtoReflect.Descriptor instead.
func (*DNSLogRootDomain) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{414}
}

func (x *DNSLogRootDomain) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSLogRootDomain) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetGlobalReverseServerResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PublicReverseIP   string                 `protobuf:"bytes,1,opt,name=PublicReverseIP,proto3" json:"PublicReverseIP,omitempty"`
	PublicReversePort int32                  `protobuf:"varint,2,opt,name=PublicReversePort,proto3" json:"PublicReversePort,omitempty"`
	LocalReverseAddr  string                 `protobuf:"bytes,3,opt,name=LocalReverseAddr,proto3" json:"LocalReverseAddr,omitempty"`
	LocalReversePort  int32                  `protobuf:"varint,4,opt,name=LocalReversePort,proto3" json:"LocalReversePort,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetGlobalReverseServerResponse) Reset() {
	*x = GetGlobalReverseServerResponse{}
	mi := &file_yakgrpc_proto_msgTypes[415]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGlobalReverseServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalReverseServerResponse) ProtoMessage() {}

func (x *GetGlobalReverseServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[415]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalReverseServerResponse.ProtoReflect.Descriptor instead.
func (*GetGlobalReverseServerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{415}
}

func (x *GetGlobalReverseServerResponse) GetPublicReverseIP() string {
	if x != nil {
		return x.PublicReverseIP
	}
	return ""
}

func (x *GetGlobalReverseServerResponse) GetPublicReversePort() int32 {
	if x != nil {
		return x.PublicReversePort
	}
	return 0
}

func (x *GetGlobalReverseServerResponse) GetLocalReverseAddr() string {
	if x != nil {
		return x.LocalReverseAddr
	}
	return ""
}

func (x *GetGlobalReverseServerResponse) GetLocalReversePort() int32 {
	if x != nil {
		return x.LocalReversePort
	}
	return 0
}

type AvailableLocalAddrResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interfaces    []*NetInterface        `protobuf:"bytes,1,rep,name=Interfaces,proto3" json:"Interfaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvailableLocalAddrResponse) Reset() {
	*x = AvailableLocalAddrResponse{}
	mi := &file_yakgrpc_proto_msgTypes[416]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvailableLocalAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableLocalAddrResponse) ProtoMessage() {}

func (x *AvailableLocalAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[416]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableLocalAddrResponse.ProtoReflect.Descriptor instead.
func (*AvailableLocalAddrResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{416}
}

func (x *AvailableLocalAddrResponse) GetInterfaces() []*NetInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type NetInterface struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Addr             string                 `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	IP               string                 `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
	Description      string                 `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	IsIpv4           bool                   `protobuf:"varint,5,opt,name=IsIpv4,proto3" json:"IsIpv4,omitempty"`
	IsIpv6           bool                   `protobuf:"varint,6,opt,name=IsIpv6,proto3" json:"IsIpv6,omitempty"`
	NetInterfaceName string                 `protobuf:"bytes,7,opt,name=NetInterfaceName,proto3" json:"NetInterfaceName,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NetInterface) Reset() {
	*x = NetInterface{}
	mi := &file_yakgrpc_proto_msgTypes[417]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface) ProtoMessage() {}

func (x *NetInterface) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[417]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface.ProtoReflect.Descriptor instead.
func (*NetInterface) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{417}
}

func (x *NetInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetInterface) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *NetInterface) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *NetInterface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetInterface) GetIsIpv4() bool {
	if x != nil {
		return x.IsIpv4
	}
	return false
}

func (x *NetInterface) GetIsIpv6() bool {
	if x != nil {
		return x.IsIpv6
	}
	return false
}

func (x *NetInterface) GetNetInterfaceName() string {
	if x != nil {
		return x.NetInterfaceName
	}
	return ""
}

type ConfigGlobalReverseParams struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	ConnectParams *GetTunnelServerExternalIPParams `protobuf:"bytes,1,opt,name=ConnectParams,proto3" json:"ConnectParams,omitempty"`
	LocalAddr     string                           `protobuf:"bytes,2,opt,name=LocalAddr,proto3" json:"LocalAddr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigGlobalReverseParams) Reset() {
	*x = ConfigGlobalReverseParams{}
	mi := &file_yakgrpc_proto_msgTypes[418]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigGlobalReverseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGlobalReverseParams) ProtoMessage() {}

func (x *ConfigGlobalReverseParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[418]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGlobalReverseParams.ProtoReflect.Descriptor instead.
func (*ConfigGlobalReverseParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{418}
}

func (x *ConfigGlobalReverseParams) GetConnectParams() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

func (x *ConfigGlobalReverseParams) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

type DeleteRiskRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash             string                 `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Ids              []int64                `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Filter           *QueryRisksRequest     `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	DeleteAll        bool                   `protobuf:"varint,5,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DeleteRepetition bool                   `protobuf:"varint,6,opt,name=DeleteRepetition,proto3" json:"DeleteRepetition,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeleteRiskRequest) Reset() {
	*x = DeleteRiskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[419]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRiskRequest) ProtoMessage() {}

func (x *DeleteRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[419]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRiskRequest.ProtoReflect.Descriptor instead.
func (*DeleteRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{419}
}

func (x *DeleteRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DeleteRiskRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteRiskRequest) GetFilter() *QueryRisksRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteRiskRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteRiskRequest) GetDeleteRepetition() bool {
	if x != nil {
		return x.DeleteRepetition
	}
	return false
}

type QueryRiskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Ids           []int64                `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Filter        *QueryRisksRequest     `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRiskRequest) Reset() {
	*x = QueryRiskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[420]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRiskRequest) ProtoMessage() {}

func (x *QueryRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[420]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRiskRequest.ProtoReflect.Descriptor instead.
func (*QueryRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{420}
}

func (x *QueryRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *QueryRiskRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryRiskRequest) GetFilter() *QueryRisksRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

type Risk struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Hash            string                 `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	IP              string                 `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Url             string                 `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	Port            int32                  `protobuf:"varint,4,opt,name=Port,proto3" json:"Port,omitempty"`
	Host            string                 `protobuf:"bytes,5,opt,name=Host,proto3" json:"Host,omitempty"`
	Title           string                 `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleVerbose    string                 `protobuf:"bytes,7,opt,name=TitleVerbose,proto3" json:"TitleVerbose,omitempty"`
	RiskType        string                 `protobuf:"bytes,8,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	RiskTypeVerbose string                 `protobuf:"bytes,9,opt,name=RiskTypeVerbose,proto3" json:"RiskTypeVerbose,omitempty"`
	Parameter       string                 `protobuf:"bytes,10,opt,name=Parameter,proto3" json:"Parameter,omitempty"`
	Payload         string                 `protobuf:"bytes,11,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Details         string                 `protobuf:"bytes,12,opt,name=Details,proto3" json:"Details,omitempty"`
	FromYakScript   string                 `protobuf:"bytes,13,opt,name=FromYakScript,proto3" json:"FromYakScript,omitempty"`
	YakScriptUUID   string                 `protobuf:"bytes,29,opt,name=YakScriptUUID,proto3" json:"YakScriptUUID,omitempty"`
	WaitingVerified bool                   `protobuf:"varint,14,opt,name=WaitingVerified,proto3" json:"WaitingVerified,omitempty"`
	ReverseToken    string                 `protobuf:"bytes,15,opt,name=ReverseToken,proto3" json:"ReverseToken,omitempty"`
	Id              int64                  `protobuf:"varint,18,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt       int64                  `protobuf:"varint,16,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       int64                  `protobuf:"varint,17,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Severity        string                 `protobuf:"bytes,19,opt,name=Severity,proto3" json:"Severity,omitempty"`
	// 数据包提取出来！
	Request  []byte `protobuf:"bytes,20,opt,name=Request,proto3" json:"Request,omitempty"`
	Response []byte `protobuf:"bytes,21,opt,name=Response,proto3" json:"Response,omitempty"`
	// 这个一般用于生成报告追踪报告中产生的漏洞
	RuntimeId          string `protobuf:"bytes,22,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	CVE                string `protobuf:"bytes,23,opt,name=CVE,proto3" json:"CVE,omitempty"`
	Description        string `protobuf:"bytes,24,opt,name=Description,proto3" json:"Description,omitempty"`
	Solution           string `protobuf:"bytes,25,opt,name=Solution,proto3" json:"Solution,omitempty"`
	TaskName           string `protobuf:"bytes,26,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	Tags               string `protobuf:"bytes,27,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsRead             bool   `protobuf:"varint,28,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
	ResultID           uint64 `protobuf:"varint,30,opt,name=ResultID,proto3" json:"ResultID,omitempty"`
	SyntaxFlowVariable string `protobuf:"bytes,31,opt,name=SyntaxFlowVariable,proto3" json:"SyntaxFlowVariable,omitempty"`
	ProgramName        string `protobuf:"bytes,32,opt,name=ProgramName,proto3" json:"ProgramName,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Risk) Reset() {
	*x = Risk{}
	mi := &file_yakgrpc_proto_msgTypes[421]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Risk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Risk) ProtoMessage() {}

func (x *Risk) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[421]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Risk.ProtoReflect.Descriptor instead.
func (*Risk) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{421}
}

func (x *Risk) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Risk) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Risk) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Risk) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Risk) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Risk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Risk) GetTitleVerbose() string {
	if x != nil {
		return x.TitleVerbose
	}
	return ""
}

func (x *Risk) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *Risk) GetRiskTypeVerbose() string {
	if x != nil {
		return x.RiskTypeVerbose
	}
	return ""
}

func (x *Risk) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *Risk) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Risk) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Risk) GetFromYakScript() string {
	if x != nil {
		return x.FromYakScript
	}
	return ""
}

func (x *Risk) GetYakScriptUUID() string {
	if x != nil {
		return x.YakScriptUUID
	}
	return ""
}

func (x *Risk) GetWaitingVerified() bool {
	if x != nil {
		return x.WaitingVerified
	}
	return false
}

func (x *Risk) GetReverseToken() string {
	if x != nil {
		return x.ReverseToken
	}
	return ""
}

func (x *Risk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Risk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Risk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Risk) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Risk) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Risk) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Risk) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *Risk) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *Risk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Risk) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *Risk) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Risk) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Risk) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *Risk) GetResultID() uint64 {
	if x != nil {
		return x.ResultID
	}
	return 0
}

func (x *Risk) GetSyntaxFlowVariable() string {
	if x != nil {
		return x.SyntaxFlowVariable
	}
	return ""
}

func (x *Risk) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

type QueryRisksRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Pagination      *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Search          string                 `protobuf:"bytes,2,opt,name=Search,proto3" json:"Search,omitempty"`
	Network         string                 `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	Ports           string                 `protobuf:"bytes,4,opt,name=Ports,proto3" json:"Ports,omitempty"`
	RiskType        string                 `protobuf:"bytes,5,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	Token           string                 `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	WaitingVerified bool                   `protobuf:"varint,7,opt,name=WaitingVerified,proto3" json:"WaitingVerified,omitempty"`
	Severity        string                 `protobuf:"bytes,8,opt,name=Severity,proto3" json:"Severity,omitempty"`
	FromId          int64                  `protobuf:"varint,9,opt,name=FromId,proto3" json:"FromId,omitempty"`
	BeforeCreatedAt int64                  `protobuf:"varint,17,opt,name=BeforeCreatedAt,proto3" json:"BeforeCreatedAt,omitempty"`
	AfterCreatedAt  int64                  `protobuf:"varint,18,opt,name=AfterCreatedAt,proto3" json:"AfterCreatedAt,omitempty"`
	UntilId         int64                  `protobuf:"varint,10,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	Tags            string                 `protobuf:"bytes,11,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsRead          string                 `protobuf:"bytes,12,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
	Title           string                 `protobuf:"bytes,13,opt,name=Title,proto3" json:"Title,omitempty"`
	Ids             []int64                `protobuf:"varint,14,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	RuntimeId       string                 `protobuf:"bytes,15,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	// ssa program
	SSAProgramNames []string `protobuf:"bytes,16,rep,name=SSAProgramNames,proto3" json:"SSAProgramNames,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryRisksRequest) Reset() {
	*x = QueryRisksRequest{}
	mi := &file_yakgrpc_proto_msgTypes[422]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRisksRequest) ProtoMessage() {}

func (x *QueryRisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[422]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRisksRequest.ProtoReflect.Descriptor instead.
func (*QueryRisksRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{422}
}

func (x *QueryRisksRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryRisksRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *QueryRisksRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *QueryRisksRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *QueryRisksRequest) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *QueryRisksRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryRisksRequest) GetWaitingVerified() bool {
	if x != nil {
		return x.WaitingVerified
	}
	return false
}

func (x *QueryRisksRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *QueryRisksRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryRisksRequest) GetBeforeCreatedAt() int64 {
	if x != nil {
		return x.BeforeCreatedAt
	}
	return 0
}

func (x *QueryRisksRequest) GetAfterCreatedAt() int64 {
	if x != nil {
		return x.AfterCreatedAt
	}
	return 0
}

func (x *QueryRisksRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *QueryRisksRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *QueryRisksRequest) GetIsRead() string {
	if x != nil {
		return x.IsRead
	}
	return ""
}

func (x *QueryRisksRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryRisksRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryRisksRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *QueryRisksRequest) GetSSAProgramNames() []string {
	if x != nil {
		return x.SSAProgramNames
	}
	return nil
}

type QueryRisksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*Risk                `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRisksResponse) Reset() {
	*x = QueryRisksResponse{}
	mi := &file_yakgrpc_proto_msgTypes[423]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRisksResponse) ProtoMessage() {}

func (x *QueryRisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[423]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRisksResponse.ProtoReflect.Descriptor instead.
func (*QueryRisksResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{423}
}

func (x *QueryRisksResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryRisksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryRisksResponse) GetData() []*Risk {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryNewRiskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfterId       int64                  `protobuf:"varint,1,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewRiskRequest) Reset() {
	*x = QueryNewRiskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[424]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewRiskRequest) ProtoMessage() {}

func (x *QueryNewRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[424]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewRiskRequest.ProtoReflect.Descriptor instead.
func (*QueryNewRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{424}
}

func (x *QueryNewRiskRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

type QueryNewRiskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*NewRisk             `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	NewRiskTotal  int64                  `protobuf:"varint,2,opt,name=NewRiskTotal,proto3" json:"NewRiskTotal,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Unread        int64                  `protobuf:"varint,4,opt,name=Unread,proto3" json:"Unread,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewRiskResponse) Reset() {
	*x = QueryNewRiskResponse{}
	mi := &file_yakgrpc_proto_msgTypes[425]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewRiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewRiskResponse) ProtoMessage() {}

func (x *QueryNewRiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[425]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewRiskResponse.ProtoReflect.Descriptor instead.
func (*QueryNewRiskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{425}
}

func (x *QueryNewRiskResponse) GetData() []*NewRisk {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryNewRiskResponse) GetNewRiskTotal() int64 {
	if x != nil {
		return x.NewRiskTotal
	}
	return 0
}

func (x *QueryNewRiskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryNewRiskResponse) GetUnread() int64 {
	if x != nil {
		return x.Unread
	}
	return 0
}

type QueryRiskTagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RiskTags      []*FieldGroup          `protobuf:"bytes,1,rep,name=RiskTags,proto3" json:"RiskTags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRiskTagsResponse) Reset() {
	*x = QueryRiskTagsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[426]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRiskTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRiskTagsResponse) ProtoMessage() {}

func (x *QueryRiskTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[426]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRiskTagsResponse.ProtoReflect.Descriptor instead.
func (*QueryRiskTagsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{426}
}

func (x *QueryRiskTagsResponse) GetRiskTags() []*FieldGroup {
	if x != nil {
		return x.RiskTags
	}
	return nil
}

type RiskFieldGroupResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RiskIPGroup    []*FieldGroup          `protobuf:"bytes,1,rep,name=RiskIPGroup,proto3" json:"RiskIPGroup,omitempty"`
	RiskLevelGroup []*FieldName           `protobuf:"bytes,2,rep,name=RiskLevelGroup,proto3" json:"RiskLevelGroup,omitempty"`
	RiskTypeGroup  []*FieldName           `protobuf:"bytes,3,rep,name=RiskTypeGroup,proto3" json:"RiskTypeGroup,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RiskFieldGroupResponse) Reset() {
	*x = RiskFieldGroupResponse{}
	mi := &file_yakgrpc_proto_msgTypes[427]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskFieldGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFieldGroupResponse) ProtoMessage() {}

func (x *RiskFieldGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[427]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFieldGroupResponse.ProtoReflect.Descriptor instead.
func (*RiskFieldGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{427}
}

func (x *RiskFieldGroupResponse) GetRiskIPGroup() []*FieldGroup {
	if x != nil {
		return x.RiskIPGroup
	}
	return nil
}

func (x *RiskFieldGroupResponse) GetRiskLevelGroup() []*FieldName {
	if x != nil {
		return x.RiskLevelGroup
	}
	return nil
}

func (x *RiskFieldGroupResponse) GetRiskTypeGroup() []*FieldName {
	if x != nil {
		return x.RiskTypeGroup
	}
	return nil
}

type FieldGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldGroup) Reset() {
	*x = FieldGroup{}
	mi := &file_yakgrpc_proto_msgTypes[428]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldGroup) ProtoMessage() {}

func (x *FieldGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[428]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldGroup.ProtoReflect.Descriptor instead.
func (*FieldGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{428}
}

func (x *FieldGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldGroup) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type NewRisk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Id            int64                  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,4,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Verbose       string                 `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	TitleVerbose  string                 `protobuf:"bytes,6,opt,name=TitleVerbose,proto3" json:"TitleVerbose,omitempty"`
	IsRead        bool                   `protobuf:"varint,7,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewRisk) Reset() {
	*x = NewRisk{}
	mi := &file_yakgrpc_proto_msgTypes[429]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRisk) ProtoMessage() {}

func (x *NewRisk) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[429]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRisk.ProtoReflect.Descriptor instead.
func (*NewRisk) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{429}
}

func (x *NewRisk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewRisk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewRisk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NewRisk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *NewRisk) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *NewRisk) GetTitleVerbose() string {
	if x != nil {
		return x.TitleVerbose
	}
	return ""
}

func (x *NewRisk) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

type NewRiskReadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfterId       int64                  `protobuf:"varint,1,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	Ids           []int64                `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Filter        *QueryRisksRequest     `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewRiskReadRequest) Reset() {
	*x = NewRiskReadRequest{}
	mi := &file_yakgrpc_proto_msgTypes[430]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewRiskReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRiskReadRequest) ProtoMessage() {}

func (x *NewRiskReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[430]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRiskReadRequest.ProtoReflect.Descriptor instead.
func (*NewRiskReadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{430}
}

func (x *NewRiskReadRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *NewRiskReadRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *NewRiskReadRequest) GetFilter() *QueryRisksRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UploadRiskToOnlineRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Token               string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	ProjectName         string                 `protobuf:"bytes,2,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Hash                []string               `protobuf:"bytes,3,rep,name=Hash,proto3" json:"Hash,omitempty"`
	ExternalModule      string                 `protobuf:"bytes,4,opt,name=ExternalModule,proto3" json:"ExternalModule,omitempty"`
	ExternalProjectCode string                 `protobuf:"bytes,5,opt,name=ExternalProjectCode,proto3" json:"ExternalProjectCode,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UploadRiskToOnlineRequest) Reset() {
	*x = UploadRiskToOnlineRequest{}
	mi := &file_yakgrpc_proto_msgTypes[431]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadRiskToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRiskToOnlineRequest) ProtoMessage() {}

func (x *UploadRiskToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[431]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRiskToOnlineRequest.ProtoReflect.Descriptor instead.
func (*UploadRiskToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{431}
}

func (x *UploadRiskToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UploadRiskToOnlineRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UploadRiskToOnlineRequest) GetHash() []string {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *UploadRiskToOnlineRequest) GetExternalModule() string {
	if x != nil {
		return x.ExternalModule
	}
	return ""
}

func (x *UploadRiskToOnlineRequest) GetExternalProjectCode() string {
	if x != nil {
		return x.ExternalProjectCode
	}
	return ""
}

type SetTagForRiskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTagForRiskRequest) Reset() {
	*x = SetTagForRiskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[432]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagForRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagForRiskRequest) ProtoMessage() {}

func (x *SetTagForRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[432]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagForRiskRequest.ProtoReflect.Descriptor instead.
func (*SetTagForRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{432}
}

func (x *SetTagForRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetTagForRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SetTagForRiskRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VerifyTunnelServerDomainParams struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	ConnectParams *GetTunnelServerExternalIPParams `protobuf:"bytes,1,opt,name=ConnectParams,proto3" json:"ConnectParams,omitempty"`
	Domain        string                           `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyTunnelServerDomainParams) Reset() {
	*x = VerifyTunnelServerDomainParams{}
	mi := &file_yakgrpc_proto_msgTypes[433]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyTunnelServerDomainParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTunnelServerDomainParams) ProtoMessage() {}

func (x *VerifyTunnelServerDomainParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[433]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTunnelServerDomainParams.ProtoReflect.Descriptor instead.
func (*VerifyTunnelServerDomainParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{433}
}

func (x *VerifyTunnelServerDomainParams) GetConnectParams() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

func (x *VerifyTunnelServerDomainParams) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type VerifyTunnelServerDomainResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Ok            bool                   `protobuf:"varint,2,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyTunnelServerDomainResponse) Reset() {
	*x = VerifyTunnelServerDomainResponse{}
	mi := &file_yakgrpc_proto_msgTypes[434]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyTunnelServerDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTunnelServerDomainResponse) ProtoMessage() {}

func (x *VerifyTunnelServerDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[434]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTunnelServerDomainResponse.ProtoReflect.Descriptor instead.
func (*VerifyTunnelServerDomainResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{434}
}

func (x *VerifyTunnelServerDomainResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VerifyTunnelServerDomainResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *VerifyTunnelServerDomainResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetTunnelServerExternalIPParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Secret        string                 `protobuf:"bytes,2,opt,name=Secret,proto3" json:"Secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTunnelServerExternalIPParams) Reset() {
	*x = GetTunnelServerExternalIPParams{}
	mi := &file_yakgrpc_proto_msgTypes[435]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTunnelServerExternalIPParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelServerExternalIPParams) ProtoMessage() {}

func (x *GetTunnelServerExternalIPParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[435]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelServerExternalIPParams.ProtoReflect.Descriptor instead.
func (*GetTunnelServerExternalIPParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{435}
}

func (x *GetTunnelServerExternalIPParams) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *GetTunnelServerExternalIPParams) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type GetTunnelServerExternalIPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IP            string                 `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTunnelServerExternalIPResponse) Reset() {
	*x = GetTunnelServerExternalIPResponse{}
	mi := &file_yakgrpc_proto_msgTypes[436]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTunnelServerExternalIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelServerExternalIPResponse) ProtoMessage() {}

func (x *GetTunnelServerExternalIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[436]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelServerExternalIPResponse.ProtoReflect.Descriptor instead.
func (*GetTunnelServerExternalIPResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{436}
}

func (x *GetTunnelServerExternalIPResponse) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type StartFacadesParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 端口复用的
	LocalFacadeHost string `protobuf:"bytes,41,opt,name=LocalFacadeHost,proto3" json:"LocalFacadeHost,omitempty"`
	LocalFacadePort int32  `protobuf:"varint,42,opt,name=LocalFacadePort,proto3" json:"LocalFacadePort,omitempty"`
	// bool EnableRMIServer = 1;
	// int32 RMILocalPort = 2;
	EnableDNSLogServer bool  `protobuf:"varint,3,opt,name=EnableDNSLogServer,proto3" json:"EnableDNSLogServer,omitempty"`
	DNSLogLocalPort    int32 `protobuf:"varint,4,opt,name=DNSLogLocalPort,proto3" json:"DNSLogLocalPort,omitempty"`
	// 连接远程端口参数
	ConnectParam *GetTunnelServerExternalIPParams `protobuf:"bytes,5,opt,name=ConnectParam,proto3" json:"ConnectParam,omitempty"`
	// 远端端口开放情况
	//
	//	int32 RMIRemotePort = 6;
	FacadeRemotePort int32 `protobuf:"varint,16,opt,name=FacadeRemotePort,proto3" json:"FacadeRemotePort,omitempty"`
	DNSLogRemotePort int32 `protobuf:"varint,7,opt,name=DNSLogRemotePort,proto3" json:"DNSLogRemotePort,omitempty"`
	// 外部域名
	ExternalDomain string `protobuf:"bytes,8,opt,name=ExternalDomain,proto3" json:"ExternalDomain,omitempty"`
	// 验证端口是否转发成功
	Verify        bool `protobuf:"varint,9,opt,name=Verify,proto3" json:"Verify,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartFacadesParams) Reset() {
	*x = StartFacadesParams{}
	mi := &file_yakgrpc_proto_msgTypes[437]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartFacadesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFacadesParams) ProtoMessage() {}

func (x *StartFacadesParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[437]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFacadesParams.ProtoReflect.Descriptor instead.
func (*StartFacadesParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{437}
}

func (x *StartFacadesParams) GetLocalFacadeHost() string {
	if x != nil {
		return x.LocalFacadeHost
	}
	return ""
}

func (x *StartFacadesParams) GetLocalFacadePort() int32 {
	if x != nil {
		return x.LocalFacadePort
	}
	return 0
}

func (x *StartFacadesParams) GetEnableDNSLogServer() bool {
	if x != nil {
		return x.EnableDNSLogServer
	}
	return false
}

func (x *StartFacadesParams) GetDNSLogLocalPort() int32 {
	if x != nil {
		return x.DNSLogLocalPort
	}
	return 0
}

func (x *StartFacadesParams) GetConnectParam() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParam
	}
	return nil
}

func (x *StartFacadesParams) GetFacadeRemotePort() int32 {
	if x != nil {
		return x.FacadeRemotePort
	}
	return 0
}

func (x *StartFacadesParams) GetDNSLogRemotePort() int32 {
	if x != nil {
		return x.DNSLogRemotePort
	}
	return 0
}

func (x *StartFacadesParams) GetExternalDomain() string {
	if x != nil {
		return x.ExternalDomain
	}
	return ""
}

func (x *StartFacadesParams) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

type ApplyClassToFacadesParamsWithVerbose struct {
	state               protoimpl.MessageState         `protogen:"open.v1"`
	GenerateClassParams *YsoOptionsRequerstWithVerbose `protobuf:"bytes,1,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
	Token               string                         `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ApplyClassToFacadesParamsWithVerbose) Reset() {
	*x = ApplyClassToFacadesParamsWithVerbose{}
	mi := &file_yakgrpc_proto_msgTypes[438]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyClassToFacadesParamsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyClassToFacadesParamsWithVerbose) ProtoMessage() {}

func (x *ApplyClassToFacadesParamsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[438]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyClassToFacadesParamsWithVerbose.ProtoReflect.Descriptor instead.
func (*ApplyClassToFacadesParamsWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{438}
}

func (x *ApplyClassToFacadesParamsWithVerbose) GetGenerateClassParams() *YsoOptionsRequerstWithVerbose {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

func (x *ApplyClassToFacadesParamsWithVerbose) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 已弃用
type ApplyClassToFacadesParams struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	GenerateClassParams *YsoOptionsRequerst    `protobuf:"bytes,1,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
	Token               string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ApplyClassToFacadesParams) Reset() {
	*x = ApplyClassToFacadesParams{}
	mi := &file_yakgrpc_proto_msgTypes[439]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyClassToFacadesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyClassToFacadesParams) ProtoMessage() {}

func (x *ApplyClassToFacadesParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[439]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyClassToFacadesParams.ProtoReflect.Descriptor instead.
func (*ApplyClassToFacadesParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{439}
}

func (x *ApplyClassToFacadesParams) GetGenerateClassParams() *YsoOptionsRequerst {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

func (x *ApplyClassToFacadesParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type StartFacadesWithYsoParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 端口复用的
	IsRemote            bool                             `protobuf:"varint,1,opt,name=IsRemote,proto3" json:"IsRemote,omitempty"`
	ReversePort         int32                            `protobuf:"varint,2,opt,name=ReversePort,proto3" json:"ReversePort,omitempty"`
	ReverseHost         string                           `protobuf:"bytes,4,opt,name=ReverseHost,proto3" json:"ReverseHost,omitempty"`
	Token               string                           `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
	BridgeParam         *GetTunnelServerExternalIPParams `protobuf:"bytes,6,opt,name=BridgeParam,proto3" json:"BridgeParam,omitempty"`
	GenerateClassParams *YsoOptionsRequerst              `protobuf:"bytes,7,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StartFacadesWithYsoParams) Reset() {
	*x = StartFacadesWithYsoParams{}
	mi := &file_yakgrpc_proto_msgTypes[440]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartFacadesWithYsoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFacadesWithYsoParams) ProtoMessage() {}

func (x *StartFacadesWithYsoParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[440]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFacadesWithYsoParams.ProtoReflect.Descriptor instead.
func (*StartFacadesWithYsoParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{440}
}

func (x *StartFacadesWithYsoParams) GetIsRemote() bool {
	if x != nil {
		return x.IsRemote
	}
	return false
}

func (x *StartFacadesWithYsoParams) GetReversePort() int32 {
	if x != nil {
		return x.ReversePort
	}
	return 0
}

func (x *StartFacadesWithYsoParams) GetReverseHost() string {
	if x != nil {
		return x.ReverseHost
	}
	return ""
}

func (x *StartFacadesWithYsoParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StartFacadesWithYsoParams) GetBridgeParam() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.BridgeParam
	}
	return nil
}

func (x *StartFacadesWithYsoParams) GetGenerateClassParams() *YsoOptionsRequerst {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

type Tree struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Data          string                 `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Children      []*Tree                `protobuf:"bytes,3,rep,name=Children,proto3" json:"Children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tree) Reset() {
	*x = Tree{}
	mi := &file_yakgrpc_proto_msgTypes[441]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[441]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{441}
}

func (x *Tree) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tree) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Tree) GetChildren() []*Tree {
	if x != nil {
		return x.Children
	}
	return nil
}

type GetAvailableBruteTypesResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Types          []string               `protobuf:"bytes,1,rep,name=Types,proto3" json:"Types,omitempty"` // 弃用
	TypesWithChild []*Tree                `protobuf:"bytes,2,rep,name=TypesWithChild,proto3" json:"TypesWithChild,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetAvailableBruteTypesResponse) Reset() {
	*x = GetAvailableBruteTypesResponse{}
	mi := &file_yakgrpc_proto_msgTypes[442]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableBruteTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableBruteTypesResponse) ProtoMessage() {}

func (x *GetAvailableBruteTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[442]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableBruteTypesResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableBruteTypesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{442}
}

func (x *GetAvailableBruteTypesResponse) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GetAvailableBruteTypesResponse) GetTypesWithChild() []*Tree {
	if x != nil {
		return x.TypesWithChild
	}
	return nil
}

type StartBruteParams struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Type       string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Targets    string                 `protobuf:"bytes,2,opt,name=Targets,proto3" json:"Targets,omitempty"`
	TargetFile string                 `protobuf:"bytes,3,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	// 设置如果用户输入了，就代替默认字典
	ReplaceDefaultUsernameDict bool     `protobuf:"varint,28,opt,name=ReplaceDefaultUsernameDict,proto3" json:"ReplaceDefaultUsernameDict,omitempty"`
	ReplaceDefaultPasswordDict bool     `protobuf:"varint,29,opt,name=ReplaceDefaultPasswordDict,proto3" json:"ReplaceDefaultPasswordDict,omitempty"`
	Usernames                  []string `protobuf:"bytes,4,rep,name=Usernames,proto3" json:"Usernames,omitempty"`
	UsernameFile               string   `protobuf:"bytes,24,opt,name=UsernameFile,proto3" json:"UsernameFile,omitempty"`
	Passwords                  []string `protobuf:"bytes,5,rep,name=Passwords,proto3" json:"Passwords,omitempty"`
	PasswordFile               string   `protobuf:"bytes,25,opt,name=PasswordFile,proto3" json:"PasswordFile,omitempty"`
	Prefix                     []string `protobuf:"bytes,6,rep,name=Prefix,proto3" json:"Prefix,omitempty"`
	Timeout                    float32  `protobuf:"fixed32,7,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// 每个目标之间的并发
	Concurrent int64 `protobuf:"varint,8,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	Retry      int64 `protobuf:"varint,9,opt,name=Retry,proto3" json:"Retry,omitempty"`
	// 目标任务内并发
	TargetTaskConcurrent int64 `protobuf:"varint,10,opt,name=TargetTaskConcurrent,proto3" json:"TargetTaskConcurrent,omitempty"`
	OkToStop         bool   `protobuf:"varint,11,opt,name=OkToStop,proto3" json:"OkToStop,omitempty"`
	DelayMin         int64  `protobuf:"varint,12,opt,name=DelayMin,proto3" json:"DelayMin,omitempty"`
	DelayMax         int64  `protobuf:"varint,13,opt,name=DelayMax,proto3" json:"DelayMax,omitempty"`
	PluginScriptName string `protobuf:"bytes,14,opt,name=PluginScriptName,proto3" json:"PluginScriptName,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StartBruteParams) Reset() {
	*x = StartBruteParams{}
	mi := &file_yakgrpc_proto_msgTypes[443]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBruteParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBruteParams) ProtoMessage() {}

func (x *StartBruteParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[443]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBruteParams.ProtoReflect.Descriptor instead.
func (*StartBruteParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{443}
}

func (x *StartBruteParams) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StartBruteParams) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *StartBruteParams) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *StartBruteParams) GetReplaceDefaultUsernameDict() bool {
	if x != nil {
		return x.ReplaceDefaultUsernameDict
	}
	return false
}

func (x *StartBruteParams) GetReplaceDefaultPasswordDict() bool {
	if x != nil {
		return x.ReplaceDefaultPasswordDict
	}
	return false
}

func (x *StartBruteParams) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *StartBruteParams) GetUsernameFile() string {
	if x != nil {
		return x.UsernameFile
	}
	return ""
}

func (x *StartBruteParams) GetPasswords() []string {
	if x != nil {
		return x.Passwords
	}
	return nil
}

func (x *StartBruteParams) GetPasswordFile() string {
	if x != nil {
		return x.PasswordFile
	}
	return ""
}

func (x *StartBruteParams) GetPrefix() []string {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *StartBruteParams) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *StartBruteParams) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *StartBruteParams) GetRetry() int64 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *StartBruteParams) GetTargetTaskConcurrent() int64 {
	if x != nil {
		return x.TargetTaskConcurrent
	}
	return 0
}

func (x *StartBruteParams) GetOkToStop() bool {
	if x != nil {
		return x.OkToStop
	}
	return false
}

func (x *StartBruteParams) GetDelayMin() int64 {
	if x != nil {
		return x.DelayMin
	}
	return 0
}

func (x *StartBruteParams) GetDelayMax() int64 {
	if x != nil {
		return x.DelayMax
	}
	return 0
}

func (x *StartBruteParams) GetPluginScriptName() string {
	if x != nil {
		return x.PluginScriptName
	}
	return ""
}

type HTTPRequestMutateParams struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Request     []byte                 `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	FuzzMethods []string               `protobuf:"bytes,2,rep,name=FuzzMethods,proto3" json:"FuzzMethods,omitempty"`
	// use chunk encode
	ChunkEncode bool `protobuf:"varint,3,opt,name=ChunkEncode,proto3" json:"ChunkEncode,omitempty"`
	// multipart boundary
	UploadEncode  bool `protobuf:"varint,4,opt,name=UploadEncode,proto3" json:"UploadEncode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPRequestMutateParams) Reset() {
	*x = HTTPRequestMutateParams{}
	mi := &file_yakgrpc_proto_msgTypes[444]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestMutateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestMutateParams) ProtoMessage() {}

func (x *HTTPRequestMutateParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[444]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestMutateParams.ProtoReflect.Descriptor instead.
func (*HTTPRequestMutateParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{444}
}

func (x *HTTPRequestMutateParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPRequestMutateParams) GetFuzzMethods() []string {
	if x != nil {
		return x.FuzzMethods
	}
	return nil
}

func (x *HTTPRequestMutateParams) GetChunkEncode() bool {
	if x != nil {
		return x.ChunkEncode
	}
	return false
}

func (x *HTTPRequestMutateParams) GetUploadEncode() bool {
	if x != nil {
		return x.UploadEncode
	}
	return false
}

type HTTPResponseMutateParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      []byte                 `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPResponseMutateParams) Reset() {
	*x = HTTPResponseMutateParams{}
	mi := &file_yakgrpc_proto_msgTypes[445]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResponseMutateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseMutateParams) ProtoMessage() {}

func (x *HTTPResponseMutateParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[445]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseMutateParams.ProtoReflect.Descriptor instead.
func (*HTTPResponseMutateParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{445}
}

func (x *HTTPResponseMutateParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type MutateResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        []byte                 `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ExtraResults  [][]byte               `protobuf:"bytes,2,rep,name=ExtraResults,proto3" json:"ExtraResults,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MutateResult) Reset() {
	*x = MutateResult{}
	mi := &file_yakgrpc_proto_msgTypes[446]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MutateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateResult) ProtoMessage() {}

func (x *MutateResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[446]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateResult.ProtoReflect.Descriptor instead.
func (*MutateResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{446}
}

func (x *MutateResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MutateResult) GetExtraResults() [][]byte {
	if x != nil {
		return x.ExtraResults
	}
	return nil
}

type QueryHostsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	DomainKeyword string                 `protobuf:"bytes,2,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Network       string                 `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHostsRequest) Reset() {
	*x = QueryHostsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[447]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHostsRequest) ProtoMessage() {}

func (x *QueryHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[447]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHostsRequest.ProtoReflect.Descriptor instead.
func (*QueryHostsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{447}
}

func (x *QueryHostsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHostsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *QueryHostsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type DeleteHostsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeleteAll     bool                   `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DomainKeyword string                 `protobuf:"bytes,2,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Network       string                 `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	ID            int64                  `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteHostsRequest) Reset() {
	*x = DeleteHostsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[448]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostsRequest) ProtoMessage() {}

func (x *DeleteHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[448]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostsRequest.ProtoReflect.Descriptor instead.
func (*DeleteHostsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{448}
}

func (x *DeleteHostsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteHostsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *DeleteHostsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DeleteHostsRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type QueryHostsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*Host                `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHostsResponse) Reset() {
	*x = QueryHostsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[449]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHostsResponse) ProtoMessage() {}

func (x *QueryHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[449]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHostsResponse.ProtoReflect.Descriptor instead.
func (*QueryHostsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{449}
}

func (x *QueryHostsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHostsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHostsResponse) GetData() []*Host {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDomainsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Network       string                 `protobuf:"bytes,2,opt,name=Network,proto3" json:"Network,omitempty"`
	DomainKeyword string                 `protobuf:"bytes,3,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	All           bool                   `protobuf:"varint,5,opt,name=All,proto3" json:"All,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryDomainsRequest) Reset() {
	*x = QueryDomainsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[450]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDomainsRequest) ProtoMessage() {}

func (x *QueryDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[450]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDomainsRequest.ProtoReflect.Descriptor instead.
func (*QueryDomainsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{450}
}

func (x *QueryDomainsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryDomainsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *QueryDomainsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *QueryDomainsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryDomainsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type DeleteDomainsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeleteAll     bool                   `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DomainKeyword string                 `protobuf:"bytes,2,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Network       string                 `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	ID            int64                  `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Filter        *QueryDomainsRequest   `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	IDs           []int64                `protobuf:"varint,6,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDomainsRequest) Reset() {
	*x = DeleteDomainsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[451]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDomainsRequest) ProtoMessage() {}

func (x *DeleteDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[451]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDomainsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDomainsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{451}
}

func (x *DeleteDomainsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteDomainsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *DeleteDomainsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DeleteDomainsRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DeleteDomainsRequest) GetFilter() *QueryDomainsRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteDomainsRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

type QueryDomainsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*Domain              `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryDomainsResponse) Reset() {
	*x = QueryDomainsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[452]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDomainsResponse) ProtoMessage() {}

func (x *QueryDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[452]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDomainsResponse.ProtoReflect.Descriptor instead.
func (*QueryDomainsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{452}
}

func (x *QueryDomainsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryDomainsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryDomainsResponse) GetData() []*Domain {
	if x != nil {
		return x.Data
	}
	return nil
}

type Domain struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DomainName    string                 `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`
	IPAddr        string                 `protobuf:"bytes,3,opt,name=IPAddr,proto3" json:"IPAddr,omitempty"`
	HTTPTitle     string                 `protobuf:"bytes,4,opt,name=HTTPTitle,proto3" json:"HTTPTitle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Domain) Reset() {
	*x = Domain{}
	mi := &file_yakgrpc_proto_msgTypes[453]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[453]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{453}
}

func (x *Domain) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Domain) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Domain) GetIPAddr() string {
	if x != nil {
		return x.IPAddr
	}
	return ""
}

func (x *Domain) GetHTTPTitle() string {
	if x != nil {
		return x.HTTPTitle
	}
	return ""
}

type QueryPortsGroupResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PortsGroupList []*PortsGroup          `protobuf:"bytes,1,rep,name=PortsGroupList,proto3" json:"PortsGroupList,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueryPortsGroupResponse) Reset() {
	*x = QueryPortsGroupResponse{}
	mi := &file_yakgrpc_proto_msgTypes[454]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPortsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortsGroupResponse) ProtoMessage() {}

func (x *QueryPortsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[454]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortsGroupResponse.ProtoReflect.Descriptor instead.
func (*QueryPortsGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{454}
}

func (x *QueryPortsGroupResponse) GetPortsGroupList() []*PortsGroup {
	if x != nil {
		return x.PortsGroupList
	}
	return nil
}

type PortsGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	GroupLists    []*GroupList           `protobuf:"bytes,2,rep,name=GroupLists,proto3" json:"GroupLists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortsGroup) Reset() {
	*x = PortsGroup{}
	mi := &file_yakgrpc_proto_msgTypes[455]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortsGroup) ProtoMessage() {}

func (x *PortsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[455]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortsGroup.ProtoReflect.Descriptor instead.
func (*PortsGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{455}
}

func (x *PortsGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *PortsGroup) GetGroupLists() []*GroupList {
	if x != nil {
		return x.GroupLists
	}
	return nil
}

type GroupList struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ServiceType     string                 `protobuf:"bytes,1,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	ShowServiceType string                 `protobuf:"bytes,2,opt,name=ShowServiceType,proto3" json:"ShowServiceType,omitempty"`
	Total           int32                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GroupList) Reset() {
	*x = GroupList{}
	mi := &file_yakgrpc_proto_msgTypes[456]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupList) ProtoMessage() {}

func (x *GroupList) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[456]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupList.ProtoReflect.Descriptor instead.
func (*GroupList) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{456}
}

func (x *GroupList) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *GroupList) GetShowServiceType() string {
	if x != nil {
		return x.ShowServiceType
	}
	return ""
}

func (x *GroupList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Host struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IP            string                 `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	IPInteger     int64                  `protobuf:"varint,3,opt,name=IPInteger,proto3" json:"IPInteger,omitempty"`
	IsInPublicNet bool                   `protobuf:"varint,4,opt,name=IsInPublicNet,proto3" json:"IsInPublicNet,omitempty"`
	Domains       []string               `protobuf:"bytes,5,rep,name=Domains,proto3" json:"Domains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Host) Reset() {
	*x = Host{}
	mi := &file_yakgrpc_proto_msgTypes[457]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[457]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{457}
}

func (x *Host) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Host) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Host) GetIPInteger() int64 {
	if x != nil {
		return x.IPInteger
	}
	return 0
}

func (x *Host) GetIsInPublicNet() bool {
	if x != nil {
		return x.IsInPublicNet
	}
	return false
}

func (x *Host) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

type DownloadReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileData      string                 `protobuf:"bytes,1,opt,name=FileData,proto3" json:"FileData,omitempty"`
	FileName      string                 `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileDir       string                 `protobuf:"bytes,3,opt,name=FileDir,proto3" json:"FileDir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadReportRequest) Reset() {
	*x = DownloadReportRequest{}
	mi := &file_yakgrpc_proto_msgTypes[458]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadReportRequest) ProtoMessage() {}

func (x *DownloadReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[458]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadReportRequest.ProtoReflect.Descriptor instead.
func (*DownloadReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{458}
}

func (x *DownloadReportRequest) GetFileData() string {
	if x != nil {
		return x.FileData
	}
	return ""
}

func (x *DownloadReportRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DownloadReportRequest) GetFileDir() string {
	if x != nil {
		return x.FileDir
	}
	return ""
}

type DeleteYakScriptExecResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []int64                `protobuf:"varint,1,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	YakScriptName string                 `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteYakScriptExecResultRequest) Reset() {
	*x = DeleteYakScriptExecResultRequest{}
	mi := &file_yakgrpc_proto_msgTypes[459]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteYakScriptExecResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptExecResultRequest) ProtoMessage() {}

func (x *DeleteYakScriptExecResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[459]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptExecResultRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptExecResultRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{459}
}

func (x *DeleteYakScriptExecResultRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteYakScriptExecResultRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type YakScriptNames struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	YakScriptNames []string               `protobuf:"bytes,1,rep,name=YakScriptNames,proto3" json:"YakScriptNames,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *YakScriptNames) Reset() {
	*x = YakScriptNames{}
	mi := &file_yakgrpc_proto_msgTypes[460]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakScriptNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptNames) ProtoMessage() {}

func (x *YakScriptNames) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[460]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptNames.ProtoReflect.Descriptor instead.
func (*YakScriptNames) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{460}
}

func (x *YakScriptNames) GetYakScriptNames() []string {
	if x != nil {
		return x.YakScriptNames
	}
	return nil
}

type QueryYakScriptExecResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	YakScriptName string                 `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptExecResultRequest) Reset() {
	*x = QueryYakScriptExecResultRequest{}
	mi := &file_yakgrpc_proto_msgTypes[461]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptExecResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptExecResultRequest) ProtoMessage() {}

func (x *QueryYakScriptExecResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[461]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptExecResultRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptExecResultRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{461}
}

func (x *QueryYakScriptExecResultRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptExecResultRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type QueryYakScriptExecResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*ExecResult          `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptExecResultResponse) Reset() {
	*x = QueryYakScriptExecResultResponse{}
	mi := &file_yakgrpc_proto_msgTypes[462]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptExecResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptExecResultResponse) ProtoMessage() {}

func (x *QueryYakScriptExecResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[462]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptExecResultResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptExecResultResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{462}
}

func (x *QueryYakScriptExecResultResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptExecResultResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryYakScriptExecResultResponse) GetData() []*ExecResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type GenerateWebsiteTreeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TreeDataJson  []byte                 `protobuf:"bytes,1,opt,name=TreeDataJson,proto3" json:"TreeDataJson,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateWebsiteTreeResponse) Reset() {
	*x = GenerateWebsiteTreeResponse{}
	mi := &file_yakgrpc_proto_msgTypes[463]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateWebsiteTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWebsiteTreeResponse) ProtoMessage() {}

func (x *GenerateWebsiteTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[463]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWebsiteTreeResponse.ProtoReflect.Descriptor instead.
func (*GenerateWebsiteTreeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{463}
}

func (x *GenerateWebsiteTreeResponse) GetTreeDataJson() []byte {
	if x != nil {
		return x.TreeDataJson
	}
	return nil
}

type GenerateWebsiteTreeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Targets       string                 `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateWebsiteTreeRequest) Reset() {
	*x = GenerateWebsiteTreeRequest{}
	mi := &file_yakgrpc_proto_msgTypes[464]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateWebsiteTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWebsiteTreeRequest) ProtoMessage() {}

func (x *GenerateWebsiteTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[464]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWebsiteTreeRequest.ProtoReflect.Descriptor instead.
func (*GenerateWebsiteTreeRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{464}
}

func (x *GenerateWebsiteTreeRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

type StartBasicCrawlerRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Targets             string                 `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
	TargetsFile         string                 `protobuf:"bytes,2,opt,name=TargetsFile,proto3" json:"TargetsFile,omitempty"`
	MaxDepth            string                 `protobuf:"bytes,3,opt,name=MaxDepth,proto3" json:"MaxDepth,omitempty"`
	MaxCountOfLinks     string                 `protobuf:"bytes,4,opt,name=MaxCountOfLinks,proto3" json:"MaxCountOfLinks,omitempty"`
	MaxCountOfRequest   string                 `protobuf:"bytes,5,opt,name=MaxCountOfRequest,proto3" json:"MaxCountOfRequest,omitempty"`
	DisallowSuffix      string                 `protobuf:"bytes,6,opt,name=DisallowSuffix,proto3" json:"DisallowSuffix,omitempty"`
	StartFromParentPath string                 `protobuf:"bytes,7,opt,name=StartFromParentPath,proto3" json:"StartFromParentPath,omitempty"`
	MaxRetryTimes       string                 `protobuf:"bytes,8,opt,name=MaxRetryTimes,proto3" json:"MaxRetryTimes,omitempty"`
	AllowMethods        string                 `protobuf:"bytes,9,opt,name=AllowMethods,proto3" json:"AllowMethods,omitempty"`
	AllowDomains        string                 `protobuf:"bytes,10,opt,name=AllowDomains,proto3" json:"AllowDomains,omitempty"`
	ForbiddenDomain     string                 `protobuf:"bytes,11,opt,name=ForbiddenDomain,proto3" json:"ForbiddenDomain,omitempty"`
	AllowUrlRegexp      string                 `protobuf:"bytes,12,opt,name=AllowUrlRegexp,proto3" json:"AllowUrlRegexp,omitempty"`
	ForbiddenUrlRegexp  string                 `protobuf:"bytes,13,opt,name=ForbiddenUrlRegexp,proto3" json:"ForbiddenUrlRegexp,omitempty"`
	UserAgent           string                 `protobuf:"bytes,14,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	// 基础认证
	BasicAuth         string `protobuf:"bytes,15,opt,name=BasicAuth,proto3" json:"BasicAuth,omitempty"`
	BasicAuthUsername string `protobuf:"bytes,16,opt,name=BasicAuthUsername,proto3" json:"BasicAuthUsername,omitempty"`
	BasicAuthPassword string `protobuf:"bytes,17,opt,name=BasicAuthPassword,proto3" json:"BasicAuthPassword,omitempty"`
	// Transport
	Proxies                []string      `protobuf:"bytes,18,rep,name=Proxies,proto3" json:"Proxies,omitempty"`
	Concurrent             int64         `protobuf:"varint,19,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	MaxRedirectTimes       int64         `protobuf:"varint,20,opt,name=MaxRedirectTimes,proto3" json:"MaxRedirectTimes,omitempty"`
	ConnectTimeoutSeconds  int64         `protobuf:"varint,21,opt,name=ConnectTimeoutSeconds,proto3" json:"ConnectTimeoutSeconds,omitempty"`
	ResponseTimeoutSeconds int64         `protobuf:"varint,22,opt,name=ResponseTimeoutSeconds,proto3" json:"ResponseTimeoutSeconds,omitempty"`
	Headers                []*HTTPHeader `protobuf:"bytes,23,rep,name=Headers,proto3" json:"Headers,omitempty"`
	Cookies                []*HTTPCookie `protobuf:"bytes,24,rep,name=Cookies,proto3" json:"Cookies,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StartBasicCrawlerRequest) Reset() {
	*x = StartBasicCrawlerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[465]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBasicCrawlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBasicCrawlerRequest) ProtoMessage() {}

func (x *StartBasicCrawlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[465]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBasicCrawlerRequest.ProtoReflect.Descriptor instead.
func (*StartBasicCrawlerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{465}
}

func (x *StartBasicCrawlerRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetTargetsFile() string {
	if x != nil {
		return x.TargetsFile
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxDepth() string {
	if x != nil {
		return x.MaxDepth
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxCountOfLinks() string {
	if x != nil {
		return x.MaxCountOfLinks
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxCountOfRequest() string {
	if x != nil {
		return x.MaxCountOfRequest
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetDisallowSuffix() string {
	if x != nil {
		return x.DisallowSuffix
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetStartFromParentPath() string {
	if x != nil {
		return x.StartFromParentPath
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxRetryTimes() string {
	if x != nil {
		return x.MaxRetryTimes
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetAllowMethods() string {
	if x != nil {
		return x.AllowMethods
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetAllowDomains() string {
	if x != nil {
		return x.AllowDomains
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetForbiddenDomain() string {
	if x != nil {
		return x.ForbiddenDomain
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetAllowUrlRegexp() string {
	if x != nil {
		return x.AllowUrlRegexp
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetForbiddenUrlRegexp() string {
	if x != nil {
		return x.ForbiddenUrlRegexp
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetBasicAuth() string {
	if x != nil {
		return x.BasicAuth
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetBasicAuthUsername() string {
	if x != nil {
		return x.BasicAuthUsername
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetBasicAuthPassword() string {
	if x != nil {
		return x.BasicAuthPassword
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetProxies() []string {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *StartBasicCrawlerRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetMaxRedirectTimes() int64 {
	if x != nil {
		return x.MaxRedirectTimes
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetConnectTimeoutSeconds() int64 {
	if x != nil {
		return x.ConnectTimeoutSeconds
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetResponseTimeoutSeconds() int64 {
	if x != nil {
		return x.ResponseTimeoutSeconds
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetHeaders() []*HTTPHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *StartBasicCrawlerRequest) GetCookies() []*HTTPCookie {
	if x != nil {
		return x.Cookies
	}
	return nil
}

type HTTPCookieSetting struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Key      string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value    string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Path     string                 `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	Domain   string                 `protobuf:"bytes,4,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Expires  int64                  `protobuf:"varint,5,opt,name=Expires,proto3" json:"Expires,omitempty"`
	MaxAge   int64                  `protobuf:"varint,6,opt,name=MaxAge,proto3" json:"MaxAge,omitempty"`
	Secure   bool                   `protobuf:"varint,7,opt,name=Secure,proto3" json:"Secure,omitempty"`
	HttpOnly bool                   `protobuf:"varint,8,opt,name=HttpOnly,proto3" json:"HttpOnly,omitempty"`
	// default
	// lax
	// strict
	// none
	SameSiteMode  string `protobuf:"bytes,9,opt,name=SameSiteMode,proto3" json:"SameSiteMode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPCookieSetting) Reset() {
	*x = HTTPCookieSetting{}
	mi := &file_yakgrpc_proto_msgTypes[466]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPCookieSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPCookieSetting) ProtoMessage() {}

func (x *HTTPCookieSetting) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[466]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPCookieSetting.ProtoReflect.Descriptor instead.
func (*HTTPCookieSetting) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{466}
}

func (x *HTTPCookieSetting) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HTTPCookieSetting) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HTTPCookieSetting) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPCookieSetting) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HTTPCookieSetting) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *HTTPCookieSetting) GetMaxAge() int64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *HTTPCookieSetting) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *HTTPCookieSetting) GetHttpOnly() bool {
	if x != nil {
		return x.HttpOnly
	}
	return false
}

func (x *HTTPCookieSetting) GetSameSiteMode() string {
	if x != nil {
		return x.SameSiteMode
	}
	return ""
}

type HTTPCookie struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	AllowOverride bool                   `protobuf:"varint,3,opt,name=AllowOverride,proto3" json:"AllowOverride,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPCookie) Reset() {
	*x = HTTPCookie{}
	mi := &file_yakgrpc_proto_msgTypes[467]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPCookie) ProtoMessage() {}

func (x *HTTPCookie) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[467]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPCookie.ProtoReflect.Descriptor instead.
func (*HTTPCookie) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{467}
}

func (x *HTTPCookie) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HTTPCookie) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HTTPCookie) GetAllowOverride() bool {
	if x != nil {
		return x.AllowOverride
	}
	return false
}

type ExportYakScriptRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	YakScriptId     int64                  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	OutputDir       string                 `protobuf:"bytes,2,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	OutputPluginDir string                 `protobuf:"bytes,3,opt,name=OutputPluginDir,proto3" json:"OutputPluginDir,omitempty"`
	YakScriptIds    []int64                `protobuf:"varint,4,rep,packed,name=YakScriptIds,proto3" json:"YakScriptIds,omitempty"`
	All             bool                   `protobuf:"varint,5,opt,name=All,proto3" json:"All,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExportYakScriptRequest) Reset() {
	*x = ExportYakScriptRequest{}
	mi := &file_yakgrpc_proto_msgTypes[468]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptRequest) ProtoMessage() {}

func (x *ExportYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[468]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExportYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{468}
}

func (x *ExportYakScriptRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExportYakScriptRequest) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *ExportYakScriptRequest) GetOutputPluginDir() string {
	if x != nil {
		return x.OutputPluginDir
	}
	return ""
}

func (x *ExportYakScriptRequest) GetYakScriptIds() []int64 {
	if x != nil {
		return x.YakScriptIds
	}
	return nil
}

func (x *ExportYakScriptRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type ExportYakScriptStreamRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Filter         *QueryYakScriptRequest `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	OutputFilename string                 `protobuf:"bytes,2,opt,name=OutputFilename,proto3" json:"OutputFilename,omitempty"`
	Password       string                 `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExportYakScriptStreamRequest) Reset() {
	*x = ExportYakScriptStreamRequest{}
	mi := &file_yakgrpc_proto_msgTypes[469]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportYakScriptStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptStreamRequest) ProtoMessage() {}

func (x *ExportYakScriptStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[469]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptStreamRequest.ProtoReflect.Descriptor instead.
func (*ExportYakScriptStreamRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{469}
}

func (x *ExportYakScriptStreamRequest) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExportYakScriptStreamRequest) GetOutputFilename() string {
	if x != nil {
		return x.OutputFilename
	}
	return ""
}

func (x *ExportYakScriptStreamRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ImportYakScriptStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Filename      string                 `protobuf:"bytes,3,opt,name=Filename,proto3" json:"Filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportYakScriptStreamRequest) Reset() {
	*x = ImportYakScriptStreamRequest{}
	mi := &file_yakgrpc_proto_msgTypes[470]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportYakScriptStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportYakScriptStreamRequest) ProtoMessage() {}

func (x *ImportYakScriptStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[470]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportYakScriptStreamRequest.ProtoReflect.Descriptor instead.
func (*ImportYakScriptStreamRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{470}
}

func (x *ImportYakScriptStreamRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImportYakScriptStreamRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ImportYakScriptStreamRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type ExportYakScriptResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutputDir     string                 `protobuf:"bytes,2,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportYakScriptResponse) Reset() {
	*x = ExportYakScriptResponse{}
	mi := &file_yakgrpc_proto_msgTypes[471]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptResponse) ProtoMessage() {}

func (x *ExportYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[471]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptResponse.ProtoReflect.Descriptor instead.
func (*ExportYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{471}
}

func (x *ExportYakScriptResponse) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

type GetMarkdownDocumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Script        *YakScript             `protobuf:"bytes,1,opt,name=Script,proto3" json:"Script,omitempty"`
	Markdown      string                 `protobuf:"bytes,2,opt,name=Markdown,proto3" json:"Markdown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarkdownDocumentResponse) Reset() {
	*x = GetMarkdownDocumentResponse{}
	mi := &file_yakgrpc_proto_msgTypes[472]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarkdownDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownDocumentResponse) ProtoMessage() {}

func (x *GetMarkdownDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[472]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetMarkdownDocumentResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{472}
}

func (x *GetMarkdownDocumentResponse) GetScript() *YakScript {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *GetMarkdownDocumentResponse) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

type GetMarkdownDocumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptName string                 `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	YakScriptId   int64                  `protobuf:"varint,2,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarkdownDocumentRequest) Reset() {
	*x = GetMarkdownDocumentRequest{}
	mi := &file_yakgrpc_proto_msgTypes[473]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarkdownDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownDocumentRequest) ProtoMessage() {}

func (x *GetMarkdownDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[473]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetMarkdownDocumentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{473}
}

func (x *GetMarkdownDocumentRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *GetMarkdownDocumentRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

type SaveMarkdownDocumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptName string                 `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	YakScriptId   int64                  `protobuf:"varint,2,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Markdown      string                 `protobuf:"bytes,3,opt,name=Markdown,proto3" json:"Markdown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveMarkdownDocumentRequest) Reset() {
	*x = SaveMarkdownDocumentRequest{}
	mi := &file_yakgrpc_proto_msgTypes[474]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveMarkdownDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveMarkdownDocumentRequest) ProtoMessage() {}

func (x *SaveMarkdownDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[474]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveMarkdownDocumentRequest.ProtoReflect.Descriptor instead.
func (*SaveMarkdownDocumentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{474}
}

func (x *SaveMarkdownDocumentRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *SaveMarkdownDocumentRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *SaveMarkdownDocumentRequest) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

type GroupNames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []string               `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupNames) Reset() {
	*x = GroupNames{}
	mi := &file_yakgrpc_proto_msgTypes[475]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNames) ProtoMessage() {}

func (x *GroupNames) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[475]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNames.ProtoReflect.Descriptor instead.
func (*GroupNames) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{475}
}

func (x *GroupNames) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type QueryGroupsByYakScriptIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptId   int64                  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Mode          string                 `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryGroupsByYakScriptIdRequest) Reset() {
	*x = QueryGroupsByYakScriptIdRequest{}
	mi := &file_yakgrpc_proto_msgTypes[476]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryGroupsByYakScriptIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupsByYakScriptIdRequest) ProtoMessage() {}

func (x *QueryGroupsByYakScriptIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[476]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupsByYakScriptIdRequest.ProtoReflect.Descriptor instead.
func (*QueryGroupsByYakScriptIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{476}
}

func (x *QueryGroupsByYakScriptIdRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *QueryGroupsByYakScriptIdRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type MenuItem struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Group         string                      `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose       string                      `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	YakScriptId   int64                       `protobuf:"varint,3,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Query         *BatchExecutionPluginFilter `protobuf:"bytes,4,opt,name=Query,proto3" json:"Query,omitempty"`
	MenuItemId    uint64                      `protobuf:"varint,5,opt,name=MenuItemId,proto3" json:"MenuItemId,omitempty"`
	GroupSort     int64                       `protobuf:"varint,6,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	YakScriptName string                      `protobuf:"bytes,7,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuItem) Reset() {
	*x = MenuItem{}
	mi := &file_yakgrpc_proto_msgTypes[477]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItem) ProtoMessage() {}

func (x *MenuItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[477]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItem.ProtoReflect.Descriptor instead.
func (*MenuItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{477}
}

func (x *MenuItem) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *MenuItem) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *MenuItem) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *MenuItem) GetQuery() *BatchExecutionPluginFilter {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *MenuItem) GetMenuItemId() uint64 {
	if x != nil {
		return x.MenuItemId
	}
	return 0
}

func (x *MenuItem) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *MenuItem) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

// 这里的小写不要改动，兼容前端已有的格式
type BatchExecutionPluginFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Tags          string                 `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	Include       []string               `protobuf:"bytes,3,rep,name=include,proto3" json:"include,omitempty"`
	Exclude       []string               `protobuf:"bytes,4,rep,name=exclude,proto3" json:"exclude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchExecutionPluginFilter) Reset() {
	*x = BatchExecutionPluginFilter{}
	mi := &file_yakgrpc_proto_msgTypes[478]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchExecutionPluginFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExecutionPluginFilter) ProtoMessage() {}

func (x *BatchExecutionPluginFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[478]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchExecutionPluginFilter.ProtoReflect.Descriptor instead.
func (*BatchExecutionPluginFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{478}
}

func (x *BatchExecutionPluginFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BatchExecutionPluginFilter) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *BatchExecutionPluginFilter) GetInclude() []string {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *BatchExecutionPluginFilter) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

type MenuItemGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Items         []*MenuItem            `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
	MenuSort      int64                  `protobuf:"varint,3,opt,name=MenuSort,proto3" json:"MenuSort,omitempty"`
	Mode          string                 `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuItemGroup) Reset() {
	*x = MenuItemGroup{}
	mi := &file_yakgrpc_proto_msgTypes[479]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuItemGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItemGroup) ProtoMessage() {}

func (x *MenuItemGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[479]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItemGroup.ProtoReflect.Descriptor instead.
func (*MenuItemGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{479}
}

func (x *MenuItemGroup) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *MenuItemGroup) GetItems() []*MenuItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MenuItemGroup) GetMenuSort() int64 {
	if x != nil {
		return x.MenuSort
	}
	return 0
}

func (x *MenuItemGroup) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type GetMenuItemByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            uint64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMenuItemByIdRequest) Reset() {
	*x = GetMenuItemByIdRequest{}
	mi := &file_yakgrpc_proto_msgTypes[480]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuItemByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuItemByIdRequest) ProtoMessage() {}

func (x *GetMenuItemByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[480]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuItemByIdRequest.ProtoReflect.Descriptor instead.
func (*GetMenuItemByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{480}
}

func (x *GetMenuItemByIdRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type MenuByGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*MenuItemGroup       `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuByGroup) Reset() {
	*x = MenuByGroup{}
	mi := &file_yakgrpc_proto_msgTypes[481]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuByGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuByGroup) ProtoMessage() {}

func (x *MenuByGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[481]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuByGroup.ProtoReflect.Descriptor instead.
func (*MenuByGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{481}
}

func (x *MenuByGroup) GetGroups() []*MenuItemGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type YakScriptIsInMenuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	YakScriptId   int64                  `protobuf:"varint,2,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YakScriptIsInMenuRequest) Reset() {
	*x = YakScriptIsInMenuRequest{}
	mi := &file_yakgrpc_proto_msgTypes[482]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakScriptIsInMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptIsInMenuRequest) ProtoMessage() {}

func (x *YakScriptIsInMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[482]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptIsInMenuRequest.ProtoReflect.Descriptor instead.
func (*YakScriptIsInMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{482}
}

func (x *YakScriptIsInMenuRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *YakScriptIsInMenuRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

type RemoveFromMenuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptId   int64                  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Mode          string                 `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFromMenuRequest) Reset() {
	*x = RemoveFromMenuRequest{}
	mi := &file_yakgrpc_proto_msgTypes[483]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFromMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFromMenuRequest) ProtoMessage() {}

func (x *RemoveFromMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[483]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFromMenuRequest.ProtoReflect.Descriptor instead.
func (*RemoveFromMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{483}
}

func (x *RemoveFromMenuRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *RemoveFromMenuRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RemoveFromMenuRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type AddToMenuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptId   int64                  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose       string                 `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Mode          string                 `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	MenuSort      int64                  `protobuf:"varint,5,opt,name=MenuSort,proto3" json:"MenuSort,omitempty"`
	GroupSort     int64                  `protobuf:"varint,6,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddToMenuRequest) Reset() {
	*x = AddToMenuRequest{}
	mi := &file_yakgrpc_proto_msgTypes[484]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddToMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToMenuRequest) ProtoMessage() {}

func (x *AddToMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[484]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToMenuRequest.ProtoReflect.Descriptor instead.
func (*AddToMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{484}
}

func (x *AddToMenuRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *AddToMenuRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AddToMenuRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *AddToMenuRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AddToMenuRequest) GetMenuSort() int64 {
	if x != nil {
		return x.MenuSort
	}
	return 0
}

func (x *AddToMenuRequest) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

type AddMenuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*MenuItemGroup       `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMenuRequest) Reset() {
	*x = AddMenuRequest{}
	mi := &file_yakgrpc_proto_msgTypes[485]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMenuRequest) ProtoMessage() {}

func (x *AddMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[485]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMenuRequest.ProtoReflect.Descriptor instead.
func (*AddMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{485}
}

func (x *AddMenuRequest) GetData() []*MenuItemGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryAllMenuItemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          string                 `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose       string                 `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAllMenuItemRequest) Reset() {
	*x = QueryAllMenuItemRequest{}
	mi := &file_yakgrpc_proto_msgTypes[486]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAllMenuItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllMenuItemRequest) ProtoMessage() {}

func (x *QueryAllMenuItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[486]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllMenuItemRequest.ProtoReflect.Descriptor instead.
func (*QueryAllMenuItemRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{486}
}

func (x *QueryAllMenuItemRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *QueryAllMenuItemRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryAllMenuItemRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type ImportMenuItemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawJson       string                 `protobuf:"bytes,1,opt,name=RawJson,proto3" json:"RawJson,omitempty"`
	JsonFileName  string                 `protobuf:"bytes,2,opt,name=JsonFileName,proto3" json:"JsonFileName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportMenuItemRequest) Reset() {
	*x = ImportMenuItemRequest{}
	mi := &file_yakgrpc_proto_msgTypes[487]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportMenuItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMenuItemRequest) ProtoMessage() {}

func (x *ImportMenuItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[487]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMenuItemRequest.ProtoReflect.Descriptor instead.
func (*ImportMenuItemRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{487}
}

func (x *ImportMenuItemRequest) GetRawJson() string {
	if x != nil {
		return x.RawJson
	}
	return ""
}

func (x *ImportMenuItemRequest) GetJsonFileName() string {
	if x != nil {
		return x.JsonFileName
	}
	return ""
}

type ExportMenuItemResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawJson       string                 `protobuf:"bytes,1,opt,name=RawJson,proto3" json:"RawJson,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportMenuItemResult) Reset() {
	*x = ExportMenuItemResult{}
	mi := &file_yakgrpc_proto_msgTypes[488]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMenuItemResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMenuItemResult) ProtoMessage() {}

func (x *ExportMenuItemResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[488]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMenuItemResult.ProtoReflect.Descriptor instead.
func (*ExportMenuItemResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{488}
}

func (x *ExportMenuItemResult) GetRawJson() string {
	if x != nil {
		return x.RawJson
	}
	return ""
}

type AddToNavigationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*NavigationList      `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddToNavigationRequest) Reset() {
	*x = AddToNavigationRequest{}
	mi := &file_yakgrpc_proto_msgTypes[489]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddToNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToNavigationRequest) ProtoMessage() {}

func (x *AddToNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[489]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToNavigationRequest.ProtoReflect.Descriptor instead.
func (*AddToNavigationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{489}
}

func (x *AddToNavigationRequest) GetData() []*NavigationList {
	if x != nil {
		return x.Data
	}
	return nil
}

type NavigationList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Items         []*NavigationItem      `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
	GroupSort     int64                  `protobuf:"varint,3,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	Mode          string                 `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	GroupLabel    string                 `protobuf:"bytes,5,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NavigationList) Reset() {
	*x = NavigationList{}
	mi := &file_yakgrpc_proto_msgTypes[490]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NavigationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationList) ProtoMessage() {}

func (x *NavigationList) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[490]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationList.ProtoReflect.Descriptor instead.
func (*NavigationList) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{490}
}

func (x *NavigationList) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NavigationList) GetItems() []*NavigationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *NavigationList) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *NavigationList) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NavigationList) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

type NavigationItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptId   int64                  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Mode          string                 `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	VerboseSort   int64                  `protobuf:"varint,4,opt,name=VerboseSort,proto3" json:"VerboseSort,omitempty"`
	GroupSort     int64                  `protobuf:"varint,5,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	Route         string                 `protobuf:"bytes,6,opt,name=Route,proto3" json:"Route,omitempty"`
	YakScriptName string                 `protobuf:"bytes,7,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Verbose       string                 `protobuf:"bytes,8,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	VerboseLabel  string                 `protobuf:"bytes,9,opt,name=VerboseLabel,proto3" json:"VerboseLabel,omitempty"`
	GroupLabel    string                 `protobuf:"bytes,10,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
	HeadImg       string                 `protobuf:"bytes,11,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NavigationItem) Reset() {
	*x = NavigationItem{}
	mi := &file_yakgrpc_proto_msgTypes[491]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NavigationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationItem) ProtoMessage() {}

func (x *NavigationItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[491]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationItem.ProtoReflect.Descriptor instead.
func (*NavigationItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{491}
}

func (x *NavigationItem) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *NavigationItem) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NavigationItem) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NavigationItem) GetVerboseSort() int64 {
	if x != nil {
		return x.VerboseSort
	}
	return 0
}

func (x *NavigationItem) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *NavigationItem) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *NavigationItem) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *NavigationItem) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *NavigationItem) GetVerboseLabel() string {
	if x != nil {
		return x.VerboseLabel
	}
	return ""
}

func (x *NavigationItem) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *NavigationItem) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

type GetAllNavigationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          string                 `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	YakScriptName string                 `protobuf:"bytes,3,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllNavigationRequest) Reset() {
	*x = GetAllNavigationRequest{}
	mi := &file_yakgrpc_proto_msgTypes[492]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNavigationRequest) ProtoMessage() {}

func (x *GetAllNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[492]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNavigationRequest.ProtoReflect.Descriptor instead.
func (*GetAllNavigationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{492}
}

func (x *GetAllNavigationRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *GetAllNavigationRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GetAllNavigationRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type GetAllNavigationItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*NavigationList      `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllNavigationItemResponse) Reset() {
	*x = GetAllNavigationItemResponse{}
	mi := &file_yakgrpc_proto_msgTypes[493]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllNavigationItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNavigationItemResponse) ProtoMessage() {}

func (x *GetAllNavigationItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[493]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNavigationItemResponse.ProtoReflect.Descriptor instead.
func (*GetAllNavigationItemResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{493}
}

func (x *GetAllNavigationItemResponse) GetData() []*NavigationList {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddOneNavigationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptName string                 `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose       string                 `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Mode          string                 `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	VerboseSort   int64                  `protobuf:"varint,5,opt,name=VerboseSort,proto3" json:"VerboseSort,omitempty"`
	GroupSort     int64                  `protobuf:"varint,6,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	GroupLabel    string                 `protobuf:"bytes,7,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
	VerboseLabel  string                 `protobuf:"bytes,8,opt,name=VerboseLabel,proto3" json:"VerboseLabel,omitempty"`
	Route         string                 `protobuf:"bytes,9,opt,name=Route,proto3" json:"Route,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddOneNavigationRequest) Reset() {
	*x = AddOneNavigationRequest{}
	mi := &file_yakgrpc_proto_msgTypes[494]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddOneNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOneNavigationRequest) ProtoMessage() {}

func (x *AddOneNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[494]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOneNavigationRequest.ProtoReflect.Descriptor instead.
func (*AddOneNavigationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{494}
}

func (x *AddOneNavigationRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *AddOneNavigationRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AddOneNavigationRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *AddOneNavigationRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AddOneNavigationRequest) GetVerboseSort() int64 {
	if x != nil {
		return x.VerboseSort
	}
	return 0
}

func (x *AddOneNavigationRequest) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *AddOneNavigationRequest) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *AddOneNavigationRequest) GetVerboseLabel() string {
	if x != nil {
		return x.VerboseLabel
	}
	return ""
}

func (x *AddOneNavigationRequest) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

type QueryNavigationGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptName string                 `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Mode          string                 `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNavigationGroupsRequest) Reset() {
	*x = QueryNavigationGroupsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[495]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNavigationGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNavigationGroupsRequest) ProtoMessage() {}

func (x *QueryNavigationGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[495]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNavigationGroupsRequest.ProtoReflect.Descriptor instead.
func (*QueryNavigationGroupsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{495}
}

func (x *QueryNavigationGroupsRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *QueryNavigationGroupsRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type UpdateFromYakitResourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proxy         string                 `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	BaseSourceUrl string                 `protobuf:"bytes,2,opt,name=BaseSourceUrl,proto3" json:"BaseSourceUrl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFromYakitResourceRequest) Reset() {
	*x = UpdateFromYakitResourceRequest{}
	mi := &file_yakgrpc_proto_msgTypes[496]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFromYakitResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromYakitResourceRequest) ProtoMessage() {}

func (x *UpdateFromYakitResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[496]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromYakitResourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateFromYakitResourceRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{496}
}

func (x *UpdateFromYakitResourceRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateFromYakitResourceRequest) GetBaseSourceUrl() string {
	if x != nil {
		return x.BaseSourceUrl
	}
	return ""
}

type UpdateFromGithubRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proxy         string                 `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	GithubUrl     string                 `protobuf:"bytes,2,opt,name=GithubUrl,proto3" json:"GithubUrl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFromGithubRequest) Reset() {
	*x = UpdateFromGithubRequest{}
	mi := &file_yakgrpc_proto_msgTypes[497]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFromGithubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromGithubRequest) ProtoMessage() {}

func (x *UpdateFromGithubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[497]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromGithubRequest.ProtoReflect.Descriptor instead.
func (*UpdateFromGithubRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{497}
}

func (x *UpdateFromGithubRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateFromGithubRequest) GetGithubUrl() string {
	if x != nil {
		return x.GithubUrl
	}
	return ""
}

type SimpleScript struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleScript) Reset() {
	*x = SimpleScript{}
	mi := &file_yakgrpc_proto_msgTypes[498]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleScript) ProtoMessage() {}

func (x *SimpleScript) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[498]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleScript.ProtoReflect.Descriptor instead.
func (*SimpleScript) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{498}
}

func (x *SimpleScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type LastRecord struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	LastRecordPtr        int64                  `protobuf:"varint,1,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
	Percent              float64                `protobuf:"fixed64,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	YakScriptOnlineGroup string                 `protobuf:"bytes,3,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	ExtraInfo            string                 `protobuf:"bytes,4,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LastRecord) Reset() {
	*x = LastRecord{}
	mi := &file_yakgrpc_proto_msgTypes[499]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastRecord) ProtoMessage() {}

func (x *LastRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[499]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastRecord.ProtoReflect.Descriptor instead.
func (*LastRecord) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{499}
}

func (x *LastRecord) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

func (x *LastRecord) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *LastRecord) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *LastRecord) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type RecordPortScanRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LastRecord       *LastRecord            `protobuf:"bytes,1,opt,name=LastRecord,proto3" json:"LastRecord,omitempty"`
	StartBruteParams *StartBruteParams      `protobuf:"bytes,3,opt,name=StartBruteParams,proto3" json:"StartBruteParams,omitempty"`
	PortScanRequest  *PortScanRequest       `protobuf:"bytes,2,opt,name=PortScanRequest,proto3" json:"PortScanRequest,omitempty"`
	RuntimeId        string                 `protobuf:"bytes,4,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RecordPortScanRequest) Reset() {
	*x = RecordPortScanRequest{}
	mi := &file_yakgrpc_proto_msgTypes[500]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordPortScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPortScanRequest) ProtoMessage() {}

func (x *RecordPortScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[500]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPortScanRequest.ProtoReflect.Descriptor instead.
func (*RecordPortScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{500}
}

func (x *RecordPortScanRequest) GetLastRecord() *LastRecord {
	if x != nil {
		return x.LastRecord
	}
	return nil
}

func (x *RecordPortScanRequest) GetStartBruteParams() *StartBruteParams {
	if x != nil {
		return x.StartBruteParams
	}
	return nil
}

func (x *RecordPortScanRequest) GetPortScanRequest() *PortScanRequest {
	if x != nil {
		return x.PortScanRequest
	}
	return nil
}

func (x *RecordPortScanRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type CreatReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportName    string                 `protobuf:"bytes,1,opt,name=ReportName,proto3" json:"ReportName,omitempty"`
	RuntimeId     string                 `protobuf:"bytes,2,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatReportRequest) Reset() {
	*x = CreatReportRequest{}
	mi := &file_yakgrpc_proto_msgTypes[501]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatReportRequest) ProtoMessage() {}

func (x *CreatReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[501]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatReportRequest.ProtoReflect.Descriptor instead.
func (*CreatReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{501}
}

func (x *CreatReportRequest) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *CreatReportRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type PortScanRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Targets    string                 `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
	Ports      string                 `protobuf:"bytes,2,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Mode       string                 `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Proto      []string               `protobuf:"bytes,4,rep,name=Proto,proto3" json:"Proto,omitempty"`
	Concurrent int64                  `protobuf:"varint,5,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	// 主动发包模式
	Active bool `protobuf:"varint,6,opt,name=Active,proto3" json:"Active,omitempty"`
	// service / web / all
	FingerprintMode string `protobuf:"bytes,7,opt,name=FingerprintMode,proto3" json:"FingerprintMode,omitempty"`
	// 保存数据库
	SaveToDB bool `protobuf:"varint,8,opt,name=SaveToDB,proto3" json:"SaveToDB,omitempty"`
	// 保存已经关闭的端口
	SaveClosedPorts bool `protobuf:"varint,9,opt,name=SaveClosedPorts,proto3" json:"SaveClosedPorts,omitempty"`
	// 上传扫描目标为文件
	TargetsFile string `protobuf:"bytes,10,opt,name=TargetsFile,proto3" json:"TargetsFile,omitempty"`
	// 设置上传的文件
	ScriptNames []string `protobuf:"bytes,11,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	// TCPProxy
	Proxy []string `protobuf:"bytes,12,rep,name=Proxy,proto3" json:"Proxy,omitempty"`
	// 设置单次探测超时时间
	ProbeTimeout float64 `protobuf:"fixed64,13,opt,name=ProbeTimeout,proto3" json:"ProbeTimeout,omitempty"`
	// ProbeMax 设置指纹探测条数
	ProbeMax int32 `protobuf:"varint,14,opt,name=ProbeMax,proto3" json:"ProbeMax,omitempty"`
	// 启用 C 段扫描
	EnableCClassScan bool `protobuf:"varint,15,opt,name=EnableCClassScan,proto3" json:"EnableCClassScan,omitempty"`
	// HostAlive Scan
	SkippedHostAliveScan bool    `protobuf:"varint,16,opt,name=SkippedHostAliveScan,proto3" json:"SkippedHostAliveScan,omitempty"`
	HostAliveTimeout     float64 `protobuf:"fixed64,17,opt,name=HostAliveTimeout,proto3" json:"HostAliveTimeout,omitempty"`
	HostAliveConcurrent  int32   `protobuf:"varint,18,opt,name=HostAliveConcurrent,proto3" json:"HostAliveConcurrent,omitempty"`
	HostAlivePorts       string  `protobuf:"bytes,19,opt,name=HostAlivePorts,proto3" json:"HostAlivePorts,omitempty"`
	// 排除端口与主机
	ExcludeHosts string `protobuf:"bytes,20,opt,name=ExcludeHosts,proto3" json:"ExcludeHosts,omitempty"`
	ExcludePorts string `protobuf:"bytes,21,opt,name=ExcludePorts,proto3" json:"ExcludePorts,omitempty"`
	// EnableBasicCrawler
	// 是否启用基础爬虫，以及基础爬虫最多几个请求？
	EnableBasicCrawler     bool  `protobuf:"varint,22,opt,name=EnableBasicCrawler,proto3" json:"EnableBasicCrawler,omitempty"`
	BasicCrawlerRequestMax int64 `protobuf:"varint,23,opt,name=BasicCrawlerRequestMax,proto3" json:"BasicCrawlerRequestMax,omitempty"`
	// SYN Concurrent
	// 简易设置 SYN 每秒并发
	SynConcurrent       int64  `protobuf:"varint,24,opt,name=SynConcurrent,proto3" json:"SynConcurrent,omitempty"`
	TaskName            string `protobuf:"bytes,25,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	EnableBrute         bool   `protobuf:"varint,26,opt,name=EnableBrute,proto3" json:"EnableBrute,omitempty"`
	SynScanNetInterface string `protobuf:"bytes,27,opt,name=SynScanNetInterface,proto3" json:"SynScanNetInterface,omitempty"`
	// 联动插件的配置
	LinkPluginConfig *HybridScanPluginConfig `protobuf:"bytes,28,opt,name=LinkPluginConfig,proto3" json:"LinkPluginConfig,omitempty"`
	// 爬虫是否启用 JS 解析
	BasicCrawlerEnableJSParser bool     `protobuf:"varint,29,opt,name=BasicCrawlerEnableJSParser,proto3" json:"BasicCrawlerEnableJSParser,omitempty"`
	UserFingerprintFiles       []string `protobuf:"bytes,30,rep,name=UserFingerprintFiles,proto3" json:"UserFingerprintFiles,omitempty"`
	SkipCveBaseLine            bool     `protobuf:"varint,31,opt,name=SkipCveBaseLine,proto3" json:"SkipCveBaseLine,omitempty"`
	// 指纹规则组
	EnableFingerprintGroup bool     `protobuf:"varint,32,opt,name=EnableFingerprintGroup,proto3" json:"EnableFingerprintGroup,omitempty"`
	FingerprintGroup       []string `protobuf:"bytes,33,rep,name=FingerprintGroup,proto3" json:"FingerprintGroup,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PortScanRequest) Reset() {
	*x = PortScanRequest{}
	mi := &file_yakgrpc_proto_msgTypes[502]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortScanRequest) ProtoMessage() {}

func (x *PortScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[502]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortScanRequest.ProtoReflect.Descriptor instead.
func (*PortScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{502}
}

func (x *PortScanRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *PortScanRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *PortScanRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *PortScanRequest) GetProto() []string {
	if x != nil {
		return x.Proto
	}
	return nil
}

func (x *PortScanRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *PortScanRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *PortScanRequest) GetFingerprintMode() string {
	if x != nil {
		return x.FingerprintMode
	}
	return ""
}

func (x *PortScanRequest) GetSaveToDB() bool {
	if x != nil {
		return x.SaveToDB
	}
	return false
}

func (x *PortScanRequest) GetSaveClosedPorts() bool {
	if x != nil {
		return x.SaveClosedPorts
	}
	return false
}

func (x *PortScanRequest) GetTargetsFile() string {
	if x != nil {
		return x.TargetsFile
	}
	return ""
}

func (x *PortScanRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *PortScanRequest) GetProxy() []string {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *PortScanRequest) GetProbeTimeout() float64 {
	if x != nil {
		return x.ProbeTimeout
	}
	return 0
}

func (x *PortScanRequest) GetProbeMax() int32 {
	if x != nil {
		return x.ProbeMax
	}
	return 0
}

func (x *PortScanRequest) GetEnableCClassScan() bool {
	if x != nil {
		return x.EnableCClassScan
	}
	return false
}

func (x *PortScanRequest) GetSkippedHostAliveScan() bool {
	if x != nil {
		return x.SkippedHostAliveScan
	}
	return false
}

func (x *PortScanRequest) GetHostAliveTimeout() float64 {
	if x != nil {
		return x.HostAliveTimeout
	}
	return 0
}

func (x *PortScanRequest) GetHostAliveConcurrent() int32 {
	if x != nil {
		return x.HostAliveConcurrent
	}
	return 0
}

func (x *PortScanRequest) GetHostAlivePorts() string {
	if x != nil {
		return x.HostAlivePorts
	}
	return ""
}

func (x *PortScanRequest) GetExcludeHosts() string {
	if x != nil {
		return x.ExcludeHosts
	}
	return ""
}

func (x *PortScanRequest) GetExcludePorts() string {
	if x != nil {
		return x.ExcludePorts
	}
	return ""
}

func (x *PortScanRequest) GetEnableBasicCrawler() bool {
	if x != nil {
		return x.EnableBasicCrawler
	}
	return false
}

func (x *PortScanRequest) GetBasicCrawlerRequestMax() int64 {
	if x != nil {
		return x.BasicCrawlerRequestMax
	}
	return 0
}

func (x *PortScanRequest) GetSynConcurrent() int64 {
	if x != nil {
		return x.SynConcurrent
	}
	return 0
}

func (x *PortScanRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *PortScanRequest) GetEnableBrute() bool {
	if x != nil {
		return x.EnableBrute
	}
	return false
}

func (x *PortScanRequest) GetSynScanNetInterface() string {
	if x != nil {
		return x.SynScanNetInterface
	}
	return ""
}

func (x *PortScanRequest) GetLinkPluginConfig() *HybridScanPluginConfig {
	if x != nil {
		return x.LinkPluginConfig
	}
	return nil
}

func (x *PortScanRequest) GetBasicCrawlerEnableJSParser() bool {
	if x != nil {
		return x.BasicCrawlerEnableJSParser
	}
	return false
}

func (x *PortScanRequest) GetUserFingerprintFiles() []string {
	if x != nil {
		return x.UserFingerprintFiles
	}
	return nil
}

func (x *PortScanRequest) GetSkipCveBaseLine() bool {
	if x != nil {
		return x.SkipCveBaseLine
	}
	return false
}

func (x *PortScanRequest) GetEnableFingerprintGroup() bool {
	if x != nil {
		return x.EnableFingerprintGroup
	}
	return false
}

func (x *PortScanRequest) GetFingerprintGroup() []string {
	if x != nil {
		return x.FingerprintGroup
	}
	return nil
}

type DeletePortsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hosts         string                 `protobuf:"bytes,1,opt,name=Hosts,proto3" json:"Hosts,omitempty"`
	Ports         string                 `protobuf:"bytes,2,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Id            []int64                `protobuf:"varint,3,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	All           bool                   `protobuf:"varint,4,opt,name=All,proto3" json:"All,omitempty"`
	Ids           []int64                `protobuf:"varint,5,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	DeleteAll     bool                   `protobuf:"varint,6,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Filter        *QueryPortsRequest     `protobuf:"bytes,7,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePortsRequest) Reset() {
	*x = DeletePortsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[503]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortsRequest) ProtoMessage() {}

func (x *DeletePortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[503]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortsRequest.ProtoReflect.Descriptor instead.
func (*DeletePortsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{503}
}

func (x *DeletePortsRequest) GetHosts() string {
	if x != nil {
		return x.Hosts
	}
	return ""
}

func (x *DeletePortsRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *DeletePortsRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeletePortsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *DeletePortsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeletePortsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeletePortsRequest) GetFilter() *QueryPortsRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QueryPortsRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Pagination *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	// 根据 Hosts Ports 查询
	Hosts           string `protobuf:"bytes,2,opt,name=Hosts,proto3" json:"Hosts,omitempty"`
	Ports           string `protobuf:"bytes,3,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Service         string `protobuf:"bytes,4,opt,name=Service,proto3" json:"Service,omitempty"`
	State           string `protobuf:"bytes,5,opt,name=State,proto3" json:"State,omitempty"`
	Title           string `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	All             bool   `protobuf:"varint,7,opt,name=All,proto3" json:"All,omitempty"`
	Keywords        string `protobuf:"bytes,8,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	TitleEffective  bool   `protobuf:"varint,9,opt,name=TitleEffective,proto3" json:"TitleEffective,omitempty"`
	ComplexSelect   string `protobuf:"bytes,10,opt,name=ComplexSelect,proto3" json:"ComplexSelect,omitempty"`
	Proto           string `protobuf:"bytes,11,opt,name=Proto,proto3" json:"Proto,omitempty"`
	RuntimeId       string `protobuf:"bytes,12,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	BeforeUpdatedAt int64  `protobuf:"varint,13,opt,name=BeforeUpdatedAt,proto3" json:"BeforeUpdatedAt,omitempty"`
	AfterUpdatedAt  int64  `protobuf:"varint,14,opt,name=AfterUpdatedAt,proto3" json:"AfterUpdatedAt,omitempty"`
	AfterId         int64  `protobuf:"varint,15,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	BeforeId        int64  `protobuf:"varint,16,opt,name=BeforeId,proto3" json:"BeforeId,omitempty"`
	OrderBy         string `protobuf:"bytes,17,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	Order           string `protobuf:"bytes,18,opt,name=Order,proto3" json:"Order,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryPortsRequest) Reset() {
	*x = QueryPortsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[504]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortsRequest) ProtoMessage() {}

func (x *QueryPortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[504]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortsRequest.ProtoReflect.Descriptor instead.
func (*QueryPortsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{504}
}

func (x *QueryPortsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPortsRequest) GetHosts() string {
	if x != nil {
		return x.Hosts
	}
	return ""
}

func (x *QueryPortsRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *QueryPortsRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *QueryPortsRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *QueryPortsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryPortsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *QueryPortsRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryPortsRequest) GetTitleEffective() bool {
	if x != nil {
		return x.TitleEffective
	}
	return false
}

func (x *QueryPortsRequest) GetComplexSelect() string {
	if x != nil {
		return x.ComplexSelect
	}
	return ""
}

func (x *QueryPortsRequest) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *QueryPortsRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *QueryPortsRequest) GetBeforeUpdatedAt() int64 {
	if x != nil {
		return x.BeforeUpdatedAt
	}
	return 0
}

func (x *QueryPortsRequest) GetAfterUpdatedAt() int64 {
	if x != nil {
		return x.AfterUpdatedAt
	}
	return 0
}

func (x *QueryPortsRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *QueryPortsRequest) GetBeforeId() int64 {
	if x != nil {
		return x.BeforeId
	}
	return 0
}

func (x *QueryPortsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *QueryPortsRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type QueryPortsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*Port                `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPortsResponse) Reset() {
	*x = QueryPortsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[505]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPortsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortsResponse) ProtoMessage() {}

func (x *QueryPortsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[505]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortsResponse.ProtoReflect.Descriptor instead.
func (*QueryPortsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{505}
}

func (x *QueryPortsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPortsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryPortsResponse) GetData() []*Port {
	if x != nil {
		return x.Data
	}
	return nil
}

type Port struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	IPInteger     int64                  `protobuf:"varint,2,opt,name=IPInteger,proto3" json:"IPInteger,omitempty"`
	Port          int64                  `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Proto         string                 `protobuf:"bytes,4,opt,name=Proto,proto3" json:"Proto,omitempty"`
	ServiceType   string                 `protobuf:"bytes,5,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	State         string                 `protobuf:"bytes,6,opt,name=State,proto3" json:"State,omitempty"`
	Reason        string                 `protobuf:"bytes,7,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Fingerprint   string                 `protobuf:"bytes,8,opt,name=Fingerprint,proto3" json:"Fingerprint,omitempty"`
	CPE           []string               `protobuf:"bytes,9,rep,name=CPE,proto3" json:"CPE,omitempty"`
	HtmlTitle     string                 `protobuf:"bytes,10,opt,name=HtmlTitle,proto3" json:"HtmlTitle,omitempty"`
	Id            int64                  `protobuf:"varint,11,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,12,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,13,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	TaskName      string                 `protobuf:"bytes,14,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Port) Reset() {
	*x = Port{}
	mi := &file_yakgrpc_proto_msgTypes[506]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[506]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{506}
}

func (x *Port) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Port) GetIPInteger() int64 {
	if x != nil {
		return x.IPInteger
	}
	return 0
}

func (x *Port) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Port) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *Port) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *Port) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Port) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Port) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *Port) GetCPE() []string {
	if x != nil {
		return x.CPE
	}
	return nil
}

func (x *Port) GetHtmlTitle() string {
	if x != nil {
		return x.HtmlTitle
	}
	return ""
}

func (x *Port) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Port) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Port) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Port) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type YakitCompletionRawResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawJson       []byte                 `protobuf:"bytes,1,opt,name=RawJson,proto3" json:"RawJson,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YakitCompletionRawResponse) Reset() {
	*x = YakitCompletionRawResponse{}
	mi := &file_yakgrpc_proto_msgTypes[507]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakitCompletionRawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakitCompletionRawResponse) ProtoMessage() {}

func (x *YakitCompletionRawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[507]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakitCompletionRawResponse.ProtoReflect.Descriptor instead.
func (*YakitCompletionRawResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{507}
}

func (x *YakitCompletionRawResponse) GetRawJson() []byte {
	if x != nil {
		return x.RawJson
	}
	return nil
}

type GetYakVMBuildInMethodCompletionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYakVMBuildInMethodCompletionRequest) Reset() {
	*x = GetYakVMBuildInMethodCompletionRequest{}
	mi := &file_yakgrpc_proto_msgTypes[508]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYakVMBuildInMethodCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakVMBuildInMethodCompletionRequest) ProtoMessage() {}

func (x *GetYakVMBuildInMethodCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[508]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakVMBuildInMethodCompletionRequest.ProtoReflect.Descriptor instead.
func (*GetYakVMBuildInMethodCompletionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{508}
}

// 这个定义我们争取和 monaco editor suggestion 基本一致
type SuggestionDescription struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Label             string                 `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	Description       string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	InsertText        string                 `protobuf:"bytes,3,opt,name=InsertText,proto3" json:"InsertText,omitempty"`
	JustAppend        bool                   `protobuf:"varint,4,opt,name=JustAppend,proto3" json:"JustAppend,omitempty"`
	DefinitionVerbose string                 `protobuf:"bytes,5,opt,name=DefinitionVerbose,proto3" json:"DefinitionVerbose,omitempty"` // 展示定义的内容，如果没有的话，一般展示 InsertText 就行
	Kind              string                 `protobuf:"bytes,6,opt,name=Kind,proto3" json:"Kind,omitempty"`                           // 补全类型, Method = 0, Function = 1, Constructor = 2, Field = 3, Variable = 4, Class = 5, Struct = 6, Interface = 7, Module = 8, Property = 9, Event = 10, Operator = 11, Unit = 12, Value = 13, Constant = 14, Enum = 15, EnumMember = 16, Keyword = 17, Text = 18, Color = 19, File = 20, Reference = 21, Customcolor = 22, Folder = 23, TypeParameter = 24, User = 25, Issue = 26, Snippet = 27
	Command           string                 `protobuf:"bytes,7,opt,name=Command,proto3" json:"Command,omitempty"`                     // 用于执行的命令
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SuggestionDescription) Reset() {
	*x = SuggestionDescription{}
	mi := &file_yakgrpc_proto_msgTypes[509]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuggestionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestionDescription) ProtoMessage() {}

func (x *SuggestionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[509]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestionDescription.ProtoReflect.Descriptor instead.
func (*SuggestionDescription) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{509}
}

func (x *SuggestionDescription) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SuggestionDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SuggestionDescription) GetInsertText() string {
	if x != nil {
		return x.InsertText
	}
	return ""
}

func (x *SuggestionDescription) GetJustAppend() bool {
	if x != nil {
		return x.JustAppend
	}
	return false
}

func (x *SuggestionDescription) GetDefinitionVerbose() string {
	if x != nil {
		return x.DefinitionVerbose
	}
	return ""
}

func (x *SuggestionDescription) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SuggestionDescription) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type MethodSuggestion struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 产生这个方法提示的关键词是啥？
	ExactKeywords []string `protobuf:"bytes,1,rep,name=ExactKeywords,proto3" json:"ExactKeywords,omitempty"`
	FuzzKeywords  []string `protobuf:"bytes,2,rep,name=FuzzKeywords,proto3" json:"FuzzKeywords,omitempty"`
	Regexp        []string `protobuf:"bytes,3,rep,name=Regexp,proto3" json:"Regexp,omitempty"`
	// 提示的内容是啥？
	Suggestions []*SuggestionDescription `protobuf:"bytes,4,rep,name=Suggestions,proto3" json:"Suggestions,omitempty"`
	// 这个代码提示方法组是啥？
	Verbose       string `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MethodSuggestion) Reset() {
	*x = MethodSuggestion{}
	mi := &file_yakgrpc_proto_msgTypes[510]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MethodSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodSuggestion) ProtoMessage() {}

func (x *MethodSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[510]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodSuggestion.ProtoReflect.Descriptor instead.
func (*MethodSuggestion) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{510}
}

func (x *MethodSuggestion) GetExactKeywords() []string {
	if x != nil {
		return x.ExactKeywords
	}
	return nil
}

func (x *MethodSuggestion) GetFuzzKeywords() []string {
	if x != nil {
		return x.FuzzKeywords
	}
	return nil
}

func (x *MethodSuggestion) GetRegexp() []string {
	if x != nil {
		return x.Regexp
	}
	return nil
}

func (x *MethodSuggestion) GetSuggestions() []*SuggestionDescription {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

func (x *MethodSuggestion) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type GetYakVMBuildInMethodCompletionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Suggestions   []*MethodSuggestion    `protobuf:"bytes,1,rep,name=Suggestions,proto3" json:"Suggestions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYakVMBuildInMethodCompletionResponse) Reset() {
	*x = GetYakVMBuildInMethodCompletionResponse{}
	mi := &file_yakgrpc_proto_msgTypes[511]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYakVMBuildInMethodCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakVMBuildInMethodCompletionResponse) ProtoMessage() {}

func (x *GetYakVMBuildInMethodCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[511]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakVMBuildInMethodCompletionResponse.ProtoReflect.Descriptor instead.
func (*GetYakVMBuildInMethodCompletionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{511}
}

func (x *GetYakVMBuildInMethodCompletionResponse) GetSuggestions() []*MethodSuggestion {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

type RenameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	NewName       string                 `protobuf:"bytes,2,opt,name=NewName,proto3" json:"NewName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameRequest) Reset() {
	*x = RenameRequest{}
	mi := &file_yakgrpc_proto_msgTypes[512]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRequest) ProtoMessage() {}

func (x *RenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[512]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRequest.ProtoReflect.Descriptor instead.
func (*RenameRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{512}
}

func (x *RenameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type NameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NameRequest) Reset() {
	*x = NameRequest{}
	mi := &file_yakgrpc_proto_msgTypes[513]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameRequest) ProtoMessage() {}

func (x *NameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[513]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameRequest.ProtoReflect.Descriptor instead.
func (*NameRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{513}
}

func (x *NameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PayloadGroupNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"` // "File" / "DataBase" / "Folder"
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Number        int64                  `protobuf:"varint,3,opt,name=Number,proto3" json:"Number,omitempty"`
	Nodes         []*PayloadGroupNode    `protobuf:"bytes,4,rep,name=Nodes,proto3" json:"Nodes,omitempty"` // for Type "Folder"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayloadGroupNode) Reset() {
	*x = PayloadGroupNode{}
	mi := &file_yakgrpc_proto_msgTypes[514]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayloadGroupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadGroupNode) ProtoMessage() {}

func (x *PayloadGroupNode) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[514]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadGroupNode.ProtoReflect.Descriptor instead.
func (*PayloadGroupNode) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{514}
}

func (x *PayloadGroupNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PayloadGroupNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayloadGroupNode) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PayloadGroupNode) GetNodes() []*PayloadGroupNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type GetAllPayloadGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []string               `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	Nodes         []*PayloadGroupNode    `protobuf:"bytes,2,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllPayloadGroupResponse) Reset() {
	*x = GetAllPayloadGroupResponse{}
	mi := &file_yakgrpc_proto_msgTypes[515]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllPayloadGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadGroupResponse) ProtoMessage() {}

func (x *GetAllPayloadGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[515]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadGroupResponse.ProtoReflect.Descriptor instead.
func (*GetAllPayloadGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{515}
}

func (x *GetAllPayloadGroupResponse) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GetAllPayloadGroupResponse) GetNodes() []*PayloadGroupNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type UpdateAllPayloadGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*PayloadGroupNode    `protobuf:"bytes,1,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAllPayloadGroupRequest) Reset() {
	*x = UpdateAllPayloadGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[516]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAllPayloadGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllPayloadGroupRequest) ProtoMessage() {}

func (x *UpdateAllPayloadGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[516]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllPayloadGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateAllPayloadGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{516}
}

func (x *UpdateAllPayloadGroupRequest) GetNodes() []*PayloadGroupNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type SavePayloadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsFile        bool                   `protobuf:"varint,1,opt,name=IsFile,proto3" json:"IsFile,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	FileName      []string               `protobuf:"bytes,4,rep,name=FileName,proto3" json:"FileName,omitempty"`
	Folder        string                 `protobuf:"bytes,5,opt,name=Folder,proto3" json:"Folder,omitempty"`
	IsNew         bool                   `protobuf:"varint,6,opt,name=IsNew,proto3" json:"IsNew,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SavePayloadRequest) Reset() {
	*x = SavePayloadRequest{}
	mi := &file_yakgrpc_proto_msgTypes[517]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SavePayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePayloadRequest) ProtoMessage() {}

func (x *SavePayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[517]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePayloadRequest.ProtoReflect.Descriptor instead.
func (*SavePayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{517}
}

func (x *SavePayloadRequest) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

func (x *SavePayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *SavePayloadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SavePayloadRequest) GetFileName() []string {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *SavePayloadRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *SavePayloadRequest) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type UpdatePayloadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// old
	Group    string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`       // old
	OldGroup string `protobuf:"bytes,2,opt,name=OldGroup,proto3" json:"OldGroup,omitempty"` // old
	// new, please use this
	Id            int64    `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Data          *Payload `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePayloadRequest) Reset() {
	*x = UpdatePayloadRequest{}
	mi := &file_yakgrpc_proto_msgTypes[518]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePayloadRequest) ProtoMessage() {}

func (x *UpdatePayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[518]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePayloadRequest.ProtoReflect.Descriptor instead.
func (*UpdatePayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{518}
}

func (x *UpdatePayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *UpdatePayloadRequest) GetOldGroup() string {
	if x != nil {
		return x.OldGroup
	}
	return ""
}

func (x *UpdatePayloadRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePayloadRequest) GetData() *Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdatePayloadToFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePayloadToFileRequest) Reset() {
	*x = UpdatePayloadToFileRequest{}
	mi := &file_yakgrpc_proto_msgTypes[519]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePayloadToFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePayloadToFileRequest) ProtoMessage() {}

func (x *UpdatePayloadToFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[519]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePayloadToFileRequest.ProtoReflect.Descriptor instead.
func (*UpdatePayloadToFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{519}
}

func (x *UpdatePayloadToFileRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *UpdatePayloadToFileRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// copy payload(get by id) to group
type BackUpOrCopyPayloadsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Folder        string                 `protobuf:"bytes,3,opt,name=Folder,proto3" json:"Folder,omitempty"`
	Copy          bool                   `protobuf:"varint,4,opt,name=Copy,proto3" json:"Copy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackUpOrCopyPayloadsRequest) Reset() {
	*x = BackUpOrCopyPayloadsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[520]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackUpOrCopyPayloadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackUpOrCopyPayloadsRequest) ProtoMessage() {}

func (x *BackUpOrCopyPayloadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[520]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackUpOrCopyPayloadsRequest.ProtoReflect.Descriptor instead.
func (*BackUpOrCopyPayloadsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{520}
}

func (x *BackUpOrCopyPayloadsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BackUpOrCopyPayloadsRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *BackUpOrCopyPayloadsRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *BackUpOrCopyPayloadsRequest) GetCopy() bool {
	if x != nil {
		return x.Copy
	}
	return false
}

type DeletePayloadByGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePayloadByGroupRequest) Reset() {
	*x = DeletePayloadByGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[521]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePayloadByGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayloadByGroupRequest) ProtoMessage() {}

func (x *DeletePayloadByGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[521]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayloadByGroupRequest.ProtoReflect.Descriptor instead.
func (*DeletePayloadByGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{521}
}

func (x *DeletePayloadByGroupRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type DeletePayloadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Ids           []int64                `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePayloadRequest) Reset() {
	*x = DeletePayloadRequest{}
	mi := &file_yakgrpc_proto_msgTypes[522]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayloadRequest) ProtoMessage() {}

func (x *DeletePayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[522]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayloadRequest.ProtoReflect.Descriptor instead.
func (*DeletePayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{522}
}

func (x *DeletePayloadRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeletePayloadRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type QueryPayloadFromFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Folder        string                 `protobuf:"bytes,2,opt,name=Folder,proto3" json:"Folder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPayloadFromFileRequest) Reset() {
	*x = QueryPayloadFromFileRequest{}
	mi := &file_yakgrpc_proto_msgTypes[523]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPayloadFromFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadFromFileRequest) ProtoMessage() {}

func (x *QueryPayloadFromFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[523]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadFromFileRequest.ProtoReflect.Descriptor instead.
func (*QueryPayloadFromFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{523}
}

func (x *QueryPayloadFromFileRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryPayloadFromFileRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

type QueryPayloadFromFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	IsBigFile     bool                   `protobuf:"varint,2,opt,name=IsBigFile,proto3" json:"IsBigFile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPayloadFromFileResponse) Reset() {
	*x = QueryPayloadFromFileResponse{}
	mi := &file_yakgrpc_proto_msgTypes[524]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPayloadFromFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadFromFileResponse) ProtoMessage() {}

func (x *QueryPayloadFromFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[524]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadFromFileResponse.ProtoReflect.Descriptor instead.
func (*QueryPayloadFromFileResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{524}
}

func (x *QueryPayloadFromFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryPayloadFromFileResponse) GetIsBigFile() bool {
	if x != nil {
		return x.IsBigFile
	}
	return false
}

type QueryPayloadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Keyword       string                 `protobuf:"bytes,3,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Folder        string                 `protobuf:"bytes,4,opt,name=Folder,proto3" json:"Folder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPayloadRequest) Reset() {
	*x = QueryPayloadRequest{}
	mi := &file_yakgrpc_proto_msgTypes[525]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadRequest) ProtoMessage() {}

func (x *QueryPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[525]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadRequest.ProtoReflect.Descriptor instead.
func (*QueryPayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{525}
}

func (x *QueryPayloadRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryPayloadRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryPayloadRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

type QueryPayloadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*Payload             `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPayloadResponse) Reset() {
	*x = QueryPayloadResponse{}
	mi := &file_yakgrpc_proto_msgTypes[526]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadResponse) ProtoMessage() {}

func (x *QueryPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[526]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadResponse.ProtoReflect.Descriptor instead.
func (*QueryPayloadResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{526}
}

func (x *QueryPayloadResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPayloadResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryPayloadResponse) GetData() []*Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	ContentBytes  []byte                 `protobuf:"bytes,3,opt,name=ContentBytes,proto3" json:"ContentBytes,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"`
	Folder        string                 `protobuf:"bytes,5,opt,name=Folder,proto3" json:"Folder,omitempty"`
	HitCount      int64                  `protobuf:"varint,6,opt,name=HitCount,proto3" json:"HitCount,omitempty"`
	IsFile        bool                   `protobuf:"varint,7,opt,name=IsFile,proto3" json:"IsFile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Payload) Reset() {
	*x = Payload{}
	mi := &file_yakgrpc_proto_msgTypes[527]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[527]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{527}
}

func (x *Payload) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payload) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Payload) GetContentBytes() []byte {
	if x != nil {
		return x.ContentBytes
	}
	return nil
}

func (x *Payload) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Payload) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *Payload) GetHitCount() int64 {
	if x != nil {
		return x.HitCount
	}
	return 0
}

func (x *Payload) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

type GetAllPayloadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Folder        string                 `protobuf:"bytes,2,opt,name=Folder,proto3" json:"Folder,omitempty"`
	SavePath      string                 `protobuf:"bytes,3,opt,name=SavePath,proto3" json:"SavePath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllPayloadRequest) Reset() {
	*x = GetAllPayloadRequest{}
	mi := &file_yakgrpc_proto_msgTypes[528]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadRequest) ProtoMessage() {}

func (x *GetAllPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[528]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadRequest.ProtoReflect.Descriptor instead.
func (*GetAllPayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{528}
}

func (x *GetAllPayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GetAllPayloadRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *GetAllPayloadRequest) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

type GetAllPayloadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*Payload             `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Progress      float64                `protobuf:"fixed64,2,opt,name=Progress,proto3" json:"Progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllPayloadResponse) Reset() {
	*x = GetAllPayloadResponse{}
	mi := &file_yakgrpc_proto_msgTypes[529]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadResponse) ProtoMessage() {}

func (x *GetAllPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[529]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadResponse.ProtoReflect.Descriptor instead.
func (*GetAllPayloadResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{529}
}

func (x *GetAllPayloadResponse) GetData() []*Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllPayloadResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GetAllPayloadFromFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      float64                `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllPayloadFromFileResponse) Reset() {
	*x = GetAllPayloadFromFileResponse{}
	mi := &file_yakgrpc_proto_msgTypes[530]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllPayloadFromFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadFromFileResponse) ProtoMessage() {}

func (x *GetAllPayloadFromFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[530]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadFromFileResponse.ProtoReflect.Descriptor instead.
func (*GetAllPayloadFromFileResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{530}
}

func (x *GetAllPayloadFromFileResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *GetAllPayloadFromFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Pagination               *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Type                     string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Keyword                  string                 `protobuf:"bytes,3,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	IsHistory                bool                   `protobuf:"varint,4,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore                 bool                   `protobuf:"varint,5,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule          bool                   `protobuf:"varint,6,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	IsBatch                  bool                   `protobuf:"varint,7,opt,name=IsBatch,proto3" json:"IsBatch,omitempty"`
	ExcludeNucleiWorkflow    bool                   `protobuf:"varint,8,opt,name=ExcludeNucleiWorkflow,proto3" json:"ExcludeNucleiWorkflow,omitempty"`
	ExcludeScriptNames       []string               `protobuf:"bytes,9,rep,name=ExcludeScriptNames,proto3" json:"ExcludeScriptNames,omitempty"`
	IncludedScriptNames      []string               `protobuf:"bytes,10,rep,name=IncludedScriptNames,proto3" json:"IncludedScriptNames,omitempty"`
	Tag                      []string               `protobuf:"bytes,11,rep,name=Tag,proto3" json:"Tag,omitempty"`
	NoResultReturn           bool                   `protobuf:"varint,12,opt,name=NoResultReturn,proto3" json:"NoResultReturn,omitempty"` // 这是一很特殊的选项，如果开启了，total 将会为 0
	UserId                   int64                  `protobuf:"varint,13,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName                 string                 `protobuf:"bytes,14,opt,name=UserName,proto3" json:"UserName,omitempty"`
	IgnoreGeneralModuleOrder bool                   `protobuf:"varint,15,opt,name=IgnoreGeneralModuleOrder,proto3" json:"IgnoreGeneralModuleOrder,omitempty"`
	Family                   []string               `protobuf:"bytes,16,rep,name=Family,proto3" json:"Family,omitempty"`
	UUID                     string                 `protobuf:"bytes,17,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Group                    *PluginGroup           `protobuf:"bytes,18,opt,name=Group,proto3" json:"Group,omitempty"`
	ExcludeTypes             []string               `protobuf:"bytes,19,rep,name=ExcludeTypes,proto3" json:"ExcludeTypes,omitempty"`
	IsMITMParamPlugins       int64                  `protobuf:"varint,20,opt,name=IsMITMParamPlugins,proto3" json:"IsMITMParamPlugins,omitempty"` //0->默认全部 1->是mitm带参数插件 2->mitm不带参数
	FieldKeywords            string                 `protobuf:"bytes,21,opt,name=FieldKeywords,proto3" json:"FieldKeywords,omitempty"`
	VectorSearchContent      string                 `protobuf:"bytes,22,opt,name=VectorSearchContent,proto3" json:"VectorSearchContent,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *QueryYakScriptRequest) Reset() {
	*x = QueryYakScriptRequest{}
	mi := &file_yakgrpc_proto_msgTypes[531]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptRequest) ProtoMessage() {}

func (x *QueryYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[531]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{531}
}

func (x *QueryYakScriptRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryYakScriptRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryYakScriptRequest) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsBatch() bool {
	if x != nil {
		return x.IsBatch
	}
	return false
}

func (x *QueryYakScriptRequest) GetExcludeNucleiWorkflow() bool {
	if x != nil {
		return x.ExcludeNucleiWorkflow
	}
	return false
}

func (x *QueryYakScriptRequest) GetExcludeScriptNames() []string {
	if x != nil {
		return x.ExcludeScriptNames
	}
	return nil
}

func (x *QueryYakScriptRequest) GetIncludedScriptNames() []string {
	if x != nil {
		return x.IncludedScriptNames
	}
	return nil
}

func (x *QueryYakScriptRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *QueryYakScriptRequest) GetNoResultReturn() bool {
	if x != nil {
		return x.NoResultReturn
	}
	return false
}

func (x *QueryYakScriptRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryYakScriptRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *QueryYakScriptRequest) GetIgnoreGeneralModuleOrder() bool {
	if x != nil {
		return x.IgnoreGeneralModuleOrder
	}
	return false
}

func (x *QueryYakScriptRequest) GetFamily() []string {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *QueryYakScriptRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *QueryYakScriptRequest) GetGroup() *PluginGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *QueryYakScriptRequest) GetExcludeTypes() []string {
	if x != nil {
		return x.ExcludeTypes
	}
	return nil
}

func (x *QueryYakScriptRequest) GetIsMITMParamPlugins() int64 {
	if x != nil {
		return x.IsMITMParamPlugins
	}
	return 0
}

func (x *QueryYakScriptRequest) GetFieldKeywords() string {
	if x != nil {
		return x.FieldKeywords
	}
	return ""
}

func (x *QueryYakScriptRequest) GetVectorSearchContent() string {
	if x != nil {
		return x.VectorSearchContent
	}
	return ""
}

type PluginGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnSetGroup    bool                   `protobuf:"varint,1,opt,name=UnSetGroup,proto3" json:"UnSetGroup,omitempty"`
	Group         []string               `protobuf:"bytes,2,rep,name=Group,proto3" json:"Group,omitempty"`
	IsPocBuiltIn  string                 `protobuf:"bytes,3,opt,name=IsPocBuiltIn,proto3" json:"IsPocBuiltIn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginGroup) Reset() {
	*x = PluginGroup{}
	mi := &file_yakgrpc_proto_msgTypes[532]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginGroup) ProtoMessage() {}

func (x *PluginGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[532]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginGroup.ProtoReflect.Descriptor instead.
func (*PluginGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{532}
}

func (x *PluginGroup) GetUnSetGroup() bool {
	if x != nil {
		return x.UnSetGroup
	}
	return false
}

func (x *PluginGroup) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *PluginGroup) GetIsPocBuiltIn() string {
	if x != nil {
		return x.IsPocBuiltIn
	}
	return ""
}

type QueryYakScriptResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data          []*YakScript           `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptResponse) Reset() {
	*x = QueryYakScriptResponse{}
	mi := &file_yakgrpc_proto_msgTypes[533]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptResponse) ProtoMessage() {}

func (x *QueryYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[533]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{533}
}

func (x *QueryYakScriptResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryYakScriptResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type YakScriptParam struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Field        string                 `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
	DefaultValue string                 `protobuf:"bytes,2,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	// int/number/integer/float/str/bool
	TypeVerbose              string `protobuf:"bytes,3,opt,name=TypeVerbose,proto3" json:"TypeVerbose,omitempty"`
	FieldVerbose             string `protobuf:"bytes,4,opt,name=FieldVerbose,proto3" json:"FieldVerbose,omitempty"`
	Help                     string `protobuf:"bytes,5,opt,name=Help,proto3" json:"Help,omitempty"`
	Required                 bool   `protobuf:"varint,6,opt,name=Required,proto3" json:"Required,omitempty"`
	Group                    string `protobuf:"bytes,7,opt,name=Group,proto3" json:"Group,omitempty"`
	ExtraSetting             string `protobuf:"bytes,8,opt,name=ExtraSetting,proto3" json:"ExtraSetting,omitempty"`
	MethodType               string `protobuf:"bytes,9,opt,name=MethodType,proto3" json:"MethodType,omitempty"`
	JsonSchema               string `protobuf:"bytes,10,opt,name=JsonSchema,proto3" json:"JsonSchema,omitempty"`
	SuggestionDataExpression string `protobuf:"bytes,11,opt,name=SuggestionDataExpression,proto3" json:"SuggestionDataExpression,omitempty"`
	UISchema                 string `protobuf:"bytes,12,opt,name=UISchema,proto3" json:"UISchema,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *YakScriptParam) Reset() {
	*x = YakScriptParam{}
	mi := &file_yakgrpc_proto_msgTypes[534]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakScriptParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptParam) ProtoMessage() {}

func (x *YakScriptParam) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[534]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptParam.ProtoReflect.Descriptor instead.
func (*YakScriptParam) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{534}
}

func (x *YakScriptParam) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *YakScriptParam) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *YakScriptParam) GetTypeVerbose() string {
	if x != nil {
		return x.TypeVerbose
	}
	return ""
}

func (x *YakScriptParam) GetFieldVerbose() string {
	if x != nil {
		return x.FieldVerbose
	}
	return ""
}

func (x *YakScriptParam) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YakScriptParam) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *YakScriptParam) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *YakScriptParam) GetExtraSetting() string {
	if x != nil {
		return x.ExtraSetting
	}
	return ""
}

func (x *YakScriptParam) GetMethodType() string {
	if x != nil {
		return x.MethodType
	}
	return ""
}

func (x *YakScriptParam) GetJsonSchema() string {
	if x != nil {
		return x.JsonSchema
	}
	return ""
}

func (x *YakScriptParam) GetSuggestionDataExpression() string {
	if x != nil {
		return x.SuggestionDataExpression
	}
	return ""
}

func (x *YakScriptParam) GetUISchema() string {
	if x != nil {
		return x.UISchema
	}
	return ""
}

type YakScript struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Content              string                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Type                 string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Params               []*YakScriptParam      `protobuf:"bytes,4,rep,name=Params,proto3" json:"Params,omitempty"`
	CreatedAt            int64                  `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ScriptName           string                 `protobuf:"bytes,6,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Help                 string                 `protobuf:"bytes,7,opt,name=Help,proto3" json:"Help,omitempty"`
	Level                string                 `protobuf:"bytes,8,opt,name=Level,proto3" json:"Level,omitempty"`
	Author               string                 `protobuf:"bytes,9,opt,name=Author,proto3" json:"Author,omitempty"`
	Tags                 string                 `protobuf:"bytes,10,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsHistory            bool                   `protobuf:"varint,11,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore             bool                   `protobuf:"varint,12,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule      bool                   `protobuf:"varint,13,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	GeneralModuleVerbose string                 `protobuf:"bytes,14,opt,name=GeneralModuleVerbose,proto3" json:"GeneralModuleVerbose,omitempty"`
	GeneralModuleKey     string                 `protobuf:"bytes,15,opt,name=GeneralModuleKey,proto3" json:"GeneralModuleKey,omitempty"`
	FromGit              string                 `protobuf:"bytes,16,opt,name=FromGit,proto3" json:"FromGit,omitempty"`
	EnablePluginSelector bool                   `protobuf:"varint,17,opt,name=EnablePluginSelector,proto3" json:"EnablePluginSelector,omitempty"`
	PluginSelectorTypes  string                 `protobuf:"bytes,18,opt,name=PluginSelectorTypes,proto3" json:"PluginSelectorTypes,omitempty"`
	OnlineId             int64                  `protobuf:"varint,19,opt,name=OnlineId,proto3" json:"OnlineId,omitempty"`
	UserId               int64                  `protobuf:"varint,20,opt,name=UserId,proto3" json:"UserId,omitempty"`
	OnlineScriptName     string                 `protobuf:"bytes,21,opt,name=OnlineScriptName,proto3" json:"OnlineScriptName,omitempty"`
	OnlineContributors   string                 `protobuf:"bytes,22,opt,name=OnlineContributors,proto3" json:"OnlineContributors,omitempty"`
	UUID                 string                 `protobuf:"bytes,23,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OnlineIsPrivate      bool                   `protobuf:"varint,24,opt,name=OnlineIsPrivate,proto3" json:"OnlineIsPrivate,omitempty"`
	HeadImg              string                 `protobuf:"bytes,25,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	OnlineBaseUrl        string                 `protobuf:"bytes,26,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
	BaseOnlineId         int64                  `protobuf:"varint,27,opt,name=BaseOnlineId,proto3" json:"BaseOnlineId,omitempty"`
	OnlineOfficial       bool                   `protobuf:"varint,28,opt,name=OnlineOfficial,proto3" json:"OnlineOfficial,omitempty"`
	OnlineGroup          string                 `protobuf:"bytes,29,opt,name=OnlineGroup,proto3" json:"OnlineGroup,omitempty"`
	IsCorePlugin         bool                   `protobuf:"varint,30,opt,name=IsCorePlugin,proto3" json:"IsCorePlugin,omitempty"`
	UpdatedAt            int64                  `protobuf:"varint,31,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	RiskType             string                 `protobuf:"bytes,32,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	// 结构弃用
	RiskDetail     *QueryYakScriptRiskDetailByCWEResponse `protobuf:"bytes,33,opt,name=RiskDetail,proto3" json:"RiskDetail,omitempty"`
	RiskAnnotation string                                 `protobuf:"bytes,34,opt,name=RiskAnnotation,proto3" json:"RiskAnnotation,omitempty"`
	// 协作者
	CollaboratorInfo []*Collaborator `protobuf:"bytes,35,rep,name=CollaboratorInfo,proto3" json:"CollaboratorInfo,omitempty"`
	RiskInfo         []*YakRiskInfo  `protobuf:"bytes,36,rep,name=RiskInfo,proto3" json:"RiskInfo,omitempty"`
	IsUpdate         bool            `protobuf:"varint,37,opt,name=IsUpdate,proto3" json:"IsUpdate,omitempty"`
	PluginEnvKey     []string        `protobuf:"bytes,38,rep,name=PluginEnvKey,proto3" json:"PluginEnvKey,omitempty"`
	SkipUpdate       bool            `protobuf:"varint,39,opt,name=SkipUpdate,proto3" json:"SkipUpdate,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *YakScript) Reset() {
	*x = YakScript{}
	mi := &file_yakgrpc_proto_msgTypes[535]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScript) ProtoMessage() {}

func (x *YakScript) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[535]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScript.ProtoReflect.Descriptor instead.
func (*YakScript) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{535}
}

func (x *YakScript) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YakScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *YakScript) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *YakScript) GetParams() []*YakScriptParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *YakScript) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *YakScript) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *YakScript) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YakScript) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *YakScript) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *YakScript) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *YakScript) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *YakScript) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *YakScript) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *YakScript) GetGeneralModuleVerbose() string {
	if x != nil {
		return x.GeneralModuleVerbose
	}
	return ""
}

func (x *YakScript) GetGeneralModuleKey() string {
	if x != nil {
		return x.GeneralModuleKey
	}
	return ""
}

func (x *YakScript) GetFromGit() string {
	if x != nil {
		return x.FromGit
	}
	return ""
}

func (x *YakScript) GetEnablePluginSelector() bool {
	if x != nil {
		return x.EnablePluginSelector
	}
	return false
}

func (x *YakScript) GetPluginSelectorTypes() string {
	if x != nil {
		return x.PluginSelectorTypes
	}
	return ""
}

func (x *YakScript) GetOnlineId() int64 {
	if x != nil {
		return x.OnlineId
	}
	return 0
}

func (x *YakScript) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *YakScript) GetOnlineScriptName() string {
	if x != nil {
		return x.OnlineScriptName
	}
	return ""
}

func (x *YakScript) GetOnlineContributors() string {
	if x != nil {
		return x.OnlineContributors
	}
	return ""
}

func (x *YakScript) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *YakScript) GetOnlineIsPrivate() bool {
	if x != nil {
		return x.OnlineIsPrivate
	}
	return false
}

func (x *YakScript) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *YakScript) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

func (x *YakScript) GetBaseOnlineId() int64 {
	if x != nil {
		return x.BaseOnlineId
	}
	return 0
}

func (x *YakScript) GetOnlineOfficial() bool {
	if x != nil {
		return x.OnlineOfficial
	}
	return false
}

func (x *YakScript) GetOnlineGroup() string {
	if x != nil {
		return x.OnlineGroup
	}
	return ""
}

func (x *YakScript) GetIsCorePlugin() bool {
	if x != nil {
		return x.IsCorePlugin
	}
	return false
}

func (x *YakScript) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *YakScript) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *YakScript) GetRiskDetail() *QueryYakScriptRiskDetailByCWEResponse {
	if x != nil {
		return x.RiskDetail
	}
	return nil
}

func (x *YakScript) GetRiskAnnotation() string {
	if x != nil {
		return x.RiskAnnotation
	}
	return ""
}

func (x *YakScript) GetCollaboratorInfo() []*Collaborator {
	if x != nil {
		return x.CollaboratorInfo
	}
	return nil
}

func (x *YakScript) GetRiskInfo() []*YakRiskInfo {
	if x != nil {
		return x.RiskInfo
	}
	return nil
}

func (x *YakScript) GetIsUpdate() bool {
	if x != nil {
		return x.IsUpdate
	}
	return false
}

func (x *YakScript) GetPluginEnvKey() []string {
	if x != nil {
		return x.PluginEnvKey
	}
	return nil
}

func (x *YakScript) GetSkipUpdate() bool {
	if x != nil {
		return x.SkipUpdate
	}
	return false
}

type Collaborator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeadImg       string                 `protobuf:"bytes,1,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Collaborator) Reset() {
	*x = Collaborator{}
	mi := &file_yakgrpc_proto_msgTypes[536]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Collaborator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collaborator) ProtoMessage() {}

func (x *Collaborator) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[536]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collaborator.ProtoReflect.Descriptor instead.
func (*Collaborator) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{536}
}

func (x *Collaborator) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *Collaborator) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type SaveNewYakScriptRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Content              string                 `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Type                 string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Params               []*YakScriptParam      `protobuf:"bytes,3,rep,name=Params,proto3" json:"Params,omitempty"`
	ScriptName           string                 `protobuf:"bytes,4,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Help                 string                 `protobuf:"bytes,5,opt,name=Help,proto3" json:"Help,omitempty"`
	Level                string                 `protobuf:"bytes,6,opt,name=Level,proto3" json:"Level,omitempty"`
	Tags                 string                 `protobuf:"bytes,7,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsHistory            bool                   `protobuf:"varint,8,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore             bool                   `protobuf:"varint,9,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule      bool                   `protobuf:"varint,10,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	GeneralModuleVerbose string                 `protobuf:"bytes,11,opt,name=GeneralModuleVerbose,proto3" json:"GeneralModuleVerbose,omitempty"`
	GeneralModuleKey     string                 `protobuf:"bytes,12,opt,name=GeneralModuleKey,proto3" json:"GeneralModuleKey,omitempty"`
	FromGit              string                 `protobuf:"bytes,13,opt,name=FromGit,proto3" json:"FromGit,omitempty"`
	EnablePluginSelector bool                   `protobuf:"varint,14,opt,name=EnablePluginSelector,proto3" json:"EnablePluginSelector,omitempty"`
	PluginSelectorTypes  string                 `protobuf:"bytes,15,opt,name=PluginSelectorTypes,proto3" json:"PluginSelectorTypes,omitempty"`
	IsCorePlugin         bool                   `protobuf:"varint,16,opt,name=IsCorePlugin,proto3" json:"IsCorePlugin,omitempty"`
	RiskType             string                 `protobuf:"bytes,17,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	// 这个结构弃用,换成YakRiskInfo
	RiskDetail     *QueryYakScriptRiskDetailByCWEResponse `protobuf:"bytes,18,opt,name=RiskDetail,proto3" json:"RiskDetail,omitempty"`
	RiskAnnotation string                                 `protobuf:"bytes,19,opt,name=RiskAnnotation,proto3" json:"RiskAnnotation,omitempty"`
	Id             int64                                  `protobuf:"varint,20,opt,name=Id,proto3" json:"Id,omitempty"`
	RiskInfo       []*YakRiskInfo                         `protobuf:"bytes,21,rep,name=RiskInfo,proto3" json:"RiskInfo,omitempty"`
	PluginEnvKey   []string                               `protobuf:"bytes,22,rep,name=PluginEnvKey,proto3" json:"PluginEnvKey,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SaveNewYakScriptRequest) Reset() {
	*x = SaveNewYakScriptRequest{}
	mi := &file_yakgrpc_proto_msgTypes[537]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveNewYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNewYakScriptRequest) ProtoMessage() {}

func (x *SaveNewYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[537]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNewYakScriptRequest.ProtoReflect.Descriptor instead.
func (*SaveNewYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{537}
}

func (x *SaveNewYakScriptRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetParams() []*YakScriptParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SaveNewYakScriptRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetGeneralModuleVerbose() string {
	if x != nil {
		return x.GeneralModuleVerbose
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetGeneralModuleKey() string {
	if x != nil {
		return x.GeneralModuleKey
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetFromGit() string {
	if x != nil {
		return x.FromGit
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetEnablePluginSelector() bool {
	if x != nil {
		return x.EnablePluginSelector
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetPluginSelectorTypes() string {
	if x != nil {
		return x.PluginSelectorTypes
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetIsCorePlugin() bool {
	if x != nil {
		return x.IsCorePlugin
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetRiskDetail() *QueryYakScriptRiskDetailByCWEResponse {
	if x != nil {
		return x.RiskDetail
	}
	return nil
}

func (x *SaveNewYakScriptRequest) GetRiskAnnotation() string {
	if x != nil {
		return x.RiskAnnotation
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SaveNewYakScriptRequest) GetRiskInfo() []*YakRiskInfo {
	if x != nil {
		return x.RiskInfo
	}
	return nil
}

func (x *SaveNewYakScriptRequest) GetPluginEnvKey() []string {
	if x != nil {
		return x.PluginEnvKey
	}
	return nil
}

type SaveYakScriptToOnlineRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ScriptNames      []string               `protobuf:"bytes,1,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	Token            string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	IsPrivate        bool                   `protobuf:"varint,3,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	All              bool                   `protobuf:"varint,4,opt,name=All,proto3" json:"All,omitempty"`
	PluginSupplement string                 `protobuf:"bytes,5,opt,name=PluginSupplement,proto3" json:"PluginSupplement,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SaveYakScriptToOnlineRequest) Reset() {
	*x = SaveYakScriptToOnlineRequest{}
	mi := &file_yakgrpc_proto_msgTypes[538]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveYakScriptToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveYakScriptToOnlineRequest) ProtoMessage() {}

func (x *SaveYakScriptToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[538]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveYakScriptToOnlineRequest.ProtoReflect.Descriptor instead.
func (*SaveYakScriptToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{538}
}

func (x *SaveYakScriptToOnlineRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *SaveYakScriptToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SaveYakScriptToOnlineRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *SaveYakScriptToOnlineRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SaveYakScriptToOnlineRequest) GetPluginSupplement() string {
	if x != nil {
		return x.PluginSupplement
	}
	return ""
}

type SaveYakScriptToOnlineResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 进度
	Progress      float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message       string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType   string  `protobuf:"bytes,3,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveYakScriptToOnlineResponse) Reset() {
	*x = SaveYakScriptToOnlineResponse{}
	mi := &file_yakgrpc_proto_msgTypes[539]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveYakScriptToOnlineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveYakScriptToOnlineResponse) ProtoMessage() {}

func (x *SaveYakScriptToOnlineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[539]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveYakScriptToOnlineResponse.ProtoReflect.Descriptor instead.
func (*SaveYakScriptToOnlineResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{539}
}

func (x *SaveYakScriptToOnlineResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SaveYakScriptToOnlineResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SaveYakScriptToOnlineResponse) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type ToOnlineResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptName    string                 `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToOnlineResult) Reset() {
	*x = ToOnlineResult{}
	mi := &file_yakgrpc_proto_msgTypes[540]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToOnlineResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToOnlineResult) ProtoMessage() {}

func (x *ToOnlineResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[540]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToOnlineResult.ProtoReflect.Descriptor instead.
func (*ToOnlineResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{540}
}

func (x *ToOnlineResult) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

type ExportLocalYakScriptRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	OutputDir       string                 `protobuf:"bytes,1,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	OutputPluginDir string                 `protobuf:"bytes,2,opt,name=OutputPluginDir,proto3" json:"OutputPluginDir,omitempty"`
	YakScriptIds    []int64                `protobuf:"varint,3,rep,packed,name=YakScriptIds,proto3" json:"YakScriptIds,omitempty"`
	Keywords        string                 `protobuf:"bytes,4,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Type            string                 `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	UserName        string                 `protobuf:"bytes,6,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Tags            string                 `protobuf:"bytes,7,opt,name=Tags,proto3" json:"Tags,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExportLocalYakScriptRequest) Reset() {
	*x = ExportLocalYakScriptRequest{}
	mi := &file_yakgrpc_proto_msgTypes[541]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportLocalYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportLocalYakScriptRequest) ProtoMessage() {}

func (x *ExportLocalYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[541]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportLocalYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExportLocalYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{541}
}

func (x *ExportLocalYakScriptRequest) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetOutputPluginDir() string {
	if x != nil {
		return x.OutputPluginDir
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetYakScriptIds() []int64 {
	if x != nil {
		return x.YakScriptIds
	}
	return nil
}

func (x *ExportLocalYakScriptRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

type ExportLocalYakScriptResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutputDir     string                 `protobuf:"bytes,1,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportLocalYakScriptResponse) Reset() {
	*x = ExportLocalYakScriptResponse{}
	mi := &file_yakgrpc_proto_msgTypes[542]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportLocalYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportLocalYakScriptResponse) ProtoMessage() {}

func (x *ExportLocalYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[542]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportLocalYakScriptResponse.ProtoReflect.Descriptor instead.
func (*ExportLocalYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{542}
}

func (x *ExportLocalYakScriptResponse) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

type ExportYakScriptLocalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutputDir     string                 `protobuf:"bytes,1,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	Progress      float64                `protobuf:"fixed64,2,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType   string                 `protobuf:"bytes,4,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportYakScriptLocalResponse) Reset() {
	*x = ExportYakScriptLocalResponse{}
	mi := &file_yakgrpc_proto_msgTypes[543]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportYakScriptLocalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptLocalResponse) ProtoMessage() {}

func (x *ExportYakScriptLocalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[543]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptLocalResponse.ProtoReflect.Descriptor instead.
func (*ExportYakScriptLocalResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{543}
}

func (x *ExportYakScriptLocalResponse) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *ExportYakScriptLocalResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ExportYakScriptLocalResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExportYakScriptLocalResponse) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type ImportYakScriptRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dirs          []string               `protobuf:"bytes,1,rep,name=Dirs,proto3" json:"Dirs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportYakScriptRequest) Reset() {
	*x = ImportYakScriptRequest{}
	mi := &file_yakgrpc_proto_msgTypes[544]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportYakScriptRequest) ProtoMessage() {}

func (x *ImportYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[544]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ImportYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{544}
}

func (x *ImportYakScriptRequest) GetDirs() []string {
	if x != nil {
		return x.Dirs
	}
	return nil
}

type ImportYakScriptResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 进度
	Progress      float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message       string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType   string  `protobuf:"bytes,3,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportYakScriptResult) Reset() {
	*x = ImportYakScriptResult{}
	mi := &file_yakgrpc_proto_msgTypes[545]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportYakScriptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportYakScriptResult) ProtoMessage() {}

func (x *ImportYakScriptResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[545]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportYakScriptResult.ProtoReflect.Descriptor instead.
func (*ImportYakScriptResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{545}
}

func (x *ImportYakScriptResult) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ImportYakScriptResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ImportYakScriptResult) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type SetYakScriptSkipUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SkipUpdate    bool                   `protobuf:"varint,1,opt,name=SkipUpdate,proto3" json:"SkipUpdate,omitempty"`
	Field         *QueryYakScriptRequest `protobuf:"bytes,2,opt,name=Field,proto3" json:"Field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetYakScriptSkipUpdateRequest) Reset() {
	*x = SetYakScriptSkipUpdateRequest{}
	mi := &file_yakgrpc_proto_msgTypes[546]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetYakScriptSkipUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetYakScriptSkipUpdateRequest) ProtoMessage() {}

func (x *SetYakScriptSkipUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[546]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetYakScriptSkipUpdateRequest.ProtoReflect.Descriptor instead.
func (*SetYakScriptSkipUpdateRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{546}
}

func (x *SetYakScriptSkipUpdateRequest) GetSkipUpdate() bool {
	if x != nil {
		return x.SkipUpdate
	}
	return false
}

func (x *SetYakScriptSkipUpdateRequest) GetField() *QueryYakScriptRequest {
	if x != nil {
		return x.Field
	}
	return nil
}

type QueryYakScriptSkipUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SkipUpdate    bool                   `protobuf:"varint,1,opt,name=SkipUpdate,proto3" json:"SkipUpdate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptSkipUpdateResponse) Reset() {
	*x = QueryYakScriptSkipUpdateResponse{}
	mi := &file_yakgrpc_proto_msgTypes[547]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptSkipUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptSkipUpdateResponse) ProtoMessage() {}

func (x *QueryYakScriptSkipUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[547]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptSkipUpdateResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptSkipUpdateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{547}
}

func (x *QueryYakScriptSkipUpdateResponse) GetSkipUpdate() bool {
	if x != nil {
		return x.SkipUpdate
	}
	return false
}

type QueryYakScriptGroupRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	All    bool                   `protobuf:"varint,1,opt,name=All,proto3" json:"All,omitempty"`
	PageId string                 `protobuf:"bytes,2,opt,name=PageId,proto3" json:"PageId,omitempty"`
	// 默认是false， 目前中有专项漏洞这里的关键词组传 true 才会返回数据，插件管理里面不传就不会返回 poc 这边的内置组
	IsPocBuiltIn       bool     `protobuf:"varint,3,opt,name=IsPocBuiltIn,proto3" json:"IsPocBuiltIn,omitempty"`
	ExcludeType        []string `protobuf:"bytes,4,rep,name=ExcludeType,proto3" json:"ExcludeType,omitempty"`
	IsMITMParamPlugins int64    `protobuf:"varint,5,opt,name=IsMITMParamPlugins,proto3" json:"IsMITMParamPlugins,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *QueryYakScriptGroupRequest) Reset() {
	*x = QueryYakScriptGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[548]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptGroupRequest) ProtoMessage() {}

func (x *QueryYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[548]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{548}
}

func (x *QueryYakScriptGroupRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *QueryYakScriptGroupRequest) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *QueryYakScriptGroupRequest) GetIsPocBuiltIn() bool {
	if x != nil {
		return x.IsPocBuiltIn
	}
	return false
}

func (x *QueryYakScriptGroupRequest) GetExcludeType() []string {
	if x != nil {
		return x.ExcludeType
	}
	return nil
}

func (x *QueryYakScriptGroupRequest) GetIsMITMParamPlugins() int64 {
	if x != nil {
		return x.IsMITMParamPlugins
	}
	return 0
}

type QueryYakScriptGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         []*GroupCount          `protobuf:"bytes,1,rep,name=Group,proto3" json:"Group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryYakScriptGroupResponse) Reset() {
	*x = QueryYakScriptGroupResponse{}
	mi := &file_yakgrpc_proto_msgTypes[549]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryYakScriptGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptGroupResponse) ProtoMessage() {}

func (x *QueryYakScriptGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[549]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptGroupResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{549}
}

func (x *QueryYakScriptGroupResponse) GetGroup() []*GroupCount {
	if x != nil {
		return x.Group
	}
	return nil
}

type GroupCount struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Value   string                 `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total   int32                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Default bool                   `protobuf:"varint,3,opt,name=Default,proto3" json:"Default,omitempty"`
	// 临时组ID
	TemporaryId   string `protobuf:"bytes,5,opt,name=TemporaryId,proto3" json:"TemporaryId,omitempty"`
	IsPocBuiltIn  bool   `protobuf:"varint,6,opt,name=IsPocBuiltIn,proto3" json:"IsPocBuiltIn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupCount) Reset() {
	*x = GroupCount{}
	mi := &file_yakgrpc_proto_msgTypes[550]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCount) ProtoMessage() {}

func (x *GroupCount) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[550]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCount.ProtoReflect.Descriptor instead.
func (*GroupCount) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{550}
}

func (x *GroupCount) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GroupCount) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GroupCount) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *GroupCount) GetTemporaryId() string {
	if x != nil {
		return x.TemporaryId
	}
	return ""
}

func (x *GroupCount) GetIsPocBuiltIn() bool {
	if x != nil {
		return x.IsPocBuiltIn
	}
	return false
}

type SaveYakScriptGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryYakScriptRequest `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	SaveGroup     []string               `protobuf:"bytes,2,rep,name=SaveGroup,proto3" json:"SaveGroup,omitempty"`
	RemoveGroup   []string               `protobuf:"bytes,3,rep,name=RemoveGroup,proto3" json:"RemoveGroup,omitempty"`
	PageId        string                 `protobuf:"bytes,4,opt,name=PageId,proto3" json:"PageId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveYakScriptGroupRequest) Reset() {
	*x = SaveYakScriptGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[551]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveYakScriptGroupRequest) ProtoMessage() {}

func (x *SaveYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[551]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*SaveYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{551}
}

func (x *SaveYakScriptGroupRequest) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SaveYakScriptGroupRequest) GetSaveGroup() []string {
	if x != nil {
		return x.SaveGroup
	}
	return nil
}

func (x *SaveYakScriptGroupRequest) GetRemoveGroup() []string {
	if x != nil {
		return x.RemoveGroup
	}
	return nil
}

func (x *SaveYakScriptGroupRequest) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

type RenameYakScriptGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	NewGroup      string                 `protobuf:"bytes,2,opt,name=NewGroup,proto3" json:"NewGroup,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameYakScriptGroupRequest) Reset() {
	*x = RenameYakScriptGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[552]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameYakScriptGroupRequest) ProtoMessage() {}

func (x *RenameYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[552]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*RenameYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{552}
}

func (x *RenameYakScriptGroupRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RenameYakScriptGroupRequest) GetNewGroup() string {
	if x != nil {
		return x.NewGroup
	}
	return ""
}

type DeleteYakScriptGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteYakScriptGroupRequest) Reset() {
	*x = DeleteYakScriptGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[553]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptGroupRequest) ProtoMessage() {}

func (x *DeleteYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[553]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{553}
}

func (x *DeleteYakScriptGroupRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type GetYakScriptGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SetGroup      []string               `protobuf:"bytes,1,rep,name=SetGroup,proto3" json:"SetGroup,omitempty"`
	AllGroup      []string               `protobuf:"bytes,2,rep,name=AllGroup,proto3" json:"AllGroup,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYakScriptGroupResponse) Reset() {
	*x = GetYakScriptGroupResponse{}
	mi := &file_yakgrpc_proto_msgTypes[554]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYakScriptGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptGroupResponse) ProtoMessage() {}

func (x *GetYakScriptGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[554]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptGroupResponse.ProtoReflect.Descriptor instead.
func (*GetYakScriptGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{554}
}

func (x *GetYakScriptGroupResponse) GetSetGroup() []string {
	if x != nil {
		return x.SetGroup
	}
	return nil
}

func (x *GetYakScriptGroupResponse) GetAllGroup() []string {
	if x != nil {
		return x.AllGroup
	}
	return nil
}

type ResetYakScriptGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetYakScriptGroupRequest) Reset() {
	*x = ResetYakScriptGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[555]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetYakScriptGroupRequest) ProtoMessage() {}

func (x *ResetYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[555]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*ResetYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{555}
}

func (x *ResetYakScriptGroupRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SetGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetGroupRequest) Reset() {
	*x = SetGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[556]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupRequest) ProtoMessage() {}

func (x *SetGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[556]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupRequest.ProtoReflect.Descriptor instead.
func (*SetGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{556}
}

func (x *SetGroupRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type GetYakScriptTagsAndTypeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          []*TagsAndType         `protobuf:"bytes,1,rep,name=Type,proto3" json:"Type,omitempty"`
	Tag           []*TagsAndType         `protobuf:"bytes,2,rep,name=Tag,proto3" json:"Tag,omitempty"`
	Group         []*TagsAndType         `protobuf:"bytes,3,rep,name=Group,proto3" json:"Group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYakScriptTagsAndTypeResponse) Reset() {
	*x = GetYakScriptTagsAndTypeResponse{}
	mi := &file_yakgrpc_proto_msgTypes[557]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYakScriptTagsAndTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptTagsAndTypeResponse) ProtoMessage() {}

func (x *GetYakScriptTagsAndTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[557]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptTagsAndTypeResponse.ProtoReflect.Descriptor instead.
func (*GetYakScriptTagsAndTypeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{557}
}

func (x *GetYakScriptTagsAndTypeResponse) GetType() []*TagsAndType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetYakScriptTagsAndTypeResponse) GetTag() []*TagsAndType {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *GetYakScriptTagsAndTypeResponse) GetGroup() []*TagsAndType {
	if x != nil {
		return x.Group
	}
	return nil
}

type TagsAndType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagsAndType) Reset() {
	*x = TagsAndType{}
	mi := &file_yakgrpc_proto_msgTypes[558]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagsAndType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsAndType) ProtoMessage() {}

func (x *TagsAndType) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[558]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsAndType.ProtoReflect.Descriptor instead.
func (*TagsAndType) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{558}
}

func (x *TagsAndType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TagsAndType) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SnippetsFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          []string               `protobuf:"bytes,1,rep,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnippetsFilter) Reset() {
	*x = SnippetsFilter{}
	mi := &file_yakgrpc_proto_msgTypes[559]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnippetsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetsFilter) ProtoMessage() {}

func (x *SnippetsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[559]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetsFilter.ProtoReflect.Descriptor instead.
func (*SnippetsFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{559}
}

func (x *SnippetsFilter) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type SnippetsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	State         string                 `protobuf:"bytes,4,opt,name=State,proto3" json:"State,omitempty"`
	Level         string                 `protobuf:"bytes,5,opt,name=Level,proto3" json:"Level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnippetsRequest) Reset() {
	*x = SnippetsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[560]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnippetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetsRequest) ProtoMessage() {}

func (x *SnippetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[560]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetsRequest.ProtoReflect.Descriptor instead.
func (*SnippetsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{560}
}

func (x *SnippetsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnippetsRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SnippetsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SnippetsRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SnippetsRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type EditSnippetsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Code          string                 `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	State         string                 `protobuf:"bytes,5,opt,name=State,proto3" json:"State,omitempty"`
	Level         string                 `protobuf:"bytes,6,opt,name=Level,proto3" json:"Level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditSnippetsRequest) Reset() {
	*x = EditSnippetsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[561]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditSnippetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditSnippetsRequest) ProtoMessage() {}

func (x *EditSnippetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[561]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditSnippetsRequest.ProtoReflect.Descriptor instead.
func (*EditSnippetsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{561}
}

func (x *EditSnippetsRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *EditSnippetsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditSnippetsRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EditSnippetsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EditSnippetsRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *EditSnippetsRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type QuerySnippetsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SnippetsFilter        `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySnippetsRequest) Reset() {
	*x = QuerySnippetsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[562]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySnippetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySnippetsRequest) ProtoMessage() {}

func (x *QuerySnippetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[562]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySnippetsRequest.ProtoReflect.Descriptor instead.
func (*QuerySnippetsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{562}
}

func (x *QuerySnippetsRequest) GetFilter() *SnippetsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SnippetsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=Names,proto3" json:"Names,omitempty"`
	Codes         []string               `protobuf:"bytes,2,rep,name=Codes,proto3" json:"Codes,omitempty"`
	Descriptions  []string               `protobuf:"bytes,3,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	States        []string               `protobuf:"bytes,4,rep,name=States,proto3" json:"States,omitempty"`
	Levels        []string               `protobuf:"bytes,5,rep,name=Levels,proto3" json:"Levels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnippetsResponse) Reset() {
	*x = SnippetsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[563]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnippetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetsResponse) ProtoMessage() {}

func (x *SnippetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[563]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetsResponse.ProtoReflect.Descriptor instead.
func (*SnippetsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{563}
}

func (x *SnippetsResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *SnippetsResponse) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *SnippetsResponse) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *SnippetsResponse) GetStates() []string {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *SnippetsResponse) GetLevels() []string {
	if x != nil {
		return x.Levels
	}
	return nil
}

type CodecRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Text       string                 `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	Type       string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Auto       bool                   `protobuf:"varint,3,opt,name=Auto,proto3" json:"Auto,omitempty"`
	Params     []*ExecParamItem       `protobuf:"bytes,4,rep,name=Params,proto3" json:"Params,omitempty"`
	ScriptName string                 `protobuf:"bytes,5,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	// 如果 InputBytes 设置了，将会无条件覆盖 Text
	InputBytes    []byte `protobuf:"bytes,6,opt,name=InputBytes,proto3" json:"InputBytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecRequest) Reset() {
	*x = CodecRequest{}
	mi := &file_yakgrpc_proto_msgTypes[564]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecRequest) ProtoMessage() {}

func (x *CodecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[564]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecRequest.ProtoReflect.Descriptor instead.
func (*CodecRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{564}
}

func (x *CodecRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CodecRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CodecRequest) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

func (x *CodecRequest) GetParams() []*ExecParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CodecRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *CodecRequest) GetInputBytes() []byte {
	if x != nil {
		return x.InputBytes
	}
	return nil
}

type CodecWork struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CodecType     string                 `protobuf:"bytes,1,opt,name=CodecType,proto3" json:"CodecType,omitempty"`
	Script        string                 `protobuf:"bytes,2,opt,name=Script,proto3" json:"Script,omitempty"`
	PluginName    string                 `protobuf:"bytes,3,opt,name=PluginName,proto3" json:"PluginName,omitempty"`
	Params        []*ExecParamItem       `protobuf:"bytes,5,rep,name=Params,proto3" json:"Params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecWork) Reset() {
	*x = CodecWork{}
	mi := &file_yakgrpc_proto_msgTypes[565]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecWork) ProtoMessage() {}

func (x *CodecWork) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[565]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecWork.ProtoReflect.Descriptor instead.
func (*CodecWork) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{565}
}

func (x *CodecWork) GetCodecType() string {
	if x != nil {
		return x.CodecType
	}
	return ""
}

func (x *CodecWork) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *CodecWork) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *CodecWork) GetParams() []*ExecParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

type CodecRequestFlow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	Auto          bool                   `protobuf:"varint,2,opt,name=Auto,proto3" json:"Auto,omitempty"`
	WorkFlow      []*CodecWork           `protobuf:"bytes,3,rep,name=WorkFlow,proto3" json:"WorkFlow,omitempty"`
	InputBytes    []byte                 `protobuf:"bytes,6,opt,name=InputBytes,proto3" json:"InputBytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecRequestFlow) Reset() {
	*x = CodecRequestFlow{}
	mi := &file_yakgrpc_proto_msgTypes[566]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecRequestFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecRequestFlow) ProtoMessage() {}

func (x *CodecRequestFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[566]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecRequestFlow.ProtoReflect.Descriptor instead.
func (*CodecRequestFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{566}
}

func (x *CodecRequestFlow) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CodecRequestFlow) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

func (x *CodecRequestFlow) GetWorkFlow() []*CodecWork {
	if x != nil {
		return x.WorkFlow
	}
	return nil
}

func (x *CodecRequestFlow) GetInputBytes() []byte {
	if x != nil {
		return x.InputBytes
	}
	return nil
}

type CustomizeCodecFlow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlowName      string                 `protobuf:"bytes,1,opt,name=FlowName,proto3" json:"FlowName,omitempty"`
	WorkFlow      []*CodecWork           `protobuf:"bytes,2,rep,name=WorkFlow,proto3" json:"WorkFlow,omitempty"`
	WorkFlowUI    string                 `protobuf:"bytes,3,opt,name=WorkFlowUI,proto3" json:"WorkFlowUI,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomizeCodecFlow) Reset() {
	*x = CustomizeCodecFlow{}
	mi := &file_yakgrpc_proto_msgTypes[567]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomizeCodecFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeCodecFlow) ProtoMessage() {}

func (x *CustomizeCodecFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[567]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeCodecFlow.ProtoReflect.Descriptor instead.
func (*CustomizeCodecFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{567}
}

func (x *CustomizeCodecFlow) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *CustomizeCodecFlow) GetWorkFlow() []*CodecWork {
	if x != nil {
		return x.WorkFlow
	}
	return nil
}

func (x *CustomizeCodecFlow) GetWorkFlowUI() string {
	if x != nil {
		return x.WorkFlowUI
	}
	return ""
}

type UpdateCodecFlowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlowId        string                 `protobuf:"bytes,1,opt,name=FlowId,proto3" json:"FlowId,omitempty"`
	FlowName      string                 `protobuf:"bytes,2,opt,name=FlowName,proto3" json:"FlowName,omitempty"`
	WorkFlow      []*CodecWork           `protobuf:"bytes,3,rep,name=WorkFlow,proto3" json:"WorkFlow,omitempty"`
	WorkFlowUI    string                 `protobuf:"bytes,4,opt,name=WorkFlowUI,proto3" json:"WorkFlowUI,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCodecFlowRequest) Reset() {
	*x = UpdateCodecFlowRequest{}
	mi := &file_yakgrpc_proto_msgTypes[568]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCodecFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCodecFlowRequest) ProtoMessage() {}

func (x *UpdateCodecFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[568]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCodecFlowRequest.ProtoReflect.Descriptor instead.
func (*UpdateCodecFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{568}
}

func (x *UpdateCodecFlowRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UpdateCodecFlowRequest) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *UpdateCodecFlowRequest) GetWorkFlow() []*CodecWork {
	if x != nil {
		return x.WorkFlow
	}
	return nil
}

func (x *UpdateCodecFlowRequest) GetWorkFlowUI() string {
	if x != nil {
		return x.WorkFlowUI
	}
	return ""
}

type DeleteCodecFlowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeleteAll     bool                   `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	FlowName      string                 `protobuf:"bytes,2,opt,name=FlowName,proto3" json:"FlowName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCodecFlowRequest) Reset() {
	*x = DeleteCodecFlowRequest{}
	mi := &file_yakgrpc_proto_msgTypes[569]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCodecFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodecFlowRequest) ProtoMessage() {}

func (x *DeleteCodecFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[569]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodecFlowRequest.ProtoReflect.Descriptor instead.
func (*DeleteCodecFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{569}
}

func (x *DeleteCodecFlowRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteCodecFlowRequest) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

type GetCodecFlowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flows         []*CustomizeCodecFlow  `protobuf:"bytes,1,rep,name=Flows,proto3" json:"Flows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCodecFlowResponse) Reset() {
	*x = GetCodecFlowResponse{}
	mi := &file_yakgrpc_proto_msgTypes[570]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCodecFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodecFlowResponse) ProtoMessage() {}

func (x *GetCodecFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[570]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodecFlowResponse.ProtoReflect.Descriptor instead.
func (*GetCodecFlowResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{570}
}

func (x *GetCodecFlowResponse) GetFlows() []*CustomizeCodecFlow {
	if x != nil {
		return x.Flows
	}
	return nil
}

type CodecResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Result            string                 `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`       // show result
	RawResult         []byte                 `protobuf:"bytes,2,opt,name=RawResult,proto3" json:"RawResult,omitempty"` // raw result, need hex editor
	ResultVerbose     string                 `protobuf:"bytes,3,opt,name=ResultVerbose,proto3" json:"ResultVerbose,omitempty"`
	IsFalseAppearance bool                   `protobuf:"varint,4,opt,name=IsFalseAppearance,proto3" json:"IsFalseAppearance,omitempty"` // 是否是失真
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CodecResponse) Reset() {
	*x = CodecResponse{}
	mi := &file_yakgrpc_proto_msgTypes[571]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecResponse) ProtoMessage() {}

func (x *CodecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[571]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecResponse.ProtoReflect.Descriptor instead.
func (*CodecResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{571}
}

func (x *CodecResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *CodecResponse) GetRawResult() []byte {
	if x != nil {
		return x.RawResult
	}
	return nil
}

func (x *CodecResponse) GetResultVerbose() string {
	if x != nil {
		return x.ResultVerbose
	}
	return ""
}

func (x *CodecResponse) GetIsFalseAppearance() bool {
	if x != nil {
		return x.IsFalseAppearance
	}
	return false
}

type CodecMethods struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Methods       []*CodecMethod         `protobuf:"bytes,1,rep,name=Methods,proto3" json:"Methods,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecMethods) Reset() {
	*x = CodecMethods{}
	mi := &file_yakgrpc_proto_msgTypes[572]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecMethods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecMethods) ProtoMessage() {}

func (x *CodecMethods) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[572]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecMethods.ProtoReflect.Descriptor instead.
func (*CodecMethods) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{572}
}

func (x *CodecMethods) GetMethods() []*CodecMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

type CodecMethod struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           string                 `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`                 // Codec 分类
	CodecName     string                 `protobuf:"bytes,2,opt,name=CodecName,proto3" json:"CodecName,omitempty"`     //  Codec name
	CodecMethod   string                 `protobuf:"bytes,3,opt,name=CodecMethod,proto3" json:"CodecMethod,omitempty"` // Codec Method
	Desc          string                 `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty"`               // 描述
	Params        []*CodecParam          `protobuf:"bytes,5,rep,name=Params,proto3" json:"Params,omitempty"`           // Codec Param 用于构建样式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecMethod) Reset() {
	*x = CodecMethod{}
	mi := &file_yakgrpc_proto_msgTypes[573]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecMethod) ProtoMessage() {}

func (x *CodecMethod) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[573]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecMethod.ProtoReflect.Descriptor instead.
func (*CodecMethod) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{573}
}

func (x *CodecMethod) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CodecMethod) GetCodecName() string {
	if x != nil {
		return x.CodecName
	}
	return ""
}

func (x *CodecMethod) GetCodecMethod() string {
	if x != nil {
		return x.CodecMethod
	}
	return ""
}

func (x *CodecMethod) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CodecMethod) GetParams() []*CodecParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type CodecParam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`                 // input | select | checkbox | search | monaco | inputSelect
	Options       []string               `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`           // 可选值
	Required      bool                   `protobuf:"varint,4,opt,name=Required,proto3" json:"Required,omitempty"`        // 就算是false也需要传
	Desc          string                 `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`                 // 描述
	Regex         string                 `protobuf:"bytes,6,opt,name=Regex,proto3" json:"Regex,omitempty"`               // 正则
	Label         string                 `protobuf:"bytes,7,opt,name=Label,proto3" json:"Label,omitempty"`               // 参数文本标签
	DefaultValue  string                 `protobuf:"bytes,8,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"` // 默认值
	Connector     *CodecParam            `protobuf:"bytes,9,opt,name=Connector,proto3" json:"Connector,omitempty"`       // 连接组件
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecParam) Reset() {
	*x = CodecParam{}
	mi := &file_yakgrpc_proto_msgTypes[574]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecParam) ProtoMessage() {}

func (x *CodecParam) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[574]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecParam.ProtoReflect.Descriptor instead.
func (*CodecParam) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{574}
}

func (x *CodecParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodecParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CodecParam) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CodecParam) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *CodecParam) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CodecParam) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *CodecParam) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CodecParam) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *CodecParam) GetConnector() *CodecParam {
	if x != nil {
		return x.Connector
	}
	return nil
}

// Yak Invoker
type ExecHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	YakScriptId   int64                  `protobuf:"varint,3,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	YakScriptName string                 `protobuf:"bytes,4,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecHistoryRequest) Reset() {
	*x = ExecHistoryRequest{}
	mi := &file_yakgrpc_proto_msgTypes[575]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRequest) ProtoMessage() {}

func (x *ExecHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[575]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRequest.ProtoReflect.Descriptor instead.
func (*ExecHistoryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{575}
}

func (x *ExecHistoryRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ExecHistoryRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExecHistoryRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type ExecHistoryRecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*ExecHistoryRecord   `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecHistoryRecordResponse) Reset() {
	*x = ExecHistoryRecordResponse{}
	mi := &file_yakgrpc_proto_msgTypes[576]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecHistoryRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRecordResponse) ProtoMessage() {}

func (x *ExecHistoryRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[576]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRecordResponse.ProtoReflect.Descriptor instead.
func (*ExecHistoryRecordResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{576}
}

func (x *ExecHistoryRecordResponse) GetData() []*ExecHistoryRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecHistoryRecordResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ExecHistoryRecordResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 执行的历史记录
type ExecHistoryRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 脚本内容
	Script string `protobuf:"bytes,1,opt,name=Script,proto3" json:"Script,omitempty"`
	// 脚本 ID（如果有的话）
	ScriptId string `protobuf:"bytes,2,opt,name=ScriptId,proto3" json:"ScriptId,omitempty"`
	// 执行时间点
	Timestamp int64 `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// 执行间隔
	DurationMs int64 `protobuf:"varint,4,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`
	// 执行参数（命令行参数部分）
	Params string `protobuf:"bytes,5,opt,name=Params,proto3" json:"Params,omitempty"`
	// 执行成功还是失败
	Ok bool `protobuf:"varint,7,opt,name=Ok,proto3" json:"Ok,omitempty"`
	// 失败原因是啥？
	Reason string `protobuf:"bytes,8,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// Uid
	Id string `protobuf:"bytes,9,opt,name=Id,proto3" json:"Id,omitempty"`
	// 展示界面内容
	Stdout []byte `protobuf:"bytes,10,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Stderr []byte `protobuf:"bytes,11,opt,name=Stderr,proto3" json:"Stderr,omitempty"`
	RuntimeId     string `protobuf:"bytes,12,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	FromYakModule string `protobuf:"bytes,13,opt,name=FromYakModule,proto3" json:"FromYakModule,omitempty"`
	StdoutLen     int64  `protobuf:"varint,14,opt,name=StdoutLen,proto3" json:"StdoutLen,omitempty"`
	StderrLen     int64  `protobuf:"varint,15,opt,name=StderrLen,proto3" json:"StderrLen,omitempty"`
	Messages      []byte `protobuf:"bytes,16,opt,name=Messages,proto3" json:"Messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecHistoryRecord) Reset() {
	*x = ExecHistoryRecord{}
	mi := &file_yakgrpc_proto_msgTypes[577]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRecord) ProtoMessage() {}

func (x *ExecHistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[577]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRecord.ProtoReflect.Descriptor instead.
func (*ExecHistoryRecord) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{577}
}

func (x *ExecHistoryRecord) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ExecHistoryRecord) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ExecHistoryRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecHistoryRecord) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *ExecHistoryRecord) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *ExecHistoryRecord) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ExecHistoryRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecHistoryRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecHistoryRecord) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *ExecHistoryRecord) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *ExecHistoryRecord) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *ExecHistoryRecord) GetFromYakModule() string {
	if x != nil {
		return x.FromYakModule
	}
	return ""
}

func (x *ExecHistoryRecord) GetStdoutLen() int64 {
	if x != nil {
		return x.StdoutLen
	}
	return 0
}

func (x *ExecHistoryRecord) GetStderrLen() int64 {
	if x != nil {
		return x.StderrLen
	}
	return 0
}

func (x *ExecHistoryRecord) GetMessages() []byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Fuzz 相关模型
type StringFuzzerRequest struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Template                    string                 `protobuf:"bytes,1,opt,name=Template,proto3" json:"Template,omitempty"`
	HotPatchCode                string                 `protobuf:"bytes,2,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	HotPatchCodeWithParamGetter string                 `protobuf:"bytes,3,opt,name=HotPatchCodeWithParamGetter,proto3" json:"HotPatchCodeWithParamGetter,omitempty"`
	Limit                       int64                  `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	TimeoutSeconds              int64                  `protobuf:"varint,5,opt,name=TimeoutSeconds,proto3" json:"TimeoutSeconds,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *StringFuzzerRequest) Reset() {
	*x = StringFuzzerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[578]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringFuzzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFuzzerRequest) ProtoMessage() {}

func (x *StringFuzzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[578]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFuzzerRequest.ProtoReflect.Descriptor instead.
func (*StringFuzzerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{578}
}

func (x *StringFuzzerRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *StringFuzzerRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *StringFuzzerRequest) GetHotPatchCodeWithParamGetter() string {
	if x != nil {
		return x.HotPatchCodeWithParamGetter
	}
	return ""
}

func (x *StringFuzzerRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StringFuzzerRequest) GetTimeoutSeconds() int64 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type StringFuzzerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       [][]byte               `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringFuzzerResponse) Reset() {
	*x = StringFuzzerResponse{}
	mi := &file_yakgrpc_proto_msgTypes[579]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringFuzzerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFuzzerResponse) ProtoMessage() {}

func (x *StringFuzzerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[579]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFuzzerResponse.ProtoReflect.Descriptor instead.
func (*StringFuzzerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{579}
}

func (x *StringFuzzerResponse) GetResults() [][]byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type HTTPRequestAnalysisMaterial struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       string                 `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	IsHTTPS       bool                   `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	Response      string                 `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPRequestAnalysisMaterial) Reset() {
	*x = HTTPRequestAnalysisMaterial{}
	mi := &file_yakgrpc_proto_msgTypes[580]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestAnalysisMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestAnalysisMaterial) ProtoMessage() {}

func (x *HTTPRequestAnalysisMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[580]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestAnalysisMaterial.ProtoReflect.Descriptor instead.
func (*HTTPRequestAnalysisMaterial) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{580}
}

func (x *HTTPRequestAnalysisMaterial) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *HTTPRequestAnalysisMaterial) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *HTTPRequestAnalysisMaterial) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type HTTPRequestParamItem struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TypePosition        string                 `protobuf:"bytes,1,opt,name=TypePosition,proto3" json:"TypePosition,omitempty"`
	ParamOriginValue    string                 `protobuf:"bytes,2,opt,name=ParamOriginValue,proto3" json:"ParamOriginValue,omitempty"`
	ParamName           string                 `protobuf:"bytes,3,opt,name=ParamName,proto3" json:"ParamName,omitempty"`
	TypePositionVerbose string                 `protobuf:"bytes,4,opt,name=TypePositionVerbose,proto3" json:"TypePositionVerbose,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HTTPRequestParamItem) Reset() {
	*x = HTTPRequestParamItem{}
	mi := &file_yakgrpc_proto_msgTypes[581]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestParamItem) ProtoMessage() {}

func (x *HTTPRequestParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[581]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestParamItem.ProtoReflect.Descriptor instead.
func (*HTTPRequestParamItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{581}
}

func (x *HTTPRequestParamItem) GetTypePosition() string {
	if x != nil {
		return x.TypePosition
	}
	return ""
}

func (x *HTTPRequestParamItem) GetParamOriginValue() string {
	if x != nil {
		return x.ParamOriginValue
	}
	return ""
}

func (x *HTTPRequestParamItem) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *HTTPRequestParamItem) GetTypePositionVerbose() string {
	if x != nil {
		return x.TypePositionVerbose
	}
	return ""
}

type HTTPRequestAnalysis struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Params        []*HTTPRequestParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	Requests      []string                `protobuf:"bytes,2,rep,name=Requests,proto3" json:"Requests,omitempty"`
	IsHTTPS       bool                    `protobuf:"varint,3,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPRequestAnalysis) Reset() {
	*x = HTTPRequestAnalysis{}
	mi := &file_yakgrpc_proto_msgTypes[582]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestAnalysis) ProtoMessage() {}

func (x *HTTPRequestAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[582]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestAnalysis.ProtoReflect.Descriptor instead.
func (*HTTPRequestAnalysis) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{582}
}

func (x *HTTPRequestAnalysis) GetParams() []*HTTPRequestParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *HTTPRequestAnalysis) GetRequests() []string {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *HTTPRequestAnalysis) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

type HTTPResponseMatcher struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SubMatchers         []*HTTPResponseMatcher `protobuf:"bytes,1,rep,name=SubMatchers,proto3" json:"SubMatchers,omitempty"`
	SubMatcherCondition string                 `protobuf:"bytes,2,opt,name=SubMatcherCondition,proto3" json:"SubMatcherCondition,omitempty"`
	MatcherType         string                 `protobuf:"bytes,3,opt,name=MatcherType,proto3" json:"MatcherType,omitempty"`
	Scope               string                 `protobuf:"bytes,4,opt,name=Scope,proto3" json:"Scope,omitempty"`
	Condition           string                 `protobuf:"bytes,5,opt,name=Condition,proto3" json:"Condition,omitempty"`
	Group               []string               `protobuf:"bytes,6,rep,name=Group,proto3" json:"Group,omitempty"`
	GroupEncoding       string                 `protobuf:"bytes,7,opt,name=GroupEncoding,proto3" json:"GroupEncoding,omitempty"`
	Negative            bool                   `protobuf:"varint,8,opt,name=Negative,proto3" json:"Negative,omitempty"`
	ExprType            string                 `protobuf:"bytes,9,opt,name=ExprType,proto3" json:"ExprType,omitempty"`
	HitColor            string                 `protobuf:"bytes,10,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
	Action              string                 `protobuf:"bytes,11,opt,name=Action,proto3" json:"Action,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HTTPResponseMatcher) Reset() {
	*x = HTTPResponseMatcher{}
	mi := &file_yakgrpc_proto_msgTypes[583]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResponseMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseMatcher) ProtoMessage() {}

func (x *HTTPResponseMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[583]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseMatcher.ProtoReflect.Descriptor instead.
func (*HTTPResponseMatcher) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{583}
}

func (x *HTTPResponseMatcher) GetSubMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.SubMatchers
	}
	return nil
}

func (x *HTTPResponseMatcher) GetSubMatcherCondition() string {
	if x != nil {
		return x.SubMatcherCondition
	}
	return ""
}

func (x *HTTPResponseMatcher) GetMatcherType() string {
	if x != nil {
		return x.MatcherType
	}
	return ""
}

func (x *HTTPResponseMatcher) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *HTTPResponseMatcher) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *HTTPResponseMatcher) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *HTTPResponseMatcher) GetGroupEncoding() string {
	if x != nil {
		return x.GroupEncoding
	}
	return ""
}

func (x *HTTPResponseMatcher) GetNegative() bool {
	if x != nil {
		return x.Negative
	}
	return false
}

func (x *HTTPResponseMatcher) GetExprType() string {
	if x != nil {
		return x.ExprType
	}
	return ""
}

func (x *HTTPResponseMatcher) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

func (x *HTTPResponseMatcher) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type RenderVariablesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        []*KVPair              `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	IsHTTPS       bool                   `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	IsGmTLS       bool                   `protobuf:"varint,3,opt,name=IsGmTLS,proto3" json:"IsGmTLS,omitempty"`
	HTTPRequest   []byte                 `protobuf:"bytes,5,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	HTTPResponse  []byte                 `protobuf:"bytes,4,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderVariablesRequest) Reset() {
	*x = RenderVariablesRequest{}
	mi := &file_yakgrpc_proto_msgTypes[584]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesRequest) ProtoMessage() {}

func (x *RenderVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[584]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesRequest.ProtoReflect.Descriptor instead.
func (*RenderVariablesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{584}
}

func (x *RenderVariablesRequest) GetParams() []*KVPair {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RenderVariablesRequest) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *RenderVariablesRequest) GetIsGmTLS() bool {
	if x != nil {
		return x.IsGmTLS
	}
	return false
}

func (x *RenderVariablesRequest) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

func (x *RenderVariablesRequest) GetHTTPResponse() []byte {
	if x != nil {
		return x.HTTPResponse
	}
	return nil
}

type RenderVariablesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*KVPair              `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderVariablesResponse) Reset() {
	*x = RenderVariablesResponse{}
	mi := &file_yakgrpc_proto_msgTypes[585]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesResponse) ProtoMessage() {}

func (x *RenderVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[585]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesResponse.ProtoReflect.Descriptor instead.
func (*RenderVariablesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{585}
}

func (x *RenderVariablesResponse) GetResults() []*KVPair {
	if x != nil {
		return x.Results
	}
	return nil
}

type MatchHTTPResponseParams struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Matchers         []*HTTPResponseMatcher `protobuf:"bytes,1,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatcherCondition string                 `protobuf:"bytes,2,opt,name=MatcherCondition,proto3" json:"MatcherCondition,omitempty"`
	IsHTTPS          bool                   `protobuf:"varint,3,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	HTTPResponse     string                 `protobuf:"bytes,4,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	HTTPRequest      string                 `protobuf:"bytes,5,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MatchHTTPResponseParams) Reset() {
	*x = MatchHTTPResponseParams{}
	mi := &file_yakgrpc_proto_msgTypes[586]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchHTTPResponseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchHTTPResponseParams) ProtoMessage() {}

func (x *MatchHTTPResponseParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[586]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchHTTPResponseParams.ProtoReflect.Descriptor instead.
func (*MatchHTTPResponseParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{586}
}

func (x *MatchHTTPResponseParams) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *MatchHTTPResponseParams) GetMatcherCondition() string {
	if x != nil {
		return x.MatcherCondition
	}
	return ""
}

func (x *MatchHTTPResponseParams) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *MatchHTTPResponseParams) GetHTTPResponse() string {
	if x != nil {
		return x.HTTPResponse
	}
	return ""
}

func (x *MatchHTTPResponseParams) GetHTTPRequest() string {
	if x != nil {
		return x.HTTPRequest
	}
	return ""
}

type MatchHTTPResponseResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Matched       bool                   `protobuf:"varint,1,opt,name=Matched,proto3" json:"Matched,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchHTTPResponseResult) Reset() {
	*x = MatchHTTPResponseResult{}
	mi := &file_yakgrpc_proto_msgTypes[587]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchHTTPResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchHTTPResponseResult) ProtoMessage() {}

func (x *MatchHTTPResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[587]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchHTTPResponseResult.ProtoReflect.Descriptor instead.
func (*MatchHTTPResponseResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{587}
}

func (x *MatchHTTPResponseResult) GetMatched() bool {
	if x != nil {
		return x.Matched
	}
	return false
}

type HTTPResponseExtractor struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`   // default for index
	Type             string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`   // regex / xpath / kval / json / nuclei-dsl
	Scope            string                 `protobuf:"bytes,3,opt,name=Scope,proto3" json:"Scope,omitempty"` // body / header / raw
	Groups           []string               `protobuf:"bytes,4,rep,name=Groups,proto3" json:"Groups,omitempty"`
	RegexpMatchGroup []int64                `protobuf:"varint,5,rep,packed,name=RegexpMatchGroup,proto3" json:"RegexpMatchGroup,omitempty"`
	XPathAttribute   string                 `protobuf:"bytes,6,opt,name=XPathAttribute,proto3" json:"XPathAttribute,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HTTPResponseExtractor) Reset() {
	*x = HTTPResponseExtractor{}
	mi := &file_yakgrpc_proto_msgTypes[588]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResponseExtractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseExtractor) ProtoMessage() {}

func (x *HTTPResponseExtractor) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[588]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseExtractor.ProtoReflect.Descriptor instead.
func (*HTTPResponseExtractor) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{588}
}

func (x *HTTPResponseExtractor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPResponseExtractor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HTTPResponseExtractor) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *HTTPResponseExtractor) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *HTTPResponseExtractor) GetRegexpMatchGroup() []int64 {
	if x != nil {
		return x.RegexpMatchGroup
	}
	return nil
}

func (x *HTTPResponseExtractor) GetXPathAttribute() string {
	if x != nil {
		return x.XPathAttribute
	}
	return ""
}

type ExtractHTTPResponseResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*FuzzerParamItem     `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractHTTPResponseResult) Reset() {
	*x = ExtractHTTPResponseResult{}
	mi := &file_yakgrpc_proto_msgTypes[589]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractHTTPResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractHTTPResponseResult) ProtoMessage() {}

func (x *ExtractHTTPResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[589]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractHTTPResponseResult.ProtoReflect.Descriptor instead.
func (*ExtractHTTPResponseResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{589}
}

func (x *ExtractHTTPResponseResult) GetValues() []*FuzzerParamItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type ExtractHTTPResponseParams struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Extractors    []*HTTPResponseExtractor `protobuf:"bytes,1,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	HTTPResponse  string                   `protobuf:"bytes,2,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractHTTPResponseParams) Reset() {
	*x = ExtractHTTPResponseParams{}
	mi := &file_yakgrpc_proto_msgTypes[590]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractHTTPResponseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractHTTPResponseParams) ProtoMessage() {}

func (x *ExtractHTTPResponseParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[590]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractHTTPResponseParams.ProtoReflect.Descriptor instead.
func (*ExtractHTTPResponseParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{590}
}

func (x *ExtractHTTPResponseParams) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *ExtractHTTPResponseParams) GetHTTPResponse() string {
	if x != nil {
		return x.HTTPResponse
	}
	return ""
}

type PreloadHTTPFuzzerParamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        []*FuzzerParamItem     `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreloadHTTPFuzzerParamsRequest) Reset() {
	*x = PreloadHTTPFuzzerParamsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[591]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreloadHTTPFuzzerParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadHTTPFuzzerParamsRequest) ProtoMessage() {}

func (x *PreloadHTTPFuzzerParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[591]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadHTTPFuzzerParamsRequest.ProtoReflect.Descriptor instead.
func (*PreloadHTTPFuzzerParamsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{591}
}

func (x *PreloadHTTPFuzzerParamsRequest) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

type PreloadHTTPFuzzerParamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*FuzzerParamItem     `protobuf:"bytes,2,rep,name=Values,proto3" json:"Values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreloadHTTPFuzzerParamsResponse) Reset() {
	*x = PreloadHTTPFuzzerParamsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[592]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreloadHTTPFuzzerParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadHTTPFuzzerParamsResponse) ProtoMessage() {}

func (x *PreloadHTTPFuzzerParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[592]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadHTTPFuzzerParamsResponse.ProtoReflect.Descriptor instead.
func (*PreloadHTTPFuzzerParamsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{592}
}

func (x *PreloadHTTPFuzzerParamsResponse) GetValues() []*FuzzerParamItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type FuzzerParamItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Key   string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// nuclei-dsl / raw
	// fuzztag
	Type          string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	MarshalValue  string `protobuf:"bytes,4,opt,name=MarshalValue,proto3" json:"MarshalValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzzerParamItem) Reset() {
	*x = FuzzerParamItem{}
	mi := &file_yakgrpc_proto_msgTypes[593]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzerParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerParamItem) ProtoMessage() {}

func (x *FuzzerParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[593]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerParamItem.ProtoReflect.Descriptor instead.
func (*FuzzerParamItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{593}
}

func (x *FuzzerParamItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FuzzerParamItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FuzzerParamItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FuzzerParamItem) GetMarshalValue() string {
	if x != nil {
		return x.MarshalValue
	}
	return ""
}

type FuzzerRequests struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Requests []*FuzzerRequest       `protobuf:"bytes,1,rep,name=Requests,proto3" json:"Requests,omitempty"`
	// concurrent flow
	Concurrent    int64 `protobuf:"varint,2,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzzerRequests) Reset() {
	*x = FuzzerRequests{}
	mi := &file_yakgrpc_proto_msgTypes[594]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzerRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerRequests) ProtoMessage() {}

func (x *FuzzerRequests) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[594]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerRequests.ProtoReflect.Descriptor instead.
func (*FuzzerRequests) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{594}
}

func (x *FuzzerRequests) GetRequests() []*FuzzerRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *FuzzerRequests) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

type FuzzerRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Request    string                 `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	RequestRaw []byte                 `protobuf:"bytes,16,opt,name=RequestRaw,proto3" json:"RequestRaw,omitempty"` // 这里是因为麻将块儿的问题，还是需要处理一下类型
	Params     []*FuzzerParamItem     `protobuf:"bytes,2,rep,name=Params,proto3" json:"Params,omitempty"`
	Concurrent int64                  `protobuf:"varint,3,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	IsHTTPS    bool                   `protobuf:"varint,4,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	IsGmTLS    bool                   `protobuf:"varint,35,opt,name=IsGmTLS,proto3" json:"IsGmTLS,omitempty"`
	// random JA3 fingerprint
	RandomJA3                bool    `protobuf:"varint,63,opt,name=RandomJA3,proto3" json:"RandomJA3,omitempty"`
	ForceFuzz                bool    `protobuf:"varint,5,opt,name=ForceFuzz,proto3" json:"ForceFuzz,omitempty"`
	FuzzTagMode              string  `protobuf:"bytes,50,opt,name=FuzzTagMode,proto3" json:"FuzzTagMode,omitempty"` // "close"/"standard"/"legacy"
	FuzzTagSyncIndex         bool    `protobuf:"varint,51,opt,name=FuzzTagSyncIndex,proto3" json:"FuzzTagSyncIndex,omitempty"`
	Proxy                    string  `protobuf:"bytes,6,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	PerRequestTimeoutSeconds float64 `protobuf:"fixed64,7,opt,name=PerRequestTimeoutSeconds,proto3" json:"PerRequestTimeoutSeconds,omitempty"`
	DialTimeoutSeconds       float64 `protobuf:"fixed64,61,opt,name=DialTimeoutSeconds,proto3" json:"DialTimeoutSeconds,omitempty"`
	// 用于处理 Host 和 Header 中 Host 不一致的情况
	ActualAddr string `protobuf:"bytes,8,opt,name=ActualAddr,proto3" json:"ActualAddr,omitempty"`
	// redirect setting
	NoFollowRedirect bool `protobuf:"varint,9,opt,name=NoFollowRedirect,proto3" json:"NoFollowRedirect,omitempty"`
	// 这个弃用了，Meta 自动归类到 Redirect 里面
	NoFollowMetaRedirect bool    `protobuf:"varint,10,opt,name=NoFollowMetaRedirect,proto3" json:"NoFollowMetaRedirect,omitempty"`
	FollowJSRedirect     bool    `protobuf:"varint,11,opt,name=FollowJSRedirect,proto3" json:"FollowJSRedirect,omitempty"`
	RedirectTimes        float64 `protobuf:"fixed64,27,opt,name=RedirectTimes,proto3" json:"RedirectTimes,omitempty"`
	// 如果从历史加载，就用这个！
	HistoryWebFuzzerId int32 `protobuf:"varint,12,opt,name=HistoryWebFuzzerId,proto3" json:"HistoryWebFuzzerId,omitempty"`
	// 如果不想自动修复 Content-Length
	NoFixContentLength bool `protobuf:"varint,13,opt,name=NoFixContentLength,proto3" json:"NoFixContentLength,omitempty"`
	// 热加载代码
	HotPatchCode string `protobuf:"bytes,14,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	// 设置 Fuzzer
	Filter *FuzzerResponseFilter `protobuf:"bytes,15,opt,name=Filter,proto3" json:"Filter,omitempty"`
	// 随时 delay
	DelayMinSeconds float64 `protobuf:"fixed64,17,opt,name=DelayMinSeconds,proto3" json:"DelayMinSeconds,omitempty"`
	DelayMaxSeconds float64 `protobuf:"fixed64,18,opt,name=DelayMaxSeconds,proto3" json:"DelayMaxSeconds,omitempty"`
	// 获取模版数据
	HotPatchCodeWithParamGetter string `protobuf:"bytes,19,opt,name=HotPatchCodeWithParamGetter,proto3" json:"HotPatchCodeWithParamGetter,omitempty"`
	// retry
	MaxRetryTimes        int64   `protobuf:"varint,20,opt,name=MaxRetryTimes,proto3" json:"MaxRetryTimes,omitempty"`              // 最大重试次数
	RetryInStatusCode    string  `protobuf:"bytes,21,opt,name=RetryInStatusCode,proto3" json:"RetryInStatusCode,omitempty"`       // 命中这些状态码的时候，重试
	RetryNotInStatusCode string  `protobuf:"bytes,22,opt,name=RetryNotInStatusCode,proto3" json:"RetryNotInStatusCode,omitempty"` // 不是这些状态的时候，重试
	RetryWaitSeconds     float64 `protobuf:"fixed64,25,opt,name=RetryWaitSeconds,proto3" json:"RetryWaitSeconds,omitempty"`       // 重试等待时间
	RetryMaxWaitSeconds  float64 `protobuf:"fixed64,26,opt,name=RetryMaxWaitSeconds,proto3" json:"RetryMaxWaitSeconds,omitempty"` // 最大重试等待时间
	// Response Charset
	// 默认或者不填为 UTF8
	// 中国的话，用 gb18030
	ResponseCharset string `protobuf:"bytes,23,opt,name=ResponseCharset,proto3" json:"ResponseCharset,omitempty"`
	// Verbose
	// 这个字段不需要用户做任何处理，也不需要客户端传递
	// 这是服务端用来初始化的字段，用以构建快速搜索
	Verbose string `protobuf:"bytes,24,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	// dns config
	DNSServers []string  `protobuf:"bytes,28,rep,name=DNSServers,proto3" json:"DNSServers,omitempty"`
	EtcHosts   []*KVPair `protobuf:"bytes,29,rep,name=EtcHosts,proto3" json:"EtcHosts,omitempty"`
	// 不启用系统代理
	NoSystemProxy bool `protobuf:"varint,30,opt,name=NoSystemProxy,proto3" json:"NoSystemProxy,omitempty"`
	// 重复次数
	RepeatTimes int64 `protobuf:"varint,31,opt,name=RepeatTimes,proto3" json:"RepeatTimes,omitempty"`
	// Extractor n Matchers
	Extractors        []*HTTPResponseExtractor `protobuf:"bytes,32,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	Matchers          []*HTTPResponseMatcher   `protobuf:"bytes,33,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatchersCondition string                   `protobuf:"bytes,34,opt,name=MatchersCondition,proto3" json:"MatchersCondition,omitempty"`
	HitColor          string                   `protobuf:"bytes,36,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
	// 如果发包的时候，需要指定一两个插件，那么可以通过他来操作，并把流量一起返回
	YamlPoCNames []string `protobuf:"bytes,37,rep,name=YamlPoCNames,proto3" json:"YamlPoCNames,omitempty"`
	// 是否继承上一个 Workflow 的变量？（在 Sequence 中生效）
	InheritVariables     bool `protobuf:"varint,38,opt,name=InheritVariables,proto3" json:"InheritVariables,omitempty"`
	ForceOnlyOneResponse bool `protobuf:"varint,39,opt,name=ForceOnlyOneResponse,proto3" json:"ForceOnlyOneResponse,omitempty"`
	InheritCookies       bool `protobuf:"varint,40,opt,name=InheritCookies,proto3" json:"InheritCookies,omitempty"` // 上一个 Request 一般来说是单个请求，他的响应信息中 Cookie 也应该被妥善处理
	// web fuzzer task id
	// 需要配合前端的 Index
	// 这两个 Index 如果有的话，后端在执行 HTTP Fuzzer Sequence 的时候，就可以只传递这两个了
	// 如果没有的话，直接把整个 Request 传回去
	FuzzerIndex         string `protobuf:"bytes,41,opt,name=FuzzerIndex,proto3" json:"FuzzerIndex,omitempty"`                 // fuzzer grpc index, every HTTPFuzzer will have one index
	FuzzerTabIndex      string `protobuf:"bytes,42,opt,name=FuzzerTabIndex,proto3" json:"FuzzerTabIndex,omitempty"`           // use witch fuzzer tab, has some config info
	FuzzerSequenceIndex string `protobuf:"bytes,62,opt,name=FuzzerSequenceIndex,proto3" json:"FuzzerSequenceIndex,omitempty"` // fuzzer sequence index , for sequence fuzzer, front end not set, just use for server push
	// BatchTarget
	// 继承透传给 HTTPPOOL 的参数，可以使用批量目标来发送
	BatchTargetFile  bool   `protobuf:"varint,43,opt,name=BatchTargetFile,proto3" json:"BatchTargetFile,omitempty"`
	BatchTarget      []byte `protobuf:"bytes,44,opt,name=BatchTarget,proto3" json:"BatchTarget,omitempty"`
	AfterRequested   bool   `protobuf:"varint,45,opt,name=AfterRequested,proto3" json:"AfterRequested,omitempty"`
	StopAtFirstMatch bool   `protobuf:"varint,46,opt,name=StopAtFirstMatch,proto3" json:"StopAtFirstMatch,omitempty"`
	// retry task id
	RetryTaskID int64 `protobuf:"varint,47,opt,name=RetryTaskID,proto3" json:"RetryTaskID,omitempty"`
	// re matcher
	ReMatch bool `protobuf:"varint,48,opt,name=ReMatch,proto3" json:"ReMatch,omitempty"`
	// default 5M?
	// packet is too large (> MaxBodySize)
	MaxBodySize    int64           `protobuf:"varint,49,opt,name=MaxBodySize,proto3" json:"MaxBodySize,omitempty"`
	PauseTaskID    int64           `protobuf:"varint,52,opt,name=PauseTaskID,proto3" json:"PauseTaskID,omitempty"`
	IsPause        bool            `protobuf:"varint,53,opt,name=IsPause,proto3" json:"IsPause,omitempty"`
	MutateMethods  []*MutateMethod `protobuf:"bytes,54,rep,name=MutateMethods,proto3" json:"MutateMethods,omitempty"`
	SetPauseStatus bool            `protobuf:"varint,55,opt,name=SetPauseStatus,proto3" json:"SetPauseStatus,omitempty"`
	SNI            string          `protobuf:"bytes,56,opt,name=SNI,proto3" json:"SNI,omitempty"`
	OverwriteSNI   bool            `protobuf:"varint,57,opt,name=OverwriteSNI,proto3" json:"OverwriteSNI,omitempty"`
	// use tcp conn pool
	DisableUseConnPool bool `protobuf:"varint,58,opt,name=DisableUseConnPool,proto3" json:"DisableUseConnPool,omitempty"`
	// disable hotPatch
	DisableHotPatch bool `protobuf:"varint,59,opt,name=DisableHotPatch,proto3" json:"DisableHotPatch,omitempty"`
	// engine drop packet
	EngineDropPacket bool `protobuf:"varint,60,opt,name=EngineDropPacket,proto3" json:"EngineDropPacket,omitempty"`
	// Random Chunked
	EnableRandomChunked    bool  `protobuf:"varint,64,opt,name=EnableRandomChunked,proto3" json:"EnableRandomChunked,omitempty"`
	RandomChunkedMinLength int64 `protobuf:"varint,65,opt,name=RandomChunkedMinLength,proto3" json:"RandomChunkedMinLength,omitempty"`
	RandomChunkedMaxLength int64 `protobuf:"varint,66,opt,name=RandomChunkedMaxLength,proto3" json:"RandomChunkedMaxLength,omitempty"`
	RandomChunkedMinDelay  int64 `protobuf:"varint,67,opt,name=RandomChunkedMinDelay,proto3" json:"RandomChunkedMinDelay,omitempty"`
	RandomChunkedMaxDelay  int64 `protobuf:"varint,68,opt,name=RandomChunkedMaxDelay,proto3" json:"RandomChunkedMaxDelay,omitempty"`
	NoReadMultiResponse    bool  `protobuf:"varint,69,opt,name=NoReadMultiResponse,proto3" json:"NoReadMultiResponse,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FuzzerRequest) Reset() {
	*x = FuzzerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[595]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerRequest) ProtoMessage() {}

func (x *FuzzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[595]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerRequest.ProtoReflect.Descriptor instead.
func (*FuzzerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{595}
}

func (x *FuzzerRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *FuzzerRequest) GetRequestRaw() []byte {
	if x != nil {
		return x.RequestRaw
	}
	return nil
}

func (x *FuzzerRequest) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FuzzerRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *FuzzerRequest) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *FuzzerRequest) GetIsGmTLS() bool {
	if x != nil {
		return x.IsGmTLS
	}
	return false
}

func (x *FuzzerRequest) GetRandomJA3() bool {
	if x != nil {
		return x.RandomJA3
	}
	return false
}

func (x *FuzzerRequest) GetForceFuzz() bool {
	if x != nil {
		return x.ForceFuzz
	}
	return false
}

func (x *FuzzerRequest) GetFuzzTagMode() string {
	if x != nil {
		return x.FuzzTagMode
	}
	return ""
}

func (x *FuzzerRequest) GetFuzzTagSyncIndex() bool {
	if x != nil {
		return x.FuzzTagSyncIndex
	}
	return false
}

func (x *FuzzerRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FuzzerRequest) GetPerRequestTimeoutSeconds() float64 {
	if x != nil {
		return x.PerRequestTimeoutSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetDialTimeoutSeconds() float64 {
	if x != nil {
		return x.DialTimeoutSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetActualAddr() string {
	if x != nil {
		return x.ActualAddr
	}
	return ""
}

func (x *FuzzerRequest) GetNoFollowRedirect() bool {
	if x != nil {
		return x.NoFollowRedirect
	}
	return false
}

func (x *FuzzerRequest) GetNoFollowMetaRedirect() bool {
	if x != nil {
		return x.NoFollowMetaRedirect
	}
	return false
}

func (x *FuzzerRequest) GetFollowJSRedirect() bool {
	if x != nil {
		return x.FollowJSRedirect
	}
	return false
}

func (x *FuzzerRequest) GetRedirectTimes() float64 {
	if x != nil {
		return x.RedirectTimes
	}
	return 0
}

func (x *FuzzerRequest) GetHistoryWebFuzzerId() int32 {
	if x != nil {
		return x.HistoryWebFuzzerId
	}
	return 0
}

func (x *FuzzerRequest) GetNoFixContentLength() bool {
	if x != nil {
		return x.NoFixContentLength
	}
	return false
}

func (x *FuzzerRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *FuzzerRequest) GetFilter() *FuzzerResponseFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FuzzerRequest) GetDelayMinSeconds() float64 {
	if x != nil {
		return x.DelayMinSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetDelayMaxSeconds() float64 {
	if x != nil {
		return x.DelayMaxSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetHotPatchCodeWithParamGetter() string {
	if x != nil {
		return x.HotPatchCodeWithParamGetter
	}
	return ""
}

func (x *FuzzerRequest) GetMaxRetryTimes() int64 {
	if x != nil {
		return x.MaxRetryTimes
	}
	return 0
}

func (x *FuzzerRequest) GetRetryInStatusCode() string {
	if x != nil {
		return x.RetryInStatusCode
	}
	return ""
}

func (x *FuzzerRequest) GetRetryNotInStatusCode() string {
	if x != nil {
		return x.RetryNotInStatusCode
	}
	return ""
}

func (x *FuzzerRequest) GetRetryWaitSeconds() float64 {
	if x != nil {
		return x.RetryWaitSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetRetryMaxWaitSeconds() float64 {
	if x != nil {
		return x.RetryMaxWaitSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetResponseCharset() string {
	if x != nil {
		return x.ResponseCharset
	}
	return ""
}

func (x *FuzzerRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *FuzzerRequest) GetDNSServers() []string {
	if x != nil {
		return x.DNSServers
	}
	return nil
}

func (x *FuzzerRequest) GetEtcHosts() []*KVPair {
	if x != nil {
		return x.EtcHosts
	}
	return nil
}

func (x *FuzzerRequest) GetNoSystemProxy() bool {
	if x != nil {
		return x.NoSystemProxy
	}
	return false
}

func (x *FuzzerRequest) GetRepeatTimes() int64 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

func (x *FuzzerRequest) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *FuzzerRequest) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *FuzzerRequest) GetMatchersCondition() string {
	if x != nil {
		return x.MatchersCondition
	}
	return ""
}

func (x *FuzzerRequest) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

func (x *FuzzerRequest) GetYamlPoCNames() []string {
	if x != nil {
		return x.YamlPoCNames
	}
	return nil
}

func (x *FuzzerRequest) GetInheritVariables() bool {
	if x != nil {
		return x.InheritVariables
	}
	return false
}

func (x *FuzzerRequest) GetForceOnlyOneResponse() bool {
	if x != nil {
		return x.ForceOnlyOneResponse
	}
	return false
}

func (x *FuzzerRequest) GetInheritCookies() bool {
	if x != nil {
		return x.InheritCookies
	}
	return false
}

func (x *FuzzerRequest) GetFuzzerIndex() string {
	if x != nil {
		return x.FuzzerIndex
	}
	return ""
}

func (x *FuzzerRequest) GetFuzzerTabIndex() string {
	if x != nil {
		return x.FuzzerTabIndex
	}
	return ""
}

func (x *FuzzerRequest) GetFuzzerSequenceIndex() string {
	if x != nil {
		return x.FuzzerSequenceIndex
	}
	return ""
}

func (x *FuzzerRequest) GetBatchTargetFile() bool {
	if x != nil {
		return x.BatchTargetFile
	}
	return false
}

func (x *FuzzerRequest) GetBatchTarget() []byte {
	if x != nil {
		return x.BatchTarget
	}
	return nil
}

func (x *FuzzerRequest) GetAfterRequested() bool {
	if x != nil {
		return x.AfterRequested
	}
	return false
}

func (x *FuzzerRequest) GetStopAtFirstMatch() bool {
	if x != nil {
		return x.StopAtFirstMatch
	}
	return false
}

func (x *FuzzerRequest) GetRetryTaskID() int64 {
	if x != nil {
		return x.RetryTaskID
	}
	return 0
}

func (x *FuzzerRequest) GetReMatch() bool {
	if x != nil {
		return x.ReMatch
	}
	return false
}

func (x *FuzzerRequest) GetMaxBodySize() int64 {
	if x != nil {
		return x.MaxBodySize
	}
	return 0
}

func (x *FuzzerRequest) GetPauseTaskID() int64 {
	if x != nil {
		return x.PauseTaskID
	}
	return 0
}

func (x *FuzzerRequest) GetIsPause() bool {
	if x != nil {
		return x.IsPause
	}
	return false
}

func (x *FuzzerRequest) GetMutateMethods() []*MutateMethod {
	if x != nil {
		return x.MutateMethods
	}
	return nil
}

func (x *FuzzerRequest) GetSetPauseStatus() bool {
	if x != nil {
		return x.SetPauseStatus
	}
	return false
}

func (x *FuzzerRequest) GetSNI() string {
	if x != nil {
		return x.SNI
	}
	return ""
}

func (x *FuzzerRequest) GetOverwriteSNI() bool {
	if x != nil {
		return x.OverwriteSNI
	}
	return false
}

func (x *FuzzerRequest) GetDisableUseConnPool() bool {
	if x != nil {
		return x.DisableUseConnPool
	}
	return false
}

func (x *FuzzerRequest) GetDisableHotPatch() bool {
	if x != nil {
		return x.DisableHotPatch
	}
	return false
}

func (x *FuzzerRequest) GetEngineDropPacket() bool {
	if x != nil {
		return x.EngineDropPacket
	}
	return false
}

func (x *FuzzerRequest) GetEnableRandomChunked() bool {
	if x != nil {
		return x.EnableRandomChunked
	}
	return false
}

func (x *FuzzerRequest) GetRandomChunkedMinLength() int64 {
	if x != nil {
		return x.RandomChunkedMinLength
	}
	return 0
}

func (x *FuzzerRequest) GetRandomChunkedMaxLength() int64 {
	if x != nil {
		return x.RandomChunkedMaxLength
	}
	return 0
}

func (x *FuzzerRequest) GetRandomChunkedMinDelay() int64 {
	if x != nil {
		return x.RandomChunkedMinDelay
	}
	return 0
}

func (x *FuzzerRequest) GetRandomChunkedMaxDelay() int64 {
	if x != nil {
		return x.RandomChunkedMaxDelay
	}
	return 0
}

func (x *FuzzerRequest) GetNoReadMultiResponse() bool {
	if x != nil {
		return x.NoReadMultiResponse
	}
	return false
}

type MutateMethod struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Value         []*KVPair              `protobuf:"bytes,2,rep,name=Value,proto3" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MutateMethod) Reset() {
	*x = MutateMethod{}
	mi := &file_yakgrpc_proto_msgTypes[596]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MutateMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateMethod) ProtoMessage() {}

func (x *MutateMethod) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[596]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateMethod.ProtoReflect.Descriptor instead.
func (*MutateMethod) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{596}
}

func (x *MutateMethod) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MutateMethod) GetValue() []*KVPair {
	if x != nil {
		return x.Value
	}
	return nil
}

type KVPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	MarshalValue  string                 `protobuf:"bytes,3,opt,name=MarshalValue,proto3" json:"MarshalValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KVPair) Reset() {
	*x = KVPair{}
	mi := &file_yakgrpc_proto_msgTypes[597]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVPair) ProtoMessage() {}

func (x *KVPair) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[597]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVPair.ProtoReflect.Descriptor instead.
func (*KVPair) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{597}
}

func (x *KVPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KVPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *KVPair) GetMarshalValue() string {
	if x != nil {
		return x.MarshalValue
	}
	return ""
}

type FuzzerResponseFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 设置 body 大小作为过滤依据
	MinBodySize int64 `protobuf:"varint,1,opt,name=MinBodySize,proto3" json:"MinBodySize,omitempty"`
	MaxBodySize int64 `protobuf:"varint,2,opt,name=MaxBodySize,proto3" json:"MaxBodySize,omitempty"`
	// 设置正则作为过滤依据，这个正则针对整个数据包生效
	Regexps       []string `protobuf:"bytes,3,rep,name=Regexps,proto3" json:"Regexps,omitempty"`
	Keywords      []string `protobuf:"bytes,4,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	StatusCode    []string `protobuf:"bytes,6,rep,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzzerResponseFilter) Reset() {
	*x = FuzzerResponseFilter{}
	mi := &file_yakgrpc_proto_msgTypes[598]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzerResponseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerResponseFilter) ProtoMessage() {}

func (x *FuzzerResponseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[598]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerResponseFilter.ProtoReflect.Descriptor instead.
func (*FuzzerResponseFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{598}
}

func (x *FuzzerResponseFilter) GetMinBodySize() int64 {
	if x != nil {
		return x.MinBodySize
	}
	return 0
}

func (x *FuzzerResponseFilter) GetMaxBodySize() int64 {
	if x != nil {
		return x.MaxBodySize
	}
	return 0
}

func (x *FuzzerResponseFilter) GetRegexps() []string {
	if x != nil {
		return x.Regexps
	}
	return nil
}

func (x *FuzzerResponseFilter) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *FuzzerResponseFilter) GetStatusCode() []string {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

type RedirectRequestParams struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Request                  string                 `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Response                 string                 `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
	IsHttps                  bool                   `protobuf:"varint,3,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	PerRequestTimeoutSeconds float64                `protobuf:"fixed64,4,opt,name=PerRequestTimeoutSeconds,proto3" json:"PerRequestTimeoutSeconds,omitempty"`
	Proxy                    string                 `protobuf:"bytes,5,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	// Extractor n Matchers
	Extractors        []*HTTPResponseExtractor `protobuf:"bytes,6,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	Matchers          []*HTTPResponseMatcher   `protobuf:"bytes,7,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatchersCondition string                   `protobuf:"bytes,8,opt,name=MatchersCondition,proto3" json:"MatchersCondition,omitempty"`
	HitColor          string                   `protobuf:"bytes,9,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
	Params            []*FuzzerParamItem       `protobuf:"bytes,10,rep,name=Params,proto3" json:"Params,omitempty"`
	IsGmTLS           bool                     `protobuf:"varint,11,opt,name=IsGmTLS,proto3" json:"IsGmTLS,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RedirectRequestParams) Reset() {
	*x = RedirectRequestParams{}
	mi := &file_yakgrpc_proto_msgTypes[599]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedirectRequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectRequestParams) ProtoMessage() {}

func (x *RedirectRequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[599]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectRequestParams.ProtoReflect.Descriptor instead.
func (*RedirectRequestParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{599}
}

func (x *RedirectRequestParams) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *RedirectRequestParams) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *RedirectRequestParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *RedirectRequestParams) GetPerRequestTimeoutSeconds() float64 {
	if x != nil {
		return x.PerRequestTimeoutSeconds
	}
	return 0
}

func (x *RedirectRequestParams) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *RedirectRequestParams) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *RedirectRequestParams) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RedirectRequestParams) GetMatchersCondition() string {
	if x != nil {
		return x.MatchersCondition
	}
	return ""
}

func (x *RedirectRequestParams) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

func (x *RedirectRequestParams) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RedirectRequestParams) GetIsGmTLS() bool {
	if x != nil {
		return x.IsGmTLS
	}
	return false
}

type ExtractedUrl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractedUrl) Reset() {
	*x = ExtractedUrl{}
	mi := &file_yakgrpc_proto_msgTypes[600]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractedUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractedUrl) ProtoMessage() {}

func (x *ExtractedUrl) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[600]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractedUrl.ProtoReflect.Descriptor instead.
func (*ExtractedUrl) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{600}
}

func (x *ExtractedUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type FuzzerSequenceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       *FuzzerRequest         `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Response      *FuzzerResponse        `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzzerSequenceResponse) Reset() {
	*x = FuzzerSequenceResponse{}
	mi := &file_yakgrpc_proto_msgTypes[601]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzerSequenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerSequenceResponse) ProtoMessage() {}

func (x *FuzzerSequenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[601]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerSequenceResponse.ProtoReflect.Descriptor instead.
func (*FuzzerSequenceResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{601}
}

func (x *FuzzerSequenceResponse) GetRequest() *FuzzerRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FuzzerSequenceResponse) GetResponse() *FuzzerResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type FuzzerResponse struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Method      string                 `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	StatusCode  int32                  `protobuf:"varint,2,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Host        string                 `protobuf:"bytes,3,opt,name=Host,proto3" json:"Host,omitempty"`
	ContentType string                 `protobuf:"bytes,4,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	Headers     []*HTTPHeader          `protobuf:"bytes,5,rep,name=Headers,proto3" json:"Headers,omitempty"`
	ResponseRaw []byte                 `protobuf:"bytes,6,opt,name=ResponseRaw,proto3" json:"ResponseRaw,omitempty"`
	// response body 的长度
	BodyLength int64 `protobuf:"varint,7,opt,name=BodyLength,proto3" json:"BodyLength,omitempty"`
	// 这个请求大约花费了多长时间
	DurationMs             int64 `protobuf:"varint,8,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"` // FirstByte Duration
	DNSDurationMs          int64 `protobuf:"varint,40,opt,name=DNSDurationMs,proto3" json:"DNSDurationMs,omitempty"`
	FirstByteDurationMs    int64 `protobuf:"varint,41,opt,name=FirstByteDurationMs,proto3" json:"FirstByteDurationMs,omitempty"`
	TotalDurationMs        int64 `protobuf:"varint,42,opt,name=TotalDurationMs,proto3" json:"TotalDurationMs,omitempty"`
	TLSHandshakeDurationMs int64 `protobuf:"varint,56,opt,name=TLSHandshakeDurationMs,proto3" json:"TLSHandshakeDurationMs,omitempty"`
	TCPDurationMs          int64 `protobuf:"varint,57,opt,name=TCPDurationMs,proto3" json:"TCPDurationMs,omitempty"`
	ConnectDurationMs      int64 `protobuf:"varint,58,opt,name=ConnectDurationMs,proto3" json:"ConnectDurationMs,omitempty"`
	// 给一个随机 ID
	UUID string `protobuf:"bytes,9,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// timestamp 请求
	Timestamp int64 `protobuf:"varint,10,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// RequestRaw 原始数据包
	RequestRaw []byte `protobuf:"bytes,11,opt,name=RequestRaw,proto3" json:"RequestRaw,omitempty"`
	// 猜测可能的编码
	GuessResponseEncoding string `protobuf:"bytes,12,opt,name=GuessResponseEncoding,proto3" json:"GuessResponseEncoding,omitempty"`
	// 基础状态
	Ok     bool   `protobuf:"varint,31,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,32,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// IsHTTPS
	IsHTTPS bool `protobuf:"varint,33,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	// payloads
	Payloads         []string `protobuf:"bytes,34,rep,name=Payloads,proto3" json:"Payloads,omitempty"`
	BodySimilarity   float64  `protobuf:"fixed64,35,opt,name=BodySimilarity,proto3" json:"BodySimilarity,omitempty"`
	HeaderSimilarity float64  `protobuf:"fixed64,36,opt,name=HeaderSimilarity,proto3" json:"HeaderSimilarity,omitempty"`
	// Matched by filter
	MatchedByFilter bool   `protobuf:"varint,37,opt,name=MatchedByFilter,proto3" json:"MatchedByFilter,omitempty"`
	Url             string `protobuf:"bytes,38,opt,name=Url,proto3" json:"Url,omitempty"`
	TaskId          int64  `protobuf:"varint,39,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	// 使用哪个代理
	Proxy      string `protobuf:"bytes,43,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	RemoteAddr string `protobuf:"bytes,44,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	// 如果设置了
	ExtractedResults []*KVPair           `protobuf:"bytes,45,rep,name=ExtractedResults,proto3" json:"ExtractedResults,omitempty"`
	MatchedByMatcher bool                `protobuf:"varint,46,opt,name=MatchedByMatcher,proto3" json:"MatchedByMatcher,omitempty"`
	HitColor         string              `protobuf:"bytes,47,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
	RedirectFlows    []*RedirectHTTPFlow `protobuf:"bytes,48,rep,name=RedirectFlows,proto3" json:"RedirectFlows,omitempty"`
	// too large file operators
	IsTooLargeResponse         bool                     `protobuf:"varint,49,opt,name=IsTooLargeResponse,proto3" json:"IsTooLargeResponse,omitempty"`
	TooLargeResponseHeaderFile string                   `protobuf:"bytes,50,opt,name=TooLargeResponseHeaderFile,proto3" json:"TooLargeResponseHeaderFile,omitempty"`
	TooLargeResponseBodyFile   string                   `protobuf:"bytes,51,opt,name=TooLargeResponseBodyFile,proto3" json:"TooLargeResponseBodyFile,omitempty"`
	DisableRenderStyles        bool                     `protobuf:"varint,52,opt,name=DisableRenderStyles,proto3" json:"DisableRenderStyles,omitempty"`
	RuntimeID                  string                   `protobuf:"bytes,53,opt,name=RuntimeID,proto3" json:"RuntimeID,omitempty"`
	Discard                    bool                     `protobuf:"varint,54,opt,name=Discard,proto3" json:"Discard,omitempty"`
	IsAutoFixContentType       bool                     `protobuf:"varint,55,opt,name=IsAutoFixContentType,proto3" json:"IsAutoFixContentType,omitempty"`
	OriginalContentType        string                   `protobuf:"bytes,59,opt,name=OriginalContentType,proto3" json:"OriginalContentType,omitempty"`
	FixContentType             string                   `protobuf:"bytes,60,opt,name=FixContentType,proto3" json:"FixContentType,omitempty"`
	IsSetContentTypeOptions    bool                     `protobuf:"varint,61,opt,name=IsSetContentTypeOptions,proto3" json:"IsSetContentTypeOptions,omitempty"`
	RandomChunkedData          []*RandomChunkedResponse `protobuf:"bytes,62,rep,name=RandomChunkedData,proto3" json:"RandomChunkedData,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *FuzzerResponse) Reset() {
	*x = FuzzerResponse{}
	mi := &file_yakgrpc_proto_msgTypes[602]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerResponse) ProtoMessage() {}

func (x *FuzzerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[602]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerResponse.ProtoReflect.Descriptor instead.
func (*FuzzerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{602}
}

func (x *FuzzerResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *FuzzerResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FuzzerResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FuzzerResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FuzzerResponse) GetHeaders() []*HTTPHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *FuzzerResponse) GetResponseRaw() []byte {
	if x != nil {
		return x.ResponseRaw
	}
	return nil
}

func (x *FuzzerResponse) GetBodyLength() int64 {
	if x != nil {
		return x.BodyLength
	}
	return 0
}

func (x *FuzzerResponse) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetDNSDurationMs() int64 {
	if x != nil {
		return x.DNSDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetFirstByteDurationMs() int64 {
	if x != nil {
		return x.FirstByteDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetTotalDurationMs() int64 {
	if x != nil {
		return x.TotalDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetTLSHandshakeDurationMs() int64 {
	if x != nil {
		return x.TLSHandshakeDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetTCPDurationMs() int64 {
	if x != nil {
		return x.TCPDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetConnectDurationMs() int64 {
	if x != nil {
		return x.ConnectDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *FuzzerResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FuzzerResponse) GetRequestRaw() []byte {
	if x != nil {
		return x.RequestRaw
	}
	return nil
}

func (x *FuzzerResponse) GetGuessResponseEncoding() string {
	if x != nil {
		return x.GuessResponseEncoding
	}
	return ""
}

func (x *FuzzerResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *FuzzerResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FuzzerResponse) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *FuzzerResponse) GetPayloads() []string {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *FuzzerResponse) GetBodySimilarity() float64 {
	if x != nil {
		return x.BodySimilarity
	}
	return 0
}

func (x *FuzzerResponse) GetHeaderSimilarity() float64 {
	if x != nil {
		return x.HeaderSimilarity
	}
	return 0
}

func (x *FuzzerResponse) GetMatchedByFilter() bool {
	if x != nil {
		return x.MatchedByFilter
	}
	return false
}

func (x *FuzzerResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FuzzerResponse) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FuzzerResponse) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FuzzerResponse) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *FuzzerResponse) GetExtractedResults() []*KVPair {
	if x != nil {
		return x.ExtractedResults
	}
	return nil
}

func (x *FuzzerResponse) GetMatchedByMatcher() bool {
	if x != nil {
		return x.MatchedByMatcher
	}
	return false
}

func (x *FuzzerResponse) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

func (x *FuzzerResponse) GetRedirectFlows() []*RedirectHTTPFlow {
	if x != nil {
		return x.RedirectFlows
	}
	return nil
}

func (x *FuzzerResponse) GetIsTooLargeResponse() bool {
	if x != nil {
		return x.IsTooLargeResponse
	}
	return false
}

func (x *FuzzerResponse) GetTooLargeResponseHeaderFile() string {
	if x != nil {
		return x.TooLargeResponseHeaderFile
	}
	return ""
}

func (x *FuzzerResponse) GetTooLargeResponseBodyFile() string {
	if x != nil {
		return x.TooLargeResponseBodyFile
	}
	return ""
}

func (x *FuzzerResponse) GetDisableRenderStyles() bool {
	if x != nil {
		return x.DisableRenderStyles
	}
	return false
}

func (x *FuzzerResponse) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *FuzzerResponse) GetDiscard() bool {
	if x != nil {
		return x.Discard
	}
	return false
}

func (x *FuzzerResponse) GetIsAutoFixContentType() bool {
	if x != nil {
		return x.IsAutoFixContentType
	}
	return false
}

func (x *FuzzerResponse) GetOriginalContentType() string {
	if x != nil {
		return x.OriginalContentType
	}
	return ""
}

func (x *FuzzerResponse) GetFixContentType() string {
	if x != nil {
		return x.FixContentType
	}
	return ""
}

func (x *FuzzerResponse) GetIsSetContentTypeOptions() bool {
	if x != nil {
		return x.IsSetContentTypeOptions
	}
	return false
}

func (x *FuzzerResponse) GetRandomChunkedData() []*RandomChunkedResponse {
	if x != nil {
		return x.RandomChunkedData
	}
	return nil
}

type RandomChunkedResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Index                   int64                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`                                     // 当前的 chunked index
	Data                    []byte                 `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`                                        // 当前的 chunked 数据
	ChunkedLength           int64                  `protobuf:"varint,3,opt,name=ChunkedLength,proto3" json:"ChunkedLength,omitempty"`                     // 当前的 chunked 长度
	CurrentChunkedDelayTime int64                  `protobuf:"varint,4,opt,name=CurrentChunkedDelayTime,proto3" json:"CurrentChunkedDelayTime,omitempty"` // 当前的 chunked 延迟时间
	TotalDelayTime          int64                  `protobuf:"varint,5,opt,name=TotalDelayTime,proto3" json:"TotalDelayTime,omitempty"`                   // 总的发送耗时
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *RandomChunkedResponse) Reset() {
	*x = RandomChunkedResponse{}
	mi := &file_yakgrpc_proto_msgTypes[603]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandomChunkedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomChunkedResponse) ProtoMessage() {}

func (x *RandomChunkedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[603]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomChunkedResponse.ProtoReflect.Descriptor instead.
func (*RandomChunkedResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{603}
}

func (x *RandomChunkedResponse) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RandomChunkedResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RandomChunkedResponse) GetChunkedLength() int64 {
	if x != nil {
		return x.ChunkedLength
	}
	return 0
}

func (x *RandomChunkedResponse) GetCurrentChunkedDelayTime() int64 {
	if x != nil {
		return x.CurrentChunkedDelayTime
	}
	return 0
}

func (x *RandomChunkedResponse) GetTotalDelayTime() int64 {
	if x != nil {
		return x.TotalDelayTime
	}
	return 0
}

type RedirectHTTPFlow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHttps       bool                   `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request       []byte                 `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	Response      []byte                 `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedirectHTTPFlow) Reset() {
	*x = RedirectHTTPFlow{}
	mi := &file_yakgrpc_proto_msgTypes[604]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedirectHTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectHTTPFlow) ProtoMessage() {}

func (x *RedirectHTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[604]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectHTTPFlow.ProtoReflect.Descriptor instead.
func (*RedirectHTTPFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{604}
}

func (x *RedirectHTTPFlow) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *RedirectHTTPFlow) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RedirectHTTPFlow) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type Paging struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,51,opt,name=Page,proto3" json:"Page,omitempty"`
	Limit         int64                  `protobuf:"varint,52,opt,name=Limit,proto3" json:"Limit,omitempty"`
	OrderBy       string                 `protobuf:"bytes,53,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	Order         string                 `protobuf:"bytes,54,opt,name=Order,proto3" json:"Order,omitempty"`
	RawOrder      string                 `protobuf:"bytes,55,opt,name=RawOrder,proto3" json:"RawOrder,omitempty"`
	BeforeId      int64                  `protobuf:"varint,56,opt,name=BeforeId,proto3" json:"BeforeId,omitempty"`
	AfterId       int64                  `protobuf:"varint,57,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Paging) Reset() {
	*x = Paging{}
	mi := &file_yakgrpc_proto_msgTypes[605]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paging) ProtoMessage() {}

func (x *Paging) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[605]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paging.ProtoReflect.Descriptor instead.
func (*Paging) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{605}
}

func (x *Paging) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Paging) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Paging) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *Paging) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Paging) GetRawOrder() string {
	if x != nil {
		return x.RawOrder
	}
	return ""
}

func (x *Paging) GetBeforeId() int64 {
	if x != nil {
		return x.BeforeId
	}
	return 0
}

func (x *Paging) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

type GetHTTPFlowByHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHTTPFlowByHashRequest) Reset() {
	*x = GetHTTPFlowByHashRequest{}
	mi := &file_yakgrpc_proto_msgTypes[606]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHTTPFlowByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByHashRequest) ProtoMessage() {}

func (x *GetHTTPFlowByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[606]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByHashRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByHashRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{606}
}

func (x *GetHTTPFlowByHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetHTTPFlowByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHTTPFlowByIdRequest) Reset() {
	*x = GetHTTPFlowByIdRequest{}
	mi := &file_yakgrpc_proto_msgTypes[607]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHTTPFlowByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByIdRequest) ProtoMessage() {}

func (x *GetHTTPFlowByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[607]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByIdRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{607}
}

func (x *GetHTTPFlowByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetHTTPFlowByIdsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHTTPFlowByIdsRequest) Reset() {
	*x = GetHTTPFlowByIdsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[608]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHTTPFlowByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByIdsRequest) ProtoMessage() {}

func (x *GetHTTPFlowByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[608]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByIdsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{608}
}

func (x *GetHTTPFlowByIdsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetHTTPFlowBodyByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IsRequest     bool                   `protobuf:"varint,2,opt,name=IsRequest,proto3" json:"IsRequest,omitempty"`
	BufSize       int64                  `protobuf:"varint,3,opt,name=BufSize,proto3" json:"BufSize,omitempty"`
	RuntimeId     string                 `protobuf:"bytes,4,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	IsRisk        bool                   `protobuf:"varint,5,opt,name=IsRisk,proto3" json:"IsRisk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHTTPFlowBodyByIdRequest) Reset() {
	*x = GetHTTPFlowBodyByIdRequest{}
	mi := &file_yakgrpc_proto_msgTypes[609]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHTTPFlowBodyByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowBodyByIdRequest) ProtoMessage() {}

func (x *GetHTTPFlowBodyByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[609]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowBodyByIdRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowBodyByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{609}
}

func (x *GetHTTPFlowBodyByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetHTTPFlowBodyByIdRequest) GetIsRequest() bool {
	if x != nil {
		return x.IsRequest
	}
	return false
}

func (x *GetHTTPFlowBodyByIdRequest) GetBufSize() int64 {
	if x != nil {
		return x.BufSize
	}
	return 0
}

func (x *GetHTTPFlowBodyByIdRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *GetHTTPFlowBodyByIdRequest) GetIsRisk() bool {
	if x != nil {
		return x.IsRisk
	}
	return false
}

type QueryHTTPFlowRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Pagination        *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	SourceType        string                 `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	Methods           string                 `protobuf:"bytes,3,opt,name=Methods,proto3" json:"Methods,omitempty"`
	SearchURL         string                 `protobuf:"bytes,4,opt,name=SearchURL,proto3" json:"SearchURL,omitempty"`
	StatusCode        string                 `protobuf:"bytes,5,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	HaveCommonParams  bool                   `protobuf:"varint,6,opt,name=HaveCommonParams,proto3" json:"HaveCommonParams,omitempty"`
	HaveBody          bool                   `protobuf:"varint,7,opt,name=HaveBody,proto3" json:"HaveBody,omitempty"`
	SearchContentType string                 `protobuf:"bytes,9,opt,name=SearchContentType,proto3" json:"SearchContentType,omitempty"`
	// 一般用于查询增量，查询所有更新前的内容
	BeforeUpdatedAt int64  `protobuf:"varint,10,opt,name=BeforeUpdatedAt,proto3" json:"BeforeUpdatedAt,omitempty"`
	AfterUpdatedAt  int64  `protobuf:"varint,11,opt,name=AfterUpdatedAt,proto3" json:"AfterUpdatedAt,omitempty"`
	AfterId         int64  `protobuf:"varint,12,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	BeforeId        int64  `protobuf:"varint,13,opt,name=BeforeId,proto3" json:"BeforeId,omitempty"`
	Keyword         string `protobuf:"bytes,14,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	OnlyWebsocket   bool   `protobuf:"varint,15,opt,name=OnlyWebsocket,proto3" json:"OnlyWebsocket,omitempty"`
	// 查询包含在这个 URL 中的搜索结果
	IncludeInUrl []string `protobuf:"bytes,16,rep,name=IncludeInUrl,proto3" json:"IncludeInUrl,omitempty"`
	// 不查询当前 URL 中的结果
	ExcludeInUrl []string `protobuf:"bytes,17,rep,name=ExcludeInUrl,proto3" json:"ExcludeInUrl,omitempty"`
	// 仅查看当前 IP 对应的结果或不包含
	IncludeInIP        []string `protobuf:"bytes,18,rep,name=IncludeInIP,proto3" json:"IncludeInIP,omitempty"`
	ExcludeInIP        []string `protobuf:"bytes,19,rep,name=ExcludeInIP,proto3" json:"ExcludeInIP,omitempty"`
	ExcludeId          []int64  `protobuf:"varint,20,rep,packed,name=ExcludeId,proto3" json:"ExcludeId,omitempty"`
	IncludeInWhere     []string `protobuf:"bytes,21,rep,name=IncludeInWhere,proto3" json:"IncludeInWhere,omitempty"`
	IncludeId          []int64  `protobuf:"varint,22,rep,packed,name=IncludeId,proto3" json:"IncludeId,omitempty"`
	Tags               []string `protobuf:"bytes,23,rep,name=Tags,proto3" json:"Tags,omitempty"`
	HaveParamsTotal    string   `protobuf:"bytes,24,opt,name=HaveParamsTotal,proto3" json:"HaveParamsTotal,omitempty"`
	Color              []string `protobuf:"bytes,25,rep,name=Color,proto3" json:"Color,omitempty"`
	OffsetId           int64    `protobuf:"varint,26,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	AfterBodyLength    int64    `protobuf:"varint,27,opt,name=AfterBodyLength,proto3" json:"AfterBodyLength,omitempty"`
	BeforeBodyLength   int64    `protobuf:"varint,28,opt,name=BeforeBodyLength,proto3" json:"BeforeBodyLength,omitempty"`
	IsWebsocket        string   `protobuf:"bytes,29,opt,name=IsWebsocket,proto3" json:"IsWebsocket,omitempty"`
	RuntimeId          string   `protobuf:"bytes,31,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	FromPlugin         string   `protobuf:"bytes,32,opt,name=FromPlugin,proto3" json:"FromPlugin,omitempty"`
	Full               bool     `protobuf:"varint,33,opt,name=Full,proto3" json:"Full,omitempty"`
	IncludePath        []string `protobuf:"bytes,34,rep,name=IncludePath,proto3" json:"IncludePath,omitempty"`
	ExcludePath        []string `protobuf:"bytes,35,rep,name=ExcludePath,proto3" json:"ExcludePath,omitempty"`
	IncludeSuffix      []string `protobuf:"bytes,36,rep,name=IncludeSuffix,proto3" json:"IncludeSuffix,omitempty"`
	ExcludeSuffix      []string `protobuf:"bytes,37,rep,name=ExcludeSuffix,proto3" json:"ExcludeSuffix,omitempty"`
	ExcludeContentType []string `protobuf:"bytes,38,rep,name=ExcludeContentType,proto3" json:"ExcludeContentType,omitempty"`
	WithPayload        bool     `protobuf:"varint,39,opt,name=WithPayload,proto3" json:"WithPayload,omitempty"`
	RuntimeIDs         []string `protobuf:"bytes,40,rep,name=RuntimeIDs,proto3" json:"RuntimeIDs,omitempty"`
	IncludeHash        []string `protobuf:"bytes,41,rep,name=IncludeHash,proto3" json:"IncludeHash,omitempty"`
	HiddenIndex        []string `protobuf:"bytes,42,rep,name=HiddenIndex,proto3" json:"HiddenIndex,omitempty"`
	ProcessName        []string `protobuf:"bytes,43,rep,name=ProcessName,proto3" json:"ProcessName,omitempty"`
	ExcludeKeywords    []string `protobuf:"bytes,44,rep,name=ExcludeKeywords,proto3" json:"ExcludeKeywords,omitempty"`
	KeywordType        string   `protobuf:"bytes,45,opt,name=KeywordType,proto3" json:"KeywordType,omitempty"` // <empty> = all/response/request
	AnalyzedIds        []int64  `protobuf:"varint,46,rep,packed,name=AnalyzedIds,proto3" json:"AnalyzedIds,omitempty"`
	PayloadKeyword     string   `protobuf:"bytes,47,opt,name=PayloadKeyword,proto3" json:"PayloadKeyword,omitempty"`
	ExcludeStatusCode  string   `protobuf:"bytes,48,opt,name=ExcludeStatusCode,proto3" json:"ExcludeStatusCode,omitempty"` // 排除状态码
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *QueryHTTPFlowRequest) Reset() {
	*x = QueryHTTPFlowRequest{}
	mi := &file_yakgrpc_proto_msgTypes[610]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowRequest) ProtoMessage() {}

func (x *QueryHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[610]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{610}
}

func (x *QueryHTTPFlowRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetMethods() string {
	if x != nil {
		return x.Methods
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetSearchURL() string {
	if x != nil {
		return x.SearchURL
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetHaveCommonParams() bool {
	if x != nil {
		return x.HaveCommonParams
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetHaveBody() bool {
	if x != nil {
		return x.HaveBody
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetSearchContentType() string {
	if x != nil {
		return x.SearchContentType
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetBeforeUpdatedAt() int64 {
	if x != nil {
		return x.BeforeUpdatedAt
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterUpdatedAt() int64 {
	if x != nil {
		return x.AfterUpdatedAt
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetBeforeId() int64 {
	if x != nil {
		return x.BeforeId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetOnlyWebsocket() bool {
	if x != nil {
		return x.OnlyWebsocket
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetIncludeInUrl() []string {
	if x != nil {
		return x.IncludeInUrl
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeInUrl() []string {
	if x != nil {
		return x.ExcludeInUrl
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeInIP() []string {
	if x != nil {
		return x.IncludeInIP
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeInIP() []string {
	if x != nil {
		return x.ExcludeInIP
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeId() []int64 {
	if x != nil {
		return x.ExcludeId
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeInWhere() []string {
	if x != nil {
		return x.IncludeInWhere
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeId() []int64 {
	if x != nil {
		return x.IncludeId
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetHaveParamsTotal() string {
	if x != nil {
		return x.HaveParamsTotal
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetColor() []string {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetOffsetId() int64 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterBodyLength() int64 {
	if x != nil {
		return x.AfterBodyLength
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetBeforeBodyLength() int64 {
	if x != nil {
		return x.BeforeBodyLength
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetIsWebsocket() string {
	if x != nil {
		return x.IsWebsocket
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetFromPlugin() string {
	if x != nil {
		return x.FromPlugin
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetIncludePath() []string {
	if x != nil {
		return x.IncludePath
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludePath() []string {
	if x != nil {
		return x.ExcludePath
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeContentType() []string {
	if x != nil {
		return x.ExcludeContentType
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetWithPayload() bool {
	if x != nil {
		return x.WithPayload
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetRuntimeIDs() []string {
	if x != nil {
		return x.RuntimeIDs
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeHash() []string {
	if x != nil {
		return x.IncludeHash
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetHiddenIndex() []string {
	if x != nil {
		return x.HiddenIndex
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetProcessName() []string {
	if x != nil {
		return x.ProcessName
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeKeywords() []string {
	if x != nil {
		return x.ExcludeKeywords
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetKeywordType() string {
	if x != nil {
		return x.KeywordType
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetAnalyzedIds() []int64 {
	if x != nil {
		return x.AnalyzedIds
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetPayloadKeyword() string {
	if x != nil {
		return x.PayloadKeyword
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetExcludeStatusCode() string {
	if x != nil {
		return x.ExcludeStatusCode
	}
	return ""
}

type HTTPFlowsToOnlineRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Token               string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	ProjectName         string                 `protobuf:"bytes,2,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	ProjectDescription  string                 `protobuf:"bytes,3,opt,name=ProjectDescription,proto3" json:"ProjectDescription,omitempty"`
	ExternalModule      string                 `protobuf:"bytes,4,opt,name=ExternalModule,proto3" json:"ExternalModule,omitempty"`
	ExternalProjectCode string                 `protobuf:"bytes,5,opt,name=ExternalProjectCode,proto3" json:"ExternalProjectCode,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HTTPFlowsToOnlineRequest) Reset() {
	*x = HTTPFlowsToOnlineRequest{}
	mi := &file_yakgrpc_proto_msgTypes[611]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowsToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsToOnlineRequest) ProtoMessage() {}

func (x *HTTPFlowsToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[611]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsToOnlineRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{611}
}

func (x *HTTPFlowsToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HTTPFlowsToOnlineRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *HTTPFlowsToOnlineRequest) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

func (x *HTTPFlowsToOnlineRequest) GetExternalModule() string {
	if x != nil {
		return x.ExternalModule
	}
	return ""
}

func (x *HTTPFlowsToOnlineRequest) GetExternalProjectCode() string {
	if x != nil {
		return x.ExternalProjectCode
	}
	return ""
}

type HTTPFlowsToOnlineBatchRequest struct {
	state                protoimpl.MessageState    `protogen:"open.v1"`
	ToOnlineWhere        *HTTPFlowsToOnlineRequest `protobuf:"bytes,1,opt,name=ToOnlineWhere,proto3" json:"ToOnlineWhere,omitempty"`
	UploadHTTPFlowsWhere *QueryHTTPFlowRequest     `protobuf:"bytes,2,opt,name=UploadHTTPFlowsWhere,proto3" json:"UploadHTTPFlowsWhere,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HTTPFlowsToOnlineBatchRequest) Reset() {
	*x = HTTPFlowsToOnlineBatchRequest{}
	mi := &file_yakgrpc_proto_msgTypes[612]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowsToOnlineBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsToOnlineBatchRequest) ProtoMessage() {}

func (x *HTTPFlowsToOnlineBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[612]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsToOnlineBatchRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsToOnlineBatchRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{612}
}

func (x *HTTPFlowsToOnlineBatchRequest) GetToOnlineWhere() *HTTPFlowsToOnlineRequest {
	if x != nil {
		return x.ToOnlineWhere
	}
	return nil
}

func (x *HTTPFlowsToOnlineBatchRequest) GetUploadHTTPFlowsWhere() *QueryHTTPFlowRequest {
	if x != nil {
		return x.UploadHTTPFlowsWhere
	}
	return nil
}

type HTTPFlowsToOnlineBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SuccessCount  int64                  `protobuf:"varint,1,opt,name=SuccessCount,proto3" json:"SuccessCount,omitempty"`
	FailedCount   int64                  `protobuf:"varint,2,opt,name=FailedCount,proto3" json:"FailedCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPFlowsToOnlineBatchResponse) Reset() {
	*x = HTTPFlowsToOnlineBatchResponse{}
	mi := &file_yakgrpc_proto_msgTypes[613]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowsToOnlineBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsToOnlineBatchResponse) ProtoMessage() {}

func (x *HTTPFlowsToOnlineBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[613]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsToOnlineBatchResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowsToOnlineBatchResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{613}
}

func (x *HTTPFlowsToOnlineBatchResponse) GetSuccessCount() int64 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *HTTPFlowsToOnlineBatchResponse) GetFailedCount() int64 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

type AnalyzeHTTPFlowRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	HotPatchCode string                 `protobuf:"bytes,1,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	Replacers    []*MITMContentReplacer `protobuf:"bytes,2,rep,name=Replacers,proto3" json:"Replacers,omitempty"`
	Config       *AnalyzeHTTPFlowConfig `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
	// 分析数据源
	Source *AnalyzedDataSource `protobuf:"bytes,4,opt,name=Source,proto3" json:"Source,omitempty"`
	// 响应匹配器
	Matchers      []*HTTPResponseMatcher `protobuf:"bytes,5,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeHTTPFlowRequest) Reset() {
	*x = AnalyzeHTTPFlowRequest{}
	mi := &file_yakgrpc_proto_msgTypes[614]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeHTTPFlowRequest) ProtoMessage() {}

func (x *AnalyzeHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[614]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{614}
}

func (x *AnalyzeHTTPFlowRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *AnalyzeHTTPFlowRequest) GetReplacers() []*MITMContentReplacer {
	if x != nil {
		return x.Replacers
	}
	return nil
}

func (x *AnalyzeHTTPFlowRequest) GetConfig() *AnalyzeHTTPFlowConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AnalyzeHTTPFlowRequest) GetSource() *AnalyzedDataSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AnalyzeHTTPFlowRequest) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

type AnalyzedDataSource struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	SourceType string                 `protobuf:"bytes,1,opt,name=SourceType,proto3" json:"SourceType,omitempty"` // 分数数据源来自数据库或者用户手动输入的数据包 database / rawpacket
	// database
	HTTPFlowFilter *QueryHTTPFlowRequest `protobuf:"bytes,2,opt,name=HTTPFlowFilter,proto3" json:"HTTPFlowFilter,omitempty"`
	// rawpacket
	RawRequest    string `protobuf:"bytes,3,opt,name=RawRequest,proto3" json:"RawRequest,omitempty"`
	RawResponse   string `protobuf:"bytes,4,opt,name=RawResponse,proto3" json:"RawResponse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzedDataSource) Reset() {
	*x = AnalyzedDataSource{}
	mi := &file_yakgrpc_proto_msgTypes[615]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzedDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzedDataSource) ProtoMessage() {}

func (x *AnalyzedDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[615]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzedDataSource.ProtoReflect.Descriptor instead.
func (*AnalyzedDataSource) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{615}
}

func (x *AnalyzedDataSource) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *AnalyzedDataSource) GetHTTPFlowFilter() *QueryHTTPFlowRequest {
	if x != nil {
		return x.HTTPFlowFilter
	}
	return nil
}

func (x *AnalyzedDataSource) GetRawRequest() string {
	if x != nil {
		return x.RawRequest
	}
	return ""
}

func (x *AnalyzedDataSource) GetRawResponse() string {
	if x != nil {
		return x.RawResponse
	}
	return ""
}

type AnalyzeHTTPFlowConfig struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Concurrency       int64                  `protobuf:"varint,1,opt,name=Concurrency,proto3" json:"Concurrency,omitempty"`             // 并发数量，不传默认为10
	EnableDeduplicate bool                   `protobuf:"varint,2,opt,name=EnableDeduplicate,proto3" json:"EnableDeduplicate,omitempty"` // 是否进行单条数据去重
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AnalyzeHTTPFlowConfig) Reset() {
	*x = AnalyzeHTTPFlowConfig{}
	mi := &file_yakgrpc_proto_msgTypes[616]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeHTTPFlowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeHTTPFlowConfig) ProtoMessage() {}

func (x *AnalyzeHTTPFlowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[616]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeHTTPFlowConfig.ProtoReflect.Descriptor instead.
func (*AnalyzeHTTPFlowConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{616}
}

func (x *AnalyzeHTTPFlowConfig) GetConcurrency() int64 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *AnalyzeHTTPFlowConfig) GetEnableDeduplicate() bool {
	if x != nil {
		return x.EnableDeduplicate
	}
	return false
}

type AnalyzeHTTPFlowResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ExecResult       *ExecResult            `protobuf:"bytes,1,opt,name=ExecResult,proto3" json:"ExecResult,omitempty"`
	RuleData         *HTTPFlowRuleData      `protobuf:"bytes,2,opt,name=RuleData,proto3" json:"RuleData,omitempty"`
	ExtractedContent string                 `protobuf:"bytes,3,opt,name=ExtractedContent,proto3" json:"ExtractedContent,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AnalyzeHTTPFlowResponse) Reset() {
	*x = AnalyzeHTTPFlowResponse{}
	mi := &file_yakgrpc_proto_msgTypes[617]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeHTTPFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeHTTPFlowResponse) ProtoMessage() {}

func (x *AnalyzeHTTPFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[617]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeHTTPFlowResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeHTTPFlowResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{617}
}

func (x *AnalyzeHTTPFlowResponse) GetExecResult() *ExecResult {
	if x != nil {
		return x.ExecResult
	}
	return nil
}

func (x *AnalyzeHTTPFlowResponse) GetRuleData() *HTTPFlowRuleData {
	if x != nil {
		return x.RuleData
	}
	return nil
}

func (x *AnalyzeHTTPFlowResponse) GetExtractedContent() string {
	if x != nil {
		return x.ExtractedContent
	}
	return ""
}

type AnalyzedHTTPFlowFilter struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ResultIds        []string               `protobuf:"bytes,1,rep,name=ResultIds,proto3" json:"ResultIds,omitempty"`
	RuleVerboseNames []string               `protobuf:"bytes,2,rep,name=RuleVerboseNames,proto3" json:"RuleVerboseNames,omitempty"`
	Rule             []string               `protobuf:"bytes,3,rep,name=Rule,proto3" json:"Rule,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AnalyzedHTTPFlowFilter) Reset() {
	*x = AnalyzedHTTPFlowFilter{}
	mi := &file_yakgrpc_proto_msgTypes[618]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzedHTTPFlowFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzedHTTPFlowFilter) ProtoMessage() {}

func (x *AnalyzedHTTPFlowFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[618]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzedHTTPFlowFilter.ProtoReflect.Descriptor instead.
func (*AnalyzedHTTPFlowFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{618}
}

func (x *AnalyzedHTTPFlowFilter) GetResultIds() []string {
	if x != nil {
		return x.ResultIds
	}
	return nil
}

func (x *AnalyzedHTTPFlowFilter) GetRuleVerboseNames() []string {
	if x != nil {
		return x.RuleVerboseNames
	}
	return nil
}

func (x *AnalyzedHTTPFlowFilter) GetRule() []string {
	if x != nil {
		return x.Rule
	}
	return nil
}

// 规则数据
type HTTPFlowRuleData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	HTTPFlowId      int64                  `protobuf:"varint,2,opt,name=HTTPFlowId,proto3" json:"HTTPFlowId,omitempty"`
	RuleVerboseName string                 `protobuf:"bytes,3,opt,name=RuleVerboseName,proto3" json:"RuleVerboseName,omitempty"`
	Rule            string                 `protobuf:"bytes,4,opt,name=Rule,proto3" json:"Rule,omitempty"`
	StatusCode      int64                  `protobuf:"varint,5,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Url             string                 `protobuf:"bytes,6,opt,name=Url,proto3" json:"Url,omitempty"`
	Method          string                 `protobuf:"bytes,7,opt,name=Method,proto3" json:"Method,omitempty"`
	IPAddress       string                 `protobuf:"bytes,8,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HTTPFlowRuleData) Reset() {
	*x = HTTPFlowRuleData{}
	mi := &file_yakgrpc_proto_msgTypes[619]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowRuleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowRuleData) ProtoMessage() {}

func (x *HTTPFlowRuleData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[619]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowRuleData.ProtoReflect.Descriptor instead.
func (*HTTPFlowRuleData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{619}
}

func (x *HTTPFlowRuleData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HTTPFlowRuleData) GetHTTPFlowId() int64 {
	if x != nil {
		return x.HTTPFlowId
	}
	return 0
}

func (x *HTTPFlowRuleData) GetRuleVerboseName() string {
	if x != nil {
		return x.RuleVerboseName
	}
	return ""
}

func (x *HTTPFlowRuleData) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *HTTPFlowRuleData) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPFlowRuleData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPFlowRuleData) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPFlowRuleData) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

type ExportHTTPFlowsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExportWhere   *QueryHTTPFlowRequest  `protobuf:"bytes,1,opt,name=ExportWhere,proto3" json:"ExportWhere,omitempty"`
	Ids           []int64                `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	FieldName     []string               `protobuf:"bytes,3,rep,name=FieldName,proto3" json:"FieldName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportHTTPFlowsRequest) Reset() {
	*x = ExportHTTPFlowsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[620]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportHTTPFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHTTPFlowsRequest) ProtoMessage() {}

func (x *ExportHTTPFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[620]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHTTPFlowsRequest.ProtoReflect.Descriptor instead.
func (*ExportHTTPFlowsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{620}
}

func (x *ExportHTTPFlowsRequest) GetExportWhere() *QueryHTTPFlowRequest {
	if x != nil {
		return x.ExportWhere
	}
	return nil
}

func (x *ExportHTTPFlowsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportHTTPFlowsRequest) GetFieldName() []string {
	if x != nil {
		return x.FieldName
	}
	return nil
}

type QueryHTTPFlowsProcessNamesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProcessNames  []string               `protobuf:"bytes,1,rep,name=ProcessNames,proto3" json:"ProcessNames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHTTPFlowsProcessNamesResponse) Reset() {
	*x = QueryHTTPFlowsProcessNamesResponse{}
	mi := &file_yakgrpc_proto_msgTypes[621]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHTTPFlowsProcessNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsProcessNamesResponse) ProtoMessage() {}

func (x *QueryHTTPFlowsProcessNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[621]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsProcessNamesResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsProcessNamesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{621}
}

func (x *QueryHTTPFlowsProcessNamesResponse) GetProcessNames() []string {
	if x != nil {
		return x.ProcessNames
	}
	return nil
}

type DeleteHTTPFlowRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DeleteAll      bool                   `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Id             []int64                `protobuf:"varint,4,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	ItemHash       []string               `protobuf:"bytes,2,rep,name=ItemHash,proto3" json:"ItemHash,omitempty"`
	URLPrefix      string                 `protobuf:"bytes,3,opt,name=URLPrefix,proto3" json:"URLPrefix,omitempty"`
	Filter         *QueryHTTPFlowRequest  `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	URLPrefixBatch []string               `protobuf:"bytes,6,rep,name=URLPrefixBatch,proto3" json:"URLPrefixBatch,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteHTTPFlowRequest) Reset() {
	*x = DeleteHTTPFlowRequest{}
	mi := &file_yakgrpc_proto_msgTypes[622]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHTTPFlowRequest) ProtoMessage() {}

func (x *DeleteHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[622]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*DeleteHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{622}
}

func (x *DeleteHTTPFlowRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteHTTPFlowRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetItemHash() []string {
	if x != nil {
		return x.ItemHash
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetURLPrefix() string {
	if x != nil {
		return x.URLPrefix
	}
	return ""
}

func (x *DeleteHTTPFlowRequest) GetFilter() *QueryHTTPFlowRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetURLPrefixBatch() []string {
	if x != nil {
		return x.URLPrefixBatch
	}
	return nil
}

type QueryHTTPFlowsIdsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IncludeInWhere []string               `protobuf:"bytes,1,rep,name=IncludeInWhere,proto3" json:"IncludeInWhere,omitempty"`
	SourceType     string                 `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueryHTTPFlowsIdsRequest) Reset() {
	*x = QueryHTTPFlowsIdsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[623]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHTTPFlowsIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsIdsRequest) ProtoMessage() {}

func (x *QueryHTTPFlowsIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[623]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsIdsRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsIdsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{623}
}

func (x *QueryHTTPFlowsIdsRequest) GetIncludeInWhere() []string {
	if x != nil {
		return x.IncludeInWhere
	}
	return nil
}

func (x *QueryHTTPFlowsIdsRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

type QueryHTTPFlowsIdsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*HTTPFlow            `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHTTPFlowsIdsResponse) Reset() {
	*x = QueryHTTPFlowsIdsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[624]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHTTPFlowsIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsIdsResponse) ProtoMessage() {}

func (x *QueryHTTPFlowsIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[624]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsIdsResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsIdsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{624}
}

func (x *QueryHTTPFlowsIdsResponse) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

type HTTPHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        string                 `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPHeader) Reset() {
	*x = HTTPHeader{}
	mi := &file_yakgrpc_proto_msgTypes[625]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPHeader) ProtoMessage() {}

func (x *HTTPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[625]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPHeader.ProtoReflect.Descriptor instead.
func (*HTTPHeader) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{625}
}

func (x *HTTPHeader) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *HTTPHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HTTPFlows struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*HTTPFlow            `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPFlows) Reset() {
	*x = HTTPFlows{}
	mi := &file_yakgrpc_proto_msgTypes[626]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlows) ProtoMessage() {}

func (x *HTTPFlows) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[626]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlows.ProtoReflect.Descriptor instead.
func (*HTTPFlows) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{626}
}

func (x *HTTPFlows) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

type HTTPFlow struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IsHTTPS            bool                   `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	Url                string                 `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	RequestHeader      []*HTTPHeader          `protobuf:"bytes,4,rep,name=RequestHeader,proto3" json:"RequestHeader,omitempty"`
	Request            []byte                 `protobuf:"bytes,5,opt,name=Request,proto3" json:"Request,omitempty"`
	ResponseHeader     []*HTTPHeader          `protobuf:"bytes,6,rep,name=ResponseHeader,proto3" json:"ResponseHeader,omitempty"`
	Response           []byte                 `protobuf:"bytes,7,opt,name=Response,proto3" json:"Response,omitempty"`
	SourceType         string                 `protobuf:"bytes,8,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	Path               string                 `protobuf:"bytes,9,opt,name=Path,proto3" json:"Path,omitempty"`
	Method             string                 `protobuf:"bytes,10,opt,name=Method,proto3" json:"Method,omitempty"`
	BodyLength         int64                  `protobuf:"varint,11,opt,name=BodyLength,proto3" json:"BodyLength,omitempty"`
	BodySizeVerbose    string                 `protobuf:"bytes,19,opt,name=BodySizeVerbose,proto3" json:"BodySizeVerbose,omitempty"`
	RequestLength      int64                  `protobuf:"varint,31,opt,name=RequestLength,proto3" json:"RequestLength,omitempty"`          // 设置 Request Body 长度
	RequestSizeVerbose string                 `protobuf:"bytes,32,opt,name=RequestSizeVerbose,proto3" json:"RequestSizeVerbose,omitempty"` // 设置 Request
	ContentType        string                 `protobuf:"bytes,12,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	StatusCode         int64                  `protobuf:"varint,13,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	GetParamsTotal     int64                  `protobuf:"varint,14,opt,name=GetParamsTotal,proto3" json:"GetParamsTotal,omitempty"`
	PostParamsTotal    int64                  `protobuf:"varint,15,opt,name=PostParamsTotal,proto3" json:"PostParamsTotal,omitempty"`
	CookieParamsTotal  int64                  `protobuf:"varint,22,opt,name=CookieParamsTotal,proto3" json:"CookieParamsTotal,omitempty"`
	UpdatedAt          int64                  `protobuf:"varint,16,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedAt          int64                  `protobuf:"varint,17,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Hash               string                 `protobuf:"bytes,18,opt,name=Hash,proto3" json:"Hash,omitempty"`
	GetParams          []*FuzzableParam       `protobuf:"bytes,20,rep,name=GetParams,proto3" json:"GetParams,omitempty"`
	PostParams         []*FuzzableParam       `protobuf:"bytes,21,rep,name=PostParams,proto3" json:"PostParams,omitempty"`
	CookieParams       []*FuzzableParam       `protobuf:"bytes,23,rep,name=CookieParams,proto3" json:"CookieParams,omitempty"`
	HostPort           string                 `protobuf:"bytes,24,opt,name=HostPort,proto3" json:"HostPort,omitempty"`
	IPAddress          string                 `protobuf:"bytes,25,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	HtmlTitle          string                 `protobuf:"bytes,26,opt,name=HtmlTitle,proto3" json:"HtmlTitle,omitempty"`
	Tags               string                 `protobuf:"bytes,27,opt,name=Tags,proto3" json:"Tags,omitempty"`
	NoFixContentLength bool                   `protobuf:"varint,28,opt,name=NoFixContentLength,proto3" json:"NoFixContentLength,omitempty"`
	Id                 uint64                 `protobuf:"varint,29,opt,name=Id,proto3" json:"Id,omitempty"`
	// websocket 相关字段
	IsWebsocket   bool   `protobuf:"varint,30,opt,name=IsWebsocket,proto3" json:"IsWebsocket,omitempty"`
	WebsocketHash string `protobuf:"bytes,33,opt,name=WebsocketHash,proto3" json:"WebsocketHash,omitempty"`
	// 一般这不是无损的情况，会涉及到用户 Copy Paste 直接 Body 的需求
	InvalidForUTF8Request  bool   `protobuf:"varint,34,opt,name=InvalidForUTF8Request,proto3" json:"InvalidForUTF8Request,omitempty"`
	InvalidForUTF8Response bool   `protobuf:"varint,35,opt,name=InvalidForUTF8Response,proto3" json:"InvalidForUTF8Response,omitempty"`
	RawRequestBodyBase64   string `protobuf:"bytes,36,opt,name=RawRequestBodyBase64,proto3" json:"RawRequestBodyBase64,omitempty"`
	RawResponseBodyBase64  string `protobuf:"bytes,37,opt,name=RawResponseBodyBase64,proto3" json:"RawResponseBodyBase64,omitempty"`
	// 可以安全的传输到 Fuzzer 的 HTTPRequest
	SafeHTTPRequest string `protobuf:"bytes,38,opt,name=SafeHTTPRequest,proto3" json:"SafeHTTPRequest,omitempty"`
	// 在完全数据下，可加载 Domain 和 RootDomain 还有 Json
	Domains                    []string `protobuf:"bytes,40,rep,name=Domains,proto3" json:"Domains,omitempty"`
	RootDomains                []string `protobuf:"bytes,41,rep,name=RootDomains,proto3" json:"RootDomains,omitempty"`
	JsonObjects                []string `protobuf:"bytes,42,rep,name=JsonObjects,proto3" json:"JsonObjects,omitempty"`
	IsReadTooSlowResponse      bool     `protobuf:"varint,51,opt,name=IsReadTooSlowResponse,proto3" json:"IsReadTooSlowResponse,omitempty"`
	IsTooLargeResponse         bool     `protobuf:"varint,43,opt,name=IsTooLargeResponse,proto3" json:"IsTooLargeResponse,omitempty"`
	TooLargeResponseHeaderFile string   `protobuf:"bytes,44,opt,name=TooLargeResponseHeaderFile,proto3" json:"TooLargeResponseHeaderFile,omitempty"`
	TooLargeResponseBodyFile   string   `protobuf:"bytes,45,opt,name=TooLargeResponseBodyFile,proto3" json:"TooLargeResponseBodyFile,omitempty"`
	DisableRenderStyles        bool     `protobuf:"varint,46,opt,name=DisableRenderStyles,proto3" json:"DisableRenderStyles,omitempty"`
	// payloads (web fuzzer)
	Payloads      []string `protobuf:"bytes,47,rep,name=Payloads,proto3" json:"Payloads,omitempty"`
	DurationMs    int64    `protobuf:"varint,48,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`
	HiddenIndex   string   `protobuf:"bytes,49,opt,name=HiddenIndex,proto3" json:"HiddenIndex,omitempty"`
	FromPlugin    string   `protobuf:"bytes,50,opt,name=FromPlugin,proto3" json:"FromPlugin,omitempty"`
	Host          string   `protobuf:"bytes,52,opt,name=Host,proto3" json:"Host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPFlow) Reset() {
	*x = HTTPFlow{}
	mi := &file_yakgrpc_proto_msgTypes[627]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlow) ProtoMessage() {}

func (x *HTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[627]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlow.ProtoReflect.Descriptor instead.
func (*HTTPFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{627}
}

func (x *HTTPFlow) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *HTTPFlow) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPFlow) GetRequestHeader() []*HTTPHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *HTTPFlow) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPFlow) GetResponseHeader() []*HTTPHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *HTTPFlow) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *HTTPFlow) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *HTTPFlow) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPFlow) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPFlow) GetBodyLength() int64 {
	if x != nil {
		return x.BodyLength
	}
	return 0
}

func (x *HTTPFlow) GetBodySizeVerbose() string {
	if x != nil {
		return x.BodySizeVerbose
	}
	return ""
}

func (x *HTTPFlow) GetRequestLength() int64 {
	if x != nil {
		return x.RequestLength
	}
	return 0
}

func (x *HTTPFlow) GetRequestSizeVerbose() string {
	if x != nil {
		return x.RequestSizeVerbose
	}
	return ""
}

func (x *HTTPFlow) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *HTTPFlow) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPFlow) GetGetParamsTotal() int64 {
	if x != nil {
		return x.GetParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetPostParamsTotal() int64 {
	if x != nil {
		return x.PostParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetCookieParamsTotal() int64 {
	if x != nil {
		return x.CookieParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HTTPFlow) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HTTPFlow) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *HTTPFlow) GetGetParams() []*FuzzableParam {
	if x != nil {
		return x.GetParams
	}
	return nil
}

func (x *HTTPFlow) GetPostParams() []*FuzzableParam {
	if x != nil {
		return x.PostParams
	}
	return nil
}

func (x *HTTPFlow) GetCookieParams() []*FuzzableParam {
	if x != nil {
		return x.CookieParams
	}
	return nil
}

func (x *HTTPFlow) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *HTTPFlow) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *HTTPFlow) GetHtmlTitle() string {
	if x != nil {
		return x.HtmlTitle
	}
	return ""
}

func (x *HTTPFlow) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *HTTPFlow) GetNoFixContentLength() bool {
	if x != nil {
		return x.NoFixContentLength
	}
	return false
}

func (x *HTTPFlow) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HTTPFlow) GetIsWebsocket() bool {
	if x != nil {
		return x.IsWebsocket
	}
	return false
}

func (x *HTTPFlow) GetWebsocketHash() string {
	if x != nil {
		return x.WebsocketHash
	}
	return ""
}

func (x *HTTPFlow) GetInvalidForUTF8Request() bool {
	if x != nil {
		return x.InvalidForUTF8Request
	}
	return false
}

func (x *HTTPFlow) GetInvalidForUTF8Response() bool {
	if x != nil {
		return x.InvalidForUTF8Response
	}
	return false
}

func (x *HTTPFlow) GetRawRequestBodyBase64() string {
	if x != nil {
		return x.RawRequestBodyBase64
	}
	return ""
}

func (x *HTTPFlow) GetRawResponseBodyBase64() string {
	if x != nil {
		return x.RawResponseBodyBase64
	}
	return ""
}

func (x *HTTPFlow) GetSafeHTTPRequest() string {
	if x != nil {
		return x.SafeHTTPRequest
	}
	return ""
}

func (x *HTTPFlow) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *HTTPFlow) GetRootDomains() []string {
	if x != nil {
		return x.RootDomains
	}
	return nil
}

func (x *HTTPFlow) GetJsonObjects() []string {
	if x != nil {
		return x.JsonObjects
	}
	return nil
}

func (x *HTTPFlow) GetIsReadTooSlowResponse() bool {
	if x != nil {
		return x.IsReadTooSlowResponse
	}
	return false
}

func (x *HTTPFlow) GetIsTooLargeResponse() bool {
	if x != nil {
		return x.IsTooLargeResponse
	}
	return false
}

func (x *HTTPFlow) GetTooLargeResponseHeaderFile() string {
	if x != nil {
		return x.TooLargeResponseHeaderFile
	}
	return ""
}

func (x *HTTPFlow) GetTooLargeResponseBodyFile() string {
	if x != nil {
		return x.TooLargeResponseBodyFile
	}
	return ""
}

func (x *HTTPFlow) GetDisableRenderStyles() bool {
	if x != nil {
		return x.DisableRenderStyles
	}
	return false
}

func (x *HTTPFlow) GetPayloads() []string {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *HTTPFlow) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *HTTPFlow) GetHiddenIndex() string {
	if x != nil {
		return x.HiddenIndex
	}
	return ""
}

func (x *HTTPFlow) GetFromPlugin() string {
	if x != nil {
		return x.FromPlugin
	}
	return ""
}

func (x *HTTPFlow) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type FuzzableParam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      string                 `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	ParamName     string                 `protobuf:"bytes,2,opt,name=ParamName,proto3" json:"ParamName,omitempty"`
	OriginValue   []byte                 `protobuf:"bytes,3,opt,name=OriginValue,proto3" json:"OriginValue,omitempty"`
	AutoTemplate  []byte                 `protobuf:"bytes,4,opt,name=AutoTemplate,proto3" json:"AutoTemplate,omitempty"`
	IsHTTPS       bool                   `protobuf:"varint,5,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzzableParam) Reset() {
	*x = FuzzableParam{}
	mi := &file_yakgrpc_proto_msgTypes[628]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzableParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzableParam) ProtoMessage() {}

func (x *FuzzableParam) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[628]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzableParam.ProtoReflect.Descriptor instead.
func (*FuzzableParam) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{628}
}

func (x *FuzzableParam) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *FuzzableParam) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *FuzzableParam) GetOriginValue() []byte {
	if x != nil {
		return x.OriginValue
	}
	return nil
}

func (x *FuzzableParam) GetAutoTemplate() []byte {
	if x != nil {
		return x.AutoTemplate
	}
	return nil
}

func (x *FuzzableParam) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

type GetHTTPFlowBodyByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"` // 第一个响应里才有，应该保存的文件名
	EOF           bool                   `protobuf:"varint,3,opt,name=EOF,proto3" json:"EOF,omitempty"`          // 是否是最后一个包
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHTTPFlowBodyByIdResponse) Reset() {
	*x = GetHTTPFlowBodyByIdResponse{}
	mi := &file_yakgrpc_proto_msgTypes[629]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHTTPFlowBodyByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowBodyByIdResponse) ProtoMessage() {}

func (x *GetHTTPFlowBodyByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[629]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowBodyByIdResponse.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowBodyByIdResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{629}
}

func (x *GetHTTPFlowBodyByIdResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetHTTPFlowBodyByIdResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GetHTTPFlowBodyByIdResponse) GetEOF() bool {
	if x != nil {
		return x.EOF
	}
	return false
}

type QueryHTTPFlowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*HTTPFlow            `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHTTPFlowResponse) Reset() {
	*x = QueryHTTPFlowResponse{}
	mi := &file_yakgrpc_proto_msgTypes[630]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHTTPFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowResponse) ProtoMessage() {}

func (x *QueryHTTPFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[630]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{630}
}

func (x *QueryHTTPFlowResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFlowResponse) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHTTPFlowResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type HTTPFlowsFieldGroupRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RefreshRequest bool                   `protobuf:"varint,1,opt,name=RefreshRequest,proto3" json:"RefreshRequest,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HTTPFlowsFieldGroupRequest) Reset() {
	*x = HTTPFlowsFieldGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[631]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowsFieldGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsFieldGroupRequest) ProtoMessage() {}

func (x *HTTPFlowsFieldGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[631]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsFieldGroupRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsFieldGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{631}
}

func (x *HTTPFlowsFieldGroupRequest) GetRefreshRequest() bool {
	if x != nil {
		return x.RefreshRequest
	}
	return false
}

type HTTPFlowsFieldGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          []*TagsCode            `protobuf:"bytes,1,rep,name=Tags,proto3" json:"Tags,omitempty"`
	StatusCode    []*TagsCode            `protobuf:"bytes,2,rep,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPFlowsFieldGroupResponse) Reset() {
	*x = HTTPFlowsFieldGroupResponse{}
	mi := &file_yakgrpc_proto_msgTypes[632]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowsFieldGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsFieldGroupResponse) ProtoMessage() {}

func (x *HTTPFlowsFieldGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[632]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsFieldGroupResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowsFieldGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{632}
}

func (x *HTTPFlowsFieldGroupResponse) GetTags() []*TagsCode {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HTTPFlowsFieldGroupResponse) GetStatusCode() []*TagsCode {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

type HTTPFlowsShareRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	LimitNum      int64                  `protobuf:"varint,2,opt,name=LimitNum,proto3" json:"LimitNum,omitempty"`
	ExpiredTime   int64                  `protobuf:"varint,3,opt,name=ExpiredTime,proto3" json:"ExpiredTime,omitempty"`
	Pwd           bool                   `protobuf:"varint,4,opt,name=Pwd,proto3" json:"Pwd,omitempty"`
	ShareId       string                 `protobuf:"bytes,5,opt,name=ShareId,proto3" json:"ShareId,omitempty"`
	Token         string                 `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	Module        string                 `protobuf:"bytes,7,opt,name=Module,proto3" json:"Module,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPFlowsShareRequest) Reset() {
	*x = HTTPFlowsShareRequest{}
	mi := &file_yakgrpc_proto_msgTypes[633]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowsShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsShareRequest) ProtoMessage() {}

func (x *HTTPFlowsShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[633]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsShareRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsShareRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{633}
}

func (x *HTTPFlowsShareRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *HTTPFlowsShareRequest) GetLimitNum() int64 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *HTTPFlowsShareRequest) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *HTTPFlowsShareRequest) GetPwd() bool {
	if x != nil {
		return x.Pwd
	}
	return false
}

func (x *HTTPFlowsShareRequest) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *HTTPFlowsShareRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HTTPFlowsShareRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type HTTPFlowsShareResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShareId       string                 `protobuf:"bytes,1,opt,name=ShareId,proto3" json:"ShareId,omitempty"`
	ExtractCode   string                 `protobuf:"bytes,2,opt,name=ExtractCode,proto3" json:"ExtractCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPFlowsShareResponse) Reset() {
	*x = HTTPFlowsShareResponse{}
	mi := &file_yakgrpc_proto_msgTypes[634]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowsShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsShareResponse) ProtoMessage() {}

func (x *HTTPFlowsShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[634]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsShareResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowsShareResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{634}
}

func (x *HTTPFlowsShareResponse) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *HTTPFlowsShareResponse) GetExtractCode() string {
	if x != nil {
		return x.ExtractCode
	}
	return ""
}

type HTTPFlowsExtractRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ShareExtractContent string                 `protobuf:"bytes,1,opt,name=ShareExtractContent,proto3" json:"ShareExtractContent,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HTTPFlowsExtractRequest) Reset() {
	*x = HTTPFlowsExtractRequest{}
	mi := &file_yakgrpc_proto_msgTypes[635]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowsExtractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsExtractRequest) ProtoMessage() {}

func (x *HTTPFlowsExtractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[635]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsExtractRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsExtractRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{635}
}

func (x *HTTPFlowsExtractRequest) GetShareExtractContent() string {
	if x != nil {
		return x.ShareExtractContent
	}
	return ""
}

type TagsCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagsCode) Reset() {
	*x = TagsCode{}
	mi := &file_yakgrpc_proto_msgTypes[636]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsCode) ProtoMessage() {}

func (x *TagsCode) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[636]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsCode.ProtoReflect.Descriptor instead.
func (*TagsCode) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{636}
}

func (x *TagsCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TagsCode) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type WebsocketFlows struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*WebsocketFlow       `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebsocketFlows) Reset() {
	*x = WebsocketFlows{}
	mi := &file_yakgrpc_proto_msgTypes[637]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebsocketFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketFlows) ProtoMessage() {}

func (x *WebsocketFlows) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[637]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketFlows.ProtoReflect.Descriptor instead.
func (*WebsocketFlows) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{637}
}

func (x *WebsocketFlows) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *WebsocketFlows) GetData() []*WebsocketFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebsocketFlows) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type WebsocketFlow struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ID                   int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedAt            int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	WebsocketRequestHash string                 `protobuf:"bytes,3,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
	FrameIndex           int64                  `protobuf:"varint,4,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"`
	FromServer           bool                   `protobuf:"varint,5,opt,name=FromServer,proto3" json:"FromServer,omitempty"`
	MessageType          string                 `protobuf:"bytes,6,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Data                 []byte                 `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
	DataSizeVerbose      string                 `protobuf:"bytes,8,opt,name=DataSizeVerbose,proto3" json:"DataSizeVerbose,omitempty"`
	DataLength           int64                  `protobuf:"varint,9,opt,name=DataLength,proto3" json:"DataLength,omitempty"`
	DataVerbose          string                 `protobuf:"bytes,10,opt,name=DataVerbose,proto3" json:"DataVerbose,omitempty"`
	IsJson               bool                   `protobuf:"varint,11,opt,name=IsJson,proto3" json:"IsJson,omitempty"`
	IsProtobuf           bool                   `protobuf:"varint,12,opt,name=IsProtobuf,proto3" json:"IsProtobuf,omitempty"`
	Tags                 string                 `protobuf:"bytes,13,opt,name=Tags,proto3" json:"Tags,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *WebsocketFlow) Reset() {
	*x = WebsocketFlow{}
	mi := &file_yakgrpc_proto_msgTypes[638]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebsocketFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketFlow) ProtoMessage() {}

func (x *WebsocketFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[638]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketFlow.ProtoReflect.Descriptor instead.
func (*WebsocketFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{638}
}

func (x *WebsocketFlow) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WebsocketFlow) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WebsocketFlow) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

func (x *WebsocketFlow) GetFrameIndex() int64 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *WebsocketFlow) GetFromServer() bool {
	if x != nil {
		return x.FromServer
	}
	return false
}

func (x *WebsocketFlow) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *WebsocketFlow) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebsocketFlow) GetDataSizeVerbose() string {
	if x != nil {
		return x.DataSizeVerbose
	}
	return ""
}

func (x *WebsocketFlow) GetDataLength() int64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *WebsocketFlow) GetDataVerbose() string {
	if x != nil {
		return x.DataVerbose
	}
	return ""
}

func (x *WebsocketFlow) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *WebsocketFlow) GetIsProtobuf() bool {
	if x != nil {
		return x.IsProtobuf
	}
	return false
}

func (x *WebsocketFlow) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

type SetMITMFilterRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IncludeHostname     []string               `protobuf:"bytes,7,rep,name=includeHostname,proto3" json:"includeHostname,omitempty"`
	ExcludeHostname     []string               `protobuf:"bytes,8,rep,name=excludeHostname,proto3" json:"excludeHostname,omitempty"`
	ExcludeSuffix       []string               `protobuf:"bytes,9,rep,name=excludeSuffix,proto3" json:"excludeSuffix,omitempty"`
	IncludeSuffix       []string               `protobuf:"bytes,10,rep,name=includeSuffix,proto3" json:"includeSuffix,omitempty"`
	ExcludeMethod       []string               `protobuf:"bytes,11,rep,name=excludeMethod,proto3" json:"excludeMethod,omitempty"`
	ExcludeContentTypes []string               `protobuf:"bytes,40,rep,name=excludeContentTypes,proto3" json:"excludeContentTypes,omitempty"`
	ExcludeUri          []string               `protobuf:"bytes,43,rep,name=excludeUri,proto3" json:"excludeUri,omitempty"`
	IncludeUri          []string               `protobuf:"bytes,44,rep,name=includeUri,proto3" json:"includeUri,omitempty"`
	FilterData          *MITMFilterData        `protobuf:"bytes,1,opt,name=FilterData,proto3" json:"FilterData,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SetMITMFilterRequest) Reset() {
	*x = SetMITMFilterRequest{}
	mi := &file_yakgrpc_proto_msgTypes[639]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMITMFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMITMFilterRequest) ProtoMessage() {}

func (x *SetMITMFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[639]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMITMFilterRequest.ProtoReflect.Descriptor instead.
func (*SetMITMFilterRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{639}
}

func (x *SetMITMFilterRequest) GetIncludeHostname() []string {
	if x != nil {
		return x.IncludeHostname
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeHostname() []string {
	if x != nil {
		return x.ExcludeHostname
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *SetMITMFilterRequest) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeMethod() []string {
	if x != nil {
		return x.ExcludeMethod
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeContentTypes() []string {
	if x != nil {
		return x.ExcludeContentTypes
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeUri() []string {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *SetMITMFilterRequest) GetIncludeUri() []string {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *SetMITMFilterRequest) GetFilterData() *MITMFilterData {
	if x != nil {
		return x.FilterData
	}
	return nil
}

type SetMITMFilterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetMITMFilterResponse) Reset() {
	*x = SetMITMFilterResponse{}
	mi := &file_yakgrpc_proto_msgTypes[640]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMITMFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMITMFilterResponse) ProtoMessage() {}

func (x *SetMITMFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[640]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMITMFilterResponse.ProtoReflect.Descriptor instead.
func (*SetMITMFilterResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{640}
}

// 中间人劫持的问题
type MITMRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id 54
	Request         []byte `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response        []byte `protobuf:"bytes,111,opt,name=response,proto3" json:"response,omitempty"`
	Host            string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	DownstreamProxy string `protobuf:"bytes,4,opt,name=downstreamProxy,proto3" json:"downstreamProxy,omitempty"`
	// 用来保证不要串台
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// 这个是响应劫持需要注意的字段。保证不串台
	ResponseId int64 `protobuf:"varint,16,opt,name=responseId,proto3" json:"responseId,omitempty"`
	Recover    bool  `protobuf:"varint,6,opt,name=recover,proto3" json:"recover,omitempty"`
	// 过滤器
	IncludeHostname      []string        `protobuf:"bytes,7,rep,name=includeHostname,proto3" json:"includeHostname,omitempty"`
	ExcludeHostname      []string        `protobuf:"bytes,8,rep,name=excludeHostname,proto3" json:"excludeHostname,omitempty"`
	ExcludeSuffix        []string        `protobuf:"bytes,9,rep,name=excludeSuffix,proto3" json:"excludeSuffix,omitempty"`
	IncludeSuffix        []string        `protobuf:"bytes,10,rep,name=includeSuffix,proto3" json:"includeSuffix,omitempty"`
	ExcludeMethod        []string        `protobuf:"bytes,11,rep,name=excludeMethod,proto3" json:"excludeMethod,omitempty"`
	ExcludeContentTypes  []string        `protobuf:"bytes,40,rep,name=excludeContentTypes,proto3" json:"excludeContentTypes,omitempty"`
	ExcludeUri           []string        `protobuf:"bytes,43,rep,name=excludeUri,proto3" json:"excludeUri,omitempty"`
	IncludeUri           []string        `protobuf:"bytes,44,rep,name=includeUri,proto3" json:"includeUri,omitempty"`
	FilterData           *MITMFilterData `protobuf:"bytes,63,opt,name=FilterData,proto3" json:"FilterData,omitempty"`
	UpdateFilter         bool            `protobuf:"varint,12,opt,name=updateFilter,proto3" json:"updateFilter,omitempty"`
	HijackResponse       bool            `protobuf:"varint,13,opt,name=hijackResponse,proto3" json:"hijackResponse,omitempty"`
	CancelhijackResponse bool            `protobuf:"varint,54,opt,name=cancelhijackResponse,proto3" json:"cancelhijackResponse,omitempty"`
	// 手动丢包
	Drop bool `protobuf:"varint,14,opt,name=drop,proto3" json:"drop,omitempty"`
	// 原封不动放行
	Forward bool `protobuf:"varint,15,opt,name=forward,proto3" json:"forward,omitempty"`
	// mitm plugin 中间人插件，本质上是一段 Yak 代码
	SetYakScript     bool             `protobuf:"varint,21,opt,name=setYakScript,proto3" json:"setYakScript,omitempty"`
	YakScriptParams  []*ExecParamItem `protobuf:"bytes,22,rep,name=yakScriptParams,proto3" json:"yakScriptParams,omitempty"`
	YakScriptID      int64            `protobuf:"varint,23,opt,name=yakScriptID,proto3" json:"yakScriptID,omitempty"`
	YakScriptContent string           `protobuf:"bytes,25,opt,name=yakScriptContent,proto3" json:"yakScriptContent,omitempty"`
	// 查看当前启用插件
	GetCurrentHook bool `protobuf:"varint,30,opt,name=getCurrentHook,proto3" json:"getCurrentHook,omitempty"`
	// 移除插件
	RemoveHook       bool              `protobuf:"varint,31,opt,name=removeHook,proto3" json:"removeHook,omitempty"` // 当这个为 true 的时候，将会
	RemoveHookParams *RemoveHookParams `protobuf:"bytes,32,opt,name=removeHookParams,proto3" json:"removeHookParams,omitempty"`
	// 设置自动转发
	SetAutoForward   bool `protobuf:"varint,33,opt,name=setAutoForward,proto3" json:"setAutoForward,omitempty"`
	AutoForwardValue bool `protobuf:"varint,34,opt,name=autoForwardValue,proto3" json:"autoForwardValue,omitempty"`
	// 设置清除上下文
	SetClearMITMPluginContext bool `protobuf:"varint,35,opt,name=setClearMITMPluginContext,proto3" json:"setClearMITMPluginContext,omitempty"`
	// 设置启用插件模式，自动加载所有主插件。
	// 如果不设置 initPluginNames 的话，启动所有默认插件
	SetPluginMode   bool     `protobuf:"varint,36,opt,name=setPluginMode,proto3" json:"setPluginMode,omitempty"`
	InitPluginNames []string `protobuf:"bytes,37,rep,name=initPluginNames,proto3" json:"initPluginNames,omitempty"`
	// 设置规则
	SetContentReplacers bool                   `protobuf:"varint,38,opt,name=setContentReplacers,proto3" json:"setContentReplacers,omitempty"`
	Replacers           []*MITMContentReplacer `protobuf:"bytes,39,rep,name=replacers,proto3" json:"replacers,omitempty"`
	// 恢复 filter, 防止用户删除了全部的 filter
	SetResetFilter bool `protobuf:"varint,41,opt,name=setResetFilter,proto3" json:"setResetFilter,omitempty"`
	// enable h2
	EnableHttp2  bool           `protobuf:"varint,42,opt,name=enableHttp2,proto3" json:"enableHttp2,omitempty"`
	Certificates []*Certificate `protobuf:"bytes,45,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// gmtls config
	EnableGMTLS     bool `protobuf:"varint,46,opt,name=enableGMTLS,proto3" json:"enableGMTLS,omitempty"`
	OnlyEnableGMTLS bool `protobuf:"varint,47,opt,name=onlyEnableGMTLS,proto3" json:"onlyEnableGMTLS,omitempty"`
	PreferGMTLS     bool `protobuf:"varint,48,opt,name=preferGMTLS,proto3" json:"preferGMTLS,omitempty"`
	// 代理用户名和密码
	ProxyUsername   string    `protobuf:"bytes,49,opt,name=proxyUsername,proto3" json:"proxyUsername,omitempty"`
	ProxyPassword   string    `protobuf:"bytes,50,opt,name=proxyPassword,proto3" json:"proxyPassword,omitempty"`
	EnableProxyAuth bool      `protobuf:"varint,51,opt,name=enableProxyAuth,proto3" json:"enableProxyAuth,omitempty"`
	DnsServers      []string  `protobuf:"bytes,52,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
	Hosts           []*KVPair `protobuf:"bytes,53,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// max content-length
	MaxContentLength int64 `protobuf:"varint,55,opt,name=maxContentLength,proto3" json:"maxContentLength,omitempty"`
	MaxReadWaitTime  int64 `protobuf:"varint,67,opt,name=MaxReadWaitTime,proto3" json:"MaxReadWaitTime,omitempty"`
	// 提前为此次flow设置tags
	Tags []string `protobuf:"bytes,56,rep,name=Tags,proto3" json:"Tags,omitempty"`
	// 过滤 ws
	FilterWebsocket       bool `protobuf:"varint,57,opt,name=filterWebsocket,proto3" json:"filterWebsocket,omitempty"`
	UpdateFilterWebsocket bool `protobuf:"varint,58,opt,name=updateFilterWebsocket,proto3" json:"updateFilterWebsocket,omitempty"`
	// force close
	ForceDisableKeepAlive bool `protobuf:"varint,59,opt,name=ForceDisableKeepAlive,proto3" json:"ForceDisableKeepAlive,omitempty"`
	// runtime change proxy
	SetDownstreamProxy bool `protobuf:"varint,60,opt,name=SetDownstreamProxy,proto3" json:"SetDownstreamProxy,omitempty"`
	// disable MITM CA Cert Page
	DisableCACertPage bool `protobuf:"varint,61,opt,name=DisableCACertPage,proto3" json:"DisableCACertPage,omitempty"`
	// random JA3 fingerprint
	RandomJA3 bool `protobuf:"varint,62,opt,name=RandomJA3,proto3" json:"RandomJA3,omitempty"`
	// disable websocket compression
	DisableWebsocketCompression bool `protobuf:"varint,64,opt,name=DisableWebsocketCompression,proto3" json:"DisableWebsocketCompression,omitempty"`
	// hijack filter
	HijackFilterData   *MITMFilterData `protobuf:"bytes,65,opt,name=HijackFilterData,proto3" json:"HijackFilterData,omitempty"`
	UpdateHijackFilter bool            `protobuf:"varint,66,opt,name=updateHijackFilter,proto3" json:"updateHijackFilter,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MITMRequest) Reset() {
	*x = MITMRequest{}
	mi := &file_yakgrpc_proto_msgTypes[641]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MITMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMRequest) ProtoMessage() {}

func (x *MITMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[641]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMRequest.ProtoReflect.Descriptor instead.
func (*MITMRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{641}
}

func (x *MITMRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MITMRequest) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MITMRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MITMRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MITMRequest) GetDownstreamProxy() string {
	if x != nil {
		return x.DownstreamProxy
	}
	return ""
}

func (x *MITMRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MITMRequest) GetResponseId() int64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *MITMRequest) GetRecover() bool {
	if x != nil {
		return x.Recover
	}
	return false
}

func (x *MITMRequest) GetIncludeHostname() []string {
	if x != nil {
		return x.IncludeHostname
	}
	return nil
}

func (x *MITMRequest) GetExcludeHostname() []string {
	if x != nil {
		return x.ExcludeHostname
	}
	return nil
}

func (x *MITMRequest) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *MITMRequest) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *MITMRequest) GetExcludeMethod() []string {
	if x != nil {
		return x.ExcludeMethod
	}
	return nil
}

func (x *MITMRequest) GetExcludeContentTypes() []string {
	if x != nil {
		return x.ExcludeContentTypes
	}
	return nil
}

func (x *MITMRequest) GetExcludeUri() []string {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *MITMRequest) GetIncludeUri() []string {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *MITMRequest) GetFilterData() *MITMFilterData {
	if x != nil {
		return x.FilterData
	}
	return nil
}

func (x *MITMRequest) GetUpdateFilter() bool {
	if x != nil {
		return x.UpdateFilter
	}
	return false
}

func (x *MITMRequest) GetHijackResponse() bool {
	if x != nil {
		return x.HijackResponse
	}
	return false
}

func (x *MITMRequest) GetCancelhijackResponse() bool {
	if x != nil {
		return x.CancelhijackResponse
	}
	return false
}

func (x *MITMRequest) GetDrop() bool {
	if x != nil {
		return x.Drop
	}
	return false
}

func (x *MITMRequest) GetForward() bool {
	if x != nil {
		return x.Forward
	}
	return false
}

func (x *MITMRequest) GetSetYakScript() bool {
	if x != nil {
		return x.SetYakScript
	}
	return false
}

func (x *MITMRequest) GetYakScriptParams() []*ExecParamItem {
	if x != nil {
		return x.YakScriptParams
	}
	return nil
}

func (x *MITMRequest) GetYakScriptID() int64 {
	if x != nil {
		return x.YakScriptID
	}
	return 0
}

func (x *MITMRequest) GetYakScriptContent() string {
	if x != nil {
		return x.YakScriptContent
	}
	return ""
}

func (x *MITMRequest) GetGetCurrentHook() bool {
	if x != nil {
		return x.GetCurrentHook
	}
	return false
}

func (x *MITMRequest) GetRemoveHook() bool {
	if x != nil {
		return x.RemoveHook
	}
	return false
}

func (x *MITMRequest) GetRemoveHookParams() *RemoveHookParams {
	if x != nil {
		return x.RemoveHookParams
	}
	return nil
}

func (x *MITMRequest) GetSetAutoForward() bool {
	if x != nil {
		return x.SetAutoForward
	}
	return false
}

func (x *MITMRequest) GetAutoForwardValue() bool {
	if x != nil {
		return x.AutoForwardValue
	}
	return false
}

func (x *MITMRequest) GetSetClearMITMPluginContext() bool {
	if x != nil {
		return x.SetClearMITMPluginContext
	}
	return false
}

func (x *MITMRequest) GetSetPluginMode() bool {
	if x != nil {
		return x.SetPluginMode
	}
	return false
}

func (x *MITMRequest) GetInitPluginNames() []string {
	if x != nil {
		return x.InitPluginNames
	}
	return nil
}

func (x *MITMRequest) GetSetContentReplacers() bool {
	if x != nil {
		return x.SetContentReplacers
	}
	return false
}

func (x *MITMRequest) GetReplacers() []*MITMContentReplacer {
	if x != nil {
		return x.Replacers
	}
	return nil
}

func (x *MITMRequest) GetSetResetFilter() bool {
	if x != nil {
		return x.SetResetFilter
	}
	return false
}

func (x *MITMRequest) GetEnableHttp2() bool {
	if x != nil {
		return x.EnableHttp2
	}
	return false
}

func (x *MITMRequest) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *MITMRequest) GetEnableGMTLS() bool {
	if x != nil {
		return x.EnableGMTLS
	}
	return false
}

func (x *MITMRequest) GetOnlyEnableGMTLS() bool {
	if x != nil {
		return x.OnlyEnableGMTLS
	}
	return false
}

func (x *MITMRequest) GetPreferGMTLS() bool {
	if x != nil {
		return x.PreferGMTLS
	}
	return false
}

func (x *MITMRequest) GetProxyUsername() string {
	if x != nil {
		return x.ProxyUsername
	}
	return ""
}

func (x *MITMRequest) GetProxyPassword() string {
	if x != nil {
		return x.ProxyPassword
	}
	return ""
}

func (x *MITMRequest) GetEnableProxyAuth() bool {
	if x != nil {
		return x.EnableProxyAuth
	}
	return false
}

func (x *MITMRequest) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *MITMRequest) GetHosts() []*KVPair {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *MITMRequest) GetMaxContentLength() int64 {
	if x != nil {
		return x.MaxContentLength
	}
	return 0
}

func (x *MITMRequest) GetMaxReadWaitTime() int64 {
	if x != nil {
		return x.MaxReadWaitTime
	}
	return 0
}

func (x *MITMRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MITMRequest) GetFilterWebsocket() bool {
	if x != nil {
		return x.FilterWebsocket
	}
	return false
}

func (x *MITMRequest) GetUpdateFilterWebsocket() bool {
	if x != nil {
		return x.UpdateFilterWebsocket
	}
	return false
}

func (x *MITMRequest) GetForceDisableKeepAlive() bool {
	if x != nil {
		return x.ForceDisableKeepAlive
	}
	return false
}

func (x *MITMRequest) GetSetDownstreamProxy() bool {
	if x != nil {
		return x.SetDownstreamProxy
	}
	return false
}

func (x *MITMRequest) GetDisableCACertPage() bool {
	if x != nil {
		return x.DisableCACertPage
	}
	return false
}

func (x *MITMRequest) GetRandomJA3() bool {
	if x != nil {
		return x.RandomJA3
	}
	return false
}

func (x *MITMRequest) GetDisableWebsocketCompression() bool {
	if x != nil {
		return x.DisableWebsocketCompression
	}
	return false
}

func (x *MITMRequest) GetHijackFilterData() *MITMFilterData {
	if x != nil {
		return x.HijackFilterData
	}
	return nil
}

func (x *MITMRequest) GetUpdateHijackFilter() bool {
	if x != nil {
		return x.UpdateHijackFilter
	}
	return false
}

type FilterDataItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatcherType   string                 `protobuf:"bytes,1,opt,name=MatcherType,proto3" json:"MatcherType,omitempty"`
	Group         []string               `protobuf:"bytes,2,rep,name=Group,proto3" json:"Group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterDataItem) Reset() {
	*x = FilterDataItem{}
	mi := &file_yakgrpc_proto_msgTypes[642]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterDataItem) ProtoMessage() {}

func (x *FilterDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[642]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterDataItem.ProtoReflect.Descriptor instead.
func (*FilterDataItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{642}
}

func (x *FilterDataItem) GetMatcherType() string {
	if x != nil {
		return x.MatcherType
	}
	return ""
}

func (x *FilterDataItem) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

type MITMFilterData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IncludeHostnames []*FilterDataItem      `protobuf:"bytes,1,rep,name=IncludeHostnames,proto3" json:"IncludeHostnames,omitempty"`
	ExcludeHostnames []*FilterDataItem      `protobuf:"bytes,2,rep,name=ExcludeHostnames,proto3" json:"ExcludeHostnames,omitempty"`
	IncludeSuffix    []*FilterDataItem      `protobuf:"bytes,3,rep,name=IncludeSuffix,proto3" json:"IncludeSuffix,omitempty"`
	ExcludeSuffix    []*FilterDataItem      `protobuf:"bytes,4,rep,name=ExcludeSuffix,proto3" json:"ExcludeSuffix,omitempty"`
	IncludeUri       []*FilterDataItem      `protobuf:"bytes,5,rep,name=IncludeUri,proto3" json:"IncludeUri,omitempty"`
	ExcludeUri       []*FilterDataItem      `protobuf:"bytes,6,rep,name=ExcludeUri,proto3" json:"ExcludeUri,omitempty"`
	ExcludeMethods   []*FilterDataItem      `protobuf:"bytes,7,rep,name=ExcludeMethods,proto3" json:"ExcludeMethods,omitempty"`
	ExcludeMIME      []*FilterDataItem      `protobuf:"bytes,8,rep,name=ExcludeMIME,proto3" json:"ExcludeMIME,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MITMFilterData) Reset() {
	*x = MITMFilterData{}
	mi := &file_yakgrpc_proto_msgTypes[643]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MITMFilterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMFilterData) ProtoMessage() {}

func (x *MITMFilterData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[643]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMFilterData.ProtoReflect.Descriptor instead.
func (*MITMFilterData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{643}
}

func (x *MITMFilterData) GetIncludeHostnames() []*FilterDataItem {
	if x != nil {
		return x.IncludeHostnames
	}
	return nil
}

func (x *MITMFilterData) GetExcludeHostnames() []*FilterDataItem {
	if x != nil {
		return x.ExcludeHostnames
	}
	return nil
}

func (x *MITMFilterData) GetIncludeSuffix() []*FilterDataItem {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *MITMFilterData) GetExcludeSuffix() []*FilterDataItem {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *MITMFilterData) GetIncludeUri() []*FilterDataItem {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *MITMFilterData) GetExcludeUri() []*FilterDataItem {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *MITMFilterData) GetExcludeMethods() []*FilterDataItem {
	if x != nil {
		return x.ExcludeMethods
	}
	return nil
}

func (x *MITMFilterData) GetExcludeMIME() []*FilterDataItem {
	if x != nil {
		return x.ExcludeMIME
	}
	return nil
}

type Certificate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CrtPem         []byte                 `protobuf:"bytes,1,opt,name=CrtPem,proto3" json:"CrtPem,omitempty"`
	KeyPem         []byte                 `protobuf:"bytes,2,opt,name=KeyPem,proto3" json:"KeyPem,omitempty"`
	CaCertificates [][]byte               `protobuf:"bytes,3,rep,name=CaCertificates,proto3" json:"CaCertificates,omitempty"`
	// pkcs12path need a .p12 or .pfx file
	Pkcs12Bytes    []byte `protobuf:"bytes,4,opt,name=Pkcs12Bytes,proto3" json:"Pkcs12Bytes,omitempty"`
	Pkcs12Password []byte `protobuf:"bytes,5,opt,name=Pkcs12Password,proto3" json:"Pkcs12Password,omitempty"`
	Host           string `protobuf:"bytes,6,opt,name=Host,proto3" json:"Host,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_yakgrpc_proto_msgTypes[644]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[644]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{644}
}

func (x *Certificate) GetCrtPem() []byte {
	if x != nil {
		return x.CrtPem
	}
	return nil
}

func (x *Certificate) GetKeyPem() []byte {
	if x != nil {
		return x.KeyPem
	}
	return nil
}

func (x *Certificate) GetCaCertificates() [][]byte {
	if x != nil {
		return x.CaCertificates
	}
	return nil
}

func (x *Certificate) GetPkcs12Bytes() []byte {
	if x != nil {
		return x.Pkcs12Bytes
	}
	return nil
}

func (x *Certificate) GetPkcs12Password() []byte {
	if x != nil {
		return x.Pkcs12Password
	}
	return nil
}

func (x *Certificate) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type MITMContentReplacer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 如果是正则的话，就把匹配到的内容替换成对应结果
	// 优先 Golang 原生规则
	// 然后再是 Re2 规则
	// 然后子字符串
	Rule string `protobuf:"bytes,1,opt,name=Rule,proto3" json:"Rule,omitempty"`
	// 这个功能意义在于，不要替代内容，仅标注颜色（敏感内容）
	NoReplace bool `protobuf:"varint,2,opt,name=NoReplace,proto3" json:"NoReplace,omitempty"`
	// 这里保存对应结果
	Result string `protobuf:"bytes,3,opt,name=Result,proto3" json:"Result,omitempty"`
	// 选择替换之后的颜色
	Color string `protobuf:"bytes,4,opt,name=Color,proto3" json:"Color,omitempty"`
	// 生效内容：默认对 body 生效
	EnableForRequest  bool `protobuf:"varint,5,opt,name=EnableForRequest,proto3" json:"EnableForRequest,omitempty"`
	EnableForResponse bool `protobuf:"varint,6,opt,name=EnableForResponse,proto3" json:"EnableForResponse,omitempty"`
	EnableForHeader   bool `protobuf:"varint,9,opt,name=EnableForHeader,proto3" json:"EnableForHeader,omitempty"`
	EnableForBody     bool `protobuf:"varint,10,opt,name=EnableForBody,proto3" json:"EnableForBody,omitempty"`
	EnableForURI      bool `protobuf:"varint,15,opt,name=EnableForURI,proto3" json:"EnableForURI,omitempty"`
	// Index
	Index int32 `protobuf:"varint,7,opt,name=Index,proto3" json:"Index,omitempty"`
	// 额外标签，用于标注 flow
	ExtraTag []string `protobuf:"bytes,8,rep,name=ExtraTag,proto3" json:"ExtraTag,omitempty"`
	// 一键禁用启用全部
	Disabled bool `protobuf:"varint,11,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	// 展示名称，一般用于助记，不会有啥额外影响
	VerboseName string `protobuf:"bytes,12,opt,name=VerboseName,proto3" json:"VerboseName,omitempty"`
	// 为数据包新增 Header
	ExtraHeaders []*HTTPHeader        `protobuf:"bytes,13,rep,name=ExtraHeaders,proto3" json:"ExtraHeaders,omitempty"`
	ExtraCookies []*HTTPCookieSetting `protobuf:"bytes,14,rep,name=ExtraCookies,proto3" json:"ExtraCookies,omitempty"`
	// Action
	// 额外重复一次这个数据包（替换后的数据）
	// 只有替换数据
	ExtraRepeat bool `protobuf:"varint,16,opt,name=ExtraRepeat,proto3" json:"ExtraRepeat,omitempty"`
	// 匹配掉之后直接丢包
	Drop          bool    `protobuf:"varint,17,opt,name=Drop,proto3" json:"Drop,omitempty"`
	EffectiveURL  string  `protobuf:"bytes,18,opt,name=EffectiveURL,proto3" json:"EffectiveURL,omitempty"`
	RegexpGroups  []int64 `protobuf:"varint,19,rep,packed,name=RegexpGroups,proto3" json:"RegexpGroups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MITMContentReplacer) Reset() {
	*x = MITMContentReplacer{}
	mi := &file_yakgrpc_proto_msgTypes[645]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MITMContentReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMContentReplacer) ProtoMessage() {}

func (x *MITMContentReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[645]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMContentReplacer.ProtoReflect.Descriptor instead.
func (*MITMContentReplacer) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{645}
}

func (x *MITMContentReplacer) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *MITMContentReplacer) GetNoReplace() bool {
	if x != nil {
		return x.NoReplace
	}
	return false
}

func (x *MITMContentReplacer) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *MITMContentReplacer) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *MITMContentReplacer) GetEnableForRequest() bool {
	if x != nil {
		return x.EnableForRequest
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForResponse() bool {
	if x != nil {
		return x.EnableForResponse
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForHeader() bool {
	if x != nil {
		return x.EnableForHeader
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForBody() bool {
	if x != nil {
		return x.EnableForBody
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForURI() bool {
	if x != nil {
		return x.EnableForURI
	}
	return false
}

func (x *MITMContentReplacer) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MITMContentReplacer) GetExtraTag() []string {
	if x != nil {
		return x.ExtraTag
	}
	return nil
}

func (x *MITMContentReplacer) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *MITMContentReplacer) GetVerboseName() string {
	if x != nil {
		return x.VerboseName
	}
	return ""
}

func (x *MITMContentReplacer) GetExtraHeaders() []*HTTPHeader {
	if x != nil {
		return x.ExtraHeaders
	}
	return nil
}

func (x *MITMContentReplacer) GetExtraCookies() []*HTTPCookieSetting {
	if x != nil {
		return x.ExtraCookies
	}
	return nil
}

func (x *MITMContentReplacer) GetExtraRepeat() bool {
	if x != nil {
		return x.ExtraRepeat
	}
	return false
}

func (x *MITMContentReplacer) GetDrop() bool {
	if x != nil {
		return x.Drop
	}
	return false
}

func (x *MITMContentReplacer) GetEffectiveURL() string {
	if x != nil {
		return x.EffectiveURL
	}
	return ""
}

func (x *MITMContentReplacer) GetRegexpGroups() []int64 {
	if x != nil {
		return x.RegexpGroups
	}
	return nil
}

type RemoveHookParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClearAll      bool                   `protobuf:"varint,1,opt,name=ClearAll,proto3" json:"ClearAll,omitempty"`
	HookName      []string               `protobuf:"bytes,2,rep,name=HookName,proto3" json:"HookName,omitempty"`
	RemoveHookID  []string               `protobuf:"bytes,3,rep,name=RemoveHookID,proto3" json:"RemoveHookID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveHookParams) Reset() {
	*x = RemoveHookParams{}
	mi := &file_yakgrpc_proto_msgTypes[646]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveHookParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHookParams) ProtoMessage() {}

func (x *RemoveHookParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[646]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHookParams.ProtoReflect.Descriptor instead.
func (*RemoveHookParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{646}
}

func (x *RemoveHookParams) GetClearAll() bool {
	if x != nil {
		return x.ClearAll
	}
	return false
}

func (x *RemoveHookParams) GetHookName() []string {
	if x != nil {
		return x.HookName
	}
	return nil
}

func (x *RemoveHookParams) GetRemoveHookID() []string {
	if x != nil {
		return x.RemoveHookID
	}
	return nil
}

type MITMResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Request []byte                 `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// 劫持的是 HTTPS 吗？
	IsHttps bool   `protobuf:"varint,3,opt,name=isHttps,proto3" json:"isHttps,omitempty"`
	Url     string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// 和 Request 中的一一对应
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// 过滤器
	JustFilter          bool            `protobuf:"varint,16,opt,name=justFilter,proto3" json:"justFilter,omitempty"`
	IncludeHostname     []string        `protobuf:"bytes,17,rep,name=includeHostname,proto3" json:"includeHostname,omitempty"`
	ExcludeHostname     []string        `protobuf:"bytes,18,rep,name=excludeHostname,proto3" json:"excludeHostname,omitempty"`
	ExcludeSuffix       []string        `protobuf:"bytes,19,rep,name=excludeSuffix,proto3" json:"excludeSuffix,omitempty"`
	IncludeSuffix       []string        `protobuf:"bytes,110,rep,name=includeSuffix,proto3" json:"includeSuffix,omitempty"`
	ExcludeMethod       []string        `protobuf:"bytes,111,rep,name=excludeMethod,proto3" json:"excludeMethod,omitempty"`
	ExcludeContentTypes []string        `protobuf:"bytes,113,rep,name=excludeContentTypes,proto3" json:"excludeContentTypes,omitempty"`
	ExcludeUri          []string        `protobuf:"bytes,114,rep,name=excludeUri,proto3" json:"excludeUri,omitempty"`
	IncludeUri          []string        `protobuf:"bytes,115,rep,name=includeUri,proto3" json:"includeUri,omitempty"`
	FilterData          *MITMFilterData `protobuf:"bytes,116,opt,name=FilterData,proto3" json:"FilterData,omitempty"`
	// 替代规则的内容
	JustContentReplacer bool                   `protobuf:"varint,120,opt,name=justContentReplacer,proto3" json:"justContentReplacer,omitempty"`
	Replacers           []*MITMContentReplacer `protobuf:"bytes,121,rep,name=replacers,proto3" json:"replacers,omitempty"`
	// 刷新表格: 如果这个是 True 的话，那么不应该发送回劫持器，应该只发送刷新表格的信息
	Refresh         bool      `protobuf:"varint,2,opt,name=refresh,proto3" json:"refresh,omitempty"`
	HistoryHTTPFlow *HTTPFlow `protobuf:"bytes,22,opt,name=historyHTTPFlow,proto3" json:"historyHTTPFlow,omitempty"`
	ForResponse     bool      `protobuf:"varint,23,opt,name=forResponse,proto3" json:"forResponse,omitempty"`
	Response        []byte    `protobuf:"bytes,24,opt,name=response,proto3" json:"response,omitempty"`
	ResponseId      int64     `protobuf:"varint,26,opt,name=responseId,proto3" json:"responseId,omitempty"`
	// exec result
	HaveMessage    bool              `protobuf:"varint,27,opt,name=haveMessage,proto3" json:"haveMessage,omitempty"`
	Message        *ExecResult       `protobuf:"bytes,28,opt,name=message,proto3" json:"message,omitempty"`
	GetCurrentHook bool              `protobuf:"varint,30,opt,name=getCurrentHook,proto3" json:"getCurrentHook,omitempty"`
	Hooks          []*YakScriptHooks `protobuf:"bytes,31,rep,name=hooks,proto3" json:"hooks,omitempty"`
	RemoteAddr     string            `protobuf:"bytes,32,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	// 这里用来展示一些服务端通知，直接弹框就好
	HaveNotification    bool   `protobuf:"varint,34,opt,name=haveNotification,proto3" json:"haveNotification,omitempty"`
	NotificationContent []byte `protobuf:"bytes,33,opt,name=notificationContent,proto3" json:"notificationContent,omitempty"`
	// 这两个标志是用来设置 MITM 加载状态的，用于服务端控制用户端的 "加载中"
	HaveLoadingSetter bool `protobuf:"varint,35,opt,name=haveLoadingSetter,proto3" json:"haveLoadingSetter,omitempty"`
	LoadingFlag       bool `protobuf:"varint,36,opt,name=loadingFlag,proto3" json:"loadingFlag,omitempty"`
	// Websocket 相关配置
	IsWebsocket     bool     `protobuf:"varint,37,opt,name=isWebsocket,proto3" json:"isWebsocket,omitempty"`
	WebsocketEncode []string `protobuf:"bytes,38,rep,name=websocketEncode,proto3" json:"websocketEncode,omitempty"`
	// Websocket 传输的数据
	Payload []byte `protobuf:"bytes,39,opt,name=Payload,proto3" json:"Payload,omitempty"`
	// 响应跟踪信息
	TraceInfo     *TraceInfo `protobuf:"bytes,40,opt,name=traceInfo,proto3" json:"traceInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MITMResponse) Reset() {
	*x = MITMResponse{}
	mi := &file_yakgrpc_proto_msgTypes[647]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MITMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMResponse) ProtoMessage() {}

func (x *MITMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[647]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMResponse.ProtoReflect.Descriptor instead.
func (*MITMResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{647}
}

func (x *MITMResponse) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MITMResponse) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *MITMResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MITMResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MITMResponse) GetJustFilter() bool {
	if x != nil {
		return x.JustFilter
	}
	return false
}

func (x *MITMResponse) GetIncludeHostname() []string {
	if x != nil {
		return x.IncludeHostname
	}
	return nil
}

func (x *MITMResponse) GetExcludeHostname() []string {
	if x != nil {
		return x.ExcludeHostname
	}
	return nil
}

func (x *MITMResponse) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *MITMResponse) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *MITMResponse) GetExcludeMethod() []string {
	if x != nil {
		return x.ExcludeMethod
	}
	return nil
}

func (x *MITMResponse) GetExcludeContentTypes() []string {
	if x != nil {
		return x.ExcludeContentTypes
	}
	return nil
}

func (x *MITMResponse) GetExcludeUri() []string {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *MITMResponse) GetIncludeUri() []string {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *MITMResponse) GetFilterData() *MITMFilterData {
	if x != nil {
		return x.FilterData
	}
	return nil
}

func (x *MITMResponse) GetJustContentReplacer() bool {
	if x != nil {
		return x.JustContentReplacer
	}
	return false
}

func (x *MITMResponse) GetReplacers() []*MITMContentReplacer {
	if x != nil {
		return x.Replacers
	}
	return nil
}

func (x *MITMResponse) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *MITMResponse) GetHistoryHTTPFlow() *HTTPFlow {
	if x != nil {
		return x.HistoryHTTPFlow
	}
	return nil
}

func (x *MITMResponse) GetForResponse() bool {
	if x != nil {
		return x.ForResponse
	}
	return false
}

func (x *MITMResponse) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MITMResponse) GetResponseId() int64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *MITMResponse) GetHaveMessage() bool {
	if x != nil {
		return x.HaveMessage
	}
	return false
}

func (x *MITMResponse) GetMessage() *ExecResult {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MITMResponse) GetGetCurrentHook() bool {
	if x != nil {
		return x.GetCurrentHook
	}
	return false
}

func (x *MITMResponse) GetHooks() []*YakScriptHooks {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *MITMResponse) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *MITMResponse) GetHaveNotification() bool {
	if x != nil {
		return x.HaveNotification
	}
	return false
}

func (x *MITMResponse) GetNotificationContent() []byte {
	if x != nil {
		return x.NotificationContent
	}
	return nil
}

func (x *MITMResponse) GetHaveLoadingSetter() bool {
	if x != nil {
		return x.HaveLoadingSetter
	}
	return false
}

func (x *MITMResponse) GetLoadingFlag() bool {
	if x != nil {
		return x.LoadingFlag
	}
	return false
}

func (x *MITMResponse) GetIsWebsocket() bool {
	if x != nil {
		return x.IsWebsocket
	}
	return false
}

func (x *MITMResponse) GetWebsocketEncode() []string {
	if x != nil {
		return x.WebsocketEncode
	}
	return nil
}

func (x *MITMResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MITMResponse) GetTraceInfo() *TraceInfo {
	if x != nil {
		return x.TraceInfo
	}
	return nil
}

type TraceInfo struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	AvailableDNSServers    []string               `protobuf:"bytes,1,rep,name=AvailableDNSServers,proto3" json:"AvailableDNSServers,omitempty"`
	DurationMs             int64                  `protobuf:"varint,2,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`           // ServerTime
	DNSDurationMs          int64                  `protobuf:"varint,3,opt,name=DNSDurationMs,proto3" json:"DNSDurationMs,omitempty"`     // DNSTime
	ConnDurationMs         int64                  `protobuf:"varint,4,opt,name=ConnDurationMs,proto3" json:"ConnDurationMs,omitempty"`   // ConnTime
	TotalDurationMs        int64                  `protobuf:"varint,5,opt,name=TotalDurationMs,proto3" json:"TotalDurationMs,omitempty"` // TotalTime
	TLSHandshakeDurationMs int64                  `protobuf:"varint,6,opt,name=TLSHandshakeDurationMs,proto3" json:"TLSHandshakeDurationMs,omitempty"`
	TCPDurationMs          int64                  `protobuf:"varint,7,opt,name=TCPDurationMs,proto3" json:"TCPDurationMs,omitempty"`
	ConnectDurationMs      int64                  `protobuf:"varint,8,opt,name=ConnectDurationMs,proto3" json:"ConnectDurationMs,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TraceInfo) Reset() {
	*x = TraceInfo{}
	mi := &file_yakgrpc_proto_msgTypes[648]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceInfo) ProtoMessage() {}

func (x *TraceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[648]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceInfo.ProtoReflect.Descriptor instead.
func (*TraceInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{648}
}

func (x *TraceInfo) GetAvailableDNSServers() []string {
	if x != nil {
		return x.AvailableDNSServers
	}
	return nil
}

func (x *TraceInfo) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *TraceInfo) GetDNSDurationMs() int64 {
	if x != nil {
		return x.DNSDurationMs
	}
	return 0
}

func (x *TraceInfo) GetConnDurationMs() int64 {
	if x != nil {
		return x.ConnDurationMs
	}
	return 0
}

func (x *TraceInfo) GetTotalDurationMs() int64 {
	if x != nil {
		return x.TotalDurationMs
	}
	return 0
}

func (x *TraceInfo) GetTLSHandshakeDurationMs() int64 {
	if x != nil {
		return x.TLSHandshakeDurationMs
	}
	return 0
}

func (x *TraceInfo) GetTCPDurationMs() int64 {
	if x != nil {
		return x.TCPDurationMs
	}
	return 0
}

func (x *TraceInfo) GetConnectDurationMs() int64 {
	if x != nil {
		return x.ConnectDurationMs
	}
	return 0
}

type YakScriptHooks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HookName      string                 `protobuf:"bytes,1,opt,name=HookName,proto3" json:"HookName,omitempty"`
	Hooks         []*YakScriptHookItem   `protobuf:"bytes,2,rep,name=Hooks,proto3" json:"Hooks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YakScriptHooks) Reset() {
	*x = YakScriptHooks{}
	mi := &file_yakgrpc_proto_msgTypes[649]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakScriptHooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptHooks) ProtoMessage() {}

func (x *YakScriptHooks) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[649]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptHooks.ProtoReflect.Descriptor instead.
func (*YakScriptHooks) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{649}
}

func (x *YakScriptHooks) GetHookName() string {
	if x != nil {
		return x.HookName
	}
	return ""
}

func (x *YakScriptHooks) GetHooks() []*YakScriptHookItem {
	if x != nil {
		return x.Hooks
	}
	return nil
}

type YakScriptHookItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YakScriptId   int64                  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	YakScriptName string                 `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Verbose       string                 `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YakScriptHookItem) Reset() {
	*x = YakScriptHookItem{}
	mi := &file_yakgrpc_proto_msgTypes[650]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakScriptHookItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptHookItem) ProtoMessage() {}

func (x *YakScriptHookItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[650]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptHookItem.ProtoReflect.Descriptor instead.
func (*YakScriptHookItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{650}
}

func (x *YakScriptHookItem) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *YakScriptHookItem) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *YakScriptHookItem) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

// 最基础的 ECHO
type EchoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	mi := &file_yakgrpc_proto_msgTypes[651]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[651]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{651}
}

func (x *EchoRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type EchoResposne struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EchoResposne) Reset() {
	*x = EchoResposne{}
	mi := &file_yakgrpc_proto_msgTypes[652]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoResposne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResposne) ProtoMessage() {}

func (x *EchoResposne) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[652]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResposne.ProtoReflect.Descriptor instead.
func (*EchoResposne) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{652}
}

func (x *EchoResposne) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// handshake
type HandshakeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandshakeRequest) Reset() {
	*x = HandshakeRequest{}
	mi := &file_yakgrpc_proto_msgTypes[653]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeRequest) ProtoMessage() {}

func (x *HandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[653]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeRequest.ProtoReflect.Descriptor instead.
func (*HandshakeRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{653}
}

func (x *HandshakeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HandshakeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandshakeResponse) Reset() {
	*x = HandshakeResponse{}
	mi := &file_yakgrpc_proto_msgTypes[654]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeResponse) ProtoMessage() {}

func (x *HandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[654]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeResponse.ProtoReflect.Descriptor instead.
func (*HandshakeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{654}
}

func (x *HandshakeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 开启一个端口，对接 GRPC 服务器
type Input struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Raw           []byte                 `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Host          string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port          uint32                 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Width         uint32                 `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height        uint32                 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Input) Reset() {
	*x = Input{}
	mi := &file_yakgrpc_proto_msgTypes[655]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[655]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{655}
}

func (x *Input) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Input) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Input) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Input) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Input) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Input) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Output struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Raw        []byte                 `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	RemoteAddr string                 `protobuf:"bytes,11,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	LocalAddr  string                 `protobuf:"bytes,12,opt,name=localAddr,proto3" json:"localAddr,omitempty"`
	// 如果 control 为 true 说明这是一个控制信息
	Control bool `protobuf:"varint,2,opt,name=control,proto3" json:"control,omitempty"`
	// 服务端需要关闭
	Closed bool `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	// 服务端正在等待连接接入
	Waiting       bool `protobuf:"varint,4,opt,name=waiting,proto3" json:"waiting,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output) Reset() {
	*x = Output{}
	mi := &file_yakgrpc_proto_msgTypes[656]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[656]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{656}
}

func (x *Output) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Output) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *Output) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *Output) GetControl() bool {
	if x != nil {
		return x.Control
	}
	return false
}

func (x *Output) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Output) GetWaiting() bool {
	if x != nil {
		return x.Waiting
	}
	return false
}

// 执行脚本
type ExecParamItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecParamItem) Reset() {
	*x = ExecParamItem{}
	mi := &file_yakgrpc_proto_msgTypes[657]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecParamItem) ProtoMessage() {}

func (x *ExecParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[657]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecParamItem.ProtoReflect.Descriptor instead.
func (*ExecParamItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{657}
}

func (x *ExecParamItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExecParamItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ExecRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 执行优先级为：ScriptPath > Script > ScriptId
	Params      []*ExecParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	Script      string           `protobuf:"bytes,2,opt,name=Script,proto3" json:"Script,omitempty"`
	ScriptId    string           `protobuf:"bytes,3,opt,name=ScriptId,proto3" json:"ScriptId,omitempty"`
	YakScriptId int64            `protobuf:"varint,5,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	// 这个是为了满足 Runner 的情况，属于特殊情况
	RunnerParamRaw  string `protobuf:"bytes,6,opt,name=RunnerParamRaw,proto3" json:"RunnerParamRaw,omitempty"`
	NoDividedEngine bool   `protobuf:"varint,7,opt,name=NoDividedEngine,proto3" json:"NoDividedEngine,omitempty"`
	WorkDir         string `protobuf:"bytes,8,opt,name=WorkDir,proto3" json:"WorkDir,omitempty"`       // 工作目录
	ScriptPath      string `protobuf:"bytes,9,opt,name=ScriptPath,proto3" json:"ScriptPath,omitempty"` // 脚本位置
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	mi := &file_yakgrpc_proto_msgTypes[658]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[658]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{658}
}

func (x *ExecRequest) GetParams() []*ExecParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ExecRequest) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ExecRequest) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ExecRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExecRequest) GetRunnerParamRaw() string {
	if x != nil {
		return x.RunnerParamRaw
	}
	return ""
}

func (x *ExecRequest) GetNoDividedEngine() bool {
	if x != nil {
		return x.NoDividedEngine
	}
	return false
}

func (x *ExecRequest) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *ExecRequest) GetScriptPath() string {
	if x != nil {
		return x.ScriptPath
	}
	return ""
}

type ExecResult struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Hash       string                 `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	OutputJson string                 `protobuf:"bytes,2,opt,name=OutputJson,proto3" json:"OutputJson,omitempty"`
	Raw        []byte                 `protobuf:"bytes,3,opt,name=Raw,proto3" json:"Raw,omitempty"`
	IsMessage  bool                   `protobuf:"varint,4,opt,name=IsMessage,proto3" json:"IsMessage,omitempty"`
	Message    []byte                 `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
	// 如果是一个保存过的 ExecResult 他应该有数据库记录 ID
	Id            int64   `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	RuntimeID     string  `protobuf:"bytes,7,opt,name=RuntimeID,proto3" json:"RuntimeID,omitempty"`
	Progress      float32 `protobuf:"fixed32,8,opt,name=Progress,proto3" json:"Progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecResult) Reset() {
	*x = ExecResult{}
	mi := &file_yakgrpc_proto_msgTypes[659]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResult) ProtoMessage() {}

func (x *ExecResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[659]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResult.ProtoReflect.Descriptor instead.
func (*ExecResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{659}
}

func (x *ExecResult) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ExecResult) GetOutputJson() string {
	if x != nil {
		return x.OutputJson
	}
	return ""
}

func (x *ExecResult) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *ExecResult) GetIsMessage() bool {
	if x != nil {
		return x.IsMessage
	}
	return false
}

func (x *ExecResult) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ExecResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExecResult) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *ExecResult) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GetLicenseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	License       string                 `protobuf:"bytes,1,opt,name=License,proto3" json:"License,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLicenseResponse) Reset() {
	*x = GetLicenseResponse{}
	mi := &file_yakgrpc_proto_msgTypes[660]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicenseResponse) ProtoMessage() {}

func (x *GetLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[660]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLicenseResponse.ProtoReflect.Descriptor instead.
func (*GetLicenseResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{660}
}

func (x *GetLicenseResponse) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type CheckLicenseRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LicenseActivation string                 `protobuf:"bytes,1,opt,name=LicenseActivation,proto3" json:"LicenseActivation,omitempty"`
	CompanyVersion    string                 `protobuf:"bytes,2,opt,name=CompanyVersion,proto3" json:"CompanyVersion,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CheckLicenseRequest) Reset() {
	*x = CheckLicenseRequest{}
	mi := &file_yakgrpc_proto_msgTypes[661]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLicenseRequest) ProtoMessage() {}

func (x *CheckLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[661]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLicenseRequest.ProtoReflect.Descriptor instead.
func (*CheckLicenseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{661}
}

func (x *CheckLicenseRequest) GetLicenseActivation() string {
	if x != nil {
		return x.LicenseActivation
	}
	return ""
}

func (x *CheckLicenseRequest) GetCompanyVersion() string {
	if x != nil {
		return x.CompanyVersion
	}
	return ""
}

type DefaultDnsServerResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DefaultDnsServer []string               `protobuf:"bytes,1,rep,name=DefaultDnsServer,proto3" json:"DefaultDnsServer,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DefaultDnsServerResponse) Reset() {
	*x = DefaultDnsServerResponse{}
	mi := &file_yakgrpc_proto_msgTypes[662]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultDnsServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultDnsServerResponse) ProtoMessage() {}

func (x *DefaultDnsServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[662]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultDnsServerResponse.ProtoReflect.Descriptor instead.
func (*DefaultDnsServerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{662}
}

func (x *DefaultDnsServerResponse) GetDefaultDnsServer() []string {
	if x != nil {
		return x.DefaultDnsServer
	}
	return nil
}

type HTTPFlowBareRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	BareType      string                 `protobuf:"bytes,2,opt,name=BareType,proto3" json:"BareType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPFlowBareRequest) Reset() {
	*x = HTTPFlowBareRequest{}
	mi := &file_yakgrpc_proto_msgTypes[663]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowBareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowBareRequest) ProtoMessage() {}

func (x *HTTPFlowBareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[663]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowBareRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowBareRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{663}
}

func (x *HTTPFlowBareRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HTTPFlowBareRequest) GetBareType() string {
	if x != nil {
		return x.BareType
	}
	return ""
}

type HTTPFlowBareResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPFlowBareResponse) Reset() {
	*x = HTTPFlowBareResponse{}
	mi := &file_yakgrpc_proto_msgTypes[664]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPFlowBareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowBareResponse) ProtoMessage() {}

func (x *HTTPFlowBareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[664]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowBareResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowBareResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{664}
}

func (x *HTTPFlowBareResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HTTPFlowBareResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImportHTTPFuzzerTaskFromYamlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YamlContent   string                 `protobuf:"bytes,1,opt,name=YamlContent,proto3" json:"YamlContent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportHTTPFuzzerTaskFromYamlRequest) Reset() {
	*x = ImportHTTPFuzzerTaskFromYamlRequest{}
	mi := &file_yakgrpc_proto_msgTypes[665]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportHTTPFuzzerTaskFromYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportHTTPFuzzerTaskFromYamlRequest) ProtoMessage() {}

func (x *ImportHTTPFuzzerTaskFromYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[665]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportHTTPFuzzerTaskFromYamlRequest.ProtoReflect.Descriptor instead.
func (*ImportHTTPFuzzerTaskFromYamlRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{665}
}

func (x *ImportHTTPFuzzerTaskFromYamlRequest) GetYamlContent() string {
	if x != nil {
		return x.YamlContent
	}
	return ""
}

type ImportHTTPFuzzerTaskFromYamlResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *GeneralResponse       `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Requests      *FuzzerRequests        `protobuf:"bytes,2,opt,name=Requests,proto3" json:"Requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) Reset() {
	*x = ImportHTTPFuzzerTaskFromYamlResponse{}
	mi := &file_yakgrpc_proto_msgTypes[666]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportHTTPFuzzerTaskFromYamlResponse) ProtoMessage() {}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[666]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportHTTPFuzzerTaskFromYamlResponse.ProtoReflect.Descriptor instead.
func (*ImportHTTPFuzzerTaskFromYamlResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{666}
}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) GetStatus() *GeneralResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) GetRequests() *FuzzerRequests {
	if x != nil {
		return x.Requests
	}
	return nil
}

type ExportHTTPFuzzerTaskToYamlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      *FuzzerRequests        `protobuf:"bytes,1,opt,name=Requests,proto3" json:"Requests,omitempty"`
	TemplateType  string                 `protobuf:"bytes,2,opt,name=TemplateType,proto3" json:"TemplateType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportHTTPFuzzerTaskToYamlRequest) Reset() {
	*x = ExportHTTPFuzzerTaskToYamlRequest{}
	mi := &file_yakgrpc_proto_msgTypes[667]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportHTTPFuzzerTaskToYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHTTPFuzzerTaskToYamlRequest) ProtoMessage() {}

func (x *ExportHTTPFuzzerTaskToYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[667]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHTTPFuzzerTaskToYamlRequest.ProtoReflect.Descriptor instead.
func (*ExportHTTPFuzzerTaskToYamlRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{667}
}

func (x *ExportHTTPFuzzerTaskToYamlRequest) GetRequests() *FuzzerRequests {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ExportHTTPFuzzerTaskToYamlRequest) GetTemplateType() string {
	if x != nil {
		return x.TemplateType
	}
	return ""
}

type ExportHTTPFuzzerTaskToYamlResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *GeneralResponse       `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	YamlContent   string                 `protobuf:"bytes,2,opt,name=YamlContent,proto3" json:"YamlContent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportHTTPFuzzerTaskToYamlResponse) Reset() {
	*x = ExportHTTPFuzzerTaskToYamlResponse{}
	mi := &file_yakgrpc_proto_msgTypes[668]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportHTTPFuzzerTaskToYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHTTPFuzzerTaskToYamlResponse) ProtoMessage() {}

func (x *ExportHTTPFuzzerTaskToYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[668]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHTTPFuzzerTaskToYamlResponse.ProtoReflect.Descriptor instead.
func (*ExportHTTPFuzzerTaskToYamlResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{668}
}

func (x *ExportHTTPFuzzerTaskToYamlResponse) GetStatus() *GeneralResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ExportHTTPFuzzerTaskToYamlResponse) GetYamlContent() string {
	if x != nil {
		return x.YamlContent
	}
	return ""
}

type RenderHTTPFuzzerPacketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Packet        []byte                 `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderHTTPFuzzerPacketRequest) Reset() {
	*x = RenderHTTPFuzzerPacketRequest{}
	mi := &file_yakgrpc_proto_msgTypes[669]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderHTTPFuzzerPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderHTTPFuzzerPacketRequest) ProtoMessage() {}

func (x *RenderHTTPFuzzerPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[669]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderHTTPFuzzerPacketRequest.ProtoReflect.Descriptor instead.
func (*RenderHTTPFuzzerPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{669}
}

func (x *RenderHTTPFuzzerPacketRequest) GetPacket() []byte {
	if x != nil {
		return x.Packet
	}
	return nil
}

type RenderHTTPFuzzerPacketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Packet        []byte                 `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderHTTPFuzzerPacketResponse) Reset() {
	*x = RenderHTTPFuzzerPacketResponse{}
	mi := &file_yakgrpc_proto_msgTypes[670]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderHTTPFuzzerPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderHTTPFuzzerPacketResponse) ProtoMessage() {}

func (x *RenderHTTPFuzzerPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[670]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderHTTPFuzzerPacketResponse.ProtoReflect.Descriptor instead.
func (*RenderHTTPFuzzerPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{670}
}

func (x *RenderHTTPFuzzerPacketResponse) GetPacket() []byte {
	if x != nil {
		return x.Packet
	}
	return nil
}

type SmokingEvaluatePluginBatchRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	ScriptNames []string               `protobuf:"bytes,1,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	// "syntaxflow" | "nuclei" | "mitm" | "port-scan" | "codec" | "yak"
	PluginType    string `protobuf:"bytes,2,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmokingEvaluatePluginBatchRequest) Reset() {
	*x = SmokingEvaluatePluginBatchRequest{}
	mi := &file_yakgrpc_proto_msgTypes[671]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmokingEvaluatePluginBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginBatchRequest) ProtoMessage() {}

func (x *SmokingEvaluatePluginBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[671]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginBatchRequest.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginBatchRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{671}
}

func (x *SmokingEvaluatePluginBatchRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *SmokingEvaluatePluginBatchRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

type SmokingEvaluatePluginBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      float64                `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType   string                 `protobuf:"bytes,3,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmokingEvaluatePluginBatchResponse) Reset() {
	*x = SmokingEvaluatePluginBatchResponse{}
	mi := &file_yakgrpc_proto_msgTypes[672]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmokingEvaluatePluginBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginBatchResponse) ProtoMessage() {}

func (x *SmokingEvaluatePluginBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[672]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginBatchResponse.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginBatchResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{672}
}

func (x *SmokingEvaluatePluginBatchResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SmokingEvaluatePluginBatchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SmokingEvaluatePluginBatchResponse) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type GenerateURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scheme        string                 `protobuf:"bytes,1,opt,name=Scheme,proto3" json:"Scheme,omitempty"`
	Host          string                 `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	Password      string                 `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateURLRequest) Reset() {
	*x = GenerateURLRequest{}
	mi := &file_yakgrpc_proto_msgTypes[673]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateURLRequest) ProtoMessage() {}

func (x *GenerateURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[673]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateURLRequest.ProtoReflect.Descriptor instead.
func (*GenerateURLRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{673}
}

func (x *GenerateURLRequest) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *GenerateURLRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GenerateURLRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GenerateURLRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GenerateURLRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GenerateURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	URL           string                 `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateURLResponse) Reset() {
	*x = GenerateURLResponse{}
	mi := &file_yakgrpc_proto_msgTypes[674]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateURLResponse) ProtoMessage() {}

func (x *GenerateURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[674]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateURLResponse.ProtoReflect.Descriptor instead.
func (*GenerateURLResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{674}
}

func (x *GenerateURLResponse) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type YakVersionAtLeastRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AtLeastVersion string                 `protobuf:"bytes,1,opt,name=AtLeastVersion,proto3" json:"AtLeastVersion,omitempty"`
	YakVersion     string                 `protobuf:"bytes,2,opt,name=YakVersion,proto3" json:"YakVersion,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *YakVersionAtLeastRequest) Reset() {
	*x = YakVersionAtLeastRequest{}
	mi := &file_yakgrpc_proto_msgTypes[675]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YakVersionAtLeastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakVersionAtLeastRequest) ProtoMessage() {}

func (x *YakVersionAtLeastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[675]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakVersionAtLeastRequest.ProtoReflect.Descriptor instead.
func (*YakVersionAtLeastRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{675}
}

func (x *YakVersionAtLeastRequest) GetAtLeastVersion() string {
	if x != nil {
		return x.AtLeastVersion
	}
	return ""
}

func (x *YakVersionAtLeastRequest) GetYakVersion() string {
	if x != nil {
		return x.YakVersion
	}
	return ""
}

type ParseTrafficRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseTrafficRequest) Reset() {
	*x = ParseTrafficRequest{}
	mi := &file_yakgrpc_proto_msgTypes[676]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseTrafficRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTrafficRequest) ProtoMessage() {}

func (x *ParseTrafficRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[676]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTrafficRequest.ProtoReflect.Descriptor instead.
func (*ParseTrafficRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{676}
}

func (x *ParseTrafficRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ParseTrafficRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ParseTrafficResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OK            bool                   `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Result        string                 `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseTrafficResponse) Reset() {
	*x = ParseTrafficResponse{}
	mi := &file_yakgrpc_proto_msgTypes[677]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseTrafficResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTrafficResponse) ProtoMessage() {}

func (x *ParseTrafficResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[677]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTrafficResponse.ProtoReflect.Descriptor instead.
func (*ParseTrafficResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{677}
}

func (x *ParseTrafficResponse) GetOK() bool {
	if x != nil {
		return x.OK
	}
	return false
}

func (x *ParseTrafficResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ParseTrafficResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TraceRouteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceRouteRequest) Reset() {
	*x = TraceRouteRequest{}
	mi := &file_yakgrpc_proto_msgTypes[678]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRouteRequest) ProtoMessage() {}

func (x *TraceRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[678]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRouteRequest.ProtoReflect.Descriptor instead.
func (*TraceRouteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{678}
}

func (x *TraceRouteRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type TraceRouteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Rtt           int64                  `protobuf:"varint,2,opt,name=Rtt,proto3" json:"Rtt,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Hop           int64                  `protobuf:"varint,4,opt,name=Hop,proto3" json:"Hop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceRouteResponse) Reset() {
	*x = TraceRouteResponse{}
	mi := &file_yakgrpc_proto_msgTypes[679]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRouteResponse) ProtoMessage() {}

func (x *TraceRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[679]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRouteResponse.ProtoReflect.Descriptor instead.
func (*TraceRouteResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{679}
}

func (x *TraceRouteResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TraceRouteResponse) GetRtt() int64 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *TraceRouteResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TraceRouteResponse) GetHop() int64 {
	if x != nil {
		return x.Hop
	}
	return 0
}

type EvaluateExpressionRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Expression        string                 `protobuf:"bytes,1,opt,name=Expression,proto3" json:"Expression,omitempty"`
	Variables         []*KVPair              `protobuf:"bytes,2,rep,name=Variables,proto3" json:"Variables,omitempty"`
	ImportYaklangLibs bool                   `protobuf:"varint,3,opt,name=ImportYaklangLibs,proto3" json:"ImportYaklangLibs,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EvaluateExpressionRequest) Reset() {
	*x = EvaluateExpressionRequest{}
	mi := &file_yakgrpc_proto_msgTypes[680]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateExpressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateExpressionRequest) ProtoMessage() {}

func (x *EvaluateExpressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[680]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateExpressionRequest.ProtoReflect.Descriptor instead.
func (*EvaluateExpressionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{680}
}

func (x *EvaluateExpressionRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *EvaluateExpressionRequest) GetVariables() []*KVPair {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *EvaluateExpressionRequest) GetImportYaklangLibs() bool {
	if x != nil {
		return x.ImportYaklangLibs
	}
	return false
}

type EvaluateExpressionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"` // json marshal
	BoolResult    bool                   `protobuf:"varint,2,opt,name=BoolResult,proto3" json:"BoolResult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluateExpressionResponse) Reset() {
	*x = EvaluateExpressionResponse{}
	mi := &file_yakgrpc_proto_msgTypes[681]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateExpressionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateExpressionResponse) ProtoMessage() {}

func (x *EvaluateExpressionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[681]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateExpressionResponse.ProtoReflect.Descriptor instead.
func (*EvaluateExpressionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{681}
}

func (x *EvaluateExpressionResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *EvaluateExpressionResponse) GetBoolResult() bool {
	if x != nil {
		return x.BoolResult
	}
	return false
}

type EvaluateMultiExpressionRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Expressions       []string               `protobuf:"bytes,1,rep,name=Expressions,proto3" json:"Expressions,omitempty"`
	Variables         []*KVPair              `protobuf:"bytes,2,rep,name=Variables,proto3" json:"Variables,omitempty"`
	ImportYaklangLibs bool                   `protobuf:"varint,3,opt,name=ImportYaklangLibs,proto3" json:"ImportYaklangLibs,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EvaluateMultiExpressionRequest) Reset() {
	*x = EvaluateMultiExpressionRequest{}
	mi := &file_yakgrpc_proto_msgTypes[682]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateMultiExpressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateMultiExpressionRequest) ProtoMessage() {}

func (x *EvaluateMultiExpressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[682]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateMultiExpressionRequest.ProtoReflect.Descriptor instead.
func (*EvaluateMultiExpressionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{682}
}

func (x *EvaluateMultiExpressionRequest) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *EvaluateMultiExpressionRequest) GetVariables() []*KVPair {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *EvaluateMultiExpressionRequest) GetImportYaklangLibs() bool {
	if x != nil {
		return x.ImportYaklangLibs
	}
	return false
}

type EvaluateMultiExpressionResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Results       []*EvaluateExpressionResponse `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluateMultiExpressionResponse) Reset() {
	*x = EvaluateMultiExpressionResponse{}
	mi := &file_yakgrpc_proto_msgTypes[683]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateMultiExpressionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateMultiExpressionResponse) ProtoMessage() {}

func (x *EvaluateMultiExpressionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[683]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateMultiExpressionResponse.ProtoReflect.Descriptor instead.
func (*EvaluateMultiExpressionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{683}
}

func (x *EvaluateMultiExpressionResponse) GetResults() []*EvaluateExpressionResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

type ThirdPartyAppConfigItemTemplate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Required      bool                   `protobuf:"varint,2,opt,name=Required,proto3" json:"Required,omitempty"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Verbose       string                 `protobuf:"bytes,7,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	DefaultValue  string                 `protobuf:"bytes,4,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	Desc          string                 `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Extra         string                 `protobuf:"bytes,6,opt,name=Extra,proto3" json:"Extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThirdPartyAppConfigItemTemplate) Reset() {
	*x = ThirdPartyAppConfigItemTemplate{}
	mi := &file_yakgrpc_proto_msgTypes[684]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyAppConfigItemTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyAppConfigItemTemplate) ProtoMessage() {}

func (x *ThirdPartyAppConfigItemTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[684]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyAppConfigItemTemplate.ProtoReflect.Descriptor instead.
func (*ThirdPartyAppConfigItemTemplate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{684}
}

func (x *ThirdPartyAppConfigItemTemplate) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ThirdPartyAppConfigItemTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type GetThirdPartyAppConfigTemplate struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Name          string                             `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Verbose       string                             `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Type          string                             `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Items         []*ThirdPartyAppConfigItemTemplate `protobuf:"bytes,3,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThirdPartyAppConfigTemplate) Reset() {
	*x = GetThirdPartyAppConfigTemplate{}
	mi := &file_yakgrpc_proto_msgTypes[685]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThirdPartyAppConfigTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThirdPartyAppConfigTemplate) ProtoMessage() {}

func (x *GetThirdPartyAppConfigTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[685]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThirdPartyAppConfigTemplate.ProtoReflect.Descriptor instead.
func (*GetThirdPartyAppConfigTemplate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{685}
}

func (x *GetThirdPartyAppConfigTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetThirdPartyAppConfigTemplate) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *GetThirdPartyAppConfigTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetThirdPartyAppConfigTemplate) GetItems() []*ThirdPartyAppConfigItemTemplate {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetThirdPartyAppConfigTemplateResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Templates     []*GetThirdPartyAppConfigTemplate `protobuf:"bytes,2,rep,name=Templates,proto3" json:"Templates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThirdPartyAppConfigTemplateResponse) Reset() {
	*x = GetThirdPartyAppConfigTemplateResponse{}
	mi := &file_yakgrpc_proto_msgTypes[686]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThirdPartyAppConfigTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThirdPartyAppConfigTemplateResponse) ProtoMessage() {}

func (x *GetThirdPartyAppConfigTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[686]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThirdPartyAppConfigTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetThirdPartyAppConfigTemplateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{686}
}

func (x *GetThirdPartyAppConfigTemplateResponse) GetTemplates() []*GetThirdPartyAppConfigTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

type GetFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFingerprintRequest) Reset() {
	*x = GetFingerprintRequest{}
	mi := &file_yakgrpc_proto_msgTypes[687]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFingerprintRequest) ProtoMessage() {}

func (x *GetFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[687]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFingerprintRequest.ProtoReflect.Descriptor instead.
func (*GetFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{687}
}

type GetFingerprintResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFingerprintResponse) Reset() {
	*x = GetFingerprintResponse{}
	mi := &file_yakgrpc_proto_msgTypes[688]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFingerprintResponse) ProtoMessage() {}

func (x *GetFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[688]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFingerprintResponse.ProtoReflect.Descriptor instead.
func (*GetFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{688}
}

type AddFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Fingerprint   string                 `protobuf:"bytes,2,opt,name=Fingerprint,proto3" json:"Fingerprint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddFingerprintRequest) Reset() {
	*x = AddFingerprintRequest{}
	mi := &file_yakgrpc_proto_msgTypes[689]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFingerprintRequest) ProtoMessage() {}

func (x *AddFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[689]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFingerprintRequest.ProtoReflect.Descriptor instead.
func (*AddFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{689}
}

func (x *AddFingerprintRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddFingerprintRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type AddFingerprintResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddFingerprintResponse) Reset() {
	*x = AddFingerprintResponse{}
	mi := &file_yakgrpc_proto_msgTypes[690]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFingerprintResponse) ProtoMessage() {}

func (x *AddFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[690]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFingerprintResponse.ProtoReflect.Descriptor instead.
func (*AddFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{690}
}

type ModifyFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyFingerprintRequest) Reset() {
	*x = ModifyFingerprintRequest{}
	mi := &file_yakgrpc_proto_msgTypes[691]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyFingerprintRequest) ProtoMessage() {}

func (x *ModifyFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[691]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyFingerprintRequest.ProtoReflect.Descriptor instead.
func (*ModifyFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{691}
}

type ModifyFingerprintResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyFingerprintResponse) Reset() {
	*x = ModifyFingerprintResponse{}
	mi := &file_yakgrpc_proto_msgTypes[692]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyFingerprintResponse) ProtoMessage() {}

func (x *ModifyFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[692]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyFingerprintResponse.ProtoReflect.Descriptor instead.
func (*ModifyFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{692}
}

type ReadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	BufSize       int64                  `protobuf:"varint,2,opt,name=BufSize,proto3" json:"BufSize,omitempty"`
	FileSystem    string                 `protobuf:"bytes,3,opt,name=FileSystem,proto3" json:"FileSystem,omitempty"` // "local" "ssadb"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileRequest) Reset() {
	*x = ReadFileRequest{}
	mi := &file_yakgrpc_proto_msgTypes[693]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileRequest) ProtoMessage() {}

func (x *ReadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[693]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileRequest.ProtoReflect.Descriptor instead.
func (*ReadFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{693}
}

func (x *ReadFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ReadFileRequest) GetBufSize() int64 {
	if x != nil {
		return x.BufSize
	}
	return 0
}

func (x *ReadFileRequest) GetFileSystem() string {
	if x != nil {
		return x.FileSystem
	}
	return ""
}

type ReadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	EOF           bool                   `protobuf:"varint,2,opt,name=EOF,proto3" json:"EOF,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileResponse) Reset() {
	*x = ReadFileResponse{}
	mi := &file_yakgrpc_proto_msgTypes[694]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileResponse) ProtoMessage() {}

func (x *ReadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[694]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileResponse.ProtoReflect.Descriptor instead.
func (*ReadFileResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{694}
}

func (x *ReadFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReadFileResponse) GetEOF() bool {
	if x != nil {
		return x.EOF
	}
	return false
}

type GetReverseShellProgramListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	System        string                 `protobuf:"bytes,1,opt,name=System,proto3" json:"System,omitempty"`
	CmdType       string                 `protobuf:"bytes,2,opt,name=CmdType,proto3" json:"CmdType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReverseShellProgramListRequest) Reset() {
	*x = GetReverseShellProgramListRequest{}
	mi := &file_yakgrpc_proto_msgTypes[695]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReverseShellProgramListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReverseShellProgramListRequest) ProtoMessage() {}

func (x *GetReverseShellProgramListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[695]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReverseShellProgramListRequest.ProtoReflect.Descriptor instead.
func (*GetReverseShellProgramListRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{695}
}

func (x *GetReverseShellProgramListRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *GetReverseShellProgramListRequest) GetCmdType() string {
	if x != nil {
		return x.CmdType
	}
	return ""
}

type GetReverseShellProgramListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProgramList   []string               `protobuf:"bytes,1,rep,name=ProgramList,proto3" json:"ProgramList,omitempty"`
	ShellList     []string               `protobuf:"bytes,2,rep,name=ShellList,proto3" json:"ShellList,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReverseShellProgramListResponse) Reset() {
	*x = GetReverseShellProgramListResponse{}
	mi := &file_yakgrpc_proto_msgTypes[696]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReverseShellProgramListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReverseShellProgramListResponse) ProtoMessage() {}

func (x *GetReverseShellProgramListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[696]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReverseShellProgramListResponse.ProtoReflect.Descriptor instead.
func (*GetReverseShellProgramListResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{696}
}

func (x *GetReverseShellProgramListResponse) GetProgramList() []string {
	if x != nil {
		return x.ProgramList
	}
	return nil
}

func (x *GetReverseShellProgramListResponse) GetShellList() []string {
	if x != nil {
		return x.ShellList
	}
	return nil
}

type GenerateReverseShellCommandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	System        string                 `protobuf:"bytes,1,opt,name=System,proto3" json:"System,omitempty"`
	CmdType       string                 `protobuf:"bytes,2,opt,name=CmdType,proto3" json:"CmdType,omitempty"`
	ShellType     string                 `protobuf:"bytes,4,opt,name=ShellType,proto3" json:"ShellType,omitempty"`
	Encode        string                 `protobuf:"bytes,5,opt,name=Encode,proto3" json:"Encode,omitempty"`
	Program       string                 `protobuf:"bytes,6,opt,name=Program,proto3" json:"Program,omitempty"`
	IP            string                 `protobuf:"bytes,7,opt,name=IP,proto3" json:"IP,omitempty"`
	Port          int32                  `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateReverseShellCommandRequest) Reset() {
	*x = GenerateReverseShellCommandRequest{}
	mi := &file_yakgrpc_proto_msgTypes[697]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateReverseShellCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReverseShellCommandRequest) ProtoMessage() {}

func (x *GenerateReverseShellCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[697]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReverseShellCommandRequest.ProtoReflect.Descriptor instead.
func (*GenerateReverseShellCommandRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{697}
}

func (x *GenerateReverseShellCommandRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetCmdType() string {
	if x != nil {
		return x.CmdType
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetShellType() string {
	if x != nil {
		return x.ShellType
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetEncode() string {
	if x != nil {
		return x.Encode
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type GenerateReverseShellCommandResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *GeneralResponse       `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Result        string                 `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateReverseShellCommandResponse) Reset() {
	*x = GenerateReverseShellCommandResponse{}
	mi := &file_yakgrpc_proto_msgTypes[698]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateReverseShellCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReverseShellCommandResponse) ProtoMessage() {}

func (x *GenerateReverseShellCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[698]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReverseShellCommandResponse.ProtoReflect.Descriptor instead.
func (*GenerateReverseShellCommandResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{698}
}

func (x *GenerateReverseShellCommandResponse) GetStatus() *GeneralResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GenerateReverseShellCommandResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type DbOperateMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     string                 `protobuf:"bytes,1,opt,name=TableName,proto3" json:"TableName,omitempty"`       // 表名 数据源
	Operation     string                 `protobuf:"bytes,2,opt,name=Operation,proto3" json:"Operation,omitempty"`       // 操作 (增删改查)
	EffectRows    int64                  `protobuf:"varint,3,opt,name=EffectRows,proto3" json:"EffectRows,omitempty"`    // 影响行数
	ExtraMessage  string                 `protobuf:"bytes,4,opt,name=ExtraMessage,proto3" json:"ExtraMessage,omitempty"` // 额外信息
	CreateID      int64                  `protobuf:"varint,5,opt,name=CreateID,proto3" json:"CreateID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbOperateMessage) Reset() {
	*x = DbOperateMessage{}
	mi := &file_yakgrpc_proto_msgTypes[699]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbOperateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbOperateMessage) ProtoMessage() {}

func (x *DbOperateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[699]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbOperateMessage.ProtoReflect.Descriptor instead.
func (*DbOperateMessage) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{699}
}

func (x *DbOperateMessage) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DbOperateMessage) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *DbOperateMessage) GetEffectRows() int64 {
	if x != nil {
		return x.EffectRows
	}
	return 0
}

func (x *DbOperateMessage) GetExtraMessage() string {
	if x != nil {
		return x.ExtraMessage
	}
	return ""
}

func (x *DbOperateMessage) GetCreateID() int64 {
	if x != nil {
		return x.CreateID
	}
	return 0
}

type CPE struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Part          string                 `protobuf:"bytes,1,opt,name=Part,proto3" json:"Part,omitempty"`
	Vendor        string                 `protobuf:"bytes,2,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
	Product       string                 `protobuf:"bytes,3,opt,name=Product,proto3" json:"Product,omitempty"`
	Version       string                 `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
	Update        string                 `protobuf:"bytes,5,opt,name=Update,proto3" json:"Update,omitempty"`
	Edition       string                 `protobuf:"bytes,6,opt,name=Edition,proto3" json:"Edition,omitempty"`
	Language      string                 `protobuf:"bytes,7,opt,name=Language,proto3" json:"Language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPE) Reset() {
	*x = CPE{}
	mi := &file_yakgrpc_proto_msgTypes[700]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPE) ProtoMessage() {}

func (x *CPE) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[700]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPE.ProtoReflect.Descriptor instead.
func (*CPE) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{700}
}

func (x *CPE) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *CPE) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CPE) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CPE) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CPE) GetUpdate() string {
	if x != nil {
		return x.Update
	}
	return ""
}

func (x *CPE) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *CPE) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type FingerprintRule struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RuleName        string                 `protobuf:"bytes,2,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	CPE             *CPE                   `protobuf:"bytes,3,opt,name=CPE,proto3" json:"CPE,omitempty"`
	WebPath         string                 `protobuf:"bytes,4,opt,name=WebPath,proto3" json:"WebPath,omitempty"`
	ExtInfo         string                 `protobuf:"bytes,5,opt,name=ExtInfo,proto3" json:"ExtInfo,omitempty"`
	MatchExpression string                 `protobuf:"bytes,6,opt,name=MatchExpression,proto3" json:"MatchExpression,omitempty"`
	GroupName       []string               `protobuf:"bytes,7,rep,name=GroupName,proto3" json:"GroupName,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FingerprintRule) Reset() {
	*x = FingerprintRule{}
	mi := &file_yakgrpc_proto_msgTypes[701]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FingerprintRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintRule) ProtoMessage() {}

func (x *FingerprintRule) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[701]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintRule.ProtoReflect.Descriptor instead.
func (*FingerprintRule) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{701}
}

func (x *FingerprintRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FingerprintRule) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *FingerprintRule) GetCPE() *CPE {
	if x != nil {
		return x.CPE
	}
	return nil
}

func (x *FingerprintRule) GetWebPath() string {
	if x != nil {
		return x.WebPath
	}
	return ""
}

func (x *FingerprintRule) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *FingerprintRule) GetMatchExpression() string {
	if x != nil {
		return x.MatchExpression
	}
	return ""
}

func (x *FingerprintRule) GetGroupName() []string {
	if x != nil {
		return x.GroupName
	}
	return nil
}

type FingerprintFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vendor        []string               `protobuf:"bytes,1,rep,name=Vendor,proto3" json:"Vendor,omitempty"`
	Product       []string               `protobuf:"bytes,2,rep,name=Product,proto3" json:"Product,omitempty"`
	IncludeId     []int64                `protobuf:"varint,3,rep,packed,name=IncludeId,proto3" json:"IncludeId,omitempty"`
	GroupName     []string               `protobuf:"bytes,4,rep,name=GroupName,proto3" json:"GroupName,omitempty"`
	RuleName      []string               `protobuf:"bytes,5,rep,name=RuleName,proto3" json:"RuleName,omitempty"`
	Keyword       string                 `protobuf:"bytes,6,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FingerprintFilter) Reset() {
	*x = FingerprintFilter{}
	mi := &file_yakgrpc_proto_msgTypes[702]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FingerprintFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintFilter) ProtoMessage() {}

func (x *FingerprintFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[702]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintFilter.ProtoReflect.Descriptor instead.
func (*FingerprintFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{702}
}

func (x *FingerprintFilter) GetVendor() []string {
	if x != nil {
		return x.Vendor
	}
	return nil
}

func (x *FingerprintFilter) GetProduct() []string {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *FingerprintFilter) GetIncludeId() []int64 {
	if x != nil {
		return x.IncludeId
	}
	return nil
}

func (x *FingerprintFilter) GetGroupName() []string {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *FingerprintFilter) GetRuleName() []string {
	if x != nil {
		return x.RuleName
	}
	return nil
}

func (x *FingerprintFilter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type QueryFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *FingerprintFilter     `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFingerprintRequest) Reset() {
	*x = QueryFingerprintRequest{}
	mi := &file_yakgrpc_proto_msgTypes[703]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFingerprintRequest) ProtoMessage() {}

func (x *QueryFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[703]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFingerprintRequest.ProtoReflect.Descriptor instead.
func (*QueryFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{703}
}

func (x *QueryFingerprintRequest) GetFilter() *FingerprintFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryFingerprintRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryFingerprintResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*FingerprintRule     `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFingerprintResponse) Reset() {
	*x = QueryFingerprintResponse{}
	mi := &file_yakgrpc_proto_msgTypes[704]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFingerprintResponse) ProtoMessage() {}

func (x *QueryFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[704]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFingerprintResponse.ProtoReflect.Descriptor instead.
func (*QueryFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{704}
}

func (x *QueryFingerprintResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryFingerprintResponse) GetData() []*FingerprintRule {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryFingerprintResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *FingerprintFilter     `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFingerprintRequest) Reset() {
	*x = DeleteFingerprintRequest{}
	mi := &file_yakgrpc_proto_msgTypes[705]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFingerprintRequest) ProtoMessage() {}

func (x *DeleteFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[705]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFingerprintRequest.ProtoReflect.Descriptor instead.
func (*DeleteFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{705}
}

func (x *DeleteFingerprintRequest) GetFilter() *FingerprintFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CreateFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rule          *FingerprintRule       `protobuf:"bytes,1,opt,name=Rule,proto3" json:"Rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFingerprintRequest) Reset() {
	*x = CreateFingerprintRequest{}
	mi := &file_yakgrpc_proto_msgTypes[706]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFingerprintRequest) ProtoMessage() {}

func (x *CreateFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[706]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFingerprintRequest.ProtoReflect.Descriptor instead.
func (*CreateFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{706}
}

func (x *CreateFingerprintRequest) GetRule() *FingerprintRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type UpdateFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RuleName      string                 `protobuf:"bytes,2,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Rule          *FingerprintRule       `protobuf:"bytes,3,opt,name=Rule,proto3" json:"Rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFingerprintRequest) Reset() {
	*x = UpdateFingerprintRequest{}
	mi := &file_yakgrpc_proto_msgTypes[707]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFingerprintRequest) ProtoMessage() {}

func (x *UpdateFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[707]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFingerprintRequest.ProtoReflect.Descriptor instead.
func (*UpdateFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{707}
}

func (x *UpdateFingerprintRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateFingerprintRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *UpdateFingerprintRequest) GetRule() *FingerprintRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type FingerprintGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	Count         int64                  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FingerprintGroup) Reset() {
	*x = FingerprintGroup{}
	mi := &file_yakgrpc_proto_msgTypes[708]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FingerprintGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintGroup) ProtoMessage() {}

func (x *FingerprintGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[708]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintGroup.ProtoReflect.Descriptor instead.
func (*FingerprintGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{708}
}

func (x *FingerprintGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *FingerprintGroup) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FingerprintGroups struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*FingerprintGroup    `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FingerprintGroups) Reset() {
	*x = FingerprintGroups{}
	mi := &file_yakgrpc_proto_msgTypes[709]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FingerprintGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintGroups) ProtoMessage() {}

func (x *FingerprintGroups) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[709]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintGroups.ProtoReflect.Descriptor instead.
func (*FingerprintGroups) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{709}
}

func (x *FingerprintGroups) GetData() []*FingerprintGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

type RenameFingerprintGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	NewGroupName  string                 `protobuf:"bytes,2,opt,name=NewGroupName,proto3" json:"NewGroupName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameFingerprintGroupRequest) Reset() {
	*x = RenameFingerprintGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[710]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameFingerprintGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFingerprintGroupRequest) ProtoMessage() {}

func (x *RenameFingerprintGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[710]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFingerprintGroupRequest.ProtoReflect.Descriptor instead.
func (*RenameFingerprintGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{710}
}

func (x *RenameFingerprintGroupRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *RenameFingerprintGroupRequest) GetNewGroupName() string {
	if x != nil {
		return x.NewGroupName
	}
	return ""
}

type DeleteFingerprintGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupNames    []string               `protobuf:"bytes,1,rep,name=GroupNames,proto3" json:"GroupNames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFingerprintGroupRequest) Reset() {
	*x = DeleteFingerprintGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[711]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFingerprintGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFingerprintGroupRequest) ProtoMessage() {}

func (x *DeleteFingerprintGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[711]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFingerprintGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteFingerprintGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{711}
}

func (x *DeleteFingerprintGroupRequest) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

type BatchUpdateFingerprintToGroupRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AppendGroupName []string               `protobuf:"bytes,1,rep,name=AppendGroupName,proto3" json:"AppendGroupName,omitempty"`
	DeleteGroupName []string               `protobuf:"bytes,2,rep,name=DeleteGroupName,proto3" json:"DeleteGroupName,omitempty"`
	Filter          *FingerprintFilter     `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BatchUpdateFingerprintToGroupRequest) Reset() {
	*x = BatchUpdateFingerprintToGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[712]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateFingerprintToGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateFingerprintToGroupRequest) ProtoMessage() {}

func (x *BatchUpdateFingerprintToGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[712]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateFingerprintToGroupRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateFingerprintToGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{712}
}

func (x *BatchUpdateFingerprintToGroupRequest) GetAppendGroupName() []string {
	if x != nil {
		return x.AppendGroupName
	}
	return nil
}

func (x *BatchUpdateFingerprintToGroupRequest) GetDeleteGroupName() []string {
	if x != nil {
		return x.DeleteGroupName
	}
	return nil
}

func (x *BatchUpdateFingerprintToGroupRequest) GetFilter() *FingerprintFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetFingerprintGroupSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *FingerprintFilter     `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Union         bool                   `protobuf:"varint,2,opt,name=Union,proto3" json:"Union,omitempty"` // default intersect ,if set true return union
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFingerprintGroupSetRequest) Reset() {
	*x = GetFingerprintGroupSetRequest{}
	mi := &file_yakgrpc_proto_msgTypes[713]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFingerprintGroupSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFingerprintGroupSetRequest) ProtoMessage() {}

func (x *GetFingerprintGroupSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[713]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFingerprintGroupSetRequest.ProtoReflect.Descriptor instead.
func (*GetFingerprintGroupSetRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{713}
}

func (x *GetFingerprintGroupSetRequest) GetFilter() *FingerprintFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetFingerprintGroupSetRequest) GetUnion() bool {
	if x != nil {
		return x.Union
	}
	return false
}

type ExportFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *FingerprintFilter     `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	TargetPath    string                 `protobuf:"bytes,3,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportFingerprintRequest) Reset() {
	*x = ExportFingerprintRequest{}
	mi := &file_yakgrpc_proto_msgTypes[714]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportFingerprintRequest) ProtoMessage() {}

func (x *ExportFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[714]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportFingerprintRequest.ProtoReflect.Descriptor instead.
func (*ExportFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{714}
}

func (x *ExportFingerprintRequest) GetFilter() *FingerprintFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExportFingerprintRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ExportFingerprintRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type ImportFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InputPath     string                 `protobuf:"bytes,1,opt,name=InputPath,proto3" json:"InputPath,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportFingerprintRequest) Reset() {
	*x = ImportFingerprintRequest{}
	mi := &file_yakgrpc_proto_msgTypes[715]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFingerprintRequest) ProtoMessage() {}

func (x *ImportFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[715]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFingerprintRequest.ProtoReflect.Descriptor instead.
func (*ImportFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{715}
}

func (x *ImportFingerprintRequest) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

func (x *ImportFingerprintRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type DataTransferProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      float64                `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Verbose       string                 `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataTransferProgress) Reset() {
	*x = DataTransferProgress{}
	mi := &file_yakgrpc_proto_msgTypes[716]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataTransferProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferProgress) ProtoMessage() {}

func (x *DataTransferProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[716]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferProgress.ProtoReflect.Descriptor instead.
func (*DataTransferProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{716}
}

func (x *DataTransferProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DataTransferProgress) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type QuerySyntaxFlowRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *SyntaxFlowRuleFilter  `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowRuleRequest) Reset() {
	*x = QuerySyntaxFlowRuleRequest{}
	mi := &file_yakgrpc_proto_msgTypes[717]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowRuleRequest) ProtoMessage() {}

func (x *QuerySyntaxFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[717]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{717}
}

func (x *QuerySyntaxFlowRuleRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowRuleRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SyntaxFlowRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,18,opt,name=Id,proto3" json:"Id,omitempty"`
	RuleName      string                 `protobuf:"bytes,1,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Language      string                 `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"`
	Type          string                 `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Severity      string                 `protobuf:"bytes,5,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Purpose       string                 `protobuf:"bytes,6,opt,name=Purpose,proto3" json:"Purpose,omitempty"`
	IsBuildInRule bool                   `protobuf:"varint,7,opt,name=IsBuildInRule,proto3" json:"IsBuildInRule,omitempty"`
	Title         string                 `protobuf:"bytes,8,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleZh       string                 `protobuf:"bytes,9,opt,name=TitleZh,proto3" json:"TitleZh,omitempty"`
	Description   string                 `protobuf:"bytes,10,opt,name=Description,proto3" json:"Description,omitempty"`
	Verified      bool                   `protobuf:"varint,11,opt,name=Verified,proto3" json:"Verified,omitempty"`
	AllowIncluded bool                   `protobuf:"varint,12,opt,name=AllowIncluded,proto3" json:"AllowIncluded,omitempty"`
	IncludedName  string                 `protobuf:"bytes,13,opt,name=IncludedName,proto3" json:"IncludedName,omitempty"`
	Tag           string                 `protobuf:"bytes,14,opt,name=Tag,proto3" json:"Tag,omitempty"`
	// 字段弃用，使用新结构来做
	AlertDesc     string                   `protobuf:"bytes,15,opt,name=AlertDesc,proto3" json:"AlertDesc,omitempty"`
	Hash          string                   `protobuf:"bytes,16,opt,name=Hash,proto3" json:"Hash,omitempty"`
	GroupName     []string                 `protobuf:"bytes,17,rep,name=GroupName,proto3" json:"GroupName,omitempty"`
	AlertMsg      map[string]*AlertMessage `protobuf:"bytes,19,rep,name=AlertMsg,proto3" json:"AlertMsg,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowRule) Reset() {
	*x = SyntaxFlowRule{}
	mi := &file_yakgrpc_proto_msgTypes[718]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRule) ProtoMessage() {}

func (x *SyntaxFlowRule) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[718]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRule.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRule) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{718}
}

func (x *SyntaxFlowRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SyntaxFlowRule) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SyntaxFlowRule) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SyntaxFlowRule) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SyntaxFlowRule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SyntaxFlowRule) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SyntaxFlowRule) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *SyntaxFlowRule) GetIsBuildInRule() bool {
	if x != nil {
		return x.IsBuildInRule
	}
	return false
}

func (x *SyntaxFlowRule) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SyntaxFlowRule) GetTitleZh() string {
	if x != nil {
		return x.TitleZh
	}
	return ""
}

func (x *SyntaxFlowRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SyntaxFlowRule) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *SyntaxFlowRule) GetAllowIncluded() bool {
	if x != nil {
		return x.AllowIncluded
	}
	return false
}

func (x *SyntaxFlowRule) GetIncludedName() string {
	if x != nil {
		return x.IncludedName
	}
	return ""
}

func (x *SyntaxFlowRule) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SyntaxFlowRule) GetAlertDesc() string {
	if x != nil {
		return x.AlertDesc
	}
	return ""
}

func (x *SyntaxFlowRule) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SyntaxFlowRule) GetGroupName() []string {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *SyntaxFlowRule) GetAlertMsg() map[string]*AlertMessage {
	if x != nil {
		return x.AlertMsg
	}
	return nil
}

type AlertMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleZh       string                 `protobuf:"bytes,2,opt,name=TitleZh,proto3" json:"TitleZh,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Solution      string                 `protobuf:"bytes,4,opt,name=Solution,proto3" json:"Solution,omitempty"`
	Severity      string                 `protobuf:"bytes,5,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Purpose       string                 `protobuf:"bytes,6,opt,name=Purpose,proto3" json:"Purpose,omitempty"`
	Msg           string                 `protobuf:"bytes,7,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Cve           string                 `protobuf:"bytes,8,opt,name=Cve,proto3" json:"Cve,omitempty"`
	RiskType      string                 `protobuf:"bytes,9,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	Tag           string                 `protobuf:"bytes,10,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Extra         map[string]string      `protobuf:"bytes,11,rep,name=Extra,proto3" json:"Extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlertMessage) Reset() {
	*x = AlertMessage{}
	mi := &file_yakgrpc_proto_msgTypes[719]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlertMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertMessage) ProtoMessage() {}

func (x *AlertMessage) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[719]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertMessage.ProtoReflect.Descriptor instead.
func (*AlertMessage) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{719}
}

func (x *AlertMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AlertMessage) GetTitleZh() string {
	if x != nil {
		return x.TitleZh
	}
	return ""
}

func (x *AlertMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AlertMessage) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *AlertMessage) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *AlertMessage) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *AlertMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AlertMessage) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *AlertMessage) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *AlertMessage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AlertMessage) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SyntaxFlowRuleInput struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	RuleName      string                   `protobuf:"bytes,1,opt,name=RuleName,proto3" json:"RuleName,omitempty"` // RuleName作为索引，因此不能update RuleName
	Content       string                   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Language      string                   `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"`
	Tags          []string                 `protobuf:"bytes,4,rep,name=Tags,proto3" json:"Tags,omitempty"`
	GroupNames    []string                 `protobuf:"bytes,5,rep,name=GroupNames,proto3" json:"GroupNames,omitempty"`
	Description   string                   `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	AlertMsg      map[string]*AlertMessage `protobuf:"bytes,7,rep,name=AlertMsg,proto3" json:"AlertMsg,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowRuleInput) Reset() {
	*x = SyntaxFlowRuleInput{}
	mi := &file_yakgrpc_proto_msgTypes[720]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowRuleInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRuleInput) ProtoMessage() {}

func (x *SyntaxFlowRuleInput) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[720]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRuleInput.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRuleInput) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{720}
}

func (x *SyntaxFlowRuleInput) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SyntaxFlowRuleInput) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SyntaxFlowRuleInput) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SyntaxFlowRuleInput) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SyntaxFlowRuleInput) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *SyntaxFlowRuleInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SyntaxFlowRuleInput) GetAlertMsg() map[string]*AlertMessage {
	if x != nil {
		return x.AlertMsg
	}
	return nil
}

type SyntaxFlowRuleFilter struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	RuleNames  []string               `protobuf:"bytes,1,rep,name=RuleNames,proto3" json:"RuleNames,omitempty"`
	Language   []string               `protobuf:"bytes,2,rep,name=Language,proto3" json:"Language,omitempty"`
	GroupNames []string               `protobuf:"bytes,3,rep,name=GroupNames,proto3" json:"GroupNames,omitempty"`
	Severity   []string               `protobuf:"bytes,4,rep,name=Severity,proto3" json:"Severity,omitempty"`
	Purpose    []string               `protobuf:"bytes,5,rep,name=Purpose,proto3" json:"Purpose,omitempty"`
	Tag        []string               `protobuf:"bytes,6,rep,name=Tag,proto3" json:"Tag,omitempty"`
	Keyword    string                 `protobuf:"bytes,7,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	// 是否包含作为库的规则  这些规则只提供相关数据并被其他规则引用 默认不包含
	IncludeLibraryRule bool `protobuf:"varint,8,opt,name=includeLibraryRule,proto3" json:"includeLibraryRule,omitempty"` // default false // 废弃
	// for infinite list
	FromId            int64  `protobuf:"varint,9,opt,name=FromId,proto3" json:"FromId,omitempty"`    // 废弃
	UntilId           int64  `protobuf:"varint,10,opt,name=UntilId,proto3" json:"UntilId,omitempty"` // 废弃
	AfterId           int64  `protobuf:"varint,11,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	BeforeId          int64  `protobuf:"varint,12,opt,name=BeforeId,proto3" json:"BeforeId,omitempty"`
	FilterRuleKind    string `protobuf:"bytes,13,opt,name=FilterRuleKind,proto3" json:"FilterRuleKind,omitempty"`       // "buildIn"内置规则，"unBuildIn"非内置规则组, 空为所有规则
	FilterLibRuleKind string `protobuf:"bytes,14,opt,name=FilterLibRuleKind,proto3" json:"FilterLibRuleKind,omitempty"` // "lib"library规则，"noLib"非library规则，空为所有规则
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SyntaxFlowRuleFilter) Reset() {
	*x = SyntaxFlowRuleFilter{}
	mi := &file_yakgrpc_proto_msgTypes[721]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowRuleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRuleFilter) ProtoMessage() {}

func (x *SyntaxFlowRuleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[721]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRuleFilter.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRuleFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{721}
}

func (x *SyntaxFlowRuleFilter) GetRuleNames() []string {
	if x != nil {
		return x.RuleNames
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetLanguage() []string {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetPurpose() []string {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SyntaxFlowRuleFilter) GetIncludeLibraryRule() bool {
	if x != nil {
		return x.IncludeLibraryRule
	}
	return false
}

func (x *SyntaxFlowRuleFilter) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SyntaxFlowRuleFilter) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *SyntaxFlowRuleFilter) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *SyntaxFlowRuleFilter) GetBeforeId() int64 {
	if x != nil {
		return x.BeforeId
	}
	return 0
}

func (x *SyntaxFlowRuleFilter) GetFilterRuleKind() string {
	if x != nil {
		return x.FilterRuleKind
	}
	return ""
}

func (x *SyntaxFlowRuleFilter) GetFilterLibRuleKind() string {
	if x != nil {
		return x.FilterLibRuleKind
	}
	return ""
}

type SSAProgram struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// basic info
	CreateAt      int64  `protobuf:"varint,1,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt      int64  `protobuf:"varint,2,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Dbpath        string `protobuf:"bytes,5,opt,name=Dbpath,proto3" json:"Dbpath,omitempty"`
	Language      string `protobuf:"bytes,6,opt,name=Language,proto3" json:"Language,omitempty"`
	EngineVersion string `protobuf:"bytes,7,opt,name=EngineVersion,proto3" json:"EngineVersion,omitempty"`
	// need re-compile
	Recompile bool   `protobuf:"varint,8,opt,name=Recompile,proto3" json:"Recompile,omitempty"`
	Id        uint32 `protobuf:"varint,13,opt,name=Id,proto3" json:"Id,omitempty"`
	// risk number
	CriticalRiskNumber int64 `protobuf:"varint,10,opt,name=CriticalRiskNumber,proto3" json:"CriticalRiskNumber,omitempty"`
	HighRiskNumber     int64 `protobuf:"varint,9,opt,name=HighRiskNumber,proto3" json:"HighRiskNumber,omitempty"`
	WarnRiskNumber     int64 `protobuf:"varint,11,opt,name=WarnRiskNumber,proto3" json:"WarnRiskNumber,omitempty"`
	LowRiskNumber      int64 `protobuf:"varint,12,opt,name=LowRiskNumber,proto3" json:"LowRiskNumber,omitempty"`
	InfoRiskNumber     int64 `protobuf:"varint,14,opt,name=InfoRiskNumber,proto3" json:"InfoRiskNumber,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SSAProgram) Reset() {
	*x = SSAProgram{}
	mi := &file_yakgrpc_proto_msgTypes[722]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSAProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProgram) ProtoMessage() {}

func (x *SSAProgram) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[722]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProgram.ProtoReflect.Descriptor instead.
func (*SSAProgram) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{722}
}

func (x *SSAProgram) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SSAProgram) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *SSAProgram) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SSAProgram) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SSAProgram) GetDbpath() string {
	if x != nil {
		return x.Dbpath
	}
	return ""
}

func (x *SSAProgram) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SSAProgram) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

func (x *SSAProgram) GetRecompile() bool {
	if x != nil {
		return x.Recompile
	}
	return false
}

func (x *SSAProgram) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SSAProgram) GetCriticalRiskNumber() int64 {
	if x != nil {
		return x.CriticalRiskNumber
	}
	return 0
}

func (x *SSAProgram) GetHighRiskNumber() int64 {
	if x != nil {
		return x.HighRiskNumber
	}
	return 0
}

func (x *SSAProgram) GetWarnRiskNumber() int64 {
	if x != nil {
		return x.WarnRiskNumber
	}
	return 0
}

func (x *SSAProgram) GetLowRiskNumber() int64 {
	if x != nil {
		return x.LowRiskNumber
	}
	return 0
}

func (x *SSAProgram) GetInfoRiskNumber() int64 {
	if x != nil {
		return x.InfoRiskNumber
	}
	return 0
}

type SSARiskDiffItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProgramName   string                 `protobuf:"bytes,1,opt,name=ProgramName,proto3" json:"ProgramName,omitempty"`
	RuleName      string                 `protobuf:"bytes,2,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Variable      string                 `protobuf:"bytes,3,opt,name=Variable,proto3" json:"Variable,omitempty"`
	RiskRuntimeId string                 `protobuf:"bytes,4,opt,name=RiskRuntimeId,proto3" json:"RiskRuntimeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSARiskDiffItem) Reset() {
	*x = SSARiskDiffItem{}
	mi := &file_yakgrpc_proto_msgTypes[723]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSARiskDiffItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSARiskDiffItem) ProtoMessage() {}

func (x *SSARiskDiffItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[723]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSARiskDiffItem.ProtoReflect.Descriptor instead.
func (*SSARiskDiffItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{723}
}

func (x *SSARiskDiffItem) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *SSARiskDiffItem) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SSARiskDiffItem) GetVariable() string {
	if x != nil {
		return x.Variable
	}
	return ""
}

func (x *SSARiskDiffItem) GetRiskRuntimeId() string {
	if x != nil {
		return x.RiskRuntimeId
	}
	return ""
}

type SSARiskDiffRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BaseLine       *SSARiskDiffItem       `protobuf:"bytes,1,opt,name=BaseLine,proto3" json:"BaseLine,omitempty"` // 原项目
	Compare        *SSARiskDiffItem       `protobuf:"bytes,2,opt,name=Compare,proto3" json:"Compare,omitempty"`   // 被对比的项目
	DefaultCompare bool                   `protobuf:"varint,3,opt,name=DefaultCompare,proto3" json:"DefaultCompare,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SSARiskDiffRequest) Reset() {
	*x = SSARiskDiffRequest{}
	mi := &file_yakgrpc_proto_msgTypes[724]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSARiskDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSARiskDiffRequest) ProtoMessage() {}

func (x *SSARiskDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[724]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSARiskDiffRequest.ProtoReflect.Descriptor instead.
func (*SSARiskDiffRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{724}
}

func (x *SSARiskDiffRequest) GetBaseLine() *SSARiskDiffItem {
	if x != nil {
		return x.BaseLine
	}
	return nil
}

func (x *SSARiskDiffRequest) GetCompare() *SSARiskDiffItem {
	if x != nil {
		return x.Compare
	}
	return nil
}

func (x *SSARiskDiffRequest) GetDefaultCompare() bool {
	if x != nil {
		return x.DefaultCompare
	}
	return false
}

type SSARiskDiffResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseRisk      *SSARisk               `protobuf:"bytes,1,opt,name=BaseRisk,proto3" json:"BaseRisk,omitempty"`
	CompareRisk   *SSARisk               `protobuf:"bytes,2,opt,name=CompareRisk,proto3" json:"CompareRisk,omitempty"`
	RuleName      string                 `protobuf:"bytes,3,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSARiskDiffResponse) Reset() {
	*x = SSARiskDiffResponse{}
	mi := &file_yakgrpc_proto_msgTypes[725]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSARiskDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSARiskDiffResponse) ProtoMessage() {}

func (x *SSARiskDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[725]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSARiskDiffResponse.ProtoReflect.Descriptor instead.
func (*SSARiskDiffResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{725}
}

func (x *SSARiskDiffResponse) GetBaseRisk() *SSARisk {
	if x != nil {
		return x.BaseRisk
	}
	return nil
}

func (x *SSARiskDiffResponse) GetCompareRisk() *SSARisk {
	if x != nil {
		return x.CompareRisk
	}
	return nil
}

func (x *SSARiskDiffResponse) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SSARiskDiffResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SSAProgramInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"` // index
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSAProgramInput) Reset() {
	*x = SSAProgramInput{}
	mi := &file_yakgrpc_proto_msgTypes[726]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSAProgramInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProgramInput) ProtoMessage() {}

func (x *SSAProgramInput) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[726]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProgramInput.ProtoReflect.Descriptor instead.
func (*SSAProgramInput) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{726}
}

func (x *SSAProgramInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SSAProgramInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SSAProgramFilter struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	ProgramNames []string               `protobuf:"bytes,1,rep,name=ProgramNames,proto3" json:"ProgramNames,omitempty"`
	Languages    []string               `protobuf:"bytes,2,rep,name=Languages,proto3" json:"Languages,omitempty"`
	Ids          []int64                `protobuf:"varint,3,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	// update range
	BeforeUpdatedAt int64 `protobuf:"varint,5,opt,name=BeforeUpdatedAt,proto3" json:"BeforeUpdatedAt,omitempty"`
	AfterUpdatedAt  int64 `protobuf:"varint,6,opt,name=AfterUpdatedAt,proto3" json:"AfterUpdatedAt,omitempty"`
	// fuzz search
	Keyword string `protobuf:"bytes,7,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	// id range
	AfterID       int64 `protobuf:"varint,8,opt,name=AfterID,proto3" json:"AfterID,omitempty"`
	BeforeID      int64 `protobuf:"varint,9,opt,name=BeforeID,proto3" json:"BeforeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSAProgramFilter) Reset() {
	*x = SSAProgramFilter{}
	mi := &file_yakgrpc_proto_msgTypes[727]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSAProgramFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProgramFilter) ProtoMessage() {}

func (x *SSAProgramFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[727]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProgramFilter.ProtoReflect.Descriptor instead.
func (*SSAProgramFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{727}
}

func (x *SSAProgramFilter) GetProgramNames() []string {
	if x != nil {
		return x.ProgramNames
	}
	return nil
}

func (x *SSAProgramFilter) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *SSAProgramFilter) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SSAProgramFilter) GetBeforeUpdatedAt() int64 {
	if x != nil {
		return x.BeforeUpdatedAt
	}
	return 0
}

func (x *SSAProgramFilter) GetAfterUpdatedAt() int64 {
	if x != nil {
		return x.AfterUpdatedAt
	}
	return 0
}

func (x *SSAProgramFilter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SSAProgramFilter) GetAfterID() int64 {
	if x != nil {
		return x.AfterID
	}
	return 0
}

func (x *SSAProgramFilter) GetBeforeID() int64 {
	if x != nil {
		return x.BeforeID
	}
	return 0
}

type QuerySSAProgramRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paging        *Paging                `protobuf:"bytes,1,opt,name=Paging,proto3" json:"Paging,omitempty"` // abort
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *SSAProgramFilter      `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySSAProgramRequest) Reset() {
	*x = QuerySSAProgramRequest{}
	mi := &file_yakgrpc_proto_msgTypes[728]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySSAProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSAProgramRequest) ProtoMessage() {}

func (x *QuerySSAProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[728]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSAProgramRequest.ProtoReflect.Descriptor instead.
func (*QuerySSAProgramRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{728}
}

func (x *QuerySSAProgramRequest) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *QuerySSAProgramRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySSAProgramRequest) GetFilter() *SSAProgramFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UpdateSSAProgramRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProgramInput  *SSAProgramInput       `protobuf:"bytes,1,opt,name=ProgramInput,proto3" json:"ProgramInput,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSSAProgramRequest) Reset() {
	*x = UpdateSSAProgramRequest{}
	mi := &file_yakgrpc_proto_msgTypes[729]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSSAProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSAProgramRequest) ProtoMessage() {}

func (x *UpdateSSAProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[729]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSAProgramRequest.ProtoReflect.Descriptor instead.
func (*UpdateSSAProgramRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{729}
}

func (x *UpdateSSAProgramRequest) GetProgramInput() *SSAProgramInput {
	if x != nil {
		return x.ProgramInput
	}
	return nil
}

type DeleteSSAProgramRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeleteAll     bool                   `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Filter        *SSAProgramFilter      `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSSAProgramRequest) Reset() {
	*x = DeleteSSAProgramRequest{}
	mi := &file_yakgrpc_proto_msgTypes[730]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSSAProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSSAProgramRequest) ProtoMessage() {}

func (x *DeleteSSAProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[730]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSSAProgramRequest.ProtoReflect.Descriptor instead.
func (*DeleteSSAProgramRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{730}
}

func (x *DeleteSSAProgramRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteSSAProgramRequest) GetFilter() *SSAProgramFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QuerySSAProgramResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paging        *Paging                `protobuf:"bytes,1,opt,name=Paging,proto3" json:"Paging,omitempty"` // abort
	Pagination    *Paging                `protobuf:"bytes,5,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Programs      []*SSAProgram          `protobuf:"bytes,2,rep,name=Programs,proto3" json:"Programs,omitempty"` // abort
	Data          []*SSAProgram          `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySSAProgramResponse) Reset() {
	*x = QuerySSAProgramResponse{}
	mi := &file_yakgrpc_proto_msgTypes[731]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySSAProgramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSAProgramResponse) ProtoMessage() {}

func (x *QuerySSAProgramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[731]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSAProgramResponse.ProtoReflect.Descriptor instead.
func (*QuerySSAProgramResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{731}
}

func (x *QuerySSAProgramResponse) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *QuerySSAProgramResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySSAProgramResponse) GetPrograms() []*SSAProgram {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *QuerySSAProgramResponse) GetData() []*SSAProgram {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QuerySSAProgramResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateSyntaxFlowRuleRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SyntaxFlowInput *SyntaxFlowRuleInput   `protobuf:"bytes,1,opt,name=SyntaxFlowInput,proto3" json:"SyntaxFlowInput,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateSyntaxFlowRuleRequest) Reset() {
	*x = CreateSyntaxFlowRuleRequest{}
	mi := &file_yakgrpc_proto_msgTypes[732]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSyntaxFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyntaxFlowRuleRequest) ProtoMessage() {}

func (x *CreateSyntaxFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[732]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyntaxFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateSyntaxFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{732}
}

func (x *CreateSyntaxFlowRuleRequest) GetSyntaxFlowInput() *SyntaxFlowRuleInput {
	if x != nil {
		return x.SyntaxFlowInput
	}
	return nil
}

type CreateSyntaxFlowRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Rule          *SyntaxFlowRule        `protobuf:"bytes,2,opt,name=Rule,proto3" json:"Rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSyntaxFlowRuleResponse) Reset() {
	*x = CreateSyntaxFlowRuleResponse{}
	mi := &file_yakgrpc_proto_msgTypes[733]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSyntaxFlowRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyntaxFlowRuleResponse) ProtoMessage() {}

func (x *CreateSyntaxFlowRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[733]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyntaxFlowRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateSyntaxFlowRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{733}
}

func (x *CreateSyntaxFlowRuleResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CreateSyntaxFlowRuleResponse) GetRule() *SyntaxFlowRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type UpdateSyntaxFlowRuleRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SyntaxFlowInput *SyntaxFlowRuleInput   `protobuf:"bytes,1,opt,name=SyntaxFlowInput,proto3" json:"SyntaxFlowInput,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateSyntaxFlowRuleRequest) Reset() {
	*x = UpdateSyntaxFlowRuleRequest{}
	mi := &file_yakgrpc_proto_msgTypes[734]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSyntaxFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyntaxFlowRuleRequest) ProtoMessage() {}

func (x *UpdateSyntaxFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[734]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyntaxFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyntaxFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{734}
}

func (x *UpdateSyntaxFlowRuleRequest) GetSyntaxFlowInput() *SyntaxFlowRuleInput {
	if x != nil {
		return x.SyntaxFlowInput
	}
	return nil
}

type UpdateSyntaxFlowRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Rule          *SyntaxFlowRule        `protobuf:"bytes,2,opt,name=Rule,proto3" json:"Rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSyntaxFlowRuleResponse) Reset() {
	*x = UpdateSyntaxFlowRuleResponse{}
	mi := &file_yakgrpc_proto_msgTypes[735]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSyntaxFlowRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyntaxFlowRuleResponse) ProtoMessage() {}

func (x *UpdateSyntaxFlowRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[735]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyntaxFlowRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyntaxFlowRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{735}
}

func (x *UpdateSyntaxFlowRuleResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *UpdateSyntaxFlowRuleResponse) GetRule() *SyntaxFlowRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type QuerySyntaxFlowRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	DbMessage     *DbOperateMessage      `protobuf:"bytes,2,opt,name=DbMessage,proto3" json:"DbMessage,omitempty"`
	Rule          []*SyntaxFlowRule      `protobuf:"bytes,3,rep,name=Rule,proto3" json:"Rule,omitempty"`
	Total         uint64                 `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowRuleResponse) Reset() {
	*x = QuerySyntaxFlowRuleResponse{}
	mi := &file_yakgrpc_proto_msgTypes[736]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowRuleResponse) ProtoMessage() {}

func (x *QuerySyntaxFlowRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[736]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowRuleResponse.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{736}
}

func (x *QuerySyntaxFlowRuleResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowRuleResponse) GetDbMessage() *DbOperateMessage {
	if x != nil {
		return x.DbMessage
	}
	return nil
}

func (x *QuerySyntaxFlowRuleResponse) GetRule() []*SyntaxFlowRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *QuerySyntaxFlowRuleResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteSyntaxFlowRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SyntaxFlowRuleFilter  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSyntaxFlowRuleRequest) Reset() {
	*x = DeleteSyntaxFlowRuleRequest{}
	mi := &file_yakgrpc_proto_msgTypes[737]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSyntaxFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyntaxFlowRuleRequest) ProtoMessage() {}

func (x *DeleteSyntaxFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[737]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyntaxFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyntaxFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{737}
}

func (x *DeleteSyntaxFlowRuleRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CheckSyntaxFlowRuleUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckSyntaxFlowRuleUpdateRequest) Reset() {
	*x = CheckSyntaxFlowRuleUpdateRequest{}
	mi := &file_yakgrpc_proto_msgTypes[738]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckSyntaxFlowRuleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSyntaxFlowRuleUpdateRequest) ProtoMessage() {}

func (x *CheckSyntaxFlowRuleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[738]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSyntaxFlowRuleUpdateRequest.ProtoReflect.Descriptor instead.
func (*CheckSyntaxFlowRuleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{738}
}

type CheckSyntaxFlowRuleUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NeedUpdate    bool                   `protobuf:"varint,1,opt,name=NeedUpdate,proto3" json:"NeedUpdate,omitempty"` // 是否需要更新
	State         string                 `protobuf:"bytes,2,opt,name=State,proto3" json:"State,omitempty"`            // 更新状态，没有规则"empty",规则需要更新"to_update"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckSyntaxFlowRuleUpdateResponse) Reset() {
	*x = CheckSyntaxFlowRuleUpdateResponse{}
	mi := &file_yakgrpc_proto_msgTypes[739]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckSyntaxFlowRuleUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSyntaxFlowRuleUpdateResponse) ProtoMessage() {}

func (x *CheckSyntaxFlowRuleUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[739]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSyntaxFlowRuleUpdateResponse.ProtoReflect.Descriptor instead.
func (*CheckSyntaxFlowRuleUpdateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{739}
}

func (x *CheckSyntaxFlowRuleUpdateResponse) GetNeedUpdate() bool {
	if x != nil {
		return x.NeedUpdate
	}
	return false
}

func (x *CheckSyntaxFlowRuleUpdateResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type ApplySyntaxFlowRuleUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplySyntaxFlowRuleUpdateRequest) Reset() {
	*x = ApplySyntaxFlowRuleUpdateRequest{}
	mi := &file_yakgrpc_proto_msgTypes[740]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplySyntaxFlowRuleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySyntaxFlowRuleUpdateRequest) ProtoMessage() {}

func (x *ApplySyntaxFlowRuleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[740]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySyntaxFlowRuleUpdateRequest.ProtoReflect.Descriptor instead.
func (*ApplySyntaxFlowRuleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{740}
}

type ApplySyntaxFlowRuleUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Percent       float64                `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"` // 更新进度百分比
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`   // 更新状态信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplySyntaxFlowRuleUpdateResponse) Reset() {
	*x = ApplySyntaxFlowRuleUpdateResponse{}
	mi := &file_yakgrpc_proto_msgTypes[741]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplySyntaxFlowRuleUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySyntaxFlowRuleUpdateResponse) ProtoMessage() {}

func (x *ApplySyntaxFlowRuleUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[741]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySyntaxFlowRuleUpdateResponse.ProtoReflect.Descriptor instead.
func (*ApplySyntaxFlowRuleUpdateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{741}
}

func (x *ApplySyntaxFlowRuleUpdateResponse) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ApplySyntaxFlowRuleUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SyntaxFlowRuleGroupFilter struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	GroupNames []string               `protobuf:"bytes,2,rep,name=GroupNames,proto3" json:"GroupNames,omitempty"`
	// for fuzzing search
	KeyWord         string `protobuf:"bytes,1,opt,name=KeyWord,proto3" json:"KeyWord,omitempty"`
	FilterGroupKind string `protobuf:"bytes,3,opt,name=FilterGroupKind,proto3" json:"FilterGroupKind,omitempty"` // "buildIn"内置组，"unBuildIn"非内置组, 空为所有
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SyntaxFlowRuleGroupFilter) Reset() {
	*x = SyntaxFlowRuleGroupFilter{}
	mi := &file_yakgrpc_proto_msgTypes[742]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowRuleGroupFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRuleGroupFilter) ProtoMessage() {}

func (x *SyntaxFlowRuleGroupFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[742]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRuleGroupFilter.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRuleGroupFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{742}
}

func (x *SyntaxFlowRuleGroupFilter) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *SyntaxFlowRuleGroupFilter) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *SyntaxFlowRuleGroupFilter) GetFilterGroupKind() string {
	if x != nil {
		return x.FilterGroupKind
	}
	return ""
}

type SyntaxFlowGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	IsBuildIn     bool                   `protobuf:"varint,3,opt,name=IsBuildIn,proto3" json:"IsBuildIn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowGroup) Reset() {
	*x = SyntaxFlowGroup{}
	mi := &file_yakgrpc_proto_msgTypes[743]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowGroup) ProtoMessage() {}

func (x *SyntaxFlowGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[743]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowGroup.ProtoReflect.Descriptor instead.
func (*SyntaxFlowGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{743}
}

func (x *SyntaxFlowGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *SyntaxFlowGroup) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SyntaxFlowGroup) GetIsBuildIn() bool {
	if x != nil {
		return x.IsBuildIn
	}
	return false
}

type QuerySyntaxFlowRuleGroupRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Filter        *SyntaxFlowRuleGroupFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Pagination    *Paging                    `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowRuleGroupRequest) Reset() {
	*x = QuerySyntaxFlowRuleGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[744]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowRuleGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowRuleGroupRequest) ProtoMessage() {}

func (x *QuerySyntaxFlowRuleGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[744]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowRuleGroupRequest.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowRuleGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{744}
}

func (x *QuerySyntaxFlowRuleGroupRequest) GetFilter() *SyntaxFlowRuleGroupFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QuerySyntaxFlowRuleGroupRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QuerySyntaxFlowRuleGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         []*SyntaxFlowGroup     `protobuf:"bytes,1,rep,name=Group,proto3" json:"Group,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowRuleGroupResponse) Reset() {
	*x = QuerySyntaxFlowRuleGroupResponse{}
	mi := &file_yakgrpc_proto_msgTypes[745]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowRuleGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowRuleGroupResponse) ProtoMessage() {}

func (x *QuerySyntaxFlowRuleGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[745]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowRuleGroupResponse.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowRuleGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{745}
}

func (x *QuerySyntaxFlowRuleGroupResponse) GetGroup() []*SyntaxFlowGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *QuerySyntaxFlowRuleGroupResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CreateSyntaxFlowGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSyntaxFlowGroupRequest) Reset() {
	*x = CreateSyntaxFlowGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[746]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSyntaxFlowGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyntaxFlowGroupRequest) ProtoMessage() {}

func (x *CreateSyntaxFlowGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[746]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyntaxFlowGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateSyntaxFlowGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{746}
}

func (x *CreateSyntaxFlowGroupRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type UpdateSyntaxFlowRuleGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OldGroupName  string                 `protobuf:"bytes,1,opt,name=OldGroupName,proto3" json:"OldGroupName,omitempty"`
	NewGroupName  string                 `protobuf:"bytes,2,opt,name=NewGroupName,proto3" json:"NewGroupName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSyntaxFlowRuleGroupRequest) Reset() {
	*x = UpdateSyntaxFlowRuleGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[747]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSyntaxFlowRuleGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyntaxFlowRuleGroupRequest) ProtoMessage() {}

func (x *UpdateSyntaxFlowRuleGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[747]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyntaxFlowRuleGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyntaxFlowRuleGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{747}
}

func (x *UpdateSyntaxFlowRuleGroupRequest) GetOldGroupName() string {
	if x != nil {
		return x.OldGroupName
	}
	return ""
}

func (x *UpdateSyntaxFlowRuleGroupRequest) GetNewGroupName() string {
	if x != nil {
		return x.NewGroupName
	}
	return ""
}

type UpdateSyntaxFlowRuleAndGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SyntaxFlowRuleFilter  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	AddGroups     []string               `protobuf:"bytes,2,rep,name=AddGroups,proto3" json:"AddGroups,omitempty"`
	RemoveGroups  []string               `protobuf:"bytes,3,rep,name=RemoveGroups,proto3" json:"RemoveGroups,omitempty"`
	All           bool                   `protobuf:"varint,4,opt,name=All,proto3" json:"All,omitempty"` // abort
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) Reset() {
	*x = UpdateSyntaxFlowRuleAndGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[748]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyntaxFlowRuleAndGroupRequest) ProtoMessage() {}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[748]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyntaxFlowRuleAndGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyntaxFlowRuleAndGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{748}
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) GetAddGroups() []string {
	if x != nil {
		return x.AddGroups
	}
	return nil
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) GetRemoveGroups() []string {
	if x != nil {
		return x.RemoveGroups
	}
	return nil
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type QuerySyntaxFlowSameGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SyntaxFlowRuleFilter  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowSameGroupRequest) Reset() {
	*x = QuerySyntaxFlowSameGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[749]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowSameGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowSameGroupRequest) ProtoMessage() {}

func (x *QuerySyntaxFlowSameGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[749]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowSameGroupRequest.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowSameGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{749}
}

func (x *QuerySyntaxFlowSameGroupRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QuerySyntaxFlowSameGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         []*SyntaxFlowGroup     `protobuf:"bytes,1,rep,name=Group,proto3" json:"Group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowSameGroupResponse) Reset() {
	*x = QuerySyntaxFlowSameGroupResponse{}
	mi := &file_yakgrpc_proto_msgTypes[750]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowSameGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowSameGroupResponse) ProtoMessage() {}

func (x *QuerySyntaxFlowSameGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[750]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowSameGroupResponse.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowSameGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{750}
}

func (x *QuerySyntaxFlowSameGroupResponse) GetGroup() []*SyntaxFlowGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type DeleteSyntaxFlowRuleGroupRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Filter        *SyntaxFlowRuleGroupFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSyntaxFlowRuleGroupRequest) Reset() {
	*x = DeleteSyntaxFlowRuleGroupRequest{}
	mi := &file_yakgrpc_proto_msgTypes[751]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSyntaxFlowRuleGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyntaxFlowRuleGroupRequest) ProtoMessage() {}

func (x *DeleteSyntaxFlowRuleGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[751]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyntaxFlowRuleGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyntaxFlowRuleGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{751}
}

func (x *DeleteSyntaxFlowRuleGroupRequest) GetFilter() *SyntaxFlowRuleGroupFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SyntaxFlowRuleToOnlineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *SyntaxFlowRuleFilter  `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Token         string                 `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowRuleToOnlineRequest) Reset() {
	*x = SyntaxFlowRuleToOnlineRequest{}
	mi := &file_yakgrpc_proto_msgTypes[752]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowRuleToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRuleToOnlineRequest) ProtoMessage() {}

func (x *SyntaxFlowRuleToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[752]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRuleToOnlineRequest.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRuleToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{752}
}

func (x *SyntaxFlowRuleToOnlineRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SyntaxFlowRuleToOnlineRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SyntaxFlowRuleToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SyntaxFlowRuleOnlineProgress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 进度
	Progress      float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message       string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType   string  `protobuf:"bytes,3,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowRuleOnlineProgress) Reset() {
	*x = SyntaxFlowRuleOnlineProgress{}
	mi := &file_yakgrpc_proto_msgTypes[753]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowRuleOnlineProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRuleOnlineProgress) ProtoMessage() {}

func (x *SyntaxFlowRuleOnlineProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[753]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRuleOnlineProgress.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRuleOnlineProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{753}
}

func (x *SyntaxFlowRuleOnlineProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SyntaxFlowRuleOnlineProgress) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SyntaxFlowRuleOnlineProgress) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type DownloadSyntaxFlowRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Filter        *SyntaxFlowRuleFilter  `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadSyntaxFlowRuleRequest) Reset() {
	*x = DownloadSyntaxFlowRuleRequest{}
	mi := &file_yakgrpc_proto_msgTypes[754]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadSyntaxFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSyntaxFlowRuleRequest) ProtoMessage() {}

func (x *DownloadSyntaxFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[754]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSyntaxFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*DownloadSyntaxFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{754}
}

func (x *DownloadSyntaxFlowRuleRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadSyntaxFlowRuleRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SyntaxFlowScanRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	ControlMode string                 `protobuf:"bytes,1,opt,name=ControlMode,proto3" json:"ControlMode,omitempty"` // 控制模式 "start" "pause" "resume" "status"
	// 启动扫描任务
	Filter      *SyntaxFlowRuleFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`           // 用于指定扫描的规则
	ProgramName []string              `protobuf:"bytes,3,rep,name=ProgramName,proto3" json:"ProgramName,omitempty"` // 用于指定扫描的程序
	// 恢复扫描任务
	ResumeTaskId string `protobuf:"bytes,5,opt,name=ResumeTaskId,proto3" json:"ResumeTaskId,omitempty"` // 恢复任务ID
	// 其他参数
	IgnoreLanguage bool `protobuf:"varint,4,opt,name=IgnoreLanguage,proto3" json:"IgnoreLanguage,omitempty"` // 是否忽略语言 默认为false 将会只运行和当前项目语言一致的规则，最后运行的规则可能会比当前选中的规则少一些。
	// for new rule scan task
	RuleInput *SyntaxFlowRuleInput `protobuf:"bytes,6,opt,name=RuleInput,proto3" json:"RuleInput,omitempty"` // 用于新建规则时的调试功能
	// 并发，默认5
	Concurrency uint32 `protobuf:"varint,7,opt,name=Concurrency,proto3" json:"Concurrency,omitempty"`
	// compile data only in memory
	Memory bool `protobuf:"varint,8,opt,name=Memory,proto3" json:"Memory,omitempty"`
	// 根据项目扫描
	SSAProjectId  uint64 `protobuf:"varint,9,opt,name=SSAProjectId,proto3" json:"SSAProjectId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowScanRequest) Reset() {
	*x = SyntaxFlowScanRequest{}
	mi := &file_yakgrpc_proto_msgTypes[755]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowScanRequest) ProtoMessage() {}

func (x *SyntaxFlowScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[755]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowScanRequest.ProtoReflect.Descriptor instead.
func (*SyntaxFlowScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{755}
}

func (x *SyntaxFlowScanRequest) GetControlMode() string {
	if x != nil {
		return x.ControlMode
	}
	return ""
}

func (x *SyntaxFlowScanRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SyntaxFlowScanRequest) GetProgramName() []string {
	if x != nil {
		return x.ProgramName
	}
	return nil
}

func (x *SyntaxFlowScanRequest) GetResumeTaskId() string {
	if x != nil {
		return x.ResumeTaskId
	}
	return ""
}

func (x *SyntaxFlowScanRequest) GetIgnoreLanguage() bool {
	if x != nil {
		return x.IgnoreLanguage
	}
	return false
}

func (x *SyntaxFlowScanRequest) GetRuleInput() *SyntaxFlowRuleInput {
	if x != nil {
		return x.RuleInput
	}
	return nil
}

func (x *SyntaxFlowScanRequest) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *SyntaxFlowScanRequest) GetMemory() bool {
	if x != nil {
		return x.Memory
	}
	return false
}

func (x *SyntaxFlowScanRequest) GetSSAProjectId() uint64 {
	if x != nil {
		return x.SSAProjectId
	}
	return 0
}

type QuerySyntaxFlowScanTaskRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Pagination    *Paging                   `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *SyntaxFlowScanTaskFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ShowDiffRisk  bool                      `protobuf:"varint,3,opt,name=ShowDiffRisk,proto3" json:"ShowDiffRisk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowScanTaskRequest) Reset() {
	*x = QuerySyntaxFlowScanTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[756]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowScanTaskRequest) ProtoMessage() {}

func (x *QuerySyntaxFlowScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[756]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowScanTaskRequest.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{756}
}

func (x *QuerySyntaxFlowScanTaskRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowScanTaskRequest) GetFilter() *SyntaxFlowScanTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QuerySyntaxFlowScanTaskRequest) GetShowDiffRisk() bool {
	if x != nil {
		return x.ShowDiffRisk
	}
	return false
}

type SyntaxFlowScanTaskFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Programs      []string               `protobuf:"bytes,1,rep,name=Programs,proto3" json:"Programs,omitempty"`
	Status        []string               `protobuf:"bytes,2,rep,name=Status,proto3" json:"Status,omitempty"`
	TaskIds       []string               `protobuf:"bytes,3,rep,name=TaskIds,proto3" json:"TaskIds,omitempty"`
	FromId        int64                  `protobuf:"varint,4,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId       int64                  `protobuf:"varint,5,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	Keyword       string                 `protobuf:"bytes,6,opt,name=Keyword,proto3" json:"Keyword,omitempty"`     // fuzz search program-name
	Kind          []string               `protobuf:"bytes,7,rep,name=Kind,proto3" json:"Kind,omitempty"`           // "debug" | "scan";
	HaveRisk      bool                   `protobuf:"varint,17,opt,name=HaveRisk,proto3" json:"HaveRisk,omitempty"` // 是否有风险
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowScanTaskFilter) Reset() {
	*x = SyntaxFlowScanTaskFilter{}
	mi := &file_yakgrpc_proto_msgTypes[757]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowScanTaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowScanTaskFilter) ProtoMessage() {}

func (x *SyntaxFlowScanTaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[757]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowScanTaskFilter.ProtoReflect.Descriptor instead.
func (*SyntaxFlowScanTaskFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{757}
}

func (x *SyntaxFlowScanTaskFilter) GetPrograms() []string {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *SyntaxFlowScanTaskFilter) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SyntaxFlowScanTaskFilter) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *SyntaxFlowScanTaskFilter) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SyntaxFlowScanTaskFilter) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *SyntaxFlowScanTaskFilter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SyntaxFlowScanTaskFilter) GetKind() []string {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *SyntaxFlowScanTaskFilter) GetHaveRisk() bool {
	if x != nil {
		return x.HaveRisk
	}
	return false
}

type QuerySyntaxFlowScanTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*SyntaxFlowScanTask  `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowScanTaskResponse) Reset() {
	*x = QuerySyntaxFlowScanTaskResponse{}
	mi := &file_yakgrpc_proto_msgTypes[758]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowScanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowScanTaskResponse) ProtoMessage() {}

func (x *QuerySyntaxFlowScanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[758]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowScanTaskResponse.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowScanTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{758}
}

func (x *QuerySyntaxFlowScanTaskResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowScanTaskResponse) GetData() []*SyntaxFlowScanTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QuerySyntaxFlowScanTaskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SyntaxFlowScanTask struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Id        uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt int64                  `protobuf:"varint,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	TaskId    string                 `protobuf:"bytes,4,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	Programs  []string               `protobuf:"bytes,5,rep,name=Programs,proto3" json:"Programs,omitempty"`
	RuleCount int64                  `protobuf:"varint,6,opt,name=RuleCount,proto3" json:"RuleCount,omitempty"`
	Status    string                 `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"` // executing / paused / done / error
	Reason    string                 `protobuf:"bytes,8,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// query execute
	FailedQuery  int64 `protobuf:"varint,9,opt,name=FailedQuery,proto3" json:"FailedQuery,omitempty"`
	SkipQuery    int64 `protobuf:"varint,10,opt,name=SkipQuery,proto3" json:"SkipQuery,omitempty"`
	SuccessQuery int64 `protobuf:"varint,11,opt,name=SuccessQuery,proto3" json:"SuccessQuery,omitempty"`
	// risk
	RiskCount int64 `protobuf:"varint,12,opt,name=RiskCount,proto3" json:"RiskCount,omitempty"`
	// query process
	TotalQuery int64                  `protobuf:"varint,13,opt,name=TotalQuery,proto3" json:"TotalQuery,omitempty"`
	Config     *SyntaxFlowScanRequest `protobuf:"bytes,14,opt,name=Config,proto3" json:"Config,omitempty"`
	Kind       string                 `protobuf:"bytes,15,opt,name=Kind,proto3" json:"Kind,omitempty"` // "debug" | "scan"
	// diff
	NewRiskCount     int64 `protobuf:"varint,16,opt,name=NewRiskCount,proto3" json:"NewRiskCount,omitempty"`
	InfoCount        int64 `protobuf:"varint,17,opt,name=InfoCount,proto3" json:"InfoCount,omitempty"`
	LowCount         int64 `protobuf:"varint,18,opt,name=LowCount,proto3" json:"LowCount,omitempty"`
	WarningCount     int64 `protobuf:"varint,19,opt,name=WarningCount,proto3" json:"WarningCount,omitempty"`
	CriticalCount    int64 `protobuf:"varint,20,opt,name=CriticalCount,proto3" json:"CriticalCount,omitempty"`
	HighCount        int64 `protobuf:"varint,21,opt,name=HighCount,proto3" json:"HighCount,omitempty"`
	NewInfoCount     int64 `protobuf:"varint,22,opt,name=NewInfoCount,proto3" json:"NewInfoCount,omitempty"`
	NewLowCount      int64 `protobuf:"varint,23,opt,name=NewLowCount,proto3" json:"NewLowCount,omitempty"`
	NewWarningCount  int64 `protobuf:"varint,24,opt,name=NewWarningCount,proto3" json:"NewWarningCount,omitempty"`
	NewCriticalCount int64 `protobuf:"varint,25,opt,name=NewCriticalCount,proto3" json:"NewCriticalCount,omitempty"`
	NewHighCount     int64 `protobuf:"varint,26,opt,name=NewHighCount,proto3" json:"NewHighCount,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SyntaxFlowScanTask) Reset() {
	*x = SyntaxFlowScanTask{}
	mi := &file_yakgrpc_proto_msgTypes[759]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowScanTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowScanTask) ProtoMessage() {}

func (x *SyntaxFlowScanTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[759]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowScanTask.ProtoReflect.Descriptor instead.
func (*SyntaxFlowScanTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{759}
}

func (x *SyntaxFlowScanTask) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SyntaxFlowScanTask) GetPrograms() []string {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *SyntaxFlowScanTask) GetRuleCount() int64 {
	if x != nil {
		return x.RuleCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SyntaxFlowScanTask) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SyntaxFlowScanTask) GetFailedQuery() int64 {
	if x != nil {
		return x.FailedQuery
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetSkipQuery() int64 {
	if x != nil {
		return x.SkipQuery
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetSuccessQuery() int64 {
	if x != nil {
		return x.SuccessQuery
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetRiskCount() int64 {
	if x != nil {
		return x.RiskCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetTotalQuery() int64 {
	if x != nil {
		return x.TotalQuery
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetConfig() *SyntaxFlowScanRequest {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SyntaxFlowScanTask) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SyntaxFlowScanTask) GetNewRiskCount() int64 {
	if x != nil {
		return x.NewRiskCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetInfoCount() int64 {
	if x != nil {
		return x.InfoCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetLowCount() int64 {
	if x != nil {
		return x.LowCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetWarningCount() int64 {
	if x != nil {
		return x.WarningCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetCriticalCount() int64 {
	if x != nil {
		return x.CriticalCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetHighCount() int64 {
	if x != nil {
		return x.HighCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetNewInfoCount() int64 {
	if x != nil {
		return x.NewInfoCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetNewLowCount() int64 {
	if x != nil {
		return x.NewLowCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetNewWarningCount() int64 {
	if x != nil {
		return x.NewWarningCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetNewCriticalCount() int64 {
	if x != nil {
		return x.NewCriticalCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetNewHighCount() int64 {
	if x != nil {
		return x.NewHighCount
	}
	return 0
}

type DeleteSyntaxFlowScanTaskRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	DeleteAll     bool                      `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Filter        *SyntaxFlowScanTaskFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSyntaxFlowScanTaskRequest) Reset() {
	*x = DeleteSyntaxFlowScanTaskRequest{}
	mi := &file_yakgrpc_proto_msgTypes[760]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSyntaxFlowScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyntaxFlowScanTaskRequest) ProtoMessage() {}

func (x *DeleteSyntaxFlowScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[760]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyntaxFlowScanTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyntaxFlowScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{760}
}

func (x *DeleteSyntaxFlowScanTaskRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteSyntaxFlowScanTaskRequest) GetFilter() *SyntaxFlowScanTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SyntaxFlowScanResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	TaskID string                 `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	// 扫描状态
	Status     string      `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"` // "executing" | "done" | "paused" | "error"
	ExecResult *ExecResult `protobuf:"bytes,3,opt,name=ExecResult,proto3" json:"ExecResult,omitempty"`
	// result
	Result        *SyntaxFlowResult `protobuf:"bytes,4,opt,name=Result,proto3" json:"Result,omitempty"`
	Risks         []*Risk           `protobuf:"bytes,5,rep,name=risks,proto3" json:"risks,omitempty"`
	SSARisks      []*SSARisk        `protobuf:"bytes,6,rep,name=SSARisks,proto3" json:"SSARisks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowScanResponse) Reset() {
	*x = SyntaxFlowScanResponse{}
	mi := &file_yakgrpc_proto_msgTypes[761]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowScanResponse) ProtoMessage() {}

func (x *SyntaxFlowScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[761]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowScanResponse.ProtoReflect.Descriptor instead.
func (*SyntaxFlowScanResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{761}
}

func (x *SyntaxFlowScanResponse) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SyntaxFlowScanResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SyntaxFlowScanResponse) GetExecResult() *ExecResult {
	if x != nil {
		return x.ExecResult
	}
	return nil
}

func (x *SyntaxFlowScanResponse) GetResult() *SyntaxFlowResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SyntaxFlowScanResponse) GetRisks() []*Risk {
	if x != nil {
		return x.Risks
	}
	return nil
}

func (x *SyntaxFlowScanResponse) GetSSARisks() []*SSARisk {
	if x != nil {
		return x.SSARisks
	}
	return nil
}

type SyntaxFlowResultFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskIDs       []string               `protobuf:"bytes,1,rep,name=TaskIDs,proto3" json:"TaskIDs,omitempty"`
	ResultIDs     []string               `protobuf:"bytes,2,rep,name=ResultIDs,proto3" json:"ResultIDs,omitempty"`
	RuleNames     []string               `protobuf:"bytes,3,rep,name=RuleNames,proto3" json:"RuleNames,omitempty"`
	ProgramNames  []string               `protobuf:"bytes,4,rep,name=ProgramNames,proto3" json:"ProgramNames,omitempty"`
	Keyword       string                 `protobuf:"bytes,5,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	OnlyRisk      bool                   `protobuf:"varint,6,opt,name=OnlyRisk,proto3" json:"OnlyRisk,omitempty"`
	AfterID       int64                  `protobuf:"varint,7,opt,name=AfterID,proto3" json:"AfterID,omitempty"`
	BeforeID      int64                  `protobuf:"varint,8,opt,name=BeforeID,proto3" json:"BeforeID,omitempty"`
	Severity      []string               `protobuf:"bytes,9,rep,name=Severity,proto3" json:"Severity,omitempty"` //  "info", "low", "middle", "critical", "high"
	Kind          []string               `protobuf:"bytes,10,rep,name=Kind,proto3" json:"Kind,omitempty"`        //   "query" | "debug" | "scan"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowResultFilter) Reset() {
	*x = SyntaxFlowResultFilter{}
	mi := &file_yakgrpc_proto_msgTypes[762]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowResultFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowResultFilter) ProtoMessage() {}

func (x *SyntaxFlowResultFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[762]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowResultFilter.ProtoReflect.Descriptor instead.
func (*SyntaxFlowResultFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{762}
}

func (x *SyntaxFlowResultFilter) GetTaskIDs() []string {
	if x != nil {
		return x.TaskIDs
	}
	return nil
}

func (x *SyntaxFlowResultFilter) GetResultIDs() []string {
	if x != nil {
		return x.ResultIDs
	}
	return nil
}

func (x *SyntaxFlowResultFilter) GetRuleNames() []string {
	if x != nil {
		return x.RuleNames
	}
	return nil
}

func (x *SyntaxFlowResultFilter) GetProgramNames() []string {
	if x != nil {
		return x.ProgramNames
	}
	return nil
}

func (x *SyntaxFlowResultFilter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SyntaxFlowResultFilter) GetOnlyRisk() bool {
	if x != nil {
		return x.OnlyRisk
	}
	return false
}

func (x *SyntaxFlowResultFilter) GetAfterID() int64 {
	if x != nil {
		return x.AfterID
	}
	return 0
}

func (x *SyntaxFlowResultFilter) GetBeforeID() int64 {
	if x != nil {
		return x.BeforeID
	}
	return 0
}

func (x *SyntaxFlowResultFilter) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *SyntaxFlowResultFilter) GetKind() []string {
	if x != nil {
		return x.Kind
	}
	return nil
}

type QuerySyntaxFlowResultRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Pagination    *Paging                 `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *SyntaxFlowResultFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowResultRequest) Reset() {
	*x = QuerySyntaxFlowResultRequest{}
	mi := &file_yakgrpc_proto_msgTypes[763]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowResultRequest) ProtoMessage() {}

func (x *QuerySyntaxFlowResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[763]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowResultRequest.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowResultRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{763}
}

func (x *QuerySyntaxFlowResultRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowResultRequest) GetFilter() *SyntaxFlowResultFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QuerySyntaxFlowResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	DbMessage     *DbOperateMessage      `protobuf:"bytes,2,opt,name=DbMessage,proto3" json:"DbMessage,omitempty"`
	Results       []*SyntaxFlowResult    `protobuf:"bytes,3,rep,name=Results,proto3" json:"Results,omitempty"`
	Total         uint64                 `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySyntaxFlowResultResponse) Reset() {
	*x = QuerySyntaxFlowResultResponse{}
	mi := &file_yakgrpc_proto_msgTypes[764]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySyntaxFlowResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowResultResponse) ProtoMessage() {}

func (x *QuerySyntaxFlowResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[764]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowResultResponse.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowResultResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{764}
}

func (x *QuerySyntaxFlowResultResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowResultResponse) GetDbMessage() *DbOperateMessage {
	if x != nil {
		return x.DbMessage
	}
	return nil
}

func (x *QuerySyntaxFlowResultResponse) GetResults() []*SyntaxFlowResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *QuerySyntaxFlowResultResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SyntaxFlowResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// result ID for yakurl(syntaxflow://)
	ResultID uint64 `protobuf:"varint,1,opt,name=ResultID,proto3" json:"ResultID,omitempty"`
	TaskID   string `protobuf:"bytes,2,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	// rule info
	RuleName    string `protobuf:"bytes,3,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleZh     string `protobuf:"bytes,5,opt,name=TitleZh,proto3" json:"TitleZh,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	Severity    string `protobuf:"bytes,7,opt,name=Severity,proto3" json:"Severity,omitempty"` //  "info", "low", "middle", "critical", "high"
	Purpose     string `protobuf:"bytes,8,opt,name=Purpose,proto3" json:"Purpose,omitempty"`
	// target info
	ProgramName string `protobuf:"bytes,9,opt,name=ProgramName,proto3" json:"ProgramName,omitempty"`
	Language    string `protobuf:"bytes,10,opt,name=Language,proto3" json:"Language,omitempty"`
	// runtime info
	RiskCount     uint64 `protobuf:"varint,11,opt,name=RiskCount,proto3" json:"RiskCount,omitempty"`
	RuleContent   string `protobuf:"bytes,12,opt,name=RuleContent,proto3" json:"RuleContent,omitempty"`
	Kind          string `protobuf:"bytes,13,opt,name=Kind,proto3" json:"Kind,omitempty"`         // "query" | "debug" | "scan"
	SaveKind      string `protobuf:"bytes,14,opt,name=SaveKind,proto3" json:"SaveKind,omitempty"` // "memory" | "database"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxFlowResult) Reset() {
	*x = SyntaxFlowResult{}
	mi := &file_yakgrpc_proto_msgTypes[765]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxFlowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowResult) ProtoMessage() {}

func (x *SyntaxFlowResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[765]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowResult.ProtoReflect.Descriptor instead.
func (*SyntaxFlowResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{765}
}

func (x *SyntaxFlowResult) GetResultID() uint64 {
	if x != nil {
		return x.ResultID
	}
	return 0
}

func (x *SyntaxFlowResult) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SyntaxFlowResult) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SyntaxFlowResult) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SyntaxFlowResult) GetTitleZh() string {
	if x != nil {
		return x.TitleZh
	}
	return ""
}

func (x *SyntaxFlowResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SyntaxFlowResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SyntaxFlowResult) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *SyntaxFlowResult) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *SyntaxFlowResult) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SyntaxFlowResult) GetRiskCount() uint64 {
	if x != nil {
		return x.RiskCount
	}
	return 0
}

func (x *SyntaxFlowResult) GetRuleContent() string {
	if x != nil {
		return x.RuleContent
	}
	return ""
}

func (x *SyntaxFlowResult) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SyntaxFlowResult) GetSaveKind() string {
	if x != nil {
		return x.SaveKind
	}
	return ""
}

type DeleteSyntaxFlowResultRequest struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	DeleteContainRisk bool                    `protobuf:"varint,1,opt,name=DeleteContainRisk,proto3" json:"DeleteContainRisk,omitempty"` //  是否删除带风险的结果
	DeleteAll         bool                    `protobuf:"varint,2,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`                 // DeleteAll 的保护
	Filter            *SyntaxFlowResultFilter `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeleteSyntaxFlowResultRequest) Reset() {
	*x = DeleteSyntaxFlowResultRequest{}
	mi := &file_yakgrpc_proto_msgTypes[766]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSyntaxFlowResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyntaxFlowResultRequest) ProtoMessage() {}

func (x *DeleteSyntaxFlowResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[766]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyntaxFlowResultRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyntaxFlowResultRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{766}
}

func (x *DeleteSyntaxFlowResultRequest) GetDeleteContainRisk() bool {
	if x != nil {
		return x.DeleteContainRisk
	}
	return false
}

func (x *DeleteSyntaxFlowResultRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteSyntaxFlowResultRequest) GetFilter() *SyntaxFlowResultFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DeleteSyntaxFlowResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSyntaxFlowResultResponse) Reset() {
	*x = DeleteSyntaxFlowResultResponse{}
	mi := &file_yakgrpc_proto_msgTypes[767]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSyntaxFlowResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyntaxFlowResultResponse) ProtoMessage() {}

func (x *DeleteSyntaxFlowResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[767]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyntaxFlowResultResponse.ProtoReflect.Descriptor instead.
func (*DeleteSyntaxFlowResultResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{767}
}

func (x *DeleteSyntaxFlowResultResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type QueryPluginEnvRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []string               `protobuf:"bytes,1,rep,name=Key,proto3" json:"Key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPluginEnvRequest) Reset() {
	*x = QueryPluginEnvRequest{}
	mi := &file_yakgrpc_proto_msgTypes[768]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPluginEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPluginEnvRequest) ProtoMessage() {}

func (x *QueryPluginEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[768]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPluginEnvRequest.ProtoReflect.Descriptor instead.
func (*QueryPluginEnvRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{768}
}

func (x *QueryPluginEnvRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

type PluginEnvData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Env           []*KVPair              `protobuf:"bytes,1,rep,name=Env,proto3" json:"Env,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginEnvData) Reset() {
	*x = PluginEnvData{}
	mi := &file_yakgrpc_proto_msgTypes[769]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginEnvData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginEnvData) ProtoMessage() {}

func (x *PluginEnvData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[769]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginEnvData.ProtoReflect.Descriptor instead.
func (*PluginEnvData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{769}
}

func (x *PluginEnvData) GetEnv() []*KVPair {
	if x != nil {
		return x.Env
	}
	return nil
}

type DeletePluginEnvRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	All           bool                   `protobuf:"varint,2,opt,name=All,proto3" json:"All,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePluginEnvRequest) Reset() {
	*x = DeletePluginEnvRequest{}
	mi := &file_yakgrpc_proto_msgTypes[770]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePluginEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePluginEnvRequest) ProtoMessage() {}

func (x *DeletePluginEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[770]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePluginEnvRequest.ProtoReflect.Descriptor instead.
func (*DeletePluginEnvRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{770}
}

func (x *DeletePluginEnvRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeletePluginEnvRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type GetAllFuzztagInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllFuzztagInfoRequest) Reset() {
	*x = GetAllFuzztagInfoRequest{}
	mi := &file_yakgrpc_proto_msgTypes[771]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllFuzztagInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllFuzztagInfoRequest) ProtoMessage() {}

func (x *GetAllFuzztagInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[771]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllFuzztagInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAllFuzztagInfoRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{771}
}

func (x *GetAllFuzztagInfoRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetAllFuzztagInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*FuzztagInfo         `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllFuzztagInfoResponse) Reset() {
	*x = GetAllFuzztagInfoResponse{}
	mi := &file_yakgrpc_proto_msgTypes[772]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllFuzztagInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllFuzztagInfoResponse) ProtoMessage() {}

func (x *GetAllFuzztagInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[772]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllFuzztagInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAllFuzztagInfoResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{772}
}

func (x *GetAllFuzztagInfoResponse) GetData() []*FuzztagInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type FuzztagArgumentType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DefaultValue  string                 `protobuf:"bytes,2,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	IsOptional    bool                   `protobuf:"varint,4,opt,name=IsOptional,proto3" json:"IsOptional,omitempty"`
	IsList        bool                   `protobuf:"varint,5,opt,name=IsList,proto3" json:"IsList,omitempty"`
	Separators    []string               `protobuf:"bytes,6,rep,name=Separators,proto3" json:"Separators,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzztagArgumentType) Reset() {
	*x = FuzztagArgumentType{}
	mi := &file_yakgrpc_proto_msgTypes[773]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzztagArgumentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzztagArgumentType) ProtoMessage() {}

func (x *FuzztagArgumentType) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[773]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzztagArgumentType.ProtoReflect.Descriptor instead.
func (*FuzztagArgumentType) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{773}
}

func (x *FuzztagArgumentType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FuzztagArgumentType) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *FuzztagArgumentType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FuzztagArgumentType) GetIsOptional() bool {
	if x != nil {
		return x.IsOptional
	}
	return false
}

func (x *FuzztagArgumentType) GetIsList() bool {
	if x != nil {
		return x.IsList
	}
	return false
}

func (x *FuzztagArgumentType) GetSeparators() []string {
	if x != nil {
		return x.Separators
	}
	return nil
}

type FuzztagInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	VerboseName   string                 `protobuf:"bytes,3,opt,name=VerboseName,proto3" json:"VerboseName,omitempty"`
	Examples      []string               `protobuf:"bytes,4,rep,name=Examples,proto3" json:"Examples,omitempty"`
	ArgumentTypes []*FuzztagArgumentType `protobuf:"bytes,5,rep,name=ArgumentTypes,proto3" json:"ArgumentTypes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzztagInfo) Reset() {
	*x = FuzztagInfo{}
	mi := &file_yakgrpc_proto_msgTypes[774]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzztagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzztagInfo) ProtoMessage() {}

func (x *FuzztagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[774]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzztagInfo.ProtoReflect.Descriptor instead.
func (*FuzztagInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{774}
}

func (x *FuzztagInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FuzztagInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FuzztagInfo) GetVerboseName() string {
	if x != nil {
		return x.VerboseName
	}
	return ""
}

func (x *FuzztagInfo) GetExamples() []string {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *FuzztagInfo) GetArgumentTypes() []*FuzztagArgumentType {
	if x != nil {
		return x.ArgumentTypes
	}
	return nil
}

type GenerateFuzztagRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Range         *Range                 `protobuf:"bytes,3,opt,name=Range,proto3" json:"Range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateFuzztagRequest) Reset() {
	*x = GenerateFuzztagRequest{}
	mi := &file_yakgrpc_proto_msgTypes[775]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateFuzztagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFuzztagRequest) ProtoMessage() {}

func (x *GenerateFuzztagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[775]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFuzztagRequest.ProtoReflect.Descriptor instead.
func (*GenerateFuzztagRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{775}
}

func (x *GenerateFuzztagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenerateFuzztagRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GenerateFuzztagRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type GenerateFuzztagResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *GeneralResponse       `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Result        string                 `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateFuzztagResponse) Reset() {
	*x = GenerateFuzztagResponse{}
	mi := &file_yakgrpc_proto_msgTypes[776]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateFuzztagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFuzztagResponse) ProtoMessage() {}

func (x *GenerateFuzztagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[776]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFuzztagResponse.ProtoReflect.Descriptor instead.
func (*GenerateFuzztagResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{776}
}

func (x *GenerateFuzztagResponse) GetStatus() *GeneralResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GenerateFuzztagResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type FuzzTagSuggestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HotPatchCode  string                 `protobuf:"bytes,1,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	FuzztagCode   string                 `protobuf:"bytes,2,opt,name=FuzztagCode,proto3" json:"FuzztagCode,omitempty"`
	InspectType   string                 `protobuf:"bytes,3,opt,name=InspectType,proto3" json:"InspectType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzzTagSuggestionRequest) Reset() {
	*x = FuzzTagSuggestionRequest{}
	mi := &file_yakgrpc_proto_msgTypes[777]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzTagSuggestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzTagSuggestionRequest) ProtoMessage() {}

func (x *FuzzTagSuggestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[777]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzTagSuggestionRequest.ProtoReflect.Descriptor instead.
func (*FuzzTagSuggestionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{777}
}

func (x *FuzzTagSuggestionRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *FuzzTagSuggestionRequest) GetFuzztagCode() string {
	if x != nil {
		return x.FuzztagCode
	}
	return ""
}

func (x *FuzzTagSuggestionRequest) GetInspectType() string {
	if x != nil {
		return x.InspectType
	}
	return ""
}

type SSARisk struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt           int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt           int64                  `protobuf:"varint,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Hash                string                 `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ProgramName         string                 `protobuf:"bytes,5,opt,name=ProgramName,proto3" json:"ProgramName,omitempty"`
	CodeSourceUrl       string                 `protobuf:"bytes,6,opt,name=CodeSourceUrl,proto3" json:"CodeSourceUrl,omitempty"`
	CodeRange           string                 `protobuf:"bytes,7,opt,name=CodeRange,proto3" json:"CodeRange,omitempty"`
	CodeFragment        string                 `protobuf:"bytes,8,opt,name=CodeFragment,proto3" json:"CodeFragment,omitempty"`
	Title               string                 `protobuf:"bytes,9,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleVerbose        string                 `protobuf:"bytes,10,opt,name=TitleVerbose,proto3" json:"TitleVerbose,omitempty"`
	RiskType            string                 `protobuf:"bytes,11,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	RiskTypeVerbose     string                 `protobuf:"bytes,12,opt,name=RiskTypeVerbose,proto3" json:"RiskTypeVerbose,omitempty"`
	Details             string                 `protobuf:"bytes,13,opt,name=Details,proto3" json:"Details,omitempty"`
	Severity            string                 `protobuf:"bytes,14,opt,name=Severity,proto3" json:"Severity,omitempty"`
	FromRule            string                 `protobuf:"bytes,15,opt,name=FromRule,proto3" json:"FromRule,omitempty"`
	RuntimeID           string                 `protobuf:"bytes,16,opt,name=RuntimeID,proto3" json:"RuntimeID,omitempty"`
	IsPotential         bool                   `protobuf:"varint,17,opt,name=IsPotential,proto3" json:"IsPotential,omitempty"`
	CVE                 string                 `protobuf:"bytes,18,opt,name=CVE,proto3" json:"CVE,omitempty"`
	CWE                 []string               `protobuf:"bytes,31,rep,name=CWE,proto3" json:"CWE,omitempty"`
	CveAccessVector     string                 `protobuf:"bytes,19,opt,name=CveAccessVector,proto3" json:"CveAccessVector,omitempty"`
	CveAccessComplexity string                 `protobuf:"bytes,20,opt,name=CveAccessComplexity,proto3" json:"CveAccessComplexity,omitempty"`
	Tags                string                 `protobuf:"bytes,21,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsRead              bool                   `protobuf:"varint,23,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
	ResultID            uint64                 `protobuf:"varint,22,opt,name=ResultID,proto3" json:"ResultID,omitempty"`
	Variable            string                 `protobuf:"bytes,24,opt,name=Variable,proto3" json:"Variable,omitempty"`
	Index               int64                  `protobuf:"varint,25,opt,name=Index,proto3" json:"Index,omitempty"`
	FunctionName        string                 `protobuf:"bytes,26,opt,name=FunctionName,proto3" json:"FunctionName,omitempty"`
	Line                int64                  `protobuf:"varint,27,opt,name=Line,proto3" json:"Line,omitempty"`
	// other mesg
	Solution             string `protobuf:"bytes,28,opt,name=Solution,proto3" json:"Solution,omitempty"`
	Description          string `protobuf:"bytes,29,opt,name=Description,proto3" json:"Description,omitempty"`
	LatestDisposalStatus string `protobuf:"bytes,30,opt,name=LatestDisposalStatus,proto3" json:"LatestDisposalStatus,omitempty"` // 最新处置状态 not_set | is_issue | not_issue | suspicious
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SSARisk) Reset() {
	*x = SSARisk{}
	mi := &file_yakgrpc_proto_msgTypes[778]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSARisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSARisk) ProtoMessage() {}

func (x *SSARisk) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[778]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSARisk.ProtoReflect.Descriptor instead.
func (*SSARisk) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{778}
}

func (x *SSARisk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SSARisk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SSARisk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SSARisk) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SSARisk) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *SSARisk) GetCodeSourceUrl() string {
	if x != nil {
		return x.CodeSourceUrl
	}
	return ""
}

func (x *SSARisk) GetCodeRange() string {
	if x != nil {
		return x.CodeRange
	}
	return ""
}

func (x *SSARisk) GetCodeFragment() string {
	if x != nil {
		return x.CodeFragment
	}
	return ""
}

func (x *SSARisk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SSARisk) GetTitleVerbose() string {
	if x != nil {
		return x.TitleVerbose
	}
	return ""
}

func (x *SSARisk) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *SSARisk) GetRiskTypeVerbose() string {
	if x != nil {
		return x.RiskTypeVerbose
	}
	return ""
}

func (x *SSARisk) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *SSARisk) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SSARisk) GetFromRule() string {
	if x != nil {
		return x.FromRule
	}
	return ""
}

func (x *SSARisk) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *SSARisk) GetIsPotential() bool {
	if x != nil {
		return x.IsPotential
	}
	return false
}

func (x *SSARisk) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *SSARisk) GetCWE() []string {
	if x != nil {
		return x.CWE
	}
	return nil
}

func (x *SSARisk) GetCveAccessVector() string {
	if x != nil {
		return x.CveAccessVector
	}
	return ""
}

func (x *SSARisk) GetCveAccessComplexity() string {
	if x != nil {
		return x.CveAccessComplexity
	}
	return ""
}

func (x *SSARisk) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SSARisk) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *SSARisk) GetResultID() uint64 {
	if x != nil {
		return x.ResultID
	}
	return 0
}

func (x *SSARisk) GetVariable() string {
	if x != nil {
		return x.Variable
	}
	return ""
}

func (x *SSARisk) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SSARisk) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SSARisk) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *SSARisk) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *SSARisk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SSARisk) GetLatestDisposalStatus() string {
	if x != nil {
		return x.LatestDisposalStatus
	}
	return ""
}

type SSARisksFilter struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ID                   []int64                `protobuf:"varint,1,rep,packed,name=ID,proto3" json:"ID,omitempty"`
	Search               string                 `protobuf:"bytes,2,opt,name=Search,proto3" json:"Search,omitempty"`
	ProgramName          []string               `protobuf:"bytes,3,rep,name=ProgramName,proto3" json:"ProgramName,omitempty"`
	CodeSourceUrl        []string               `protobuf:"bytes,4,rep,name=CodeSourceUrl,proto3" json:"CodeSourceUrl,omitempty"`
	RiskType             []string               `protobuf:"bytes,5,rep,name=RiskType,proto3" json:"RiskType,omitempty"`
	Severity             []string               `protobuf:"bytes,6,rep,name=Severity,proto3" json:"Severity,omitempty"`
	FromRule             []string               `protobuf:"bytes,7,rep,name=FromRule,proto3" json:"FromRule,omitempty"`
	RuntimeID            []string               `protobuf:"bytes,8,rep,name=RuntimeID,proto3" json:"RuntimeID,omitempty"`
	ResultID             []uint64               `protobuf:"varint,9,rep,packed,name=ResultID,proto3" json:"ResultID,omitempty"`
	Tags                 []string               `protobuf:"bytes,10,rep,name=Tags,proto3" json:"Tags,omitempty"`
	IsRead               int64                  `protobuf:"varint,11,opt,name=IsRead,proto3" json:"IsRead,omitempty"` // >0 true  <0 false =0 all
	Title                string                 `protobuf:"bytes,12,opt,name=Title,proto3" json:"Title,omitempty"`    // fuzz search
	Hash                 []string               `protobuf:"bytes,13,rep,name=Hash,proto3" json:"Hash,omitempty"`
	FunctionName         []string               `protobuf:"bytes,14,rep,name=FunctionName,proto3" json:"FunctionName,omitempty"`
	BeforeCreatedAt      int64                  `protobuf:"varint,15,opt,name=BeforeCreatedAt,proto3" json:"BeforeCreatedAt,omitempty"`
	AfterCreatedAt       int64                  `protobuf:"varint,16,opt,name=AfterCreatedAt,proto3" json:"AfterCreatedAt,omitempty"`
	LatestDisposalStatus []string               `protobuf:"bytes,17,rep,name=LatestDisposalStatus,proto3" json:"LatestDisposalStatus,omitempty"` // not_set | is_issue | not_issue | suspicious
	SSARiskDiffRequest   *SSARiskDiffRequest    `protobuf:"bytes,18,opt,name=SSARiskDiffRequest,proto3" json:"SSARiskDiffRequest,omitempty"`
	// 增量查询
	Incremental   bool `protobuf:"varint,19,opt,name=Incremental,proto3" json:"Incremental,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSARisksFilter) Reset() {
	*x = SSARisksFilter{}
	mi := &file_yakgrpc_proto_msgTypes[779]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSARisksFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSARisksFilter) ProtoMessage() {}

func (x *SSARisksFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[779]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSARisksFilter.ProtoReflect.Descriptor instead.
func (*SSARisksFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{779}
}

func (x *SSARisksFilter) GetID() []int64 {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *SSARisksFilter) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *SSARisksFilter) GetProgramName() []string {
	if x != nil {
		return x.ProgramName
	}
	return nil
}

func (x *SSARisksFilter) GetCodeSourceUrl() []string {
	if x != nil {
		return x.CodeSourceUrl
	}
	return nil
}

func (x *SSARisksFilter) GetRiskType() []string {
	if x != nil {
		return x.RiskType
	}
	return nil
}

func (x *SSARisksFilter) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *SSARisksFilter) GetFromRule() []string {
	if x != nil {
		return x.FromRule
	}
	return nil
}

func (x *SSARisksFilter) GetRuntimeID() []string {
	if x != nil {
		return x.RuntimeID
	}
	return nil
}

func (x *SSARisksFilter) GetResultID() []uint64 {
	if x != nil {
		return x.ResultID
	}
	return nil
}

func (x *SSARisksFilter) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SSARisksFilter) GetIsRead() int64 {
	if x != nil {
		return x.IsRead
	}
	return 0
}

func (x *SSARisksFilter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SSARisksFilter) GetHash() []string {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SSARisksFilter) GetFunctionName() []string {
	if x != nil {
		return x.FunctionName
	}
	return nil
}

func (x *SSARisksFilter) GetBeforeCreatedAt() int64 {
	if x != nil {
		return x.BeforeCreatedAt
	}
	return 0
}

func (x *SSARisksFilter) GetAfterCreatedAt() int64 {
	if x != nil {
		return x.AfterCreatedAt
	}
	return 0
}

func (x *SSARisksFilter) GetLatestDisposalStatus() []string {
	if x != nil {
		return x.LatestDisposalStatus
	}
	return nil
}

func (x *SSARisksFilter) GetSSARiskDiffRequest() *SSARiskDiffRequest {
	if x != nil {
		return x.SSARiskDiffRequest
	}
	return nil
}

func (x *SSARisksFilter) GetIncremental() bool {
	if x != nil {
		return x.Incremental
	}
	return false
}

type QuerySSARisksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *SSARisksFilter        `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySSARisksRequest) Reset() {
	*x = QuerySSARisksRequest{}
	mi := &file_yakgrpc_proto_msgTypes[780]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySSARisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSARisksRequest) ProtoMessage() {}

func (x *QuerySSARisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[780]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSARisksRequest.ProtoReflect.Descriptor instead.
func (*QuerySSARisksRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{780}
}

func (x *QuerySSARisksRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySSARisksRequest) GetFilter() *SSARisksFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QuerySSARisksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*SSARisk             `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySSARisksResponse) Reset() {
	*x = QuerySSARisksResponse{}
	mi := &file_yakgrpc_proto_msgTypes[781]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySSARisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSARisksResponse) ProtoMessage() {}

func (x *QuerySSARisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[781]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSARisksResponse.ProtoReflect.Descriptor instead.
func (*QuerySSARisksResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{781}
}

func (x *QuerySSARisksResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySSARisksResponse) GetData() []*SSARisk {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QuerySSARisksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryNewSSARisksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfterID       int64                  `protobuf:"varint,1,opt,name=AfterID,proto3" json:"AfterID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewSSARisksRequest) Reset() {
	*x = QueryNewSSARisksRequest{}
	mi := &file_yakgrpc_proto_msgTypes[782]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewSSARisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewSSARisksRequest) ProtoMessage() {}

func (x *QueryNewSSARisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[782]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewSSARisksRequest.ProtoReflect.Descriptor instead.
func (*QueryNewSSARisksRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{782}
}

func (x *QueryNewSSARisksRequest) GetAfterID() int64 {
	if x != nil {
		return x.AfterID
	}
	return 0
}

type QueryNewSSARisksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*SSARisk             `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`                  // new ssa-risk unread data
	NewRiskTotal  int64                  `protobuf:"varint,2,opt,name=NewRiskTotal,proto3" json:"NewRiskTotal,omitempty"` // new ssa-risk unread count
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`               // total ssa-risk count
	Unread        int64                  `protobuf:"varint,4,opt,name=Unread,proto3" json:"Unread,omitempty"`             // total unread ssa-risk count
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewSSARisksResponse) Reset() {
	*x = QueryNewSSARisksResponse{}
	mi := &file_yakgrpc_proto_msgTypes[783]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewSSARisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewSSARisksResponse) ProtoMessage() {}

func (x *QueryNewSSARisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[783]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewSSARisksResponse.ProtoReflect.Descriptor instead.
func (*QueryNewSSARisksResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{783}
}

func (x *QueryNewSSARisksResponse) GetData() []*SSARisk {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryNewSSARisksResponse) GetNewRiskTotal() int64 {
	if x != nil {
		return x.NewRiskTotal
	}
	return 0
}

func (x *QueryNewSSARisksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryNewSSARisksResponse) GetUnread() int64 {
	if x != nil {
		return x.Unread
	}
	return 0
}

type DeleteSSARisksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SSARisksFilter        `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSSARisksRequest) Reset() {
	*x = DeleteSSARisksRequest{}
	mi := &file_yakgrpc_proto_msgTypes[784]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSSARisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSSARisksRequest) ProtoMessage() {}

func (x *DeleteSSARisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[784]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSSARisksRequest.ProtoReflect.Descriptor instead.
func (*DeleteSSARisksRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{784}
}

func (x *DeleteSSARisksRequest) GetFilter() *SSARisksFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UpdateSSARiskTagsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Tags          []string               `protobuf:"bytes,2,rep,name=Tags,proto3" json:"Tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSSARiskTagsRequest) Reset() {
	*x = UpdateSSARiskTagsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[785]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSSARiskTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSARiskTagsRequest) ProtoMessage() {}

func (x *UpdateSSARiskTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[785]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSARiskTagsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSSARiskTagsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{785}
}

func (x *UpdateSSARiskTagsRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateSSARiskTagsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SSARiskFieldGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileField     []*FieldGroup          `protobuf:"bytes,1,rep,name=FileField,proto3" json:"FileField,omitempty"`
	SeverityField []*FieldName           `protobuf:"bytes,2,rep,name=SeverityField,proto3" json:"SeverityField,omitempty"`
	RiskTypeField []*FieldName           `protobuf:"bytes,3,rep,name=RiskTypeField,proto3" json:"RiskTypeField,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSARiskFieldGroupResponse) Reset() {
	*x = SSARiskFieldGroupResponse{}
	mi := &file_yakgrpc_proto_msgTypes[786]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSARiskFieldGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSARiskFieldGroupResponse) ProtoMessage() {}

func (x *SSARiskFieldGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[786]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSARiskFieldGroupResponse.ProtoReflect.Descriptor instead.
func (*SSARiskFieldGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{786}
}

func (x *SSARiskFieldGroupResponse) GetFileField() []*FieldGroup {
	if x != nil {
		return x.FileField
	}
	return nil
}

func (x *SSARiskFieldGroupResponse) GetSeverityField() []*FieldName {
	if x != nil {
		return x.SeverityField
	}
	return nil
}

func (x *SSARiskFieldGroupResponse) GetRiskTypeField() []*FieldName {
	if x != nil {
		return x.RiskTypeField
	}
	return nil
}

type NewSSARiskReadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SSARisksFilter        `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewSSARiskReadRequest) Reset() {
	*x = NewSSARiskReadRequest{}
	mi := &file_yakgrpc_proto_msgTypes[787]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewSSARiskReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSSARiskReadRequest) ProtoMessage() {}

func (x *NewSSARiskReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[787]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSSARiskReadRequest.ProtoReflect.Descriptor instead.
func (*NewSSARiskReadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{787}
}

func (x *NewSSARiskReadRequest) GetFilter() *SSARisksFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type NewSSARiskReadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewSSARiskReadResponse) Reset() {
	*x = NewSSARiskReadResponse{}
	mi := &file_yakgrpc_proto_msgTypes[788]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewSSARiskReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSSARiskReadResponse) ProtoMessage() {}

func (x *NewSSARiskReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[788]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSSARiskReadResponse.ProtoReflect.Descriptor instead.
func (*NewSSARiskReadResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{788}
}

type SSARiskFeedbackToOnlineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Filter        *SSARisksFilter        `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSARiskFeedbackToOnlineRequest) Reset() {
	*x = SSARiskFeedbackToOnlineRequest{}
	mi := &file_yakgrpc_proto_msgTypes[789]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSARiskFeedbackToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSARiskFeedbackToOnlineRequest) ProtoMessage() {}

func (x *SSARiskFeedbackToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[789]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSARiskFeedbackToOnlineRequest.ProtoReflect.Descriptor instead.
func (*SSARiskFeedbackToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{789}
}

func (x *SSARiskFeedbackToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SSARiskFeedbackToOnlineRequest) GetFilter() *SSARisksFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SSARiskDisposalData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Comment       string                 `protobuf:"bytes,5,opt,name=Comment,proto3" json:"Comment,omitempty"`
	RiskId        int64                  `protobuf:"varint,6,opt,name=RiskId,proto3" json:"RiskId,omitempty"`
	TaskName      string                 `protobuf:"bytes,7,opt,name=TaskName,proto3" json:"TaskName,omitempty"` // 任务名称，追踪处置来自哪次扫描任务
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSARiskDisposalData) Reset() {
	*x = SSARiskDisposalData{}
	mi := &file_yakgrpc_proto_msgTypes[790]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSARiskDisposalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSARiskDisposalData) ProtoMessage() {}

func (x *SSARiskDisposalData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[790]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSARiskDisposalData.ProtoReflect.Descriptor instead.
func (*SSARiskDisposalData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{790}
}

func (x *SSARiskDisposalData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SSARiskDisposalData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SSARiskDisposalData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SSARiskDisposalData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SSARiskDisposalData) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SSARiskDisposalData) GetRiskId() int64 {
	if x != nil {
		return x.RiskId
	}
	return 0
}

func (x *SSARiskDisposalData) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type SSARiskDisposalsFilter struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	ID     []int64                `protobuf:"varint,1,rep,packed,name=ID,proto3" json:"ID,omitempty"`
	Status []string               `protobuf:"bytes,2,rep,name=Status,proto3" json:"Status,omitempty"`
	RiskId []int64                `protobuf:"varint,3,rep,packed,name=RiskId,proto3" json:"RiskId,omitempty"`
	// for fuzz search
	Search        string `protobuf:"bytes,4,opt,name=Search,proto3" json:"Search,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSARiskDisposalsFilter) Reset() {
	*x = SSARiskDisposalsFilter{}
	mi := &file_yakgrpc_proto_msgTypes[791]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSARiskDisposalsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSARiskDisposalsFilter) ProtoMessage() {}

func (x *SSARiskDisposalsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[791]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSARiskDisposalsFilter.ProtoReflect.Descriptor instead.
func (*SSARiskDisposalsFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{791}
}

func (x *SSARiskDisposalsFilter) GetID() []int64 {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *SSARiskDisposalsFilter) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SSARiskDisposalsFilter) GetRiskId() []int64 {
	if x != nil {
		return x.RiskId
	}
	return nil
}

func (x *SSARiskDisposalsFilter) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type CreateSSARiskDisposalsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RiskIds       []int64                `protobuf:"varint,1,rep,packed,name=RiskIds,proto3" json:"RiskIds,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Comment       string                 `protobuf:"bytes,3,opt,name=Comment,proto3" json:"Comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSSARiskDisposalsRequest) Reset() {
	*x = CreateSSARiskDisposalsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[792]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSSARiskDisposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSARiskDisposalsRequest) ProtoMessage() {}

func (x *CreateSSARiskDisposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[792]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSARiskDisposalsRequest.ProtoReflect.Descriptor instead.
func (*CreateSSARiskDisposalsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{792}
}

func (x *CreateSSARiskDisposalsRequest) GetRiskIds() []int64 {
	if x != nil {
		return x.RiskIds
	}
	return nil
}

func (x *CreateSSARiskDisposalsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateSSARiskDisposalsRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type CreateSSARiskDisposalsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*SSARiskDisposalData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSSARiskDisposalsResponse) Reset() {
	*x = CreateSSARiskDisposalsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[793]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSSARiskDisposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSARiskDisposalsResponse) ProtoMessage() {}

func (x *CreateSSARiskDisposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[793]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSARiskDisposalsResponse.ProtoReflect.Descriptor instead.
func (*CreateSSARiskDisposalsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{793}
}

func (x *CreateSSARiskDisposalsResponse) GetData() []*SSARiskDisposalData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QuerySSARiskDisposalsRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Pagination    *Paging                 `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter        *SSARiskDisposalsFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySSARiskDisposalsRequest) Reset() {
	*x = QuerySSARiskDisposalsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[794]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySSARiskDisposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSARiskDisposalsRequest) ProtoMessage() {}

func (x *QuerySSARiskDisposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[794]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSARiskDisposalsRequest.ProtoReflect.Descriptor instead.
func (*QuerySSARiskDisposalsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{794}
}

func (x *QuerySSARiskDisposalsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySSARiskDisposalsRequest) GetFilter() *SSARiskDisposalsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QuerySSARiskDisposalsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*SSARiskDisposalData `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySSARiskDisposalsResponse) Reset() {
	*x = QuerySSARiskDisposalsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[795]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySSARiskDisposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSARiskDisposalsResponse) ProtoMessage() {}

func (x *QuerySSARiskDisposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[795]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSARiskDisposalsResponse.ProtoReflect.Descriptor instead.
func (*QuerySSARiskDisposalsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{795}
}

func (x *QuerySSARiskDisposalsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySSARiskDisposalsResponse) GetData() []*SSARiskDisposalData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QuerySSARiskDisposalsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateSSARiskDisposalsRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *SSARiskDisposalsFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	User          string                  `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"`
	Status        string                  `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
	Comment       string                  `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSSARiskDisposalsRequest) Reset() {
	*x = UpdateSSARiskDisposalsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[796]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSSARiskDisposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSARiskDisposalsRequest) ProtoMessage() {}

func (x *UpdateSSARiskDisposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[796]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSARiskDisposalsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSSARiskDisposalsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{796}
}

func (x *UpdateSSARiskDisposalsRequest) GetFilter() *SSARiskDisposalsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *UpdateSSARiskDisposalsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UpdateSSARiskDisposalsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateSSARiskDisposalsRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type UpdateSSARiskDisposalsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*SSARiskDisposalData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSSARiskDisposalsResponse) Reset() {
	*x = UpdateSSARiskDisposalsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[797]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSSARiskDisposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSARiskDisposalsResponse) ProtoMessage() {}

func (x *UpdateSSARiskDisposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[797]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSARiskDisposalsResponse.ProtoReflect.Descriptor instead.
func (*UpdateSSARiskDisposalsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{797}
}

func (x *UpdateSSARiskDisposalsResponse) GetData() []*SSARiskDisposalData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteSSARiskDisposalsRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *SSARiskDisposalsFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSSARiskDisposalsRequest) Reset() {
	*x = DeleteSSARiskDisposalsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[798]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSSARiskDisposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSSARiskDisposalsRequest) ProtoMessage() {}

func (x *DeleteSSARiskDisposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[798]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSSARiskDisposalsRequest.ProtoReflect.Descriptor instead.
func (*DeleteSSARiskDisposalsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{798}
}

func (x *DeleteSSARiskDisposalsRequest) GetFilter() *SSARiskDisposalsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DeleteSSARiskDisposalsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSSARiskDisposalsResponse) Reset() {
	*x = DeleteSSARiskDisposalsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[799]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSSARiskDisposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSSARiskDisposalsResponse) ProtoMessage() {}

func (x *DeleteSSARiskDisposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[799]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSSARiskDisposalsResponse.ProtoReflect.Descriptor instead.
func (*DeleteSSARiskDisposalsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{799}
}

func (x *DeleteSSARiskDisposalsResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type GetSSARiskDisposalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RiskId        int64                  `protobuf:"varint,1,opt,name=RiskId,proto3" json:"RiskId,omitempty"`
	RiskHash      string                 `protobuf:"bytes,2,opt,name=RiskHash,proto3" json:"RiskHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSSARiskDisposalRequest) Reset() {
	*x = GetSSARiskDisposalRequest{}
	mi := &file_yakgrpc_proto_msgTypes[800]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSSARiskDisposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSSARiskDisposalRequest) ProtoMessage() {}

func (x *GetSSARiskDisposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[800]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSSARiskDisposalRequest.ProtoReflect.Descriptor instead.
func (*GetSSARiskDisposalRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{800}
}

func (x *GetSSARiskDisposalRequest) GetRiskId() int64 {
	if x != nil {
		return x.RiskId
	}
	return 0
}

func (x *GetSSARiskDisposalRequest) GetRiskHash() string {
	if x != nil {
		return x.RiskHash
	}
	return ""
}

type GetSSARiskDisposalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*SSARiskDisposalData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSSARiskDisposalResponse) Reset() {
	*x = GetSSARiskDisposalResponse{}
	mi := &file_yakgrpc_proto_msgTypes[801]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSSARiskDisposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSSARiskDisposalResponse) ProtoMessage() {}

func (x *GetSSARiskDisposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[801]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSSARiskDisposalResponse.ProtoReflect.Descriptor instead.
func (*GetSSARiskDisposalResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{801}
}

func (x *GetSSARiskDisposalResponse) GetData() []*SSARiskDisposalData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExportSyntaxFlowsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SyntaxFlowRuleFilter  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	TargetPath    string                 `protobuf:"bytes,3,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportSyntaxFlowsRequest) Reset() {
	*x = ExportSyntaxFlowsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[802]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportSyntaxFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSyntaxFlowsRequest) ProtoMessage() {}

func (x *ExportSyntaxFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[802]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSyntaxFlowsRequest.ProtoReflect.Descriptor instead.
func (*ExportSyntaxFlowsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{802}
}

func (x *ExportSyntaxFlowsRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExportSyntaxFlowsRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ExportSyntaxFlowsRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type ImportSyntaxFlowsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InputPath     string                 `protobuf:"bytes,1,opt,name=InputPath,proto3" json:"InputPath,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportSyntaxFlowsRequest) Reset() {
	*x = ImportSyntaxFlowsRequest{}
	mi := &file_yakgrpc_proto_msgTypes[803]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportSyntaxFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSyntaxFlowsRequest) ProtoMessage() {}

func (x *ImportSyntaxFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[803]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSyntaxFlowsRequest.ProtoReflect.Descriptor instead.
func (*ImportSyntaxFlowsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{803}
}

func (x *ImportSyntaxFlowsRequest) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

func (x *ImportSyntaxFlowsRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SyntaxflowsProgress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 进度  0-1.0
	Progress float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	// 展示的提示语，可能是中断原因或者错误原因之类的
	Verbose       string `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntaxflowsProgress) Reset() {
	*x = SyntaxflowsProgress{}
	mi := &file_yakgrpc_proto_msgTypes[804]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntaxflowsProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxflowsProgress) ProtoMessage() {}

func (x *SyntaxflowsProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[804]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxflowsProgress.ProtoReflect.Descriptor instead.
func (*SyntaxflowsProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{804}
}

func (x *SyntaxflowsProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SyntaxflowsProgress) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

// hot-patch template
type HotPatchTemplate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"` // fuzzer/mitm/httpflow-analyze
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HotPatchTemplate) Reset() {
	*x = HotPatchTemplate{}
	mi := &file_yakgrpc_proto_msgTypes[805]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HotPatchTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotPatchTemplate) ProtoMessage() {}

func (x *HotPatchTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[805]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotPatchTemplate.ProtoReflect.Descriptor instead.
func (*HotPatchTemplate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{805}
}

func (x *HotPatchTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HotPatchTemplate) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HotPatchTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type HotPatchTemplateRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             []int64                `protobuf:"varint,1,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	Name           []string               `protobuf:"bytes,2,rep,name=Name,proto3" json:"Name,omitempty"`
	ContentKeyword []string               `protobuf:"bytes,3,rep,name=ContentKeyword,proto3" json:"ContentKeyword,omitempty"`
	Type           string                 `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"` // fuzzer/mitm/httpflow-analyze
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HotPatchTemplateRequest) Reset() {
	*x = HotPatchTemplateRequest{}
	mi := &file_yakgrpc_proto_msgTypes[806]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HotPatchTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotPatchTemplateRequest) ProtoMessage() {}

func (x *HotPatchTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[806]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotPatchTemplateRequest.ProtoReflect.Descriptor instead.
func (*HotPatchTemplateRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{806}
}

func (x *HotPatchTemplateRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HotPatchTemplateRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *HotPatchTemplateRequest) GetContentKeyword() []string {
	if x != nil {
		return x.ContentKeyword
	}
	return nil
}

func (x *HotPatchTemplateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type UpdateHotPatchTemplateRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Condition     *HotPatchTemplateRequest `protobuf:"bytes,1,opt,name=Condition,proto3" json:"Condition,omitempty"`
	Data          *HotPatchTemplate        `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHotPatchTemplateRequest) Reset() {
	*x = UpdateHotPatchTemplateRequest{}
	mi := &file_yakgrpc_proto_msgTypes[807]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHotPatchTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHotPatchTemplateRequest) ProtoMessage() {}

func (x *UpdateHotPatchTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[807]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHotPatchTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateHotPatchTemplateRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{807}
}

func (x *UpdateHotPatchTemplateRequest) GetCondition() *HotPatchTemplateRequest {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *UpdateHotPatchTemplateRequest) GetData() *HotPatchTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteHotPatchTemplateRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Condition     *HotPatchTemplateRequest `protobuf:"bytes,1,opt,name=Condition,proto3" json:"Condition,omitempty"`
	All           bool                     `protobuf:"varint,2,opt,name=All,proto3" json:"All,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteHotPatchTemplateRequest) Reset() {
	*x = DeleteHotPatchTemplateRequest{}
	mi := &file_yakgrpc_proto_msgTypes[808]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHotPatchTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHotPatchTemplateRequest) ProtoMessage() {}

func (x *DeleteHotPatchTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[808]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHotPatchTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteHotPatchTemplateRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{808}
}

func (x *DeleteHotPatchTemplateRequest) GetCondition() *HotPatchTemplateRequest {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *DeleteHotPatchTemplateRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type CreateHotPatchTemplateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateHotPatchTemplateResponse) Reset() {
	*x = CreateHotPatchTemplateResponse{}
	mi := &file_yakgrpc_proto_msgTypes[809]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHotPatchTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHotPatchTemplateResponse) ProtoMessage() {}

func (x *CreateHotPatchTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[809]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHotPatchTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateHotPatchTemplateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{809}
}

func (x *CreateHotPatchTemplateResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteHotPatchTemplateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteHotPatchTemplateResponse) Reset() {
	*x = DeleteHotPatchTemplateResponse{}
	mi := &file_yakgrpc_proto_msgTypes[810]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHotPatchTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHotPatchTemplateResponse) ProtoMessage() {}

func (x *DeleteHotPatchTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[810]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHotPatchTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteHotPatchTemplateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{810}
}

func (x *DeleteHotPatchTemplateResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type UpdateHotPatchTemplateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHotPatchTemplateResponse) Reset() {
	*x = UpdateHotPatchTemplateResponse{}
	mi := &file_yakgrpc_proto_msgTypes[811]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHotPatchTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHotPatchTemplateResponse) ProtoMessage() {}

func (x *UpdateHotPatchTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[811]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHotPatchTemplateResponse.ProtoReflect.Descriptor instead.
func (*UpdateHotPatchTemplateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{811}
}

func (x *UpdateHotPatchTemplateResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type QueryHotPatchTemplateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Data          []*HotPatchTemplate    `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHotPatchTemplateResponse) Reset() {
	*x = QueryHotPatchTemplateResponse{}
	mi := &file_yakgrpc_proto_msgTypes[812]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHotPatchTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHotPatchTemplateResponse) ProtoMessage() {}

func (x *QueryHotPatchTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[812]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHotPatchTemplateResponse.ProtoReflect.Descriptor instead.
func (*QueryHotPatchTemplateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{812}
}

func (x *QueryHotPatchTemplateResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *QueryHotPatchTemplateResponse) GetData() []*HotPatchTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryHotPatchTemplateListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"` // fuzzer/mitm/httpflow-analyze
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHotPatchTemplateListRequest) Reset() {
	*x = QueryHotPatchTemplateListRequest{}
	mi := &file_yakgrpc_proto_msgTypes[813]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHotPatchTemplateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHotPatchTemplateListRequest) ProtoMessage() {}

func (x *QueryHotPatchTemplateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[813]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHotPatchTemplateListRequest.ProtoReflect.Descriptor instead.
func (*QueryHotPatchTemplateListRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{813}
}

func (x *QueryHotPatchTemplateListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type QueryHotPatchTemplateListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Name          []string               `protobuf:"bytes,2,rep,name=Name,proto3" json:"Name,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHotPatchTemplateListResponse) Reset() {
	*x = QueryHotPatchTemplateListResponse{}
	mi := &file_yakgrpc_proto_msgTypes[814]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHotPatchTemplateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHotPatchTemplateListResponse) ProtoMessage() {}

func (x *QueryHotPatchTemplateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[814]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHotPatchTemplateListResponse.ProtoReflect.Descriptor instead.
func (*QueryHotPatchTemplateListResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{814}
}

func (x *QueryHotPatchTemplateListResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHotPatchTemplateListResponse) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QueryHotPatchTemplateListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GroupTableColumnRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DatabaseName  string                 `protobuf:"bytes,1,opt,name=DatabaseName,proto3" json:"DatabaseName,omitempty"` //  enum    Project/Profile/SSA
	TableName     string                 `protobuf:"bytes,2,opt,name=TableName,proto3" json:"TableName,omitempty"`
	ColumnName    string                 `protobuf:"bytes,3,opt,name=ColumnName,proto3" json:"ColumnName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupTableColumnRequest) Reset() {
	*x = GroupTableColumnRequest{}
	mi := &file_yakgrpc_proto_msgTypes[815]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupTableColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTableColumnRequest) ProtoMessage() {}

func (x *GroupTableColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[815]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTableColumnRequest.ProtoReflect.Descriptor instead.
func (*GroupTableColumnRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{815}
}

func (x *GroupTableColumnRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *GroupTableColumnRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *GroupTableColumnRequest) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

type GroupTableColumnResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []string               `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupTableColumnResponse) Reset() {
	*x = GroupTableColumnResponse{}
	mi := &file_yakgrpc_proto_msgTypes[816]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupTableColumnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTableColumnResponse) ProtoMessage() {}

func (x *GroupTableColumnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[816]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTableColumnResponse.ProtoReflect.Descriptor instead.
func (*GroupTableColumnResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{816}
}

func (x *GroupTableColumnResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadHotPatchTemplateToOnlineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"` // fuzzer/mitm/httpflow-analyze
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadHotPatchTemplateToOnlineRequest) Reset() {
	*x = UploadHotPatchTemplateToOnlineRequest{}
	mi := &file_yakgrpc_proto_msgTypes[817]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadHotPatchTemplateToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadHotPatchTemplateToOnlineRequest) ProtoMessage() {}

func (x *UploadHotPatchTemplateToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[817]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadHotPatchTemplateToOnlineRequest.ProtoReflect.Descriptor instead.
func (*UploadHotPatchTemplateToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{817}
}

func (x *UploadHotPatchTemplateToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UploadHotPatchTemplateToOnlineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadHotPatchTemplateToOnlineRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DownloadHotPatchTemplateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"` // fuzzer/mitm/httpflow-analyze
	Token         string                 `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadHotPatchTemplateRequest) Reset() {
	*x = DownloadHotPatchTemplateRequest{}
	mi := &file_yakgrpc_proto_msgTypes[818]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadHotPatchTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadHotPatchTemplateRequest) ProtoMessage() {}

func (x *DownloadHotPatchTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[818]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadHotPatchTemplateRequest.ProtoReflect.Descriptor instead.
func (*DownloadHotPatchTemplateRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{818}
}

func (x *DownloadHotPatchTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DownloadHotPatchTemplateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DownloadHotPatchTemplateRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ExportHTTPFlowStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryHTTPFlowRequest  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	FieldName     []string               `protobuf:"bytes,2,rep,name=FieldName,proto3" json:"FieldName,omitempty"`
	ExportType    string                 `protobuf:"bytes,3,opt,name=ExportType,proto3" json:"ExportType,omitempty"` // csv/har
	TargetPath    string                 `protobuf:"bytes,4,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportHTTPFlowStreamRequest) Reset() {
	*x = ExportHTTPFlowStreamRequest{}
	mi := &file_yakgrpc_proto_msgTypes[819]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportHTTPFlowStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHTTPFlowStreamRequest) ProtoMessage() {}

func (x *ExportHTTPFlowStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[819]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHTTPFlowStreamRequest.ProtoReflect.Descriptor instead.
func (*ExportHTTPFlowStreamRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{819}
}

func (x *ExportHTTPFlowStreamRequest) GetFilter() *QueryHTTPFlowRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExportHTTPFlowStreamRequest) GetFieldName() []string {
	if x != nil {
		return x.FieldName
	}
	return nil
}

func (x *ExportHTTPFlowStreamRequest) GetExportType() string {
	if x != nil {
		return x.ExportType
	}
	return ""
}

func (x *ExportHTTPFlowStreamRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type ExportHTTPFlowStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Percent       float64                `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	Verbose       string                 `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportHTTPFlowStreamResponse) Reset() {
	*x = ExportHTTPFlowStreamResponse{}
	mi := &file_yakgrpc_proto_msgTypes[820]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportHTTPFlowStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHTTPFlowStreamResponse) ProtoMessage() {}

func (x *ExportHTTPFlowStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[820]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHTTPFlowStreamResponse.ProtoReflect.Descriptor instead.
func (*ExportHTTPFlowStreamResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{820}
}

func (x *ExportHTTPFlowStreamResponse) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ExportHTTPFlowStreamResponse) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type ImportHTTPFlowStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InputPath     string                 `protobuf:"bytes,1,opt,name=InputPath,proto3" json:"InputPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportHTTPFlowStreamRequest) Reset() {
	*x = ImportHTTPFlowStreamRequest{}
	mi := &file_yakgrpc_proto_msgTypes[821]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportHTTPFlowStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportHTTPFlowStreamRequest) ProtoMessage() {}

func (x *ImportHTTPFlowStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[821]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportHTTPFlowStreamRequest.ProtoReflect.Descriptor instead.
func (*ImportHTTPFlowStreamRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{821}
}

func (x *ImportHTTPFlowStreamRequest) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

type ImportHTTPFlowStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Percent       float64                `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	Verbose       string                 `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportHTTPFlowStreamResponse) Reset() {
	*x = ImportHTTPFlowStreamResponse{}
	mi := &file_yakgrpc_proto_msgTypes[822]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportHTTPFlowStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportHTTPFlowStreamResponse) ProtoMessage() {}

func (x *ImportHTTPFlowStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[822]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportHTTPFlowStreamResponse.ProtoReflect.Descriptor instead.
func (*ImportHTTPFlowStreamResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{822}
}

func (x *ImportHTTPFlowStreamResponse) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ImportHTTPFlowStreamResponse) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type Note struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	CreateAt      int64                  `protobuf:"varint,4,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt      int64                  `protobuf:"varint,5,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Note) Reset() {
	*x = Note{}
	mi := &file_yakgrpc_proto_msgTypes[823]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[823]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{823}
}

func (x *Note) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Note) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Note) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Note) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Note) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

type NoteContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Note          *Note                  `protobuf:"bytes,1,opt,name=Note,proto3" json:"Note,omitempty"`
	Index         uint64                 `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Line          uint64                 `protobuf:"varint,3,opt,name=Line,proto3" json:"Line,omitempty"`
	LineContent   string                 `protobuf:"bytes,4,opt,name=LineContent,proto3" json:"LineContent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoteContent) Reset() {
	*x = NoteContent{}
	mi := &file_yakgrpc_proto_msgTypes[824]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteContent) ProtoMessage() {}

func (x *NoteContent) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[824]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteContent.ProtoReflect.Descriptor instead.
func (*NoteContent) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{824}
}

func (x *NoteContent) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NoteContent) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NoteContent) GetLine() uint64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *NoteContent) GetLineContent() string {
	if x != nil {
		return x.LineContent
	}
	return ""
}

type NoteFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []uint64               `protobuf:"varint,1,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	Title         []string               `protobuf:"bytes,2,rep,name=Title,proto3" json:"Title,omitempty"`
	Keyword       []string               `protobuf:"bytes,3,rep,name=Keyword,proto3" json:"Keyword,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoteFilter) Reset() {
	*x = NoteFilter{}
	mi := &file_yakgrpc_proto_msgTypes[825]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteFilter) ProtoMessage() {}

func (x *NoteFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[825]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteFilter.ProtoReflect.Descriptor instead.
func (*NoteFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{825}
}

func (x *NoteFilter) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NoteFilter) GetTitle() []string {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *NoteFilter) GetKeyword() []string {
	if x != nil {
		return x.Keyword
	}
	return nil
}

type CreateNoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNoteRequest) Reset() {
	*x = CreateNoteRequest{}
	mi := &file_yakgrpc_proto_msgTypes[826]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNoteRequest) ProtoMessage() {}

func (x *CreateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[826]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNoteRequest.ProtoReflect.Descriptor instead.
func (*CreateNoteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{826}
}

func (x *CreateNoteRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateNoteRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	NoteId        int64                  `protobuf:"varint,2,opt,name=NoteId,proto3" json:"NoteId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNoteResponse) Reset() {
	*x = CreateNoteResponse{}
	mi := &file_yakgrpc_proto_msgTypes[827]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNoteResponse) ProtoMessage() {}

func (x *CreateNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[827]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNoteResponse.ProtoReflect.Descriptor instead.
func (*CreateNoteResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{827}
}

func (x *CreateNoteResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CreateNoteResponse) GetNoteId() int64 {
	if x != nil {
		return x.NoteId
	}
	return 0
}

type UpdateNoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *NoteFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	UpdateTitle   bool                   `protobuf:"varint,2,opt,name=UpdateTitle,proto3" json:"UpdateTitle,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	UpdateContent bool                   `protobuf:"varint,4,opt,name=UpdateContent,proto3" json:"UpdateContent,omitempty"`
	Content       string                 `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNoteRequest) Reset() {
	*x = UpdateNoteRequest{}
	mi := &file_yakgrpc_proto_msgTypes[828]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNoteRequest) ProtoMessage() {}

func (x *UpdateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[828]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNoteRequest.ProtoReflect.Descriptor instead.
func (*UpdateNoteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{828}
}

func (x *UpdateNoteRequest) GetFilter() *NoteFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *UpdateNoteRequest) GetUpdateTitle() bool {
	if x != nil {
		return x.UpdateTitle
	}
	return false
}

func (x *UpdateNoteRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateNoteRequest) GetUpdateContent() bool {
	if x != nil {
		return x.UpdateContent
	}
	return false
}

func (x *UpdateNoteRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DeleteNoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *NoteFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNoteRequest) Reset() {
	*x = DeleteNoteRequest{}
	mi := &file_yakgrpc_proto_msgTypes[829]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNoteRequest) ProtoMessage() {}

func (x *DeleteNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[829]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNoteRequest.ProtoReflect.Descriptor instead.
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{829}
}

func (x *DeleteNoteRequest) GetFilter() *NoteFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QueryNoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *NoteFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNoteRequest) Reset() {
	*x = QueryNoteRequest{}
	mi := &file_yakgrpc_proto_msgTypes[830]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNoteRequest) ProtoMessage() {}

func (x *QueryNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[830]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNoteRequest.ProtoReflect.Descriptor instead.
func (*QueryNoteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{830}
}

func (x *QueryNoteRequest) GetFilter() *NoteFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryNoteRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*Note                `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNoteResponse) Reset() {
	*x = QueryNoteResponse{}
	mi := &file_yakgrpc_proto_msgTypes[831]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNoteResponse) ProtoMessage() {}

func (x *QueryNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[831]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNoteResponse.ProtoReflect.Descriptor instead.
func (*QueryNoteResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{831}
}

func (x *QueryNoteResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryNoteResponse) GetData() []*Note {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryNoteResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SearchNoteContentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyword       string                 `protobuf:"bytes,1,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchNoteContentRequest) Reset() {
	*x = SearchNoteContentRequest{}
	mi := &file_yakgrpc_proto_msgTypes[832]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchNoteContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNoteContentRequest) ProtoMessage() {}

func (x *SearchNoteContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[832]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNoteContentRequest.ProtoReflect.Descriptor instead.
func (*SearchNoteContentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{832}
}

func (x *SearchNoteContentRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchNoteContentRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchNoteContentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Paging                `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data          []*NoteContent         `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchNoteContentResponse) Reset() {
	*x = SearchNoteContentResponse{}
	mi := &file_yakgrpc_proto_msgTypes[833]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchNoteContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNoteContentResponse) ProtoMessage() {}

func (x *SearchNoteContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[833]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNoteContentResponse.ProtoReflect.Descriptor instead.
func (*SearchNoteContentResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{833}
}

func (x *SearchNoteContentResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchNoteContentResponse) GetData() []*NoteContent {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchNoteContentResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ImportNoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPath    string                 `protobuf:"bytes,1,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportNoteRequest) Reset() {
	*x = ImportNoteRequest{}
	mi := &file_yakgrpc_proto_msgTypes[834]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportNoteRequest) ProtoMessage() {}

func (x *ImportNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[834]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportNoteRequest.ProtoReflect.Descriptor instead.
func (*ImportNoteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{834}
}

func (x *ImportNoteRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type ImportNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Percent       float64                `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	Verbose       string                 `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	NoteId        int64                  `protobuf:"varint,3,opt,name=NoteId,proto3" json:"NoteId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportNoteResponse) Reset() {
	*x = ImportNoteResponse{}
	mi := &file_yakgrpc_proto_msgTypes[835]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportNoteResponse) ProtoMessage() {}

func (x *ImportNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[835]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportNoteResponse.ProtoReflect.Descriptor instead.
func (*ImportNoteResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{835}
}

func (x *ImportNoteResponse) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ImportNoteResponse) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *ImportNoteResponse) GetNoteId() int64 {
	if x != nil {
		return x.NoteId
	}
	return 0
}

type ExportNoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *NoteFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	TargetPath    string                 `protobuf:"bytes,2,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportNoteRequest) Reset() {
	*x = ExportNoteRequest{}
	mi := &file_yakgrpc_proto_msgTypes[836]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportNoteRequest) ProtoMessage() {}

func (x *ExportNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[836]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportNoteRequest.ProtoReflect.Descriptor instead.
func (*ExportNoteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{836}
}

func (x *ExportNoteRequest) GetFilter() *NoteFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExportNoteRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type ExportNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Percent       float64                `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	Verbose       string                 `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportNoteResponse) Reset() {
	*x = ExportNoteResponse{}
	mi := &file_yakgrpc_proto_msgTypes[837]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportNoteResponse) ProtoMessage() {}

func (x *ExportNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[837]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportNoteResponse.ProtoReflect.Descriptor instead.
func (*ExportNoteResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{837}
}

func (x *ExportNoteResponse) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ExportNoteResponse) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type ListAiModelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        string                 `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAiModelRequest) Reset() {
	*x = ListAiModelRequest{}
	mi := &file_yakgrpc_proto_msgTypes[838]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAiModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAiModelRequest) ProtoMessage() {}

func (x *ListAiModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[838]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAiModelRequest.ProtoReflect.Descriptor instead.
func (*ListAiModelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{838}
}

func (x *ListAiModelRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type ListAiModelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelName     []string               `protobuf:"bytes,1,rep,name=ModelName,proto3" json:"ModelName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAiModelResponse) Reset() {
	*x = ListAiModelResponse{}
	mi := &file_yakgrpc_proto_msgTypes[839]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAiModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAiModelResponse) ProtoMessage() {}

func (x *ListAiModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[839]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAiModelResponse.ProtoReflect.Descriptor instead.
func (*ListAiModelResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{839}
}

func (x *ListAiModelResponse) GetModelName() []string {
	if x != nil {
		return x.ModelName
	}
	return nil
}

// Local Model Messages
type IsLlamaServerReadyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsLlamaServerReadyResponse) Reset() {
	*x = IsLlamaServerReadyResponse{}
	mi := &file_yakgrpc_proto_msgTypes[840]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsLlamaServerReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLlamaServerReadyResponse) ProtoMessage() {}

func (x *IsLlamaServerReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[840]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLlamaServerReadyResponse.ProtoReflect.Descriptor instead.
func (*IsLlamaServerReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{840}
}

func (x *IsLlamaServerReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsLlamaServerReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type IsLocalModelReadyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelName     string                 `protobuf:"bytes,1,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsLocalModelReadyRequest) Reset() {
	*x = IsLocalModelReadyRequest{}
	mi := &file_yakgrpc_proto_msgTypes[841]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsLocalModelReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLocalModelReadyRequest) ProtoMessage() {}

func (x *IsLocalModelReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[841]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLocalModelReadyRequest.ProtoReflect.Descriptor instead.
func (*IsLocalModelReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{841}
}

func (x *IsLocalModelReadyRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type IsLocalModelReadyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsLocalModelReadyResponse) Reset() {
	*x = IsLocalModelReadyResponse{}
	mi := &file_yakgrpc_proto_msgTypes[842]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsLocalModelReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLocalModelReadyResponse) ProtoMessage() {}

func (x *IsLocalModelReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[842]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLocalModelReadyResponse.ProtoReflect.Descriptor instead.
func (*IsLocalModelReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{842}
}

func (x *IsLocalModelReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsLocalModelReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type InstallLlamaServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proxy         string                 `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallLlamaServerRequest) Reset() {
	*x = InstallLlamaServerRequest{}
	mi := &file_yakgrpc_proto_msgTypes[843]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallLlamaServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallLlamaServerRequest) ProtoMessage() {}

func (x *InstallLlamaServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[843]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallLlamaServerRequest.ProtoReflect.Descriptor instead.
func (*InstallLlamaServerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{843}
}

func (x *InstallLlamaServerRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type StartLocalModelRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ModelName        string                 `protobuf:"bytes,1,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	Host             string                 `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	Port             int32                  `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	ContextSize      int32                  `protobuf:"varint,4,opt,name=ContextSize,proto3" json:"ContextSize,omitempty"`
	BatchSize        int32                  `protobuf:"varint,5,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	Threads          int32                  `protobuf:"varint,6,opt,name=Threads,proto3" json:"Threads,omitempty"`
	Debug            bool                   `protobuf:"varint,8,opt,name=Debug,proto3" json:"Debug,omitempty"`
	Pooling          string                 `protobuf:"bytes,9,opt,name=Pooling,proto3" json:"Pooling,omitempty"`
	StartupTimeoutMs int64                  `protobuf:"varint,10,opt,name=StartupTimeoutMs,proto3" json:"StartupTimeoutMs,omitempty"`
	Args             []string               `protobuf:"bytes,11,rep,name=Args,proto3" json:"Args,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StartLocalModelRequest) Reset() {
	*x = StartLocalModelRequest{}
	mi := &file_yakgrpc_proto_msgTypes[844]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartLocalModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartLocalModelRequest) ProtoMessage() {}

func (x *StartLocalModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[844]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartLocalModelRequest.ProtoReflect.Descriptor instead.
func (*StartLocalModelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{844}
}

func (x *StartLocalModelRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *StartLocalModelRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StartLocalModelRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StartLocalModelRequest) GetContextSize() int32 {
	if x != nil {
		return x.ContextSize
	}
	return 0
}

func (x *StartLocalModelRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *StartLocalModelRequest) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *StartLocalModelRequest) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *StartLocalModelRequest) GetPooling() string {
	if x != nil {
		return x.Pooling
	}
	return ""
}

func (x *StartLocalModelRequest) GetStartupTimeoutMs() int64 {
	if x != nil {
		return x.StartupTimeoutMs
	}
	return 0
}

func (x *StartLocalModelRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type DownloadLocalModelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelName     string                 `protobuf:"bytes,1,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	Proxy         string                 `protobuf:"bytes,2,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadLocalModelRequest) Reset() {
	*x = DownloadLocalModelRequest{}
	mi := &file_yakgrpc_proto_msgTypes[845]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadLocalModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadLocalModelRequest) ProtoMessage() {}

func (x *DownloadLocalModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[845]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadLocalModelRequest.ProtoReflect.Descriptor instead.
func (*DownloadLocalModelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{845}
}

func (x *DownloadLocalModelRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *DownloadLocalModelRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type LocalModelConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	FileName      string                 `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName,omitempty"`
	DownloadURL   string                 `protobuf:"bytes,4,opt,name=DownloadURL,proto3" json:"DownloadURL,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	DefaultPort   int32                  `protobuf:"varint,6,opt,name=DefaultPort,proto3" json:"DefaultPort,omitempty"`
	IsLocal       bool                   `protobuf:"varint,7,opt,name=IsLocal,proto3" json:"IsLocal,omitempty"`
	IsReady       bool                   `protobuf:"varint,8,opt,name=IsReady,proto3" json:"IsReady,omitempty"`
	Path          string                 `protobuf:"bytes,9,opt,name=Path,proto3" json:"Path,omitempty"`
	Status        *LocalModelStatus      `protobuf:"bytes,10,opt,name=Status,proto3" json:"Status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalModelConfig) Reset() {
	*x = LocalModelConfig{}
	mi := &file_yakgrpc_proto_msgTypes[846]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalModelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalModelConfig) ProtoMessage() {}

func (x *LocalModelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[846]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalModelConfig.ProtoReflect.Descriptor instead.
func (*LocalModelConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{846}
}

func (x *LocalModelConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocalModelConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LocalModelConfig) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *LocalModelConfig) GetDownloadURL() string {
	if x != nil {
		return x.DownloadURL
	}
	return ""
}

func (x *LocalModelConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LocalModelConfig) GetDefaultPort() int32 {
	if x != nil {
		return x.DefaultPort
	}
	return 0
}

func (x *LocalModelConfig) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *LocalModelConfig) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *LocalModelConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LocalModelConfig) GetStatus() *LocalModelStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetSupportedLocalModelsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Models        []*LocalModelConfig    `protobuf:"bytes,1,rep,name=Models,proto3" json:"Models,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSupportedLocalModelsResponse) Reset() {
	*x = GetSupportedLocalModelsResponse{}
	mi := &file_yakgrpc_proto_msgTypes[847]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSupportedLocalModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedLocalModelsResponse) ProtoMessage() {}

func (x *GetSupportedLocalModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[847]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedLocalModelsResponse.ProtoReflect.Descriptor instead.
func (*GetSupportedLocalModelsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{847}
}

func (x *GetSupportedLocalModelsResponse) GetModels() []*LocalModelConfig {
	if x != nil {
		return x.Models
	}
	return nil
}

type MITMV2Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// mitm config message
	Host            string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Port            uint32 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	DownstreamProxy string `protobuf:"bytes,3,opt,name=DownstreamProxy,proto3" json:"DownstreamProxy,omitempty"`
	// runtime change proxy
	SetDownstreamProxy bool `protobuf:"varint,4,opt,name=SetDownstreamProxy,proto3" json:"SetDownstreamProxy,omitempty"` // runtime change proxy
	EnableHttp2        bool `protobuf:"varint,5,opt,name=EnableHttp2,proto3" json:"EnableHttp2,omitempty"`
	// gmtls config
	EnableGMTLS     bool           `protobuf:"varint,6,opt,name=EnableGMTLS,proto3" json:"EnableGMTLS,omitempty"`
	OnlyEnableGMTLS bool           `protobuf:"varint,7,opt,name=OnlyEnableGMTLS,proto3" json:"OnlyEnableGMTLS,omitempty"`
	PreferGMTLS     bool           `protobuf:"varint,8,opt,name=PreferGMTLS,proto3" json:"PreferGMTLS,omitempty"`
	Certificates    []*Certificate `protobuf:"bytes,9,rep,name=Certificates,proto3" json:"Certificates,omitempty"`
	ProxyUsername   string         `protobuf:"bytes,10,opt,name=ProxyUsername,proto3" json:"ProxyUsername,omitempty"`
	ProxyPassword   string         `protobuf:"bytes,11,opt,name=ProxyPassword,proto3" json:"ProxyPassword,omitempty"`
	EnableProxyAuth bool           `protobuf:"varint,12,opt,name=EnableProxyAuth,proto3" json:"EnableProxyAuth,omitempty"`
	DnsServers      []string       `protobuf:"bytes,13,rep,name=DnsServers,proto3" json:"DnsServers,omitempty"`
	Hosts           []*KVPair      `protobuf:"bytes,14,rep,name=hosts,proto3" json:"hosts,omitempty"`
	HostsMapping    []*KVPair      `protobuf:"bytes,46,rep,name=HostsMapping,proto3" json:"HostsMapping,omitempty"`
	// max content-length
	MaxContentLength int64 `protobuf:"varint,15,opt,name=MaxContentLength,proto3" json:"MaxContentLength,omitempty"`
	MaxReadWaitTime  int64 `protobuf:"varint,16,opt,name=MaxReadWaitTime,proto3" json:"MaxReadWaitTime,omitempty"`
	// 过滤 ws
	FilterWebsocket       bool `protobuf:"varint,17,opt,name=FilterWebsocket,proto3" json:"FilterWebsocket,omitempty"`
	UpdateFilterWebsocket bool `protobuf:"varint,18,opt,name=UpdateFilterWebsocket,proto3" json:"UpdateFilterWebsocket,omitempty"`
	// force close
	ForceDisableKeepAlive bool `protobuf:"varint,19,opt,name=ForceDisableKeepAlive,proto3" json:"ForceDisableKeepAlive,omitempty"`
	// disable MITM CA Cert Page
	DisableCACertPage bool `protobuf:"varint,20,opt,name=DisableCACertPage,proto3" json:"DisableCACertPage,omitempty"`
	// random JA3 fingerprint
	RandomJA3 bool `protobuf:"varint,21,opt,name=RandomJA3,proto3" json:"RandomJA3,omitempty"`
	// disable websocket compression
	DisableWebsocketCompression bool `protobuf:"varint,22,opt,name=DisableWebsocketCompression,proto3" json:"DisableWebsocketCompression,omitempty"`
	// filter
	FilterData   *MITMFilterData `protobuf:"bytes,23,opt,name=FilterData,proto3" json:"FilterData,omitempty"`
	UpdateFilter bool            `protobuf:"varint,24,opt,name=UpdateFilter,proto3" json:"UpdateFilter,omitempty"`
	ResetFilter  bool            `protobuf:"varint,25,opt,name=ResetFilter,proto3" json:"ResetFilter,omitempty"`
	// condition hijack filter
	HijackFilterData   *MITMFilterData `protobuf:"bytes,26,opt,name=HijackFilterData,proto3" json:"HijackFilterData,omitempty"`
	UpdateHijackFilter bool            `protobuf:"varint,27,opt,name=UpdateHijackFilter,proto3" json:"UpdateHijackFilter,omitempty"`
	// set content replacers
	SetContentReplacers bool                   `protobuf:"varint,28,opt,name=SetContentReplacers,proto3" json:"SetContentReplacers,omitempty"`
	Replacers           []*MITMContentReplacer `protobuf:"bytes,29,rep,name=Replacers,proto3" json:"Replacers,omitempty"`
	// mitm yak script cli/hotpatch
	SetYakScript     bool             `protobuf:"varint,30,opt,name=SetYakScript,proto3" json:"SetYakScript,omitempty"`
	YakScriptParams  []*ExecParamItem `protobuf:"bytes,31,rep,name=YakScriptParams,proto3" json:"YakScriptParams,omitempty"`
	YakScriptID      int64            `protobuf:"varint,32,opt,name=YakScriptID,proto3" json:"YakScriptID,omitempty"`
	YakScriptContent string           `protobuf:"bytes,33,opt,name=YakScriptContent,proto3" json:"YakScriptContent,omitempty"`
	GetCurrentHook   bool             `protobuf:"varint,34,opt,name=GetCurrentHook,proto3" json:"GetCurrentHook,omitempty"` // get current hook plugin
	// remove hook plugin
	RemoveHook                bool              `protobuf:"varint,35,opt,name=RemoveHook,proto3" json:"RemoveHook,omitempty"`
	RemoveHookParams          *RemoveHookParams `protobuf:"bytes,36,opt,name=RemoveHookParams,proto3" json:"RemoveHookParams,omitempty"`
	SetClearMITMPluginContext bool              `protobuf:"varint,37,opt,name=SetClearMITMPluginContext,proto3" json:"SetClearMITMPluginContext,omitempty"`
	// 设置启用插件模式，自动加载所有主插件。
	// 如果不设置 initPluginNames 的话，启动所有默认插件
	SetPluginMode   bool     `protobuf:"varint,38,opt,name=SetPluginMode,proto3" json:"SetPluginMode,omitempty"`
	InitPluginNames []string `protobuf:"bytes,39,rep,name=InitPluginNames,proto3" json:"InitPluginNames,omitempty"`
	// mitm manual hijack message
	SetAutoForward      bool                              `protobuf:"varint,40,opt,name=SetAutoForward,proto3" json:"SetAutoForward,omitempty"`
	AutoForwardValue    bool                              `protobuf:"varint,41,opt,name=AutoForwardValue,proto3" json:"AutoForwardValue,omitempty"`
	RecoverManualHijack bool                              `protobuf:"varint,42,opt,name=RecoverManualHijack,proto3" json:"RecoverManualHijack,omitempty"`
	ManualHijackControl bool                              `protobuf:"varint,43,opt,name=ManualHijackControl,proto3" json:"ManualHijackControl,omitempty"`
	ManualHijackMessage *SingleManualHijackControlMessage `protobuf:"bytes,44,opt,name=ManualHijackMessage,proto3" json:"ManualHijackMessage,omitempty"`
	RecoverContext      bool                              `protobuf:"varint,45,opt,name=RecoverContext,proto3" json:"RecoverContext,omitempty"`       // recover mitm context plugin config...
	PluginConcurrency   int64                             `protobuf:"varint,47,opt,name=PluginConcurrency,proto3" json:"PluginConcurrency,omitempty"` // 设置插件并发数，默认30
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MITMV2Request) Reset() {
	*x = MITMV2Request{}
	mi := &file_yakgrpc_proto_msgTypes[848]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MITMV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMV2Request) ProtoMessage() {}

func (x *MITMV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[848]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMV2Request.ProtoReflect.Descriptor instead.
func (*MITMV2Request) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{848}
}

func (x *MITMV2Request) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MITMV2Request) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MITMV2Request) GetDownstreamProxy() string {
	if x != nil {
		return x.DownstreamProxy
	}
	return ""
}

func (x *MITMV2Request) GetSetDownstreamProxy() bool {
	if x != nil {
		return x.SetDownstreamProxy
	}
	return false
}

func (x *MITMV2Request) GetEnableHttp2() bool {
	if x != nil {
		return x.EnableHttp2
	}
	return false
}

func (x *MITMV2Request) GetEnableGMTLS() bool {
	if x != nil {
		return x.EnableGMTLS
	}
	return false
}

func (x *MITMV2Request) GetOnlyEnableGMTLS() bool {
	if x != nil {
		return x.OnlyEnableGMTLS
	}
	return false
}

func (x *MITMV2Request) GetPreferGMTLS() bool {
	if x != nil {
		return x.PreferGMTLS
	}
	return false
}

func (x *MITMV2Request) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *MITMV2Request) GetProxyUsername() string {
	if x != nil {
		return x.ProxyUsername
	}
	return ""
}

func (x *MITMV2Request) GetProxyPassword() string {
	if x != nil {
		return x.ProxyPassword
	}
	return ""
}

func (x *MITMV2Request) GetEnableProxyAuth() bool {
	if x != nil {
		return x.EnableProxyAuth
	}
	return false
}

func (x *MITMV2Request) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *MITMV2Request) GetHosts() []*KVPair {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *MITMV2Request) GetHostsMapping() []*KVPair {
	if x != nil {
		return x.HostsMapping
	}
	return nil
}

func (x *MITMV2Request) GetMaxContentLength() int64 {
	if x != nil {
		return x.MaxContentLength
	}
	return 0
}

func (x *MITMV2Request) GetMaxReadWaitTime() int64 {
	if x != nil {
		return x.MaxReadWaitTime
	}
	return 0
}

func (x *MITMV2Request) GetFilterWebsocket() bool {
	if x != nil {
		return x.FilterWebsocket
	}
	return false
}

func (x *MITMV2Request) GetUpdateFilterWebsocket() bool {
	if x != nil {
		return x.UpdateFilterWebsocket
	}
	return false
}

func (x *MITMV2Request) GetForceDisableKeepAlive() bool {
	if x != nil {
		return x.ForceDisableKeepAlive
	}
	return false
}

func (x *MITMV2Request) GetDisableCACertPage() bool {
	if x != nil {
		return x.DisableCACertPage
	}
	return false
}

func (x *MITMV2Request) GetRandomJA3() bool {
	if x != nil {
		return x.RandomJA3
	}
	return false
}

func (x *MITMV2Request) GetDisableWebsocketCompression() bool {
	if x != nil {
		return x.DisableWebsocketCompression
	}
	return false
}

func (x *MITMV2Request) GetFilterData() *MITMFilterData {
	if x != nil {
		return x.FilterData
	}
	return nil
}

func (x *MITMV2Request) GetUpdateFilter() bool {
	if x != nil {
		return x.UpdateFilter
	}
	return false
}

func (x *MITMV2Request) GetResetFilter() bool {
	if x != nil {
		return x.ResetFilter
	}
	return false
}

func (x *MITMV2Request) GetHijackFilterData() *MITMFilterData {
	if x != nil {
		return x.HijackFilterData
	}
	return nil
}

func (x *MITMV2Request) GetUpdateHijackFilter() bool {
	if x != nil {
		return x.UpdateHijackFilter
	}
	return false
}

func (x *MITMV2Request) GetSetContentReplacers() bool {
	if x != nil {
		return x.SetContentReplacers
	}
	return false
}

func (x *MITMV2Request) GetReplacers() []*MITMContentReplacer {
	if x != nil {
		return x.Replacers
	}
	return nil
}

func (x *MITMV2Request) GetSetYakScript() bool {
	if x != nil {
		return x.SetYakScript
	}
	return false
}

func (x *MITMV2Request) GetYakScriptParams() []*ExecParamItem {
	if x != nil {
		return x.YakScriptParams
	}
	return nil
}

func (x *MITMV2Request) GetYakScriptID() int64 {
	if x != nil {
		return x.YakScriptID
	}
	return 0
}

func (x *MITMV2Request) GetYakScriptContent() string {
	if x != nil {
		return x.YakScriptContent
	}
	return ""
}

func (x *MITMV2Request) GetGetCurrentHook() bool {
	if x != nil {
		return x.GetCurrentHook
	}
	return false
}

func (x *MITMV2Request) GetRemoveHook() bool {
	if x != nil {
		return x.RemoveHook
	}
	return false
}

func (x *MITMV2Request) GetRemoveHookParams() *RemoveHookParams {
	if x != nil {
		return x.RemoveHookParams
	}
	return nil
}

func (x *MITMV2Request) GetSetClearMITMPluginContext() bool {
	if x != nil {
		return x.SetClearMITMPluginContext
	}
	return false
}

func (x *MITMV2Request) GetSetPluginMode() bool {
	if x != nil {
		return x.SetPluginMode
	}
	return false
}

func (x *MITMV2Request) GetInitPluginNames() []string {
	if x != nil {
		return x.InitPluginNames
	}
	return nil
}

func (x *MITMV2Request) GetSetAutoForward() bool {
	if x != nil {
		return x.SetAutoForward
	}
	return false
}

func (x *MITMV2Request) GetAutoForwardValue() bool {
	if x != nil {
		return x.AutoForwardValue
	}
	return false
}

func (x *MITMV2Request) GetRecoverManualHijack() bool {
	if x != nil {
		return x.RecoverManualHijack
	}
	return false
}

func (x *MITMV2Request) GetManualHijackControl() bool {
	if x != nil {
		return x.ManualHijackControl
	}
	return false
}

func (x *MITMV2Request) GetManualHijackMessage() *SingleManualHijackControlMessage {
	if x != nil {
		return x.ManualHijackMessage
	}
	return nil
}

func (x *MITMV2Request) GetRecoverContext() bool {
	if x != nil {
		return x.RecoverContext
	}
	return false
}

func (x *MITMV2Request) GetPluginConcurrency() int64 {
	if x != nil {
		return x.PluginConcurrency
	}
	return 0
}

type MITMV2Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// filter
	JustFilter bool            `protobuf:"varint,1,opt,name=JustFilter,proto3" json:"JustFilter,omitempty"`
	FilterData *MITMFilterData `protobuf:"bytes,2,opt,name=FilterData,proto3" json:"FilterData,omitempty"`
	// Replacer
	JustContentReplacer bool                   `protobuf:"varint,3,opt,name=JustContentReplacer,proto3" json:"JustContentReplacer,omitempty"`
	Replacers           []*MITMContentReplacer `protobuf:"bytes,4,rep,name=Replacers,proto3" json:"Replacers,omitempty"`
	// exec result
	HaveMessage    bool              `protobuf:"varint,7,opt,name=HaveMessage,proto3" json:"HaveMessage,omitempty"`
	Message        *ExecResult       `protobuf:"bytes,8,opt,name=Message,proto3" json:"Message,omitempty"`
	GetCurrentHook bool              `protobuf:"varint,9,opt,name=GetCurrentHook,proto3" json:"GetCurrentHook,omitempty"`
	Hooks          []*YakScriptHooks `protobuf:"bytes,10,rep,name=Hooks,proto3" json:"Hooks,omitempty"`
	// server notification, just show a dialog
	HaveNotification    bool   `protobuf:"varint,11,opt,name=HaveNotification,proto3" json:"HaveNotification,omitempty"`
	NotificationContent []byte `protobuf:"bytes,12,opt,name=NotificationContent,proto3" json:"NotificationContent,omitempty"`
	// 这两个标志是用来设置 MITM 加载状态的，用于服务端控制用户端的 "加载中"
	HaveLoadingSetter      bool                             `protobuf:"varint,13,opt,name=HaveLoadingSetter,proto3" json:"HaveLoadingSetter,omitempty"`
	LoadingFlag            bool                             `protobuf:"varint,14,opt,name=LoadingFlag,proto3" json:"LoadingFlag,omitempty"`
	ManualHijackListAction string                           `protobuf:"bytes,15,opt,name=ManualHijackListAction,proto3" json:"ManualHijackListAction,omitempty"` // add\delete\update\reload
	ManualHijackList       []*SingleManualHijackInfoMessage `protobuf:"bytes,16,rep,name=ManualHijackList,proto3" json:"ManualHijackList,omitempty"`             // top 20 hijack message
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MITMV2Response) Reset() {
	*x = MITMV2Response{}
	mi := &file_yakgrpc_proto_msgTypes[849]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MITMV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMV2Response) ProtoMessage() {}

func (x *MITMV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[849]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMV2Response.ProtoReflect.Descriptor instead.
func (*MITMV2Response) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{849}
}

func (x *MITMV2Response) GetJustFilter() bool {
	if x != nil {
		return x.JustFilter
	}
	return false
}

func (x *MITMV2Response) GetFilterData() *MITMFilterData {
	if x != nil {
		return x.FilterData
	}
	return nil
}

func (x *MITMV2Response) GetJustContentReplacer() bool {
	if x != nil {
		return x.JustContentReplacer
	}
	return false
}

func (x *MITMV2Response) GetReplacers() []*MITMContentReplacer {
	if x != nil {
		return x.Replacers
	}
	return nil
}

func (x *MITMV2Response) GetHaveMessage() bool {
	if x != nil {
		return x.HaveMessage
	}
	return false
}

func (x *MITMV2Response) GetMessage() *ExecResult {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MITMV2Response) GetGetCurrentHook() bool {
	if x != nil {
		return x.GetCurrentHook
	}
	return false
}

func (x *MITMV2Response) GetHooks() []*YakScriptHooks {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *MITMV2Response) GetHaveNotification() bool {
	if x != nil {
		return x.HaveNotification
	}
	return false
}

func (x *MITMV2Response) GetNotificationContent() []byte {
	if x != nil {
		return x.NotificationContent
	}
	return nil
}

func (x *MITMV2Response) GetHaveLoadingSetter() bool {
	if x != nil {
		return x.HaveLoadingSetter
	}
	return false
}

func (x *MITMV2Response) GetLoadingFlag() bool {
	if x != nil {
		return x.LoadingFlag
	}
	return false
}

func (x *MITMV2Response) GetManualHijackListAction() string {
	if x != nil {
		return x.ManualHijackListAction
	}
	return ""
}

func (x *MITMV2Response) GetManualHijackList() []*SingleManualHijackInfoMessage {
	if x != nil {
		return x.ManualHijackList
	}
	return nil
}

type SingleManualHijackControlMessage struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	TaskID string                 `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	// update config action: can process multiple config info in single control message
	HijackResponse       bool     `protobuf:"varint,2,opt,name=HijackResponse,proto3" json:"HijackResponse,omitempty"`
	CancelHijackResponse bool     `protobuf:"varint,3,opt,name=CancelHijackResponse,proto3" json:"CancelHijackResponse,omitempty"`
	UpdateTags           bool     `protobuf:"varint,4,opt,name=UpdateTags,proto3" json:"UpdateTags,omitempty"`
	Tags                 []string `protobuf:"bytes,5,rep,name=Tags,proto3" json:"Tags,omitempty"` //--------------------------
	// send packet action: every hijack just can process a send packet action, if set drop|forward|sendpacket hijack will done
	Drop          bool   `protobuf:"varint,6,opt,name=Drop,proto3" json:"Drop,omitempty"`             // drop request|response|payload
	Forward       bool   `protobuf:"varint,7,opt,name=Forward,proto3" json:"Forward,omitempty"`       // send origin request|response|payload
	SendPacket    bool   `protobuf:"varint,8,opt,name=SendPacket,proto3" json:"SendPacket,omitempty"` // send request|response|payload
	Request       []byte `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	Response      []byte `protobuf:"bytes,10,opt,name=Response,proto3" json:"Response,omitempty"`
	Payload       []byte `protobuf:"bytes,11,opt,name=Payload,proto3" json:"Payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleManualHijackControlMessage) Reset() {
	*x = SingleManualHijackControlMessage{}
	mi := &file_yakgrpc_proto_msgTypes[850]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleManualHijackControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleManualHijackControlMessage) ProtoMessage() {}

func (x *SingleManualHijackControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[850]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleManualHijackControlMessage.ProtoReflect.Descriptor instead.
func (*SingleManualHijackControlMessage) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{850}
}

func (x *SingleManualHijackControlMessage) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SingleManualHijackControlMessage) GetHijackResponse() bool {
	if x != nil {
		return x.HijackResponse
	}
	return false
}

func (x *SingleManualHijackControlMessage) GetCancelHijackResponse() bool {
	if x != nil {
		return x.CancelHijackResponse
	}
	return false
}

func (x *SingleManualHijackControlMessage) GetUpdateTags() bool {
	if x != nil {
		return x.UpdateTags
	}
	return false
}

func (x *SingleManualHijackControlMessage) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SingleManualHijackControlMessage) GetDrop() bool {
	if x != nil {
		return x.Drop
	}
	return false
}

func (x *SingleManualHijackControlMessage) GetForward() bool {
	if x != nil {
		return x.Forward
	}
	return false
}

func (x *SingleManualHijackControlMessage) GetSendPacket() bool {
	if x != nil {
		return x.SendPacket
	}
	return false
}

func (x *SingleManualHijackControlMessage) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SingleManualHijackControlMessage) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SingleManualHijackControlMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SingleManualHijackInfoMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TaskID         string                 `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Request        []byte                 `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	Response       []byte                 `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
	Status         string                 `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"` // hijack request / hijack response
	HijackResponse bool                   `protobuf:"varint,5,opt,name=HijackResponse,proto3" json:"HijackResponse,omitempty"`
	Tags           []string               `protobuf:"bytes,6,rep,name=Tags,proto3" json:"Tags,omitempty"`
	IsHttps        bool                   `protobuf:"varint,7,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	URL            string                 `protobuf:"bytes,8,opt,name=URL,proto3" json:"URL,omitempty"`
	RemoteAddr     string                 `protobuf:"bytes,9,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	// websocket
	IsWebsocket     bool       `protobuf:"varint,10,opt,name=IsWebsocket,proto3" json:"IsWebsocket,omitempty"`
	Payload         []byte     `protobuf:"bytes,11,opt,name=Payload,proto3" json:"Payload,omitempty"`
	WebsocketEncode []string   `protobuf:"bytes,12,rep,name=WebsocketEncode,proto3" json:"WebsocketEncode,omitempty"`
	TraceInfo       *TraceInfo `protobuf:"bytes,15,opt,name=TraceInfo,proto3" json:"TraceInfo,omitempty"`
	Method          string     `protobuf:"bytes,16,opt,name=Method,proto3" json:"Method,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SingleManualHijackInfoMessage) Reset() {
	*x = SingleManualHijackInfoMessage{}
	mi := &file_yakgrpc_proto_msgTypes[851]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleManualHijackInfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleManualHijackInfoMessage) ProtoMessage() {}

func (x *SingleManualHijackInfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[851]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleManualHijackInfoMessage.ProtoReflect.Descriptor instead.
func (*SingleManualHijackInfoMessage) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{851}
}

func (x *SingleManualHijackInfoMessage) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SingleManualHijackInfoMessage) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SingleManualHijackInfoMessage) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SingleManualHijackInfoMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SingleManualHijackInfoMessage) GetHijackResponse() bool {
	if x != nil {
		return x.HijackResponse
	}
	return false
}

func (x *SingleManualHijackInfoMessage) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SingleManualHijackInfoMessage) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *SingleManualHijackInfoMessage) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *SingleManualHijackInfoMessage) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *SingleManualHijackInfoMessage) GetIsWebsocket() bool {
	if x != nil {
		return x.IsWebsocket
	}
	return false
}

func (x *SingleManualHijackInfoMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SingleManualHijackInfoMessage) GetWebsocketEncode() []string {
	if x != nil {
		return x.WebsocketEncode
	}
	return nil
}

func (x *SingleManualHijackInfoMessage) GetTraceInfo() *TraceInfo {
	if x != nil {
		return x.TraceInfo
	}
	return nil
}

func (x *SingleManualHijackInfoMessage) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type QueryMITMReplacerRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyWord       string                 `protobuf:"bytes,1,opt,name=KeyWord,proto3" json:"KeyWord,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryMITMReplacerRulesRequest) Reset() {
	*x = QueryMITMReplacerRulesRequest{}
	mi := &file_yakgrpc_proto_msgTypes[852]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMITMReplacerRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMITMReplacerRulesRequest) ProtoMessage() {}

func (x *QueryMITMReplacerRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[852]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMITMReplacerRulesRequest.ProtoReflect.Descriptor instead.
func (*QueryMITMReplacerRulesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{852}
}

func (x *QueryMITMReplacerRulesRequest) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

type QueryMITMReplacerRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         *MITMContentReplacers  `protobuf:"bytes,1,opt,name=Rules,proto3" json:"Rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryMITMReplacerRulesResponse) Reset() {
	*x = QueryMITMReplacerRulesResponse{}
	mi := &file_yakgrpc_proto_msgTypes[853]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMITMReplacerRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMITMReplacerRulesResponse) ProtoMessage() {}

func (x *QueryMITMReplacerRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[853]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMITMReplacerRulesResponse.ProtoReflect.Descriptor instead.
func (*QueryMITMReplacerRulesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{853}
}

func (x *QueryMITMReplacerRulesResponse) GetRules() *MITMContentReplacers {
	if x != nil {
		return x.Rules
	}
	return nil
}

// 插件执行跟踪相关消息定义
type PluginExecutionTrace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceID       string                 `protobuf:"bytes,1,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	PluginID      string                 `protobuf:"bytes,2,opt,name=PluginID,proto3" json:"PluginID,omitempty"`
	HookName      string                 `protobuf:"bytes,3,opt,name=HookName,proto3" json:"HookName,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"` // "pending", "running", "completed", "failed", "cancelled"
	StartTime     int64                  `protobuf:"varint,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	ExecutionArgs []byte                 `protobuf:"bytes,7,opt,name=ExecutionArgs,proto3" json:"ExecutionArgs,omitempty"` // JSON encoded arguments
	ErrorMessage  string                 `protobuf:"bytes,8,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	DurationMs    int64                  `protobuf:"varint,9,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`
	RuntimeId     string                 `protobuf:"bytes,10,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginExecutionTrace) Reset() {
	*x = PluginExecutionTrace{}
	mi := &file_yakgrpc_proto_msgTypes[854]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginExecutionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginExecutionTrace) ProtoMessage() {}

func (x *PluginExecutionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[854]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginExecutionTrace.ProtoReflect.Descriptor instead.
func (*PluginExecutionTrace) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{854}
}

func (x *PluginExecutionTrace) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *PluginExecutionTrace) GetPluginID() string {
	if x != nil {
		return x.PluginID
	}
	return ""
}

func (x *PluginExecutionTrace) GetHookName() string {
	if x != nil {
		return x.HookName
	}
	return ""
}

func (x *PluginExecutionTrace) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PluginExecutionTrace) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PluginExecutionTrace) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PluginExecutionTrace) GetExecutionArgs() []byte {
	if x != nil {
		return x.ExecutionArgs
	}
	return nil
}

func (x *PluginExecutionTrace) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PluginExecutionTrace) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *PluginExecutionTrace) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type PluginTraceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 控制字段
	ControlMode string `protobuf:"bytes,1,opt,name=ControlMode,proto3" json:"ControlMode,omitempty"` // "start_stream", "stop_stream", "cancel_trace", "set_tracing"
	// 取消特定Trace
	TraceID string `protobuf:"bytes,2,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	// Tracing开关 打开PluginTrace流不代表启用了插件Trace
	EnableTracing bool `protobuf:"varint,3,opt,name=EnableTracing,proto3" json:"EnableTracing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginTraceRequest) Reset() {
	*x = PluginTraceRequest{}
	mi := &file_yakgrpc_proto_msgTypes[855]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginTraceRequest) ProtoMessage() {}

func (x *PluginTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[855]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginTraceRequest.ProtoReflect.Descriptor instead.
func (*PluginTraceRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{855}
}

func (x *PluginTraceRequest) GetControlMode() string {
	if x != nil {
		return x.ControlMode
	}
	return ""
}

func (x *PluginTraceRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *PluginTraceRequest) GetEnableTracing() bool {
	if x != nil {
		return x.EnableTracing
	}
	return false
}

type PluginTraceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 响应类型
	ResponseType string `protobuf:"bytes,1,opt,name=ResponseType,proto3" json:"ResponseType,omitempty"` // "trace_update", "control_result"
	// 跟踪列表
	Traces []*PluginExecutionTrace `protobuf:"bytes,2,rep,name=Traces,proto3" json:"Traces,omitempty"`
	// 控制操作结果
	Success bool   `protobuf:"varint,3,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	// 统计信息
	Stats         *PluginTraceStats `protobuf:"bytes,5,opt,name=Stats,proto3" json:"Stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginTraceResponse) Reset() {
	*x = PluginTraceResponse{}
	mi := &file_yakgrpc_proto_msgTypes[856]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginTraceResponse) ProtoMessage() {}

func (x *PluginTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[856]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginTraceResponse.ProtoReflect.Descriptor instead.
func (*PluginTraceResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{856}
}

func (x *PluginTraceResponse) GetResponseType() string {
	if x != nil {
		return x.ResponseType
	}
	return ""
}

func (x *PluginTraceResponse) GetTraces() []*PluginExecutionTrace {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *PluginTraceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PluginTraceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PluginTraceResponse) GetStats() *PluginTraceStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type PluginTraceStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalTraces     int64                  `protobuf:"varint,1,opt,name=TotalTraces,proto3" json:"TotalTraces,omitempty"`
	RunningTraces   int64                  `protobuf:"varint,2,opt,name=RunningTraces,proto3" json:"RunningTraces,omitempty"`
	CompletedTraces int64                  `protobuf:"varint,3,opt,name=CompletedTraces,proto3" json:"CompletedTraces,omitempty"`
	FailedTraces    int64                  `protobuf:"varint,4,opt,name=FailedTraces,proto3" json:"FailedTraces,omitempty"`
	CancelledTraces int64                  `protobuf:"varint,5,opt,name=CancelledTraces,proto3" json:"CancelledTraces,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PluginTraceStats) Reset() {
	*x = PluginTraceStats{}
	mi := &file_yakgrpc_proto_msgTypes[857]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginTraceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginTraceStats) ProtoMessage() {}

func (x *PluginTraceStats) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[857]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginTraceStats.ProtoReflect.Descriptor instead.
func (*PluginTraceStats) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{857}
}

func (x *PluginTraceStats) GetTotalTraces() int64 {
	if x != nil {
		return x.TotalTraces
	}
	return 0
}

func (x *PluginTraceStats) GetRunningTraces() int64 {
	if x != nil {
		return x.RunningTraces
	}
	return 0
}

func (x *PluginTraceStats) GetCompletedTraces() int64 {
	if x != nil {
		return x.CompletedTraces
	}
	return 0
}

func (x *PluginTraceStats) GetFailedTraces() int64 {
	if x != nil {
		return x.FailedTraces
	}
	return 0
}

func (x *PluginTraceStats) GetCancelledTraces() int64 {
	if x != nil {
		return x.CancelledTraces
	}
	return 0
}

// SSA Report Messages
type GenerateSSAReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskID        string                 `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`         // SSA扫描TaskID
	ReportName    string                 `protobuf:"bytes,2,opt,name=ReportName,proto3" json:"ReportName,omitempty"` // 报告名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateSSAReportRequest) Reset() {
	*x = GenerateSSAReportRequest{}
	mi := &file_yakgrpc_proto_msgTypes[858]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSSAReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSSAReportRequest) ProtoMessage() {}

func (x *GenerateSSAReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[858]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSSAReportRequest.ProtoReflect.Descriptor instead.
func (*GenerateSSAReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{858}
}

func (x *GenerateSSAReportRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GenerateSSAReportRequest) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

type GenerateSSAReportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`      // 是否成功
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`       // 消息
	ReportData    string                 `protobuf:"bytes,3,opt,name=ReportData,proto3" json:"ReportData,omitempty"` // 报告数据（当格式不是yakit时）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateSSAReportResponse) Reset() {
	*x = GenerateSSAReportResponse{}
	mi := &file_yakgrpc_proto_msgTypes[859]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSSAReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSSAReportResponse) ProtoMessage() {}

func (x *GenerateSSAReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[859]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSSAReportResponse.ProtoReflect.Descriptor instead.
func (*GenerateSSAReportResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{859}
}

func (x *GenerateSSAReportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GenerateSSAReportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GenerateSSAReportResponse) GetReportData() string {
	if x != nil {
		return x.ReportData
	}
	return ""
}

// SSA Project Messages
type SSAProject struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ID        int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedAt int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt int64                  `protobuf:"varint,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	// 项目基础信息
	ProjectName string   `protobuf:"bytes,4,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Language    string   `protobuf:"bytes,5,opt,name=Language,proto3" json:"Language,omitempty"`
	Description string   `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	Tags        []string `protobuf:"bytes,7,rep,name=Tags,proto3" json:"Tags,omitempty"`
	// 源代码来源
	CodeSourceConfig string `protobuf:"bytes,8,opt,name=CodeSourceConfig,proto3" json:"CodeSourceConfig,omitempty"`
	// 编译配置选项
	CompileConfig *SSAProjectCompileConfig `protobuf:"bytes,9,opt,name=CompileConfig,proto3" json:"CompileConfig,omitempty"`
	// 扫描配置选项
	ScanConfig *SSAProjectScanConfig `protobuf:"bytes,10,opt,name=ScanConfig,proto3" json:"ScanConfig,omitempty"`
	// 规则策略配置
	RuleConfig    *SSAProjectScanRuleConfig `protobuf:"bytes,11,opt,name=RuleConfig,proto3" json:"RuleConfig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSAProject) Reset() {
	*x = SSAProject{}
	mi := &file_yakgrpc_proto_msgTypes[860]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSAProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProject) ProtoMessage() {}

func (x *SSAProject) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[860]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProject.ProtoReflect.Descriptor instead.
func (*SSAProject) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{860}
}

func (x *SSAProject) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SSAProject) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SSAProject) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SSAProject) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *SSAProject) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SSAProject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SSAProject) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SSAProject) GetCodeSourceConfig() string {
	if x != nil {
		return x.CodeSourceConfig
	}
	return ""
}

func (x *SSAProject) GetCompileConfig() *SSAProjectCompileConfig {
	if x != nil {
		return x.CompileConfig
	}
	return nil
}

func (x *SSAProject) GetScanConfig() *SSAProjectScanConfig {
	if x != nil {
		return x.ScanConfig
	}
	return nil
}

func (x *SSAProject) GetRuleConfig() *SSAProjectScanRuleConfig {
	if x != nil {
		return x.RuleConfig
	}
	return nil
}

type SSAProjectCompileConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StrictMode    bool                   `protobuf:"varint,1,opt,name=StrictMode,proto3" json:"StrictMode,omitempty"`
	PeepholeSize  int64                  `protobuf:"varint,2,opt,name=PeepholeSize,proto3" json:"PeepholeSize,omitempty"`
	ExcludeFiles  []string               `protobuf:"bytes,3,rep,name=ExcludeFiles,proto3" json:"ExcludeFiles,omitempty"`
	ReCompile     bool                   `protobuf:"varint,4,opt,name=ReCompile,proto3" json:"ReCompile,omitempty"`
	Memory        bool                   `protobuf:"varint,5,opt,name=Memory,proto3" json:"Memory,omitempty"`
	Concurrency   uint32                 `protobuf:"varint,6,opt,name=Concurrency,proto3" json:"Concurrency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSAProjectCompileConfig) Reset() {
	*x = SSAProjectCompileConfig{}
	mi := &file_yakgrpc_proto_msgTypes[861]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSAProjectCompileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProjectCompileConfig) ProtoMessage() {}

func (x *SSAProjectCompileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[861]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProjectCompileConfig.ProtoReflect.Descriptor instead.
func (*SSAProjectCompileConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{861}
}

func (x *SSAProjectCompileConfig) GetStrictMode() bool {
	if x != nil {
		return x.StrictMode
	}
	return false
}

func (x *SSAProjectCompileConfig) GetPeepholeSize() int64 {
	if x != nil {
		return x.PeepholeSize
	}
	return 0
}

func (x *SSAProjectCompileConfig) GetExcludeFiles() []string {
	if x != nil {
		return x.ExcludeFiles
	}
	return nil
}

func (x *SSAProjectCompileConfig) GetReCompile() bool {
	if x != nil {
		return x.ReCompile
	}
	return false
}

func (x *SSAProjectCompileConfig) GetMemory() bool {
	if x != nil {
		return x.Memory
	}
	return false
}

func (x *SSAProjectCompileConfig) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

type SSAProjectScanConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Concurrency    uint32                 `protobuf:"varint,1,opt,name=Concurrency,proto3" json:"Concurrency,omitempty"`
	Memory         bool                   `protobuf:"varint,2,opt,name=Memory,proto3" json:"Memory,omitempty"`
	IgnoreLanguage bool                   `protobuf:"varint,3,opt,name=IgnoreLanguage,proto3" json:"IgnoreLanguage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SSAProjectScanConfig) Reset() {
	*x = SSAProjectScanConfig{}
	mi := &file_yakgrpc_proto_msgTypes[862]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSAProjectScanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProjectScanConfig) ProtoMessage() {}

func (x *SSAProjectScanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[862]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProjectScanConfig.ProtoReflect.Descriptor instead.
func (*SSAProjectScanConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{862}
}

func (x *SSAProjectScanConfig) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *SSAProjectScanConfig) GetMemory() bool {
	if x != nil {
		return x.Memory
	}
	return false
}

func (x *SSAProjectScanConfig) GetIgnoreLanguage() bool {
	if x != nil {
		return x.IgnoreLanguage
	}
	return false
}

type SSAProjectScanRuleConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuleFilter    *SyntaxFlowRuleFilter  `protobuf:"bytes,1,opt,name=RuleFilter,proto3" json:"RuleFilter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSAProjectScanRuleConfig) Reset() {
	*x = SSAProjectScanRuleConfig{}
	mi := &file_yakgrpc_proto_msgTypes[863]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSAProjectScanRuleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProjectScanRuleConfig) ProtoMessage() {}

func (x *SSAProjectScanRuleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[863]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProjectScanRuleConfig.ProtoReflect.Descriptor instead.
func (*SSAProjectScanRuleConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{863}
}

func (x *SSAProjectScanRuleConfig) GetRuleFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.RuleFilter
	}
	return nil
}

type SSAProjectFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IDs           []int64                `protobuf:"varint,1,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	ProjectNames  []string               `protobuf:"bytes,2,rep,name=ProjectNames,proto3" json:"ProjectNames,omitempty"`
	SearchKeyword string                 `protobuf:"bytes,3,opt,name=SearchKeyword,proto3" json:"SearchKeyword,omitempty"`
	Languages     []string               `protobuf:"bytes,4,rep,name=Languages,proto3" json:"Languages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSAProjectFilter) Reset() {
	*x = SSAProjectFilter{}
	mi := &file_yakgrpc_proto_msgTypes[864]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSAProjectFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProjectFilter) ProtoMessage() {}

func (x *SSAProjectFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[864]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProjectFilter.ProtoReflect.Descriptor instead.
func (*SSAProjectFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{864}
}

func (x *SSAProjectFilter) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *SSAProjectFilter) GetProjectNames() []string {
	if x != nil {
		return x.ProjectNames
	}
	return nil
}

func (x *SSAProjectFilter) GetSearchKeyword() string {
	if x != nil {
		return x.SearchKeyword
	}
	return ""
}

func (x *SSAProjectFilter) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

type CreateSSAProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *SSAProject            `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSSAProjectRequest) Reset() {
	*x = CreateSSAProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[865]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSSAProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSAProjectRequest) ProtoMessage() {}

func (x *CreateSSAProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[865]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSAProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateSSAProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{865}
}

func (x *CreateSSAProjectRequest) GetProject() *SSAProject {
	if x != nil {
		return x.Project
	}
	return nil
}

type CreateSSAProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *SSAProject            `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Message       *DbOperateMessage      `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSSAProjectResponse) Reset() {
	*x = CreateSSAProjectResponse{}
	mi := &file_yakgrpc_proto_msgTypes[866]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSSAProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSAProjectResponse) ProtoMessage() {}

func (x *CreateSSAProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[866]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSAProjectResponse.ProtoReflect.Descriptor instead.
func (*CreateSSAProjectResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{866}
}

func (x *CreateSSAProjectResponse) GetProject() *SSAProject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *CreateSSAProjectResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type UpdateSSAProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *SSAProject            `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSSAProjectRequest) Reset() {
	*x = UpdateSSAProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[867]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSSAProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSAProjectRequest) ProtoMessage() {}

func (x *UpdateSSAProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[867]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSAProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateSSAProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{867}
}

func (x *UpdateSSAProjectRequest) GetProject() *SSAProject {
	if x != nil {
		return x.Project
	}
	return nil
}

type UpdateSSAProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *SSAProject            `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Message       *DbOperateMessage      `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSSAProjectResponse) Reset() {
	*x = UpdateSSAProjectResponse{}
	mi := &file_yakgrpc_proto_msgTypes[868]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSSAProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSAProjectResponse) ProtoMessage() {}

func (x *UpdateSSAProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[868]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSAProjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateSSAProjectResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{868}
}

func (x *UpdateSSAProjectResponse) GetProject() *SSAProject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *UpdateSSAProjectResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteSSAProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SSAProjectFilter      `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSSAProjectRequest) Reset() {
	*x = DeleteSSAProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[869]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSSAProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSSAProjectRequest) ProtoMessage() {}

func (x *DeleteSSAProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[869]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSSAProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteSSAProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{869}
}

func (x *DeleteSSAProjectRequest) GetFilter() *SSAProjectFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DeleteSSAProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *DbOperateMessage      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSSAProjectResponse) Reset() {
	*x = DeleteSSAProjectResponse{}
	mi := &file_yakgrpc_proto_msgTypes[870]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSSAProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSSAProjectResponse) ProtoMessage() {}

func (x *DeleteSSAProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[870]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSSAProjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteSSAProjectResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{870}
}

func (x *DeleteSSAProjectResponse) GetMessage() *DbOperateMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type QuerySSAProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SSAProjectFilter      `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySSAProjectRequest) Reset() {
	*x = QuerySSAProjectRequest{}
	mi := &file_yakgrpc_proto_msgTypes[871]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySSAProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSAProjectRequest) ProtoMessage() {}

func (x *QuerySSAProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[871]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSAProjectRequest.ProtoReflect.Descriptor instead.
func (*QuerySSAProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{871}
}

func (x *QuerySSAProjectRequest) GetFilter() *SSAProjectFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QuerySSAProjectRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QuerySSAProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Projects      []*SSAProject          `protobuf:"bytes,1,rep,name=Projects,proto3" json:"Projects,omitempty"`
	Pagination    *Paging                `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySSAProjectResponse) Reset() {
	*x = QuerySSAProjectResponse{}
	mi := &file_yakgrpc_proto_msgTypes[872]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySSAProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSAProjectResponse) ProtoMessage() {}

func (x *QuerySSAProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[872]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSAProjectResponse.ProtoReflect.Descriptor instead.
func (*QuerySSAProjectResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{872}
}

func (x *QuerySSAProjectResponse) GetProjects() []*SSAProject {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *QuerySSAProjectResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySSAProjectResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_yakgrpc_proto protoreflect.FileDescriptor

var file_yakgrpc_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x79, 0x61, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x79, 0x70, 0x62, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x0a,
	0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x0f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64,
	0x73, 0x22, 0xef, 0x05, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x63,
	0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xdb, 0x04, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x50, 0x6f, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x03, 0x50, 0x6f, 0x43, 0x12, 0x27, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x22, 0x4f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x22, 0x4f, 0x0a, 0x1f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6e, 0x0a, 0x1a, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x65, 0x77,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4e, 0x65, 0x77, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x67, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4d, 0x43, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x7c, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a,
	0x0d, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x4d, 0x43,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52,
	0x4c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x54,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05,
	0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7a, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x65, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x06, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xfc, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x03, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x6c, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x40, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xaa, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x49, 0x44, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x62, 0x6f, 0x75,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0e, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c,
	0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x10,
	0x41, 0x62, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x55, 0x49, 0x44,
	0x53, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x55, 0x55, 0x49, 0x44, 0x53, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x78, 0x0a, 0x18,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x55, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x45, 0x52, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0x77, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x62, 0x45, 0x52, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x22, 0x58, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x52, 0x4d, 0x44,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0x2a, 0x0a, 0x16, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x52, 0x4d, 0x44, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x44, 0x6f, 0x74, 0x22, 0x71, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x56, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x22, 0x43, 0x0a, 0x15, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0x7e, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0x59, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x35, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x03, 0x0a,
	0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6c, 0x61, 0x6d, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x4c, 0x6c, 0x61, 0x6d, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x41, 0x72, 0x67, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x22, 0x51, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x60, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x22, 0x36, 0x0a, 0x20, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x1e, 0x49, 0x73, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x51, 0x0a, 0x1f, 0x49, 0x73, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x46, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x22, 0x8e, 0x04, 0x0a, 0x2c, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46,
	0x6f, 0x72, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x1d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x4d, 0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x4d,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x45, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44,
	0x53, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x53, 0x22, 0xdf, 0x02, 0x0a, 0x27,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x46, 0x6f, 0x72, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x4d, 0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x02, 0x4d, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x45, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x5f, 0x0a, 0x11, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6a, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x11,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xde, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xc5, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x1f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3,
	0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x42, 0x79, 0x41, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x70, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42, 0x79, 0x41, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x14, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb1, 0x03, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x18, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0xef, 0x03, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x14, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x44, 0x12, 0x44, 0x0a, 0x1d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x50,
	0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x86, 0x04, 0x0a, 0x12, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x18,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x02, 0x52, 0x18,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x53,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x53, 0x22, 0x46, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0xa1, 0x02, 0x0a, 0x15, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x4d, 0x12, 0x0e, 0x0a, 0x02, 0x4d,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x4d, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45,
	0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45,
	0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x66, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x66,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x94,
	0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x38, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x5e, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x6a, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x86, 0x01, 0x0a, 0x2d,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x64, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4e,
	0x0a, 0x22, 0x49, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x93,
	0x01, 0x0a, 0x23, 0x49, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x38, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x17, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x1f, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x54, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x54, 0x6f, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x54, 0x6f, 0x6f, 0x6c, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x55, 0x0a, 0x1d, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x1e, 0x41, 0x49, 0x54, 0x6f, 0x6f,
	0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x11,
	0x53, 0x61, 0x76, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x73, 0x0a, 0x14, 0x53, 0x61, 0x76,
	0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x41, 0x49, 0x54,
	0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x22, 0xad,
	0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x45,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0x49, 0x0a, 0x1b, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41,
	0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x58, 0x0a, 0x1c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x06, 0x41,
	0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x7d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x6f, 0x6f, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49,
	0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb3,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x6f, 0x6f, 0x6c, 0x49,
	0x44, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x22, 0xcc, 0x04, 0x0a, 0x0d, 0x41, 0x49, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79,
	0x6e, 0x63, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6e, 0x63,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x31,
	0x38, 0x6e, 0x52, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x49,
	0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x22, 0x26, 0x0a, 0x04, 0x49, 0x31, 0x38, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x5a,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x5a, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x45,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x45, 0x6e, 0x22, 0xda, 0x03, 0x0a, 0x0c,
	0x41, 0x49, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x6f, 0x74, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x6f, 0x74, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x74, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x4a,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x46, 0x72,
	0x65, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72,
	0x65, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46,
	0x72, 0x65, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xa8, 0x02, 0x0a, 0x12, 0x41, 0x49, 0x54,
	0x72, 0x69, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x49, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x53,
	0x4f, 0x4e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x43, 0x0a, 0x09, 0x4d, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0x99, 0x0b, 0x0a, 0x0d, 0x41, 0x49, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0a,
	0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x1e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x46, 0x6f, 0x72, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x44, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a,
	0x0a, 0x18, 0x41, 0x49, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x18, 0x41, 0x49, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x55, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x55,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x49, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x41, 0x49, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x12,
	0x41, 0x49, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x41, 0x49, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x12,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x49, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x6f,
	0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x49, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x16,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x49, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x49, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x77, 0x65, 0x6e,
	0x4e, 0x6f, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x77, 0x65, 0x6e, 0x4e, 0x6f, 0x54,
	0x68, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6c,
	0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x54, 0x61, 0x73, 0x6b,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x52, 0x65, 0x41, 0x63, 0x74, 0x4d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x52, 0x65, 0x41, 0x63, 0x74,
	0x4d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x0d, 0x41, 0x49, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x53, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x13,
	0x41, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x22, 0x42, 0x0a,
	0x14, 0x41, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x6c, 0x0a, 0x12, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x79, 0x0a, 0x13, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x40, 0x0a, 0x13, 0x41, 0x49,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a,
	0x06, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x53, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xcd, 0x01, 0x0a, 0x0d, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x22,
	0xb3, 0x04, 0x0a, 0x07, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x46, 0x6f, 0x72, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x55, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x55, 0x49, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x54, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x49,
	0x46, 0x6f, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x49,
	0x46, 0x6f, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41,
	0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0x68, 0x0a, 0x16, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x22, 0x7c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x22, 0x31, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xc6, 0x02, 0x0a, 0x24, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x4d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53,
	0x61, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x63, 0x61, 0x6e, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x22, 0x86, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xfe, 0x02, 0x0a, 0x0e, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xc4, 0x01, 0x0a, 0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x12, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc1, 0x01, 0x0a, 0x1f, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x15,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x6e, 0x0a, 0x16, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc8, 0x03, 0x0a, 0x11, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x13,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x6d, 0x0a, 0x17, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x6e, 0x0a, 0x18, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x63, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x0c,
	0x50, 0x63, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x14,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x63, 0x61, 0x70, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x14, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x63, 0x61, 0x70, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x15, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x15, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4b, 0x0a,
	0x1a, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1a,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x1c, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x19, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x19, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xc0, 0x03, 0x0a,
	0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x72, 0x63, 0x49, 0x50,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x72, 0x63, 0x49, 0x50, 0x12, 0x14, 0x0a,
	0x05, 0x44, 0x73, 0x74, 0x49, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x73,
	0x74, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x22,
	0xde, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77,
	0x22, 0xe2, 0x05, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x4c,
	0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4c,
	0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x72, 0x63, 0x12,
	0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x34, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x73, 0x49, 0x70, 0x76, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x49,
	0x70, 0x76, 0x36, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x72,
	0x63, 0x49, 0x50, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x72, 0x63, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x73, 0x74, 0x49, 0x50, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x73, 0x74, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x73, 0x54, 0x63, 0x70, 0x49, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x49, 0x73, 0x54, 0x63, 0x70, 0x49, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x34, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x49,
	0x73, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x73, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x48, 0x61, 0x6c,
	0x66, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x48,
	0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x76,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x4e, 0x49, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x53, 0x4e, 0x49, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xf3, 0x05, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x69, 0x6e, 0x6b,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x48, 0x0a, 0x1f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x72, 0x63, 0x12,
	0x48, 0x0a, 0x1f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x44,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x44, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x49,
	0x70, 0x76, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76,
	0x34, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x36, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x53, 0x72,
	0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x53, 0x72, 0x63, 0x12, 0x32, 0x0a,
	0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x50, 0x44, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x44, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x12, 0x3a, 0x0a,
	0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43, 0x50,
	0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x52, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12,
	0x10, 0x0a, 0x03, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x53, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xb9, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x46, 0x72,
	0x6f, 0x6d, 0x4e, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x22, 0x9b, 0x01, 0x0a, 0x0c,
	0x50, 0x63, 0x61, 0x70, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x0e,
	0x53, 0x75, 0x72, 0x69, 0x63, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x72, 0x69, 0x63,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x53, 0x75, 0x72, 0x69, 0x63,
	0x61, 0x74, 0x61, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x75, 0x72,
	0x69, 0x63, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xef, 0x01, 0x0a, 0x0d,
	0x50, 0x63, 0x61, 0x70, 0x58, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a,
	0x20, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4b, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4b, 0x42, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x43, 0x50,
	0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a,
	0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xb5, 0x01, 0x0a, 0x06, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xaa, 0x03, 0x0a, 0x0e, 0x59, 0x61, 0x6b,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x52,
	0x03, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x61, 0x76, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x48, 0x61, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x61, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x1b, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x69, 0x66, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xaa, 0x01, 0x0a, 0x1c,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x69, 0x66, 0x79, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x54, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x74, 0x6d,
	0x6c, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x33, 0x0a, 0x19, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x4e, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x21, 0x0a,
	0x1f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x63, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x31, 0x32, 0x50, 0x61, 0x73,
	0x73, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x40, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x57,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x22, 0xaa, 0x08, 0x0a, 0x13, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x4e, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x4e, 0x53, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x4e,
	0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x4e, 0x53, 0x46,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x43, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x44, 0x4e, 0x53, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x43, 0x50,
	0x12, 0x26, 0x0a, 0x0e, 0x44, 0x4e, 0x53, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44,
	0x6f, 0x48, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x44, 0x4e, 0x53, 0x46, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x48, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x6f, 0x48, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x48, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3a,
	0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x76, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x6b,
	0x69, 0x70, 0x53, 0x61, 0x76, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x61, 0x76, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x41, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x53, 0x63, 0x61, 0x6e,
	0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x53, 0x79, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x55, 0x52, 0x49, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x55, 0x52, 0x49, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63,
	0x61, 0x6e, 0x55, 0x52, 0x49, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x55,
	0x52, 0x49, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x49,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x69, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x41, 0x69, 0x41, 0x70, 0x69, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x62, 0x53, 0x61, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x62, 0x53, 0x61, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x2c, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x4d, 0x69, 0x6e, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x54,
	0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75,
	0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x96, 0x02, 0x0a, 0x1b, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x52, 0x4c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55,
	0x52, 0x4c, 0x12, 0x2d, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0xb2, 0x02, 0x0a, 0x16, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e, 0x53, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x34, 0x0a, 0x1e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x75,
	0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xad, 0x01,
	0x0a, 0x1c, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01,
	0x0a, 0x15, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x05, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x6b, 0x0a, 0x1d, 0x53, 0x6d, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41,
	0x0a, 0x17, 0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x2e, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x75, 0x6c, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x22, 0x74, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x4e, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x61, 0x66, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53,
	0x61, 0x66, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x21, 0x47, 0x65, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x12, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0a,
	0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x45,
	0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x6e,
	0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x22, 0x68, 0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x1a, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22,
	0xa6, 0x04, 0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x49, 0x73, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x73, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74,
	0x74, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x52, 0x61, 0x77, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x25, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b,
	0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35,
	0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x48, 0x74,
	0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x0e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x7b, 0x0a, 0x1b, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x67, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x54, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x43, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x54, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x22,
	0x30, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x22, 0x1a, 0x0a, 0x18, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a,
	0x19, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x43, 0x56, 0x45, 0x22, 0xf4, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x56, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x57, 0x45, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa3, 0x03, 0x0a,
	0x09, 0x43, 0x57, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57,
	0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x57, 0x45, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68,
	0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x6f,
	0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x56, 0x45, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x56, 0x45, 0x22, 0x51, 0x0a, 0x0b, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45,
	0x78, 0x12, 0x20, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03,
	0x43, 0x56, 0x45, 0x12, 0x20, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x57, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x03, 0x43, 0x57, 0x45, 0x22, 0xff, 0x07, 0x0a, 0x09, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x43, 0x56, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x43, 0x57, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x43, 0x56, 0x53, 0x53, 0x76, 0x32, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x42, 0x61, 0x73, 0x65,
	0x43, 0x56, 0x53, 0x53, 0x76, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x4f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x14, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x56, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x33, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x3c, 0x0a, 0x1e, 0x53, 0x61, 0x76, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x49, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x41, 0x49, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79,
	0x22, 0xa3, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x1c, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x1d, 0x49,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x22, 0xf6, 0x02, 0x0a, 0x1c, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x1f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x47, 0x61, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x61, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0xfc, 0x04, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x49, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x49, 0x70,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x48, 0x0a, 0x1f,
	0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x48, 0x74, 0x74, 0x70, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x52, 0x61, 0x77, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x48, 0x74, 0x74, 0x70,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x72, 0x69, 0x63, 0x61, 0x74, 0x61, 0x52, 0x61,
	0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x72, 0x69, 0x63, 0x61, 0x74,
	0x61, 0x52, 0x61, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x61,
	0x6d, 0x65, 0x5a, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5a,
	0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x5a, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x5a, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x5a, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56, 0x45,
	0x22, 0x89, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d,
	0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x1f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22,
	0xb3, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x22, 0x4b, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22,
	0x62, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x30, 0x0a, 0x13, 0x4a, 0x75, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x56, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x4a, 0x75, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x56, 0x45, 0x22, 0x68, 0x0a, 0x1a, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x1b, 0x0a,
	0x19, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x15, 0x4d,
	0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x22, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49,
	0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x13, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x73,
	0x22, 0x92, 0x01, 0x0a, 0x22, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x23, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x14, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x67, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1d, 0x49, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74,
	0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x38, 0x0a,
	0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x49, 0x73, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x02,
	0x0a, 0x11, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xdc, 0x03, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcf,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x6c,
	0x22, 0x60, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x59, 0x61, 0x6b, 0x6c,
	0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x7c, 0x0a, 0x12, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x52,
	0x61, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x09, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x1a, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22,
	0x3d, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x80,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61,
	0x67, 0x22, 0x31, 0x0a, 0x1f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x64,
	0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x22,
	0x49, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x22, 0x3e, 0x0a, 0x16, 0x53, 0x61,
	0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x99, 0x01, 0x0a,
	0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x40, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x52, 0x0a, 0x0c, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0xce, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x6c, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0xcf, 0x01, 0x0a, 0x26,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x46, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x75, 0x7a, 0x7a, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01,
	0x0a, 0x27, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x30, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x31, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x73, 0x54, 0x4c, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73,
	0x54, 0x4c, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x75, 0x7a, 0x7a, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x75, 0x7a,
	0x7a, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xe1, 0x04, 0x0a, 0x17, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x73, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x75, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x75, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x49, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a,
	0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xe9, 0x02, 0x0a, 0x15, 0x45, 0x78,
	0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x20,
	0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x05,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8a,
	0x02, 0x0a, 0x20, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x14, 0x59,
	0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x56, 0x52, 0x06, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x57,
	0x0a, 0x12, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b,
	0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x56, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x21, 0x59, 0x61, 0x6b, 0x6c, 0x61,
	0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53, 0x0a, 0x1b, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e,
	0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x22, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x06, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x21,
	0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b,
	0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c,
	0x43, 0x6c, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x55, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x55, 0x49, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x55, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76,
	0x4b, 0x65, 0x79, 0x22, 0x61, 0x0a, 0x09, 0x59, 0x61, 0x6b, 0x55, 0x49, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x54, 0x79, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54,
	0x79, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x57, 0x68, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x57, 0x68, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x52, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56, 0x45,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b,
	0x0a, 0x25, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x43,
	0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e,
	0x65, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x4e, 0x65, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x24, 0x59,
	0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x1e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x1f, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x18, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x54,
	0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x53, 0x0a,
	0x1a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x8d, 0x03, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x73,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x4d, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x62, 0x0a, 0x1c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x5b, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x53, 0x0a, 0x1d,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x42, 0x41,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x22, 0xc4, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x4c, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4c, 0x6f, 0x67, 0x22, 0xc2, 0x02, 0x0a, 0x22, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x67, 0x0a, 0x1f, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x22, 0x6a, 0x0a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x22, 0xda, 0x03, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x48, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x62, 0x0a, 0x28, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x29, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x22, 0x4d, 0x0a, 0x21, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x7f, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xae, 0x05, 0x0a, 0x0c, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x48, 0x65, 0x6c, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x6d, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73,
	0x43, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x22, 0x79, 0x0a, 0x0d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x49, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54,
	0x4c, 0x22, 0x21, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x22, 0x24, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x43, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x20, 0x45, 0x78, 0x65,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x22, 0x6a, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x22, 0x5e, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x7c, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf4, 0x01, 0x0a, 0x0e, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x8b, 0x01, 0x0a,
	0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x42, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x3c,
	0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16,
	0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x33, 0x0a, 0x17, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x20, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x11, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x90, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x22, 0x45, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x17, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x37, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x32, 0x0a, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x61, 0x0a,
	0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x48, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x22, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x44, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x73, 0x43, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x43, 0x0a,
	0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x44, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x57, 0x45, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x57, 0x45, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x1d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x41, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x57, 0x45, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x57, 0x45,
	0x49, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x53, 0x56, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x43, 0x53, 0x56, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0x4d, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0f, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46,
	0x0a, 0x14, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52,
	0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x1e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41,
	0x6c, 0x6c, 0x22, 0x3b, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x22,
	0xe2, 0x01, 0x0a, 0x28, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x23, 0x0a,
	0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x10, 0x01, 0x22, 0x54, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53,
	0x52, 0x46, 0x50, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x35, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77,
	0x22, 0x8b, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x22, 0x4e,
	0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0x5d,
	0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x43, 0x4d, 0x50, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x22, 0xa3, 0x03,
	0x0a, 0x1d, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x25, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x25, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x35, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x0e, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x5c, 0x0a, 0x22, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x57, 0x65, 0x62, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0d, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x52, 0x69,
	0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x0e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x42, 0x0a, 0x08, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x22, 0x65, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x09,
	0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x65, 0x6c, 0x70, 0x22, 0x41, 0x0a, 0x15, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x22, 0x0a, 0x0a, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x23, 0x59,
	0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73,
	0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x67, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x68, 0x0a, 0x22, 0x59, 0x73, 0x6f, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x56, 0x0a, 0x18, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x17, 0x59, 0x73,
	0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x91,
	0x01, 0x0a, 0x1d, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x42,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x7b, 0x0a, 0x12, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x64, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73,
	0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x24, 0x0a, 0x0e, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x0f, 0x59, 0x73, 0x6f, 0x44, 0x75, 0x6d, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x0f,
	0x59, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x10, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x14, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x31, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x18, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x25, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x4c, 0x6f,
	0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x22, 0xe1, 0x02, 0x0a, 0x17, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x22,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x21,
	0x53, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x31, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x15,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x4a, 0x0a, 0x16, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01,
	0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x62, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48,
	0x74, 0x74, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0xff, 0x05, 0x0a, 0x08, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57,
	0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x4f, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x44, 0x65, 0x63, 0x4d, 0x4f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x44, 0x65, 0x63, 0x4d, 0x4f, 0x64, 0x65, 0x1a, 0x3a,
	0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6e,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57,
	0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x7e,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd0,
	0x04, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54,
	0x61, 0x67, 0x12, 0x35, 0x0a, 0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x4f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x4f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3b,
	0x0a, 0x05, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x39, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0xb5, 0x01, 0x0a,
	0x13, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x55, 0x73, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x22, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44,
	0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xa5, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67,
	0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53,
	0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x44, 0x4e, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x40, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x6f,
	0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x49, 0x50, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a,
	0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x4f, 0x0a, 0x1a, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x4e,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x34, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x34, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49,
	0x73, 0x49, 0x70, 0x76, 0x36, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x4a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x78, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x92, 0x07, 0x0a, 0x04, 0x52, 0x69,
	0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa0,
	0x04, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x53, 0x41, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x69, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x65, 0x77,
	0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x44, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x16, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x52, 0x69, 0x73, 0x6b,
	0x49, 0x50, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b,
	0x52, 0x69, 0x73, 0x6b, 0x49, 0x50, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x0e, 0x52,
	0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x36, 0x0a, 0x0a, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0x70, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x62, 0x0a, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x33, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0xa4, 0x03, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x48, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73,
	0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x52, 0x13, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7c, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x52, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x52, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x55, 0x0a, 0x04, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x08, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0x69, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x0e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x80, 0x05,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x63, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x63, 0x74,
	0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x44, 0x69, 0x63, 0x74, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x44, 0x69, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x14,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x4f, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x9b, 0x01, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x7a,
	0x7a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x36,
	0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x22,
	0xc8, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0x7a, 0x0a, 0x14, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x54, 0x54, 0x50,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x54, 0x54,
	0x50, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x0a, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x49, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x49, 0x73, 0x49, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x49, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x15,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x22, 0x58, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x38, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x1f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x41,
	0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f,
	0x6e, 0x22, 0x36, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xd6, 0x07, 0x0a, 0x18, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x28,
	0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x30,
	0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x12, 0x2e, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78,
	0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x48, 0x74, 0x74, 0x70, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x61, 0x6d, 0x65, 0x53, 0x69,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5a, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x41,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x22, 0x96, 0x01,
	0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6a, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x37, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x22, 0x61, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x64,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x24, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x57,
	0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x78, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x0d, 0x4d,
	0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x23, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x39, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2a, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x52, 0x0a, 0x18,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6e,
	0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x22, 0x63, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x22, 0x38, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c,
	0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e,
	0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a, 0x73,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x16,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xa3, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xd0, 0x02, 0x0a, 0x0e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x53,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a,
	0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x02, 0x0a,
	0x17, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x1c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0x4d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x55, 0x72, 0x6c, 0x22, 0x28, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x01,
	0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe9,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x72, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0f,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xa4,
	0x0a, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x44, 0x42, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x44, 0x42, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x61,
	0x76, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2a,
	0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63,
	0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x6f,
	0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x79, 0x6e,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x72, 0x75, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x53,
	0x63, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x79, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x4c, 0x69,
	0x6e, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x1a, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x53, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x53, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x70, 0x43,
	0x76, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x76, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x21, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x9a, 0x04, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xec, 0x02, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x49, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x45, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x43, 0x50, 0x45, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74, 0x6d, 0x6c,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x74, 0x6d,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36,
	0x0a, 0x1a, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52,
	0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b,
	0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xeb, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x75, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4a, 0x75, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xcc,
	0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x61, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x7a,
	0x7a, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x75, 0x7a, 0x7a, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x62, 0x0a,
	0x27, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x3d, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x21, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x22, 0x7a, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4f,
	0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f,
	0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x71, 0x0a, 0x1b, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x4f, 0x72, 0x43, 0x6f, 0x70, 0x79, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x43, 0x6f,
	0x70, 0x79, 0x22, 0x33, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x38, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64,
	0x73, 0x22, 0x4b, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x50,
	0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x42, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x42, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x7b, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x01, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x4f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xb2, 0x06, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x75,
	0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65,
	0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x54,
	0x61, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x26, 0x0a,
	0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x49, 0x73, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x49, 0x73, 0x4d, 0x49, 0x54,
	0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73,
	0x50, 0x6f, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x73, 0x50, 0x6f, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x22, 0x7f,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x92, 0x03, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3a, 0x0a, 0x18,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x49, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x49, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x22, 0xe9, 0x0a, 0x0a, 0x09, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x65, 0x6c, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49,
	0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x52, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x6b, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x44, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x06, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x4e,
	0x65, 0x77, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x6c,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x52,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x4b, 0x65,
	0x79, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45,
	0x6e, 0x76, 0x4b, 0x65, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x1c, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x1d, 0x53, 0x61,
	0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x0e, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x44, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x22, 0x3c, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x22,
	0x94, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x44, 0x69, 0x72, 0x73, 0x22, 0x6f, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x6b, 0x69, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x42, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x6b, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x53, 0x6b, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x41,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x50, 0x6f, 0x63, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x50,
	0x6f, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x49,
	0x73, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x49, 0x73, 0x4d, 0x49, 0x54, 0x4d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x1b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x50, 0x6f,
	0x63, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x49, 0x73, 0x50, 0x6f, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x22, 0xa7, 0x01, 0x0a,
	0x19, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x33, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x53, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x32, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2f, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x03, 0x54, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x39, 0x0a, 0x0b,
	0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x24, 0x0a, 0x0e, 0x53, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x0f, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x45, 0x64, 0x69, 0x74,
	0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x43, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x41, 0x75, 0x74, 0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0x8d, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x75, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x2a, 0x0a,
	0x08, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x52,
	0x08, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x12, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x57,
	0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x57,
	0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x46,
	0x6c, 0x6f, 0x77, 0x55, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72,
	0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x49, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c,
	0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x49,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77,
	0x55, 0x49, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x99, 0x01,
	0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x61, 0x77, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x49,
	0x73, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x73, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa1, 0x03,
	0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x4f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72, 0x6f, 0x6d,
	0x59, 0x61, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x4c, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0xd5, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x1b, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x22, 0x81, 0x03, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x53,
	0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x70, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x40, 0x0a, 0x17, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x33, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x15, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x10, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x58, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x58, 0x50, 0x61, 0x74,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4e, 0x0a, 0x1e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x1f, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x0f, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x72, 0x73, 0x68, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xac, 0x16, 0x0a, 0x0d, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x4a, 0x41, 0x33, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x4a, 0x41, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x75, 0x7a,
	0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x75,
	0x7a, 0x7a, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x53,
	0x79, 0x6e, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x44, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x4e, 0x6f,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x4e, 0x6f,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x53, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x53, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x57,
	0x65, 0x62, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x57, 0x65, 0x62, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61,
	0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x40, 0x0a, 0x1b, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f,
	0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61,
	0x78, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x45,
	0x74, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x45, 0x74, 0x63, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x4e, 0x6f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x59, 0x61, 0x6d, 0x6c,
	0x50, 0x6f, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x59, 0x61, 0x6d, 0x6c, 0x50, 0x6f, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30,
	0x0a, 0x13, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x74, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x53, 0x74, 0x6f, 0x70, 0x41, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x52, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x49, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x53,
	0x4e, 0x49, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x4e, 0x49, 0x12, 0x22, 0x0a,
	0x0c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x4e, 0x49, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x4e,
	0x49, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x65, 0x64, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x34, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
	0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x78,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x4e, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54,
	0x0a, 0x06, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x69, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70,
	0x73, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x22, 0x20, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0x77, 0x0a, 0x16, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc3, 0x0d, 0x0a, 0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x77,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x44, 0x4e, 0x53, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x44, 0x4e, 0x53, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x4c, 0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x54, 0x4c, 0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x43,
	0x50, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x54, 0x43, 0x50, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77,
	0x12, 0x34, 0x0a, 0x15, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x37, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x73,
	0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x3a, 0x0a, 0x18, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x49, 0x73, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x49, 0x73, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48,
	0x0a, 0x11, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74,
	0x74, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x61, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x61, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x75, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x73, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x52,
	0x69, 0x73, 0x6b, 0x22, 0xcf, 0x0c, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x52, 0x4c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x52,
	0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x48, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x48, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c,
	0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x55, 0x72, 0x6c, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x48, 0x61,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42,
	0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x73, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x23, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x2a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x73, 0x18, 0x2e, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x1d, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x54, 0x6f,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x57, 0x68,
	0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x57, 0x68, 0x65, 0x72, 0x65, 0x22, 0x66, 0x0a, 0x1e, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x09,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x67, 0x0a, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xe8, 0x01,
	0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x75, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55,
	0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49,
	0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x48, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x31, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x62, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x57, 0x68, 0x65, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x0a, 0x48,
	0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x09, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf2, 0x0e, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c,
	0x12, 0x35, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75,
	0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x48, 0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x48, 0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x4e, 0x6f, 0x46, 0x69,
	0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f,
	0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x61, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x61, 0x66, 0x65, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x61, 0x66, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x54, 0x6f, 0x6f, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x6f,
	0x53, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x49, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x73, 0x54, 0x6f, 0x6f, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x22, 0xa9, 0x01, 0x0a,
	0x0d, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75,
	0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x22, 0x5f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x4f, 0x46, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x4f, 0x46, 0x22, 0x7d, 0x0a, 0x15, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x44, 0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f,
	0x0a, 0x1b, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x2d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xc1, 0x01, 0x0a, 0x15, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x77, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x50, 0x77, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x22, 0x54, 0x0a, 0x16, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x17, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7b,
	0x0a, 0x0e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9f, 0x03, 0x0a, 0x0d,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a,
	0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0x83, 0x03,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x2b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x2c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x33,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x12, 0x0a,
	0x0b, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x72, 0x69, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x72, 0x69, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x68, 0x69, 0x6a,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x72, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3c, 0x0a,
	0x0f, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x79, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x79,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x10, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x65, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x32, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54,
	0x4c, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x6e, 0x6c,
	0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x35, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x57, 0x61,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x61, 0x64, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x41, 0x43, 0x65, 0x72,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4a,
	0x41, 0x33, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x4a, 0x41, 0x33, 0x12, 0x40, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x10, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0xe6, 0x03, 0x0a, 0x0e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x10, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x39, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x33, 0x0a, 0x0a, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x33, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x49, 0x4d,
	0x45, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x49, 0x4d, 0x45, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x74,
	0x50, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x43, 0x72, 0x74, 0x50, 0x65,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0e, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x50, 0x6b, 0x63,
	0x73, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x22,
	0xa2, 0x05, 0x0a, 0x13, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x4e, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x52,
	0x49, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x55, 0x52, 0x49, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x72, 0x6f, 0x70,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x6e, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f,
	0x6f, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f,
	0x6f, 0x6b, 0x49, 0x44, 0x22, 0x8e, 0x0a, 0x0a, 0x0c, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6a,
	0x75, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6a, 0x75, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x6f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x71, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72,
	0x69, 0x18, 0x72, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x55, 0x72, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72,
	0x69, 0x18, 0x73, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x55, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49,
	0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x6a, 0x75, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x18,
	0x78, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x0f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f,
	0x6f, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x05, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68,
	0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61,
	0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe1, 0x02, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x4e, 0x53, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x44, 0x4e,
	0x53, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x36, 0x0a,
	0x16, 0x54, 0x4c, 0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x54,
	0x4c, 0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x43, 0x50, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x43,
	0x50, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x5a, 0x0a, 0x0e, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48,
	0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48,
	0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x48, 0x6f, 0x6f, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x75, 0x0a, 0x11, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x0b,
	0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x26, 0x0a, 0x0c, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x26, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x2d, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x83,
	0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x37, 0x0a, 0x0d, 0x45,
	0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x61, 0x77, 0x12, 0x28,
	0x0a, 0x0f, 0x4e, 0x6f, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4e, 0x6f, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b,
	0x44, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x44,
	0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4a,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x13, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x18, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x41,
	0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x3a, 0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a,
	0x23, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x59, 0x61, 0x6d, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x24, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x78,
	0x0a, 0x21, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x22, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x6f, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x59, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x59, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x37,
	0x0a, 0x1d, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x1e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x65, 0x0a, 0x21, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x22, 0x53, 0x6d, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x62,
	0x0a, 0x18, 0x59, 0x61, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x59, 0x61, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x59, 0x61, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a,
	0x14, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x4f, 0x4b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x22, 0x60, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x74, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x52, 0x74, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x48, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x48,
	0x6f, 0x70, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x62, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x62, 0x73, 0x22, 0x54, 0x0a, 0x1a, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x9b, 0x01, 0x0a, 0x1e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67,
	0x4c, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x62, 0x73, 0x22, 0x5c, 0x0a,
	0x1f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x1f,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6b, 0x0a, 0x26,
	0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x41,
	0x64, 0x64, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67,
	0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x75, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x42, 0x75, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x4f, 0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x4f,
	0x46, 0x22, 0x55, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca,
	0x01, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x23, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x44, 0x62, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0xb3, 0x01, 0x0a, 0x03, 0x43, 0x50,
	0x45, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0xd5, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x03, 0x43, 0x50, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x43, 0x50, 0x45, 0x52, 0x03, 0x43, 0x50, 0x45, 0x12, 0x18, 0x0a, 0x07, 0x57,
	0x65, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x65,
	0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x76, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x44, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x52,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x04, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x70, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x3e, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x61, 0x0a, 0x1d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x24, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x65, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x54, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x8b, 0x05, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x08, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67,
	0x1a, 0x4e, 0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf2, 0x02, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x5a, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x5a,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x76, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd1, 0x02, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73,
	0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x4e, 0x0a, 0x0d, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x03, 0x0a, 0x14, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x62, 0x52, 0x75, 0x6c, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x62, 0x52, 0x75, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xd0, 0x03, 0x0a,
	0x0a, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x62, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x62, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x73,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x48, 0x69, 0x67, 0x68, 0x52,
	0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x61, 0x72,
	0x6e, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x77, 0x52, 0x69, 0x73,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x91, 0x01, 0x0a, 0x0f, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x42, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x08, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x0f, 0x53, 0x53,
	0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x10, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x22, 0x99,
	0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x66, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd3, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53,
	0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x61, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x0f, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x78, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x78, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x44, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09,
	0x44, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x50, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59,
	0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a,
	0x21, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x63, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x22, 0x86, 0x01, 0x0a,
	0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x6a, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x6c, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a,
	0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x41, 0x64, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x22, 0x54, 0x0a, 0x1f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x61,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x4e, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x5a, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x95, 0x01,
	0x0a, 0x1d, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x76, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a,
	0x1d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf0, 0x02, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x53, 0x53,
	0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x1e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x66, 0x66, 0x52, 0x69, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x66,
	0x66, 0x52, 0x69, 0x73, 0x6b, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x61, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x48, 0x61, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x22, 0x91, 0x01, 0x0a,
	0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xd2, 0x06, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x70, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x6b, 0x69, 0x70,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x69, 0x73,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x69,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x69, 0x67, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x48, 0x69, 0x67, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x65, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77,
	0x4c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e,
	0x65, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x67, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x67, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf3, 0x01,
	0x0a, 0x16, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x72, 0x69, 0x73, 0x6b,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x52, 0x05, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x53, 0x41,
	0x52, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x08, 0x53, 0x53, 0x41, 0x52, 0x69,
	0x73, 0x6b, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x44, 0x62, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x09, 0x44, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x98, 0x03, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x61, 0x76, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xa0, 0x01,
	0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x52, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x51, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x2e,
	0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x03, 0x45, 0x6e, 0x76, 0x22, 0x3c,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e,
	0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x22, 0x2c, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x01,
	0x0a, 0x13, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x49, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a,
	0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x16, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x5f, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x74,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x82, 0x01, 0x0a, 0x18, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x07, 0x0a, 0x07, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x6f, 0x64, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x73, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x49, 0x73, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x43, 0x56, 0x45, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56, 0x45, 0x12,
	0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x43, 0x57,
	0x45, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x76, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x43,
	0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x76, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c,
	0x69, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x14, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xf9, 0x04, 0x0a, 0x0e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x66,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x66, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x22, 0x70, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x7c, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73,
	0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x33, 0x0a,
	0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x53,
	0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x22, 0x44, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41,
	0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x19, 0x53, 0x53,
	0x41, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x0d,
	0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x44, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x18, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x53,
	0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x63, 0x0a, 0x1e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x53, 0x53, 0x41, 0x52,
	0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x70, 0x0a, 0x16, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x22, 0x6b, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41,
	0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x4e, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73,
	0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x80, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73,
	0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41,
	0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41,
	0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73,
	0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41,
	0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69,
	0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x1e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4a, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x54, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x4b, 0x0a, 0x13, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x48, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x79,
	0x0a, 0x17, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x6d, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c,
	0x6c, 0x22, 0x51, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f,
	0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x1d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x7a, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x17, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x25, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x5f, 0x0a, 0x1f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x6f, 0x74, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xae, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x52, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x1b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x52, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x78, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x4c, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x43,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x75, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x61, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x19,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x33, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x60, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x11, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x48, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x22, 0x2c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x33, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x1a, 0x49, 0x73, 0x4c, 0x6c, 0x61, 0x6d, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x18, 0x49, 0x73,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x19, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x19, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x6c, 0x61, 0x6d, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xa8, 0x02, 0x0a,
	0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x22, 0x4f, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x22, 0xc1, 0x10, 0x0a, 0x0d, 0x4d, 0x49, 0x54, 0x4d, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74,
	0x74, 0x70, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x74, 0x74, 0x70, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6e, 0x6c, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54,
	0x4c, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x47, 0x4d, 0x54, 0x4c,
	0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x47,
	0x4d, 0x54, 0x4c, 0x53, 0x12, 0x34, 0x0a, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x57, 0x61, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x61, 0x64, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x41, 0x43, 0x65, 0x72,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4a, 0x41, 0x33, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4a, 0x41, 0x33, 0x12, 0x40, 0x0a, 0x1b,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x10, 0x48, 0x69, 0x6a,
	0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69,
	0x6a, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x09,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x41, 0x0a, 0x10,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x3c, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x49, 0x54, 0x4d, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x49, 0x54, 0x4d,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e,
	0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69, 0x6a,
	0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69, 0x6a,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x57, 0x0a, 0x13, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48,
	0x69, 0x6a, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0xa5, 0x05, 0x0a, 0x0e, 0x4d, 0x49, 0x54, 0x4d, 0x56, 0x32, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x75, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4a, 0x75, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13,
	0x4a, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x4a, 0x75, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x09, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x48, 0x61, 0x76,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x48,
	0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52,
	0x05, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x48, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69,
	0x6a, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69, 0x6a, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x10,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe8, 0x02, 0x0a,
	0x20, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69, 0x6a,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x69, 0x6a,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x72, 0x6f,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb9, 0x03, 0x0a, 0x1d, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73,
	0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0x39, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x22, 0x51,
	0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x52, 0x05, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0xc0, 0x02, 0x0a, 0x14, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x12, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x22, 0xcd, 0x01, 0x0a,
	0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x06, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xd2, 0x01, 0x0a,
	0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x22, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x53, 0x41, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x53, 0x53, 0x41, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3d, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xd9, 0x01, 0x0a, 0x17, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50,
	0x65, 0x65, 0x70, 0x68, 0x6f, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x50, 0x65, 0x65, 0x70, 0x68, 0x6f, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x78, 0x0a, 0x14, 0x53,
	0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x18, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x39, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a,
	0x10, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x49, 0x44, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53,
	0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x76, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x76, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x4b, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x74,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53,
	0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x2a, 0x35, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47,
	0x6f, 0x64, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x61, 0x6b,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x0b, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x53, 0x50, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4a, 0x53, 0x50, 0x58, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x50,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x53, 0x50, 0x58, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x48, 0x50, 0x10, 0x04, 0x2a, 0x54, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x65, 0x73, 0x52, 0x61, 0x77, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x65, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x58, 0x6f, 0x72, 0x52, 0x61, 0x77, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x58, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x10, 0x05, 0x32, 0x94, 0xcc, 0x02, 0x0a,
	0x03, 0x59, 0x61, 0x6b, 0x12, 0x2b, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x11, 0x59, 0x61, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x45,
	0x63, 0x68, 0x6f, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x4d, 0x49, 0x54, 0x4d, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54,
	0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x10,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x49, 0x54, 0x4d, 0x47, 0x4d, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x06,
	0x4d, 0x49, 0x54, 0x4d, 0x56, 0x32, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54,
	0x4d, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x27, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x04,
	0x45, 0x78, 0x65, 0x63, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x4e, 0x75, 0x63, 0x6c, 0x65,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x34, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x59, 0x61, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x55,
	0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x28, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01,
	0x0a, 0x28, 0x50, 0x6f, 0x70, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x7f, 0x0a, 0x27, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30,
	0x01, 0x12, 0x49, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x1d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x30, 0x01, 0x12, 0x2f, 0x0a, 0x0d, 0x53,
	0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x1a, 0x0e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3a, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x44, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3a,
	0x0a, 0x0f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x11, 0x55, 0x6e,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x21,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x16, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x73,
	0x43, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x73, 0x43, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49,
	0x73, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a,
	0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x12, 0x29,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43,
	0x57, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x15, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x77,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x60, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x5b, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x63, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x30, 0x01, 0x12, 0x48, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53,
	0x6b, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x18,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x6b,
	0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x14, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x11, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x12,
	0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x42, 0x61, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12,
	0x62, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x6c, 0x0a, 0x1c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0a,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x64, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a,
	0x0f, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x49,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a,
	0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x73, 0x0a,
	0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x28, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x59, 0x61, 0x6d, 0x6c,
	0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x59, 0x61, 0x6d,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x6f, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x61, 0x0a, 0x16, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3d, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x47, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7c, 0x0a, 0x1f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x77, 0x0a, 0x29, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x70, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x41, 0x6c, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x1f,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12,
	0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x12,
	0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x11, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x15, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x34, 0x0a,
	0x0d, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x74, 0x74, 0x69, 0x66, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x69,
	0x66, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x74,
	0x74, 0x69, 0x66, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x10, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x36, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x61, 0x76,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a,
	0x11, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x1c, 0x53, 0x61, 0x76, 0x65, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x13,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x42, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x4f,
	0x72, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x4f, 0x72, 0x43, 0x6f, 0x70, 0x79,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x47, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x1b, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x0f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12,
	0x52, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30,
	0x01, 0x12, 0x5a, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x42, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x42, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x44, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x56, 0x4d, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x59, 0x61, 0x6b, 0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b,
	0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x59, 0x61, 0x6b, 0x6c,
	0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a,
	0x0a, 0x19, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e,
	0x64, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x46, 0x75,
	0x7a, 0x7a, 0x54, 0x61, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x76, 0x0a, 0x1d, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e,
	0x67, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0f, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x31, 0x0a, 0x10, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30,
	0x01, 0x12, 0x40, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x17, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x1f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x20, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x17, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a,
	0x22, 0x50, 0x6f, 0x70, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x21, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x30, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x59, 0x61, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61,
	0x6b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x73, 0x49, 0x6e, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e,
	0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e,
	0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6e,
	0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x51, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x4d,
	0x65, 0x6e, 0x75, 0x73, 0x12, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x6e, 0x75, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x35, 0x0a, 0x14, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x1e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x12, 0x24, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x18, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x25, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x4e, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x4c, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a,
	0x0d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x12, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x69, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x73,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x36, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b,
	0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x52,
	0x69, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x46, 0x6f, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x14, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x33, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x40, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x59, 0x73, 0x6f, 0x47, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73,
	0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x59, 0x73, 0x6f,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x59, 0x73, 0x6f, 0x44, 0x75,
	0x6d, 0x70, 0x12, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73,
	0x6f, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12,
	0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x1a, 0x0d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x38, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57,
	0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65,
	0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x44, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x59, 0x61, 0x6b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x46, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x5d, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f,
	0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x4e, 0x53,
	0x4c, 0x6f, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x55, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x17,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x43, 0x4d, 0x50, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x49, 0x43, 0x4d, 0x50, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x16, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x4c, 0x6f, 0x67, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x4c, 0x6f, 0x67, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x21, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x69, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x17, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x46,
	0x50, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f,
	0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x53, 0x52, 0x46, 0x50, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54,
	0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x38, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54,
	0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3d,
	0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x2f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x12, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2f, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x32, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x18, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x41, 0x6c, 0x6c, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30,
	0x01, 0x12, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x19, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x20, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x42, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x1a, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x55, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x12, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x14, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x15, 0x49, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x63, 0x61,
	0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x49, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x36, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x4f,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01,
	0x12, 0x2f, 0x0a, 0x15, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x6d, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x72, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d,
	0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d,
	0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6f, 0x73,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x15, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x75,
	0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56,
	0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x75, 0x6c,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a,
	0x12, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56,
	0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x16, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x16,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x37, 0x0a,
	0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45,
	0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x56, 0x45, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x12, 0x61, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x49, 0x73, 0x53,
	0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x4e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x73, 0x56, 0x75, 0x6c, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x56,
	0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56,
	0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x54, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01,
	0x12, 0x5e, 0x0a, 0x15, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x1a, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x47, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x12, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x4e, 0x53,
	0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x3f, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x16,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x18, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x50, 0x63, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x63, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x63,
	0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x05, 0x50, 0x63,
	0x61, 0x70, 0x58, 0x12, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x63, 0x61, 0x70, 0x58, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x63, 0x61,
	0x70, 0x58, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x58,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54,
	0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x18,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x75,
	0x70, 0x6c, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x32, 0x12, 0x20,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x12, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x17, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x61, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x53,
	0x0a, 0x16, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x11, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x45,
	0x78, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x45,
	0x78, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x67, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x41,
	0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x61, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x61, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x61, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x48, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x53, 0x53,
	0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4e, 0x65, 0x77, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x65, 0x77, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41,
	0x52, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73,
	0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53,
	0x41, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x53, 0x53,
	0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4e, 0x65, 0x77, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x53,
	0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x66,
	0x66, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41,
	0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53,
	0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x17, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73,
	0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x53,
	0x41, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e,
	0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12,
	0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12,
	0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45,
	0x6e, 0x76, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a,
	0x7a, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a, 0x7a,
	0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x74,
	0x61, 0x67, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75,
	0x7a, 0x7a, 0x74, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x11, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4e, 0x0a,
	0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x54, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x6f,
	0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x23,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f,
	0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x1e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x6f, 0x74, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x18, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x4d, 0x49, 0x54, 0x4d, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x49,
	0x54, 0x4d, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x49,
	0x54, 0x4d, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3f, 0x0a,
	0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x39,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x49, 0x52, 0x65, 0x41, 0x63, 0x74, 0x12, 0x11,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41,
	0x49, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x41, 0x49, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x49, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x49, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x49, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x41, 0x49, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x34, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x12, 0x0c,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x46,
	0x6f, 0x72, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x49,
	0x46, 0x6f, 0x72, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x49, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x12, 0x4b,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x63, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x49, 0x54,
	0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x49, 0x54, 0x6f,
	0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x18,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x53, 0x61, 0x76, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x56, 0x32, 0x12, 0x16, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41,
	0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x12,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x54, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x5b, 0x0a, 0x14, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x16, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x49,
	0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x41, 0x49, 0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x12, 0x49, 0x73, 0x4c, 0x6c, 0x61, 0x6d, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4c, 0x6c, 0x61, 0x6d, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49,
	0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x4c, 0x6c, 0x61, 0x6d, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x6c, 0x61, 0x6d, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01,
	0x12, 0x41, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01,
	0x12, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x49, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x49, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x91, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x58, 0x0a,
	0x19, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x49, 0x73, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x42, 0x79, 0x41, 0x49, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42,
	0x79, 0x41, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x42, 0x79, 0x41, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x66, 0x0a, 0x20, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x25, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x31, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x75, 0x62, 0x45, 0x52, 0x4d, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x45, 0x52, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x45, 0x52, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x52, 0x4d, 0x44, 0x6f, 0x74, 0x12, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x52, 0x4d, 0x44,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x52, 0x4d, 0x44, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4d, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64,
	0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_yakgrpc_proto_rawDescOnce sync.Once
	file_yakgrpc_proto_rawDescData []byte
)

func file_yakgrpc_proto_rawDescGZIP() []byte {
	file_yakgrpc_proto_rawDescOnce.Do(func() {
		file_yakgrpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yakgrpc_proto_rawDesc), len(file_yakgrpc_proto_rawDesc)))
	})
	return file_yakgrpc_proto_rawDescData
}

var file_yakgrpc_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yakgrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 882)
var file_yakgrpc_proto_goTypes = []any{
	(ShellType)(0),   // 0: ypb.ShellType
	(ShellScript)(0), // 1: ypb.ShellScript
	(EncMode)(0),     // 2: ypb.EncMode
	(GenerateYakCodeByPacketRequest_Template)(0), // 3: ypb.GenerateYakCodeByPacketRequest.Template
	(*Empty)(nil),                                             // 4: ypb.Empty
	(*VersionResponse)(nil),                                   // 5: ypb.VersionResponse
	(*GeneralResponse)(nil),                                   // 6: ypb.GeneralResponse
	(*DeleteYakScriptRequest)(nil),                            // 7: ypb.DeleteYakScriptRequest
	(*ExecBatchYakScriptRequest)(nil),                         // 8: ypb.ExecBatchYakScriptRequest
	(*ExecBatchYakScriptResult)(nil),                          // 9: ypb.ExecBatchYakScriptResult
	(*GetYakScriptByIdRequest)(nil),                           // 10: ypb.GetYakScriptByIdRequest
	(*GetYakScriptByNameRequest)(nil),                         // 11: ypb.GetYakScriptByNameRequest
	(*GetYakScriptByOnlineIDRequest)(nil),                     // 12: ypb.GetYakScriptByOnlineIDRequest
	(*VerifySystemCertificateResponse)(nil),                   // 13: ypb.VerifySystemCertificateResponse
	(*ExportKnowledgeBaseRequest)(nil),                        // 14: ypb.ExportKnowledgeBaseRequest
	(*ImportKnowledgeBaseRequest)(nil),                        // 15: ypb.ImportKnowledgeBaseRequest
	(*GeneralProgress)(nil),                                   // 16: ypb.GeneralProgress
	(*AddMCPServerRequest)(nil),                               // 17: ypb.AddMCPServerRequest
	(*DeleteMCPServerRequest)(nil),                            // 18: ypb.DeleteMCPServerRequest
	(*UpdateMCPServerRequest)(nil),                            // 19: ypb.UpdateMCPServerRequest
	(*GetAllMCPServersRequest)(nil),                           // 20: ypb.GetAllMCPServersRequest
	(*MCPServerToolParamInfo)(nil),                            // 21: ypb.MCPServerToolParamInfo
	(*MCPServerTool)(nil),                                     // 22: ypb.MCPServerTool
	(*MCPServer)(nil),                                         // 23: ypb.MCPServer
	(*GetAllMCPServersResponse)(nil),                          // 24: ypb.GetAllMCPServersResponse
	(*EntityRepository)(nil),                                  // 25: ypb.EntityRepository
	(*ListEntityRepositoryResponse)(nil),                      // 26: ypb.ListEntityRepositoryResponse
	(*Entity)(nil),                                            // 27: ypb.Entity
	(*EntityFilter)(nil),                                      // 28: ypb.EntityFilter
	(*QueryEntityRequest)(nil),                                // 29: ypb.QueryEntityRequest
	(*QueryEntityResponse)(nil),                               // 30: ypb.QueryEntityResponse
	(*DeleteEntityRequest)(nil),                               // 31: ypb.DeleteEntityRequest
	(*Relationship)(nil),                                      // 32: ypb.Relationship
	(*RelationshipFilter)(nil),                                // 33: ypb.RelationshipFilter
	(*QueryRelationshipRequest)(nil),                          // 34: ypb.QueryRelationshipRequest
	(*QueryRelationshipResponse)(nil),                         // 35: ypb.QueryRelationshipResponse
	(*QuerySubERMRequest)(nil),                                // 36: ypb.QuerySubERMRequest
	(*QuerySubERMResponse)(nil),                               // 37: ypb.QuerySubERMResponse
	(*GenerateERMDotRequest)(nil),                             // 38: ypb.GenerateERMDotRequest
	(*GenerateERMDotResponse)(nil),                            // 39: ypb.GenerateERMDotResponse
	(*StartedLocalModelInfo)(nil),                             // 40: ypb.StartedLocalModelInfo
	(*GetAllStartedLocalModelsResponse)(nil),                  // 41: ypb.GetAllStartedLocalModelsResponse
	(*ClearAllModelsRequest)(nil),                             // 42: ypb.ClearAllModelsRequest
	(*UpdateLocalModelRequest)(nil),                           // 43: ypb.UpdateLocalModelRequest
	(*AddLocalModelRequest)(nil),                              // 44: ypb.AddLocalModelRequest
	(*DeleteLocalModelRequest)(nil),                           // 45: ypb.DeleteLocalModelRequest
	(*StopLocalModelRequest)(nil),                             // 46: ypb.StopLocalModelRequest
	(*LocalModelStatus)(nil),                                  // 47: ypb.LocalModelStatus
	(*ThirdPartyBinary)(nil),                                  // 48: ypb.ThirdPartyBinary
	(*ListThirdPartyBinaryResponse)(nil),                      // 49: ypb.ListThirdPartyBinaryResponse
	(*InstallThirdPartyBinaryRequest)(nil),                    // 50: ypb.InstallThirdPartyBinaryRequest
	(*UninstallThirdPartyBinaryRequest)(nil),                  // 51: ypb.UninstallThirdPartyBinaryRequest
	(*IsThirdPartyBinaryReadyRequest)(nil),                    // 52: ypb.IsThirdPartyBinaryReadyRequest
	(*IsThirdPartyBinaryReadyResponse)(nil),                   // 53: ypb.IsThirdPartyBinaryReadyResponse
	(*StartThirdPartyBinaryRequest)(nil),                      // 54: ypb.StartThirdPartyBinaryRequest
	(*BuildVectorIndexForKnowledgeBaseEntryRequest)(nil),      // 55: ypb.BuildVectorIndexForKnowledgeBaseEntryRequest
	(*BuildVectorIndexForKnowledgeBaseRequest)(nil),           // 56: ypb.BuildVectorIndexForKnowledgeBaseRequest
	(*GetKnowledgeBaseNameListResponse)(nil),                  // 57: ypb.GetKnowledgeBaseNameListResponse
	(*KnowledgeBaseType)(nil),                                 // 58: ypb.KnowledgeBaseType
	(*GetKnowledgeBaseTypeListResponse)(nil),                  // 59: ypb.GetKnowledgeBaseTypeListResponse
	(*GetKnowledgeBaseRequest)(nil),                           // 60: ypb.GetKnowledgeBaseRequest
	(*KnowledgeBaseInfo)(nil),                                 // 61: ypb.KnowledgeBaseInfo
	(*GetKnowledgeBaseResponse)(nil),                          // 62: ypb.GetKnowledgeBaseResponse
	(*CreateKnowledgeBaseRequest)(nil),                        // 63: ypb.CreateKnowledgeBaseRequest
	(*UpdateKnowledgeBaseRequest)(nil),                        // 64: ypb.UpdateKnowledgeBaseRequest
	(*DeleteKnowledgeBaseEntryRequest)(nil),                   // 65: ypb.DeleteKnowledgeBaseEntryRequest
	(*SearchKnowledgeBaseEntryRequest)(nil),                   // 66: ypb.SearchKnowledgeBaseEntryRequest
	(*QueryKnowledgeBaseByAIRequest)(nil),                     // 67: ypb.QueryKnowledgeBaseByAIRequest
	(*QueryKnowledgeBaseByAIResponse)(nil),                    // 68: ypb.QueryKnowledgeBaseByAIResponse
	(*SearchKnowledgeBaseEntryResponse)(nil),                  // 69: ypb.SearchKnowledgeBaseEntryResponse
	(*CreateKnowledgeBaseEntryRequest)(nil),                   // 70: ypb.CreateKnowledgeBaseEntryRequest
	(*UpdateKnowledgeBaseEntryRequest)(nil),                   // 71: ypb.UpdateKnowledgeBaseEntryRequest
	(*KnowledgeBaseEntry)(nil),                                // 72: ypb.KnowledgeBaseEntry
	(*DeleteKnowledgeBaseRequest)(nil),                        // 73: ypb.DeleteKnowledgeBaseRequest
	(*DeleteSearchVectorDatabaseRequest)(nil),                 // 74: ypb.DeleteSearchVectorDatabaseRequest
	(*VectorStoreCollection)(nil),                             // 75: ypb.VectorStoreCollection
	(*ListVectorStoreEntriesRequest)(nil),                     // 76: ypb.ListVectorStoreEntriesRequest
	(*CreateVectorStoreEntryRequest)(nil),                     // 77: ypb.CreateVectorStoreEntryRequest
	(*VectorStoreEntry)(nil),                                  // 78: ypb.VectorStoreEntry
	(*ListVectorStoreEntriesResponse)(nil),                    // 79: ypb.ListVectorStoreEntriesResponse
	(*GetDocumentByVectorStoreEntryIDRequest)(nil),            // 80: ypb.GetDocumentByVectorStoreEntryIDRequest
	(*GetDocumentByVectorStoreEntryIDResponse)(nil),           // 81: ypb.GetDocumentByVectorStoreEntryIDResponse
	(*UpdateVectorStoreCollectionRequest)(nil),                // 82: ypb.UpdateVectorStoreCollectionRequest
	(*GetAllVectorStoreCollectionsWithFilterRequest)(nil),     // 83: ypb.GetAllVectorStoreCollectionsWithFilterRequest
	(*GetAllVectorStoreCollectionsWithFilterResponse)(nil),    // 84: ypb.GetAllVectorStoreCollectionsWithFilterResponse
	(*GetAllVectorStoreCollectionsResponse)(nil),              // 85: ypb.GetAllVectorStoreCollectionsResponse
	(*IsSearchVectorDatabaseReadyRequest)(nil),                // 86: ypb.IsSearchVectorDatabaseReadyRequest
	(*IsSearchVectorDatabaseReadyResponse)(nil),               // 87: ypb.IsSearchVectorDatabaseReadyResponse
	(*InitSearchVectorDatabaseRequest)(nil),                   // 88: ypb.InitSearchVectorDatabaseRequest
	(*GetToolSetListResponse)(nil),                            // 89: ypb.GetToolSetListResponse
	(*ToolSetInfo)(nil),                                       // 90: ypb.ToolSetInfo
	(*ResourceSetInfo)(nil),                                   // 91: ypb.ResourceSetInfo
	(*AIToolGenerateMetadataRequest)(nil),                     // 92: ypb.AIToolGenerateMetadataRequest
	(*AIToolGenerateMetadataResponse)(nil),                    // 93: ypb.AIToolGenerateMetadataResponse
	(*SaveAIToolRequest)(nil),                                 // 94: ypb.SaveAIToolRequest
	(*SaveAIToolV2Response)(nil),                              // 95: ypb.SaveAIToolV2Response
	(*UpdateAIToolRequest)(nil),                               // 96: ypb.UpdateAIToolRequest
	(*DeleteAIToolRequest)(nil),                               // 97: ypb.DeleteAIToolRequest
	(*ToggleAIToolFavoriteRequest)(nil),                       // 98: ypb.ToggleAIToolFavoriteRequest
	(*ToggleAIToolFavoriteResponse)(nil),                      // 99: ypb.ToggleAIToolFavoriteResponse
	(*AITool)(nil),                                            // 100: ypb.AITool
	(*GetAIToolListResponse)(nil),                             // 101: ypb.GetAIToolListResponse
	(*GetAIToolListRequest)(nil),                              // 102: ypb.GetAIToolListRequest
	(*AIOutputEvent)(nil),                                     // 103: ypb.AIOutputEvent
	(*I18N)(nil),                                              // 104: ypb.I18n
	(*AIInputEvent)(nil),                                      // 105: ypb.AIInputEvent
	(*AITriageInputEvent)(nil),                                // 106: ypb.AITriageInputEvent
	(*McpConfig)(nil),                                         // 107: ypb.McpConfig
	(*AIStartParams)(nil),                                     // 108: ypb.AIStartParams
	(*AITaskFilter)(nil),                                      // 109: ypb.AITaskFilter
	(*AIEventFilter)(nil),                                     // 110: ypb.AIEventFilter
	(*AIEventQueryRequest)(nil),                               // 111: ypb.AIEventQueryRequest
	(*AIEventQueryResponse)(nil),                              // 112: ypb.AIEventQueryResponse
	(*AITaskQueryRequest)(nil),                                // 113: ypb.AITaskQueryRequest
	(*AITaskQueryResponse)(nil),                               // 114: ypb.AITaskQueryResponse
	(*AITaskDeleteRequest)(nil),                               // 115: ypb.AITaskDeleteRequest
	(*AITask)(nil),                                            // 116: ypb.AITask
	(*AIForgeFilter)(nil),                                     // 117: ypb.AIForgeFilter
	(*AIForge)(nil),                                           // 118: ypb.AIForge
	(*QueryAIForgeRequest)(nil),                               // 119: ypb.QueryAIForgeRequest
	(*QueryAIForgeResponse)(nil),                              // 120: ypb.QueryAIForgeResponse
	(*GetAIForgeRequest)(nil),                                 // 121: ypb.GetAIForgeRequest
	(*StartMcpServerRequest)(nil),                             // 122: ypb.StartMcpServerRequest
	(*StartMcpServerResponse)(nil),                            // 123: ypb.StartMcpServerResponse
	(*GetSpaceEngineAccountStatusRequest)(nil),                // 124: ypb.GetSpaceEngineAccountStatusRequest
	(*GetSpaceEngineStatusRequest)(nil),                       // 125: ypb.GetSpaceEngineStatusRequest
	(*SpaceEngineStatus)(nil),                                 // 126: ypb.SpaceEngineStatus
	(*FetchPortAssetFromSpaceEngineRequest)(nil),              // 127: ypb.FetchPortAssetFromSpaceEngineRequest
	(*DeleteHybridScanTaskRequest)(nil),                       // 128: ypb.DeleteHybridScanTaskRequest
	(*HybridScanTask)(nil),                                    // 129: ypb.HybridScanTask
	(*QueryHybridScanTaskResponse)(nil),                       // 130: ypb.QueryHybridScanTaskResponse
	(*QueryHybridScanTaskRequest)(nil),                        // 131: ypb.QueryHybridScanTaskRequest
	(*HybridScanTaskFilter)(nil),                              // 132: ypb.HybridScanTaskFilter
	(*HybridScanResponse)(nil),                                // 133: ypb.HybridScanResponse
	(*HybridScanUpdateActiveTaskTable)(nil),                   // 134: ypb.HybridScanUpdateActiveTaskTable
	(*HybridScanInputTarget)(nil),                             // 135: ypb.HybridScanInputTarget
	(*HybridScanPluginConfig)(nil),                            // 136: ypb.HybridScanPluginConfig
	(*HybridScanRequest)(nil),                                 // 137: ypb.HybridScanRequest
	(*DuplexConnectionRequest)(nil),                           // 138: ypb.DuplexConnectionRequest
	(*DuplexConnectionResponse)(nil),                          // 139: ypb.DuplexConnectionResponse
	(*PcapMetadataRequest)(nil),                               // 140: ypb.PcapMetadataRequest
	(*PcapMetadata)(nil),                                      // 141: ypb.PcapMetadata
	(*QueryTrafficPacketRequest)(nil),                         // 142: ypb.QueryTrafficPacketRequest
	(*QueryTrafficTCPReassembledRequest)(nil),                 // 143: ypb.QueryTrafficTCPReassembledRequest
	(*TrafficSession)(nil),                                    // 144: ypb.TrafficSession
	(*QueryTrafficSessionResponse)(nil),                       // 145: ypb.QueryTrafficSessionResponse
	(*TrafficPacket)(nil),                                     // 146: ypb.TrafficPacket
	(*QueryTrafficPacketResponse)(nil),                        // 147: ypb.QueryTrafficPacketResponse
	(*TrafficTCPReassembled)(nil),                             // 148: ypb.TrafficTCPReassembled
	(*QueryTrafficTCPReassembledResponse)(nil),                // 149: ypb.QueryTrafficTCPReassembledResponse
	(*QueryTrafficSessionRequest)(nil),                        // 150: ypb.QueryTrafficSessionRequest
	(*PcapXRequest)(nil),                                      // 151: ypb.PcapXRequest
	(*SuricataConfig)(nil),                                    // 152: ypb.SuricataConfig
	(*PcapXResponse)(nil),                                     // 153: ypb.PcapXResponse
	(*RequestYakURLParams)(nil),                               // 154: ypb.RequestYakURLParams
	(*YakURL)(nil),                                            // 155: ypb.YakURL
	(*YakURLResource)(nil),                                    // 156: ypb.YakURLResource
	(*RequestYakURLResponse)(nil),                             // 157: ypb.RequestYakURLResponse
	(*PacketPrettifyHelperRequest)(nil),                       // 158: ypb.PacketPrettifyHelperRequest
	(*PacketPrettifyHelperResponse)(nil),                      // 159: ypb.PacketPrettifyHelperResponse
	(*DiagnoseNetworkDNSRequest)(nil),                         // 160: ypb.DiagnoseNetworkDNSRequest
	(*ResetGlobalNetworkConfigRequest)(nil),                   // 161: ypb.ResetGlobalNetworkConfigRequest
	(*GetGlobalNetworkConfigRequest)(nil),                     // 162: ypb.GetGlobalNetworkConfigRequest
	(*ValidP12PassWordRequest)(nil),                           // 163: ypb.ValidP12PassWordRequest
	(*ValidP12PassWordResponse)(nil),                          // 164: ypb.ValidP12PassWordResponse
	(*GlobalNetworkConfig)(nil),                               // 165: ypb.GlobalNetworkConfig
	(*AuthInfo)(nil),                                          // 166: ypb.AuthInfo
	(*ThirdPartyApplicationConfig)(nil),                       // 167: ypb.ThirdPartyApplicationConfig
	(*DiagnoseNetworkRequest)(nil),                            // 168: ypb.DiagnoseNetworkRequest
	(*DiagnoseNetworkResponse)(nil),                           // 169: ypb.DiagnoseNetworkResponse
	(*DisconnectVulinboxAgentRequest)(nil),                    // 170: ypb.DisconnectVulinboxAgentRequest
	(*GetRegisteredAgentRequest)(nil),                         // 171: ypb.GetRegisteredAgentRequest
	(*GetRegisteredAgentResponse)(nil),                        // 172: ypb.GetRegisteredAgentResponse
	(*SmokingEvaluatePluginRequest)(nil),                      // 173: ypb.SmokingEvaluatePluginRequest
	(*SmokingEvaluateResult)(nil),                             // 174: ypb.SmokingEvaluateResult
	(*SmokingEvaluatePluginResponse)(nil),                     // 175: ypb.SmokingEvaluatePluginResponse
	(*IsVulinboxReadyRequest)(nil),                            // 176: ypb.IsVulinboxReadyRequest
	(*IsVulinboxReadyResponse)(nil),                           // 177: ypb.IsVulinboxReadyResponse
	(*InstallVulinboxRequest)(nil),                            // 178: ypb.InstallVulinboxRequest
	(*StartVulinboxRequest)(nil),                              // 179: ypb.StartVulinboxRequest
	(*GenQualityInspectionReportRequest)(nil),                 // 180: ypb.GenQualityInspectionReportRequest
	(*DebugPluginRequest)(nil),                                // 181: ypb.DebugPluginRequest
	(*HTTPRequestBuilderResult)(nil),                          // 182: ypb.HTTPRequestBuilderResult
	(*HTTPRequestBuilderResponse)(nil),                        // 183: ypb.HTTPRequestBuilderResponse
	(*HTTPRequestBuilderParams)(nil),                          // 184: ypb.HTTPRequestBuilderParams
	(*ScreenRecorder)(nil),                                    // 185: ypb.ScreenRecorder
	(*QueryScreenRecorderRequest)(nil),                        // 186: ypb.QueryScreenRecorderRequest
	(*UploadScreenRecorderRequest)(nil),                       // 187: ypb.UploadScreenRecorderRequest
	(*GetOneScreenRecorderRequest)(nil),                       // 188: ypb.GetOneScreenRecorderRequest
	(*UpdateScreenRecorderRequest)(nil),                       // 189: ypb.UpdateScreenRecorderRequest
	(*QueryScreenRecorderResponse)(nil),                       // 190: ypb.QueryScreenRecorderResponse
	(*StartScrecorderRequest)(nil),                            // 191: ypb.StartScrecorderRequest
	(*InstallScrecorderRequest)(nil),                          // 192: ypb.InstallScrecorderRequest
	(*IsScrecorderReadyRequest)(nil),                          // 193: ypb.IsScrecorderReadyRequest
	(*IsScrecorderReadyResponse)(nil),                         // 194: ypb.IsScrecorderReadyResponse
	(*GetCVERequest)(nil),                                     // 195: ypb.GetCVERequest
	(*QueryCVERequest)(nil),                                   // 196: ypb.QueryCVERequest
	(*CWEDetail)(nil),                                         // 197: ypb.CWEDetail
	(*CVEDetailEx)(nil),                                       // 198: ypb.CVEDetailEx
	(*CVEDetail)(nil),                                         // 199: ypb.CVEDetail
	(*QueryCVEResponse)(nil),                                  // 200: ypb.QueryCVEResponse
	(*SaveTextToTemporalFileRequest)(nil),                     // 201: ypb.SaveTextToTemporalFileRequest
	(*SaveTextToTemporalFileResponse)(nil),                    // 202: ypb.SaveTextToTemporalFileResponse
	(*ImportChaosMakerRulesRequest)(nil),                      // 203: ypb.ImportChaosMakerRulesRequest
	(*ChaosMakerRuleGroup)(nil),                               // 204: ypb.ChaosMakerRuleGroup
	(*IsRemoteAddrAvailableRequest)(nil),                      // 205: ypb.IsRemoteAddrAvailableRequest
	(*IsRemoteAddrAvailableResponse)(nil),                     // 206: ypb.IsRemoteAddrAvailableResponse
	(*ExecuteChaosMakerRuleRequest)(nil),                      // 207: ypb.ExecuteChaosMakerRuleRequest
	(*ChaosMakerRule)(nil),                                    // 208: ypb.ChaosMakerRule
	(*QueryChaosMakerRuleResponse)(nil),                       // 209: ypb.QueryChaosMakerRuleResponse
	(*DeleteChaosMakerRuleByIDRequest)(nil),                   // 210: ypb.DeleteChaosMakerRuleByIDRequest
	(*QueryChaosMakerRuleRequest)(nil),                        // 211: ypb.QueryChaosMakerRuleRequest
	(*ImportsProfileDatabaseRequest)(nil),                     // 212: ypb.ImportsProfileDatabaseRequest
	(*ExportsProfileDatabaseRequest)(nil),                     // 213: ypb.ExportsProfileDatabaseRequest
	(*UpdateCVEDatabaseRequest)(nil),                          // 214: ypb.UpdateCVEDatabaseRequest
	(*IsCVEDatabaseReadyResponse)(nil),                        // 215: ypb.IsCVEDatabaseReadyResponse
	(*IsCVEDatabaseReadyRequest)(nil),                         // 216: ypb.IsCVEDatabaseReadyRequest
	(*MITMRuleExtractedData)(nil),                             // 217: ypb.MITMRuleExtractedData
	(*QueryMITMRuleExtractedDataResponse)(nil),                // 218: ypb.QueryMITMRuleExtractedDataResponse
	(*QueryMITMRuleExtractedDataRequest)(nil),                 // 219: ypb.QueryMITMRuleExtractedDataRequest
	(*ExtractedDataFilter)(nil),                               // 220: ypb.ExtractedDataFilter
	(*ExportMITMRuleExtractedDataRequest)(nil),                // 221: ypb.ExportMITMRuleExtractedDataRequest
	(*ExportMITMRuleExtractedDataResponse)(nil),               // 222: ypb.ExportMITMRuleExtractedDataResponse
	(*ExportProjectRequest)(nil),                              // 223: ypb.ExportProjectRequest
	(*ProjectIOProgress)(nil),                                 // 224: ypb.ProjectIOProgress
	(*ImportProjectRequest)(nil),                              // 225: ypb.ImportProjectRequest
	(*IsPrivilegedForNetRawResponse)(nil),                     // 226: ypb.IsPrivilegedForNetRawResponse
	(*RemoveProjectRequest)(nil),                              // 227: ypb.RemoveProjectRequest
	(*IsProjectNameValidRequest)(nil),                         // 228: ypb.IsProjectNameValidRequest
	(*NewProjectRequest)(nil),                                 // 229: ypb.NewProjectRequest
	(*NewProjectResponse)(nil),                                // 230: ypb.NewProjectResponse
	(*GetProjectsRequest)(nil),                                // 231: ypb.GetProjectsRequest
	(*ProjectDescription)(nil),                                // 232: ypb.ProjectDescription
	(*GetProjectsResponse)(nil),                               // 233: ypb.GetProjectsResponse
	(*SetCurrentProjectRequest)(nil),                          // 234: ypb.SetCurrentProjectRequest
	(*GetCurrentProjectExRequest)(nil),                        // 235: ypb.GetCurrentProjectExRequest
	(*DeleteProjectRequest)(nil),                              // 236: ypb.DeleteProjectRequest
	(*GetDefaultProjectExRequest)(nil),                        // 237: ypb.GetDefaultProjectExRequest
	(*QueryProjectDetailRequest)(nil),                         // 238: ypb.QueryProjectDetailRequest
	(*GetTemporaryProjectExRequest)(nil),                      // 239: ypb.GetTemporaryProjectExRequest
	(*AttachCombinedOutputRequest)(nil),                       // 240: ypb.AttachCombinedOutputRequest
	(*YaklangShellRequest)(nil),                               // 241: ypb.YaklangShellRequest
	(*YaklangShellKVPair)(nil),                                // 242: ypb.YaklangShellKVPair
	(*YaklangShellResponse)(nil),                              // 243: ypb.YaklangShellResponse
	(*ResetAndInvalidUserDataRequest)(nil),                    // 244: ypb.ResetAndInvalidUserDataRequest
	(*RegisterFacadesHTTPRequest)(nil),                        // 245: ypb.RegisterFacadesHTTPRequest
	(*RegisterFacadesHTTPResponse)(nil),                       // 246: ypb.RegisterFacadesHTTPResponse
	(*GetHTTPPacketBodyRequest)(nil),                          // 247: ypb.GetHTTPPacketBodyRequest
	(*DownloadBodyByHTTPFlowIDRequest)(nil),                   // 248: ypb.DownloadBodyByHTTPFlowIDRequest
	(*Bytes)(nil),                                             // 249: ypb.Bytes
	(*ExtractDataResponse)(nil),                               // 250: ypb.ExtractDataResponse
	(*SaveFuzzerLabelRequest)(nil),                            // 251: ypb.SaveFuzzerLabelRequest
	(*QueryFuzzerLabelResponse)(nil),                          // 252: ypb.QueryFuzzerLabelResponse
	(*FuzzerLabel)(nil),                                       // 253: ypb.FuzzerLabel
	(*DeleteFuzzerLabelRequest)(nil),                          // 254: ypb.DeleteFuzzerLabelRequest
	(*SaveFuzzerConfigRequest)(nil),                           // 255: ypb.SaveFuzzerConfigRequest
	(*QueryFuzzerConfigRequest)(nil),                          // 256: ypb.QueryFuzzerConfigRequest
	(*QueryFuzzerConfigResponse)(nil),                         // 257: ypb.QueryFuzzerConfigResponse
	(*FuzzerConfig)(nil),                                      // 258: ypb.FuzzerConfig
	(*DeleteFuzzerConfigRequest)(nil),                         // 259: ypb.DeleteFuzzerConfigRequest
	(*ExtractDataRequest)(nil),                                // 260: ypb.ExtractDataRequest
	(*GenerateExtractRuleRequest)(nil),                        // 261: ypb.GenerateExtractRuleRequest
	(*GenerateExtractRuleResponse)(nil),                       // 262: ypb.GenerateExtractRuleResponse
	(*GetMachineIDResponse)(nil),                              // 263: ypb.GetMachineIDResponse
	(*QueryHTTPFuzzerResponseByTaskIdRequest)(nil),            // 264: ypb.QueryHTTPFuzzerResponseByTaskIdRequest
	(*QueryHTTPFuzzerResponseByTaskIdResponse)(nil),           // 265: ypb.QueryHTTPFuzzerResponseByTaskIdResponse
	(*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest)(nil),  // 266: ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest
	(*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest)(nil), // 267: ypb.DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest
	(*ClientWebsocketRequest)(nil),                            // 268: ypb.ClientWebsocketRequest
	(*ClientWebsocketResponse)(nil),                           // 269: ypb.ClientWebsocketResponse
	(*DefaultProxyResult)(nil),                                // 270: ypb.DefaultProxyResult
	(*ExecPacketScanRequest)(nil),                             // 271: ypb.ExecPacketScanRequest
	(*Range)(nil),                                             // 272: ypb.Range
	(*YaklangInspectInformationRequest)(nil),                  // 273: ypb.YaklangInspectInformationRequest
	(*YaklangLanguageSuggestionRequest)(nil),                  // 274: ypb.YaklangLanguageSuggestionRequest
	(*YaklangInformationKV)(nil),                              // 275: ypb.YaklangInformationKV
	(*YaklangInformation)(nil),                                // 276: ypb.YaklangInformation
	(*YaklangLanguageSuggestionResponse)(nil),                 // 277: ypb.YaklangLanguageSuggestionResponse
	(*YaklangLanguageFindResponse)(nil),                       // 278: ypb.YaklangLanguageFindResponse
	(*YaklangInspectInformationResponse)(nil),                 // 279: ypb.YaklangInspectInformationResponse
	(*YakUIInfo)(nil),                                         // 280: ypb.YakUIInfo
	(*YakRiskInfo)(nil),                                       // 281: ypb.YakRiskInfo
	(*YaklangGetCliCodeFromDatabaseResponse)(nil),             // 282: ypb.YaklangGetCliCodeFromDatabaseResponse
	(*YaklangGetCliCodeFromDatabaseRequest)(nil),              // 283: ypb.YaklangGetCliCodeFromDatabaseRequest
	(*StaticAnalyzeErrorRequest)(nil),                         // 284: ypb.StaticAnalyzeErrorRequest
	(*YaklangCompileAndFormatRequest)(nil),                    // 285: ypb.YaklangCompileAndFormatRequest
	(*YaklangCompileAndFormatResponse)(nil),                   // 286: ypb.YaklangCompileAndFormatResponse
	(*StaticAnalyzeErrorResult)(nil),                          // 287: ypb.StaticAnalyzeErrorResult
	(*StaticAnalyzeErrorResponse)(nil),                        // 288: ypb.StaticAnalyzeErrorResponse
	(*SavePayloadProgress)(nil),                               // 289: ypb.SavePayloadProgress
	(*ExportPayloadBatchRequest)(nil),                         // 290: ypb.ExportPayloadBatchRequest
	(*UploadPayloadToOnlineRequest)(nil),                      // 291: ypb.UploadPayloadToOnlineRequest
	(*DownloadPayloadRequest)(nil),                            // 292: ypb.DownloadPayloadRequest
	(*DownloadProgress)(nil),                                  // 293: ypb.DownloadProgress
	(*DeletePluginByUserIDRequest)(nil),                       // 294: ypb.DeletePluginByUserIDRequest
	(*ExportPayloadDBAndFileRequest)(nil),                     // 295: ypb.ExportPayloadDBAndFileRequest
	(*DeleteLocalPluginsByWhereRequest)(nil),                  // 296: ypb.DeleteLocalPluginsByWhereRequest
	(*DownloadOnlinePluginProgress)(nil),                      // 297: ypb.DownloadOnlinePluginProgress
	(*DownloadOnlinePluginByTokenRequest)(nil),                // 298: ypb.DownloadOnlinePluginByTokenRequest
	(*DownloadOnlinePluginByIdRequest)(nil),                   // 299: ypb.DownloadOnlinePluginByIdRequest
	(*DownloadOnlinePluginByIdsRequest)(nil),                  // 300: ypb.DownloadOnlinePluginByIdsRequest
	(*DownloadOnlinePluginsRequest)(nil),                      // 301: ypb.DownloadOnlinePluginsRequest
	(*QueryPluginGroup)(nil),                                  // 302: ypb.QueryPluginGroup
	(*DownloadOnlinePluginByScriptNamesRequest)(nil),          // 303: ypb.DownloadOnlinePluginByScriptNamesRequest
	(*DownloadOnlinePluginByScriptNamesResponse)(nil),         // 304: ypb.DownloadOnlinePluginByScriptNamesResponse
	(*DownloadOnlinePluginByScriptName)(nil),                  // 305: ypb.DownloadOnlinePluginByScriptName
	(*DownloadOnlinePluginByUUIDRequest)(nil),                 // 306: ypb.DownloadOnlinePluginByUUIDRequest
	(*QueryOnlinePluginsRequest)(nil),                         // 307: ypb.QueryOnlinePluginsRequest
	(*QueryOnlinePluginsResponse)(nil),                        // 308: ypb.QueryOnlinePluginsResponse
	(*OnlinePlugin)(nil),                                      // 309: ypb.OnlinePlugin
	(*OnlineProfile)(nil),                                     // 310: ypb.OnlineProfile
	(*SetKeyRequest)(nil),                                     // 311: ypb.SetKeyRequest
	(*GetKeyRequest)(nil),                                     // 312: ypb.GetKeyRequest
	(*GetKeyResult)(nil),                                      // 313: ypb.GetKeyResult
	(*GeneralStorage)(nil),                                    // 314: ypb.GeneralStorage
	(*GetProcessEnvKeyResult)(nil),                            // 315: ypb.GetProcessEnvKeyResult
	(*SetSystemProxyRequest)(nil),                             // 316: ypb.SetSystemProxyRequest
	(*GetSystemProxyResult)(nil),                              // 317: ypb.GetSystemProxyResult
	(*GetExecBatchYakScriptUnfinishedTaskByUidRequest)(nil),   // 318: ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	(*RecoverExecBatchYakScriptUnfinishedTaskRequest)(nil),    // 319: ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	(*ExecBatchYakScriptUnfinishedTask)(nil),                  // 320: ypb.ExecBatchYakScriptUnfinishedTask
	(*SimpleDetectUnfinishedTask)(nil),                        // 321: ypb.SimpleDetectUnfinishedTask
	(*GetExecBatchYakScriptUnfinishedTaskResponse)(nil),       // 322: ypb.GetExecBatchYakScriptUnfinishedTaskResponse
	(*GetSimpleDetectUnfinishedTaskResponse)(nil),             // 323: ypb.GetSimpleDetectUnfinishedTaskResponse
	(*UnfinishedTaskFilter)(nil),                              // 324: ypb.UnfinishedTaskFilter
	(*QueryUnfinishedTaskRequest)(nil),                        // 325: ypb.QueryUnfinishedTaskRequest
	(*DeleteUnfinishedTaskRequest)(nil),                       // 326: ypb.DeleteUnfinishedTaskRequest
	(*UnfinishedTask)(nil),                                    // 327: ypb.UnfinishedTask
	(*QueryUnfinishedTaskResponse)(nil),                       // 328: ypb.QueryUnfinishedTaskResponse
	(*GetUnfinishedTaskDetailByIdRequest)(nil),                // 329: ypb.GetUnfinishedTaskDetailByIdRequest
	(*RecoverUnfinishedTaskRequest)(nil),                      // 330: ypb.RecoverUnfinishedTaskRequest
	(*FixUploadPacketRequest)(nil),                            // 331: ypb.FixUploadPacketRequest
	(*FixUploadPacketResponse)(nil),                           // 332: ypb.FixUploadPacketResponse
	(*IsMultipartFormDataRequestResult)(nil),                  // 333: ypb.IsMultipartFormDataRequestResult
	(*AutoDecodeRequest)(nil),                                 // 334: ypb.AutoDecodeRequest
	(*AutoDecodeResult)(nil),                                  // 335: ypb.AutoDecodeResult
	(*AutoDecodeResponse)(nil),                                // 336: ypb.AutoDecodeResponse
	(*ExtractDataToFileResult)(nil),                           // 337: ypb.ExtractDataToFileResult
	(*GetYakScriptTagsResponse)(nil),                          // 338: ypb.GetYakScriptTagsResponse
	(*Tags)(nil),                                              // 339: ypb.Tags
	(*QueryYakScriptLocalAndUserRequest)(nil),                 // 340: ypb.QueryYakScriptLocalAndUserRequest
	(*QueryYakScriptLocalAndUserResponse)(nil),                // 341: ypb.QueryYakScriptLocalAndUserResponse
	(*QueryYakScriptByOnlineGroupRequest)(nil),                // 342: ypb.QueryYakScriptByOnlineGroupRequest
	(*QueryYakScriptByNamesRequest)(nil),                      // 343: ypb.QueryYakScriptByNamesRequest
	(*QueryYakScriptByIsCoreRequest)(nil),                     // 344: ypb.QueryYakScriptByIsCoreRequest
	(*QueryYakScriptByNamesResponse)(nil),                     // 345: ypb.QueryYakScriptByNamesResponse
	(*QueryYakScriptByIsCoreResponse)(nil),                    // 346: ypb.QueryYakScriptByIsCoreResponse
	(*QueryYakScriptRiskDetailByCWERequest)(nil),              // 347: ypb.QueryYakScriptRiskDetailByCWERequest
	(*QueryYakScriptRiskDetailByCWEResponse)(nil),             // 348: ypb.QueryYakScriptRiskDetailByCWEResponse
	(*YakScriptRiskTypeListResponse)(nil),                     // 349: ypb.YakScriptRiskTypeListResponse
	(*RiskTypeLists)(nil),                                     // 350: ypb.RiskTypeLists
	(*ExtractDataToFileRequest)(nil),                          // 351: ypb.ExtractDataToFileRequest
	(*ExtractableData)(nil),                                   // 352: ypb.ExtractableData
	(*MITMContentReplacers)(nil),                              // 353: ypb.MITMContentReplacers
	(*ImportMITMReplacerRulesRequest)(nil),                    // 354: ypb.ImportMITMReplacerRulesRequest
	(*ExportMITMReplacerRulesResponse)(nil),                   // 355: ypb.ExportMITMReplacerRulesResponse
	(*ExecYakitPluginsByYakScriptFilterRequest)(nil),          // 356: ypb.ExecYakitPluginsByYakScriptFilterRequest
	(*GenerateYakCodeByPacketRequest)(nil),                    // 357: ypb.GenerateYakCodeByPacketRequest
	(*GenerateCSRFPocByPacketRequest)(nil),                    // 358: ypb.GenerateCSRFPocByPacketRequest
	(*GenerateCSRFPocByPacketResponse)(nil),                   // 359: ypb.GenerateCSRFPocByPacketResponse
	(*GenerateYakCodeByPacketResponse)(nil),                   // 360: ypb.GenerateYakCodeByPacketResponse
	(*QueryReportRequest)(nil),                                // 361: ypb.QueryReportRequest
	(*DeleteReportRequest)(nil),                               // 362: ypb.DeleteReportRequest
	(*QueryReportsResponse)(nil),                              // 363: ypb.QueryReportsResponse
	(*QueryReportsRequest)(nil),                               // 364: ypb.QueryReportsRequest
	(*Report)(nil),                                            // 365: ypb.Report
	(*SetTagForHTTPFlowRequest)(nil),                          // 366: ypb.SetTagForHTTPFlowRequest
	(*CheckSetTagsHTTPFlow)(nil),                              // 367: ypb.CheckSetTagsHTTPFlow
	(*RequireICMPRandomLengthResponse)(nil),                   // 368: ypb.RequireICMPRandomLengthResponse
	(*RandomPortTriggerNotification)(nil),                     // 369: ypb.RandomPortTriggerNotification
	(*QueryRandomPortTriggerRequest)(nil),                     // 370: ypb.QueryRandomPortTriggerRequest
	(*RandomPortInfo)(nil),                                    // 371: ypb.RandomPortInfo
	(*DeleteHistoryHTTPFuzzerTaskRequest)(nil),                // 372: ypb.DeleteHistoryHTTPFuzzerTaskRequest
	(*RiskTableStats)(nil),                                    // 373: ypb.RiskTableStats
	(*MITMCert)(nil),                                          // 374: ypb.MITMCert
	(*FieldName)(nil),                                         // 375: ypb.FieldName
	(*Fields)(nil),                                            // 376: ypb.Fields
	(*YsoOption)(nil),                                         // 377: ypb.YsoOption
	(*YsoOptionsWithVerbose)(nil),                             // 378: ypb.YsoOptionsWithVerbose
	(*YsoOptions)(nil),                                        // 379: ypb.YsoOptions
	(*YsoClassGeneraterOptionsWithVerbose)(nil),               // 380: ypb.YsoClassGeneraterOptionsWithVerbose
	(*YsoClassOptionsResponseWithVerbose)(nil),                // 381: ypb.YsoClassOptionsResponseWithVerbose
	(*YsoClassGeneraterOptions)(nil),                          // 382: ypb.YsoClassGeneraterOptions
	(*YsoClassOptionsResponse)(nil),                           // 383: ypb.YsoClassOptionsResponse
	(*YsoOptionsRequerstWithVerbose)(nil),                     // 384: ypb.YsoOptionsRequerstWithVerbose
	(*YsoOptionsRequerst)(nil),                                // 385: ypb.YsoOptionsRequerst
	(*YsoBytesObject)(nil),                                    // 386: ypb.YsoBytesObject
	(*YsoDumpResponse)(nil),                                   // 387: ypb.YsoDumpResponse
	(*YsoCodeResponse)(nil),                                   // 388: ypb.YsoCodeResponse
	(*YsoBytesResponse)(nil),                                  // 389: ypb.YsoBytesResponse
	(*BytesToBase64Request)(nil),                              // 390: ypb.BytesToBase64Request
	(*BytesToBase64Response)(nil),                             // 391: ypb.BytesToBase64Response
	(*QueryICMPTriggerRequest)(nil),                           // 392: ypb.QueryICMPTriggerRequest
	(*QueryICMPTriggerResponse)(nil),                          // 393: ypb.QueryICMPTriggerResponse
	(*QuerySupportedDnsLogPlatformsResponse)(nil),             // 394: ypb.QuerySupportedDnsLogPlatformsResponse
	(*ICMPTriggerNotification)(nil),                           // 395: ypb.ICMPTriggerNotification
	(*GetHistoryHTTPFuzzerTaskRequest)(nil),                   // 396: ypb.GetHistoryHTTPFuzzerTaskRequest
	(*HistoryHTTPFuzzerTaskDetail)(nil),                       // 397: ypb.HistoryHTTPFuzzerTaskDetail
	(*HistoryHTTPFuzzerTask)(nil),                             // 398: ypb.HistoryHTTPFuzzerTask
	(*HistoryHTTPFuzzerTasks)(nil),                            // 399: ypb.HistoryHTTPFuzzerTasks
	(*HistoryHTTPFuzzerTasksResponse)(nil),                    // 400: ypb.HistoryHTTPFuzzerTasksResponse
	(*QueryHistoryHTTPFuzzerTaskExParams)(nil),                // 401: ypb.QueryHistoryHTTPFuzzerTaskExParams
	(*ExecutePacketYakScriptParams)(nil),                      // 402: ypb.ExecutePacketYakScriptParams
	(*ExecuteBatchPacketYakScriptParams)(nil),                 // 403: ypb.ExecuteBatchPacketYakScriptParams
	(*WebShell)(nil),                                          // 404: ypb.WebShell
	(*ShellGenerate)(nil),                                     // 405: ypb.ShellGenerate
	(*ShellOptions)(nil),                                      // 406: ypb.ShellOptions
	(*WebShellRequest)(nil),                                   // 407: ypb.WebShellRequest
	(*WebShellResponse)(nil),                                  // 408: ypb.WebShellResponse
	(*QueryWebShellsRequest)(nil),                             // 409: ypb.QueryWebShellsRequest
	(*QueryWebShellsResponse)(nil),                            // 410: ypb.QueryWebShellsResponse
	(*UpdateWebShellRequest)(nil),                             // 411: ypb.UpdateWebShellRequest
	(*DeleteWebShellRequest)(nil),                             // 412: ypb.DeleteWebShellRequest
	(*YakDNSLogBridgeAddr)(nil),                               // 413: ypb.YakDNSLogBridgeAddr
	(*RequireDNSLogDomainByScriptRequest)(nil),                // 414: ypb.RequireDNSLogDomainByScriptRequest
	(*QueryDNSLogByTokenRequest)(nil),                         // 415: ypb.QueryDNSLogByTokenRequest
	(*QueryDNSLogByTokenResponse)(nil),                        // 416: ypb.QueryDNSLogByTokenResponse
	(*DNSLogEvent)(nil),                                       // 417: ypb.DNSLogEvent
	(*DNSLogRootDomain)(nil),                                  // 418: ypb.DNSLogRootDomain
	(*GetGlobalReverseServerResponse)(nil),                    // 419: ypb.GetGlobalReverseServerResponse
	(*AvailableLocalAddrResponse)(nil),                        // 420: ypb.AvailableLocalAddrResponse
	(*NetInterface)(nil),                                      // 421: ypb.NetInterface
	(*ConfigGlobalReverseParams)(nil),                         // 422: ypb.ConfigGlobalReverseParams
	(*DeleteRiskRequest)(nil),                                 // 423: ypb.DeleteRiskRequest
	(*QueryRiskRequest)(nil),                                  // 424: ypb.QueryRiskRequest
	(*Risk)(nil),                                              // 425: ypb.Risk
	(*QueryRisksRequest)(nil),                                 // 426: ypb.QueryRisksRequest
	(*QueryRisksResponse)(nil),                                // 427: ypb.QueryRisksResponse
	(*QueryNewRiskRequest)(nil),                               // 428: ypb.QueryNewRiskRequest
	(*QueryNewRiskResponse)(nil),                              // 429: ypb.QueryNewRiskResponse
	(*QueryRiskTagsResponse)(nil),                             // 430: ypb.QueryRiskTagsResponse
	(*RiskFieldGroupResponse)(nil),                            // 431: ypb.RiskFieldGroupResponse
	(*FieldGroup)(nil),                                        // 432: ypb.FieldGroup
	(*NewRisk)(nil),                                           // 433: ypb.NewRisk
	(*NewRiskReadRequest)(nil),                                // 434: ypb.NewRiskReadRequest
	(*UploadRiskToOnlineRequest)(nil),                         // 435: ypb.UploadRiskToOnlineRequest
	(*SetTagForRiskRequest)(nil),                              // 436: ypb.SetTagForRiskRequest
	(*VerifyTunnelServerDomainParams)(nil),                    // 437: ypb.VerifyTunnelServerDomainParams
	(*VerifyTunnelServerDomainResponse)(nil),                  // 438: ypb.VerifyTunnelServerDomainResponse
	(*GetTunnelServerExternalIPParams)(nil),                   // 439: ypb.GetTunnelServerExternalIPParams
	(*GetTunnelServerExternalIPResponse)(nil),                 // 440: ypb.GetTunnelServerExternalIPResponse
	(*StartFacadesParams)(nil),                                // 441: ypb.StartFacadesParams
	(*ApplyClassToFacadesParamsWithVerbose)(nil),              // 442: ypb.ApplyClassToFacadesParamsWithVerbose
	(*ApplyClassToFacadesParams)(nil),                         // 443: ypb.ApplyClassToFacadesParams
	(*StartFacadesWithYsoParams)(nil),                         // 444: ypb.StartFacadesWithYsoParams
	(*Tree)(nil),                                              // 445: ypb.Tree
	(*GetAvailableBruteTypesResponse)(nil),                    // 446: ypb.GetAvailableBruteTypesResponse
	(*StartBruteParams)(nil),                                  // 447: ypb.StartBruteParams
	(*HTTPRequestMutateParams)(nil),                           // 448: ypb.HTTPRequestMutateParams
	(*HTTPResponseMutateParams)(nil),                          // 449: ypb.HTTPResponseMutateParams
	(*MutateResult)(nil),                                      // 450: ypb.MutateResult
	(*QueryHostsRequest)(nil),                                 // 451: ypb.QueryHostsRequest
	(*DeleteHostsRequest)(nil),                                // 452: ypb.DeleteHostsRequest
	(*QueryHostsResponse)(nil),                                // 453: ypb.QueryHostsResponse
	(*QueryDomainsRequest)(nil),                               // 454: ypb.QueryDomainsRequest
	(*DeleteDomainsRequest)(nil),                              // 455: ypb.DeleteDomainsRequest
	(*QueryDomainsResponse)(nil),                              // 456: ypb.QueryDomainsResponse
	(*Domain)(nil),                                            // 457: ypb.Domain
	(*QueryPortsGroupResponse)(nil),                           // 458: ypb.QueryPortsGroupResponse
	(*PortsGroup)(nil),                                        // 459: ypb.PortsGroup
	(*GroupList)(nil),                                         // 460: ypb.GroupList
	(*Host)(nil),                                              // 461: ypb.Host
	(*DownloadReportRequest)(nil),                             // 462: ypb.DownloadReportRequest
	(*DeleteYakScriptExecResultRequest)(nil),                  // 463: ypb.DeleteYakScriptExecResultRequest
	(*YakScriptNames)(nil),                                    // 464: ypb.YakScriptNames
	(*QueryYakScriptExecResultRequest)(nil),                   // 465: ypb.QueryYakScriptExecResultRequest
	(*QueryYakScriptExecResultResponse)(nil),                  // 466: ypb.QueryYakScriptExecResultResponse
	(*GenerateWebsiteTreeResponse)(nil),                       // 467: ypb.GenerateWebsiteTreeResponse
	(*GenerateWebsiteTreeRequest)(nil),                        // 468: ypb.GenerateWebsiteTreeRequest
	(*StartBasicCrawlerRequest)(nil),                          // 469: ypb.StartBasicCrawlerRequest
	(*HTTPCookieSetting)(nil),                                 // 470: ypb.HTTPCookieSetting
	(*HTTPCookie)(nil),                                        // 471: ypb.HTTPCookie
	(*ExportYakScriptRequest)(nil),                            // 472: ypb.ExportYakScriptRequest
	(*ExportYakScriptStreamRequest)(nil),                      // 473: ypb.ExportYakScriptStreamRequest
	(*ImportYakScriptStreamRequest)(nil),                      // 474: ypb.ImportYakScriptStreamRequest
	(*ExportYakScriptResponse)(nil),                           // 475: ypb.ExportYakScriptResponse
	(*GetMarkdownDocumentResponse)(nil),                       // 476: ypb.GetMarkdownDocumentResponse
	(*GetMarkdownDocumentRequest)(nil),                        // 477: ypb.GetMarkdownDocumentRequest
	(*SaveMarkdownDocumentRequest)(nil),                       // 478: ypb.SaveMarkdownDocumentRequest
	(*GroupNames)(nil),                                        // 479: ypb.GroupNames
	(*QueryGroupsByYakScriptIdRequest)(nil),                   // 480: ypb.QueryGroupsByYakScriptIdRequest
	(*MenuItem)(nil),                                          // 481: ypb.MenuItem
	(*BatchExecutionPluginFilter)(nil),                        // 482: ypb.BatchExecutionPluginFilter
	(*MenuItemGroup)(nil),                                     // 483: ypb.MenuItemGroup
	(*GetMenuItemByIdRequest)(nil),                            // 484: ypb.GetMenuItemByIdRequest
	(*MenuByGroup)(nil),                                       // 485: ypb.MenuByGroup
	(*YakScriptIsInMenuRequest)(nil),                          // 486: ypb.YakScriptIsInMenuRequest
	(*RemoveFromMenuRequest)(nil),                             // 487: ypb.RemoveFromMenuRequest
	(*AddToMenuRequest)(nil),                                  // 488: ypb.AddToMenuRequest
	(*AddMenuRequest)(nil),                                    // 489: ypb.AddMenuRequest
	(*QueryAllMenuItemRequest)(nil),                           // 490: ypb.QueryAllMenuItemRequest
	(*ImportMenuItemRequest)(nil),                             // 491: ypb.ImportMenuItemRequest
	(*ExportMenuItemResult)(nil),                              // 492: ypb.ExportMenuItemResult
	(*AddToNavigationRequest)(nil),                            // 493: ypb.AddToNavigationRequest
	(*NavigationList)(nil),                                    // 494: ypb.NavigationList
	(*NavigationItem)(nil),                                    // 495: ypb.NavigationItem
	(*GetAllNavigationRequest)(nil),                           // 496: ypb.GetAllNavigationRequest
	(*GetAllNavigationItemResponse)(nil),                      // 497: ypb.GetAllNavigationItemResponse
	(*AddOneNavigationRequest)(nil),                           // 498: ypb.AddOneNavigationRequest
	(*QueryNavigationGroupsRequest)(nil),                      // 499: ypb.QueryNavigationGroupsRequest
	(*UpdateFromYakitResourceRequest)(nil),                    // 500: ypb.UpdateFromYakitResourceRequest
	(*UpdateFromGithubRequest)(nil),                           // 501: ypb.UpdateFromGithubRequest
	(*SimpleScript)(nil),                                      // 502: ypb.SimpleScript
	(*LastRecord)(nil),                                        // 503: ypb.LastRecord
	(*RecordPortScanRequest)(nil),                             // 504: ypb.RecordPortScanRequest
	(*CreatReportRequest)(nil),                                // 505: ypb.CreatReportRequest
	(*PortScanRequest)(nil),                                   // 506: ypb.PortScanRequest
	(*DeletePortsRequest)(nil),                                // 507: ypb.DeletePortsRequest
	(*QueryPortsRequest)(nil),                                 // 508: ypb.QueryPortsRequest
	(*QueryPortsResponse)(nil),                                // 509: ypb.QueryPortsResponse
	(*Port)(nil),                                              // 510: ypb.Port
	(*YakitCompletionRawResponse)(nil),                        // 511: ypb.YakitCompletionRawResponse
	(*GetYakVMBuildInMethodCompletionRequest)(nil),            // 512: ypb.GetYakVMBuildInMethodCompletionRequest
	(*SuggestionDescription)(nil),                             // 513: ypb.SuggestionDescription
	(*MethodSuggestion)(nil),                                  // 514: ypb.MethodSuggestion
	(*GetYakVMBuildInMethodCompletionResponse)(nil),           // 515: ypb.GetYakVMBuildInMethodCompletionResponse
	(*RenameRequest)(nil),                                     // 516: ypb.RenameRequest
	(*NameRequest)(nil),                                       // 517: ypb.NameRequest
	(*PayloadGroupNode)(nil),                                  // 518: ypb.PayloadGroupNode
	(*GetAllPayloadGroupResponse)(nil),                        // 519: ypb.GetAllPayloadGroupResponse
	(*UpdateAllPayloadGroupRequest)(nil),                      // 520: ypb.UpdateAllPayloadGroupRequest
	(*SavePayloadRequest)(nil),                                // 521: ypb.SavePayloadRequest
	(*UpdatePayloadRequest)(nil),                              // 522: ypb.UpdatePayloadRequest
	(*UpdatePayloadToFileRequest)(nil),                        // 523: ypb.UpdatePayloadToFileRequest
	(*BackUpOrCopyPayloadsRequest)(nil),                       // 524: ypb.BackUpOrCopyPayloadsRequest
	(*DeletePayloadByGroupRequest)(nil),                       // 525: ypb.DeletePayloadByGroupRequest
	(*DeletePayloadRequest)(nil),                              // 526: ypb.DeletePayloadRequest
	(*QueryPayloadFromFileRequest)(nil),                       // 527: ypb.QueryPayloadFromFileRequest
	(*QueryPayloadFromFileResponse)(nil),                      // 528: ypb.QueryPayloadFromFileResponse
	(*QueryPayloadRequest)(nil),                               // 529: ypb.QueryPayloadRequest
	(*QueryPayloadResponse)(nil),                              // 530: ypb.QueryPayloadResponse
	(*Payload)(nil),                                           // 531: ypb.Payload
	(*GetAllPayloadRequest)(nil),                              // 532: ypb.GetAllPayloadRequest
	(*GetAllPayloadResponse)(nil),                             // 533: ypb.GetAllPayloadResponse
	(*GetAllPayloadFromFileResponse)(nil),                     // 534: ypb.GetAllPayloadFromFileResponse
	(*QueryYakScriptRequest)(nil),                             // 535: ypb.QueryYakScriptRequest
	(*PluginGroup)(nil),                                       // 536: ypb.PluginGroup
	(*QueryYakScriptResponse)(nil),                            // 537: ypb.QueryYakScriptResponse
	(*YakScriptParam)(nil),                                    // 538: ypb.YakScriptParam
	(*YakScript)(nil),                                         // 539: ypb.YakScript
	(*Collaborator)(nil),                                      // 540: ypb.Collaborator
	(*SaveNewYakScriptRequest)(nil),                           // 541: ypb.SaveNewYakScriptRequest
	(*SaveYakScriptToOnlineRequest)(nil),                      // 542: ypb.SaveYakScriptToOnlineRequest
	(*SaveYakScriptToOnlineResponse)(nil),                     // 543: ypb.SaveYakScriptToOnlineResponse
	(*ToOnlineResult)(nil),                                    // 544: ypb.ToOnlineResult
	(*ExportLocalYakScriptRequest)(nil),                       // 545: ypb.ExportLocalYakScriptRequest
	(*ExportLocalYakScriptResponse)(nil),                      // 546: ypb.ExportLocalYakScriptResponse
	(*ExportYakScriptLocalResponse)(nil),                      // 547: ypb.ExportYakScriptLocalResponse
	(*ImportYakScriptRequest)(nil),                            // 548: ypb.ImportYakScriptRequest
	(*ImportYakScriptResult)(nil),                             // 549: ypb.ImportYakScriptResult
	(*SetYakScriptSkipUpdateRequest)(nil),                     // 550: ypb.SetYakScriptSkipUpdateRequest
	(*QueryYakScriptSkipUpdateResponse)(nil),                  // 551: ypb.QueryYakScriptSkipUpdateResponse
	(*QueryYakScriptGroupRequest)(nil),                        // 552: ypb.QueryYakScriptGroupRequest
	(*QueryYakScriptGroupResponse)(nil),                       // 553: ypb.QueryYakScriptGroupResponse
	(*GroupCount)(nil),                                        // 554: ypb.GroupCount
	(*SaveYakScriptGroupRequest)(nil),                         // 555: ypb.SaveYakScriptGroupRequest
	(*RenameYakScriptGroupRequest)(nil),                       // 556: ypb.RenameYakScriptGroupRequest
	(*DeleteYakScriptGroupRequest)(nil),                       // 557: ypb.DeleteYakScriptGroupRequest
	(*GetYakScriptGroupResponse)(nil),                         // 558: ypb.GetYakScriptGroupResponse
	(*ResetYakScriptGroupRequest)(nil),                        // 559: ypb.ResetYakScriptGroupRequest
	(*SetGroupRequest)(nil),                                   // 560: ypb.SetGroupRequest
	(*GetYakScriptTagsAndTypeResponse)(nil),                   // 561: ypb.GetYakScriptTagsAndTypeResponse
	(*TagsAndType)(nil),                                       // 562: ypb.TagsAndType
	(*SnippetsFilter)(nil),                                    // 563: ypb.SnippetsFilter
	(*SnippetsRequest)(nil),                                   // 564: ypb.SnippetsRequest
	(*EditSnippetsRequest)(nil),                               // 565: ypb.EditSnippetsRequest
	(*QuerySnippetsRequest)(nil),                              // 566: ypb.QuerySnippetsRequest
	(*SnippetsResponse)(nil),                                  // 567: ypb.SnippetsResponse
	(*CodecRequest)(nil),                                      // 568: ypb.CodecRequest
	(*CodecWork)(nil),                                         // 569: ypb.CodecWork
	(*CodecRequestFlow)(nil),                                  // 570: ypb.CodecRequestFlow
	(*CustomizeCodecFlow)(nil),                                // 571: ypb.CustomizeCodecFlow
	(*UpdateCodecFlowRequest)(nil),                            // 572: ypb.UpdateCodecFlowRequest
	(*DeleteCodecFlowRequest)(nil),                            // 573: ypb.DeleteCodecFlowRequest
	(*GetCodecFlowResponse)(nil),                              // 574: ypb.GetCodecFlowResponse
	(*CodecResponse)(nil),                                     // 575: ypb.CodecResponse
	(*CodecMethods)(nil),                                      // 576: ypb.CodecMethods
	(*CodecMethod)(nil),                                       // 577: ypb.CodecMethod
	(*CodecParam)(nil),                                        // 578: ypb.CodecParam
	(*ExecHistoryRequest)(nil),                                // 579: ypb.ExecHistoryRequest
	(*ExecHistoryRecordResponse)(nil),                         // 580: ypb.ExecHistoryRecordResponse
	(*ExecHistoryRecord)(nil),                                 // 581: ypb.ExecHistoryRecord
	(*StringFuzzerRequest)(nil),                               // 582: ypb.StringFuzzerRequest
	(*StringFuzzerResponse)(nil),                              // 583: ypb.StringFuzzerResponse
	(*HTTPRequestAnalysisMaterial)(nil),                       // 584: ypb.HTTPRequestAnalysisMaterial
	(*HTTPRequestParamItem)(nil),                              // 585: ypb.HTTPRequestParamItem
	(*HTTPRequestAnalysis)(nil),                               // 586: ypb.HTTPRequestAnalysis
	(*HTTPResponseMatcher)(nil),                               // 587: ypb.HTTPResponseMatcher
	(*RenderVariablesRequest)(nil),                            // 588: ypb.RenderVariablesRequest
	(*RenderVariablesResponse)(nil),                           // 589: ypb.RenderVariablesResponse
	(*MatchHTTPResponseParams)(nil),                           // 590: ypb.MatchHTTPResponseParams
	(*MatchHTTPResponseResult)(nil),                           // 591: ypb.MatchHTTPResponseResult
	(*HTTPResponseExtractor)(nil),                             // 592: ypb.HTTPResponseExtractor
	(*ExtractHTTPResponseResult)(nil),                         // 593: ypb.ExtractHTTPResponseResult
	(*ExtractHTTPResponseParams)(nil),                         // 594: ypb.ExtractHTTPResponseParams
	(*PreloadHTTPFuzzerParamsRequest)(nil),                    // 595: ypb.PreloadHTTPFuzzerParamsRequest
	(*PreloadHTTPFuzzerParamsResponse)(nil),                   // 596: ypb.PreloadHTTPFuzzerParamsResponse
	(*FuzzerParamItem)(nil),                                   // 597: ypb.FuzzerParamItem
	(*FuzzerRequests)(nil),                                    // 598: ypb.FuzzerRequests
	(*FuzzerRequest)(nil),                                     // 599: ypb.FuzzerRequest
	(*MutateMethod)(nil),                                      // 600: ypb.MutateMethod
	(*KVPair)(nil),                                            // 601: ypb.KVPair
	(*FuzzerResponseFilter)(nil),                              // 602: ypb.FuzzerResponseFilter
	(*RedirectRequestParams)(nil),                             // 603: ypb.RedirectRequestParams
	(*ExtractedUrl)(nil),                                      // 604: ypb.ExtractedUrl
	(*FuzzerSequenceResponse)(nil),                            // 605: ypb.FuzzerSequenceResponse
	(*FuzzerResponse)(nil),                                    // 606: ypb.FuzzerResponse
	(*RandomChunkedResponse)(nil),                             // 607: ypb.RandomChunkedResponse
	(*RedirectHTTPFlow)(nil),                                  // 608: ypb.RedirectHTTPFlow
	(*Paging)(nil),                                            // 609: ypb.Paging
	(*GetHTTPFlowByHashRequest)(nil),                          // 610: ypb.GetHTTPFlowByHashRequest
	(*GetHTTPFlowByIdRequest)(nil),                            // 611: ypb.GetHTTPFlowByIdRequest
	(*GetHTTPFlowByIdsRequest)(nil),                           // 612: ypb.GetHTTPFlowByIdsRequest
	(*GetHTTPFlowBodyByIdRequest)(nil),                        // 613: ypb.GetHTTPFlowBodyByIdRequest
	(*QueryHTTPFlowRequest)(nil),                              // 614: ypb.QueryHTTPFlowRequest
	(*HTTPFlowsToOnlineRequest)(nil),                          // 615: ypb.HTTPFlowsToOnlineRequest
	(*HTTPFlowsToOnlineBatchRequest)(nil),                     // 616: ypb.HTTPFlowsToOnlineBatchRequest
	(*HTTPFlowsToOnlineBatchResponse)(nil),                    // 617: ypb.HTTPFlowsToOnlineBatchResponse
	(*AnalyzeHTTPFlowRequest)(nil),                            // 618: ypb.AnalyzeHTTPFlowRequest
	(*AnalyzedDataSource)(nil),                                // 619: ypb.AnalyzedDataSource
	(*AnalyzeHTTPFlowConfig)(nil),                             // 620: ypb.AnalyzeHTTPFlowConfig
	(*AnalyzeHTTPFlowResponse)(nil),                           // 621: ypb.AnalyzeHTTPFlowResponse
	(*AnalyzedHTTPFlowFilter)(nil),                            // 622: ypb.AnalyzedHTTPFlowFilter
	(*HTTPFlowRuleData)(nil),                                  // 623: ypb.HTTPFlowRuleData
	(*ExportHTTPFlowsRequest)(nil),                            // 624: ypb.ExportHTTPFlowsRequest
	(*QueryHTTPFlowsProcessNamesResponse)(nil),                // 625: ypb.QueryHTTPFlowsProcessNamesResponse
	(*DeleteHTTPFlowRequest)(nil),                             // 626: ypb.DeleteHTTPFlowRequest
	(*QueryHTTPFlowsIdsRequest)(nil),                          // 627: ypb.QueryHTTPFlowsIdsRequest
	(*QueryHTTPFlowsIdsResponse)(nil),                         // 628: ypb.QueryHTTPFlowsIdsResponse
	(*HTTPHeader)(nil),                                        // 629: ypb.HTTPHeader
	(*HTTPFlows)(nil),                                         // 630: ypb.HTTPFlows
	(*HTTPFlow)(nil),                                          // 631: ypb.HTTPFlow
	(*FuzzableParam)(nil),                                     // 632: ypb.FuzzableParam
	(*GetHTTPFlowBodyByIdResponse)(nil),                       // 633: ypb.GetHTTPFlowBodyByIdResponse
	(*QueryHTTPFlowResponse)(nil),                             // 634: ypb.QueryHTTPFlowResponse
	(*HTTPFlowsFieldGroupRequest)(nil),                        // 635: ypb.HTTPFlowsFieldGroupRequest
	(*HTTPFlowsFieldGroupResponse)(nil),                       // 636: ypb.HTTPFlowsFieldGroupResponse
	(*HTTPFlowsShareRequest)(nil),                             // 637: ypb.HTTPFlowsShareRequest
	(*HTTPFlowsShareResponse)(nil),                            // 638: ypb.HTTPFlowsShareResponse
	(*HTTPFlowsExtractRequest)(nil),                           // 639: ypb.HTTPFlowsExtractRequest
	(*TagsCode)(nil),                                          // 640: ypb.TagsCode
	(*WebsocketFlows)(nil),                                    // 641: ypb.WebsocketFlows
	(*WebsocketFlow)(nil),                                     // 642: ypb.WebsocketFlow
	(*SetMITMFilterRequest)(nil),                              // 643: ypb.SetMITMFilterRequest
	(*SetMITMFilterResponse)(nil),                             // 644: ypb.SetMITMFilterResponse
	(*MITMRequest)(nil),                                       // 645: ypb.MITMRequest
	(*FilterDataItem)(nil),                                    // 646: ypb.FilterDataItem
	(*MITMFilterData)(nil),                                    // 647: ypb.MITMFilterData
	(*Certificate)(nil),                                       // 648: ypb.Certificate
	(*MITMContentReplacer)(nil),                               // 649: ypb.MITMContentReplacer
	(*RemoveHookParams)(nil),                                  // 650: ypb.RemoveHookParams
	(*MITMResponse)(nil),                                      // 651: ypb.MITMResponse
	(*TraceInfo)(nil),                                         // 652: ypb.TraceInfo
	(*YakScriptHooks)(nil),                                    // 653: ypb.YakScriptHooks
	(*YakScriptHookItem)(nil),                                 // 654: ypb.YakScriptHookItem
	(*EchoRequest)(nil),                                       // 655: ypb.EchoRequest
	(*EchoResposne)(nil),                                      // 656: ypb.EchoResposne
	(*HandshakeRequest)(nil),                                  // 657: ypb.HandshakeRequest
	(*HandshakeResponse)(nil),                                 // 658: ypb.HandshakeResponse
	(*Input)(nil),                                             // 659: ypb.Input
	(*Output)(nil),                                            // 660: ypb.Output
	(*ExecParamItem)(nil),                                     // 661: ypb.ExecParamItem
	(*ExecRequest)(nil),                                       // 662: ypb.ExecRequest
	(*ExecResult)(nil),                                        // 663: ypb.ExecResult
	(*GetLicenseResponse)(nil),                                // 664: ypb.GetLicenseResponse
	(*CheckLicenseRequest)(nil),                               // 665: ypb.CheckLicenseRequest
	(*DefaultDnsServerResponse)(nil),                          // 666: ypb.DefaultDnsServerResponse
	(*HTTPFlowBareRequest)(nil),                               // 667: ypb.HTTPFlowBareRequest
	(*HTTPFlowBareResponse)(nil),                              // 668: ypb.HTTPFlowBareResponse
	(*ImportHTTPFuzzerTaskFromYamlRequest)(nil),               // 669: ypb.ImportHTTPFuzzerTaskFromYamlRequest
	(*ImportHTTPFuzzerTaskFromYamlResponse)(nil),              // 670: ypb.ImportHTTPFuzzerTaskFromYamlResponse
	(*ExportHTTPFuzzerTaskToYamlRequest)(nil),                 // 671: ypb.ExportHTTPFuzzerTaskToYamlRequest
	(*ExportHTTPFuzzerTaskToYamlResponse)(nil),                // 672: ypb.ExportHTTPFuzzerTaskToYamlResponse
	(*RenderHTTPFuzzerPacketRequest)(nil),                     // 673: ypb.RenderHTTPFuzzerPacketRequest
	(*RenderHTTPFuzzerPacketResponse)(nil),                    // 674: ypb.RenderHTTPFuzzerPacketResponse
	(*SmokingEvaluatePluginBatchRequest)(nil),                 // 675: ypb.SmokingEvaluatePluginBatchRequest
	(*SmokingEvaluatePluginBatchResponse)(nil),                // 676: ypb.SmokingEvaluatePluginBatchResponse
	(*GenerateURLRequest)(nil),                                // 677: ypb.GenerateURLRequest
	(*GenerateURLResponse)(nil),                               // 678: ypb.GenerateURLResponse
	(*YakVersionAtLeastRequest)(nil),                          // 679: ypb.YakVersionAtLeastRequest
	(*ParseTrafficRequest)(nil),                               // 680: ypb.ParseTrafficRequest
	(*ParseTrafficResponse)(nil),                              // 681: ypb.ParseTrafficResponse
	(*TraceRouteRequest)(nil),                                 // 682: ypb.TraceRouteRequest
	(*TraceRouteResponse)(nil),                                // 683: ypb.TraceRouteResponse
	(*EvaluateExpressionRequest)(nil),                         // 684: ypb.EvaluateExpressionRequest
	(*EvaluateExpressionResponse)(nil),                        // 685: ypb.EvaluateExpressionResponse
	(*EvaluateMultiExpressionRequest)(nil),                    // 686: ypb.EvaluateMultiExpressionRequest
	(*EvaluateMultiExpressionResponse)(nil),                   // 687: ypb.EvaluateMultiExpressionResponse
	(*ThirdPartyAppConfigItemTemplate)(nil),                   // 688: ypb.ThirdPartyAppConfigItemTemplate
	(*GetThirdPartyAppConfigTemplate)(nil),                    // 689: ypb.GetThirdPartyAppConfigTemplate
	(*GetThirdPartyAppConfigTemplateResponse)(nil),            // 690: ypb.GetThirdPartyAppConfigTemplateResponse
	(*GetFingerprintRequest)(nil),                             // 691: ypb.GetFingerprintRequest
	(*GetFingerprintResponse)(nil),                            // 692: ypb.GetFingerprintResponse
	(*AddFingerprintRequest)(nil),                             // 693: ypb.AddFingerprintRequest
	(*AddFingerprintResponse)(nil),                            // 694: ypb.AddFingerprintResponse
	(*ModifyFingerprintRequest)(nil),                          // 695: ypb.ModifyFingerprintRequest
	(*ModifyFingerprintResponse)(nil),                         // 696: ypb.ModifyFingerprintResponse
	(*ReadFileRequest)(nil),                                   // 697: ypb.ReadFileRequest
	(*ReadFileResponse)(nil),                                  // 698: ypb.ReadFileResponse
	(*GetReverseShellProgramListRequest)(nil),                 // 699: ypb.GetReverseShellProgramListRequest
	(*GetReverseShellProgramListResponse)(nil),                // 700: ypb.GetReverseShellProgramListResponse
	(*GenerateReverseShellCommandRequest)(nil),                // 701: ypb.GenerateReverseShellCommandRequest
	(*GenerateReverseShellCommandResponse)(nil),               // 702: ypb.GenerateReverseShellCommandResponse
	(*DbOperateMessage)(nil),                                  // 703: ypb.DbOperateMessage
	(*CPE)(nil),                                               // 704: ypb.CPE
	(*FingerprintRule)(nil),                                   // 705: ypb.FingerprintRule
	(*FingerprintFilter)(nil),                                 // 706: ypb.FingerprintFilter
	(*QueryFingerprintRequest)(nil),                           // 707: ypb.QueryFingerprintRequest
	(*QueryFingerprintResponse)(nil),                          // 708: ypb.QueryFingerprintResponse
	(*DeleteFingerprintRequest)(nil),                          // 709: ypb.DeleteFingerprintRequest
	(*CreateFingerprintRequest)(nil),                          // 710: ypb.CreateFingerprintRequest
	(*UpdateFingerprintRequest)(nil),                          // 711: ypb.UpdateFingerprintRequest
	(*FingerprintGroup)(nil),                                  // 712: ypb.FingerprintGroup
	(*FingerprintGroups)(nil),                                 // 713: ypb.FingerprintGroups
	(*RenameFingerprintGroupRequest)(nil),                     // 714: ypb.RenameFingerprintGroupRequest
	(*DeleteFingerprintGroupRequest)(nil),                     // 715: ypb.DeleteFingerprintGroupRequest
	(*BatchUpdateFingerprintToGroupRequest)(nil),              // 716: ypb.BatchUpdateFingerprintToGroupRequest
	(*GetFingerprintGroupSetRequest)(nil),                     // 717: ypb.GetFingerprintGroupSetRequest
	(*ExportFingerprintRequest)(nil),                          // 718: ypb.ExportFingerprintRequest
	(*ImportFingerprintRequest)(nil),                          // 719: ypb.ImportFingerprintRequest
	(*DataTransferProgress)(nil),                              // 720: ypb.DataTransferProgress
	(*QuerySyntaxFlowRuleRequest)(nil),                        // 721: ypb.QuerySyntaxFlowRuleRequest
	(*SyntaxFlowRule)(nil),                                    // 722: ypb.SyntaxFlowRule
	(*AlertMessage)(nil),                                      // 723: ypb.AlertMessage
	(*SyntaxFlowRuleInput)(nil),                               // 724: ypb.SyntaxFlowRuleInput
	(*SyntaxFlowRuleFilter)(nil),                              // 725: ypb.SyntaxFlowRuleFilter
	(*SSAProgram)(nil),                                        // 726: ypb.SSAProgram
	(*SSARiskDiffItem)(nil),                                   // 727: ypb.SSARiskDiffItem
	(*SSARiskDiffRequest)(nil),                                // 728: ypb.SSARiskDiffRequest
	(*SSARiskDiffResponse)(nil),                               // 729: ypb.SSARiskDiffResponse
	(*SSAProgramInput)(nil),                                   // 730: ypb.SSAProgramInput
	(*SSAProgramFilter)(nil),                                  // 731: ypb.SSAProgramFilter
	(*QuerySSAProgramRequest)(nil),                            // 732: ypb.QuerySSAProgramRequest
	(*UpdateSSAProgramRequest)(nil),                           // 733: ypb.UpdateSSAProgramRequest
	(*DeleteSSAProgramRequest)(nil),                           // 734: ypb.DeleteSSAProgramRequest
	(*QuerySSAProgramResponse)(nil),                           // 735: ypb.QuerySSAProgramResponse
	(*CreateSyntaxFlowRuleRequest)(nil),                       // 736: ypb.CreateSyntaxFlowRuleRequest
	(*CreateSyntaxFlowRuleResponse)(nil),                      // 737: ypb.CreateSyntaxFlowRuleResponse
	(*UpdateSyntaxFlowRuleRequest)(nil),                       // 738: ypb.UpdateSyntaxFlowRuleRequest
	(*UpdateSyntaxFlowRuleResponse)(nil),                      // 739: ypb.UpdateSyntaxFlowRuleResponse
	(*QuerySyntaxFlowRuleResponse)(nil),                       // 740: ypb.QuerySyntaxFlowRuleResponse
	(*DeleteSyntaxFlowRuleRequest)(nil),                       // 741: ypb.DeleteSyntaxFlowRuleRequest
	(*CheckSyntaxFlowRuleUpdateRequest)(nil),                  // 742: ypb.CheckSyntaxFlowRuleUpdateRequest
	(*CheckSyntaxFlowRuleUpdateResponse)(nil),                 // 743: ypb.CheckSyntaxFlowRuleUpdateResponse
	(*ApplySyntaxFlowRuleUpdateRequest)(nil),                  // 744: ypb.ApplySyntaxFlowRuleUpdateRequest
	(*ApplySyntaxFlowRuleUpdateResponse)(nil),                 // 745: ypb.ApplySyntaxFlowRuleUpdateResponse
	(*SyntaxFlowRuleGroupFilter)(nil),                         // 746: ypb.SyntaxFlowRuleGroupFilter
	(*SyntaxFlowGroup)(nil),                                   // 747: ypb.SyntaxFlowGroup
	(*QuerySyntaxFlowRuleGroupRequest)(nil),                   // 748: ypb.QuerySyntaxFlowRuleGroupRequest
	(*QuerySyntaxFlowRuleGroupResponse)(nil),                  // 749: ypb.QuerySyntaxFlowRuleGroupResponse
	(*CreateSyntaxFlowGroupRequest)(nil),                      // 750: ypb.CreateSyntaxFlowGroupRequest
	(*UpdateSyntaxFlowRuleGroupRequest)(nil),                  // 751: ypb.UpdateSyntaxFlowRuleGroupRequest
	(*UpdateSyntaxFlowRuleAndGroupRequest)(nil),               // 752: ypb.UpdateSyntaxFlowRuleAndGroupRequest
	(*QuerySyntaxFlowSameGroupRequest)(nil),                   // 753: ypb.QuerySyntaxFlowSameGroupRequest
	(*QuerySyntaxFlowSameGroupResponse)(nil),                  // 754: ypb.QuerySyntaxFlowSameGroupResponse
	(*DeleteSyntaxFlowRuleGroupRequest)(nil),                  // 755: ypb.DeleteSyntaxFlowRuleGroupRequest
	(*SyntaxFlowRuleToOnlineRequest)(nil),                     // 756: ypb.SyntaxFlowRuleToOnlineRequest
	(*SyntaxFlowRuleOnlineProgress)(nil),                      // 757: ypb.SyntaxFlowRuleOnlineProgress
	(*DownloadSyntaxFlowRuleRequest)(nil),                     // 758: ypb.DownloadSyntaxFlowRuleRequest
	(*SyntaxFlowScanRequest)(nil),                             // 759: ypb.SyntaxFlowScanRequest
	(*QuerySyntaxFlowScanTaskRequest)(nil),                    // 760: ypb.QuerySyntaxFlowScanTaskRequest
	(*SyntaxFlowScanTaskFilter)(nil),                          // 761: ypb.SyntaxFlowScanTaskFilter
	(*QuerySyntaxFlowScanTaskResponse)(nil),                   // 762: ypb.QuerySyntaxFlowScanTaskResponse
	(*SyntaxFlowScanTask)(nil),                                // 763: ypb.SyntaxFlowScanTask
	(*DeleteSyntaxFlowScanTaskRequest)(nil),                   // 764: ypb.DeleteSyntaxFlowScanTaskRequest
	(*SyntaxFlowScanResponse)(nil),                            // 765: ypb.SyntaxFlowScanResponse
	(*SyntaxFlowResultFilter)(nil),                            // 766: ypb.SyntaxFlowResultFilter
	(*QuerySyntaxFlowResultRequest)(nil),                      // 767: ypb.QuerySyntaxFlowResultRequest
	(*QuerySyntaxFlowResultResponse)(nil),                     // 768: ypb.QuerySyntaxFlowResultResponse
	(*SyntaxFlowResult)(nil),                                  // 769: ypb.SyntaxFlowResult
	(*DeleteSyntaxFlowResultRequest)(nil),                     // 770: ypb.DeleteSyntaxFlowResultRequest
	(*DeleteSyntaxFlowResultResponse)(nil),                    // 771: ypb.DeleteSyntaxFlowResultResponse
	(*QueryPluginEnvRequest)(nil),                             // 772: ypb.QueryPluginEnvRequest
	(*PluginEnvData)(nil),                                     // 773: ypb.PluginEnvData
	(*DeletePluginEnvRequest)(nil),                            // 774: ypb.DeletePluginEnvRequest
	(*GetAllFuzztagInfoRequest)(nil),                          // 775: ypb.GetAllFuzztagInfoRequest
	(*GetAllFuzztagInfoResponse)(nil),                         // 776: ypb.GetAllFuzztagInfoResponse
	(*FuzztagArgumentType)(nil),                               // 777: ypb.FuzztagArgumentType
	(*FuzztagInfo)(nil),                                       // 778: ypb.FuzztagInfo
	(*GenerateFuzztagRequest)(nil),                            // 779: ypb.GenerateFuzztagRequest
	(*GenerateFuzztagResponse)(nil),                           // 780: ypb.GenerateFuzztagResponse
	(*FuzzTagSuggestionRequest)(nil),                          // 781: ypb.FuzzTagSuggestionRequest
	(*SSARisk)(nil),                                           // 782: ypb.SSARisk
	(*SSARisksFilter)(nil),                                    // 783: ypb.SSARisksFilter
	(*QuerySSARisksRequest)(nil),                              // 784: ypb.QuerySSARisksRequest
	(*QuerySSARisksResponse)(nil),                             // 785: ypb.QuerySSARisksResponse
	(*QueryNewSSARisksRequest)(nil),                           // 786: ypb.QueryNewSSARisksRequest
	(*QueryNewSSARisksResponse)(nil),                          // 787: ypb.QueryNewSSARisksResponse
	(*DeleteSSARisksRequest)(nil),                             // 788: ypb.DeleteSSARisksRequest
	(*UpdateSSARiskTagsRequest)(nil),                          // 789: ypb.UpdateSSARiskTagsRequest
	(*SSARiskFieldGroupResponse)(nil),                         // 790: ypb.SSARiskFieldGroupResponse
	(*NewSSARiskReadRequest)(nil),                             // 791: ypb.NewSSARiskReadRequest
	(*NewSSARiskReadResponse)(nil),                            // 792: ypb.NewSSARiskReadResponse
	(*SSARiskFeedbackToOnlineRequest)(nil),                    // 793: ypb.SSARiskFeedbackToOnlineRequest
	(*SSARiskDisposalData)(nil),                               // 794: ypb.SSARiskDisposalData
	(*SSARiskDisposalsFilter)(nil),                            // 795: ypb.SSARiskDisposalsFilter
	(*CreateSSARiskDisposalsRequest)(nil),                     // 796: ypb.CreateSSARiskDisposalsRequest
	(*CreateSSARiskDisposalsResponse)(nil),                    // 797: ypb.CreateSSARiskDisposalsResponse
	(*QuerySSARiskDisposalsRequest)(nil),                      // 798: ypb.QuerySSARiskDisposalsRequest
	(*QuerySSARiskDisposalsResponse)(nil),                     // 799: ypb.QuerySSARiskDisposalsResponse
	(*UpdateSSARiskDisposalsRequest)(nil),                     // 800: ypb.UpdateSSARiskDisposalsRequest
	(*UpdateSSARiskDisposalsResponse)(nil),                    // 801: ypb.UpdateSSARiskDisposalsResponse
	(*DeleteSSARiskDisposalsRequest)(nil),                     // 802: ypb.DeleteSSARiskDisposalsRequest
	(*DeleteSSARiskDisposalsResponse)(nil),                    // 803: ypb.DeleteSSARiskDisposalsResponse
	(*GetSSARiskDisposalRequest)(nil),                         // 804: ypb.GetSSARiskDisposalRequest
	(*GetSSARiskDisposalResponse)(nil),                        // 805: ypb.GetSSARiskDisposalResponse
	(*ExportSyntaxFlowsRequest)(nil),                          // 806: ypb.ExportSyntaxFlowsRequest
	(*ImportSyntaxFlowsRequest)(nil),                          // 807: ypb.ImportSyntaxFlowsRequest
	(*SyntaxflowsProgress)(nil),                               // 808: ypb.SyntaxflowsProgress
	(*HotPatchTemplate)(nil),                                  // 809: ypb.HotPatchTemplate
	(*HotPatchTemplateRequest)(nil),                           // 810: ypb.HotPatchTemplateRequest
	(*UpdateHotPatchTemplateRequest)(nil),                     // 811: ypb.UpdateHotPatchTemplateRequest
	(*DeleteHotPatchTemplateRequest)(nil),                     // 812: ypb.DeleteHotPatchTemplateRequest
	(*CreateHotPatchTemplateResponse)(nil),                    // 813: ypb.CreateHotPatchTemplateResponse
	(*DeleteHotPatchTemplateResponse)(nil),                    // 814: ypb.DeleteHotPatchTemplateResponse
	(*UpdateHotPatchTemplateResponse)(nil),                    // 815: ypb.UpdateHotPatchTemplateResponse
	(*QueryHotPatchTemplateResponse)(nil),                     // 816: ypb.QueryHotPatchTemplateResponse
	(*QueryHotPatchTemplateListRequest)(nil),                  // 817: ypb.QueryHotPatchTemplateListRequest
	(*QueryHotPatchTemplateListResponse)(nil),                 // 818: ypb.QueryHotPatchTemplateListResponse
	(*GroupTableColumnRequest)(nil),                           // 819: ypb.GroupTableColumnRequest
	(*GroupTableColumnResponse)(nil),                          // 820: ypb.GroupTableColumnResponse
	(*UploadHotPatchTemplateToOnlineRequest)(nil),             // 821: ypb.UploadHotPatchTemplateToOnlineRequest
	(*DownloadHotPatchTemplateRequest)(nil),                   // 822: ypb.DownloadHotPatchTemplateRequest
	(*ExportHTTPFlowStreamRequest)(nil),                       // 823: ypb.ExportHTTPFlowStreamRequest
	(*ExportHTTPFlowStreamResponse)(nil),                      // 824: ypb.ExportHTTPFlowStreamResponse
	(*ImportHTTPFlowStreamRequest)(nil),                       // 825: ypb.ImportHTTPFlowStreamRequest
	(*ImportHTTPFlowStreamResponse)(nil),                      // 826: ypb.ImportHTTPFlowStreamResponse
	(*Note)(nil),                                              // 827: ypb.Note
	(*NoteContent)(nil),                                       // 828: ypb.NoteContent
	(*NoteFilter)(nil),                                        // 829: ypb.NoteFilter
	(*CreateNoteRequest)(nil),                                 // 830: ypb.CreateNoteRequest
	(*CreateNoteResponse)(nil),                                // 831: ypb.CreateNoteResponse
	(*UpdateNoteRequest)(nil),                                 // 832: ypb.UpdateNoteRequest
	(*DeleteNoteRequest)(nil),                                 // 833: ypb.DeleteNoteRequest
	(*QueryNoteRequest)(nil),                                  // 834: ypb.QueryNoteRequest
	(*QueryNoteResponse)(nil),                                 // 835: ypb.QueryNoteResponse
	(*SearchNoteContentRequest)(nil),                          // 836: ypb.SearchNoteContentRequest
	(*SearchNoteContentResponse)(nil),                         // 837: ypb.SearchNoteContentResponse
	(*ImportNoteRequest)(nil),                                 // 838: ypb.ImportNoteRequest
	(*ImportNoteResponse)(nil),                                // 839: ypb.ImportNoteResponse
	(*ExportNoteRequest)(nil),                                 // 840: ypb.ExportNoteRequest
	(*ExportNoteResponse)(nil),                                // 841: ypb.ExportNoteResponse
	(*ListAiModelRequest)(nil),                                // 842: ypb.ListAiModelRequest
	(*ListAiModelResponse)(nil),                               // 843: ypb.ListAiModelResponse
	(*IsLlamaServerReadyResponse)(nil),                        // 844: ypb.IsLlamaServerReadyResponse
	(*IsLocalModelReadyRequest)(nil),                          // 845: ypb.IsLocalModelReadyRequest
	(*IsLocalModelReadyResponse)(nil),                         // 846: ypb.IsLocalModelReadyResponse
	(*InstallLlamaServerRequest)(nil),                         // 847: ypb.InstallLlamaServerRequest
	(*StartLocalModelRequest)(nil),                            // 848: ypb.StartLocalModelRequest
	(*DownloadLocalModelRequest)(nil),                         // 849: ypb.DownloadLocalModelRequest
	(*LocalModelConfig)(nil),                                  // 850: ypb.LocalModelConfig
	(*GetSupportedLocalModelsResponse)(nil),                   // 851: ypb.GetSupportedLocalModelsResponse
	(*MITMV2Request)(nil),                                     // 852: ypb.MITMV2Request
	(*MITMV2Response)(nil),                                    // 853: ypb.MITMV2Response
	(*SingleManualHijackControlMessage)(nil),                  // 854: ypb.SingleManualHijackControlMessage
	(*SingleManualHijackInfoMessage)(nil),                     // 855: ypb.SingleManualHijackInfoMessage
	(*QueryMITMReplacerRulesRequest)(nil),                     // 856: ypb.QueryMITMReplacerRulesRequest
	(*QueryMITMReplacerRulesResponse)(nil),                    // 857: ypb.QueryMITMReplacerRulesResponse
	(*PluginExecutionTrace)(nil),                              // 858: ypb.PluginExecutionTrace
	(*PluginTraceRequest)(nil),                                // 859: ypb.PluginTraceRequest
	(*PluginTraceResponse)(nil),                               // 860: ypb.PluginTraceResponse
	(*PluginTraceStats)(nil),                                  // 861: ypb.PluginTraceStats
	(*GenerateSSAReportRequest)(nil),                          // 862: ypb.GenerateSSAReportRequest
	(*GenerateSSAReportResponse)(nil),                         // 863: ypb.GenerateSSAReportResponse
	(*SSAProject)(nil),                                        // 864: ypb.SSAProject
	(*SSAProjectCompileConfig)(nil),                           // 865: ypb.SSAProjectCompileConfig
	(*SSAProjectScanConfig)(nil),                              // 866: ypb.SSAProjectScanConfig
	(*SSAProjectScanRuleConfig)(nil),                          // 867: ypb.SSAProjectScanRuleConfig
	(*SSAProjectFilter)(nil),                                  // 868: ypb.SSAProjectFilter
	(*CreateSSAProjectRequest)(nil),                           // 869: ypb.CreateSSAProjectRequest
	(*CreateSSAProjectResponse)(nil),                          // 870: ypb.CreateSSAProjectResponse
	(*UpdateSSAProjectRequest)(nil),                           // 871: ypb.UpdateSSAProjectRequest
	(*UpdateSSAProjectResponse)(nil),                          // 872: ypb.UpdateSSAProjectResponse
	(*DeleteSSAProjectRequest)(nil),                           // 873: ypb.DeleteSSAProjectRequest
	(*DeleteSSAProjectResponse)(nil),                          // 874: ypb.DeleteSSAProjectResponse
	(*QuerySSAProjectRequest)(nil),                            // 875: ypb.QuerySSAProjectRequest
	(*QuerySSAProjectResponse)(nil),                           // 876: ypb.QuerySSAProjectResponse
	nil,                                                       // 877: ypb.ExtractDataToFileRequest.DataEntry
	nil,                                                       // 878: ypb.YsoClassGeneraterOptionsWithVerbose.BindOptionsEntry
	nil,                                                       // 879: ypb.WebShell.HeadersEntry
	nil,                                                       // 880: ypb.WebShell.PostsEntry
	nil,                                                       // 881: ypb.UpdateWebShellRequest.HeadersEntry
	nil,                                                       // 882: ypb.UpdateWebShellRequest.PostsEntry
	nil,                                                       // 883: ypb.SyntaxFlowRule.AlertMsgEntry
	nil,                                                       // 884: ypb.AlertMessage.ExtraEntry
	nil,                                                       // 885: ypb.SyntaxFlowRuleInput.AlertMsgEntry
}
var file_yakgrpc_proto_depIdxs = []int32{
	661,  // 0: ypb.ExecBatchYakScriptRequest.ExtraParams:type_name -> ypb.ExecParamItem
	535,  // 1: ypb.ExecBatchYakScriptRequest.PluginFilter:type_name -> ypb.QueryYakScriptRequest
	539,  // 2: ypb.ExecBatchYakScriptResult.PoC:type_name -> ypb.YakScript
	663,  // 3: ypb.ExecBatchYakScriptResult.Result:type_name -> ypb.ExecResult
	661,  // 4: ypb.ExecBatchYakScriptResult.ExtraParam:type_name -> ypb.ExecParamItem
	609,  // 5: ypb.GetAllMCPServersRequest.Pagination:type_name -> ypb.Paging
	21,   // 6: ypb.MCPServerTool.Params:type_name -> ypb.MCPServerToolParamInfo
	22,   // 7: ypb.MCPServer.Tools:type_name -> ypb.MCPServerTool
	23,   // 8: ypb.GetAllMCPServersResponse.MCPServers:type_name -> ypb.MCPServer
	609,  // 9: ypb.GetAllMCPServersResponse.Pagination:type_name -> ypb.Paging
	25,   // 10: ypb.ListEntityRepositoryResponse.EntityRepositories:type_name -> ypb.EntityRepository
	601,  // 11: ypb.Entity.Attributes:type_name -> ypb.KVPair
	28,   // 12: ypb.QueryEntityRequest.Filter:type_name -> ypb.EntityFilter
	609,  // 13: ypb.QueryEntityRequest.Pagination:type_name -> ypb.Paging
	27,   // 14: ypb.QueryEntityResponse.Entities:type_name -> ypb.Entity
	609,  // 15: ypb.QueryEntityResponse.Pagination:type_name -> ypb.Paging
	28,   // 16: ypb.DeleteEntityRequest.Filter:type_name -> ypb.EntityFilter
	601,  // 17: ypb.Relationship.Attributes:type_name -> ypb.KVPair
	33,   // 18: ypb.QueryRelationshipRequest.Filter:type_name -> ypb.RelationshipFilter
	609,  // 19: ypb.QueryRelationshipRequest.Pagination:type_name -> ypb.Paging
	32,   // 20: ypb.QueryRelationshipResponse.Relationships:type_name -> ypb.Relationship
	609,  // 21: ypb.QueryRelationshipResponse.Pagination:type_name -> ypb.Paging
	28,   // 22: ypb.QuerySubERMRequest.Filter:type_name -> ypb.EntityFilter
	27,   // 23: ypb.QuerySubERMResponse.Entities:type_name -> ypb.Entity
	32,   // 24: ypb.QuerySubERMResponse.Relationships:type_name -> ypb.Relationship
	28,   // 25: ypb.GenerateERMDotRequest.Filter:type_name -> ypb.EntityFilter
	40,   // 26: ypb.GetAllStartedLocalModelsResponse.Models:type_name -> ypb.StartedLocalModelInfo
	48,   // 27: ypb.ListThirdPartyBinaryResponse.Binaries:type_name -> ypb.ThirdPartyBinary
	58,   // 28: ypb.GetKnowledgeBaseTypeListResponse.KnowledgeBaseTypes:type_name -> ypb.KnowledgeBaseType
	609,  // 29: ypb.GetKnowledgeBaseRequest.Pagination:type_name -> ypb.Paging
	61,   // 30: ypb.GetKnowledgeBaseResponse.KnowledgeBases:type_name -> ypb.KnowledgeBaseInfo
	609,  // 31: ypb.GetKnowledgeBaseResponse.Pagination:type_name -> ypb.Paging
	609,  // 32: ypb.SearchKnowledgeBaseEntryRequest.Pagination:type_name -> ypb.Paging
	72,   // 33: ypb.SearchKnowledgeBaseEntryResponse.KnowledgeBaseEntries:type_name -> ypb.KnowledgeBaseEntry
	609,  // 34: ypb.SearchKnowledgeBaseEntryResponse.Pagination:type_name -> ypb.Paging
	609,  // 35: ypb.ListVectorStoreEntriesRequest.Pagination:type_name -> ypb.Paging
	78,   // 36: ypb.ListVectorStoreEntriesResponse.Entries:type_name -> ypb.VectorStoreEntry
	609,  // 37: ypb.ListVectorStoreEntriesResponse.Pagination:type_name -> ypb.Paging
	72,   // 38: ypb.GetDocumentByVectorStoreEntryIDResponse.Document:type_name -> ypb.KnowledgeBaseEntry
	609,  // 39: ypb.GetAllVectorStoreCollectionsWithFilterRequest.Pagination:type_name -> ypb.Paging
	75,   // 40: ypb.GetAllVectorStoreCollectionsWithFilterResponse.Collections:type_name -> ypb.VectorStoreCollection
	609,  // 41: ypb.GetAllVectorStoreCollectionsWithFilterResponse.Pagination:type_name -> ypb.Paging
	75,   // 42: ypb.GetAllVectorStoreCollectionsResponse.Collections:type_name -> ypb.VectorStoreCollection
	90,   // 43: ypb.GetToolSetListResponse.ToolSetList:type_name -> ypb.ToolSetInfo
	91,   // 44: ypb.GetToolSetListResponse.ResourceSetList:type_name -> ypb.ResourceSetInfo
	100,  // 45: ypb.SaveAIToolV2Response.AITool:type_name -> ypb.AITool
	100,  // 46: ypb.GetAIToolListResponse.Tools:type_name -> ypb.AITool
	609,  // 47: ypb.GetAIToolListResponse.Pagination:type_name -> ypb.Paging
	609,  // 48: ypb.GetAIToolListRequest.Pagination:type_name -> ypb.Paging
	104,  // 49: ypb.AIOutputEvent.NodeIdVerbose:type_name -> ypb.I18n
	108,  // 50: ypb.AIInputEvent.Params:type_name -> ypb.AIStartParams
	108,  // 51: ypb.AITriageInputEvent.Params:type_name -> ypb.AIStartParams
	107,  // 52: ypb.AIStartParams.McpServers:type_name -> ypb.McpConfig
	661,  // 53: ypb.AIStartParams.ForgeParams:type_name -> ypb.ExecParamItem
	110,  // 54: ypb.AIEventQueryRequest.Filter:type_name -> ypb.AIEventFilter
	103,  // 55: ypb.AIEventQueryResponse.Events:type_name -> ypb.AIOutputEvent
	609,  // 56: ypb.AITaskQueryRequest.Pagination:type_name -> ypb.Paging
	109,  // 57: ypb.AITaskQueryRequest.Filter:type_name -> ypb.AITaskFilter
	609,  // 58: ypb.AITaskQueryResponse.Pagination:type_name -> ypb.Paging
	116,  // 59: ypb.AITaskQueryResponse.Data:type_name -> ypb.AITask
	109,  // 60: ypb.AITaskDeleteRequest.Filter:type_name -> ypb.AITaskFilter
	609,  // 61: ypb.QueryAIForgeRequest.Pagination:type_name -> ypb.Paging
	117,  // 62: ypb.QueryAIForgeRequest.Filter:type_name -> ypb.AIForgeFilter
	609,  // 63: ypb.QueryAIForgeResponse.Pagination:type_name -> ypb.Paging
	118,  // 64: ypb.QueryAIForgeResponse.Data:type_name -> ypb.AIForge
	132,  // 65: ypb.DeleteHybridScanTaskRequest.Filter:type_name -> ypb.HybridScanTaskFilter
	609,  // 66: ypb.QueryHybridScanTaskResponse.Pagination:type_name -> ypb.Paging
	129,  // 67: ypb.QueryHybridScanTaskResponse.Data:type_name -> ypb.HybridScanTask
	609,  // 68: ypb.QueryHybridScanTaskRequest.Pagination:type_name -> ypb.Paging
	132,  // 69: ypb.QueryHybridScanTaskRequest.Filter:type_name -> ypb.HybridScanTaskFilter
	663,  // 70: ypb.HybridScanResponse.ExecResult:type_name -> ypb.ExecResult
	134,  // 71: ypb.HybridScanResponse.UpdateActiveTask:type_name -> ypb.HybridScanUpdateActiveTaskTable
	137,  // 72: ypb.HybridScanResponse.HybridScanConfig:type_name -> ypb.HybridScanRequest
	184,  // 73: ypb.HybridScanInputTarget.HTTPRequestTemplate:type_name -> ypb.HTTPRequestBuilderParams
	535,  // 74: ypb.HybridScanPluginConfig.Filter:type_name -> ypb.QueryYakScriptRequest
	136,  // 75: ypb.HybridScanRequest.Plugin:type_name -> ypb.HybridScanPluginConfig
	135,  // 76: ypb.HybridScanRequest.Targets:type_name -> ypb.HybridScanInputTarget
	421,  // 77: ypb.PcapMetadata.AvailablePcapDevices:type_name -> ypb.NetInterface
	601,  // 78: ypb.PcapMetadata.AvailableSessionTypes:type_name -> ypb.KVPair
	601,  // 79: ypb.PcapMetadata.AvailableLinkLayerTypes:type_name -> ypb.KVPair
	601,  // 80: ypb.PcapMetadata.AvailableNetworkLayerTypes:type_name -> ypb.KVPair
	601,  // 81: ypb.PcapMetadata.AvailableTransportLayerTypes:type_name -> ypb.KVPair
	421,  // 82: ypb.PcapMetadata.DefaultPublicNetInterface:type_name -> ypb.NetInterface
	609,  // 83: ypb.QueryTrafficPacketRequest.Pagination:type_name -> ypb.Paging
	609,  // 84: ypb.QueryTrafficTCPReassembledRequest.Pagination:type_name -> ypb.Paging
	144,  // 85: ypb.QueryTrafficSessionResponse.Data:type_name -> ypb.TrafficSession
	609,  // 86: ypb.QueryTrafficSessionResponse.Pagination:type_name -> ypb.Paging
	146,  // 87: ypb.QueryTrafficPacketResponse.Data:type_name -> ypb.TrafficPacket
	609,  // 88: ypb.QueryTrafficPacketResponse.Pagination:type_name -> ypb.Paging
	148,  // 89: ypb.QueryTrafficTCPReassembledResponse.Data:type_name -> ypb.TrafficTCPReassembled
	609,  // 90: ypb.QueryTrafficTCPReassembledResponse.Pagination:type_name -> ypb.Paging
	609,  // 91: ypb.QueryTrafficSessionRequest.Pagination:type_name -> ypb.Paging
	152,  // 92: ypb.PcapXRequest.SuricataLoader:type_name -> ypb.SuricataConfig
	155,  // 93: ypb.RequestYakURLParams.Url:type_name -> ypb.YakURL
	601,  // 94: ypb.YakURL.Query:type_name -> ypb.KVPair
	155,  // 95: ypb.YakURLResource.Url:type_name -> ypb.YakURL
	601,  // 96: ypb.YakURLResource.Extra:type_name -> ypb.KVPair
	156,  // 97: ypb.RequestYakURLResponse.Resources:type_name -> ypb.YakURLResource
	648,  // 98: ypb.GlobalNetworkConfig.ClientCertificates:type_name -> ypb.Certificate
	167,  // 99: ypb.GlobalNetworkConfig.AppConfigs:type_name -> ypb.ThirdPartyApplicationConfig
	166,  // 100: ypb.GlobalNetworkConfig.AuthInfos:type_name -> ypb.AuthInfo
	601,  // 101: ypb.ThirdPartyApplicationConfig.ExtraParams:type_name -> ypb.KVPair
	206,  // 102: ypb.GetRegisteredAgentResponse.Agents:type_name -> ypb.IsRemoteAddrAvailableResponse
	184,  // 103: ypb.SmokingEvaluatePluginRequest.Requests:type_name -> ypb.HTTPRequestBuilderParams
	272,  // 104: ypb.SmokingEvaluateResult.Range:type_name -> ypb.Range
	174,  // 105: ypb.SmokingEvaluatePluginResponse.Results:type_name -> ypb.SmokingEvaluateResult
	184,  // 106: ypb.DebugPluginRequest.HTTPRequestTemplate:type_name -> ypb.HTTPRequestBuilderParams
	601,  // 107: ypb.DebugPluginRequest.ExecParams:type_name -> ypb.KVPair
	136,  // 108: ypb.DebugPluginRequest.LinkPluginConfig:type_name -> ypb.HybridScanPluginConfig
	182,  // 109: ypb.HTTPRequestBuilderResponse.Results:type_name -> ypb.HTTPRequestBuilderResult
	601,  // 110: ypb.HTTPRequestBuilderParams.GetParams:type_name -> ypb.KVPair
	601,  // 111: ypb.HTTPRequestBuilderParams.Headers:type_name -> ypb.KVPair
	601,  // 112: ypb.HTTPRequestBuilderParams.Cookie:type_name -> ypb.KVPair
	601,  // 113: ypb.HTTPRequestBuilderParams.PostParams:type_name -> ypb.KVPair
	601,  // 114: ypb.HTTPRequestBuilderParams.MultipartParams:type_name -> ypb.KVPair
	601,  // 115: ypb.HTTPRequestBuilderParams.MultipartFileParams:type_name -> ypb.KVPair
	609,  // 116: ypb.QueryScreenRecorderRequest.Pagination:type_name -> ypb.Paging
	185,  // 117: ypb.QueryScreenRecorderResponse.Data:type_name -> ypb.ScreenRecorder
	609,  // 118: ypb.QueryScreenRecorderResponse.Pagination:type_name -> ypb.Paging
	609,  // 119: ypb.QueryCVERequest.Pagination:type_name -> ypb.Paging
	199,  // 120: ypb.CVEDetailEx.CVE:type_name -> ypb.CVEDetail
	197,  // 121: ypb.CVEDetailEx.CWE:type_name -> ypb.CWEDetail
	609,  // 122: ypb.QueryCVEResponse.Pagination:type_name -> ypb.Paging
	199,  // 123: ypb.QueryCVEResponse.Data:type_name -> ypb.CVEDetail
	204,  // 124: ypb.ExecuteChaosMakerRuleRequest.Groups:type_name -> ypb.ChaosMakerRuleGroup
	609,  // 125: ypb.QueryChaosMakerRuleResponse.Pagination:type_name -> ypb.Paging
	208,  // 126: ypb.QueryChaosMakerRuleResponse.Data:type_name -> ypb.ChaosMakerRule
	609,  // 127: ypb.QueryChaosMakerRuleRequest.Pagination:type_name -> ypb.Paging
	217,  // 128: ypb.QueryMITMRuleExtractedDataResponse.Data:type_name -> ypb.MITMRuleExtractedData
	609,  // 129: ypb.QueryMITMRuleExtractedDataResponse.Pagination:type_name -> ypb.Paging
	609,  // 130: ypb.QueryMITMRuleExtractedDataRequest.Pagination:type_name -> ypb.Paging
	220,  // 131: ypb.QueryMITMRuleExtractedDataRequest.Filter:type_name -> ypb.ExtractedDataFilter
	220,  // 132: ypb.ExportMITMRuleExtractedDataRequest.Filter:type_name -> ypb.ExtractedDataFilter
	609,  // 133: ypb.GetProjectsRequest.Pagination:type_name -> ypb.Paging
	232,  // 134: ypb.GetProjectsResponse.Projects:type_name -> ypb.ProjectDescription
	609,  // 135: ypb.GetProjectsResponse.Pagination:type_name -> ypb.Paging
	663,  // 136: ypb.YaklangShellResponse.RawResult:type_name -> ypb.ExecResult
	242,  // 137: ypb.YaklangShellResponse.Scope:type_name -> ypb.YaklangShellKVPair
	253,  // 138: ypb.SaveFuzzerLabelRequest.Data:type_name -> ypb.FuzzerLabel
	253,  // 139: ypb.QueryFuzzerLabelResponse.Data:type_name -> ypb.FuzzerLabel
	258,  // 140: ypb.SaveFuzzerConfigRequest.Data:type_name -> ypb.FuzzerConfig
	609,  // 141: ypb.QueryFuzzerConfigRequest.Pagination:type_name -> ypb.Paging
	258,  // 142: ypb.QueryFuzzerConfigResponse.Data:type_name -> ypb.FuzzerConfig
	609,  // 143: ypb.QueryHTTPFuzzerResponseByTaskIdRequest.Pagination:type_name -> ypb.Paging
	609,  // 144: ypb.QueryHTTPFuzzerResponseByTaskIdResponse.Pagination:type_name -> ypb.Paging
	606,  // 145: ypb.QueryHTTPFuzzerResponseByTaskIdResponse.Data:type_name -> ypb.FuzzerResponse
	609,  // 146: ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest.Pagination:type_name -> ypb.Paging
	272,  // 147: ypb.YaklangInspectInformationRequest.Range:type_name -> ypb.Range
	272,  // 148: ypb.YaklangLanguageSuggestionRequest.Range:type_name -> ypb.Range
	275,  // 149: ypb.YaklangInformationKV.Extern:type_name -> ypb.YaklangInformationKV
	275,  // 150: ypb.YaklangInformation.Data:type_name -> ypb.YaklangInformationKV
	513,  // 151: ypb.YaklangLanguageSuggestionResponse.SuggestionMessage:type_name -> ypb.SuggestionDescription
	272,  // 152: ypb.YaklangLanguageFindResponse.Ranges:type_name -> ypb.Range
	276,  // 153: ypb.YaklangInspectInformationResponse.Information:type_name -> ypb.YaklangInformation
	538,  // 154: ypb.YaklangInspectInformationResponse.CliParameter:type_name -> ypb.YakScriptParam
	281,  // 155: ypb.YaklangInspectInformationResponse.RiskInfo:type_name -> ypb.YakRiskInfo
	280,  // 156: ypb.YaklangInspectInformationResponse.UIInfo:type_name -> ypb.YakUIInfo
	287,  // 157: ypb.YaklangCompileAndFormatResponse.Errors:type_name -> ypb.StaticAnalyzeErrorResult
	287,  // 158: ypb.StaticAnalyzeErrorResponse.Result:type_name -> ypb.StaticAnalyzeErrorResult
	305,  // 159: ypb.DownloadOnlinePluginByScriptNamesResponse.Data:type_name -> ypb.DownloadOnlinePluginByScriptName
	609,  // 160: ypb.QueryOnlinePluginsRequest.Pagination:type_name -> ypb.Paging
	301,  // 161: ypb.QueryOnlinePluginsRequest.Data:type_name -> ypb.DownloadOnlinePluginsRequest
	609,  // 162: ypb.QueryOnlinePluginsResponse.Pagination:type_name -> ypb.Paging
	309,  // 163: ypb.QueryOnlinePluginsResponse.Data:type_name -> ypb.OnlinePlugin
	538,  // 164: ypb.OnlinePlugin.Params:type_name -> ypb.YakScriptParam
	540,  // 165: ypb.OnlinePlugin.CollaboratorInfo:type_name -> ypb.Collaborator
	281,  // 166: ypb.OnlinePlugin.RiskInfo:type_name -> ypb.YakRiskInfo
	314,  // 167: ypb.GetProcessEnvKeyResult.Results:type_name -> ypb.GeneralStorage
	320,  // 168: ypb.GetExecBatchYakScriptUnfinishedTaskResponse.Tasks:type_name -> ypb.ExecBatchYakScriptUnfinishedTask
	321,  // 169: ypb.GetSimpleDetectUnfinishedTaskResponse.Tasks:type_name -> ypb.SimpleDetectUnfinishedTask
	609,  // 170: ypb.QueryUnfinishedTaskRequest.Pagination:type_name -> ypb.Paging
	324,  // 171: ypb.QueryUnfinishedTaskRequest.Filter:type_name -> ypb.UnfinishedTaskFilter
	324,  // 172: ypb.DeleteUnfinishedTaskRequest.Filter:type_name -> ypb.UnfinishedTaskFilter
	327,  // 173: ypb.QueryUnfinishedTaskResponse.Tasks:type_name -> ypb.UnfinishedTask
	609,  // 174: ypb.QueryUnfinishedTaskResponse.Pagination:type_name -> ypb.Paging
	335,  // 175: ypb.AutoDecodeRequest.ModifyResult:type_name -> ypb.AutoDecodeResult
	335,  // 176: ypb.AutoDecodeResponse.Results:type_name -> ypb.AutoDecodeResult
	339,  // 177: ypb.GetYakScriptTagsResponse.Tag:type_name -> ypb.Tags
	539,  // 178: ypb.QueryYakScriptLocalAndUserResponse.Data:type_name -> ypb.YakScript
	539,  // 179: ypb.QueryYakScriptByNamesResponse.Data:type_name -> ypb.YakScript
	539,  // 180: ypb.QueryYakScriptByIsCoreResponse.Data:type_name -> ypb.YakScript
	350,  // 181: ypb.YakScriptRiskTypeListResponse.Data:type_name -> ypb.RiskTypeLists
	877,  // 182: ypb.ExtractDataToFileRequest.Data:type_name -> ypb.ExtractDataToFileRequest.DataEntry
	649,  // 183: ypb.MITMContentReplacers.Rules:type_name -> ypb.MITMContentReplacer
	535,  // 184: ypb.ExecYakitPluginsByYakScriptFilterRequest.Filter:type_name -> ypb.QueryYakScriptRequest
	661,  // 185: ypb.ExecYakitPluginsByYakScriptFilterRequest.ExtraParams:type_name -> ypb.ExecParamItem
	3,    // 186: ypb.GenerateYakCodeByPacketRequest.CodeTemplate:type_name -> ypb.GenerateYakCodeByPacketRequest.Template
	364,  // 187: ypb.DeleteReportRequest.Filter:type_name -> ypb.QueryReportsRequest
	365,  // 188: ypb.QueryReportsResponse.Data:type_name -> ypb.Report
	609,  // 189: ypb.QueryReportsResponse.Pagination:type_name -> ypb.Paging
	609,  // 190: ypb.QueryReportsRequest.Pagination:type_name -> ypb.Paging
	367,  // 191: ypb.SetTagForHTTPFlowRequest.CheckTags:type_name -> ypb.CheckSetTagsHTTPFlow
	376,  // 192: ypb.RiskTableStats.RiskTypeStats:type_name -> ypb.Fields
	376,  // 193: ypb.RiskTableStats.RiskLevelStats:type_name -> ypb.Fields
	375,  // 194: ypb.Fields.Values:type_name -> ypb.FieldName
	377,  // 195: ypb.YsoOptionsWithVerbose.Options:type_name -> ypb.YsoOption
	878,  // 196: ypb.YsoClassGeneraterOptionsWithVerbose.BindOptions:type_name -> ypb.YsoClassGeneraterOptionsWithVerbose.BindOptionsEntry
	380,  // 197: ypb.YsoClassOptionsResponseWithVerbose.Options:type_name -> ypb.YsoClassGeneraterOptionsWithVerbose
	382,  // 198: ypb.YsoClassOptionsResponse.Options:type_name -> ypb.YsoClassGeneraterOptions
	380,  // 199: ypb.YsoOptionsRequerstWithVerbose.Options:type_name -> ypb.YsoClassGeneraterOptionsWithVerbose
	382,  // 200: ypb.YsoOptionsRequerst.Options:type_name -> ypb.YsoClassGeneraterOptions
	395,  // 201: ypb.QueryICMPTriggerResponse.Notification:type_name -> ypb.ICMPTriggerNotification
	398,  // 202: ypb.HistoryHTTPFuzzerTaskDetail.BasicInfo:type_name -> ypb.HistoryHTTPFuzzerTask
	599,  // 203: ypb.HistoryHTTPFuzzerTaskDetail.OriginRequest:type_name -> ypb.FuzzerRequest
	398,  // 204: ypb.HistoryHTTPFuzzerTasks.Tasks:type_name -> ypb.HistoryHTTPFuzzerTask
	397,  // 205: ypb.HistoryHTTPFuzzerTasksResponse.Data:type_name -> ypb.HistoryHTTPFuzzerTaskDetail
	609,  // 206: ypb.HistoryHTTPFuzzerTasksResponse.Pagination:type_name -> ypb.Paging
	609,  // 207: ypb.QueryHistoryHTTPFuzzerTaskExParams.Pagination:type_name -> ypb.Paging
	879,  // 208: ypb.WebShell.Headers:type_name -> ypb.WebShell.HeadersEntry
	880,  // 209: ypb.WebShell.Posts:type_name -> ypb.WebShell.PostsEntry
	406,  // 210: ypb.WebShell.ShellOptions:type_name -> ypb.ShellOptions
	2,    // 211: ypb.ShellGenerate.EncMode:type_name -> ypb.EncMode
	1,    // 212: ypb.ShellGenerate.Script:type_name -> ypb.ShellScript
	609,  // 213: ypb.QueryWebShellsRequest.Pagination:type_name -> ypb.Paging
	609,  // 214: ypb.QueryWebShellsResponse.Pagination:type_name -> ypb.Paging
	404,  // 215: ypb.QueryWebShellsResponse.Data:type_name -> ypb.WebShell
	406,  // 216: ypb.UpdateWebShellRequest.ShellOptions:type_name -> ypb.ShellOptions
	881,  // 217: ypb.UpdateWebShellRequest.Headers:type_name -> ypb.UpdateWebShellRequest.HeadersEntry
	882,  // 218: ypb.UpdateWebShellRequest.Posts:type_name -> ypb.UpdateWebShellRequest.PostsEntry
	417,  // 219: ypb.QueryDNSLogByTokenResponse.Events:type_name -> ypb.DNSLogEvent
	421,  // 220: ypb.AvailableLocalAddrResponse.Interfaces:type_name -> ypb.NetInterface
	439,  // 221: ypb.ConfigGlobalReverseParams.ConnectParams:type_name -> ypb.GetTunnelServerExternalIPParams
	426,  // 222: ypb.DeleteRiskRequest.Filter:type_name -> ypb.QueryRisksRequest
	426,  // 223: ypb.QueryRiskRequest.Filter:type_name -> ypb.QueryRisksRequest
	609,  // 224: ypb.QueryRisksRequest.Pagination:type_name -> ypb.Paging
	609,  // 225: ypb.QueryRisksResponse.Pagination:type_name -> ypb.Paging
	425,  // 226: ypb.QueryRisksResponse.Data:type_name -> ypb.Risk
	433,  // 227: ypb.QueryNewRiskResponse.Data:type_name -> ypb.NewRisk
	432,  // 228: ypb.QueryRiskTagsResponse.RiskTags:type_name -> ypb.FieldGroup
	432,  // 229: ypb.RiskFieldGroupResponse.RiskIPGroup:type_name -> ypb.FieldGroup
	375,  // 230: ypb.RiskFieldGroupResponse.RiskLevelGroup:type_name -> ypb.FieldName
	375,  // 231: ypb.RiskFieldGroupResponse.RiskTypeGroup:type_name -> ypb.FieldName
	426,  // 232: ypb.NewRiskReadRequest.Filter:type_name -> ypb.QueryRisksRequest
	439,  // 233: ypb.VerifyTunnelServerDomainParams.ConnectParams:type_name -> ypb.GetTunnelServerExternalIPParams
	439,  // 234: ypb.StartFacadesParams.ConnectParam:type_name -> ypb.GetTunnelServerExternalIPParams
	384,  // 235: ypb.ApplyClassToFacadesParamsWithVerbose.GenerateClassParams:type_name -> ypb.YsoOptionsRequerstWithVerbose
	385,  // 236: ypb.ApplyClassToFacadesParams.GenerateClassParams:type_name -> ypb.YsoOptionsRequerst
	439,  // 237: ypb.StartFacadesWithYsoParams.BridgeParam:type_name -> ypb.GetTunnelServerExternalIPParams
	385,  // 238: ypb.StartFacadesWithYsoParams.GenerateClassParams:type_name -> ypb.YsoOptionsRequerst
	445,  // 239: ypb.Tree.Children:type_name -> ypb.Tree
	445,  // 240: ypb.GetAvailableBruteTypesResponse.TypesWithChild:type_name -> ypb.Tree
	609,  // 241: ypb.QueryHostsRequest.Pagination:type_name -> ypb.Paging
	609,  // 242: ypb.QueryHostsResponse.Pagination:type_name -> ypb.Paging
	461,  // 243: ypb.QueryHostsResponse.Data:type_name -> ypb.Host
	609,  // 244: ypb.QueryDomainsRequest.Pagination:type_name -> ypb.Paging
	454,  // 245: ypb.DeleteDomainsRequest.Filter:type_name -> ypb.QueryDomainsRequest
	609,  // 246: ypb.QueryDomainsResponse.Pagination:type_name -> ypb.Paging
	457,  // 247: ypb.QueryDomainsResponse.Data:type_name -> ypb.Domain
	459,  // 248: ypb.QueryPortsGroupResponse.PortsGroupList:type_name -> ypb.PortsGroup
	460,  // 249: ypb.PortsGroup.GroupLists:type_name -> ypb.GroupList
	609,  // 250: ypb.QueryYakScriptExecResultRequest.Pagination:type_name -> ypb.Paging
	609,  // 251: ypb.QueryYakScriptExecResultResponse.Pagination:type_name -> ypb.Paging
	663,  // 252: ypb.QueryYakScriptExecResultResponse.Data:type_name -> ypb.ExecResult
	629,  // 253: ypb.StartBasicCrawlerRequest.Headers:type_name -> ypb.HTTPHeader
	471,  // 254: ypb.StartBasicCrawlerRequest.Cookies:type_name -> ypb.HTTPCookie
	535,  // 255: ypb.ExportYakScriptStreamRequest.Filter:type_name -> ypb.QueryYakScriptRequest
	539,  // 256: ypb.GetMarkdownDocumentResponse.Script:type_name -> ypb.YakScript
	482,  // 257: ypb.MenuItem.Query:type_name -> ypb.BatchExecutionPluginFilter
	481,  // 258: ypb.MenuItemGroup.Items:type_name -> ypb.MenuItem
	483,  // 259: ypb.MenuByGroup.Groups:type_name -> ypb.MenuItemGroup
	483,  // 260: ypb.AddMenuRequest.Data:type_name -> ypb.MenuItemGroup
	494,  // 261: ypb.AddToNavigationRequest.Data:type_name -> ypb.NavigationList
	495,  // 262: ypb.NavigationList.Items:type_name -> ypb.NavigationItem
	494,  // 263: ypb.GetAllNavigationItemResponse.Data:type_name -> ypb.NavigationList
	503,  // 264: ypb.RecordPortScanRequest.LastRecord:type_name -> ypb.LastRecord
	447,  // 265: ypb.RecordPortScanRequest.StartBruteParams:type_name -> ypb.StartBruteParams
	506,  // 266: ypb.RecordPortScanRequest.PortScanRequest:type_name -> ypb.PortScanRequest
	136,  // 267: ypb.PortScanRequest.LinkPluginConfig:type_name -> ypb.HybridScanPluginConfig
	508,  // 268: ypb.DeletePortsRequest.Filter:type_name -> ypb.QueryPortsRequest
	609,  // 269: ypb.QueryPortsRequest.Pagination:type_name -> ypb.Paging
	609,  // 270: ypb.QueryPortsResponse.Pagination:type_name -> ypb.Paging
	510,  // 271: ypb.QueryPortsResponse.Data:type_name -> ypb.Port
	513,  // 272: ypb.MethodSuggestion.Suggestions:type_name -> ypb.SuggestionDescription
	514,  // 273: ypb.GetYakVMBuildInMethodCompletionResponse.Suggestions:type_name -> ypb.MethodSuggestion
	518,  // 274: ypb.PayloadGroupNode.Nodes:type_name -> ypb.PayloadGroupNode
	518,  // 275: ypb.GetAllPayloadGroupResponse.Nodes:type_name -> ypb.PayloadGroupNode
	518,  // 276: ypb.UpdateAllPayloadGroupRequest.Nodes:type_name -> ypb.PayloadGroupNode
	531,  // 277: ypb.UpdatePayloadRequest.Data:type_name -> ypb.Payload
	609,  // 278: ypb.QueryPayloadRequest.Pagination:type_name -> ypb.Paging
	609,  // 279: ypb.QueryPayloadResponse.Pagination:type_name -> ypb.Paging
	531,  // 280: ypb.QueryPayloadResponse.Data:type_name -> ypb.Payload
	531,  // 281: ypb.GetAllPayloadResponse.Data:type_name -> ypb.Payload
	609,  // 282: ypb.QueryYakScriptRequest.Pagination:type_name -> ypb.Paging
	536,  // 283: ypb.QueryYakScriptRequest.Group:type_name -> ypb.PluginGroup
	609,  // 284: ypb.QueryYakScriptResponse.Pagination:type_name -> ypb.Paging
	539,  // 285: ypb.QueryYakScriptResponse.Data:type_name -> ypb.YakScript
	538,  // 286: ypb.YakScript.Params:type_name -> ypb.YakScriptParam
	348,  // 287: ypb.YakScript.RiskDetail:type_name -> ypb.QueryYakScriptRiskDetailByCWEResponse
	540,  // 288: ypb.YakScript.CollaboratorInfo:type_name -> ypb.Collaborator
	281,  // 289: ypb.YakScript.RiskInfo:type_name -> ypb.YakRiskInfo
	538,  // 290: ypb.SaveNewYakScriptRequest.Params:type_name -> ypb.YakScriptParam
	348,  // 291: ypb.SaveNewYakScriptRequest.RiskDetail:type_name -> ypb.QueryYakScriptRiskDetailByCWEResponse
	281,  // 292: ypb.SaveNewYakScriptRequest.RiskInfo:type_name -> ypb.YakRiskInfo
	535,  // 293: ypb.SetYakScriptSkipUpdateRequest.Field:type_name -> ypb.QueryYakScriptRequest
	554,  // 294: ypb.QueryYakScriptGroupResponse.Group:type_name -> ypb.GroupCount
	535,  // 295: ypb.SaveYakScriptGroupRequest.Filter:type_name -> ypb.QueryYakScriptRequest
	562,  // 296: ypb.GetYakScriptTagsAndTypeResponse.Type:type_name -> ypb.TagsAndType
	562,  // 297: ypb.GetYakScriptTagsAndTypeResponse.Tag:type_name -> ypb.TagsAndType
	562,  // 298: ypb.GetYakScriptTagsAndTypeResponse.Group:type_name -> ypb.TagsAndType
	563,  // 299: ypb.QuerySnippetsRequest.Filter:type_name -> ypb.SnippetsFilter
	661,  // 300: ypb.CodecRequest.Params:type_name -> ypb.ExecParamItem
	661,  // 301: ypb.CodecWork.Params:type_name -> ypb.ExecParamItem
	569,  // 302: ypb.CodecRequestFlow.WorkFlow:type_name -> ypb.CodecWork
	569,  // 303: ypb.CustomizeCodecFlow.WorkFlow:type_name -> ypb.CodecWork
	569,  // 304: ypb.UpdateCodecFlowRequest.WorkFlow:type_name -> ypb.CodecWork
	571,  // 305: ypb.GetCodecFlowResponse.Flows:type_name -> ypb.CustomizeCodecFlow
	577,  // 306: ypb.CodecMethods.Methods:type_name -> ypb.CodecMethod
	578,  // 307: ypb.CodecMethod.Params:type_name -> ypb.CodecParam
	578,  // 308: ypb.CodecParam.Connector:type_name -> ypb.CodecParam
	609,  // 309: ypb.ExecHistoryRequest.Pagination:type_name -> ypb.Paging
	581,  // 310: ypb.ExecHistoryRecordResponse.Data:type_name -> ypb.ExecHistoryRecord
	609,  // 311: ypb.ExecHistoryRecordResponse.Pagination:type_name -> ypb.Paging
	585,  // 312: ypb.HTTPRequestAnalysis.Params:type_name -> ypb.HTTPRequestParamItem
	587,  // 313: ypb.HTTPResponseMatcher.SubMatchers:type_name -> ypb.HTTPResponseMatcher
	601,  // 314: ypb.RenderVariablesRequest.Params:type_name -> ypb.KVPair
	601,  // 315: ypb.RenderVariablesResponse.Results:type_name -> ypb.KVPair
	587,  // 316: ypb.MatchHTTPResponseParams.Matchers:type_name -> ypb.HTTPResponseMatcher
	597,  // 317: ypb.ExtractHTTPResponseResult.Values:type_name -> ypb.FuzzerParamItem
	592,  // 318: ypb.ExtractHTTPResponseParams.Extractors:type_name -> ypb.HTTPResponseExtractor
	597,  // 319: ypb.PreloadHTTPFuzzerParamsRequest.Params:type_name -> ypb.FuzzerParamItem
	597,  // 320: ypb.PreloadHTTPFuzzerParamsResponse.Values:type_name -> ypb.FuzzerParamItem
	599,  // 321: ypb.FuzzerRequests.Requests:type_name -> ypb.FuzzerRequest
	597,  // 322: ypb.FuzzerRequest.Params:type_name -> ypb.FuzzerParamItem
	602,  // 323: ypb.FuzzerRequest.Filter:type_name -> ypb.FuzzerResponseFilter
	601,  // 324: ypb.FuzzerRequest.EtcHosts:type_name -> ypb.KVPair
	592,  // 325: ypb.FuzzerRequest.Extractors:type_name -> ypb.HTTPResponseExtractor
	587,  // 326: ypb.FuzzerRequest.Matchers:type_name -> ypb.HTTPResponseMatcher
	600,  // 327: ypb.FuzzerRequest.MutateMethods:type_name -> ypb.MutateMethod
	601,  // 328: ypb.MutateMethod.Value:type_name -> ypb.KVPair
	592,  // 329: ypb.RedirectRequestParams.Extractors:type_name -> ypb.HTTPResponseExtractor
	587,  // 330: ypb.RedirectRequestParams.Matchers:type_name -> ypb.HTTPResponseMatcher
	597,  // 331: ypb.RedirectRequestParams.Params:type_name -> ypb.FuzzerParamItem
	599,  // 332: ypb.FuzzerSequenceResponse.Request:type_name -> ypb.FuzzerRequest
	606,  // 333: ypb.FuzzerSequenceResponse.Response:type_name -> ypb.FuzzerResponse
	629,  // 334: ypb.FuzzerResponse.Headers:type_name -> ypb.HTTPHeader
	601,  // 335: ypb.FuzzerResponse.ExtractedResults:type_name -> ypb.KVPair
	608,  // 336: ypb.FuzzerResponse.RedirectFlows:type_name -> ypb.RedirectHTTPFlow
	607,  // 337: ypb.FuzzerResponse.RandomChunkedData:type_name -> ypb.RandomChunkedResponse
	609,  // 338: ypb.QueryHTTPFlowRequest.Pagination:type_name -> ypb.Paging
	615,  // 339: ypb.HTTPFlowsToOnlineBatchRequest.ToOnlineWhere:type_name -> ypb.HTTPFlowsToOnlineRequest
	614,  // 340: ypb.HTTPFlowsToOnlineBatchRequest.UploadHTTPFlowsWhere:type_name -> ypb.QueryHTTPFlowRequest
	649,  // 341: ypb.AnalyzeHTTPFlowRequest.Replacers:type_name -> ypb.MITMContentReplacer
	620,  // 342: ypb.AnalyzeHTTPFlowRequest.Config:type_name -> ypb.AnalyzeHTTPFlowConfig
	619,  // 343: ypb.AnalyzeHTTPFlowRequest.Source:type_name -> ypb.AnalyzedDataSource
	587,  // 344: ypb.AnalyzeHTTPFlowRequest.Matchers:type_name -> ypb.HTTPResponseMatcher
	614,  // 345: ypb.AnalyzedDataSource.HTTPFlowFilter:type_name -> ypb.QueryHTTPFlowRequest
	663,  // 346: ypb.AnalyzeHTTPFlowResponse.ExecResult:type_name -> ypb.ExecResult
	623,  // 347: ypb.AnalyzeHTTPFlowResponse.RuleData:type_name -> ypb.HTTPFlowRuleData
	614,  // 348: ypb.ExportHTTPFlowsRequest.ExportWhere:type_name -> ypb.QueryHTTPFlowRequest
	614,  // 349: ypb.DeleteHTTPFlowRequest.Filter:type_name -> ypb.QueryHTTPFlowRequest
	631,  // 350: ypb.QueryHTTPFlowsIdsResponse.Data:type_name -> ypb.HTTPFlow
	631,  // 351: ypb.HTTPFlows.Data:type_name -> ypb.HTTPFlow
	629,  // 352: ypb.HTTPFlow.RequestHeader:type_name -> ypb.HTTPHeader
	629,  // 353: ypb.HTTPFlow.ResponseHeader:type_name -> ypb.HTTPHeader
	632,  // 354: ypb.HTTPFlow.GetParams:type_name -> ypb.FuzzableParam
	632,  // 355: ypb.HTTPFlow.PostParams:type_name -> ypb.FuzzableParam
	632,  // 356: ypb.HTTPFlow.CookieParams:type_name -> ypb.FuzzableParam
	609,  // 357: ypb.QueryHTTPFlowResponse.Pagination:type_name -> ypb.Paging
	631,  // 358: ypb.QueryHTTPFlowResponse.Data:type_name -> ypb.HTTPFlow
	640,  // 359: ypb.HTTPFlowsFieldGroupResponse.Tags:type_name -> ypb.TagsCode
	640,  // 360: ypb.HTTPFlowsFieldGroupResponse.StatusCode:type_name -> ypb.TagsCode
	609,  // 361: ypb.WebsocketFlows.Pagination:type_name -> ypb.Paging
	642,  // 362: ypb.WebsocketFlows.Data:type_name -> ypb.WebsocketFlow
	647,  // 363: ypb.SetMITMFilterRequest.FilterData:type_name -> ypb.MITMFilterData
	647,  // 364: ypb.MITMRequest.FilterData:type_name -> ypb.MITMFilterData
	661,  // 365: ypb.MITMRequest.yakScriptParams:type_name -> ypb.ExecParamItem
	650,  // 366: ypb.MITMRequest.removeHookParams:type_name -> ypb.RemoveHookParams
	649,  // 367: ypb.MITMRequest.replacers:type_name -> ypb.MITMContentReplacer
	648,  // 368: ypb.MITMRequest.certificates:type_name -> ypb.Certificate
	601,  // 369: ypb.MITMRequest.hosts:type_name -> ypb.KVPair
	647,  // 370: ypb.MITMRequest.HijackFilterData:type_name -> ypb.MITMFilterData
	646,  // 371: ypb.MITMFilterData.IncludeHostnames:type_name -> ypb.FilterDataItem
	646,  // 372: ypb.MITMFilterData.ExcludeHostnames:type_name -> ypb.FilterDataItem
	646,  // 373: ypb.MITMFilterData.IncludeSuffix:type_name -> ypb.FilterDataItem
	646,  // 374: ypb.MITMFilterData.ExcludeSuffix:type_name -> ypb.FilterDataItem
	646,  // 375: ypb.MITMFilterData.IncludeUri:type_name -> ypb.FilterDataItem
	646,  // 376: ypb.MITMFilterData.ExcludeUri:type_name -> ypb.FilterDataItem
	646,  // 377: ypb.MITMFilterData.ExcludeMethods:type_name -> ypb.FilterDataItem
	646,  // 378: ypb.MITMFilterData.ExcludeMIME:type_name -> ypb.FilterDataItem
	629,  // 379: ypb.MITMContentReplacer.ExtraHeaders:type_name -> ypb.HTTPHeader
	470,  // 380: ypb.MITMContentReplacer.ExtraCookies:type_name -> ypb.HTTPCookieSetting
	647,  // 381: ypb.MITMResponse.FilterData:type_name -> ypb.MITMFilterData
	649,  // 382: ypb.MITMResponse.replacers:type_name -> ypb.MITMContentReplacer
	631,  // 383: ypb.MITMResponse.historyHTTPFlow:type_name -> ypb.HTTPFlow
	663,  // 384: ypb.MITMResponse.message:type_name -> ypb.ExecResult
	653,  // 385: ypb.MITMResponse.hooks:type_name -> ypb.YakScriptHooks
	652,  // 386: ypb.MITMResponse.traceInfo:type_name -> ypb.TraceInfo
	654,  // 387: ypb.YakScriptHooks.Hooks:type_name -> ypb.YakScriptHookItem
	661,  // 388: ypb.ExecRequest.Params:type_name -> ypb.ExecParamItem
	6,    // 389: ypb.ImportHTTPFuzzerTaskFromYamlResponse.Status:type_name -> ypb.GeneralResponse
	598,  // 390: ypb.ImportHTTPFuzzerTaskFromYamlResponse.Requests:type_name -> ypb.FuzzerRequests
	598,  // 391: ypb.ExportHTTPFuzzerTaskToYamlRequest.Requests:type_name -> ypb.FuzzerRequests
	6,    // 392: ypb.ExportHTTPFuzzerTaskToYamlResponse.Status:type_name -> ypb.GeneralResponse
	601,  // 393: ypb.EvaluateExpressionRequest.Variables:type_name -> ypb.KVPair
	601,  // 394: ypb.EvaluateMultiExpressionRequest.Variables:type_name -> ypb.KVPair
	685,  // 395: ypb.EvaluateMultiExpressionResponse.Results:type_name -> ypb.EvaluateExpressionResponse
	688,  // 396: ypb.GetThirdPartyAppConfigTemplate.Items:type_name -> ypb.ThirdPartyAppConfigItemTemplate
	689,  // 397: ypb.GetThirdPartyAppConfigTemplateResponse.Templates:type_name -> ypb.GetThirdPartyAppConfigTemplate
	6,    // 398: ypb.GenerateReverseShellCommandResponse.Status:type_name -> ypb.GeneralResponse
	704,  // 399: ypb.FingerprintRule.CPE:type_name -> ypb.CPE
	706,  // 400: ypb.QueryFingerprintRequest.Filter:type_name -> ypb.FingerprintFilter
	609,  // 401: ypb.QueryFingerprintRequest.Pagination:type_name -> ypb.Paging
	609,  // 402: ypb.QueryFingerprintResponse.Pagination:type_name -> ypb.Paging
	705,  // 403: ypb.QueryFingerprintResponse.Data:type_name -> ypb.FingerprintRule
	706,  // 404: ypb.DeleteFingerprintRequest.Filter:type_name -> ypb.FingerprintFilter
	705,  // 405: ypb.CreateFingerprintRequest.Rule:type_name -> ypb.FingerprintRule
	705,  // 406: ypb.UpdateFingerprintRequest.Rule:type_name -> ypb.FingerprintRule
	712,  // 407: ypb.FingerprintGroups.Data:type_name -> ypb.FingerprintGroup
	706,  // 408: ypb.BatchUpdateFingerprintToGroupRequest.Filter:type_name -> ypb.FingerprintFilter
	706,  // 409: ypb.GetFingerprintGroupSetRequest.Filter:type_name -> ypb.FingerprintFilter
	706,  // 410: ypb.ExportFingerprintRequest.Filter:type_name -> ypb.FingerprintFilter
	609,  // 411: ypb.QuerySyntaxFlowRuleRequest.Pagination:type_name -> ypb.Paging
	725,  // 412: ypb.QuerySyntaxFlowRuleRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	883,  // 413: ypb.SyntaxFlowRule.AlertMsg:type_name -> ypb.SyntaxFlowRule.AlertMsgEntry
	884,  // 414: ypb.AlertMessage.Extra:type_name -> ypb.AlertMessage.ExtraEntry
	885,  // 415: ypb.SyntaxFlowRuleInput.AlertMsg:type_name -> ypb.SyntaxFlowRuleInput.AlertMsgEntry
	727,  // 416: ypb.SSARiskDiffRequest.BaseLine:type_name -> ypb.SSARiskDiffItem
	727,  // 417: ypb.SSARiskDiffRequest.Compare:type_name -> ypb.SSARiskDiffItem
	782,  // 418: ypb.SSARiskDiffResponse.BaseRisk:type_name -> ypb.SSARisk
	782,  // 419: ypb.SSARiskDiffResponse.CompareRisk:type_name -> ypb.SSARisk
	609,  // 420: ypb.QuerySSAProgramRequest.Paging:type_name -> ypb.Paging
	609,  // 421: ypb.QuerySSAProgramRequest.Pagination:type_name -> ypb.Paging
	731,  // 422: ypb.QuerySSAProgramRequest.Filter:type_name -> ypb.SSAProgramFilter
	730,  // 423: ypb.UpdateSSAProgramRequest.ProgramInput:type_name -> ypb.SSAProgramInput
	731,  // 424: ypb.DeleteSSAProgramRequest.Filter:type_name -> ypb.SSAProgramFilter
	609,  // 425: ypb.QuerySSAProgramResponse.Paging:type_name -> ypb.Paging
	609,  // 426: ypb.QuerySSAProgramResponse.Pagination:type_name -> ypb.Paging
	726,  // 427: ypb.QuerySSAProgramResponse.Programs:type_name -> ypb.SSAProgram
	726,  // 428: ypb.QuerySSAProgramResponse.Data:type_name -> ypb.SSAProgram
	724,  // 429: ypb.CreateSyntaxFlowRuleRequest.SyntaxFlowInput:type_name -> ypb.SyntaxFlowRuleInput
	703,  // 430: ypb.CreateSyntaxFlowRuleResponse.Message:type_name -> ypb.DbOperateMessage
	722,  // 431: ypb.CreateSyntaxFlowRuleResponse.Rule:type_name -> ypb.SyntaxFlowRule
	724,  // 432: ypb.UpdateSyntaxFlowRuleRequest.SyntaxFlowInput:type_name -> ypb.SyntaxFlowRuleInput
	703,  // 433: ypb.UpdateSyntaxFlowRuleResponse.Message:type_name -> ypb.DbOperateMessage
	722,  // 434: ypb.UpdateSyntaxFlowRuleResponse.Rule:type_name -> ypb.SyntaxFlowRule
	609,  // 435: ypb.QuerySyntaxFlowRuleResponse.Pagination:type_name -> ypb.Paging
	703,  // 436: ypb.QuerySyntaxFlowRuleResponse.DbMessage:type_name -> ypb.DbOperateMessage
	722,  // 437: ypb.QuerySyntaxFlowRuleResponse.Rule:type_name -> ypb.SyntaxFlowRule
	725,  // 438: ypb.DeleteSyntaxFlowRuleRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	746,  // 439: ypb.QuerySyntaxFlowRuleGroupRequest.Filter:type_name -> ypb.SyntaxFlowRuleGroupFilter
	609,  // 440: ypb.QuerySyntaxFlowRuleGroupRequest.Pagination:type_name -> ypb.Paging
	747,  // 441: ypb.QuerySyntaxFlowRuleGroupResponse.Group:type_name -> ypb.SyntaxFlowGroup
	609,  // 442: ypb.QuerySyntaxFlowRuleGroupResponse.Pagination:type_name -> ypb.Paging
	725,  // 443: ypb.UpdateSyntaxFlowRuleAndGroupRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	725,  // 444: ypb.QuerySyntaxFlowSameGroupRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	747,  // 445: ypb.QuerySyntaxFlowSameGroupResponse.Group:type_name -> ypb.SyntaxFlowGroup
	746,  // 446: ypb.DeleteSyntaxFlowRuleGroupRequest.Filter:type_name -> ypb.SyntaxFlowRuleGroupFilter
	609,  // 447: ypb.SyntaxFlowRuleToOnlineRequest.Pagination:type_name -> ypb.Paging
	725,  // 448: ypb.SyntaxFlowRuleToOnlineRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	725,  // 449: ypb.DownloadSyntaxFlowRuleRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	725,  // 450: ypb.SyntaxFlowScanRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	724,  // 451: ypb.SyntaxFlowScanRequest.RuleInput:type_name -> ypb.SyntaxFlowRuleInput
	609,  // 452: ypb.QuerySyntaxFlowScanTaskRequest.Pagination:type_name -> ypb.Paging
	761,  // 453: ypb.QuerySyntaxFlowScanTaskRequest.Filter:type_name -> ypb.SyntaxFlowScanTaskFilter
	609,  // 454: ypb.QuerySyntaxFlowScanTaskResponse.Pagination:type_name -> ypb.Paging
	763,  // 455: ypb.QuerySyntaxFlowScanTaskResponse.Data:type_name -> ypb.SyntaxFlowScanTask
	759,  // 456: ypb.SyntaxFlowScanTask.Config:type_name -> ypb.SyntaxFlowScanRequest
	761,  // 457: ypb.DeleteSyntaxFlowScanTaskRequest.Filter:type_name -> ypb.SyntaxFlowScanTaskFilter
	663,  // 458: ypb.SyntaxFlowScanResponse.ExecResult:type_name -> ypb.ExecResult
	769,  // 459: ypb.SyntaxFlowScanResponse.Result:type_name -> ypb.SyntaxFlowResult
	425,  // 460: ypb.SyntaxFlowScanResponse.risks:type_name -> ypb.Risk
	782,  // 461: ypb.SyntaxFlowScanResponse.SSARisks:type_name -> ypb.SSARisk
	609,  // 462: ypb.QuerySyntaxFlowResultRequest.Pagination:type_name -> ypb.Paging
	766,  // 463: ypb.QuerySyntaxFlowResultRequest.Filter:type_name -> ypb.SyntaxFlowResultFilter
	609,  // 464: ypb.QuerySyntaxFlowResultResponse.Pagination:type_name -> ypb.Paging
	703,  // 465: ypb.QuerySyntaxFlowResultResponse.DbMessage:type_name -> ypb.DbOperateMessage
	769,  // 466: ypb.QuerySyntaxFlowResultResponse.Results:type_name -> ypb.SyntaxFlowResult
	766,  // 467: ypb.DeleteSyntaxFlowResultRequest.Filter:type_name -> ypb.SyntaxFlowResultFilter
	703,  // 468: ypb.DeleteSyntaxFlowResultResponse.Message:type_name -> ypb.DbOperateMessage
	601,  // 469: ypb.PluginEnvData.Env:type_name -> ypb.KVPair
	778,  // 470: ypb.GetAllFuzztagInfoResponse.Data:type_name -> ypb.FuzztagInfo
	777,  // 471: ypb.FuzztagInfo.ArgumentTypes:type_name -> ypb.FuzztagArgumentType
	272,  // 472: ypb.GenerateFuzztagRequest.Range:type_name -> ypb.Range
	6,    // 473: ypb.GenerateFuzztagResponse.Status:type_name -> ypb.GeneralResponse
	728,  // 474: ypb.SSARisksFilter.SSARiskDiffRequest:type_name -> ypb.SSARiskDiffRequest
	609,  // 475: ypb.QuerySSARisksRequest.Pagination:type_name -> ypb.Paging
	783,  // 476: ypb.QuerySSARisksRequest.Filter:type_name -> ypb.SSARisksFilter
	609,  // 477: ypb.QuerySSARisksResponse.Pagination:type_name -> ypb.Paging
	782,  // 478: ypb.QuerySSARisksResponse.Data:type_name -> ypb.SSARisk
	782,  // 479: ypb.QueryNewSSARisksResponse.Data:type_name -> ypb.SSARisk
	783,  // 480: ypb.DeleteSSARisksRequest.Filter:type_name -> ypb.SSARisksFilter
	432,  // 481: ypb.SSARiskFieldGroupResponse.FileField:type_name -> ypb.FieldGroup
	375,  // 482: ypb.SSARiskFieldGroupResponse.SeverityField:type_name -> ypb.FieldName
	375,  // 483: ypb.SSARiskFieldGroupResponse.RiskTypeField:type_name -> ypb.FieldName
	783,  // 484: ypb.NewSSARiskReadRequest.Filter:type_name -> ypb.SSARisksFilter
	783,  // 485: ypb.SSARiskFeedbackToOnlineRequest.Filter:type_name -> ypb.SSARisksFilter
	794,  // 486: ypb.CreateSSARiskDisposalsResponse.Data:type_name -> ypb.SSARiskDisposalData
	609,  // 487: ypb.QuerySSARiskDisposalsRequest.Pagination:type_name -> ypb.Paging
	795,  // 488: ypb.QuerySSARiskDisposalsRequest.Filter:type_name -> ypb.SSARiskDisposalsFilter
	609,  // 489: ypb.QuerySSARiskDisposalsResponse.Pagination:type_name -> ypb.Paging
	794,  // 490: ypb.QuerySSARiskDisposalsResponse.Data:type_name -> ypb.SSARiskDisposalData
	795,  // 491: ypb.UpdateSSARiskDisposalsRequest.Filter:type_name -> ypb.SSARiskDisposalsFilter
	794,  // 492: ypb.UpdateSSARiskDisposalsResponse.Data:type_name -> ypb.SSARiskDisposalData
	795,  // 493: ypb.DeleteSSARiskDisposalsRequest.Filter:type_name -> ypb.SSARiskDisposalsFilter
	703,  // 494: ypb.DeleteSSARiskDisposalsResponse.Message:type_name -> ypb.DbOperateMessage
	794,  // 495: ypb.GetSSARiskDisposalResponse.Data:type_name -> ypb.SSARiskDisposalData
	725,  // 496: ypb.ExportSyntaxFlowsRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	810,  // 497: ypb.UpdateHotPatchTemplateRequest.Condition:type_name -> ypb.HotPatchTemplateRequest
	809,  // 498: ypb.UpdateHotPatchTemplateRequest.Data:type_name -> ypb.HotPatchTemplate
	810,  // 499: ypb.DeleteHotPatchTemplateRequest.Condition:type_name -> ypb.HotPatchTemplateRequest
	703,  // 500: ypb.CreateHotPatchTemplateResponse.Message:type_name -> ypb.DbOperateMessage
	703,  // 501: ypb.DeleteHotPatchTemplateResponse.Message:type_name -> ypb.DbOperateMessage
	703,  // 502: ypb.UpdateHotPatchTemplateResponse.Message:type_name -> ypb.DbOperateMessage
	703,  // 503: ypb.QueryHotPatchTemplateResponse.Message:type_name -> ypb.DbOperateMessage
	809,  // 504: ypb.QueryHotPatchTemplateResponse.Data:type_name -> ypb.HotPatchTemplate
	609,  // 505: ypb.QueryHotPatchTemplateListResponse.Pagination:type_name -> ypb.Paging
	614,  // 506: ypb.ExportHTTPFlowStreamRequest.Filter:type_name -> ypb.QueryHTTPFlowRequest
	827,  // 507: ypb.NoteContent.Note:type_name -> ypb.Note
	703,  // 508: ypb.CreateNoteResponse.Message:type_name -> ypb.DbOperateMessage
	829,  // 509: ypb.UpdateNoteRequest.Filter:type_name -> ypb.NoteFilter
	829,  // 510: ypb.DeleteNoteRequest.Filter:type_name -> ypb.NoteFilter
	829,  // 511: ypb.QueryNoteRequest.Filter:type_name -> ypb.NoteFilter
	609,  // 512: ypb.QueryNoteRequest.Pagination:type_name -> ypb.Paging
	609,  // 513: ypb.QueryNoteResponse.Pagination:type_name -> ypb.Paging
	827,  // 514: ypb.QueryNoteResponse.Data:type_name -> ypb.Note
	609,  // 515: ypb.SearchNoteContentRequest.Pagination:type_name -> ypb.Paging
	609,  // 516: ypb.SearchNoteContentResponse.Pagination:type_name -> ypb.Paging
	828,  // 517: ypb.SearchNoteContentResponse.Data:type_name -> ypb.NoteContent
	829,  // 518: ypb.ExportNoteRequest.Filter:type_name -> ypb.NoteFilter
	47,   // 519: ypb.LocalModelConfig.Status:type_name -> ypb.LocalModelStatus
	850,  // 520: ypb.GetSupportedLocalModelsResponse.Models:type_name -> ypb.LocalModelConfig
	648,  // 521: ypb.MITMV2Request.Certificates:type_name -> ypb.Certificate
	601,  // 522: ypb.MITMV2Request.hosts:type_name -> ypb.KVPair
	601,  // 523: ypb.MITMV2Request.HostsMapping:type_name -> ypb.KVPair
	647,  // 524: ypb.MITMV2Request.FilterData:type_name -> ypb.MITMFilterData
	647,  // 525: ypb.MITMV2Request.HijackFilterData:type_name -> ypb.MITMFilterData
	649,  // 526: ypb.MITMV2Request.Replacers:type_name -> ypb.MITMContentReplacer
	661,  // 527: ypb.MITMV2Request.YakScriptParams:type_name -> ypb.ExecParamItem
	650,  // 528: ypb.MITMV2Request.RemoveHookParams:type_name -> ypb.RemoveHookParams
	854,  // 529: ypb.MITMV2Request.ManualHijackMessage:type_name -> ypb.SingleManualHijackControlMessage
	647,  // 530: ypb.MITMV2Response.FilterData:type_name -> ypb.MITMFilterData
	649,  // 531: ypb.MITMV2Response.Replacers:type_name -> ypb.MITMContentReplacer
	663,  // 532: ypb.MITMV2Response.Message:type_name -> ypb.ExecResult
	653,  // 533: ypb.MITMV2Response.Hooks:type_name -> ypb.YakScriptHooks
	855,  // 534: ypb.MITMV2Response.ManualHijackList:type_name -> ypb.SingleManualHijackInfoMessage
	652,  // 535: ypb.SingleManualHijackInfoMessage.TraceInfo:type_name -> ypb.TraceInfo
	353,  // 536: ypb.QueryMITMReplacerRulesResponse.Rules:type_name -> ypb.MITMContentReplacers
	858,  // 537: ypb.PluginTraceResponse.Traces:type_name -> ypb.PluginExecutionTrace
	861,  // 538: ypb.PluginTraceResponse.Stats:type_name -> ypb.PluginTraceStats
	865,  // 539: ypb.SSAProject.CompileConfig:type_name -> ypb.SSAProjectCompileConfig
	866,  // 540: ypb.SSAProject.ScanConfig:type_name -> ypb.SSAProjectScanConfig
	867,  // 541: ypb.SSAProject.RuleConfig:type_name -> ypb.SSAProjectScanRuleConfig
	725,  // 542: ypb.SSAProjectScanRuleConfig.RuleFilter:type_name -> ypb.SyntaxFlowRuleFilter
	864,  // 543: ypb.CreateSSAProjectRequest.Project:type_name -> ypb.SSAProject
	864,  // 544: ypb.CreateSSAProjectResponse.Project:type_name -> ypb.SSAProject
	703,  // 545: ypb.CreateSSAProjectResponse.Message:type_name -> ypb.DbOperateMessage
	864,  // 546: ypb.UpdateSSAProjectRequest.Project:type_name -> ypb.SSAProject
	864,  // 547: ypb.UpdateSSAProjectResponse.Project:type_name -> ypb.SSAProject
	703,  // 548: ypb.UpdateSSAProjectResponse.Message:type_name -> ypb.DbOperateMessage
	868,  // 549: ypb.DeleteSSAProjectRequest.Filter:type_name -> ypb.SSAProjectFilter
	703,  // 550: ypb.DeleteSSAProjectResponse.Message:type_name -> ypb.DbOperateMessage
	868,  // 551: ypb.QuerySSAProjectRequest.Filter:type_name -> ypb.SSAProjectFilter
	609,  // 552: ypb.QuerySSAProjectRequest.Pagination:type_name -> ypb.Paging
	864,  // 553: ypb.QuerySSAProjectResponse.Projects:type_name -> ypb.SSAProject
	609,  // 554: ypb.QuerySSAProjectResponse.Pagination:type_name -> ypb.Paging
	352,  // 555: ypb.ExtractDataToFileRequest.DataEntry.value:type_name -> ypb.ExtractableData
	381,  // 556: ypb.YsoClassGeneraterOptionsWithVerbose.BindOptionsEntry.value:type_name -> ypb.YsoClassOptionsResponseWithVerbose
	723,  // 557: ypb.SyntaxFlowRule.AlertMsgEntry.value:type_name -> ypb.AlertMessage
	723,  // 558: ypb.SyntaxFlowRuleInput.AlertMsgEntry.value:type_name -> ypb.AlertMessage
	4,    // 559: ypb.Yak.Version:input_type -> ypb.Empty
	679,  // 560: ypb.Yak.YakVersionAtLeast:input_type -> ypb.YakVersionAtLeastRequest
	655,  // 561: ypb.Yak.Echo:input_type -> ypb.EchoRequest
	657,  // 562: ypb.Yak.Handshake:input_type -> ypb.HandshakeRequest
	4,    // 563: ypb.Yak.VerifySystemCertificate:input_type -> ypb.Empty
	645,  // 564: ypb.Yak.MITM:input_type -> ypb.MITMRequest
	643,  // 565: ypb.Yak.SetMITMFilter:input_type -> ypb.SetMITMFilterRequest
	4,    // 566: ypb.Yak.GetMITMFilter:input_type -> ypb.Empty
	4,    // 567: ypb.Yak.ResetMITMFilter:input_type -> ypb.Empty
	4,    // 568: ypb.Yak.DownloadMITMCert:input_type -> ypb.Empty
	4,    // 569: ypb.Yak.DownloadMITMGMCert:input_type -> ypb.Empty
	852,  // 570: ypb.Yak.MITMV2:input_type -> ypb.MITMV2Request
	659,  // 571: ypb.Yak.OpenPort:input_type -> ypb.Input
	662,  // 572: ypb.Yak.Exec:input_type -> ypb.ExecRequest
	579,  // 573: ypb.Yak.QueryExecHistory:input_type -> ypb.ExecHistoryRequest
	4,    // 574: ypb.Yak.RemoveExecHistory:input_type -> ypb.Empty
	4,    // 575: ypb.Yak.LoadNucleiTemplates:input_type -> ypb.Empty
	4,    // 576: ypb.Yak.AutoUpdateYakModule:input_type -> ypb.Empty
	662,  // 577: ypb.Yak.ExecYakScript:input_type -> ypb.ExecRequest
	8,    // 578: ypb.Yak.ExecBatchYakScript:input_type -> ypb.ExecBatchYakScriptRequest
	4,    // 579: ypb.Yak.GetExecBatchYakScriptUnfinishedTask:input_type -> ypb.Empty
	318,  // 580: ypb.Yak.GetExecBatchYakScriptUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	318,  // 581: ypb.Yak.PopExecBatchYakScriptUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	319,  // 582: ypb.Yak.RecoverExecBatchYakScriptUnfinishedTask:input_type -> ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	535,  // 583: ypb.Yak.QueryYakScript:input_type -> ypb.QueryYakScriptRequest
	535,  // 584: ypb.Yak.QueryYakScriptByYakScriptName:input_type -> ypb.QueryYakScriptRequest
	539,  // 585: ypb.Yak.SaveYakScript:input_type -> ypb.YakScript
	7,    // 586: ypb.Yak.DeleteYakScript:input_type -> ypb.DeleteYakScriptRequest
	10,   // 587: ypb.Yak.GetYakScriptById:input_type -> ypb.GetYakScriptByIdRequest
	11,   // 588: ypb.Yak.GetYakScriptByName:input_type -> ypb.GetYakScriptByNameRequest
	12,   // 589: ypb.Yak.GetYakScriptByOnlineID:input_type -> ypb.GetYakScriptByOnlineIDRequest
	7,    // 590: ypb.Yak.IgnoreYakScript:input_type -> ypb.DeleteYakScriptRequest
	7,    // 591: ypb.Yak.UnIgnoreYakScript:input_type -> ypb.DeleteYakScriptRequest
	472,  // 592: ypb.Yak.ExportYakScript:input_type -> ypb.ExportYakScriptRequest
	473,  // 593: ypb.Yak.ExportYakScriptStream:input_type -> ypb.ExportYakScriptStreamRequest
	474,  // 594: ypb.Yak.ImportYakScriptStream:input_type -> ypb.ImportYakScriptStreamRequest
	402,  // 595: ypb.Yak.ExecutePacketYakScript:input_type -> ypb.ExecutePacketYakScriptParams
	403,  // 596: ypb.Yak.ExecuteBatchPacketYakScript:input_type -> ypb.ExecuteBatchPacketYakScriptParams
	4,    // 597: ypb.Yak.GetYakScriptTags:input_type -> ypb.Empty
	340,  // 598: ypb.Yak.QueryYakScriptLocalAndUser:input_type -> ypb.QueryYakScriptLocalAndUserRequest
	342,  // 599: ypb.Yak.QueryYakScriptByOnlineGroup:input_type -> ypb.QueryYakScriptByOnlineGroupRequest
	4,    // 600: ypb.Yak.QueryYakScriptLocalAll:input_type -> ypb.Empty
	343,  // 601: ypb.Yak.QueryYakScriptByNames:input_type -> ypb.QueryYakScriptByNamesRequest
	344,  // 602: ypb.Yak.QueryYakScriptByIsCore:input_type -> ypb.QueryYakScriptByIsCoreRequest
	347,  // 603: ypb.Yak.QueryYakScriptRiskDetailByCWE:input_type -> ypb.QueryYakScriptRiskDetailByCWERequest
	4,    // 604: ypb.Yak.YakScriptRiskTypeList:input_type -> ypb.Empty
	541,  // 605: ypb.Yak.SaveNewYakScript:input_type -> ypb.SaveNewYakScriptRequest
	542,  // 606: ypb.Yak.SaveYakScriptToOnline:input_type -> ypb.SaveYakScriptToOnlineRequest
	545,  // 607: ypb.Yak.ExportLocalYakScript:input_type -> ypb.ExportLocalYakScriptRequest
	545,  // 608: ypb.Yak.ExportLocalYakScriptStream:input_type -> ypb.ExportLocalYakScriptRequest
	548,  // 609: ypb.Yak.ImportYakScript:input_type -> ypb.ImportYakScriptRequest
	550,  // 610: ypb.Yak.SetYakScriptSkipUpdate:input_type -> ypb.SetYakScriptSkipUpdateRequest
	535,  // 611: ypb.Yak.QueryYakScriptSkipUpdate:input_type -> ypb.QueryYakScriptRequest
	552,  // 612: ypb.Yak.QueryYakScriptGroup:input_type -> ypb.QueryYakScriptGroupRequest
	555,  // 613: ypb.Yak.SaveYakScriptGroup:input_type -> ypb.SaveYakScriptGroupRequest
	556,  // 614: ypb.Yak.RenameYakScriptGroup:input_type -> ypb.RenameYakScriptGroupRequest
	557,  // 615: ypb.Yak.DeleteYakScriptGroup:input_type -> ypb.DeleteYakScriptGroupRequest
	535,  // 616: ypb.Yak.GetYakScriptGroup:input_type -> ypb.QueryYakScriptRequest
	559,  // 617: ypb.Yak.ResetYakScriptGroup:input_type -> ypb.ResetYakScriptGroupRequest
	560,  // 618: ypb.Yak.SetGroup:input_type -> ypb.SetGroupRequest
	610,  // 619: ypb.Yak.GetHTTPFlowByHash:input_type -> ypb.GetHTTPFlowByHashRequest
	611,  // 620: ypb.Yak.GetHTTPFlowById:input_type -> ypb.GetHTTPFlowByIdRequest
	613,  // 621: ypb.Yak.GetHTTPFlowBodyById:input_type -> ypb.GetHTTPFlowBodyByIdRequest
	612,  // 622: ypb.Yak.GetHTTPFlowByIds:input_type -> ypb.GetHTTPFlowByIdsRequest
	614,  // 623: ypb.Yak.QueryHTTPFlows:input_type -> ypb.QueryHTTPFlowRequest
	626,  // 624: ypb.Yak.DeleteHTTPFlows:input_type -> ypb.DeleteHTTPFlowRequest
	366,  // 625: ypb.Yak.SetTagForHTTPFlow:input_type -> ypb.SetTagForHTTPFlowRequest
	627,  // 626: ypb.Yak.QueryHTTPFlowsIds:input_type -> ypb.QueryHTTPFlowsIdsRequest
	635,  // 627: ypb.Yak.HTTPFlowsFieldGroup:input_type -> ypb.HTTPFlowsFieldGroupRequest
	637,  // 628: ypb.Yak.HTTPFlowsShare:input_type -> ypb.HTTPFlowsShareRequest
	639,  // 629: ypb.Yak.HTTPFlowsExtract:input_type -> ypb.HTTPFlowsExtractRequest
	667,  // 630: ypb.Yak.GetHTTPFlowBare:input_type -> ypb.HTTPFlowBareRequest
	624,  // 631: ypb.Yak.ExportHTTPFlows:input_type -> ypb.ExportHTTPFlowsRequest
	615,  // 632: ypb.Yak.HTTPFlowsToOnline:input_type -> ypb.HTTPFlowsToOnlineRequest
	614,  // 633: ypb.Yak.QueryHTTPFlowsProcessNames:input_type -> ypb.QueryHTTPFlowRequest
	616,  // 634: ypb.Yak.HTTPFlowsToOnlineBatch:input_type -> ypb.HTTPFlowsToOnlineBatchRequest
	618,  // 635: ypb.Yak.AnalyzeHTTPFlow:input_type -> ypb.AnalyzeHTTPFlowRequest
	599,  // 636: ypb.Yak.ExtractUrl:input_type -> ypb.FuzzerRequest
	396,  // 637: ypb.Yak.GetHistoryHTTPFuzzerTask:input_type -> ypb.GetHistoryHTTPFuzzerTaskRequest
	4,    // 638: ypb.Yak.QueryHistoryHTTPFuzzerTask:input_type -> ypb.Empty
	401,  // 639: ypb.Yak.QueryHistoryHTTPFuzzerTaskEx:input_type -> ypb.QueryHistoryHTTPFuzzerTaskExParams
	372,  // 640: ypb.Yak.DeleteHistoryHTTPFuzzerTask:input_type -> ypb.DeleteHistoryHTTPFuzzerTaskRequest
	599,  // 641: ypb.Yak.HTTPFuzzer:input_type -> ypb.FuzzerRequest
	598,  // 642: ypb.Yak.HTTPFuzzerSequence:input_type -> ypb.FuzzerRequests
	595,  // 643: ypb.Yak.PreloadHTTPFuzzerParams:input_type -> ypb.PreloadHTTPFuzzerParamsRequest
	588,  // 644: ypb.Yak.RenderVariables:input_type -> ypb.RenderVariablesRequest
	590,  // 645: ypb.Yak.MatchHTTPResponse:input_type -> ypb.MatchHTTPResponseParams
	594,  // 646: ypb.Yak.ExtractHTTPResponse:input_type -> ypb.ExtractHTTPResponseParams
	603,  // 647: ypb.Yak.RedirectRequest:input_type -> ypb.RedirectRequestParams
	448,  // 648: ypb.Yak.HTTPRequestMutate:input_type -> ypb.HTTPRequestMutateParams
	449,  // 649: ypb.Yak.HTTPResponseMutate:input_type -> ypb.HTTPResponseMutateParams
	331,  // 650: ypb.Yak.FixUploadPacket:input_type -> ypb.FixUploadPacketRequest
	331,  // 651: ypb.Yak.IsMultipartFormDataRequest:input_type -> ypb.FixUploadPacketRequest
	261,  // 652: ypb.Yak.GenerateExtractRule:input_type -> ypb.GenerateExtractRuleRequest
	260,  // 653: ypb.Yak.ExtractData:input_type -> ypb.ExtractDataRequest
	669,  // 654: ypb.Yak.ImportHTTPFuzzerTaskFromYaml:input_type -> ypb.ImportHTTPFuzzerTaskFromYamlRequest
	671,  // 655: ypb.Yak.ExportHTTPFuzzerTaskToYaml:input_type -> ypb.ExportHTTPFuzzerTaskToYamlRequest
	673,  // 656: ypb.Yak.RenderHTTPFuzzerPacket:input_type -> ypb.RenderHTTPFuzzerPacketRequest
	251,  // 657: ypb.Yak.SaveFuzzerLabel:input_type -> ypb.SaveFuzzerLabelRequest
	4,    // 658: ypb.Yak.QueryFuzzerLabel:input_type -> ypb.Empty
	254,  // 659: ypb.Yak.DeleteFuzzerLabel:input_type -> ypb.DeleteFuzzerLabelRequest
	255,  // 660: ypb.Yak.SaveFuzzerConfig:input_type -> ypb.SaveFuzzerConfigRequest
	256,  // 661: ypb.Yak.QueryFuzzerConfig:input_type -> ypb.QueryFuzzerConfigRequest
	259,  // 662: ypb.Yak.DeleteFuzzerConfig:input_type -> ypb.DeleteFuzzerConfigRequest
	264,  // 663: ypb.Yak.QueryHTTPFuzzerResponseByTaskId:input_type -> ypb.QueryHTTPFuzzerResponseByTaskIdRequest
	268,  // 664: ypb.Yak.CreateWebsocketFuzzer:input_type -> ypb.ClientWebsocketRequest
	266,  // 665: ypb.Yak.QueryWebsocketFlowByHTTPFlowWebsocketHash:input_type -> ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest
	267,  // 666: ypb.Yak.DeleteWebsocketFlowByHTTPFlowWebsocketHash:input_type -> ypb.DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest
	4,    // 667: ypb.Yak.DeleteWebsocketFlowAll:input_type -> ypb.Empty
	606,  // 668: ypb.Yak.ConvertFuzzerResponseToHTTPFlow:input_type -> ypb.FuzzerResponse
	582,  // 669: ypb.Yak.StringFuzzer:input_type -> ypb.StringFuzzerRequest
	584,  // 670: ypb.Yak.HTTPRequestAnalyzer:input_type -> ypb.HTTPRequestAnalysisMaterial
	564,  // 671: ypb.Yak.CreateSnippet:input_type -> ypb.SnippetsRequest
	565,  // 672: ypb.Yak.UpdateSnippet:input_type -> ypb.EditSnippetsRequest
	566,  // 673: ypb.Yak.DeleteSnippets:input_type -> ypb.QuerySnippetsRequest
	566,  // 674: ypb.Yak.QuerySnippets:input_type -> ypb.QuerySnippetsRequest
	568,  // 675: ypb.Yak.Codec:input_type -> ypb.CodecRequest
	570,  // 676: ypb.Yak.NewCodec:input_type -> ypb.CodecRequestFlow
	4,    // 677: ypb.Yak.GetAllCodecMethods:input_type -> ypb.Empty
	571,  // 678: ypb.Yak.SaveCodecFlow:input_type -> ypb.CustomizeCodecFlow
	572,  // 679: ypb.Yak.UpdateCodecFlow:input_type -> ypb.UpdateCodecFlowRequest
	573,  // 680: ypb.Yak.DeleteCodecFlow:input_type -> ypb.DeleteCodecFlowRequest
	4,    // 681: ypb.Yak.GetAllCodecFlow:input_type -> ypb.Empty
	158,  // 682: ypb.Yak.PacketPrettifyHelper:input_type -> ypb.PacketPrettifyHelperRequest
	529,  // 683: ypb.Yak.QueryPayload:input_type -> ypb.QueryPayloadRequest
	527,  // 684: ypb.Yak.QueryPayloadFromFile:input_type -> ypb.QueryPayloadFromFileRequest
	517,  // 685: ypb.Yak.DeletePayloadByFolder:input_type -> ypb.NameRequest
	525,  // 686: ypb.Yak.DeletePayloadByGroup:input_type -> ypb.DeletePayloadByGroupRequest
	526,  // 687: ypb.Yak.DeletePayload:input_type -> ypb.DeletePayloadRequest
	521,  // 688: ypb.Yak.SavePayload:input_type -> ypb.SavePayloadRequest
	521,  // 689: ypb.Yak.SavePayloadStream:input_type -> ypb.SavePayloadRequest
	521,  // 690: ypb.Yak.SavePayloadToFileStream:input_type -> ypb.SavePayloadRequest
	521,  // 691: ypb.Yak.SaveLargePayloadToFileStream:input_type -> ypb.SavePayloadRequest
	516,  // 692: ypb.Yak.RenamePayloadFolder:input_type -> ypb.RenameRequest
	516,  // 693: ypb.Yak.RenamePayloadGroup:input_type -> ypb.RenameRequest
	522,  // 694: ypb.Yak.UpdatePayload:input_type -> ypb.UpdatePayloadRequest
	523,  // 695: ypb.Yak.UpdatePayloadToFile:input_type -> ypb.UpdatePayloadToFileRequest
	524,  // 696: ypb.Yak.BackUpOrCopyPayloads:input_type -> ypb.BackUpOrCopyPayloadsRequest
	4,    // 697: ypb.Yak.GetAllPayloadGroup:input_type -> ypb.Empty
	520,  // 698: ypb.Yak.UpdateAllPayloadGroup:input_type -> ypb.UpdateAllPayloadGroupRequest
	532,  // 699: ypb.Yak.GetAllPayload:input_type -> ypb.GetAllPayloadRequest
	532,  // 700: ypb.Yak.GetAllPayloadFromFile:input_type -> ypb.GetAllPayloadRequest
	532,  // 701: ypb.Yak.ExportAllPayload:input_type -> ypb.GetAllPayloadRequest
	532,  // 702: ypb.Yak.ExportAllPayloadFromFile:input_type -> ypb.GetAllPayloadRequest
	517,  // 703: ypb.Yak.CreatePayloadFolder:input_type -> ypb.NameRequest
	517,  // 704: ypb.Yak.RemoveDuplicatePayloads:input_type -> ypb.NameRequest
	517,  // 705: ypb.Yak.CoverPayloadGroupToDatabase:input_type -> ypb.NameRequest
	517,  // 706: ypb.Yak.ConvertPayloadGroupToDatabase:input_type -> ypb.NameRequest
	4,    // 707: ypb.Yak.MigratePayloads:input_type -> ypb.Empty
	290,  // 708: ypb.Yak.ExportPayloadBatch:input_type -> ypb.ExportPayloadBatchRequest
	291,  // 709: ypb.Yak.UploadPayloadToOnline:input_type -> ypb.UploadPayloadToOnlineRequest
	292,  // 710: ypb.Yak.DownloadPayload:input_type -> ypb.DownloadPayloadRequest
	295,  // 711: ypb.Yak.ExportPayloadDBAndFile:input_type -> ypb.ExportPayloadDBAndFileRequest
	4,    // 712: ypb.Yak.GetYakitCompletionRaw:input_type -> ypb.Empty
	512,  // 713: ypb.Yak.GetYakVMBuildInMethodCompletion:input_type -> ypb.GetYakVMBuildInMethodCompletionRequest
	284,  // 714: ypb.Yak.StaticAnalyzeError:input_type -> ypb.StaticAnalyzeErrorRequest
	285,  // 715: ypb.Yak.YaklangCompileAndFormat:input_type -> ypb.YaklangCompileAndFormatRequest
	274,  // 716: ypb.Yak.YaklangLanguageSuggestion:input_type -> ypb.YaklangLanguageSuggestionRequest
	274,  // 717: ypb.Yak.YaklangLanguageFind:input_type -> ypb.YaklangLanguageSuggestionRequest
	781,  // 718: ypb.Yak.FuzzTagSuggestion:input_type -> ypb.FuzzTagSuggestionRequest
	273,  // 719: ypb.Yak.YaklangInspectInformation:input_type -> ypb.YaklangInspectInformationRequest
	283,  // 720: ypb.Yak.YaklangGetCliCodeFromDatabase:input_type -> ypb.YaklangGetCliCodeFromDatabaseRequest
	659,  // 721: ypb.Yak.YaklangTerminal:input_type -> ypb.Input
	506,  // 722: ypb.Yak.PortScan:input_type -> ypb.PortScanRequest
	4,    // 723: ypb.Yak.ViewPortScanCode:input_type -> ypb.Empty
	504,  // 724: ypb.Yak.SimpleDetect:input_type -> ypb.RecordPortScanRequest
	504,  // 725: ypb.Yak.SaveCancelSimpleDetect:input_type -> ypb.RecordPortScanRequest
	505,  // 726: ypb.Yak.SimpleDetectCreatReport:input_type -> ypb.CreatReportRequest
	325,  // 727: ypb.Yak.QuerySimpleDetectUnfinishedTask:input_type -> ypb.QueryUnfinishedTaskRequest
	329,  // 728: ypb.Yak.GetSimpleDetectRecordRequestById:input_type -> ypb.GetUnfinishedTaskDetailByIdRequest
	326,  // 729: ypb.Yak.DeleteSimpleDetectUnfinishedTask:input_type -> ypb.DeleteUnfinishedTaskRequest
	330,  // 730: ypb.Yak.RecoverSimpleDetectTask:input_type -> ypb.RecoverUnfinishedTaskRequest
	4,    // 731: ypb.Yak.GetSimpleDetectUnfinishedTask:input_type -> ypb.Empty
	318,  // 732: ypb.Yak.GetSimpleDetectUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	318,  // 733: ypb.Yak.PopSimpleDetectUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	319,  // 734: ypb.Yak.RecoverSimpleDetectUnfinishedTask:input_type -> ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	508,  // 735: ypb.Yak.QueryPorts:input_type -> ypb.QueryPortsRequest
	507,  // 736: ypb.Yak.DeletePorts:input_type -> ypb.DeletePortsRequest
	451,  // 737: ypb.Yak.QueryHosts:input_type -> ypb.QueryHostsRequest
	452,  // 738: ypb.Yak.DeleteHosts:input_type -> ypb.DeleteHostsRequest
	454,  // 739: ypb.Yak.QueryDomains:input_type -> ypb.QueryDomainsRequest
	455,  // 740: ypb.Yak.DeleteDomains:input_type -> ypb.DeleteDomainsRequest
	4,    // 741: ypb.Yak.QueryPortsGroup:input_type -> ypb.Empty
	500,  // 742: ypb.Yak.UpdateFromYakitResource:input_type -> ypb.UpdateFromYakitResourceRequest
	501,  // 743: ypb.Yak.UpdateFromGithub:input_type -> ypb.UpdateFromGithubRequest
	488,  // 744: ypb.Yak.AddToMenu:input_type -> ypb.AddToMenuRequest
	487,  // 745: ypb.Yak.RemoveFromMenu:input_type -> ypb.RemoveFromMenuRequest
	486,  // 746: ypb.Yak.YakScriptIsInMenu:input_type -> ypb.YakScriptIsInMenuRequest
	4,    // 747: ypb.Yak.GetAllMenuItem:input_type -> ypb.Empty
	4,    // 748: ypb.Yak.DeleteAllMenuItem:input_type -> ypb.Empty
	491,  // 749: ypb.Yak.ImportMenuItem:input_type -> ypb.ImportMenuItemRequest
	4,    // 750: ypb.Yak.ExportMenuItem:input_type -> ypb.Empty
	484,  // 751: ypb.Yak.GetMenuItemById:input_type -> ypb.GetMenuItemByIdRequest
	480,  // 752: ypb.Yak.QueryGroupsByYakScriptId:input_type -> ypb.QueryGroupsByYakScriptIdRequest
	489,  // 753: ypb.Yak.AddMenus:input_type -> ypb.AddMenuRequest
	490,  // 754: ypb.Yak.QueryAllMenuItem:input_type -> ypb.QueryAllMenuItemRequest
	490,  // 755: ypb.Yak.DeleteAllMenu:input_type -> ypb.QueryAllMenuItemRequest
	493,  // 756: ypb.Yak.AddToNavigation:input_type -> ypb.AddToNavigationRequest
	496,  // 757: ypb.Yak.GetAllNavigationItem:input_type -> ypb.GetAllNavigationRequest
	496,  // 758: ypb.Yak.DeleteAllNavigation:input_type -> ypb.GetAllNavigationRequest
	498,  // 759: ypb.Yak.AddOneNavigation:input_type -> ypb.AddOneNavigationRequest
	499,  // 760: ypb.Yak.QueryNavigationGroups:input_type -> ypb.QueryNavigationGroupsRequest
	478,  // 761: ypb.Yak.SaveMarkdownDocument:input_type -> ypb.SaveMarkdownDocumentRequest
	477,  // 762: ypb.Yak.GetMarkdownDocument:input_type -> ypb.GetMarkdownDocumentRequest
	477,  // 763: ypb.Yak.DeleteMarkdownDocument:input_type -> ypb.GetMarkdownDocumentRequest
	469,  // 764: ypb.Yak.StartBasicCrawler:input_type -> ypb.StartBasicCrawlerRequest
	4,    // 765: ypb.Yak.ViewBasicCrawlerCode:input_type -> ypb.Empty
	468,  // 766: ypb.Yak.GenerateWebsiteTree:input_type -> ypb.GenerateWebsiteTreeRequest
	465,  // 767: ypb.Yak.QueryYakScriptExecResult:input_type -> ypb.QueryYakScriptExecResultRequest
	4,    // 768: ypb.Yak.QueryYakScriptNameInExecResult:input_type -> ypb.Empty
	463,  // 769: ypb.Yak.DeleteYakScriptExecResult:input_type -> ypb.DeleteYakScriptExecResultRequest
	4,    // 770: ypb.Yak.DeleteYakScriptExec:input_type -> ypb.Empty
	447,  // 771: ypb.Yak.StartBrute:input_type -> ypb.StartBruteParams
	4,    // 772: ypb.Yak.GetAvailableBruteTypes:input_type -> ypb.Empty
	439,  // 773: ypb.Yak.GetTunnelServerExternalIP:input_type -> ypb.GetTunnelServerExternalIPParams
	437,  // 774: ypb.Yak.VerifyTunnelServerDomain:input_type -> ypb.VerifyTunnelServerDomainParams
	441,  // 775: ypb.Yak.StartFacades:input_type -> ypb.StartFacadesParams
	444,  // 776: ypb.Yak.StartFacadesWithYsoObject:input_type -> ypb.StartFacadesWithYsoParams
	442,  // 777: ypb.Yak.ApplyClassToFacades:input_type -> ypb.ApplyClassToFacadesParamsWithVerbose
	390,  // 778: ypb.Yak.BytesToBase64:input_type -> ypb.BytesToBase64Request
	422,  // 779: ypb.Yak.ConfigGlobalReverse:input_type -> ypb.ConfigGlobalReverseParams
	4,    // 780: ypb.Yak.AvailableLocalAddr:input_type -> ypb.Empty
	4,    // 781: ypb.Yak.GetGlobalReverseServer:input_type -> ypb.Empty
	426,  // 782: ypb.Yak.QueryRisks:input_type -> ypb.QueryRisksRequest
	424,  // 783: ypb.Yak.QueryRisk:input_type -> ypb.QueryRiskRequest
	423,  // 784: ypb.Yak.DeleteRisk:input_type -> ypb.DeleteRiskRequest
	4,    // 785: ypb.Yak.QueryAvailableRiskType:input_type -> ypb.Empty
	4,    // 786: ypb.Yak.QueryAvailableRiskLevel:input_type -> ypb.Empty
	4,    // 787: ypb.Yak.QueryRiskTableStats:input_type -> ypb.Empty
	4,    // 788: ypb.Yak.ResetRiskTableStats:input_type -> ypb.Empty
	4,    // 789: ypb.Yak.QueryAvailableTarget:input_type -> ypb.Empty
	428,  // 790: ypb.Yak.QueryNewRisk:input_type -> ypb.QueryNewRiskRequest
	434,  // 791: ypb.Yak.NewRiskRead:input_type -> ypb.NewRiskReadRequest
	435,  // 792: ypb.Yak.UploadRiskToOnline:input_type -> ypb.UploadRiskToOnlineRequest
	436,  // 793: ypb.Yak.SetTagForRisk:input_type -> ypb.SetTagForRiskRequest
	4,    // 794: ypb.Yak.QueryRiskTags:input_type -> ypb.Empty
	4,    // 795: ypb.Yak.RiskFieldGroup:input_type -> ypb.Empty
	435,  // 796: ypb.Yak.RiskFeedbackToOnline:input_type -> ypb.UploadRiskToOnlineRequest
	364,  // 797: ypb.Yak.QueryReports:input_type -> ypb.QueryReportsRequest
	361,  // 798: ypb.Yak.QueryReport:input_type -> ypb.QueryReportRequest
	362,  // 799: ypb.Yak.DeleteReport:input_type -> ypb.DeleteReportRequest
	4,    // 800: ypb.Yak.QueryAvailableReportFrom:input_type -> ypb.Empty
	462,  // 801: ypb.Yak.DownloadReport:input_type -> ypb.DownloadReportRequest
	4,    // 802: ypb.Yak.GetAllYsoGadgetOptions:input_type -> ypb.Empty
	384,  // 803: ypb.Yak.GetAllYsoClassOptions:input_type -> ypb.YsoOptionsRequerstWithVerbose
	384,  // 804: ypb.Yak.GetAllYsoClassGeneraterOptions:input_type -> ypb.YsoOptionsRequerstWithVerbose
	384,  // 805: ypb.Yak.GenerateYsoCode:input_type -> ypb.YsoOptionsRequerstWithVerbose
	384,  // 806: ypb.Yak.GenerateYsoBytes:input_type -> ypb.YsoOptionsRequerstWithVerbose
	386,  // 807: ypb.Yak.YsoDump:input_type -> ypb.YsoBytesObject
	404,  // 808: ypb.Yak.CreateWebShell:input_type -> ypb.WebShell
	412,  // 809: ypb.Yak.DeleteWebShell:input_type -> ypb.DeleteWebShellRequest
	404,  // 810: ypb.Yak.UpdateWebShell:input_type -> ypb.WebShell
	409,  // 811: ypb.Yak.QueryWebShells:input_type -> ypb.QueryWebShellsRequest
	407,  // 812: ypb.Yak.Ping:input_type -> ypb.WebShellRequest
	407,  // 813: ypb.Yak.GetBasicInfo:input_type -> ypb.WebShellRequest
	405,  // 814: ypb.Yak.GenerateWebShell:input_type -> ypb.ShellGenerate
	413,  // 815: ypb.Yak.SetYakBridgeLogServer:input_type -> ypb.YakDNSLogBridgeAddr
	4,    // 816: ypb.Yak.GetCurrentYakBridgeLogServer:input_type -> ypb.Empty
	413,  // 817: ypb.Yak.RequireDNSLogDomain:input_type -> ypb.YakDNSLogBridgeAddr
	414,  // 818: ypb.Yak.RequireDNSLogDomainByScript:input_type -> ypb.RequireDNSLogDomainByScriptRequest
	415,  // 819: ypb.Yak.QueryDNSLogByToken:input_type -> ypb.QueryDNSLogByTokenRequest
	414,  // 820: ypb.Yak.QueryDNSLogTokenByScript:input_type -> ypb.RequireDNSLogDomainByScriptRequest
	4,    // 821: ypb.Yak.RequireICMPRandomLength:input_type -> ypb.Empty
	392,  // 822: ypb.Yak.QueryICMPTrigger:input_type -> ypb.QueryICMPTriggerRequest
	4,    // 823: ypb.Yak.RequireRandomPortToken:input_type -> ypb.Empty
	370,  // 824: ypb.Yak.QueryRandomPortTrigger:input_type -> ypb.QueryRandomPortTriggerRequest
	4,    // 825: ypb.Yak.QuerySupportedDnsLogPlatforms:input_type -> ypb.Empty
	4,    // 826: ypb.Yak.GetAvailableYakScriptTags:input_type -> ypb.Empty
	4,    // 827: ypb.Yak.ForceUpdateAvailableYakScriptTags:input_type -> ypb.Empty
	356,  // 828: ypb.Yak.ExecYakitPluginsByYakScriptFilter:input_type -> ypb.ExecYakitPluginsByYakScriptFilterRequest
	357,  // 829: ypb.Yak.GenerateYakCodeByPacket:input_type -> ypb.GenerateYakCodeByPacketRequest
	358,  // 830: ypb.Yak.GenerateCSRFPocByPacket:input_type -> ypb.GenerateCSRFPocByPacketRequest
	4,    // 831: ypb.Yak.ExportMITMReplacerRules:input_type -> ypb.Empty
	354,  // 832: ypb.Yak.ImportMITMReplacerRules:input_type -> ypb.ImportMITMReplacerRulesRequest
	4,    // 833: ypb.Yak.GetCurrentRules:input_type -> ypb.Empty
	353,  // 834: ypb.Yak.SetCurrentRules:input_type -> ypb.MITMContentReplacers
	856,  // 835: ypb.Yak.QueryMITMReplacerRules:input_type -> ypb.QueryMITMReplacerRulesRequest
	677,  // 836: ypb.Yak.GenerateURL:input_type -> ypb.GenerateURLRequest
	351,  // 837: ypb.Yak.ExtractDataToFile:input_type -> ypb.ExtractDataToFileRequest
	334,  // 838: ypb.Yak.AutoDecode:input_type -> ypb.AutoDecodeRequest
	4,    // 839: ypb.Yak.GetSystemProxy:input_type -> ypb.Empty
	316,  // 840: ypb.Yak.SetSystemProxy:input_type -> ypb.SetSystemProxyRequest
	312,  // 841: ypb.Yak.GetKey:input_type -> ypb.GetKeyRequest
	311,  // 842: ypb.Yak.SetKey:input_type -> ypb.SetKeyRequest
	312,  // 843: ypb.Yak.DelKey:input_type -> ypb.GetKeyRequest
	4,    // 844: ypb.Yak.GetAllProcessEnvKey:input_type -> ypb.Empty
	311,  // 845: ypb.Yak.SetProcessEnvKey:input_type -> ypb.SetKeyRequest
	312,  // 846: ypb.Yak.GetProjectKey:input_type -> ypb.GetKeyRequest
	311,  // 847: ypb.Yak.SetProjectKey:input_type -> ypb.SetKeyRequest
	4,    // 848: ypb.Yak.GetOnlineProfile:input_type -> ypb.Empty
	310,  // 849: ypb.Yak.SetOnlineProfile:input_type -> ypb.OnlineProfile
	299,  // 850: ypb.Yak.DownloadOnlinePluginById:input_type -> ypb.DownloadOnlinePluginByIdRequest
	300,  // 851: ypb.Yak.DownloadOnlinePluginByIds:input_type -> ypb.DownloadOnlinePluginByIdsRequest
	298,  // 852: ypb.Yak.DownloadOnlinePluginAll:input_type -> ypb.DownloadOnlinePluginByTokenRequest
	294,  // 853: ypb.Yak.DeletePluginByUserID:input_type -> ypb.DeletePluginByUserIDRequest
	4,    // 854: ypb.Yak.DeleteAllLocalPlugins:input_type -> ypb.Empty
	4,    // 855: ypb.Yak.GetYakScriptTagsAndType:input_type -> ypb.Empty
	296,  // 856: ypb.Yak.DeleteLocalPluginsByWhere:input_type -> ypb.DeleteLocalPluginsByWhereRequest
	303,  // 857: ypb.Yak.DownloadOnlinePluginByScriptNames:input_type -> ypb.DownloadOnlinePluginByScriptNamesRequest
	301,  // 858: ypb.Yak.DownloadOnlinePlugins:input_type -> ypb.DownloadOnlinePluginsRequest
	301,  // 859: ypb.Yak.DownloadOnlinePluginBatch:input_type -> ypb.DownloadOnlinePluginsRequest
	303,  // 860: ypb.Yak.DownloadOnlinePluginByPluginName:input_type -> ypb.DownloadOnlinePluginByScriptNamesRequest
	306,  // 861: ypb.Yak.DownloadOnlinePluginByUUID:input_type -> ypb.DownloadOnlinePluginByUUIDRequest
	307,  // 862: ypb.Yak.QueryOnlinePlugins:input_type -> ypb.QueryOnlinePluginsRequest
	271,  // 863: ypb.Yak.ExecPacketScan:input_type -> ypb.ExecPacketScanRequest
	4,    // 864: ypb.Yak.GetEngineDefaultProxy:input_type -> ypb.Empty
	270,  // 865: ypb.Yak.SetEngineDefaultProxy:input_type -> ypb.DefaultProxyResult
	4,    // 866: ypb.Yak.GetMachineID:input_type -> ypb.Empty
	4,    // 867: ypb.Yak.GetLicense:input_type -> ypb.Empty
	665,  // 868: ypb.Yak.CheckLicense:input_type -> ypb.CheckLicenseRequest
	248,  // 869: ypb.Yak.GetRequestBodyByHTTPFlowID:input_type -> ypb.DownloadBodyByHTTPFlowIDRequest
	248,  // 870: ypb.Yak.GetResponseBodyByHTTPFlowID:input_type -> ypb.DownloadBodyByHTTPFlowIDRequest
	247,  // 871: ypb.Yak.GetHTTPPacketBody:input_type -> ypb.GetHTTPPacketBodyRequest
	245,  // 872: ypb.Yak.RegisterFacadesHTTP:input_type -> ypb.RegisterFacadesHTTPRequest
	244,  // 873: ypb.Yak.ResetAndInvalidUserData:input_type -> ypb.ResetAndInvalidUserDataRequest
	241,  // 874: ypb.Yak.CreateYaklangShell:input_type -> ypb.YaklangShellRequest
	240,  // 875: ypb.Yak.AttachCombinedOutput:input_type -> ypb.AttachCombinedOutputRequest
	4,    // 876: ypb.Yak.IsPrivilegedForNetRaw:input_type -> ypb.Empty
	4,    // 877: ypb.Yak.PromotePermissionForUserPcap:input_type -> ypb.Empty
	234,  // 878: ypb.Yak.SetCurrentProject:input_type -> ypb.SetCurrentProjectRequest
	4,    // 879: ypb.Yak.GetCurrentProject:input_type -> ypb.Empty
	235,  // 880: ypb.Yak.GetCurrentProjectEx:input_type -> ypb.GetCurrentProjectExRequest
	231,  // 881: ypb.Yak.GetProjects:input_type -> ypb.GetProjectsRequest
	229,  // 882: ypb.Yak.NewProject:input_type -> ypb.NewProjectRequest
	229,  // 883: ypb.Yak.UpdateProject:input_type -> ypb.NewProjectRequest
	228,  // 884: ypb.Yak.IsProjectNameValid:input_type -> ypb.IsProjectNameValidRequest
	227,  // 885: ypb.Yak.RemoveProject:input_type -> ypb.RemoveProjectRequest
	236,  // 886: ypb.Yak.DeleteProject:input_type -> ypb.DeleteProjectRequest
	4,    // 887: ypb.Yak.GetDefaultProject:input_type -> ypb.Empty
	237,  // 888: ypb.Yak.GetDefaultProjectEx:input_type -> ypb.GetDefaultProjectExRequest
	238,  // 889: ypb.Yak.QueryProjectDetail:input_type -> ypb.QueryProjectDetailRequest
	4,    // 890: ypb.Yak.GetTemporaryProject:input_type -> ypb.Empty
	239,  // 891: ypb.Yak.GetTemporaryProjectEx:input_type -> ypb.GetTemporaryProjectExRequest
	223,  // 892: ypb.Yak.ExportProject:input_type -> ypb.ExportProjectRequest
	225,  // 893: ypb.Yak.ImportProject:input_type -> ypb.ImportProjectRequest
	4,    // 894: ypb.Yak.MigrateLegacyDatabase:input_type -> ypb.Empty
	219,  // 895: ypb.Yak.QueryMITMRuleExtractedData:input_type -> ypb.QueryMITMRuleExtractedDataRequest
	221,  // 896: ypb.Yak.ExportMITMRuleExtractedData:input_type -> ypb.ExportMITMRuleExtractedDataRequest
	203,  // 897: ypb.Yak.ImportChaosMakerRules:input_type -> ypb.ImportChaosMakerRulesRequest
	211,  // 898: ypb.Yak.QueryChaosMakerRule:input_type -> ypb.QueryChaosMakerRuleRequest
	210,  // 899: ypb.Yak.DeleteChaosMakerRuleByID:input_type -> ypb.DeleteChaosMakerRuleByIDRequest
	207,  // 900: ypb.Yak.ExecuteChaosMakerRule:input_type -> ypb.ExecuteChaosMakerRuleRequest
	205,  // 901: ypb.Yak.IsRemoteAddrAvailable:input_type -> ypb.IsRemoteAddrAvailableRequest
	205,  // 902: ypb.Yak.ConnectVulinboxAgent:input_type -> ypb.IsRemoteAddrAvailableRequest
	171,  // 903: ypb.Yak.GetRegisteredVulinboxAgent:input_type -> ypb.GetRegisteredAgentRequest
	170,  // 904: ypb.Yak.DisconnectVulinboxAgent:input_type -> ypb.DisconnectVulinboxAgentRequest
	216,  // 905: ypb.Yak.IsCVEDatabaseReady:input_type -> ypb.IsCVEDatabaseReadyRequest
	214,  // 906: ypb.Yak.UpdateCVEDatabase:input_type -> ypb.UpdateCVEDatabaseRequest
	213,  // 907: ypb.Yak.ExportsProfileDatabase:input_type -> ypb.ExportsProfileDatabaseRequest
	212,  // 908: ypb.Yak.ImportsProfileDatabase:input_type -> ypb.ImportsProfileDatabaseRequest
	196,  // 909: ypb.Yak.QueryCVE:input_type -> ypb.QueryCVERequest
	195,  // 910: ypb.Yak.GetCVE:input_type -> ypb.GetCVERequest
	201,  // 911: ypb.Yak.SaveTextToTemporalFile:input_type -> ypb.SaveTextToTemporalFileRequest
	193,  // 912: ypb.Yak.IsScrecorderReady:input_type -> ypb.IsScrecorderReadyRequest
	192,  // 913: ypb.Yak.InstallScrecorder:input_type -> ypb.InstallScrecorderRequest
	191,  // 914: ypb.Yak.StartScrecorder:input_type -> ypb.StartScrecorderRequest
	186,  // 915: ypb.Yak.QueryScreenRecorders:input_type -> ypb.QueryScreenRecorderRequest
	186,  // 916: ypb.Yak.DeleteScreenRecorders:input_type -> ypb.QueryScreenRecorderRequest
	187,  // 917: ypb.Yak.UploadScreenRecorders:input_type -> ypb.UploadScreenRecorderRequest
	188,  // 918: ypb.Yak.GetOneScreenRecorders:input_type -> ypb.GetOneScreenRecorderRequest
	189,  // 919: ypb.Yak.UpdateScreenRecorders:input_type -> ypb.UpdateScreenRecorderRequest
	176,  // 920: ypb.Yak.IsVulinboxReady:input_type -> ypb.IsVulinboxReadyRequest
	178,  // 921: ypb.Yak.InstallVulinbox:input_type -> ypb.InstallVulinboxRequest
	179,  // 922: ypb.Yak.StartVulinbox:input_type -> ypb.StartVulinboxRequest
	180,  // 923: ypb.Yak.GenQualityInspectionReport:input_type -> ypb.GenQualityInspectionReportRequest
	184,  // 924: ypb.Yak.HTTPRequestBuilder:input_type -> ypb.HTTPRequestBuilderParams
	181,  // 925: ypb.Yak.DebugPlugin:input_type -> ypb.DebugPluginRequest
	173,  // 926: ypb.Yak.SmokingEvaluatePlugin:input_type -> ypb.SmokingEvaluatePluginRequest
	675,  // 927: ypb.Yak.SmokingEvaluatePluginBatch:input_type -> ypb.SmokingEvaluatePluginBatchRequest
	4,    // 928: ypb.Yak.GetSystemDefaultDnsServers:input_type -> ypb.Empty
	168,  // 929: ypb.Yak.DiagnoseNetwork:input_type -> ypb.DiagnoseNetworkRequest
	160,  // 930: ypb.Yak.DiagnoseNetworkDNS:input_type -> ypb.DiagnoseNetworkDNSRequest
	682,  // 931: ypb.Yak.TraceRoute:input_type -> ypb.TraceRouteRequest
	162,  // 932: ypb.Yak.GetGlobalNetworkConfig:input_type -> ypb.GetGlobalNetworkConfigRequest
	165,  // 933: ypb.Yak.SetGlobalNetworkConfig:input_type -> ypb.GlobalNetworkConfig
	161,  // 934: ypb.Yak.ResetGlobalNetworkConfig:input_type -> ypb.ResetGlobalNetworkConfigRequest
	163,  // 935: ypb.Yak.ValidP12PassWord:input_type -> ypb.ValidP12PassWordRequest
	154,  // 936: ypb.Yak.RequestYakURL:input_type -> ypb.RequestYakURLParams
	697,  // 937: ypb.Yak.ReadFile:input_type -> ypb.ReadFileRequest
	140,  // 938: ypb.Yak.GetPcapMetadata:input_type -> ypb.PcapMetadataRequest
	151,  // 939: ypb.Yak.PcapX:input_type -> ypb.PcapXRequest
	150,  // 940: ypb.Yak.QueryTrafficSession:input_type -> ypb.QueryTrafficSessionRequest
	142,  // 941: ypb.Yak.QueryTrafficPacket:input_type -> ypb.QueryTrafficPacketRequest
	143,  // 942: ypb.Yak.QueryTrafficTCPReassembled:input_type -> ypb.QueryTrafficTCPReassembledRequest
	680,  // 943: ypb.Yak.ParseTraffic:input_type -> ypb.ParseTrafficRequest
	138,  // 944: ypb.Yak.DuplexConnection:input_type -> ypb.DuplexConnectionRequest
	137,  // 945: ypb.Yak.HybridScan:input_type -> ypb.HybridScanRequest
	131,  // 946: ypb.Yak.QueryHybridScanTask:input_type -> ypb.QueryHybridScanTaskRequest
	128,  // 947: ypb.Yak.DeleteHybridScanTask:input_type -> ypb.DeleteHybridScanTaskRequest
	125,  // 948: ypb.Yak.GetSpaceEngineStatus:input_type -> ypb.GetSpaceEngineStatusRequest
	124,  // 949: ypb.Yak.GetSpaceEngineAccountStatus:input_type -> ypb.GetSpaceEngineAccountStatusRequest
	167,  // 950: ypb.Yak.GetSpaceEngineAccountStatusV2:input_type -> ypb.ThirdPartyApplicationConfig
	127,  // 951: ypb.Yak.FetchPortAssetFromSpaceEngine:input_type -> ypb.FetchPortAssetFromSpaceEngineRequest
	684,  // 952: ypb.Yak.EvaluateExpression:input_type -> ypb.EvaluateExpressionRequest
	686,  // 953: ypb.Yak.EvaluateMultiExpression:input_type -> ypb.EvaluateMultiExpressionRequest
	4,    // 954: ypb.Yak.GetThirdPartyAppConfigTemplate:input_type -> ypb.Empty
	4,    // 955: ypb.Yak.CheckHahValidAiConfig:input_type -> ypb.Empty
	842,  // 956: ypb.Yak.ListAiModel:input_type -> ypb.ListAiModelRequest
	691,  // 957: ypb.Yak.GetFingerprint:input_type -> ypb.GetFingerprintRequest
	693,  // 958: ypb.Yak.AddFingerprint:input_type -> ypb.AddFingerprintRequest
	695,  // 959: ypb.Yak.ModifyFingerprint:input_type -> ypb.ModifyFingerprintRequest
	707,  // 960: ypb.Yak.QueryFingerprint:input_type -> ypb.QueryFingerprintRequest
	709,  // 961: ypb.Yak.DeleteFingerprint:input_type -> ypb.DeleteFingerprintRequest
	711,  // 962: ypb.Yak.UpdateFingerprint:input_type -> ypb.UpdateFingerprintRequest
	710,  // 963: ypb.Yak.CreateFingerprint:input_type -> ypb.CreateFingerprintRequest
	4,    // 964: ypb.Yak.RecoverBuiltinFingerprint:input_type -> ypb.Empty
	712,  // 965: ypb.Yak.CreateFingerprintGroup:input_type -> ypb.FingerprintGroup
	4,    // 966: ypb.Yak.GetAllFingerprintGroup:input_type -> ypb.Empty
	714,  // 967: ypb.Yak.RenameFingerprintGroup:input_type -> ypb.RenameFingerprintGroupRequest
	715,  // 968: ypb.Yak.DeleteFingerprintGroup:input_type -> ypb.DeleteFingerprintGroupRequest
	716,  // 969: ypb.Yak.BatchUpdateFingerprintToGroup:input_type -> ypb.BatchUpdateFingerprintToGroupRequest
	717,  // 970: ypb.Yak.GetFingerprintGroupSetByFilter:input_type -> ypb.GetFingerprintGroupSetRequest
	718,  // 971: ypb.Yak.ExportFingerprint:input_type -> ypb.ExportFingerprintRequest
	719,  // 972: ypb.Yak.ImportFingerprint:input_type -> ypb.ImportFingerprintRequest
	699,  // 973: ypb.Yak.GetReverseShellProgramList:input_type -> ypb.GetReverseShellProgramListRequest
	701,  // 974: ypb.Yak.GenerateReverseShellCommand:input_type -> ypb.GenerateReverseShellCommandRequest
	721,  // 975: ypb.Yak.QuerySyntaxFlowRule:input_type -> ypb.QuerySyntaxFlowRuleRequest
	736,  // 976: ypb.Yak.CreateSyntaxFlowRule:input_type -> ypb.CreateSyntaxFlowRuleRequest
	736,  // 977: ypb.Yak.CreateSyntaxFlowRuleEx:input_type -> ypb.CreateSyntaxFlowRuleRequest
	738,  // 978: ypb.Yak.UpdateSyntaxFlowRule:input_type -> ypb.UpdateSyntaxFlowRuleRequest
	738,  // 979: ypb.Yak.UpdateSyntaxFlowRuleEx:input_type -> ypb.UpdateSyntaxFlowRuleRequest
	741,  // 980: ypb.Yak.DeleteSyntaxFlowRule:input_type -> ypb.DeleteSyntaxFlowRuleRequest
	742,  // 981: ypb.Yak.CheckSyntaxFlowRuleUpdate:input_type -> ypb.CheckSyntaxFlowRuleUpdateRequest
	744,  // 982: ypb.Yak.ApplySyntaxFlowRuleUpdate:input_type -> ypb.ApplySyntaxFlowRuleUpdateRequest
	748,  // 983: ypb.Yak.QuerySyntaxFlowRuleGroup:input_type -> ypb.QuerySyntaxFlowRuleGroupRequest
	755,  // 984: ypb.Yak.DeleteSyntaxFlowRuleGroup:input_type -> ypb.DeleteSyntaxFlowRuleGroupRequest
	750,  // 985: ypb.Yak.CreateSyntaxFlowRuleGroup:input_type -> ypb.CreateSyntaxFlowGroupRequest
	751,  // 986: ypb.Yak.UpdateSyntaxFlowRuleGroup:input_type -> ypb.UpdateSyntaxFlowRuleGroupRequest
	752,  // 987: ypb.Yak.UpdateSyntaxFlowRuleAndGroup:input_type -> ypb.UpdateSyntaxFlowRuleAndGroupRequest
	753,  // 988: ypb.Yak.QuerySyntaxFlowSameGroup:input_type -> ypb.QuerySyntaxFlowSameGroupRequest
	756,  // 989: ypb.Yak.SyntaxFlowRuleToOnline:input_type -> ypb.SyntaxFlowRuleToOnlineRequest
	758,  // 990: ypb.Yak.DownloadSyntaxFlowRule:input_type -> ypb.DownloadSyntaxFlowRuleRequest
	759,  // 991: ypb.Yak.SyntaxFlowScan:input_type -> ypb.SyntaxFlowScanRequest
	760,  // 992: ypb.Yak.QuerySyntaxFlowScanTask:input_type -> ypb.QuerySyntaxFlowScanTaskRequest
	764,  // 993: ypb.Yak.DeleteSyntaxFlowScanTask:input_type -> ypb.DeleteSyntaxFlowScanTaskRequest
	767,  // 994: ypb.Yak.QuerySyntaxFlowResult:input_type -> ypb.QuerySyntaxFlowResultRequest
	770,  // 995: ypb.Yak.DeleteSyntaxFlowResult:input_type -> ypb.DeleteSyntaxFlowResultRequest
	732,  // 996: ypb.Yak.QuerySSAPrograms:input_type -> ypb.QuerySSAProgramRequest
	733,  // 997: ypb.Yak.UpdateSSAProgram:input_type -> ypb.UpdateSSAProgramRequest
	734,  // 998: ypb.Yak.DeleteSSAPrograms:input_type -> ypb.DeleteSSAProgramRequest
	784,  // 999: ypb.Yak.QuerySSARisks:input_type -> ypb.QuerySSARisksRequest
	786,  // 1000: ypb.Yak.QueryNewSSARisks:input_type -> ypb.QueryNewSSARisksRequest
	788,  // 1001: ypb.Yak.DeleteSSARisks:input_type -> ypb.DeleteSSARisksRequest
	789,  // 1002: ypb.Yak.UpdateSSARiskTags:input_type -> ypb.UpdateSSARiskTagsRequest
	4,    // 1003: ypb.Yak.GetSSARiskFieldGroup:input_type -> ypb.Empty
	791,  // 1004: ypb.Yak.NewSSARiskRead:input_type -> ypb.NewSSARiskReadRequest
	728,  // 1005: ypb.Yak.SSARiskDiff:input_type -> ypb.SSARiskDiffRequest
	796,  // 1006: ypb.Yak.CreateSSARiskDisposals:input_type -> ypb.CreateSSARiskDisposalsRequest
	798,  // 1007: ypb.Yak.QuerySSARiskDisposals:input_type -> ypb.QuerySSARiskDisposalsRequest
	800,  // 1008: ypb.Yak.UpdateSSARiskDisposals:input_type -> ypb.UpdateSSARiskDisposalsRequest
	802,  // 1009: ypb.Yak.DeleteSSARiskDisposals:input_type -> ypb.DeleteSSARiskDisposalsRequest
	804,  // 1010: ypb.Yak.GetSSARiskDisposal:input_type -> ypb.GetSSARiskDisposalRequest
	793,  // 1011: ypb.Yak.SSARiskFeedbackToOnline:input_type -> ypb.SSARiskFeedbackToOnlineRequest
	862,  // 1012: ypb.Yak.GenerateSSAReport:input_type -> ypb.GenerateSSAReportRequest
	869,  // 1013: ypb.Yak.CreateSSAProject:input_type -> ypb.CreateSSAProjectRequest
	871,  // 1014: ypb.Yak.UpdateSSAProject:input_type -> ypb.UpdateSSAProjectRequest
	873,  // 1015: ypb.Yak.DeleteSSAProject:input_type -> ypb.DeleteSSAProjectRequest
	875,  // 1016: ypb.Yak.QuerySSAProject:input_type -> ypb.QuerySSAProjectRequest
	4,    // 1017: ypb.Yak.GetAllPluginEnv:input_type -> ypb.Empty
	772,  // 1018: ypb.Yak.QueryPluginEnv:input_type -> ypb.QueryPluginEnvRequest
	773,  // 1019: ypb.Yak.CreatePluginEnv:input_type -> ypb.PluginEnvData
	773,  // 1020: ypb.Yak.SetPluginEnv:input_type -> ypb.PluginEnvData
	774,  // 1021: ypb.Yak.DeletePluginEnv:input_type -> ypb.DeletePluginEnvRequest
	775,  // 1022: ypb.Yak.GetAllFuzztagInfo:input_type -> ypb.GetAllFuzztagInfoRequest
	779,  // 1023: ypb.Yak.GenerateFuzztag:input_type -> ypb.GenerateFuzztagRequest
	806,  // 1024: ypb.Yak.ExportSyntaxFlows:input_type -> ypb.ExportSyntaxFlowsRequest
	807,  // 1025: ypb.Yak.ImportSyntaxFlows:input_type -> ypb.ImportSyntaxFlowsRequest
	809,  // 1026: ypb.Yak.CreateHotPatchTemplate:input_type -> ypb.HotPatchTemplate
	812,  // 1027: ypb.Yak.DeleteHotPatchTemplate:input_type -> ypb.DeleteHotPatchTemplateRequest
	811,  // 1028: ypb.Yak.UpdateHotPatchTemplate:input_type -> ypb.UpdateHotPatchTemplateRequest
	810,  // 1029: ypb.Yak.QueryHotPatchTemplate:input_type -> ypb.HotPatchTemplateRequest
	817,  // 1030: ypb.Yak.QueryHotPatchTemplateList:input_type -> ypb.QueryHotPatchTemplateListRequest
	819,  // 1031: ypb.Yak.GroupTableColumn:input_type -> ypb.GroupTableColumnRequest
	821,  // 1032: ypb.Yak.UploadHotPatchTemplateToOnline:input_type -> ypb.UploadHotPatchTemplateToOnlineRequest
	822,  // 1033: ypb.Yak.DownloadHotPatchTemplate:input_type -> ypb.DownloadHotPatchTemplateRequest
	643,  // 1034: ypb.Yak.SetMITMHijackFilter:input_type -> ypb.SetMITMFilterRequest
	4,    // 1035: ypb.Yak.GetMITMHijackFilter:input_type -> ypb.Empty
	4,    // 1036: ypb.Yak.ResetMITMHijackFilter:input_type -> ypb.Empty
	823,  // 1037: ypb.Yak.ExportHTTPFlowStream:input_type -> ypb.ExportHTTPFlowStreamRequest
	825,  // 1038: ypb.Yak.ImportHTTPFlowStream:input_type -> ypb.ImportHTTPFlowStreamRequest
	830,  // 1039: ypb.Yak.CreateNote:input_type -> ypb.CreateNoteRequest
	832,  // 1040: ypb.Yak.UpdateNote:input_type -> ypb.UpdateNoteRequest
	833,  // 1041: ypb.Yak.DeleteNote:input_type -> ypb.DeleteNoteRequest
	834,  // 1042: ypb.Yak.QueryNote:input_type -> ypb.QueryNoteRequest
	836,  // 1043: ypb.Yak.SearchNoteContent:input_type -> ypb.SearchNoteContentRequest
	838,  // 1044: ypb.Yak.ImportNote:input_type -> ypb.ImportNoteRequest
	840,  // 1045: ypb.Yak.ExportNote:input_type -> ypb.ExportNoteRequest
	105,  // 1046: ypb.Yak.StartAIReAct:input_type -> ypb.AIInputEvent
	105,  // 1047: ypb.Yak.StartAITask:input_type -> ypb.AIInputEvent
	113,  // 1048: ypb.Yak.QueryAITask:input_type -> ypb.AITaskQueryRequest
	115,  // 1049: ypb.Yak.DeleteAITask:input_type -> ypb.AITaskDeleteRequest
	111,  // 1050: ypb.Yak.QueryAIEvent:input_type -> ypb.AIEventQueryRequest
	106,  // 1051: ypb.Yak.StartAITriage:input_type -> ypb.AITriageInputEvent
	118,  // 1052: ypb.Yak.CreateAIForge:input_type -> ypb.AIForge
	118,  // 1053: ypb.Yak.UpdateAIForge:input_type -> ypb.AIForge
	117,  // 1054: ypb.Yak.DeleteAIForge:input_type -> ypb.AIForgeFilter
	119,  // 1055: ypb.Yak.QueryAIForge:input_type -> ypb.QueryAIForgeRequest
	121,  // 1056: ypb.Yak.GetAIForge:input_type -> ypb.GetAIForgeRequest
	122,  // 1057: ypb.Yak.StartMcpServer:input_type -> ypb.StartMcpServerRequest
	4,    // 1058: ypb.Yak.GetToolSetList:input_type -> ypb.Empty
	102,  // 1059: ypb.Yak.GetAIToolList:input_type -> ypb.GetAIToolListRequest
	97,   // 1060: ypb.Yak.DeleteAITool:input_type -> ypb.DeleteAIToolRequest
	94,   // 1061: ypb.Yak.SaveAITool:input_type -> ypb.SaveAIToolRequest
	94,   // 1062: ypb.Yak.SaveAIToolV2:input_type -> ypb.SaveAIToolRequest
	96,   // 1063: ypb.Yak.UpdateAITool:input_type -> ypb.UpdateAIToolRequest
	98,   // 1064: ypb.Yak.ToggleAIToolFavorite:input_type -> ypb.ToggleAIToolFavoriteRequest
	92,   // 1065: ypb.Yak.AIToolGenerateMetadata:input_type -> ypb.AIToolGenerateMetadataRequest
	4,    // 1066: ypb.Yak.IsLlamaServerReady:input_type -> ypb.Empty
	845,  // 1067: ypb.Yak.IsLocalModelReady:input_type -> ypb.IsLocalModelReadyRequest
	847,  // 1068: ypb.Yak.InstallLlamaServer:input_type -> ypb.InstallLlamaServerRequest
	848,  // 1069: ypb.Yak.StartLocalModel:input_type -> ypb.StartLocalModelRequest
	46,   // 1070: ypb.Yak.StopLocalModel:input_type -> ypb.StopLocalModelRequest
	849,  // 1071: ypb.Yak.DownloadLocalModel:input_type -> ypb.DownloadLocalModelRequest
	4,    // 1072: ypb.Yak.GetSupportedLocalModels:input_type -> ypb.Empty
	44,   // 1073: ypb.Yak.AddLocalModel:input_type -> ypb.AddLocalModelRequest
	45,   // 1074: ypb.Yak.DeleteLocalModel:input_type -> ypb.DeleteLocalModelRequest
	43,   // 1075: ypb.Yak.UpdateLocalModel:input_type -> ypb.UpdateLocalModelRequest
	4,    // 1076: ypb.Yak.GetAllStartedLocalModels:input_type -> ypb.Empty
	42,   // 1077: ypb.Yak.ClearAllModels:input_type -> ypb.ClearAllModelsRequest
	86,   // 1078: ypb.Yak.IsSearchVectorDatabaseReady:input_type -> ypb.IsSearchVectorDatabaseReadyRequest
	88,   // 1079: ypb.Yak.InitSearchVectorDatabase:input_type -> ypb.InitSearchVectorDatabaseRequest
	4,    // 1080: ypb.Yak.GetAllVectorStoreCollections:input_type -> ypb.Empty
	83,   // 1081: ypb.Yak.GetAllVectorStoreCollectionsWithFilter:input_type -> ypb.GetAllVectorStoreCollectionsWithFilterRequest
	74,   // 1082: ypb.Yak.DeleteSearchVectorDatabase:input_type -> ypb.DeleteSearchVectorDatabaseRequest
	82,   // 1083: ypb.Yak.UpdateVectorStoreCollection:input_type -> ypb.UpdateVectorStoreCollectionRequest
	76,   // 1084: ypb.Yak.ListVectorStoreEntries:input_type -> ypb.ListVectorStoreEntriesRequest
	77,   // 1085: ypb.Yak.CreateVectorStoreEntry:input_type -> ypb.CreateVectorStoreEntryRequest
	80,   // 1086: ypb.Yak.GetDocumentByVectorStoreEntryID:input_type -> ypb.GetDocumentByVectorStoreEntryIDRequest
	4,    // 1087: ypb.Yak.ListThirdPartyBinary:input_type -> ypb.Empty
	50,   // 1088: ypb.Yak.InstallThirdPartyBinary:input_type -> ypb.InstallThirdPartyBinaryRequest
	51,   // 1089: ypb.Yak.UninstallThirdPartyBinary:input_type -> ypb.UninstallThirdPartyBinaryRequest
	52,   // 1090: ypb.Yak.IsThirdPartyBinaryReady:input_type -> ypb.IsThirdPartyBinaryReadyRequest
	54,   // 1091: ypb.Yak.StartThirdPartyBinary:input_type -> ypb.StartThirdPartyBinaryRequest
	859,  // 1092: ypb.Yak.PluginTrace:input_type -> ypb.PluginTraceRequest
	4,    // 1093: ypb.Yak.GetKnowledgeBaseNameList:input_type -> ypb.Empty
	60,   // 1094: ypb.Yak.GetKnowledgeBase:input_type -> ypb.GetKnowledgeBaseRequest
	4,    // 1095: ypb.Yak.GetKnowledgeBaseTypeList:input_type -> ypb.Empty
	73,   // 1096: ypb.Yak.DeleteKnowledgeBase:input_type -> ypb.DeleteKnowledgeBaseRequest
	63,   // 1097: ypb.Yak.CreateKnowledgeBase:input_type -> ypb.CreateKnowledgeBaseRequest
	64,   // 1098: ypb.Yak.UpdateKnowledgeBase:input_type -> ypb.UpdateKnowledgeBaseRequest
	65,   // 1099: ypb.Yak.DeleteKnowledgeBaseEntry:input_type -> ypb.DeleteKnowledgeBaseEntryRequest
	70,   // 1100: ypb.Yak.CreateKnowledgeBaseEntry:input_type -> ypb.CreateKnowledgeBaseEntryRequest
	71,   // 1101: ypb.Yak.UpdateKnowledgeBaseEntry:input_type -> ypb.UpdateKnowledgeBaseEntryRequest
	66,   // 1102: ypb.Yak.SearchKnowledgeBaseEntry:input_type -> ypb.SearchKnowledgeBaseEntryRequest
	67,   // 1103: ypb.Yak.QueryKnowledgeBaseByAI:input_type -> ypb.QueryKnowledgeBaseByAIRequest
	56,   // 1104: ypb.Yak.BuildVectorIndexForKnowledgeBase:input_type -> ypb.BuildVectorIndexForKnowledgeBaseRequest
	55,   // 1105: ypb.Yak.BuildVectorIndexForKnowledgeBaseEntry:input_type -> ypb.BuildVectorIndexForKnowledgeBaseEntryRequest
	4,    // 1106: ypb.Yak.ListEntityRepository:input_type -> ypb.Empty
	29,   // 1107: ypb.Yak.QueryEntity:input_type -> ypb.QueryEntityRequest
	31,   // 1108: ypb.Yak.DeleteEntity:input_type -> ypb.DeleteEntityRequest
	34,   // 1109: ypb.Yak.QueryRelationship:input_type -> ypb.QueryRelationshipRequest
	36,   // 1110: ypb.Yak.QuerySubERM:input_type -> ypb.QuerySubERMRequest
	38,   // 1111: ypb.Yak.GenerateERMDot:input_type -> ypb.GenerateERMDotRequest
	14,   // 1112: ypb.Yak.ExportKnowledgeBase:input_type -> ypb.ExportKnowledgeBaseRequest
	15,   // 1113: ypb.Yak.ImportKnowledgeBase:input_type -> ypb.ImportKnowledgeBaseRequest
	17,   // 1114: ypb.Yak.AddMCPServer:input_type -> ypb.AddMCPServerRequest
	18,   // 1115: ypb.Yak.DeleteMCPServer:input_type -> ypb.DeleteMCPServerRequest
	19,   // 1116: ypb.Yak.UpdateMCPServer:input_type -> ypb.UpdateMCPServerRequest
	20,   // 1117: ypb.Yak.GetAllMCPServers:input_type -> ypb.GetAllMCPServersRequest
	5,    // 1118: ypb.Yak.Version:output_type -> ypb.VersionResponse
	6,    // 1119: ypb.Yak.YakVersionAtLeast:output_type -> ypb.GeneralResponse
	656,  // 1120: ypb.Yak.Echo:output_type -> ypb.EchoResposne
	658,  // 1121: ypb.Yak.Handshake:output_type -> ypb.HandshakeResponse
	13,   // 1122: ypb.Yak.VerifySystemCertificate:output_type -> ypb.VerifySystemCertificateResponse
	651,  // 1123: ypb.Yak.MITM:output_type -> ypb.MITMResponse
	644,  // 1124: ypb.Yak.SetMITMFilter:output_type -> ypb.SetMITMFilterResponse
	643,  // 1125: ypb.Yak.GetMITMFilter:output_type -> ypb.SetMITMFilterRequest
	643,  // 1126: ypb.Yak.ResetMITMFilter:output_type -> ypb.SetMITMFilterRequest
	374,  // 1127: ypb.Yak.DownloadMITMCert:output_type -> ypb.MITMCert
	374,  // 1128: ypb.Yak.DownloadMITMGMCert:output_type -> ypb.MITMCert
	853,  // 1129: ypb.Yak.MITMV2:output_type -> ypb.MITMV2Response
	660,  // 1130: ypb.Yak.OpenPort:output_type -> ypb.Output
	663,  // 1131: ypb.Yak.Exec:output_type -> ypb.ExecResult
	580,  // 1132: ypb.Yak.QueryExecHistory:output_type -> ypb.ExecHistoryRecordResponse
	4,    // 1133: ypb.Yak.RemoveExecHistory:output_type -> ypb.Empty
	4,    // 1134: ypb.Yak.LoadNucleiTemplates:output_type -> ypb.Empty
	663,  // 1135: ypb.Yak.AutoUpdateYakModule:output_type -> ypb.ExecResult
	663,  // 1136: ypb.Yak.ExecYakScript:output_type -> ypb.ExecResult
	9,    // 1137: ypb.Yak.ExecBatchYakScript:output_type -> ypb.ExecBatchYakScriptResult
	322,  // 1138: ypb.Yak.GetExecBatchYakScriptUnfinishedTask:output_type -> ypb.GetExecBatchYakScriptUnfinishedTaskResponse
	8,    // 1139: ypb.Yak.GetExecBatchYakScriptUnfinishedTaskByUid:output_type -> ypb.ExecBatchYakScriptRequest
	8,    // 1140: ypb.Yak.PopExecBatchYakScriptUnfinishedTaskByUid:output_type -> ypb.ExecBatchYakScriptRequest
	9,    // 1141: ypb.Yak.RecoverExecBatchYakScriptUnfinishedTask:output_type -> ypb.ExecBatchYakScriptResult
	537,  // 1142: ypb.Yak.QueryYakScript:output_type -> ypb.QueryYakScriptResponse
	539,  // 1143: ypb.Yak.QueryYakScriptByYakScriptName:output_type -> ypb.YakScript
	539,  // 1144: ypb.Yak.SaveYakScript:output_type -> ypb.YakScript
	4,    // 1145: ypb.Yak.DeleteYakScript:output_type -> ypb.Empty
	539,  // 1146: ypb.Yak.GetYakScriptById:output_type -> ypb.YakScript
	539,  // 1147: ypb.Yak.GetYakScriptByName:output_type -> ypb.YakScript
	539,  // 1148: ypb.Yak.GetYakScriptByOnlineID:output_type -> ypb.YakScript
	4,    // 1149: ypb.Yak.IgnoreYakScript:output_type -> ypb.Empty
	4,    // 1150: ypb.Yak.UnIgnoreYakScript:output_type -> ypb.Empty
	475,  // 1151: ypb.Yak.ExportYakScript:output_type -> ypb.ExportYakScriptResponse
	663,  // 1152: ypb.Yak.ExportYakScriptStream:output_type -> ypb.ExecResult
	663,  // 1153: ypb.Yak.ImportYakScriptStream:output_type -> ypb.ExecResult
	663,  // 1154: ypb.Yak.ExecutePacketYakScript:output_type -> ypb.ExecResult
	9,    // 1155: ypb.Yak.ExecuteBatchPacketYakScript:output_type -> ypb.ExecBatchYakScriptResult
	338,  // 1156: ypb.Yak.GetYakScriptTags:output_type -> ypb.GetYakScriptTagsResponse
	341,  // 1157: ypb.Yak.QueryYakScriptLocalAndUser:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	341,  // 1158: ypb.Yak.QueryYakScriptByOnlineGroup:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	341,  // 1159: ypb.Yak.QueryYakScriptLocalAll:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	345,  // 1160: ypb.Yak.QueryYakScriptByNames:output_type -> ypb.QueryYakScriptByNamesResponse
	346,  // 1161: ypb.Yak.QueryYakScriptByIsCore:output_type -> ypb.QueryYakScriptByIsCoreResponse
	348,  // 1162: ypb.Yak.QueryYakScriptRiskDetailByCWE:output_type -> ypb.QueryYakScriptRiskDetailByCWEResponse
	349,  // 1163: ypb.Yak.YakScriptRiskTypeList:output_type -> ypb.YakScriptRiskTypeListResponse
	539,  // 1164: ypb.Yak.SaveNewYakScript:output_type -> ypb.YakScript
	543,  // 1165: ypb.Yak.SaveYakScriptToOnline:output_type -> ypb.SaveYakScriptToOnlineResponse
	546,  // 1166: ypb.Yak.ExportLocalYakScript:output_type -> ypb.ExportLocalYakScriptResponse
	547,  // 1167: ypb.Yak.ExportLocalYakScriptStream:output_type -> ypb.ExportYakScriptLocalResponse
	549,  // 1168: ypb.Yak.ImportYakScript:output_type -> ypb.ImportYakScriptResult
	4,    // 1169: ypb.Yak.SetYakScriptSkipUpdate:output_type -> ypb.Empty
	551,  // 1170: ypb.Yak.QueryYakScriptSkipUpdate:output_type -> ypb.QueryYakScriptSkipUpdateResponse
	553,  // 1171: ypb.Yak.QueryYakScriptGroup:output_type -> ypb.QueryYakScriptGroupResponse
	4,    // 1172: ypb.Yak.SaveYakScriptGroup:output_type -> ypb.Empty
	4,    // 1173: ypb.Yak.RenameYakScriptGroup:output_type -> ypb.Empty
	4,    // 1174: ypb.Yak.DeleteYakScriptGroup:output_type -> ypb.Empty
	558,  // 1175: ypb.Yak.GetYakScriptGroup:output_type -> ypb.GetYakScriptGroupResponse
	4,    // 1176: ypb.Yak.ResetYakScriptGroup:output_type -> ypb.Empty
	4,    // 1177: ypb.Yak.SetGroup:output_type -> ypb.Empty
	631,  // 1178: ypb.Yak.GetHTTPFlowByHash:output_type -> ypb.HTTPFlow
	631,  // 1179: ypb.Yak.GetHTTPFlowById:output_type -> ypb.HTTPFlow
	633,  // 1180: ypb.Yak.GetHTTPFlowBodyById:output_type -> ypb.GetHTTPFlowBodyByIdResponse
	630,  // 1181: ypb.Yak.GetHTTPFlowByIds:output_type -> ypb.HTTPFlows
	634,  // 1182: ypb.Yak.QueryHTTPFlows:output_type -> ypb.QueryHTTPFlowResponse
	4,    // 1183: ypb.Yak.DeleteHTTPFlows:output_type -> ypb.Empty
	4,    // 1184: ypb.Yak.SetTagForHTTPFlow:output_type -> ypb.Empty
	628,  // 1185: ypb.Yak.QueryHTTPFlowsIds:output_type -> ypb.QueryHTTPFlowsIdsResponse
	636,  // 1186: ypb.Yak.HTTPFlowsFieldGroup:output_type -> ypb.HTTPFlowsFieldGroupResponse
	638,  // 1187: ypb.Yak.HTTPFlowsShare:output_type -> ypb.HTTPFlowsShareResponse
	4,    // 1188: ypb.Yak.HTTPFlowsExtract:output_type -> ypb.Empty
	668,  // 1189: ypb.Yak.GetHTTPFlowBare:output_type -> ypb.HTTPFlowBareResponse
	634,  // 1190: ypb.Yak.ExportHTTPFlows:output_type -> ypb.QueryHTTPFlowResponse
	4,    // 1191: ypb.Yak.HTTPFlowsToOnline:output_type -> ypb.Empty
	625,  // 1192: ypb.Yak.QueryHTTPFlowsProcessNames:output_type -> ypb.QueryHTTPFlowsProcessNamesResponse
	617,  // 1193: ypb.Yak.HTTPFlowsToOnlineBatch:output_type -> ypb.HTTPFlowsToOnlineBatchResponse
	621,  // 1194: ypb.Yak.AnalyzeHTTPFlow:output_type -> ypb.AnalyzeHTTPFlowResponse
	604,  // 1195: ypb.Yak.ExtractUrl:output_type -> ypb.ExtractedUrl
	397,  // 1196: ypb.Yak.GetHistoryHTTPFuzzerTask:output_type -> ypb.HistoryHTTPFuzzerTaskDetail
	399,  // 1197: ypb.Yak.QueryHistoryHTTPFuzzerTask:output_type -> ypb.HistoryHTTPFuzzerTasks
	400,  // 1198: ypb.Yak.QueryHistoryHTTPFuzzerTaskEx:output_type -> ypb.HistoryHTTPFuzzerTasksResponse
	4,    // 1199: ypb.Yak.DeleteHistoryHTTPFuzzerTask:output_type -> ypb.Empty
	606,  // 1200: ypb.Yak.HTTPFuzzer:output_type -> ypb.FuzzerResponse
	605,  // 1201: ypb.Yak.HTTPFuzzerSequence:output_type -> ypb.FuzzerSequenceResponse
	596,  // 1202: ypb.Yak.PreloadHTTPFuzzerParams:output_type -> ypb.PreloadHTTPFuzzerParamsResponse
	589,  // 1203: ypb.Yak.RenderVariables:output_type -> ypb.RenderVariablesResponse
	591,  // 1204: ypb.Yak.MatchHTTPResponse:output_type -> ypb.MatchHTTPResponseResult
	593,  // 1205: ypb.Yak.ExtractHTTPResponse:output_type -> ypb.ExtractHTTPResponseResult
	606,  // 1206: ypb.Yak.RedirectRequest:output_type -> ypb.FuzzerResponse
	450,  // 1207: ypb.Yak.HTTPRequestMutate:output_type -> ypb.MutateResult
	450,  // 1208: ypb.Yak.HTTPResponseMutate:output_type -> ypb.MutateResult
	332,  // 1209: ypb.Yak.FixUploadPacket:output_type -> ypb.FixUploadPacketResponse
	333,  // 1210: ypb.Yak.IsMultipartFormDataRequest:output_type -> ypb.IsMultipartFormDataRequestResult
	262,  // 1211: ypb.Yak.GenerateExtractRule:output_type -> ypb.GenerateExtractRuleResponse
	250,  // 1212: ypb.Yak.ExtractData:output_type -> ypb.ExtractDataResponse
	670,  // 1213: ypb.Yak.ImportHTTPFuzzerTaskFromYaml:output_type -> ypb.ImportHTTPFuzzerTaskFromYamlResponse
	672,  // 1214: ypb.Yak.ExportHTTPFuzzerTaskToYaml:output_type -> ypb.ExportHTTPFuzzerTaskToYamlResponse
	674,  // 1215: ypb.Yak.RenderHTTPFuzzerPacket:output_type -> ypb.RenderHTTPFuzzerPacketResponse
	4,    // 1216: ypb.Yak.SaveFuzzerLabel:output_type -> ypb.Empty
	252,  // 1217: ypb.Yak.QueryFuzzerLabel:output_type -> ypb.QueryFuzzerLabelResponse
	4,    // 1218: ypb.Yak.DeleteFuzzerLabel:output_type -> ypb.Empty
	703,  // 1219: ypb.Yak.SaveFuzzerConfig:output_type -> ypb.DbOperateMessage
	257,  // 1220: ypb.Yak.QueryFuzzerConfig:output_type -> ypb.QueryFuzzerConfigResponse
	703,  // 1221: ypb.Yak.DeleteFuzzerConfig:output_type -> ypb.DbOperateMessage
	265,  // 1222: ypb.Yak.QueryHTTPFuzzerResponseByTaskId:output_type -> ypb.QueryHTTPFuzzerResponseByTaskIdResponse
	269,  // 1223: ypb.Yak.CreateWebsocketFuzzer:output_type -> ypb.ClientWebsocketResponse
	641,  // 1224: ypb.Yak.QueryWebsocketFlowByHTTPFlowWebsocketHash:output_type -> ypb.WebsocketFlows
	4,    // 1225: ypb.Yak.DeleteWebsocketFlowByHTTPFlowWebsocketHash:output_type -> ypb.Empty
	4,    // 1226: ypb.Yak.DeleteWebsocketFlowAll:output_type -> ypb.Empty
	631,  // 1227: ypb.Yak.ConvertFuzzerResponseToHTTPFlow:output_type -> ypb.HTTPFlow
	583,  // 1228: ypb.Yak.StringFuzzer:output_type -> ypb.StringFuzzerResponse
	586,  // 1229: ypb.Yak.HTTPRequestAnalyzer:output_type -> ypb.HTTPRequestAnalysis
	4,    // 1230: ypb.Yak.CreateSnippet:output_type -> ypb.Empty
	4,    // 1231: ypb.Yak.UpdateSnippet:output_type -> ypb.Empty
	4,    // 1232: ypb.Yak.DeleteSnippets:output_type -> ypb.Empty
	567,  // 1233: ypb.Yak.QuerySnippets:output_type -> ypb.SnippetsResponse
	575,  // 1234: ypb.Yak.Codec:output_type -> ypb.CodecResponse
	575,  // 1235: ypb.Yak.NewCodec:output_type -> ypb.CodecResponse
	576,  // 1236: ypb.Yak.GetAllCodecMethods:output_type -> ypb.CodecMethods
	4,    // 1237: ypb.Yak.SaveCodecFlow:output_type -> ypb.Empty
	4,    // 1238: ypb.Yak.UpdateCodecFlow:output_type -> ypb.Empty
	4,    // 1239: ypb.Yak.DeleteCodecFlow:output_type -> ypb.Empty
	574,  // 1240: ypb.Yak.GetAllCodecFlow:output_type -> ypb.GetCodecFlowResponse
	159,  // 1241: ypb.Yak.PacketPrettifyHelper:output_type -> ypb.PacketPrettifyHelperResponse
	530,  // 1242: ypb.Yak.QueryPayload:output_type -> ypb.QueryPayloadResponse
	528,  // 1243: ypb.Yak.QueryPayloadFromFile:output_type -> ypb.QueryPayloadFromFileResponse
	4,    // 1244: ypb.Yak.DeletePayloadByFolder:output_type -> ypb.Empty
	4,    // 1245: ypb.Yak.DeletePayloadByGroup:output_type -> ypb.Empty
	4,    // 1246: ypb.Yak.DeletePayload:output_type -> ypb.Empty
	4,    // 1247: ypb.Yak.SavePayload:output_type -> ypb.Empty
	289,  // 1248: ypb.Yak.SavePayloadStream:output_type -> ypb.SavePayloadProgress
	289,  // 1249: ypb.Yak.SavePayloadToFileStream:output_type -> ypb.SavePayloadProgress
	289,  // 1250: ypb.Yak.SaveLargePayloadToFileStream:output_type -> ypb.SavePayloadProgress
	4,    // 1251: ypb.Yak.RenamePayloadFolder:output_type -> ypb.Empty
	4,    // 1252: ypb.Yak.RenamePayloadGroup:output_type -> ypb.Empty
	4,    // 1253: ypb.Yak.UpdatePayload:output_type -> ypb.Empty
	4,    // 1254: ypb.Yak.UpdatePayloadToFile:output_type -> ypb.Empty
	4,    // 1255: ypb.Yak.BackUpOrCopyPayloads:output_type -> ypb.Empty
	519,  // 1256: ypb.Yak.GetAllPayloadGroup:output_type -> ypb.GetAllPayloadGroupResponse
	4,    // 1257: ypb.Yak.UpdateAllPayloadGroup:output_type -> ypb.Empty
	533,  // 1258: ypb.Yak.GetAllPayload:output_type -> ypb.GetAllPayloadResponse
	534,  // 1259: ypb.Yak.GetAllPayloadFromFile:output_type -> ypb.GetAllPayloadFromFileResponse
	533,  // 1260: ypb.Yak.ExportAllPayload:output_type -> ypb.GetAllPayloadResponse
	533,  // 1261: ypb.Yak.ExportAllPayloadFromFile:output_type -> ypb.GetAllPayloadResponse
	4,    // 1262: ypb.Yak.CreatePayloadFolder:output_type -> ypb.Empty
	289,  // 1263: ypb.Yak.RemoveDuplicatePayloads:output_type -> ypb.SavePayloadProgress
	289,  // 1264: ypb.Yak.CoverPayloadGroupToDatabase:output_type -> ypb.SavePayloadProgress
	289,  // 1265: ypb.Yak.ConvertPayloadGroupToDatabase:output_type -> ypb.SavePayloadProgress
	289,  // 1266: ypb.Yak.MigratePayloads:output_type -> ypb.SavePayloadProgress
	533,  // 1267: ypb.Yak.ExportPayloadBatch:output_type -> ypb.GetAllPayloadResponse
	293,  // 1268: ypb.Yak.UploadPayloadToOnline:output_type -> ypb.DownloadProgress
	293,  // 1269: ypb.Yak.DownloadPayload:output_type -> ypb.DownloadProgress
	533,  // 1270: ypb.Yak.ExportPayloadDBAndFile:output_type -> ypb.GetAllPayloadResponse
	511,  // 1271: ypb.Yak.GetYakitCompletionRaw:output_type -> ypb.YakitCompletionRawResponse
	515,  // 1272: ypb.Yak.GetYakVMBuildInMethodCompletion:output_type -> ypb.GetYakVMBuildInMethodCompletionResponse
	288,  // 1273: ypb.Yak.StaticAnalyzeError:output_type -> ypb.StaticAnalyzeErrorResponse
	286,  // 1274: ypb.Yak.YaklangCompileAndFormat:output_type -> ypb.YaklangCompileAndFormatResponse
	277,  // 1275: ypb.Yak.YaklangLanguageSuggestion:output_type -> ypb.YaklangLanguageSuggestionResponse
	278,  // 1276: ypb.Yak.YaklangLanguageFind:output_type -> ypb.YaklangLanguageFindResponse
	277,  // 1277: ypb.Yak.FuzzTagSuggestion:output_type -> ypb.YaklangLanguageSuggestionResponse
	279,  // 1278: ypb.Yak.YaklangInspectInformation:output_type -> ypb.YaklangInspectInformationResponse
	282,  // 1279: ypb.Yak.YaklangGetCliCodeFromDatabase:output_type -> ypb.YaklangGetCliCodeFromDatabaseResponse
	660,  // 1280: ypb.Yak.YaklangTerminal:output_type -> ypb.Output
	663,  // 1281: ypb.Yak.PortScan:output_type -> ypb.ExecResult
	502,  // 1282: ypb.Yak.ViewPortScanCode:output_type -> ypb.SimpleScript
	663,  // 1283: ypb.Yak.SimpleDetect:output_type -> ypb.ExecResult
	4,    // 1284: ypb.Yak.SaveCancelSimpleDetect:output_type -> ypb.Empty
	663,  // 1285: ypb.Yak.SimpleDetectCreatReport:output_type -> ypb.ExecResult
	328,  // 1286: ypb.Yak.QuerySimpleDetectUnfinishedTask:output_type -> ypb.QueryUnfinishedTaskResponse
	504,  // 1287: ypb.Yak.GetSimpleDetectRecordRequestById:output_type -> ypb.RecordPortScanRequest
	4,    // 1288: ypb.Yak.DeleteSimpleDetectUnfinishedTask:output_type -> ypb.Empty
	663,  // 1289: ypb.Yak.RecoverSimpleDetectTask:output_type -> ypb.ExecResult
	323,  // 1290: ypb.Yak.GetSimpleDetectUnfinishedTask:output_type -> ypb.GetSimpleDetectUnfinishedTaskResponse
	504,  // 1291: ypb.Yak.GetSimpleDetectUnfinishedTaskByUid:output_type -> ypb.RecordPortScanRequest
	504,  // 1292: ypb.Yak.PopSimpleDetectUnfinishedTaskByUid:output_type -> ypb.RecordPortScanRequest
	663,  // 1293: ypb.Yak.RecoverSimpleDetectUnfinishedTask:output_type -> ypb.ExecResult
	509,  // 1294: ypb.Yak.QueryPorts:output_type -> ypb.QueryPortsResponse
	4,    // 1295: ypb.Yak.DeletePorts:output_type -> ypb.Empty
	453,  // 1296: ypb.Yak.QueryHosts:output_type -> ypb.QueryHostsResponse
	4,    // 1297: ypb.Yak.DeleteHosts:output_type -> ypb.Empty
	456,  // 1298: ypb.Yak.QueryDomains:output_type -> ypb.QueryDomainsResponse
	4,    // 1299: ypb.Yak.DeleteDomains:output_type -> ypb.Empty
	458,  // 1300: ypb.Yak.QueryPortsGroup:output_type -> ypb.QueryPortsGroupResponse
	4,    // 1301: ypb.Yak.UpdateFromYakitResource:output_type -> ypb.Empty
	4,    // 1302: ypb.Yak.UpdateFromGithub:output_type -> ypb.Empty
	4,    // 1303: ypb.Yak.AddToMenu:output_type -> ypb.Empty
	4,    // 1304: ypb.Yak.RemoveFromMenu:output_type -> ypb.Empty
	4,    // 1305: ypb.Yak.YakScriptIsInMenu:output_type -> ypb.Empty
	485,  // 1306: ypb.Yak.GetAllMenuItem:output_type -> ypb.MenuByGroup
	4,    // 1307: ypb.Yak.DeleteAllMenuItem:output_type -> ypb.Empty
	4,    // 1308: ypb.Yak.ImportMenuItem:output_type -> ypb.Empty
	492,  // 1309: ypb.Yak.ExportMenuItem:output_type -> ypb.ExportMenuItemResult
	481,  // 1310: ypb.Yak.GetMenuItemById:output_type -> ypb.MenuItem
	479,  // 1311: ypb.Yak.QueryGroupsByYakScriptId:output_type -> ypb.GroupNames
	4,    // 1312: ypb.Yak.AddMenus:output_type -> ypb.Empty
	485,  // 1313: ypb.Yak.QueryAllMenuItem:output_type -> ypb.MenuByGroup
	4,    // 1314: ypb.Yak.DeleteAllMenu:output_type -> ypb.Empty
	4,    // 1315: ypb.Yak.AddToNavigation:output_type -> ypb.Empty
	497,  // 1316: ypb.Yak.GetAllNavigationItem:output_type -> ypb.GetAllNavigationItemResponse
	4,    // 1317: ypb.Yak.DeleteAllNavigation:output_type -> ypb.Empty
	4,    // 1318: ypb.Yak.AddOneNavigation:output_type -> ypb.Empty
	479,  // 1319: ypb.Yak.QueryNavigationGroups:output_type -> ypb.GroupNames
	4,    // 1320: ypb.Yak.SaveMarkdownDocument:output_type -> ypb.Empty
	476,  // 1321: ypb.Yak.GetMarkdownDocument:output_type -> ypb.GetMarkdownDocumentResponse
	4,    // 1322: ypb.Yak.DeleteMarkdownDocument:output_type -> ypb.Empty
	663,  // 1323: ypb.Yak.StartBasicCrawler:output_type -> ypb.ExecResult
	502,  // 1324: ypb.Yak.ViewBasicCrawlerCode:output_type -> ypb.SimpleScript
	467,  // 1325: ypb.Yak.GenerateWebsiteTree:output_type -> ypb.GenerateWebsiteTreeResponse
	466,  // 1326: ypb.Yak.QueryYakScriptExecResult:output_type -> ypb.QueryYakScriptExecResultResponse
	464,  // 1327: ypb.Yak.QueryYakScriptNameInExecResult:output_type -> ypb.YakScriptNames
	4,    // 1328: ypb.Yak.DeleteYakScriptExecResult:output_type -> ypb.Empty
	4,    // 1329: ypb.Yak.DeleteYakScriptExec:output_type -> ypb.Empty
	663,  // 1330: ypb.Yak.StartBrute:output_type -> ypb.ExecResult
	446,  // 1331: ypb.Yak.GetAvailableBruteTypes:output_type -> ypb.GetAvailableBruteTypesResponse
	440,  // 1332: ypb.Yak.GetTunnelServerExternalIP:output_type -> ypb.GetTunnelServerExternalIPResponse
	438,  // 1333: ypb.Yak.VerifyTunnelServerDomain:output_type -> ypb.VerifyTunnelServerDomainResponse
	663,  // 1334: ypb.Yak.StartFacades:output_type -> ypb.ExecResult
	663,  // 1335: ypb.Yak.StartFacadesWithYsoObject:output_type -> ypb.ExecResult
	4,    // 1336: ypb.Yak.ApplyClassToFacades:output_type -> ypb.Empty
	391,  // 1337: ypb.Yak.BytesToBase64:output_type -> ypb.BytesToBase64Response
	4,    // 1338: ypb.Yak.ConfigGlobalReverse:output_type -> ypb.Empty
	420,  // 1339: ypb.Yak.AvailableLocalAddr:output_type -> ypb.AvailableLocalAddrResponse
	419,  // 1340: ypb.Yak.GetGlobalReverseServer:output_type -> ypb.GetGlobalReverseServerResponse
	427,  // 1341: ypb.Yak.QueryRisks:output_type -> ypb.QueryRisksResponse
	425,  // 1342: ypb.Yak.QueryRisk:output_type -> ypb.Risk
	4,    // 1343: ypb.Yak.DeleteRisk:output_type -> ypb.Empty
	376,  // 1344: ypb.Yak.QueryAvailableRiskType:output_type -> ypb.Fields
	376,  // 1345: ypb.Yak.QueryAvailableRiskLevel:output_type -> ypb.Fields
	373,  // 1346: ypb.Yak.QueryRiskTableStats:output_type -> ypb.RiskTableStats
	4,    // 1347: ypb.Yak.ResetRiskTableStats:output_type -> ypb.Empty
	376,  // 1348: ypb.Yak.QueryAvailableTarget:output_type -> ypb.Fields
	429,  // 1349: ypb.Yak.QueryNewRisk:output_type -> ypb.QueryNewRiskResponse
	4,    // 1350: ypb.Yak.NewRiskRead:output_type -> ypb.Empty
	4,    // 1351: ypb.Yak.UploadRiskToOnline:output_type -> ypb.Empty
	4,    // 1352: ypb.Yak.SetTagForRisk:output_type -> ypb.Empty
	430,  // 1353: ypb.Yak.QueryRiskTags:output_type -> ypb.QueryRiskTagsResponse
	431,  // 1354: ypb.Yak.RiskFieldGroup:output_type -> ypb.RiskFieldGroupResponse
	4,    // 1355: ypb.Yak.RiskFeedbackToOnline:output_type -> ypb.Empty
	363,  // 1356: ypb.Yak.QueryReports:output_type -> ypb.QueryReportsResponse
	365,  // 1357: ypb.Yak.QueryReport:output_type -> ypb.Report
	4,    // 1358: ypb.Yak.DeleteReport:output_type -> ypb.Empty
	376,  // 1359: ypb.Yak.QueryAvailableReportFrom:output_type -> ypb.Fields
	4,    // 1360: ypb.Yak.DownloadReport:output_type -> ypb.Empty
	378,  // 1361: ypb.Yak.GetAllYsoGadgetOptions:output_type -> ypb.YsoOptionsWithVerbose
	378,  // 1362: ypb.Yak.GetAllYsoClassOptions:output_type -> ypb.YsoOptionsWithVerbose
	381,  // 1363: ypb.Yak.GetAllYsoClassGeneraterOptions:output_type -> ypb.YsoClassOptionsResponseWithVerbose
	388,  // 1364: ypb.Yak.GenerateYsoCode:output_type -> ypb.YsoCodeResponse
	389,  // 1365: ypb.Yak.GenerateYsoBytes:output_type -> ypb.YsoBytesResponse
	387,  // 1366: ypb.Yak.YsoDump:output_type -> ypb.YsoDumpResponse
	404,  // 1367: ypb.Yak.CreateWebShell:output_type -> ypb.WebShell
	4,    // 1368: ypb.Yak.DeleteWebShell:output_type -> ypb.Empty
	404,  // 1369: ypb.Yak.UpdateWebShell:output_type -> ypb.WebShell
	410,  // 1370: ypb.Yak.QueryWebShells:output_type -> ypb.QueryWebShellsResponse
	408,  // 1371: ypb.Yak.Ping:output_type -> ypb.WebShellResponse
	408,  // 1372: ypb.Yak.GetBasicInfo:output_type -> ypb.WebShellResponse
	408,  // 1373: ypb.Yak.GenerateWebShell:output_type -> ypb.WebShellResponse
	4,    // 1374: ypb.Yak.SetYakBridgeLogServer:output_type -> ypb.Empty
	413,  // 1375: ypb.Yak.GetCurrentYakBridgeLogServer:output_type -> ypb.YakDNSLogBridgeAddr
	418,  // 1376: ypb.Yak.RequireDNSLogDomain:output_type -> ypb.DNSLogRootDomain
	418,  // 1377: ypb.Yak.RequireDNSLogDomainByScript:output_type -> ypb.DNSLogRootDomain
	416,  // 1378: ypb.Yak.QueryDNSLogByToken:output_type -> ypb.QueryDNSLogByTokenResponse
	416,  // 1379: ypb.Yak.QueryDNSLogTokenByScript:output_type -> ypb.QueryDNSLogByTokenResponse
	368,  // 1380: ypb.Yak.RequireICMPRandomLength:output_type -> ypb.RequireICMPRandomLengthResponse
	393,  // 1381: ypb.Yak.QueryICMPTrigger:output_type -> ypb.QueryICMPTriggerResponse
	371,  // 1382: ypb.Yak.RequireRandomPortToken:output_type -> ypb.RandomPortInfo
	369,  // 1383: ypb.Yak.QueryRandomPortTrigger:output_type -> ypb.RandomPortTriggerNotification
	394,  // 1384: ypb.Yak.QuerySupportedDnsLogPlatforms:output_type -> ypb.QuerySupportedDnsLogPlatformsResponse
	376,  // 1385: ypb.Yak.GetAvailableYakScriptTags:output_type -> ypb.Fields
	4,    // 1386: ypb.Yak.ForceUpdateAvailableYakScriptTags:output_type -> ypb.Empty
	663,  // 1387: ypb.Yak.ExecYakitPluginsByYakScriptFilter:output_type -> ypb.ExecResult
	360,  // 1388: ypb.Yak.GenerateYakCodeByPacket:output_type -> ypb.GenerateYakCodeByPacketResponse
	359,  // 1389: ypb.Yak.GenerateCSRFPocByPacket:output_type -> ypb.GenerateCSRFPocByPacketResponse
	355,  // 1390: ypb.Yak.ExportMITMReplacerRules:output_type -> ypb.ExportMITMReplacerRulesResponse
	4,    // 1391: ypb.Yak.ImportMITMReplacerRules:output_type -> ypb.Empty
	353,  // 1392: ypb.Yak.GetCurrentRules:output_type -> ypb.MITMContentReplacers
	4,    // 1393: ypb.Yak.SetCurrentRules:output_type -> ypb.Empty
	857,  // 1394: ypb.Yak.QueryMITMReplacerRules:output_type -> ypb.QueryMITMReplacerRulesResponse
	678,  // 1395: ypb.Yak.GenerateURL:output_type -> ypb.GenerateURLResponse
	337,  // 1396: ypb.Yak.ExtractDataToFile:output_type -> ypb.ExtractDataToFileResult
	336,  // 1397: ypb.Yak.AutoDecode:output_type -> ypb.AutoDecodeResponse
	317,  // 1398: ypb.Yak.GetSystemProxy:output_type -> ypb.GetSystemProxyResult
	4,    // 1399: ypb.Yak.SetSystemProxy:output_type -> ypb.Empty
	313,  // 1400: ypb.Yak.GetKey:output_type -> ypb.GetKeyResult
	4,    // 1401: ypb.Yak.SetKey:output_type -> ypb.Empty
	4,    // 1402: ypb.Yak.DelKey:output_type -> ypb.Empty
	315,  // 1403: ypb.Yak.GetAllProcessEnvKey:output_type -> ypb.GetProcessEnvKeyResult
	4,    // 1404: ypb.Yak.SetProcessEnvKey:output_type -> ypb.Empty
	313,  // 1405: ypb.Yak.GetProjectKey:output_type -> ypb.GetKeyResult
	4,    // 1406: ypb.Yak.SetProjectKey:output_type -> ypb.Empty
	310,  // 1407: ypb.Yak.GetOnlineProfile:output_type -> ypb.OnlineProfile
	4,    // 1408: ypb.Yak.SetOnlineProfile:output_type -> ypb.Empty
	4,    // 1409: ypb.Yak.DownloadOnlinePluginById:output_type -> ypb.Empty
	4,    // 1410: ypb.Yak.DownloadOnlinePluginByIds:output_type -> ypb.Empty
	297,  // 1411: ypb.Yak.DownloadOnlinePluginAll:output_type -> ypb.DownloadOnlinePluginProgress
	4,    // 1412: ypb.Yak.DeletePluginByUserID:output_type -> ypb.Empty
	4,    // 1413: ypb.Yak.DeleteAllLocalPlugins:output_type -> ypb.Empty
	561,  // 1414: ypb.Yak.GetYakScriptTagsAndType:output_type -> ypb.GetYakScriptTagsAndTypeResponse
	4,    // 1415: ypb.Yak.DeleteLocalPluginsByWhere:output_type -> ypb.Empty
	304,  // 1416: ypb.Yak.DownloadOnlinePluginByScriptNames:output_type -> ypb.DownloadOnlinePluginByScriptNamesResponse
	297,  // 1417: ypb.Yak.DownloadOnlinePlugins:output_type -> ypb.DownloadOnlinePluginProgress
	4,    // 1418: ypb.Yak.DownloadOnlinePluginBatch:output_type -> ypb.Empty
	304,  // 1419: ypb.Yak.DownloadOnlinePluginByPluginName:output_type -> ypb.DownloadOnlinePluginByScriptNamesResponse
	539,  // 1420: ypb.Yak.DownloadOnlinePluginByUUID:output_type -> ypb.YakScript
	308,  // 1421: ypb.Yak.QueryOnlinePlugins:output_type -> ypb.QueryOnlinePluginsResponse
	663,  // 1422: ypb.Yak.ExecPacketScan:output_type -> ypb.ExecResult
	270,  // 1423: ypb.Yak.GetEngineDefaultProxy:output_type -> ypb.DefaultProxyResult
	4,    // 1424: ypb.Yak.SetEngineDefaultProxy:output_type -> ypb.Empty
	263,  // 1425: ypb.Yak.GetMachineID:output_type -> ypb.GetMachineIDResponse
	664,  // 1426: ypb.Yak.GetLicense:output_type -> ypb.GetLicenseResponse
	4,    // 1427: ypb.Yak.CheckLicense:output_type -> ypb.Empty
	249,  // 1428: ypb.Yak.GetRequestBodyByHTTPFlowID:output_type -> ypb.Bytes
	249,  // 1429: ypb.Yak.GetResponseBodyByHTTPFlowID:output_type -> ypb.Bytes
	249,  // 1430: ypb.Yak.GetHTTPPacketBody:output_type -> ypb.Bytes
	246,  // 1431: ypb.Yak.RegisterFacadesHTTP:output_type -> ypb.RegisterFacadesHTTPResponse
	4,    // 1432: ypb.Yak.ResetAndInvalidUserData:output_type -> ypb.Empty
	243,  // 1433: ypb.Yak.CreateYaklangShell:output_type -> ypb.YaklangShellResponse
	663,  // 1434: ypb.Yak.AttachCombinedOutput:output_type -> ypb.ExecResult
	226,  // 1435: ypb.Yak.IsPrivilegedForNetRaw:output_type -> ypb.IsPrivilegedForNetRawResponse
	4,    // 1436: ypb.Yak.PromotePermissionForUserPcap:output_type -> ypb.Empty
	4,    // 1437: ypb.Yak.SetCurrentProject:output_type -> ypb.Empty
	232,  // 1438: ypb.Yak.GetCurrentProject:output_type -> ypb.ProjectDescription
	232,  // 1439: ypb.Yak.GetCurrentProjectEx:output_type -> ypb.ProjectDescription
	233,  // 1440: ypb.Yak.GetProjects:output_type -> ypb.GetProjectsResponse
	230,  // 1441: ypb.Yak.NewProject:output_type -> ypb.NewProjectResponse
	230,  // 1442: ypb.Yak.UpdateProject:output_type -> ypb.NewProjectResponse
	4,    // 1443: ypb.Yak.IsProjectNameValid:output_type -> ypb.Empty
	4,    // 1444: ypb.Yak.RemoveProject:output_type -> ypb.Empty
	4,    // 1445: ypb.Yak.DeleteProject:output_type -> ypb.Empty
	232,  // 1446: ypb.Yak.GetDefaultProject:output_type -> ypb.ProjectDescription
	232,  // 1447: ypb.Yak.GetDefaultProjectEx:output_type -> ypb.ProjectDescription
	232,  // 1448: ypb.Yak.QueryProjectDetail:output_type -> ypb.ProjectDescription
	232,  // 1449: ypb.Yak.GetTemporaryProject:output_type -> ypb.ProjectDescription
	232,  // 1450: ypb.Yak.GetTemporaryProjectEx:output_type -> ypb.ProjectDescription
	224,  // 1451: ypb.Yak.ExportProject:output_type -> ypb.ProjectIOProgress
	224,  // 1452: ypb.Yak.ImportProject:output_type -> ypb.ProjectIOProgress
	4,    // 1453: ypb.Yak.MigrateLegacyDatabase:output_type -> ypb.Empty
	218,  // 1454: ypb.Yak.QueryMITMRuleExtractedData:output_type -> ypb.QueryMITMRuleExtractedDataResponse
	222,  // 1455: ypb.Yak.ExportMITMRuleExtractedData:output_type -> ypb.ExportMITMRuleExtractedDataResponse
	4,    // 1456: ypb.Yak.ImportChaosMakerRules:output_type -> ypb.Empty
	209,  // 1457: ypb.Yak.QueryChaosMakerRule:output_type -> ypb.QueryChaosMakerRuleResponse
	4,    // 1458: ypb.Yak.DeleteChaosMakerRuleByID:output_type -> ypb.Empty
	663,  // 1459: ypb.Yak.ExecuteChaosMakerRule:output_type -> ypb.ExecResult
	206,  // 1460: ypb.Yak.IsRemoteAddrAvailable:output_type -> ypb.IsRemoteAddrAvailableResponse
	206,  // 1461: ypb.Yak.ConnectVulinboxAgent:output_type -> ypb.IsRemoteAddrAvailableResponse
	172,  // 1462: ypb.Yak.GetRegisteredVulinboxAgent:output_type -> ypb.GetRegisteredAgentResponse
	4,    // 1463: ypb.Yak.DisconnectVulinboxAgent:output_type -> ypb.Empty
	215,  // 1464: ypb.Yak.IsCVEDatabaseReady:output_type -> ypb.IsCVEDatabaseReadyResponse
	663,  // 1465: ypb.Yak.UpdateCVEDatabase:output_type -> ypb.ExecResult
	663,  // 1466: ypb.Yak.ExportsProfileDatabase:output_type -> ypb.ExecResult
	663,  // 1467: ypb.Yak.ImportsProfileDatabase:output_type -> ypb.ExecResult
	200,  // 1468: ypb.Yak.QueryCVE:output_type -> ypb.QueryCVEResponse
	198,  // 1469: ypb.Yak.GetCVE:output_type -> ypb.CVEDetailEx
	202,  // 1470: ypb.Yak.SaveTextToTemporalFile:output_type -> ypb.SaveTextToTemporalFileResponse
	194,  // 1471: ypb.Yak.IsScrecorderReady:output_type -> ypb.IsScrecorderReadyResponse
	663,  // 1472: ypb.Yak.InstallScrecorder:output_type -> ypb.ExecResult
	663,  // 1473: ypb.Yak.StartScrecorder:output_type -> ypb.ExecResult
	190,  // 1474: ypb.Yak.QueryScreenRecorders:output_type -> ypb.QueryScreenRecorderResponse
	4,    // 1475: ypb.Yak.DeleteScreenRecorders:output_type -> ypb.Empty
	4,    // 1476: ypb.Yak.UploadScreenRecorders:output_type -> ypb.Empty
	185,  // 1477: ypb.Yak.GetOneScreenRecorders:output_type -> ypb.ScreenRecorder
	4,    // 1478: ypb.Yak.UpdateScreenRecorders:output_type -> ypb.Empty
	177,  // 1479: ypb.Yak.IsVulinboxReady:output_type -> ypb.IsVulinboxReadyResponse
	663,  // 1480: ypb.Yak.InstallVulinbox:output_type -> ypb.ExecResult
	663,  // 1481: ypb.Yak.StartVulinbox:output_type -> ypb.ExecResult
	663,  // 1482: ypb.Yak.GenQualityInspectionReport:output_type -> ypb.ExecResult
	183,  // 1483: ypb.Yak.HTTPRequestBuilder:output_type -> ypb.HTTPRequestBuilderResponse
	663,  // 1484: ypb.Yak.DebugPlugin:output_type -> ypb.ExecResult
	175,  // 1485: ypb.Yak.SmokingEvaluatePlugin:output_type -> ypb.SmokingEvaluatePluginResponse
	676,  // 1486: ypb.Yak.SmokingEvaluatePluginBatch:output_type -> ypb.SmokingEvaluatePluginBatchResponse
	666,  // 1487: ypb.Yak.GetSystemDefaultDnsServers:output_type -> ypb.DefaultDnsServerResponse
	169,  // 1488: ypb.Yak.DiagnoseNetwork:output_type -> ypb.DiagnoseNetworkResponse
	169,  // 1489: ypb.Yak.DiagnoseNetworkDNS:output_type -> ypb.DiagnoseNetworkResponse
	683,  // 1490: ypb.Yak.TraceRoute:output_type -> ypb.TraceRouteResponse
	165,  // 1491: ypb.Yak.GetGlobalNetworkConfig:output_type -> ypb.GlobalNetworkConfig
	4,    // 1492: ypb.Yak.SetGlobalNetworkConfig:output_type -> ypb.Empty
	4,    // 1493: ypb.Yak.ResetGlobalNetworkConfig:output_type -> ypb.Empty
	164,  // 1494: ypb.Yak.ValidP12PassWord:output_type -> ypb.ValidP12PassWordResponse
	157,  // 1495: ypb.Yak.RequestYakURL:output_type -> ypb.RequestYakURLResponse
	698,  // 1496: ypb.Yak.ReadFile:output_type -> ypb.ReadFileResponse
	141,  // 1497: ypb.Yak.GetPcapMetadata:output_type -> ypb.PcapMetadata
	153,  // 1498: ypb.Yak.PcapX:output_type -> ypb.PcapXResponse
	145,  // 1499: ypb.Yak.QueryTrafficSession:output_type -> ypb.QueryTrafficSessionResponse
	147,  // 1500: ypb.Yak.QueryTrafficPacket:output_type -> ypb.QueryTrafficPacketResponse
	149,  // 1501: ypb.Yak.QueryTrafficTCPReassembled:output_type -> ypb.QueryTrafficTCPReassembledResponse
	681,  // 1502: ypb.Yak.ParseTraffic:output_type -> ypb.ParseTrafficResponse
	139,  // 1503: ypb.Yak.DuplexConnection:output_type -> ypb.DuplexConnectionResponse
	133,  // 1504: ypb.Yak.HybridScan:output_type -> ypb.HybridScanResponse
	130,  // 1505: ypb.Yak.QueryHybridScanTask:output_type -> ypb.QueryHybridScanTaskResponse
	4,    // 1506: ypb.Yak.DeleteHybridScanTask:output_type -> ypb.Empty
	126,  // 1507: ypb.Yak.GetSpaceEngineStatus:output_type -> ypb.SpaceEngineStatus
	126,  // 1508: ypb.Yak.GetSpaceEngineAccountStatus:output_type -> ypb.SpaceEngineStatus
	126,  // 1509: ypb.Yak.GetSpaceEngineAccountStatusV2:output_type -> ypb.SpaceEngineStatus
	663,  // 1510: ypb.Yak.FetchPortAssetFromSpaceEngine:output_type -> ypb.ExecResult
	685,  // 1511: ypb.Yak.EvaluateExpression:output_type -> ypb.EvaluateExpressionResponse
	687,  // 1512: ypb.Yak.EvaluateMultiExpression:output_type -> ypb.EvaluateMultiExpressionResponse
	690,  // 1513: ypb.Yak.GetThirdPartyAppConfigTemplate:output_type -> ypb.GetThirdPartyAppConfigTemplateResponse
	6,    // 1514: ypb.Yak.CheckHahValidAiConfig:output_type -> ypb.GeneralResponse
	843,  // 1515: ypb.Yak.ListAiModel:output_type -> ypb.ListAiModelResponse
	692,  // 1516: ypb.Yak.GetFingerprint:output_type -> ypb.GetFingerprintResponse
	694,  // 1517: ypb.Yak.AddFingerprint:output_type -> ypb.AddFingerprintResponse
	696,  // 1518: ypb.Yak.ModifyFingerprint:output_type -> ypb.ModifyFingerprintResponse
	708,  // 1519: ypb.Yak.QueryFingerprint:output_type -> ypb.QueryFingerprintResponse
	703,  // 1520: ypb.Yak.DeleteFingerprint:output_type -> ypb.DbOperateMessage
	703,  // 1521: ypb.Yak.UpdateFingerprint:output_type -> ypb.DbOperateMessage
	703,  // 1522: ypb.Yak.CreateFingerprint:output_type -> ypb.DbOperateMessage
	703,  // 1523: ypb.Yak.RecoverBuiltinFingerprint:output_type -> ypb.DbOperateMessage
	703,  // 1524: ypb.Yak.CreateFingerprintGroup:output_type -> ypb.DbOperateMessage
	713,  // 1525: ypb.Yak.GetAllFingerprintGroup:output_type -> ypb.FingerprintGroups
	703,  // 1526: ypb.Yak.RenameFingerprintGroup:output_type -> ypb.DbOperateMessage
	703,  // 1527: ypb.Yak.DeleteFingerprintGroup:output_type -> ypb.DbOperateMessage
	703,  // 1528: ypb.Yak.BatchUpdateFingerprintToGroup:output_type -> ypb.DbOperateMessage
	713,  // 1529: ypb.Yak.GetFingerprintGroupSetByFilter:output_type -> ypb.FingerprintGroups
	720,  // 1530: ypb.Yak.ExportFingerprint:output_type -> ypb.DataTransferProgress
	720,  // 1531: ypb.Yak.ImportFingerprint:output_type -> ypb.DataTransferProgress
	700,  // 1532: ypb.Yak.GetReverseShellProgramList:output_type -> ypb.GetReverseShellProgramListResponse
	702,  // 1533: ypb.Yak.GenerateReverseShellCommand:output_type -> ypb.GenerateReverseShellCommandResponse
	740,  // 1534: ypb.Yak.QuerySyntaxFlowRule:output_type -> ypb.QuerySyntaxFlowRuleResponse
	703,  // 1535: ypb.Yak.CreateSyntaxFlowRule:output_type -> ypb.DbOperateMessage
	737,  // 1536: ypb.Yak.CreateSyntaxFlowRuleEx:output_type -> ypb.CreateSyntaxFlowRuleResponse
	703,  // 1537: ypb.Yak.UpdateSyntaxFlowRule:output_type -> ypb.DbOperateMessage
	739,  // 1538: ypb.Yak.UpdateSyntaxFlowRuleEx:output_type -> ypb.UpdateSyntaxFlowRuleResponse
	703,  // 1539: ypb.Yak.DeleteSyntaxFlowRule:output_type -> ypb.DbOperateMessage
	743,  // 1540: ypb.Yak.CheckSyntaxFlowRuleUpdate:output_type -> ypb.CheckSyntaxFlowRuleUpdateResponse
	745,  // 1541: ypb.Yak.ApplySyntaxFlowRuleUpdate:output_type -> ypb.ApplySyntaxFlowRuleUpdateResponse
	749,  // 1542: ypb.Yak.QuerySyntaxFlowRuleGroup:output_type -> ypb.QuerySyntaxFlowRuleGroupResponse
	703,  // 1543: ypb.Yak.DeleteSyntaxFlowRuleGroup:output_type -> ypb.DbOperateMessage
	703,  // 1544: ypb.Yak.CreateSyntaxFlowRuleGroup:output_type -> ypb.DbOperateMessage
	703,  // 1545: ypb.Yak.UpdateSyntaxFlowRuleGroup:output_type -> ypb.DbOperateMessage
	703,  // 1546: ypb.Yak.UpdateSyntaxFlowRuleAndGroup:output_type -> ypb.DbOperateMessage
	754,  // 1547: ypb.Yak.QuerySyntaxFlowSameGroup:output_type -> ypb.QuerySyntaxFlowSameGroupResponse
	757,  // 1548: ypb.Yak.SyntaxFlowRuleToOnline:output_type -> ypb.SyntaxFlowRuleOnlineProgress
	757,  // 1549: ypb.Yak.DownloadSyntaxFlowRule:output_type -> ypb.SyntaxFlowRuleOnlineProgress
	765,  // 1550: ypb.Yak.SyntaxFlowScan:output_type -> ypb.SyntaxFlowScanResponse
	762,  // 1551: ypb.Yak.QuerySyntaxFlowScanTask:output_type -> ypb.QuerySyntaxFlowScanTaskResponse
	703,  // 1552: ypb.Yak.DeleteSyntaxFlowScanTask:output_type -> ypb.DbOperateMessage
	768,  // 1553: ypb.Yak.QuerySyntaxFlowResult:output_type -> ypb.QuerySyntaxFlowResultResponse
	771,  // 1554: ypb.Yak.DeleteSyntaxFlowResult:output_type -> ypb.DeleteSyntaxFlowResultResponse
	735,  // 1555: ypb.Yak.QuerySSAPrograms:output_type -> ypb.QuerySSAProgramResponse
	703,  // 1556: ypb.Yak.UpdateSSAProgram:output_type -> ypb.DbOperateMessage
	703,  // 1557: ypb.Yak.DeleteSSAPrograms:output_type -> ypb.DbOperateMessage
	785,  // 1558: ypb.Yak.QuerySSARisks:output_type -> ypb.QuerySSARisksResponse
	787,  // 1559: ypb.Yak.QueryNewSSARisks:output_type -> ypb.QueryNewSSARisksResponse
	703,  // 1560: ypb.Yak.DeleteSSARisks:output_type -> ypb.DbOperateMessage
	703,  // 1561: ypb.Yak.UpdateSSARiskTags:output_type -> ypb.DbOperateMessage
	790,  // 1562: ypb.Yak.GetSSARiskFieldGroup:output_type -> ypb.SSARiskFieldGroupResponse
	792,  // 1563: ypb.Yak.NewSSARiskRead:output_type -> ypb.NewSSARiskReadResponse
	729,  // 1564: ypb.Yak.SSARiskDiff:output_type -> ypb.SSARiskDiffResponse
	797,  // 1565: ypb.Yak.CreateSSARiskDisposals:output_type -> ypb.CreateSSARiskDisposalsResponse
	799,  // 1566: ypb.Yak.QuerySSARiskDisposals:output_type -> ypb.QuerySSARiskDisposalsResponse
	801,  // 1567: ypb.Yak.UpdateSSARiskDisposals:output_type -> ypb.UpdateSSARiskDisposalsResponse
	803,  // 1568: ypb.Yak.DeleteSSARiskDisposals:output_type -> ypb.DeleteSSARiskDisposalsResponse
	805,  // 1569: ypb.Yak.GetSSARiskDisposal:output_type -> ypb.GetSSARiskDisposalResponse
	4,    // 1570: ypb.Yak.SSARiskFeedbackToOnline:output_type -> ypb.Empty
	863,  // 1571: ypb.Yak.GenerateSSAReport:output_type -> ypb.GenerateSSAReportResponse
	870,  // 1572: ypb.Yak.CreateSSAProject:output_type -> ypb.CreateSSAProjectResponse
	872,  // 1573: ypb.Yak.UpdateSSAProject:output_type -> ypb.UpdateSSAProjectResponse
	874,  // 1574: ypb.Yak.DeleteSSAProject:output_type -> ypb.DeleteSSAProjectResponse
	876,  // 1575: ypb.Yak.QuerySSAProject:output_type -> ypb.QuerySSAProjectResponse
	773,  // 1576: ypb.Yak.GetAllPluginEnv:output_type -> ypb.PluginEnvData
	773,  // 1577: ypb.Yak.QueryPluginEnv:output_type -> ypb.PluginEnvData
	4,    // 1578: ypb.Yak.CreatePluginEnv:output_type -> ypb.Empty
	4,    // 1579: ypb.Yak.SetPluginEnv:output_type -> ypb.Empty
	4,    // 1580: ypb.Yak.DeletePluginEnv:output_type -> ypb.Empty
	776,  // 1581: ypb.Yak.GetAllFuzztagInfo:output_type -> ypb.GetAllFuzztagInfoResponse
	780,  // 1582: ypb.Yak.GenerateFuzztag:output_type -> ypb.GenerateFuzztagResponse
	808,  // 1583: ypb.Yak.ExportSyntaxFlows:output_type -> ypb.SyntaxflowsProgress
	808,  // 1584: ypb.Yak.ImportSyntaxFlows:output_type -> ypb.SyntaxflowsProgress
	813,  // 1585: ypb.Yak.CreateHotPatchTemplate:output_type -> ypb.CreateHotPatchTemplateResponse
	814,  // 1586: ypb.Yak.DeleteHotPatchTemplate:output_type -> ypb.DeleteHotPatchTemplateResponse
	815,  // 1587: ypb.Yak.UpdateHotPatchTemplate:output_type -> ypb.UpdateHotPatchTemplateResponse
	816,  // 1588: ypb.Yak.QueryHotPatchTemplate:output_type -> ypb.QueryHotPatchTemplateResponse
	818,  // 1589: ypb.Yak.QueryHotPatchTemplateList:output_type -> ypb.QueryHotPatchTemplateListResponse
	820,  // 1590: ypb.Yak.GroupTableColumn:output_type -> ypb.GroupTableColumnResponse
	4,    // 1591: ypb.Yak.UploadHotPatchTemplateToOnline:output_type -> ypb.Empty
	4,    // 1592: ypb.Yak.DownloadHotPatchTemplate:output_type -> ypb.Empty
	644,  // 1593: ypb.Yak.SetMITMHijackFilter:output_type -> ypb.SetMITMFilterResponse
	643,  // 1594: ypb.Yak.GetMITMHijackFilter:output_type -> ypb.SetMITMFilterRequest
	643,  // 1595: ypb.Yak.ResetMITMHijackFilter:output_type -> ypb.SetMITMFilterRequest
	824,  // 1596: ypb.Yak.ExportHTTPFlowStream:output_type -> ypb.ExportHTTPFlowStreamResponse
	826,  // 1597: ypb.Yak.ImportHTTPFlowStream:output_type -> ypb.ImportHTTPFlowStreamResponse
	831,  // 1598: ypb.Yak.CreateNote:output_type -> ypb.CreateNoteResponse
	703,  // 1599: ypb.Yak.UpdateNote:output_type -> ypb.DbOperateMessage
	703,  // 1600: ypb.Yak.DeleteNote:output_type -> ypb.DbOperateMessage
	835,  // 1601: ypb.Yak.QueryNote:output_type -> ypb.QueryNoteResponse
	837,  // 1602: ypb.Yak.SearchNoteContent:output_type -> ypb.SearchNoteContentResponse
	839,  // 1603: ypb.Yak.ImportNote:output_type -> ypb.ImportNoteResponse
	841,  // 1604: ypb.Yak.ExportNote:output_type -> ypb.ExportNoteResponse
	103,  // 1605: ypb.Yak.StartAIReAct:output_type -> ypb.AIOutputEvent
	103,  // 1606: ypb.Yak.StartAITask:output_type -> ypb.AIOutputEvent
	114,  // 1607: ypb.Yak.QueryAITask:output_type -> ypb.AITaskQueryResponse
	703,  // 1608: ypb.Yak.DeleteAITask:output_type -> ypb.DbOperateMessage
	112,  // 1609: ypb.Yak.QueryAIEvent:output_type -> ypb.AIEventQueryResponse
	103,  // 1610: ypb.Yak.StartAITriage:output_type -> ypb.AIOutputEvent
	703,  // 1611: ypb.Yak.CreateAIForge:output_type -> ypb.DbOperateMessage
	703,  // 1612: ypb.Yak.UpdateAIForge:output_type -> ypb.DbOperateMessage
	703,  // 1613: ypb.Yak.DeleteAIForge:output_type -> ypb.DbOperateMessage
	120,  // 1614: ypb.Yak.QueryAIForge:output_type -> ypb.QueryAIForgeResponse
	118,  // 1615: ypb.Yak.GetAIForge:output_type -> ypb.AIForge
	123,  // 1616: ypb.Yak.StartMcpServer:output_type -> ypb.StartMcpServerResponse
	89,   // 1617: ypb.Yak.GetToolSetList:output_type -> ypb.GetToolSetListResponse
	101,  // 1618: ypb.Yak.GetAIToolList:output_type -> ypb.GetAIToolListResponse
	703,  // 1619: ypb.Yak.DeleteAITool:output_type -> ypb.DbOperateMessage
	703,  // 1620: ypb.Yak.SaveAITool:output_type -> ypb.DbOperateMessage
	95,   // 1621: ypb.Yak.SaveAIToolV2:output_type -> ypb.SaveAIToolV2Response
	703,  // 1622: ypb.Yak.UpdateAITool:output_type -> ypb.DbOperateMessage
	99,   // 1623: ypb.Yak.ToggleAIToolFavorite:output_type -> ypb.ToggleAIToolFavoriteResponse
	93,   // 1624: ypb.Yak.AIToolGenerateMetadata:output_type -> ypb.AIToolGenerateMetadataResponse
	844,  // 1625: ypb.Yak.IsLlamaServerReady:output_type -> ypb.IsLlamaServerReadyResponse
	846,  // 1626: ypb.Yak.IsLocalModelReady:output_type -> ypb.IsLocalModelReadyResponse
	663,  // 1627: ypb.Yak.InstallLlamaServer:output_type -> ypb.ExecResult
	663,  // 1628: ypb.Yak.StartLocalModel:output_type -> ypb.ExecResult
	6,    // 1629: ypb.Yak.StopLocalModel:output_type -> ypb.GeneralResponse
	663,  // 1630: ypb.Yak.DownloadLocalModel:output_type -> ypb.ExecResult
	851,  // 1631: ypb.Yak.GetSupportedLocalModels:output_type -> ypb.GetSupportedLocalModelsResponse
	6,    // 1632: ypb.Yak.AddLocalModel:output_type -> ypb.GeneralResponse
	6,    // 1633: ypb.Yak.DeleteLocalModel:output_type -> ypb.GeneralResponse
	6,    // 1634: ypb.Yak.UpdateLocalModel:output_type -> ypb.GeneralResponse
	41,   // 1635: ypb.Yak.GetAllStartedLocalModels:output_type -> ypb.GetAllStartedLocalModelsResponse
	6,    // 1636: ypb.Yak.ClearAllModels:output_type -> ypb.GeneralResponse
	87,   // 1637: ypb.Yak.IsSearchVectorDatabaseReady:output_type -> ypb.IsSearchVectorDatabaseReadyResponse
	663,  // 1638: ypb.Yak.InitSearchVectorDatabase:output_type -> ypb.ExecResult
	85,   // 1639: ypb.Yak.GetAllVectorStoreCollections:output_type -> ypb.GetAllVectorStoreCollectionsResponse
	84,   // 1640: ypb.Yak.GetAllVectorStoreCollectionsWithFilter:output_type -> ypb.GetAllVectorStoreCollectionsWithFilterResponse
	6,    // 1641: ypb.Yak.DeleteSearchVectorDatabase:output_type -> ypb.GeneralResponse
	6,    // 1642: ypb.Yak.UpdateVectorStoreCollection:output_type -> ypb.GeneralResponse
	79,   // 1643: ypb.Yak.ListVectorStoreEntries:output_type -> ypb.ListVectorStoreEntriesResponse
	6,    // 1644: ypb.Yak.CreateVectorStoreEntry:output_type -> ypb.GeneralResponse
	81,   // 1645: ypb.Yak.GetDocumentByVectorStoreEntryID:output_type -> ypb.GetDocumentByVectorStoreEntryIDResponse
	49,   // 1646: ypb.Yak.ListThirdPartyBinary:output_type -> ypb.ListThirdPartyBinaryResponse
	663,  // 1647: ypb.Yak.InstallThirdPartyBinary:output_type -> ypb.ExecResult
	6,    // 1648: ypb.Yak.UninstallThirdPartyBinary:output_type -> ypb.GeneralResponse
	53,   // 1649: ypb.Yak.IsThirdPartyBinaryReady:output_type -> ypb.IsThirdPartyBinaryReadyResponse
	663,  // 1650: ypb.Yak.StartThirdPartyBinary:output_type -> ypb.ExecResult
	860,  // 1651: ypb.Yak.PluginTrace:output_type -> ypb.PluginTraceResponse
	57,   // 1652: ypb.Yak.GetKnowledgeBaseNameList:output_type -> ypb.GetKnowledgeBaseNameListResponse
	62,   // 1653: ypb.Yak.GetKnowledgeBase:output_type -> ypb.GetKnowledgeBaseResponse
	59,   // 1654: ypb.Yak.GetKnowledgeBaseTypeList:output_type -> ypb.GetKnowledgeBaseTypeListResponse
	6,    // 1655: ypb.Yak.DeleteKnowledgeBase:output_type -> ypb.GeneralResponse
	6,    // 1656: ypb.Yak.CreateKnowledgeBase:output_type -> ypb.GeneralResponse
	6,    // 1657: ypb.Yak.UpdateKnowledgeBase:output_type -> ypb.GeneralResponse
	6,    // 1658: ypb.Yak.DeleteKnowledgeBaseEntry:output_type -> ypb.GeneralResponse
	6,    // 1659: ypb.Yak.CreateKnowledgeBaseEntry:output_type -> ypb.GeneralResponse
	6,    // 1660: ypb.Yak.UpdateKnowledgeBaseEntry:output_type -> ypb.GeneralResponse
	69,   // 1661: ypb.Yak.SearchKnowledgeBaseEntry:output_type -> ypb.SearchKnowledgeBaseEntryResponse
	68,   // 1662: ypb.Yak.QueryKnowledgeBaseByAI:output_type -> ypb.QueryKnowledgeBaseByAIResponse
	6,    // 1663: ypb.Yak.BuildVectorIndexForKnowledgeBase:output_type -> ypb.GeneralResponse
	6,    // 1664: ypb.Yak.BuildVectorIndexForKnowledgeBaseEntry:output_type -> ypb.GeneralResponse
	26,   // 1665: ypb.Yak.ListEntityRepository:output_type -> ypb.ListEntityRepositoryResponse
	30,   // 1666: ypb.Yak.QueryEntity:output_type -> ypb.QueryEntityResponse
	703,  // 1667: ypb.Yak.DeleteEntity:output_type -> ypb.DbOperateMessage
	35,   // 1668: ypb.Yak.QueryRelationship:output_type -> ypb.QueryRelationshipResponse
	37,   // 1669: ypb.Yak.QuerySubERM:output_type -> ypb.QuerySubERMResponse
	39,   // 1670: ypb.Yak.GenerateERMDot:output_type -> ypb.GenerateERMDotResponse
	16,   // 1671: ypb.Yak.ExportKnowledgeBase:output_type -> ypb.GeneralProgress
	16,   // 1672: ypb.Yak.ImportKnowledgeBase:output_type -> ypb.GeneralProgress
	6,    // 1673: ypb.Yak.AddMCPServer:output_type -> ypb.GeneralResponse
	6,    // 1674: ypb.Yak.DeleteMCPServer:output_type -> ypb.GeneralResponse
	6,    // 1675: ypb.Yak.UpdateMCPServer:output_type -> ypb.GeneralResponse
	24,   // 1676: ypb.Yak.GetAllMCPServers:output_type -> ypb.GetAllMCPServersResponse
	1118, // [1118:1677] is the sub-list for method output_type
	559,  // [559:1118] is the sub-list for method input_type
	559,  // [559:559] is the sub-list for extension type_name
	559,  // [559:559] is the sub-list for extension extendee
	0,    // [0:559] is the sub-list for field type_name
}

func init() { file_yakgrpc_proto_init() }
func file_yakgrpc_proto_init() {
	if File_yakgrpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yakgrpc_proto_rawDesc), len(file_yakgrpc_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   882,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yakgrpc_proto_goTypes,
		DependencyIndexes: file_yakgrpc_proto_depIdxs,
		EnumInfos:         file_yakgrpc_proto_enumTypes,
		MessageInfos:      file_yakgrpc_proto_msgTypes,
	}.Build()
	File_yakgrpc_proto = out.File
	file_yakgrpc_proto_goTypes = nil
	file_yakgrpc_proto_depIdxs = nil
}
