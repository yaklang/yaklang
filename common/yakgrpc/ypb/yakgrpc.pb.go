// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.0
// source: yakgrpc.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WebShell
type ShellType int32

const (
	ShellType_Behinder ShellType = 0
	ShellType_Godzilla ShellType = 1
	ShellType_YakShell ShellType = 2
)

// Enum value maps for ShellType.
var (
	ShellType_name = map[int32]string{
		0: "Behinder",
		1: "Godzilla",
		2: "YakShell",
	}
	ShellType_value = map[string]int32{
		"Behinder": 0,
		"Godzilla": 1,
		"YakShell": 2,
	}
)

func (x ShellType) Enum() *ShellType {
	p := new(ShellType)
	*p = x
	return p
}

func (x ShellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellType) Descriptor() protoreflect.EnumDescriptor {
	return file_yakgrpc_proto_enumTypes[0].Descriptor()
}

func (ShellType) Type() protoreflect.EnumType {
	return &file_yakgrpc_proto_enumTypes[0]
}

func (x ShellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShellType.Descriptor instead.
func (ShellType) EnumDescriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{0}
}

type ShellScript int32

const (
	ShellScript_JSP  ShellScript = 0
	ShellScript_JSPX ShellScript = 1
	ShellScript_ASP  ShellScript = 2
	ShellScript_ASPX ShellScript = 3
	ShellScript_PHP  ShellScript = 4
)

// Enum value maps for ShellScript.
var (
	ShellScript_name = map[int32]string{
		0: "JSP",
		1: "JSPX",
		2: "ASP",
		3: "ASPX",
		4: "PHP",
	}
	ShellScript_value = map[string]int32{
		"JSP":  0,
		"JSPX": 1,
		"ASP":  2,
		"ASPX": 3,
		"PHP":  4,
	}
)

func (x ShellScript) Enum() *ShellScript {
	p := new(ShellScript)
	*p = x
	return p
}

func (x ShellScript) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellScript) Descriptor() protoreflect.EnumDescriptor {
	return file_yakgrpc_proto_enumTypes[1].Descriptor()
}

func (ShellScript) Type() protoreflect.EnumType {
	return &file_yakgrpc_proto_enumTypes[1]
}

func (x ShellScript) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShellScript.Descriptor instead.
func (ShellScript) EnumDescriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{1}
}

type EncMode int32

const (
	EncMode_Raw       EncMode = 0
	EncMode_Base64    EncMode = 1
	EncMode_AesRaw    EncMode = 2
	EncMode_AesBase64 EncMode = 3
	EncMode_XorRaw    EncMode = 4
	EncMode_XorBase64 EncMode = 5
)

// Enum value maps for EncMode.
var (
	EncMode_name = map[int32]string{
		0: "Raw",
		1: "Base64",
		2: "AesRaw",
		3: "AesBase64",
		4: "XorRaw",
		5: "XorBase64",
	}
	EncMode_value = map[string]int32{
		"Raw":       0,
		"Base64":    1,
		"AesRaw":    2,
		"AesBase64": 3,
		"XorRaw":    4,
		"XorBase64": 5,
	}
)

func (x EncMode) Enum() *EncMode {
	p := new(EncMode)
	*p = x
	return p
}

func (x EncMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yakgrpc_proto_enumTypes[2].Descriptor()
}

func (EncMode) Type() protoreflect.EnumType {
	return &file_yakgrpc_proto_enumTypes[2]
}

func (x EncMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncMode.Descriptor instead.
func (EncMode) EnumDescriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{2}
}

type GenerateYakCodeByPacketRequest_Template int32

const (
	GenerateYakCodeByPacketRequest_Ordinary GenerateYakCodeByPacketRequest_Template = 0
	GenerateYakCodeByPacketRequest_Batch    GenerateYakCodeByPacketRequest_Template = 1
)

// Enum value maps for GenerateYakCodeByPacketRequest_Template.
var (
	GenerateYakCodeByPacketRequest_Template_name = map[int32]string{
		0: "Ordinary",
		1: "Batch",
	}
	GenerateYakCodeByPacketRequest_Template_value = map[string]int32{
		"Ordinary": 0,
		"Batch":    1,
	}
)

func (x GenerateYakCodeByPacketRequest_Template) Enum() *GenerateYakCodeByPacketRequest_Template {
	p := new(GenerateYakCodeByPacketRequest_Template)
	*p = x
	return p
}

func (x GenerateYakCodeByPacketRequest_Template) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateYakCodeByPacketRequest_Template) Descriptor() protoreflect.EnumDescriptor {
	return file_yakgrpc_proto_enumTypes[3].Descriptor()
}

func (GenerateYakCodeByPacketRequest_Template) Type() protoreflect.EnumType {
	return &file_yakgrpc_proto_enumTypes[3]
}

func (x GenerateYakCodeByPacketRequest_Template) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateYakCodeByPacketRequest_Template.Descriptor instead.
func (GenerateYakCodeByPacketRequest_Template) EnumDescriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{231, 0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{0}
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GeneralResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *GeneralResponse) Reset() {
	*x = GeneralResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralResponse) ProtoMessage() {}

func (x *GeneralResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralResponse.ProtoReflect.Descriptor instead.
func (*GeneralResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{2}
}

func (x *GeneralResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GeneralResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DeleteYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64   `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Ids []int64 `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeleteYakScriptRequest) Reset() {
	*x = DeleteYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptRequest) ProtoMessage() {}

func (x *DeleteYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteYakScriptRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteYakScriptRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ExecBatchYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 目标会被自动拆分
	Target     string `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	TargetFile string `protobuf:"bytes,11,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	// 额外参数可以被添加
	ExtraParams []*ExecParamItem `protobuf:"bytes,7,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
	// 筛选与限制
	Keyword               string   `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	ExcludedYakScript     []string `protobuf:"bytes,22,rep,name=ExcludedYakScript,proto3" json:"ExcludedYakScript,omitempty"`
	DisableNucleiWorkflow bool     `protobuf:"varint,23,opt,name=DisableNucleiWorkflow,proto3" json:"DisableNucleiWorkflow,omitempty"`
	Limit                 int64    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// 默认总用时
	TotalTimeoutSeconds int64 `protobuf:"varint,4,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	// 模块类型，默认为 nuclei
	Type string `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	// 并发（进程）
	Concurrent int64 `protobuf:"varint,6,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	// 精确使用脚本名称
	// 要注意，这个 Scripts 和 PluginFilter 是冲突的
	ScriptNames []string `protobuf:"bytes,8,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	// Tags with exclude / include
	PluginFilter       *QueryYakScriptRequest `protobuf:"bytes,12,opt,name=PluginFilter,proto3" json:"PluginFilter,omitempty"`
	EnablePluginFilter bool                   `protobuf:"varint,13,opt,name=EnablePluginFilter,proto3" json:"EnablePluginFilter,omitempty"`
	// 设置一个代理
	Proxy string `protobuf:"bytes,14,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	// 每个进程的任务数量
	ProgressTaskCount int64 `protobuf:"varint,15,opt,name=ProgressTaskCount,proto3" json:"ProgressTaskCount,omitempty"`
	// 基础进度 - 这个默认是 0.1 一般别用，只在 Recover 的时候可能才会有用处
	BaseProgress float64 `protobuf:"fixed64,16,opt,name=BaseProgress,proto3" json:"BaseProgress,omitempty"`
	// 这个很关键，不然会报错
	FromRecover          bool   `protobuf:"varint,17,opt,name=FromRecover,proto3" json:"FromRecover,omitempty"`
	YakScriptOnlineGroup string `protobuf:"bytes,18,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string `protobuf:"bytes,19,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *ExecBatchYakScriptRequest) Reset() {
	*x = ExecBatchYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptRequest) ProtoMessage() {}

func (x *ExecBatchYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{4}
}

func (x *ExecBatchYakScriptRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetExtraParams() []*ExecParamItem {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetExcludedYakScript() []string {
	if x != nil {
		return x.ExcludedYakScript
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetDisableNucleiWorkflow() bool {
	if x != nil {
		return x.DisableNucleiWorkflow
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetPluginFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.PluginFilter
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetEnablePluginFilter() bool {
	if x != nil {
		return x.EnablePluginFilter
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetProgressTaskCount() int64 {
	if x != nil {
		return x.ProgressTaskCount
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetBaseProgress() float64 {
	if x != nil {
		return x.BaseProgress
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetFromRecover() bool {
	if x != nil {
		return x.FromRecover
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type ExecBatchYakScriptResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Ok          bool   `protobuf:"varint,4,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason      string `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Exploitable bool   `protobuf:"varint,6,opt,name=Exploitable,proto3" json:"Exploitable,omitempty"`
	// 脚本的详细信息
	PoC    *YakScript  `protobuf:"bytes,7,opt,name=PoC,proto3" json:"PoC,omitempty"`
	Result *ExecResult `protobuf:"bytes,8,opt,name=Result,proto3" json:"Result,omitempty"`
	// 如果是整体进度信息，则在这儿展示
	// 处理这几个消息的时候，其他都不应该生效
	ProgressMessage bool    `protobuf:"varint,9,opt,name=ProgressMessage,proto3" json:"ProgressMessage,omitempty"`
	ProgressPercent float64 `protobuf:"fixed64,10,opt,name=ProgressPercent,proto3" json:"ProgressPercent,omitempty"`
	ProgressTotal   int64   `protobuf:"varint,11,opt,name=ProgressTotal,proto3" json:"ProgressTotal,omitempty"`
	ProgressCount   int64   `protobuf:"varint,12,opt,name=ProgressCount,proto3" json:"ProgressCount,omitempty"`
	// 正在执行中的进程数
	ProgressRunning int64 `protobuf:"varint,17,opt,name=ProgressRunning,proto3" json:"ProgressRunning,omitempty"`
	// 正在执行中的扫描任务数量
	ScanTaskExecutingCount int64 `protobuf:"varint,18,opt,name=ScanTaskExecutingCount,proto3" json:"ScanTaskExecutingCount,omitempty"`
	// 任务相关内容
	Target     string           `protobuf:"bytes,13,opt,name=Target,proto3" json:"Target,omitempty"`
	ExtraParam []*ExecParamItem `protobuf:"bytes,14,rep,name=ExtraParam,proto3" json:"ExtraParam,omitempty"`
	TaskId     string           `protobuf:"bytes,15,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	// 当前时间
	Timestamp int64 `protobuf:"varint,16,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ExecBatchYakScriptResult) Reset() {
	*x = ExecBatchYakScriptResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptResult) ProtoMessage() {}

func (x *ExecBatchYakScriptResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptResult.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{5}
}

func (x *ExecBatchYakScriptResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExploitable() bool {
	if x != nil {
		return x.Exploitable
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetPoC() *YakScript {
	if x != nil {
		return x.PoC
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetResult() *ExecResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetProgressMessage() bool {
	if x != nil {
		return x.ProgressMessage
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetProgressPercent() float64 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressTotal() int64 {
	if x != nil {
		return x.ProgressTotal
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressCount() int64 {
	if x != nil {
		return x.ProgressCount
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressRunning() int64 {
	if x != nil {
		return x.ProgressRunning
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetScanTaskExecutingCount() int64 {
	if x != nil {
		return x.ScanTaskExecutingCount
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExtraParam() []*ExecParamItem {
	if x != nil {
		return x.ExtraParam
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetYakScriptByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetYakScriptByIdRequest) Reset() {
	*x = GetYakScriptByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByIdRequest) ProtoMessage() {}

func (x *GetYakScriptByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByIdRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetYakScriptByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetYakScriptByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	UUID string `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *GetYakScriptByNameRequest) Reset() {
	*x = GetYakScriptByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByNameRequest) ProtoMessage() {}

func (x *GetYakScriptByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByNameRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByNameRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetYakScriptByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetYakScriptByNameRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type GetYakScriptByOnlineIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID     string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OnlineID int64  `protobuf:"varint,2,opt,name=OnlineID,proto3" json:"OnlineID,omitempty"`
}

func (x *GetYakScriptByOnlineIDRequest) Reset() {
	*x = GetYakScriptByOnlineIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptByOnlineIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByOnlineIDRequest) ProtoMessage() {}

func (x *GetYakScriptByOnlineIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByOnlineIDRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByOnlineIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetYakScriptByOnlineIDRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *GetYakScriptByOnlineIDRequest) GetOnlineID() int64 {
	if x != nil {
		return x.OnlineID
	}
	return 0
}

type VerifySystemCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid  bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *VerifySystemCertificateResponse) Reset() {
	*x = VerifySystemCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifySystemCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySystemCertificateResponse) ProtoMessage() {}

func (x *VerifySystemCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySystemCertificateResponse.ProtoReflect.Descriptor instead.
func (*VerifySystemCertificateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{9}
}

func (x *VerifySystemCertificateResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *VerifySystemCertificateResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetSpaceEngineAccountStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Account string `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Domain  string `protobuf:"bytes,4,opt,name=Domain,proto3" json:"Domain,omitempty"`
}

func (x *GetSpaceEngineAccountStatusRequest) Reset() {
	*x = GetSpaceEngineAccountStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceEngineAccountStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceEngineAccountStatusRequest) ProtoMessage() {}

func (x *GetSpaceEngineAccountStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceEngineAccountStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSpaceEngineAccountStatusRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{10}
}

func (x *GetSpaceEngineAccountStatusRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetSpaceEngineAccountStatusRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetSpaceEngineAccountStatusRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetSpaceEngineAccountStatusRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type GetSpaceEngineStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *GetSpaceEngineStatusRequest) Reset() {
	*x = GetSpaceEngineStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceEngineStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceEngineStatusRequest) ProtoMessage() {}

func (x *GetSpaceEngineStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceEngineStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSpaceEngineStatusRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetSpaceEngineStatusRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SpaceEngineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Info   string `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info,omitempty"`
	Raw    []byte `protobuf:"bytes,4,opt,name=Raw,proto3" json:"Raw,omitempty"`
	Used   int64  `protobuf:"varint,5,opt,name=Used,proto3" json:"Used,omitempty"`
	Remain int64  `protobuf:"varint,6,opt,name=Remain,proto3" json:"Remain,omitempty"`
}

func (x *SpaceEngineStatus) Reset() {
	*x = SpaceEngineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceEngineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceEngineStatus) ProtoMessage() {}

func (x *SpaceEngineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceEngineStatus.ProtoReflect.Descriptor instead.
func (*SpaceEngineStatus) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{12}
}

func (x *SpaceEngineStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpaceEngineStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpaceEngineStatus) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *SpaceEngineStatus) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *SpaceEngineStatus) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *SpaceEngineStatus) GetRemain() int64 {
	if x != nil {
		return x.Remain
	}
	return 0
}

type FetchPortAssetFromSpaceEngineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// zoomeye / hunter / fofa
	Type      string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Filter    string `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	MaxPage   int64  `protobuf:"varint,3,opt,name=MaxPage,proto3" json:"MaxPage,omitempty"`
	MaxRecord int64  `protobuf:"varint,4,opt,name=MaxRecord,proto3" json:"MaxRecord,omitempty"`
	// page limit
	PageSize       int64  `protobuf:"varint,5,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	ScanBeforeSave bool   `protobuf:"varint,6,opt,name=ScanBeforeSave,proto3" json:"ScanBeforeSave,omitempty"`
	Proxy          string `protobuf:"bytes,7,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	Concurrent     int64  `protobuf:"varint,8,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
}

func (x *FetchPortAssetFromSpaceEngineRequest) Reset() {
	*x = FetchPortAssetFromSpaceEngineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchPortAssetFromSpaceEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchPortAssetFromSpaceEngineRequest) ProtoMessage() {}

func (x *FetchPortAssetFromSpaceEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchPortAssetFromSpaceEngineRequest.ProtoReflect.Descriptor instead.
func (*FetchPortAssetFromSpaceEngineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{13}
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetMaxPage() int64 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetMaxRecord() int64 {
	if x != nil {
		return x.MaxRecord
	}
	return 0
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetScanBeforeSave() bool {
	if x != nil {
		return x.ScanBeforeSave
	}
	return false
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FetchPortAssetFromSpaceEngineRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

type DeleteHybridScanTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId    string                `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	DeleteAll bool                  `protobuf:"varint,2,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Filter    *HybridScanTaskFilter `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *DeleteHybridScanTaskRequest) Reset() {
	*x = DeleteHybridScanTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHybridScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHybridScanTaskRequest) ProtoMessage() {}

func (x *DeleteHybridScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHybridScanTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteHybridScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteHybridScanTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DeleteHybridScanTaskRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteHybridScanTaskRequest) GetFilter() *HybridScanTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type HybridScanTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt int64  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt int64  `protobuf:"varint,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	TaskId    string `protobuf:"bytes,4,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	Status    string `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"` // executing / paused / done
	// exec status
	TotalTargets    int64  `protobuf:"varint,6,opt,name=TotalTargets,proto3" json:"TotalTargets,omitempty"`
	TotalPlugins    int64  `protobuf:"varint,7,opt,name=TotalPlugins,proto3" json:"TotalPlugins,omitempty"`
	TotalTasks      int64  `protobuf:"varint,8,opt,name=TotalTasks,proto3" json:"TotalTasks,omitempty"`
	FinishedTasks   int64  `protobuf:"varint,9,opt,name=FinishedTasks,proto3" json:"FinishedTasks,omitempty"`
	FinishedTargets int64  `protobuf:"varint,10,opt,name=FinishedTargets,proto3" json:"FinishedTargets,omitempty"`
	FirstTarget     string `protobuf:"bytes,11,opt,name=FirstTarget,proto3" json:"FirstTarget,omitempty"`
	Reason          string `protobuf:"bytes,12,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *HybridScanTask) Reset() {
	*x = HybridScanTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridScanTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanTask) ProtoMessage() {}

func (x *HybridScanTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanTask.ProtoReflect.Descriptor instead.
func (*HybridScanTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{15}
}

func (x *HybridScanTask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HybridScanTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HybridScanTask) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HybridScanTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *HybridScanTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HybridScanTask) GetTotalTargets() int64 {
	if x != nil {
		return x.TotalTargets
	}
	return 0
}

func (x *HybridScanTask) GetTotalPlugins() int64 {
	if x != nil {
		return x.TotalPlugins
	}
	return 0
}

func (x *HybridScanTask) GetTotalTasks() int64 {
	if x != nil {
		return x.TotalTasks
	}
	return 0
}

func (x *HybridScanTask) GetFinishedTasks() int64 {
	if x != nil {
		return x.FinishedTasks
	}
	return 0
}

func (x *HybridScanTask) GetFinishedTargets() int64 {
	if x != nil {
		return x.FinishedTargets
	}
	return 0
}

func (x *HybridScanTask) GetFirstTarget() string {
	if x != nil {
		return x.FirstTarget
	}
	return ""
}

func (x *HybridScanTask) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type QueryHybridScanTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging           `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*HybridScanTask `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryHybridScanTaskResponse) Reset() {
	*x = QueryHybridScanTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHybridScanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHybridScanTaskResponse) ProtoMessage() {}

func (x *QueryHybridScanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHybridScanTaskResponse.ProtoReflect.Descriptor instead.
func (*QueryHybridScanTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{16}
}

func (x *QueryHybridScanTaskResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHybridScanTaskResponse) GetData() []*HybridScanTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHybridScanTaskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryHybridScanTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging               `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	FromId     int64                 `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId    int64                 `protobuf:"varint,3,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	Status     string                `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Filter     *HybridScanTaskFilter `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QueryHybridScanTaskRequest) Reset() {
	*x = QueryHybridScanTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHybridScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHybridScanTaskRequest) ProtoMessage() {}

func (x *QueryHybridScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHybridScanTaskRequest.ProtoReflect.Descriptor instead.
func (*QueryHybridScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{17}
}

func (x *QueryHybridScanTaskRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHybridScanTaskRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryHybridScanTaskRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *QueryHybridScanTaskRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *QueryHybridScanTaskRequest) GetFilter() *HybridScanTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type HybridScanTaskFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId               []string `protobuf:"bytes,1,rep,name=TaskId,proto3" json:"TaskId,omitempty"`
	Status               []string `protobuf:"bytes,2,rep,name=Status,proto3" json:"Status,omitempty"`
	Target               string   `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	FromId               int64    `protobuf:"varint,4,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId              int64    `protobuf:"varint,5,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	HybridScanTaskSource []string `protobuf:"bytes,6,rep,name=HybridScanTaskSource,proto3" json:"HybridScanTaskSource,omitempty"`
}

func (x *HybridScanTaskFilter) Reset() {
	*x = HybridScanTaskFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridScanTaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanTaskFilter) ProtoMessage() {}

func (x *HybridScanTaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanTaskFilter.ProtoReflect.Descriptor instead.
func (*HybridScanTaskFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{18}
}

func (x *HybridScanTaskFilter) GetTaskId() []string {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *HybridScanTaskFilter) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HybridScanTaskFilter) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HybridScanTaskFilter) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *HybridScanTaskFilter) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *HybridScanTaskFilter) GetHybridScanTaskSource() []string {
	if x != nil {
		return x.HybridScanTaskSource
	}
	return nil
}

type HybridScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 计算整体任务进度等信息
	TotalTargets    int64 `protobuf:"varint,1,opt,name=TotalTargets,proto3" json:"TotalTargets,omitempty"`
	TotalPlugins    int64 `protobuf:"varint,2,opt,name=TotalPlugins,proto3" json:"TotalPlugins,omitempty"`
	TotalTasks      int64 `protobuf:"varint,3,opt,name=TotalTasks,proto3" json:"TotalTasks,omitempty"`
	FinishedTasks   int64 `protobuf:"varint,4,opt,name=FinishedTasks,proto3" json:"FinishedTasks,omitempty"`
	FinishedTargets int64 `protobuf:"varint,5,opt,name=FinishedTargets,proto3" json:"FinishedTargets,omitempty"`
	ActiveTasks     int64 `protobuf:"varint,6,opt,name=ActiveTasks,proto3" json:"ActiveTasks,omitempty"`
	ActiveTargets   int64 `protobuf:"varint,7,opt,name=ActiveTargets,proto3" json:"ActiveTargets,omitempty"`
	// 混合扫描任务ID，一般用来恢复任务或者暂停任务
	HybridScanTaskId  string      `protobuf:"bytes,8,opt,name=HybridScanTaskId,proto3" json:"HybridScanTaskId,omitempty"`
	CurrentPluginName string      `protobuf:"bytes,9,opt,name=CurrentPluginName,proto3" json:"CurrentPluginName,omitempty"`
	ExecResult        *ExecResult `protobuf:"bytes,10,opt,name=ExecResult,proto3" json:"ExecResult,omitempty"`
	// 这字段表示的是，正在执行的任务可以展示出来
	UpdateActiveTask *HybridScanUpdateActiveTaskTable `protobuf:"bytes,11,opt,name=UpdateActiveTask,proto3" json:"UpdateActiveTask,omitempty"`
	// 任务配置  废弃 使用 HybridScanConfig
	ScanConfig string `protobuf:"bytes,12,opt,name=ScanConfig,proto3" json:"ScanConfig,omitempty"` // json序列化会有base64
	// 任务状态
	Status string `protobuf:"bytes,13,opt,name=Status,proto3" json:"Status,omitempty"`
	// task config
	HybridScanConfig *HybridScanRequest `protobuf:"bytes,14,opt,name=HybridScanConfig,proto3" json:"HybridScanConfig,omitempty"`
}

func (x *HybridScanResponse) Reset() {
	*x = HybridScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanResponse) ProtoMessage() {}

func (x *HybridScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanResponse.ProtoReflect.Descriptor instead.
func (*HybridScanResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{19}
}

func (x *HybridScanResponse) GetTotalTargets() int64 {
	if x != nil {
		return x.TotalTargets
	}
	return 0
}

func (x *HybridScanResponse) GetTotalPlugins() int64 {
	if x != nil {
		return x.TotalPlugins
	}
	return 0
}

func (x *HybridScanResponse) GetTotalTasks() int64 {
	if x != nil {
		return x.TotalTasks
	}
	return 0
}

func (x *HybridScanResponse) GetFinishedTasks() int64 {
	if x != nil {
		return x.FinishedTasks
	}
	return 0
}

func (x *HybridScanResponse) GetFinishedTargets() int64 {
	if x != nil {
		return x.FinishedTargets
	}
	return 0
}

func (x *HybridScanResponse) GetActiveTasks() int64 {
	if x != nil {
		return x.ActiveTasks
	}
	return 0
}

func (x *HybridScanResponse) GetActiveTargets() int64 {
	if x != nil {
		return x.ActiveTargets
	}
	return 0
}

func (x *HybridScanResponse) GetHybridScanTaskId() string {
	if x != nil {
		return x.HybridScanTaskId
	}
	return ""
}

func (x *HybridScanResponse) GetCurrentPluginName() string {
	if x != nil {
		return x.CurrentPluginName
	}
	return ""
}

func (x *HybridScanResponse) GetExecResult() *ExecResult {
	if x != nil {
		return x.ExecResult
	}
	return nil
}

func (x *HybridScanResponse) GetUpdateActiveTask() *HybridScanUpdateActiveTaskTable {
	if x != nil {
		return x.UpdateActiveTask
	}
	return nil
}

func (x *HybridScanResponse) GetScanConfig() string {
	if x != nil {
		return x.ScanConfig
	}
	return ""
}

func (x *HybridScanResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HybridScanResponse) GetHybridScanConfig() *HybridScanRequest {
	if x != nil {
		return x.HybridScanConfig
	}
	return nil
}

type HybridScanUpdateActiveTaskTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// create: 这个任务正在执行，推入栈中
	// remove: 这个任务执行完毕，弹出栈
	Operator    string `protobuf:"bytes,1,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Index       string `protobuf:"bytes,2,opt,name=Index,proto3" json:"Index,omitempty"`
	IsHttps     bool   `protobuf:"varint,3,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	HTTPRequest []byte `protobuf:"bytes,4,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	Url         string `protobuf:"bytes,6,opt,name=Url,proto3" json:"Url,omitempty"`
	PluginName  string `protobuf:"bytes,5,opt,name=PluginName,proto3" json:"PluginName,omitempty"`
}

func (x *HybridScanUpdateActiveTaskTable) Reset() {
	*x = HybridScanUpdateActiveTaskTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridScanUpdateActiveTaskTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanUpdateActiveTaskTable) ProtoMessage() {}

func (x *HybridScanUpdateActiveTaskTable) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanUpdateActiveTaskTable.ProtoReflect.Descriptor instead.
func (*HybridScanUpdateActiveTaskTable) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{20}
}

func (x *HybridScanUpdateActiveTaskTable) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *HybridScanUpdateActiveTaskTable) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *HybridScanUpdateActiveTaskTable) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HybridScanUpdateActiveTaskTable) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

func (x *HybridScanUpdateActiveTaskTable) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HybridScanUpdateActiveTaskTable) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

// 输入目标，可以通过 input/file + template 构建可能带认证或其他内容的模版
type HybridScanInputTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input               string                    `protobuf:"bytes,1,opt,name=Input,proto3" json:"Input,omitempty"`
	InputFile           []string                  `protobuf:"bytes,2,rep,name=InputFile,proto3" json:"InputFile,omitempty"`
	HTTPRequestTemplate *HTTPRequestBuilderParams `protobuf:"bytes,3,opt,name=HTTPRequestTemplate,proto3" json:"HTTPRequestTemplate,omitempty"`
}

func (x *HybridScanInputTarget) Reset() {
	*x = HybridScanInputTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridScanInputTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanInputTarget) ProtoMessage() {}

func (x *HybridScanInputTarget) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanInputTarget.ProtoReflect.Descriptor instead.
func (*HybridScanInputTarget) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{21}
}

func (x *HybridScanInputTarget) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *HybridScanInputTarget) GetInputFile() []string {
	if x != nil {
		return x.InputFile
	}
	return nil
}

func (x *HybridScanInputTarget) GetHTTPRequestTemplate() *HTTPRequestBuilderParams {
	if x != nil {
		return x.HTTPRequestTemplate
	}
	return nil
}

// 输入插件：幂等的，相同的参数，结果是一致的，这样通过记录索引就能恢复进度
type HybridScanPluginConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginNames []string               `protobuf:"bytes,1,rep,name=PluginNames,proto3" json:"PluginNames,omitempty"`
	Filter      *QueryYakScriptRequest `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *HybridScanPluginConfig) Reset() {
	*x = HybridScanPluginConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridScanPluginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanPluginConfig) ProtoMessage() {}

func (x *HybridScanPluginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanPluginConfig.ProtoReflect.Descriptor instead.
func (*HybridScanPluginConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{22}
}

func (x *HybridScanPluginConfig) GetPluginNames() []string {
	if x != nil {
		return x.PluginNames
	}
	return nil
}

func (x *HybridScanPluginConfig) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

type HybridScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 控制帧字段
	Control bool `protobuf:"varint,9,opt,name=Control,proto3" json:"Control,omitempty"`
	// new: 新任务
	// resume: 恢复任务
	// pause: 暂停任务
	// stop: 停止任务
	// status: 查询任务状态
	HybridScanMode string `protobuf:"bytes,8,opt,name=HybridScanMode,proto3" json:"HybridScanMode,omitempty"`
	ResumeTaskId   string `protobuf:"bytes,1,opt,name=ResumeTaskId,proto3" json:"ResumeTaskId,omitempty"`
	// 其他参数
	Concurrent          int64   `protobuf:"varint,2,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	TotalTimeoutSecond  float32 `protobuf:"fixed32,3,opt,name=TotalTimeoutSecond,proto3" json:"TotalTimeoutSecond,omitempty"`
	Proxy               string  `protobuf:"bytes,4,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	SingleTimeoutSecond float32 `protobuf:"fixed32,5,opt,name=SingleTimeoutSecond,proto3" json:"SingleTimeoutSecond,omitempty"`
	Detach              bool    `protobuf:"varint,10,opt,name=Detach,proto3" json:"Detach,omitempty"` // 背后执行，就算进程结束了，也会执行，不太关心 context
	// 新任务
	Plugin  *HybridScanPluginConfig `protobuf:"bytes,6,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	Targets *HybridScanInputTarget  `protobuf:"bytes,7,opt,name=Targets,proto3" json:"Targets,omitempty"`
	// hybridScanTaskSource
	HybridScanTaskSource string `protobuf:"bytes,11,opt,name=HybridScanTaskSource,proto3" json:"HybridScanTaskSource,omitempty"`
}

func (x *HybridScanRequest) Reset() {
	*x = HybridScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridScanRequest) ProtoMessage() {}

func (x *HybridScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridScanRequest.ProtoReflect.Descriptor instead.
func (*HybridScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{23}
}

func (x *HybridScanRequest) GetControl() bool {
	if x != nil {
		return x.Control
	}
	return false
}

func (x *HybridScanRequest) GetHybridScanMode() string {
	if x != nil {
		return x.HybridScanMode
	}
	return ""
}

func (x *HybridScanRequest) GetResumeTaskId() string {
	if x != nil {
		return x.ResumeTaskId
	}
	return ""
}

func (x *HybridScanRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *HybridScanRequest) GetTotalTimeoutSecond() float32 {
	if x != nil {
		return x.TotalTimeoutSecond
	}
	return 0
}

func (x *HybridScanRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *HybridScanRequest) GetSingleTimeoutSecond() float32 {
	if x != nil {
		return x.SingleTimeoutSecond
	}
	return 0
}

func (x *HybridScanRequest) GetDetach() bool {
	if x != nil {
		return x.Detach
	}
	return false
}

func (x *HybridScanRequest) GetPlugin() *HybridScanPluginConfig {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *HybridScanRequest) GetTargets() *HybridScanInputTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *HybridScanRequest) GetHybridScanTaskSource() string {
	if x != nil {
		return x.HybridScanTaskSource
	}
	return ""
}

type DuplexConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	MessageType string `protobuf:"bytes,2,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Timestamp   int64  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *DuplexConnectionRequest) Reset() {
	*x = DuplexConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplexConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplexConnectionRequest) ProtoMessage() {}

func (x *DuplexConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplexConnectionRequest.ProtoReflect.Descriptor instead.
func (*DuplexConnectionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{24}
}

func (x *DuplexConnectionRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DuplexConnectionRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *DuplexConnectionRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DuplexConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	MessageType string `protobuf:"bytes,2,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Timestamp   int64  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *DuplexConnectionResponse) Reset() {
	*x = DuplexConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplexConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplexConnectionResponse) ProtoMessage() {}

func (x *DuplexConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplexConnectionResponse.ProtoReflect.Descriptor instead.
func (*DuplexConnectionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{25}
}

func (x *DuplexConnectionResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DuplexConnectionResponse) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *DuplexConnectionResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PcapMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PcapMetadataRequest) Reset() {
	*x = PcapMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcapMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapMetadataRequest) ProtoMessage() {}

func (x *PcapMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapMetadataRequest.ProtoReflect.Descriptor instead.
func (*PcapMetadataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{26}
}

type PcapMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailablePcapDevices         []*NetInterface `protobuf:"bytes,1,rep,name=AvailablePcapDevices,proto3" json:"AvailablePcapDevices,omitempty"`
	AvailableSessionTypes        []*KVPair       `protobuf:"bytes,2,rep,name=AvailableSessionTypes,proto3" json:"AvailableSessionTypes,omitempty"`
	AvailableLinkLayerTypes      []*KVPair       `protobuf:"bytes,3,rep,name=AvailableLinkLayerTypes,proto3" json:"AvailableLinkLayerTypes,omitempty"`
	AvailableNetworkLayerTypes   []*KVPair       `protobuf:"bytes,4,rep,name=AvailableNetworkLayerTypes,proto3" json:"AvailableNetworkLayerTypes,omitempty"`
	AvailableTransportLayerTypes []*KVPair       `protobuf:"bytes,5,rep,name=AvailableTransportLayerTypes,proto3" json:"AvailableTransportLayerTypes,omitempty"`
	// AutoDetect Public Net If
	DefaultPublicNetInterface *NetInterface `protobuf:"bytes,6,opt,name=DefaultPublicNetInterface,proto3" json:"DefaultPublicNetInterface,omitempty"`
}

func (x *PcapMetadata) Reset() {
	*x = PcapMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcapMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapMetadata) ProtoMessage() {}

func (x *PcapMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapMetadata.ProtoReflect.Descriptor instead.
func (*PcapMetadata) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{27}
}

func (x *PcapMetadata) GetAvailablePcapDevices() []*NetInterface {
	if x != nil {
		return x.AvailablePcapDevices
	}
	return nil
}

func (x *PcapMetadata) GetAvailableSessionTypes() []*KVPair {
	if x != nil {
		return x.AvailableSessionTypes
	}
	return nil
}

func (x *PcapMetadata) GetAvailableLinkLayerTypes() []*KVPair {
	if x != nil {
		return x.AvailableLinkLayerTypes
	}
	return nil
}

func (x *PcapMetadata) GetAvailableNetworkLayerTypes() []*KVPair {
	if x != nil {
		return x.AvailableNetworkLayerTypes
	}
	return nil
}

func (x *PcapMetadata) GetAvailableTransportLayerTypes() []*KVPair {
	if x != nil {
		return x.AvailableTransportLayerTypes
	}
	return nil
}

func (x *PcapMetadata) GetDefaultPublicNetInterface() *NetInterface {
	if x != nil {
		return x.DefaultPublicNetInterface
	}
	return nil
}

type QueryTrafficPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination            *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	TimestampNow          int64   `protobuf:"varint,2,opt,name=TimestampNow,proto3" json:"TimestampNow,omitempty"`
	SessionId             string  `protobuf:"bytes,3,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	LinkLayerTypes        string  `protobuf:"bytes,4,opt,name=LinkLayerTypes,proto3" json:"LinkLayerTypes,omitempty"`
	NetworkLayerTypes     string  `protobuf:"bytes,5,opt,name=NetworkLayerTypes,proto3" json:"NetworkLayerTypes,omitempty"`
	TransportLayerTypes   string  `protobuf:"bytes,6,opt,name=TransportLayerTypes,proto3" json:"TransportLayerTypes,omitempty"`
	ApplicationLayerTypes string  `protobuf:"bytes,7,opt,name=ApplicationLayerTypes,proto3" json:"ApplicationLayerTypes,omitempty"`
	SrcIP                 string  `protobuf:"bytes,8,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP                 string  `protobuf:"bytes,9,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	SrcPort               string  `protobuf:"bytes,10,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort               string  `protobuf:"bytes,11,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	FromId                int64   `protobuf:"varint,12,opt,name=FromId,proto3" json:"FromId,omitempty"`
}

func (x *QueryTrafficPacketRequest) Reset() {
	*x = QueryTrafficPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTrafficPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficPacketRequest) ProtoMessage() {}

func (x *QueryTrafficPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficPacketRequest.ProtoReflect.Descriptor instead.
func (*QueryTrafficPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{28}
}

func (x *QueryTrafficPacketRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficPacketRequest) GetTimestampNow() int64 {
	if x != nil {
		return x.TimestampNow
	}
	return 0
}

func (x *QueryTrafficPacketRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetLinkLayerTypes() string {
	if x != nil {
		return x.LinkLayerTypes
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetNetworkLayerTypes() string {
	if x != nil {
		return x.NetworkLayerTypes
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetTransportLayerTypes() string {
	if x != nil {
		return x.TransportLayerTypes
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetApplicationLayerTypes() string {
	if x != nil {
		return x.ApplicationLayerTypes
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetSrcIP() string {
	if x != nil {
		return x.SrcIP
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetDstIP() string {
	if x != nil {
		return x.DstIP
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetSrcPort() string {
	if x != nil {
		return x.SrcPort
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetDstPort() string {
	if x != nil {
		return x.DstPort
	}
	return ""
}

func (x *QueryTrafficPacketRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

type QueryTrafficTCPReassembledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination   *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	FromNow      bool    `protobuf:"varint,2,opt,name=FromNow,proto3" json:"FromNow,omitempty"` // ignore it
	SessionId    string  `protobuf:"bytes,3,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	FromId       int64   `protobuf:"varint,4,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId      int64   `protobuf:"varint,5,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	TimestampNow int64   `protobuf:"varint,6,opt,name=TimestampNow,proto3" json:"TimestampNow,omitempty"`
}

func (x *QueryTrafficTCPReassembledRequest) Reset() {
	*x = QueryTrafficTCPReassembledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTrafficTCPReassembledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficTCPReassembledRequest) ProtoMessage() {}

func (x *QueryTrafficTCPReassembledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficTCPReassembledRequest.ProtoReflect.Descriptor instead.
func (*QueryTrafficTCPReassembledRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{29}
}

func (x *QueryTrafficTCPReassembledRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficTCPReassembledRequest) GetFromNow() bool {
	if x != nil {
		return x.FromNow
	}
	return false
}

func (x *QueryTrafficTCPReassembledRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *QueryTrafficTCPReassembledRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryTrafficTCPReassembledRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *QueryTrafficTCPReassembledRequest) GetTimestampNow() int64 {
	if x != nil {
		return x.TimestampNow
	}
	return 0
}

type TrafficSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SessionType           string `protobuf:"bytes,2,opt,name=SessionType,proto3" json:"SessionType,omitempty"`
	Uuid                  string `protobuf:"bytes,3,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	DeviceName            string `protobuf:"bytes,4,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	DeviceType            string `protobuf:"bytes,5,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	IsLinkLayerEthernet   bool   `protobuf:"varint,6,opt,name=IsLinkLayerEthernet,proto3" json:"IsLinkLayerEthernet,omitempty"`
	LinkLayerSrc          string `protobuf:"bytes,7,opt,name=LinkLayerSrc,proto3" json:"LinkLayerSrc,omitempty"`
	LinkLayerDst          string `protobuf:"bytes,8,opt,name=LinkLayerDst,proto3" json:"LinkLayerDst,omitempty"`
	IsIpv4                bool   `protobuf:"varint,9,opt,name=IsIpv4,proto3" json:"IsIpv4,omitempty"`
	IsIpv6                bool   `protobuf:"varint,10,opt,name=IsIpv6,proto3" json:"IsIpv6,omitempty"`
	NetworkSrcIP          string `protobuf:"bytes,11,opt,name=NetworkSrcIP,proto3" json:"NetworkSrcIP,omitempty"`
	NetworkDstIP          string `protobuf:"bytes,12,opt,name=NetworkDstIP,proto3" json:"NetworkDstIP,omitempty"`
	IsTcpIpStack          bool   `protobuf:"varint,13,opt,name=IsTcpIpStack,proto3" json:"IsTcpIpStack,omitempty"`
	TransportLayerSrcPort int64  `protobuf:"varint,14,opt,name=TransportLayerSrcPort,proto3" json:"TransportLayerSrcPort,omitempty"`
	TransportLayerDstPort int64  `protobuf:"varint,15,opt,name=TransportLayerDstPort,proto3" json:"TransportLayerDstPort,omitempty"`
	IsTCPReassembled      bool   `protobuf:"varint,16,opt,name=IsTCPReassembled,proto3" json:"IsTCPReassembled,omitempty"`
	IsHalfOpen            bool   `protobuf:"varint,17,opt,name=IsHalfOpen,proto3" json:"IsHalfOpen,omitempty"`
	IsClosed              bool   `protobuf:"varint,18,opt,name=IsClosed,proto3" json:"IsClosed,omitempty"`
	IsForceClosed         bool   `protobuf:"varint,19,opt,name=IsForceClosed,proto3" json:"IsForceClosed,omitempty"`
	HaveClientHello       bool   `protobuf:"varint,20,opt,name=HaveClientHello,proto3" json:"HaveClientHello,omitempty"`
	SNI                   string `protobuf:"bytes,21,opt,name=SNI,proto3" json:"SNI,omitempty"`
}

func (x *TrafficSession) Reset() {
	*x = TrafficSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSession) ProtoMessage() {}

func (x *TrafficSession) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSession.ProtoReflect.Descriptor instead.
func (*TrafficSession) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{30}
}

func (x *TrafficSession) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrafficSession) GetSessionType() string {
	if x != nil {
		return x.SessionType
	}
	return ""
}

func (x *TrafficSession) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TrafficSession) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *TrafficSession) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *TrafficSession) GetIsLinkLayerEthernet() bool {
	if x != nil {
		return x.IsLinkLayerEthernet
	}
	return false
}

func (x *TrafficSession) GetLinkLayerSrc() string {
	if x != nil {
		return x.LinkLayerSrc
	}
	return ""
}

func (x *TrafficSession) GetLinkLayerDst() string {
	if x != nil {
		return x.LinkLayerDst
	}
	return ""
}

func (x *TrafficSession) GetIsIpv4() bool {
	if x != nil {
		return x.IsIpv4
	}
	return false
}

func (x *TrafficSession) GetIsIpv6() bool {
	if x != nil {
		return x.IsIpv6
	}
	return false
}

func (x *TrafficSession) GetNetworkSrcIP() string {
	if x != nil {
		return x.NetworkSrcIP
	}
	return ""
}

func (x *TrafficSession) GetNetworkDstIP() string {
	if x != nil {
		return x.NetworkDstIP
	}
	return ""
}

func (x *TrafficSession) GetIsTcpIpStack() bool {
	if x != nil {
		return x.IsTcpIpStack
	}
	return false
}

func (x *TrafficSession) GetTransportLayerSrcPort() int64 {
	if x != nil {
		return x.TransportLayerSrcPort
	}
	return 0
}

func (x *TrafficSession) GetTransportLayerDstPort() int64 {
	if x != nil {
		return x.TransportLayerDstPort
	}
	return 0
}

func (x *TrafficSession) GetIsTCPReassembled() bool {
	if x != nil {
		return x.IsTCPReassembled
	}
	return false
}

func (x *TrafficSession) GetIsHalfOpen() bool {
	if x != nil {
		return x.IsHalfOpen
	}
	return false
}

func (x *TrafficSession) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *TrafficSession) GetIsForceClosed() bool {
	if x != nil {
		return x.IsForceClosed
	}
	return false
}

func (x *TrafficSession) GetHaveClientHello() bool {
	if x != nil {
		return x.HaveClientHello
	}
	return false
}

func (x *TrafficSession) GetSNI() string {
	if x != nil {
		return x.SNI
	}
	return ""
}

type QueryTrafficSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*TrafficSession `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination *Paging           `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryTrafficSessionResponse) Reset() {
	*x = QueryTrafficSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTrafficSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficSessionResponse) ProtoMessage() {}

func (x *QueryTrafficSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficSessionResponse.ProtoReflect.Descriptor instead.
func (*QueryTrafficSessionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{31}
}

func (x *QueryTrafficSessionResponse) GetData() []*TrafficSession {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryTrafficSessionResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficSessionResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TrafficPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkLayerType                   string `protobuf:"bytes,1,opt,name=LinkLayerType,proto3" json:"LinkLayerType,omitempty"`
	NetworkLayerType                string `protobuf:"bytes,2,opt,name=NetworkLayerType,proto3" json:"NetworkLayerType,omitempty"`
	TransportLayerType              string `protobuf:"bytes,3,opt,name=TransportLayerType,proto3" json:"TransportLayerType,omitempty"`
	ApplicationLayerType            string `protobuf:"bytes,4,opt,name=ApplicationLayerType,proto3" json:"ApplicationLayerType,omitempty"`
	Payload                         []byte `protobuf:"bytes,5,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Raw                             []byte `protobuf:"bytes,6,opt,name=Raw,proto3" json:"Raw,omitempty"`
	EthernetEndpointHardwareAddrSrc string `protobuf:"bytes,7,opt,name=EthernetEndpointHardwareAddrSrc,proto3" json:"EthernetEndpointHardwareAddrSrc,omitempty"`
	EthernetEndpointHardwareAddrDst string `protobuf:"bytes,8,opt,name=EthernetEndpointHardwareAddrDst,proto3" json:"EthernetEndpointHardwareAddrDst,omitempty"`
	IsIpv4                          bool   `protobuf:"varint,9,opt,name=IsIpv4,proto3" json:"IsIpv4,omitempty"`
	IsIpv6                          bool   `protobuf:"varint,10,opt,name=IsIpv6,proto3" json:"IsIpv6,omitempty"`
	NetworkEndpointIPSrc            string `protobuf:"bytes,11,opt,name=NetworkEndpointIPSrc,proto3" json:"NetworkEndpointIPSrc,omitempty"`
	NetworkEndpointIPDst            string `protobuf:"bytes,12,opt,name=NetworkEndpointIPDst,proto3" json:"NetworkEndpointIPDst,omitempty"`
	TransportEndpointPortSrc        int64  `protobuf:"varint,13,opt,name=TransportEndpointPortSrc,proto3" json:"TransportEndpointPortSrc,omitempty"`
	TransportEndpointPortDst        int64  `protobuf:"varint,14,opt,name=TransportEndpointPortDst,proto3" json:"TransportEndpointPortDst,omitempty"`
	SessionId                       string `protobuf:"bytes,15,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	Id                              int64  `protobuf:"varint,16,opt,name=Id,proto3" json:"Id,omitempty"`
	Protocol                        string `protobuf:"bytes,17,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Info                            string `protobuf:"bytes,18,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *TrafficPacket) Reset() {
	*x = TrafficPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPacket) ProtoMessage() {}

func (x *TrafficPacket) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPacket.ProtoReflect.Descriptor instead.
func (*TrafficPacket) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{32}
}

func (x *TrafficPacket) GetLinkLayerType() string {
	if x != nil {
		return x.LinkLayerType
	}
	return ""
}

func (x *TrafficPacket) GetNetworkLayerType() string {
	if x != nil {
		return x.NetworkLayerType
	}
	return ""
}

func (x *TrafficPacket) GetTransportLayerType() string {
	if x != nil {
		return x.TransportLayerType
	}
	return ""
}

func (x *TrafficPacket) GetApplicationLayerType() string {
	if x != nil {
		return x.ApplicationLayerType
	}
	return ""
}

func (x *TrafficPacket) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TrafficPacket) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *TrafficPacket) GetEthernetEndpointHardwareAddrSrc() string {
	if x != nil {
		return x.EthernetEndpointHardwareAddrSrc
	}
	return ""
}

func (x *TrafficPacket) GetEthernetEndpointHardwareAddrDst() string {
	if x != nil {
		return x.EthernetEndpointHardwareAddrDst
	}
	return ""
}

func (x *TrafficPacket) GetIsIpv4() bool {
	if x != nil {
		return x.IsIpv4
	}
	return false
}

func (x *TrafficPacket) GetIsIpv6() bool {
	if x != nil {
		return x.IsIpv6
	}
	return false
}

func (x *TrafficPacket) GetNetworkEndpointIPSrc() string {
	if x != nil {
		return x.NetworkEndpointIPSrc
	}
	return ""
}

func (x *TrafficPacket) GetNetworkEndpointIPDst() string {
	if x != nil {
		return x.NetworkEndpointIPDst
	}
	return ""
}

func (x *TrafficPacket) GetTransportEndpointPortSrc() int64 {
	if x != nil {
		return x.TransportEndpointPortSrc
	}
	return 0
}

func (x *TrafficPacket) GetTransportEndpointPortDst() int64 {
	if x != nil {
		return x.TransportEndpointPortDst
	}
	return 0
}

func (x *TrafficPacket) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrafficPacket) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrafficPacket) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TrafficPacket) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type QueryTrafficPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*TrafficPacket `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination *Paging          `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64            `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryTrafficPacketResponse) Reset() {
	*x = QueryTrafficPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTrafficPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficPacketResponse) ProtoMessage() {}

func (x *QueryTrafficPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficPacketResponse.ProtoReflect.Descriptor instead.
func (*QueryTrafficPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{33}
}

func (x *QueryTrafficPacketResponse) GetData() []*TrafficPacket {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryTrafficPacketResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficPacketResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TrafficTCPReassembled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SessionUuid string `protobuf:"bytes,2,opt,name=SessionUuid,proto3" json:"SessionUuid,omitempty"`
	Raw         []byte `protobuf:"bytes,3,opt,name=Raw,proto3" json:"Raw,omitempty"`
	Seq         int64  `protobuf:"varint,4,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Timestamp   int64  `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Source      string `protobuf:"bytes,6,opt,name=Source,proto3" json:"Source,omitempty"`
	Destination string `protobuf:"bytes,7,opt,name=Destination,proto3" json:"Destination,omitempty"`
	Protocol    string `protobuf:"bytes,8,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
}

func (x *TrafficTCPReassembled) Reset() {
	*x = TrafficTCPReassembled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTCPReassembled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTCPReassembled) ProtoMessage() {}

func (x *TrafficTCPReassembled) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTCPReassembled.ProtoReflect.Descriptor instead.
func (*TrafficTCPReassembled) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{34}
}

func (x *TrafficTCPReassembled) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrafficTCPReassembled) GetSessionUuid() string {
	if x != nil {
		return x.SessionUuid
	}
	return ""
}

func (x *TrafficTCPReassembled) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *TrafficTCPReassembled) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *TrafficTCPReassembled) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TrafficTCPReassembled) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TrafficTCPReassembled) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TrafficTCPReassembled) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

type QueryTrafficTCPReassembledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*TrafficTCPReassembled `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination *Paging                  `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64                    `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryTrafficTCPReassembledResponse) Reset() {
	*x = QueryTrafficTCPReassembledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTrafficTCPReassembledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficTCPReassembledResponse) ProtoMessage() {}

func (x *QueryTrafficTCPReassembledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficTCPReassembledResponse.ProtoReflect.Descriptor instead.
func (*QueryTrafficTCPReassembledResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{35}
}

func (x *QueryTrafficTCPReassembledResponse) GetData() []*TrafficTCPReassembled {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryTrafficTCPReassembledResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficTCPReassembledResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryTrafficSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	// active traffic
	FromNow      bool  `protobuf:"varint,2,opt,name=FromNow,proto3" json:"FromNow,omitempty"` // ignore it, bad field
	FromId       int64 `protobuf:"varint,3,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId      int64 `protobuf:"varint,4,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	TimestampNow int64 `protobuf:"varint,5,opt,name=TimestampNow,proto3" json:"TimestampNow,omitempty"`
}

func (x *QueryTrafficSessionRequest) Reset() {
	*x = QueryTrafficSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTrafficSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrafficSessionRequest) ProtoMessage() {}

func (x *QueryTrafficSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrafficSessionRequest.ProtoReflect.Descriptor instead.
func (*QueryTrafficSessionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{36}
}

func (x *QueryTrafficSessionRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryTrafficSessionRequest) GetFromNow() bool {
	if x != nil {
		return x.FromNow
	}
	return false
}

func (x *QueryTrafficSessionRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryTrafficSessionRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *QueryTrafficSessionRequest) GetTimestampNow() int64 {
	if x != nil {
		return x.TimestampNow
	}
	return 0
}

type PcapXRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// first request
	NetInterfaceList []string        `protobuf:"bytes,1,rep,name=NetInterfaceList,proto3" json:"NetInterfaceList,omitempty"`
	TimeoutFloat     float64         `protobuf:"fixed64,2,opt,name=TimeoutFloat,proto3" json:"TimeoutFloat,omitempty"`
	SuricataLoader   *SuricataConfig `protobuf:"bytes,3,opt,name=SuricataLoader,proto3" json:"SuricataLoader,omitempty"`
}

func (x *PcapXRequest) Reset() {
	*x = PcapXRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcapXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapXRequest) ProtoMessage() {}

func (x *PcapXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapXRequest.ProtoReflect.Descriptor instead.
func (*PcapXRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{37}
}

func (x *PcapXRequest) GetNetInterfaceList() []string {
	if x != nil {
		return x.NetInterfaceList
	}
	return nil
}

func (x *PcapXRequest) GetTimeoutFloat() float64 {
	if x != nil {
		return x.TimeoutFloat
	}
	return 0
}

func (x *PcapXRequest) GetSuricataLoader() *SuricataConfig {
	if x != nil {
		return x.SuricataLoader
	}
	return nil
}

type SuricataConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SuricataConfig) Reset() {
	*x = SuricataConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuricataConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuricataConfig) ProtoMessage() {}

func (x *SuricataConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuricataConfig.ProtoReflect.Descriptor instead.
func (*SuricataConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{38}
}

type PcapXResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketFrameCounter               int64 `protobuf:"varint,1,opt,name=PacketFrameCounter,proto3" json:"PacketFrameCounter,omitempty"`
	NetInterfaceTransferKBPerSeconds int64 `protobuf:"varint,2,opt,name=NetInterfaceTransferKBPerSeconds,proto3" json:"NetInterfaceTransferKBPerSeconds,omitempty"`
	TCPReassembledCount              int64 `protobuf:"varint,3,opt,name=TCPReassembledCount,proto3" json:"TCPReassembledCount,omitempty"`
	TrafficSessionCount              int64 `protobuf:"varint,4,opt,name=TrafficSessionCount,proto3" json:"TrafficSessionCount,omitempty"`
}

func (x *PcapXResponse) Reset() {
	*x = PcapXResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcapXResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapXResponse) ProtoMessage() {}

func (x *PcapXResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapXResponse.ProtoReflect.Descriptor instead.
func (*PcapXResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{39}
}

func (x *PcapXResponse) GetPacketFrameCounter() int64 {
	if x != nil {
		return x.PacketFrameCounter
	}
	return 0
}

func (x *PcapXResponse) GetNetInterfaceTransferKBPerSeconds() int64 {
	if x != nil {
		return x.NetInterfaceTransferKBPerSeconds
	}
	return 0
}

func (x *PcapXResponse) GetTCPReassembledCount() int64 {
	if x != nil {
		return x.TCPReassembledCount
	}
	return 0
}

func (x *PcapXResponse) GetTrafficSessionCount() int64 {
	if x != nil {
		return x.TrafficSessionCount
	}
	return 0
}

type RequestYakURLParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// files:
	// GET: means fetch details
	// POST: means update
	// PUT: means create
	// DELETE: means delete
	// HEAD: means check
	Method   string  `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Url      *YakURL `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	Body     []byte  `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"` // 用于存储文件的内容
	Page     int64   `protobuf:"varint,4,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int64   `protobuf:"varint,5,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *RequestYakURLParams) Reset() {
	*x = RequestYakURLParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestYakURLParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestYakURLParams) ProtoMessage() {}

func (x *RequestYakURLParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestYakURLParams.ProtoReflect.Descriptor instead.
func (*RequestYakURLParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{40}
}

func (x *RequestYakURLParams) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RequestYakURLParams) GetUrl() *YakURL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *RequestYakURLParams) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RequestYakURLParams) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RequestYakURLParams) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type YakURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// YakURL is abstract general fs loader system
	// URL means schema://user:pass@location(:port)/path?query
	FromRaw string `protobuf:"bytes,1,opt,name=FromRaw,proto3" json:"FromRaw,omitempty"`
	// means: file/webshell-.../directory
	Schema   string    `protobuf:"bytes,2,opt,name=Schema,proto3" json:"Schema,omitempty"`
	User     string    `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
	Pass     string    `protobuf:"bytes,4,opt,name=Pass,proto3" json:"Pass,omitempty"`
	Location string    `protobuf:"bytes,5,opt,name=Location,proto3" json:"Location,omitempty"`
	Path     string    `protobuf:"bytes,6,opt,name=Path,proto3" json:"Path,omitempty"`
	Query    []*KVPair `protobuf:"bytes,7,rep,name=Query,proto3" json:"Query,omitempty"`
}

func (x *YakURL) Reset() {
	*x = YakURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakURL) ProtoMessage() {}

func (x *YakURL) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakURL.ProtoReflect.Descriptor instead.
func (*YakURL) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{41}
}

func (x *YakURL) GetFromRaw() string {
	if x != nil {
		return x.FromRaw
	}
	return ""
}

func (x *YakURL) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *YakURL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *YakURL) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *YakURL) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *YakURL) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *YakURL) GetQuery() []*KVPair {
	if x != nil {
		return x.Query
	}
	return nil
}

type YakURLResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// file / bytes
	ResourceType string `protobuf:"bytes,1,opt,name=ResourceType,proto3" json:"ResourceType,omitempty"`
	VerboseType  string `protobuf:"bytes,2,opt,name=VerboseType,proto3" json:"VerboseType,omitempty"`
	// path filename
	ResourceName string `protobuf:"bytes,3,opt,name=ResourceName,proto3" json:"ResourceName,omitempty"`
	VerboseName  string `protobuf:"bytes,4,opt,name=VerboseName,proto3" json:"VerboseName,omitempty"`
	Size         int64  `protobuf:"varint,5,opt,name=Size,proto3" json:"Size,omitempty"`
	SizeVerbose  string `protobuf:"bytes,6,opt,name=SizeVerbose,proto3" json:"SizeVerbose,omitempty"`
	// Modified
	ModifiedTimestamp int64 `protobuf:"varint,8,opt,name=ModifiedTimestamp,proto3" json:"ModifiedTimestamp,omitempty"`
	// General URL
	Path              string    `protobuf:"bytes,9,opt,name=Path,proto3" json:"Path,omitempty"`
	YakURLVerbose     string    `protobuf:"bytes,10,opt,name=YakURLVerbose,proto3" json:"YakURLVerbose,omitempty"`
	Url               *YakURL   `protobuf:"bytes,11,opt,name=Url,proto3" json:"Url,omitempty"`
	Extra             []*KVPair `protobuf:"bytes,12,rep,name=Extra,proto3" json:"Extra,omitempty"`
	HaveChildrenNodes bool      `protobuf:"varint,13,opt,name=HaveChildrenNodes,proto3" json:"HaveChildrenNodes,omitempty"`
}

func (x *YakURLResource) Reset() {
	*x = YakURLResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakURLResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakURLResource) ProtoMessage() {}

func (x *YakURLResource) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakURLResource.ProtoReflect.Descriptor instead.
func (*YakURLResource) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{42}
}

func (x *YakURLResource) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *YakURLResource) GetVerboseType() string {
	if x != nil {
		return x.VerboseType
	}
	return ""
}

func (x *YakURLResource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *YakURLResource) GetVerboseName() string {
	if x != nil {
		return x.VerboseName
	}
	return ""
}

func (x *YakURLResource) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *YakURLResource) GetSizeVerbose() string {
	if x != nil {
		return x.SizeVerbose
	}
	return ""
}

func (x *YakURLResource) GetModifiedTimestamp() int64 {
	if x != nil {
		return x.ModifiedTimestamp
	}
	return 0
}

func (x *YakURLResource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *YakURLResource) GetYakURLVerbose() string {
	if x != nil {
		return x.YakURLVerbose
	}
	return ""
}

func (x *YakURLResource) GetUrl() *YakURL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *YakURLResource) GetExtra() []*KVPair {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *YakURLResource) GetHaveChildrenNodes() bool {
	if x != nil {
		return x.HaveChildrenNodes
	}
	return false
}

type RequestYakURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64             `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize  int64             `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	Total     int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Resources []*YakURLResource `protobuf:"bytes,4,rep,name=Resources,proto3" json:"Resources,omitempty"`
}

func (x *RequestYakURLResponse) Reset() {
	*x = RequestYakURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestYakURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestYakURLResponse) ProtoMessage() {}

func (x *RequestYakURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestYakURLResponse.ProtoReflect.Descriptor instead.
func (*RequestYakURLResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{43}
}

func (x *RequestYakURLResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RequestYakURLResponse) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RequestYakURLResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RequestYakURLResponse) GetResources() []*YakURLResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type PacketPrettifyHelperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet []byte `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	// SetReplaceBody: replace body for prettier
	SetReplaceBody bool   `protobuf:"varint,2,opt,name=SetReplaceBody,proto3" json:"SetReplaceBody,omitempty"`
	Body           []byte `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *PacketPrettifyHelperRequest) Reset() {
	*x = PacketPrettifyHelperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketPrettifyHelperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketPrettifyHelperRequest) ProtoMessage() {}

func (x *PacketPrettifyHelperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketPrettifyHelperRequest.ProtoReflect.Descriptor instead.
func (*PacketPrettifyHelperRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{44}
}

func (x *PacketPrettifyHelperRequest) GetPacket() []byte {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *PacketPrettifyHelperRequest) GetSetReplaceBody() bool {
	if x != nil {
		return x.SetReplaceBody
	}
	return false
}

func (x *PacketPrettifyHelperRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type PacketPrettifyHelperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 处理后的 Packet
	Packet       []byte `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	ContentType  string `protobuf:"bytes,2,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	IsImage      bool   `protobuf:"varint,3,opt,name=IsImage,proto3" json:"IsImage,omitempty"`
	ImageHtmlTag []byte `protobuf:"bytes,4,opt,name=ImageHtmlTag,proto3" json:"ImageHtmlTag,omitempty"`
	Body         []byte `protobuf:"bytes,5,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *PacketPrettifyHelperResponse) Reset() {
	*x = PacketPrettifyHelperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketPrettifyHelperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketPrettifyHelperResponse) ProtoMessage() {}

func (x *PacketPrettifyHelperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketPrettifyHelperResponse.ProtoReflect.Descriptor instead.
func (*PacketPrettifyHelperResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{45}
}

func (x *PacketPrettifyHelperResponse) GetPacket() []byte {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *PacketPrettifyHelperResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *PacketPrettifyHelperResponse) GetIsImage() bool {
	if x != nil {
		return x.IsImage
	}
	return false
}

func (x *PacketPrettifyHelperResponse) GetImageHtmlTag() []byte {
	if x != nil {
		return x.ImageHtmlTag
	}
	return nil
}

func (x *PacketPrettifyHelperResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type DiagnoseNetworkDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
}

func (x *DiagnoseNetworkDNSRequest) Reset() {
	*x = DiagnoseNetworkDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnoseNetworkDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnoseNetworkDNSRequest) ProtoMessage() {}

func (x *DiagnoseNetworkDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnoseNetworkDNSRequest.ProtoReflect.Descriptor instead.
func (*DiagnoseNetworkDNSRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{46}
}

func (x *DiagnoseNetworkDNSRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type ResetGlobalNetworkConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetGlobalNetworkConfigRequest) Reset() {
	*x = ResetGlobalNetworkConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetGlobalNetworkConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetGlobalNetworkConfigRequest) ProtoMessage() {}

func (x *ResetGlobalNetworkConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetGlobalNetworkConfigRequest.ProtoReflect.Descriptor instead.
func (*ResetGlobalNetworkConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{47}
}

type GetGlobalNetworkConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGlobalNetworkConfigRequest) Reset() {
	*x = GetGlobalNetworkConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalNetworkConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalNetworkConfigRequest) ProtoMessage() {}

func (x *GetGlobalNetworkConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalNetworkConfigRequest.ProtoReflect.Descriptor instead.
func (*GetGlobalNetworkConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{48}
}

type ValidP12PassWordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pkcs12Bytes    []byte `protobuf:"bytes,1,opt,name=Pkcs12Bytes,proto3" json:"Pkcs12Bytes,omitempty"`
	Pkcs12Password []byte `protobuf:"bytes,2,opt,name=Pkcs12Password,proto3" json:"Pkcs12Password,omitempty"`
}

func (x *ValidP12PassWordRequest) Reset() {
	*x = ValidP12PassWordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidP12PassWordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidP12PassWordRequest) ProtoMessage() {}

func (x *ValidP12PassWordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidP12PassWordRequest.ProtoReflect.Descriptor instead.
func (*ValidP12PassWordRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{49}
}

func (x *ValidP12PassWordRequest) GetPkcs12Bytes() []byte {
	if x != nil {
		return x.Pkcs12Bytes
	}
	return nil
}

func (x *ValidP12PassWordRequest) GetPkcs12Password() []byte {
	if x != nil {
		return x.Pkcs12Password
	}
	return nil
}

type ValidP12PassWordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSetPassWord bool `protobuf:"varint,1,opt,name=IsSetPassWord,proto3" json:"IsSetPassWord,omitempty"`
}

func (x *ValidP12PassWordResponse) Reset() {
	*x = ValidP12PassWordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidP12PassWordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidP12PassWordResponse) ProtoMessage() {}

func (x *ValidP12PassWordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidP12PassWordResponse.ProtoReflect.Descriptor instead.
func (*ValidP12PassWordResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{50}
}

func (x *ValidP12PassWordResponse) GetIsSetPassWord() bool {
	if x != nil {
		return x.IsSetPassWord
	}
	return false
}

type GlobalNetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Config DNS
	DisableSystemDNS bool     `protobuf:"varint,1,opt,name=DisableSystemDNS,proto3" json:"DisableSystemDNS,omitempty"`
	CustomDNSServers []string `protobuf:"bytes,2,rep,name=CustomDNSServers,proto3" json:"CustomDNSServers,omitempty"`
	DNSFallbackTCP   bool     `protobuf:"varint,3,opt,name=DNSFallbackTCP,proto3" json:"DNSFallbackTCP,omitempty"`
	DNSFallbackDoH   bool     `protobuf:"varint,4,opt,name=DNSFallbackDoH,proto3" json:"DNSFallbackDoH,omitempty"`
	CustomDoHServers []string `protobuf:"bytes,5,rep,name=CustomDoHServers,proto3" json:"CustomDoHServers,omitempty"`
	// certificates
	ClientCertificates []*Certificate `protobuf:"bytes,6,rep,name=ClientCertificates,proto3" json:"ClientCertificates,omitempty"`
	// network
	DisallowIPAddress []string `protobuf:"bytes,7,rep,name=DisallowIPAddress,proto3" json:"DisallowIPAddress,omitempty"`
	DisallowDomain    []string `protobuf:"bytes,8,rep,name=DisallowDomain,proto3" json:"DisallowDomain,omitempty"`
	// default proxy
	GlobalProxy              []string `protobuf:"bytes,9,rep,name=GlobalProxy,proto3" json:"GlobalProxy,omitempty"`
	EnableSystemProxyFromEnv bool     `protobuf:"varint,10,opt,name=EnableSystemProxyFromEnv,proto3" json:"EnableSystemProxyFromEnv,omitempty"`
	// default skip save HTTPFlow
	SkipSaveHTTPFlow bool `protobuf:"varint,11,opt,name=SkipSaveHTTPFlow,proto3" json:"SkipSaveHTTPFlow,omitempty"`
	// 第三方APIKey获取
	AppConfigs []*ThirdPartyApplicationConfig `protobuf:"bytes,12,rep,name=AppConfigs,proto3" json:"AppConfigs,omitempty"`
	// http auth info
	AuthInfos []*AuthInfo `protobuf:"bytes,13,rep,name=AuthInfos,proto3" json:"AuthInfos,omitempty"`
	// syn扫描选择的网卡
	SynScanNetInterface   string   `protobuf:"bytes,14,opt,name=SynScanNetInterface,proto3" json:"SynScanNetInterface,omitempty"`
	ExcludePluginScanURIs []string `protobuf:"bytes,15,rep,name=ExcludePluginScanURIs,proto3" json:"ExcludePluginScanURIs,omitempty"`
	IncludePluginScanURIs []string `protobuf:"bytes,16,rep,name=IncludePluginScanURIs,proto3" json:"IncludePluginScanURIs,omitempty"`
	// AI Primary Config 首选 AI 配置项
	// openai / chatglm
	PrimaryAIType string   `protobuf:"bytes,17,opt,name=PrimaryAIType,proto3" json:"PrimaryAIType,omitempty"`
	AiApiPriority []string `protobuf:"bytes,18,rep,name=AiApiPriority,proto3" json:"AiApiPriority,omitempty"`
	// 开启数据库同步存储
	DbSaveSync bool `protobuf:"varint,19,opt,name=DbSaveSync,proto3" json:"DbSaveSync,omitempty"`
	// 插件执行配置
	CallPluginTimeout float32 `protobuf:"fixed32,20,opt,name=CallPluginTimeout,proto3" json:"CallPluginTimeout,omitempty"`
	MinTlsVersion     uint64  `protobuf:"varint,21,opt,name=MinTlsVersion,proto3" json:"MinTlsVersion,omitempty"`
	MaxTlsVersion     uint64  `protobuf:"varint,22,opt,name=MaxTlsVersion,proto3" json:"MaxTlsVersion,omitempty"`
	MaxContentLength  uint64  `protobuf:"varint,23,opt,name=MaxContentLength,proto3" json:"MaxContentLength,omitempty"`
}

func (x *GlobalNetworkConfig) Reset() {
	*x = GlobalNetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNetworkConfig) ProtoMessage() {}

func (x *GlobalNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNetworkConfig.ProtoReflect.Descriptor instead.
func (*GlobalNetworkConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{51}
}

func (x *GlobalNetworkConfig) GetDisableSystemDNS() bool {
	if x != nil {
		return x.DisableSystemDNS
	}
	return false
}

func (x *GlobalNetworkConfig) GetCustomDNSServers() []string {
	if x != nil {
		return x.CustomDNSServers
	}
	return nil
}

func (x *GlobalNetworkConfig) GetDNSFallbackTCP() bool {
	if x != nil {
		return x.DNSFallbackTCP
	}
	return false
}

func (x *GlobalNetworkConfig) GetDNSFallbackDoH() bool {
	if x != nil {
		return x.DNSFallbackDoH
	}
	return false
}

func (x *GlobalNetworkConfig) GetCustomDoHServers() []string {
	if x != nil {
		return x.CustomDoHServers
	}
	return nil
}

func (x *GlobalNetworkConfig) GetClientCertificates() []*Certificate {
	if x != nil {
		return x.ClientCertificates
	}
	return nil
}

func (x *GlobalNetworkConfig) GetDisallowIPAddress() []string {
	if x != nil {
		return x.DisallowIPAddress
	}
	return nil
}

func (x *GlobalNetworkConfig) GetDisallowDomain() []string {
	if x != nil {
		return x.DisallowDomain
	}
	return nil
}

func (x *GlobalNetworkConfig) GetGlobalProxy() []string {
	if x != nil {
		return x.GlobalProxy
	}
	return nil
}

func (x *GlobalNetworkConfig) GetEnableSystemProxyFromEnv() bool {
	if x != nil {
		return x.EnableSystemProxyFromEnv
	}
	return false
}

func (x *GlobalNetworkConfig) GetSkipSaveHTTPFlow() bool {
	if x != nil {
		return x.SkipSaveHTTPFlow
	}
	return false
}

func (x *GlobalNetworkConfig) GetAppConfigs() []*ThirdPartyApplicationConfig {
	if x != nil {
		return x.AppConfigs
	}
	return nil
}

func (x *GlobalNetworkConfig) GetAuthInfos() []*AuthInfo {
	if x != nil {
		return x.AuthInfos
	}
	return nil
}

func (x *GlobalNetworkConfig) GetSynScanNetInterface() string {
	if x != nil {
		return x.SynScanNetInterface
	}
	return ""
}

func (x *GlobalNetworkConfig) GetExcludePluginScanURIs() []string {
	if x != nil {
		return x.ExcludePluginScanURIs
	}
	return nil
}

func (x *GlobalNetworkConfig) GetIncludePluginScanURIs() []string {
	if x != nil {
		return x.IncludePluginScanURIs
	}
	return nil
}

func (x *GlobalNetworkConfig) GetPrimaryAIType() string {
	if x != nil {
		return x.PrimaryAIType
	}
	return ""
}

func (x *GlobalNetworkConfig) GetAiApiPriority() []string {
	if x != nil {
		return x.AiApiPriority
	}
	return nil
}

func (x *GlobalNetworkConfig) GetDbSaveSync() bool {
	if x != nil {
		return x.DbSaveSync
	}
	return false
}

func (x *GlobalNetworkConfig) GetCallPluginTimeout() float32 {
	if x != nil {
		return x.CallPluginTimeout
	}
	return 0
}

func (x *GlobalNetworkConfig) GetMinTlsVersion() uint64 {
	if x != nil {
		return x.MinTlsVersion
	}
	return 0
}

func (x *GlobalNetworkConfig) GetMaxTlsVersion() uint64 {
	if x != nil {
		return x.MaxTlsVersion
	}
	return 0
}

func (x *GlobalNetworkConfig) GetMaxContentLength() uint64 {
	if x != nil {
		return x.MaxContentLength
	}
	return 0
}

type AuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthUsername string `protobuf:"bytes,1,opt,name=AuthUsername,proto3" json:"AuthUsername,omitempty"`
	AuthPassword string `protobuf:"bytes,2,opt,name=AuthPassword,proto3" json:"AuthPassword,omitempty"`
	AuthType     string `protobuf:"bytes,3,opt,name=AuthType,proto3" json:"AuthType,omitempty"`
	Host         string `protobuf:"bytes,4,opt,name=Host,proto3" json:"Host,omitempty"`
	Forbidden    bool   `protobuf:"varint,5,opt,name=Forbidden,proto3" json:"Forbidden,omitempty"`
}

func (x *AuthInfo) Reset() {
	*x = AuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInfo) ProtoMessage() {}

func (x *AuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInfo.ProtoReflect.Descriptor instead.
func (*AuthInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{52}
}

func (x *AuthInfo) GetAuthUsername() string {
	if x != nil {
		return x.AuthUsername
	}
	return ""
}

func (x *AuthInfo) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *AuthInfo) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *AuthInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AuthInfo) GetForbidden() bool {
	if x != nil {
		return x.Forbidden
	}
	return false
}

type ThirdPartyApplicationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// zoomeye / hunter / shodan / fofa / github / openai / token
	Type           string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	APIKey         string    `protobuf:"bytes,2,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	UserIdentifier string    `protobuf:"bytes,3,opt,name=UserIdentifier,proto3" json:"UserIdentifier,omitempty"`
	UserSecret     string    `protobuf:"bytes,4,opt,name=UserSecret,proto3" json:"UserSecret,omitempty"`
	Namespace      string    `protobuf:"bytes,5,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Domain         string    `protobuf:"bytes,6,opt,name=Domain,proto3" json:"Domain,omitempty"`
	WebhookURL     string    `protobuf:"bytes,7,opt,name=WebhookURL,proto3" json:"WebhookURL,omitempty"`
	ExtraParams    []*KVPair `protobuf:"bytes,8,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
}

func (x *ThirdPartyApplicationConfig) Reset() {
	*x = ThirdPartyApplicationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdPartyApplicationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyApplicationConfig) ProtoMessage() {}

func (x *ThirdPartyApplicationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyApplicationConfig.ProtoReflect.Descriptor instead.
func (*ThirdPartyApplicationConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{53}
}

func (x *ThirdPartyApplicationConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetUserIdentifier() string {
	if x != nil {
		return x.UserIdentifier
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetUserSecret() string {
	if x != nil {
		return x.UserSecret
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetWebhookURL() string {
	if x != nil {
		return x.WebhookURL
	}
	return ""
}

func (x *ThirdPartyApplicationConfig) GetExtraParams() []*KVPair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type DiagnoseNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkTimeout float64 `protobuf:"fixed64,1,opt,name=NetworkTimeout,proto3" json:"NetworkTimeout,omitempty"`
	// 想要连接或扫描的目标是否都可达？
	// 网络是否可达？网管是什么
	// 如果是一个主机的话，他的 TCP 是否开放？
	// 如果包含域名的话，他的解析结果是什么？不存在？还是本地解析？
	// 多个服务器解析到同一个 IP？
	ConnectTarget string `protobuf:"bytes,2,opt,name=ConnectTarget,proto3" json:"ConnectTarget,omitempty"`
	// 代理是否配置正确？
	Proxy             string   `protobuf:"bytes,3,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	ProxyAuthUsername string   `protobuf:"bytes,4,opt,name=ProxyAuthUsername,proto3" json:"ProxyAuthUsername,omitempty"`
	ProxyAuthPassword string   `protobuf:"bytes,5,opt,name=ProxyAuthPassword,proto3" json:"ProxyAuthPassword,omitempty"`
	ProxyToAddr       string   `protobuf:"bytes,8,opt,name=ProxyToAddr,proto3" json:"ProxyToAddr,omitempty"`
	Domain            string   `protobuf:"bytes,6,opt,name=Domain,proto3" json:"Domain,omitempty"`
	DNSServers        []string `protobuf:"bytes,7,rep,name=DNSServers,proto3" json:"DNSServers,omitempty"`
}

func (x *DiagnoseNetworkRequest) Reset() {
	*x = DiagnoseNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnoseNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnoseNetworkRequest) ProtoMessage() {}

func (x *DiagnoseNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnoseNetworkRequest.ProtoReflect.Descriptor instead.
func (*DiagnoseNetworkRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{54}
}

func (x *DiagnoseNetworkRequest) GetNetworkTimeout() float64 {
	if x != nil {
		return x.NetworkTimeout
	}
	return 0
}

func (x *DiagnoseNetworkRequest) GetConnectTarget() string {
	if x != nil {
		return x.ConnectTarget
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetProxyAuthUsername() string {
	if x != nil {
		return x.ProxyAuthUsername
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetProxyAuthPassword() string {
	if x != nil {
		return x.ProxyAuthPassword
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetProxyToAddr() string {
	if x != nil {
		return x.ProxyToAddr
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DiagnoseNetworkRequest) GetDNSServers() []string {
	if x != nil {
		return x.DNSServers
	}
	return nil
}

type DiagnoseNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	DiagnoseType   string `protobuf:"bytes,2,opt,name=DiagnoseType,proto3" json:"DiagnoseType,omitempty"`
	DiagnoseResult string `protobuf:"bytes,3,opt,name=DiagnoseResult,proto3" json:"DiagnoseResult,omitempty"`
	// info/verbose
	// warning
	LogLevel string `protobuf:"bytes,5,opt,name=LogLevel,proto3" json:"LogLevel,omitempty"`
}

func (x *DiagnoseNetworkResponse) Reset() {
	*x = DiagnoseNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnoseNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnoseNetworkResponse) ProtoMessage() {}

func (x *DiagnoseNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnoseNetworkResponse.ProtoReflect.Descriptor instead.
func (*DiagnoseNetworkResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{55}
}

func (x *DiagnoseNetworkResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DiagnoseNetworkResponse) GetDiagnoseType() string {
	if x != nil {
		return x.DiagnoseType
	}
	return ""
}

func (x *DiagnoseNetworkResponse) GetDiagnoseResult() string {
	if x != nil {
		return x.DiagnoseResult
	}
	return ""
}

func (x *DiagnoseNetworkResponse) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

type DisconnectVulinboxAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
}

func (x *DisconnectVulinboxAgentRequest) Reset() {
	*x = DisconnectVulinboxAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectVulinboxAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectVulinboxAgentRequest) ProtoMessage() {}

func (x *DisconnectVulinboxAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectVulinboxAgentRequest.ProtoReflect.Descriptor instead.
func (*DisconnectVulinboxAgentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{56}
}

func (x *DisconnectVulinboxAgentRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type GetRegisteredAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRegisteredAgentRequest) Reset() {
	*x = GetRegisteredAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredAgentRequest) ProtoMessage() {}

func (x *GetRegisteredAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredAgentRequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredAgentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{57}
}

type GetRegisteredAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents []*IsRemoteAddrAvailableResponse `protobuf:"bytes,1,rep,name=Agents,proto3" json:"Agents,omitempty"`
}

func (x *GetRegisteredAgentResponse) Reset() {
	*x = GetRegisteredAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredAgentResponse) ProtoMessage() {}

func (x *GetRegisteredAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredAgentResponse.ProtoReflect.Descriptor instead.
func (*GetRegisteredAgentResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{58}
}

func (x *GetRegisteredAgentResponse) GetAgents() []*IsRemoteAddrAvailableResponse {
	if x != nil {
		return x.Agents
	}
	return nil
}

type SmokingEvaluatePluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*HTTPRequestBuilderParams `protobuf:"bytes,1,rep,name=Requests,proto3" json:"Requests,omitempty"`
	// 只支持插件名评估
	PluginName string `protobuf:"bytes,2,opt,name=PluginName,proto3" json:"PluginName,omitempty"`
	Code       string `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
	PluginType string `protobuf:"bytes,4,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
}

func (x *SmokingEvaluatePluginRequest) Reset() {
	*x = SmokingEvaluatePluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmokingEvaluatePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginRequest) ProtoMessage() {}

func (x *SmokingEvaluatePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginRequest.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{59}
}

func (x *SmokingEvaluatePluginRequest) GetRequests() []*HTTPRequestBuilderParams {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *SmokingEvaluatePluginRequest) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *SmokingEvaluatePluginRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SmokingEvaluatePluginRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

type SmokingEvaluateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item       string `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
	Suggestion string `protobuf:"bytes,2,opt,name=Suggestion,proto3" json:"Suggestion,omitempty"`
	ExtraInfo  []byte `protobuf:"bytes,3,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`
	Range      *Range `protobuf:"bytes,4,opt,name=Range,proto3" json:"Range,omitempty"`
	Severity   string `protobuf:"bytes,5,opt,name=Severity,proto3" json:"Severity,omitempty"` // Error || Warning
}

func (x *SmokingEvaluateResult) Reset() {
	*x = SmokingEvaluateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmokingEvaluateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluateResult) ProtoMessage() {}

func (x *SmokingEvaluateResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluateResult.ProtoReflect.Descriptor instead.
func (*SmokingEvaluateResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{60}
}

func (x *SmokingEvaluateResult) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *SmokingEvaluateResult) GetSuggestion() string {
	if x != nil {
		return x.Suggestion
	}
	return ""
}

func (x *SmokingEvaluateResult) GetExtraInfo() []byte {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *SmokingEvaluateResult) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *SmokingEvaluateResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

type SmokingEvaluatePluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score   int64                    `protobuf:"varint,1,opt,name=Score,proto3" json:"Score,omitempty"`
	Results []*SmokingEvaluateResult `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SmokingEvaluatePluginResponse) Reset() {
	*x = SmokingEvaluatePluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmokingEvaluatePluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginResponse) ProtoMessage() {}

func (x *SmokingEvaluatePluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginResponse.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{61}
}

func (x *SmokingEvaluatePluginResponse) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SmokingEvaluatePluginResponse) GetResults() []*SmokingEvaluateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type IsVulinboxReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsVulinboxReadyRequest) Reset() {
	*x = IsVulinboxReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsVulinboxReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsVulinboxReadyRequest) ProtoMessage() {}

func (x *IsVulinboxReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsVulinboxReadyRequest.ProtoReflect.Descriptor instead.
func (*IsVulinboxReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{62}
}

type IsVulinboxReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *IsVulinboxReadyResponse) Reset() {
	*x = IsVulinboxReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsVulinboxReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsVulinboxReadyResponse) ProtoMessage() {}

func (x *IsVulinboxReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsVulinboxReadyResponse.ProtoReflect.Descriptor instead.
func (*IsVulinboxReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{63}
}

func (x *IsVulinboxReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsVulinboxReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type InstallVulinboxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *InstallVulinboxRequest) Reset() {
	*x = InstallVulinboxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallVulinboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallVulinboxRequest) ProtoMessage() {}

func (x *InstallVulinboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallVulinboxRequest.ProtoReflect.Descriptor instead.
func (*InstallVulinboxRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{64}
}

func (x *InstallVulinboxRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type StartVulinboxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 默认应该是 127.0.0.1
	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	// 默认应该是 8787
	Port string `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
	// 不启用 HTTPS
	NoHttps bool `protobuf:"varint,3,opt,name=NoHttps,proto3" json:"NoHttps,omitempty"`
	// 安全模式：不启用命令执行靶场
	SafeMode bool `protobuf:"varint,4,opt,name=SafeMode,proto3" json:"SafeMode,omitempty"`
}

func (x *StartVulinboxRequest) Reset() {
	*x = StartVulinboxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVulinboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVulinboxRequest) ProtoMessage() {}

func (x *StartVulinboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVulinboxRequest.ProtoReflect.Descriptor instead.
func (*StartVulinboxRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{65}
}

func (x *StartVulinboxRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StartVulinboxRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *StartVulinboxRequest) GetNoHttps() bool {
	if x != nil {
		return x.NoHttps
	}
	return false
}

func (x *StartVulinboxRequest) GetSafeMode() bool {
	if x != nil {
		return x.SafeMode
	}
	return false
}

type GenQualityInspectionReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptNames []string `protobuf:"bytes,1,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	TaskName    string   `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *GenQualityInspectionReportRequest) Reset() {
	*x = GenQualityInspectionReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenQualityInspectionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenQualityInspectionReportRequest) ProtoMessage() {}

func (x *GenQualityInspectionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenQualityInspectionReportRequest.ProtoReflect.Descriptor instead.
func (*GenQualityInspectionReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{66}
}

func (x *GenQualityInspectionReportRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *GenQualityInspectionReportRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type DebugPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                string                    `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	PluginType          string                    `protobuf:"bytes,2,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
	Input               string                    `protobuf:"bytes,3,opt,name=Input,proto3" json:"Input,omitempty"`
	HTTPRequestTemplate *HTTPRequestBuilderParams `protobuf:"bytes,4,opt,name=HTTPRequestTemplate,proto3" json:"HTTPRequestTemplate,omitempty"`
	ExecParams          []*KVPair                 `protobuf:"bytes,5,rep,name=ExecParams,proto3" json:"ExecParams,omitempty"`
	LinkPluginConfig    *HybridScanPluginConfig   `protobuf:"bytes,6,opt,name=LinkPluginConfig,proto3" json:"LinkPluginConfig,omitempty"`
	// plugin name, if not empty, will use code
	PluginName string `protobuf:"bytes,7,opt,name=PluginName,proto3" json:"PluginName,omitempty"`
	// runtime id ,if empty, will create a new runtime
	RuntimeId string `protobuf:"bytes,8,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
}

func (x *DebugPluginRequest) Reset() {
	*x = DebugPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugPluginRequest) ProtoMessage() {}

func (x *DebugPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugPluginRequest.ProtoReflect.Descriptor instead.
func (*DebugPluginRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{67}
}

func (x *DebugPluginRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DebugPluginRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

func (x *DebugPluginRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *DebugPluginRequest) GetHTTPRequestTemplate() *HTTPRequestBuilderParams {
	if x != nil {
		return x.HTTPRequestTemplate
	}
	return nil
}

func (x *DebugPluginRequest) GetExecParams() []*KVPair {
	if x != nil {
		return x.ExecParams
	}
	return nil
}

func (x *DebugPluginRequest) GetLinkPluginConfig() *HybridScanPluginConfig {
	if x != nil {
		return x.LinkPluginConfig
	}
	return nil
}

func (x *DebugPluginRequest) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *DebugPluginRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type HTTPRequestBuilderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHttps     bool   `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	HTTPRequest []byte `protobuf:"bytes,3,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
}

func (x *HTTPRequestBuilderResult) Reset() {
	*x = HTTPRequestBuilderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestBuilderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestBuilderResult) ProtoMessage() {}

func (x *HTTPRequestBuilderResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestBuilderResult.ProtoReflect.Descriptor instead.
func (*HTTPRequestBuilderResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{68}
}

func (x *HTTPRequestBuilderResult) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HTTPRequestBuilderResult) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPRequestBuilderResult) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

type HTTPRequestBuilderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results   []*HTTPRequestBuilderResult `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	Templates string                      `protobuf:"bytes,2,opt,name=Templates,proto3" json:"Templates,omitempty"`
}

func (x *HTTPRequestBuilderResponse) Reset() {
	*x = HTTPRequestBuilderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestBuilderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestBuilderResponse) ProtoMessage() {}

func (x *HTTPRequestBuilderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestBuilderResponse.ProtoReflect.Descriptor instead.
func (*HTTPRequestBuilderResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{69}
}

func (x *HTTPRequestBuilderResponse) GetResults() []*HTTPRequestBuilderResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *HTTPRequestBuilderResponse) GetTemplates() string {
	if x != nil {
		return x.Templates
	}
	return ""
}

type HTTPRequestBuilderParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRawHTTPRequest bool   `protobuf:"varint,1,opt,name=IsRawHTTPRequest,proto3" json:"IsRawHTTPRequest,omitempty"`
	IsHttps          bool   `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	RawHTTPRequest   []byte `protobuf:"bytes,3,opt,name=RawHTTPRequest,proto3" json:"RawHTTPRequest,omitempty"`
	// fields
	Method string `protobuf:"bytes,4,opt,name=Method,proto3" json:"Method,omitempty"`
	// path 增强型
	Path      []string  `protobuf:"bytes,6,rep,name=Path,proto3" json:"Path,omitempty"`
	GetParams []*KVPair `protobuf:"bytes,9,rep,name=GetParams,proto3" json:"GetParams,omitempty"`
	Headers   []*KVPair `protobuf:"bytes,7,rep,name=Headers,proto3" json:"Headers,omitempty"`
	Cookie    []*KVPair `protobuf:"bytes,8,rep,name=Cookie,proto3" json:"Cookie,omitempty"`
	// body 增强
	Body                []byte    `protobuf:"bytes,10,opt,name=Body,proto3" json:"Body,omitempty"`
	PostParams          []*KVPair `protobuf:"bytes,11,rep,name=PostParams,proto3" json:"PostParams,omitempty"`
	MultipartParams     []*KVPair `protobuf:"bytes,12,rep,name=MultipartParams,proto3" json:"MultipartParams,omitempty"`
	MultipartFileParams []*KVPair `protobuf:"bytes,13,rep,name=MultipartFileParams,proto3" json:"MultipartFileParams,omitempty"`
	IsHttpFlowId        bool      `protobuf:"varint,14,opt,name=IsHttpFlowId,proto3" json:"IsHttpFlowId,omitempty"`
	HTTPFlowId          []int64   `protobuf:"varint,15,rep,packed,name=HTTPFlowId,proto3" json:"HTTPFlowId,omitempty"`
}

func (x *HTTPRequestBuilderParams) Reset() {
	*x = HTTPRequestBuilderParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestBuilderParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestBuilderParams) ProtoMessage() {}

func (x *HTTPRequestBuilderParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestBuilderParams.ProtoReflect.Descriptor instead.
func (*HTTPRequestBuilderParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{70}
}

func (x *HTTPRequestBuilderParams) GetIsRawHTTPRequest() bool {
	if x != nil {
		return x.IsRawHTTPRequest
	}
	return false
}

func (x *HTTPRequestBuilderParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HTTPRequestBuilderParams) GetRawHTTPRequest() []byte {
	if x != nil {
		return x.RawHTTPRequest
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPRequestBuilderParams) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetGetParams() []*KVPair {
	if x != nil {
		return x.GetParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetHeaders() []*KVPair {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetCookie() []*KVPair {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetPostParams() []*KVPair {
	if x != nil {
		return x.PostParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetMultipartParams() []*KVPair {
	if x != nil {
		return x.MultipartParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetMultipartFileParams() []*KVPair {
	if x != nil {
		return x.MultipartFileParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetIsHttpFlowId() bool {
	if x != nil {
		return x.IsHttpFlowId
	}
	return false
}

func (x *HTTPRequestBuilderParams) GetHTTPFlowId() []int64 {
	if x != nil {
		return x.HTTPFlowId
	}
	return nil
}

type ScreenRecorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Filename  string `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"`
	NoteInfo  string `protobuf:"bytes,3,opt,name=NoteInfo,proto3" json:"NoteInfo,omitempty"`
	Project   string `protobuf:"bytes,4,opt,name=Project,proto3" json:"Project,omitempty"`
	CreatedAt int64  `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt int64  `protobuf:"varint,6,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	VideoName string `protobuf:"bytes,7,opt,name=VideoName,proto3" json:"VideoName,omitempty"`
	Cover     string `protobuf:"bytes,8,opt,name=Cover,proto3" json:"Cover,omitempty"`
	Duration  string `protobuf:"bytes,9,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Before    bool   `protobuf:"varint,10,opt,name=Before,proto3" json:"Before,omitempty"`
	After     bool   `protobuf:"varint,11,opt,name=After,proto3" json:"After,omitempty"`
}

func (x *ScreenRecorder) Reset() {
	*x = ScreenRecorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenRecorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenRecorder) ProtoMessage() {}

func (x *ScreenRecorder) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenRecorder.ProtoReflect.Descriptor instead.
func (*ScreenRecorder) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{71}
}

func (x *ScreenRecorder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScreenRecorder) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ScreenRecorder) GetNoteInfo() string {
	if x != nil {
		return x.NoteInfo
	}
	return ""
}

func (x *ScreenRecorder) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ScreenRecorder) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ScreenRecorder) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ScreenRecorder) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

func (x *ScreenRecorder) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *ScreenRecorder) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *ScreenRecorder) GetBefore() bool {
	if x != nil {
		return x.Before
	}
	return false
}

func (x *ScreenRecorder) GetAfter() bool {
	if x != nil {
		return x.After
	}
	return false
}

type QueryScreenRecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project    string  `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Pagination *Paging `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Keywords   string  `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Ids        []int64 `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *QueryScreenRecorderRequest) Reset() {
	*x = QueryScreenRecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScreenRecorderRequest) ProtoMessage() {}

func (x *QueryScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*QueryScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{72}
}

func (x *QueryScreenRecorderRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryScreenRecorderRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryScreenRecorderRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryScreenRecorderRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UploadScreenRecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project  string  `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Token    string  `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Keywords string  `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Ids      []int64 `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *UploadScreenRecorderRequest) Reset() {
	*x = UploadScreenRecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadScreenRecorderRequest) ProtoMessage() {}

func (x *UploadScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*UploadScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{73}
}

func (x *UploadScreenRecorderRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UploadScreenRecorderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UploadScreenRecorderRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *UploadScreenRecorderRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetOneScreenRecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Order string `protobuf:"bytes,2,opt,name=Order,proto3" json:"Order,omitempty"`
}

func (x *GetOneScreenRecorderRequest) Reset() {
	*x = GetOneScreenRecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneScreenRecorderRequest) ProtoMessage() {}

func (x *GetOneScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*GetOneScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{74}
}

func (x *GetOneScreenRecorderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetOneScreenRecorderRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type UpdateScreenRecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	VideoName string `protobuf:"bytes,2,opt,name=VideoName,proto3" json:"VideoName,omitempty"`
	NoteInfo  string `protobuf:"bytes,3,opt,name=NoteInfo,proto3" json:"NoteInfo,omitempty"`
}

func (x *UpdateScreenRecorderRequest) Reset() {
	*x = UpdateScreenRecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScreenRecorderRequest) ProtoMessage() {}

func (x *UpdateScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*UpdateScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{75}
}

func (x *UpdateScreenRecorderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateScreenRecorderRequest) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

func (x *UpdateScreenRecorderRequest) GetNoteInfo() string {
	if x != nil {
		return x.NoteInfo
	}
	return ""
}

type QueryScreenRecorderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*ScreenRecorder `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination *Paging           `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryScreenRecorderResponse) Reset() {
	*x = QueryScreenRecorderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryScreenRecorderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScreenRecorderResponse) ProtoMessage() {}

func (x *QueryScreenRecorderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScreenRecorderResponse.ProtoReflect.Descriptor instead.
func (*QueryScreenRecorderResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{76}
}

func (x *QueryScreenRecorderResponse) GetData() []*ScreenRecorder {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryScreenRecorderResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryScreenRecorderResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type StartScrecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Framerate      int64   `protobuf:"varint,1,opt,name=Framerate,proto3" json:"Framerate,omitempty"`
	ResolutionSize string  `protobuf:"bytes,2,opt,name=ResolutionSize,proto3" json:"ResolutionSize,omitempty"`
	CoefficientPTS float64 `protobuf:"fixed64,3,opt,name=CoefficientPTS,proto3" json:"CoefficientPTS,omitempty"`
	DisableMouse   bool    `protobuf:"varint,4,opt,name=DisableMouse,proto3" json:"DisableMouse,omitempty"`
}

func (x *StartScrecorderRequest) Reset() {
	*x = StartScrecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartScrecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartScrecorderRequest) ProtoMessage() {}

func (x *StartScrecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartScrecorderRequest.ProtoReflect.Descriptor instead.
func (*StartScrecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{77}
}

func (x *StartScrecorderRequest) GetFramerate() int64 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *StartScrecorderRequest) GetResolutionSize() string {
	if x != nil {
		return x.ResolutionSize
	}
	return ""
}

func (x *StartScrecorderRequest) GetCoefficientPTS() float64 {
	if x != nil {
		return x.CoefficientPTS
	}
	return 0
}

func (x *StartScrecorderRequest) GetDisableMouse() bool {
	if x != nil {
		return x.DisableMouse
	}
	return false
}

type InstallScrecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *InstallScrecorderRequest) Reset() {
	*x = InstallScrecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallScrecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallScrecorderRequest) ProtoMessage() {}

func (x *InstallScrecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallScrecorderRequest.ProtoReflect.Descriptor instead.
func (*InstallScrecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{78}
}

func (x *InstallScrecorderRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type IsScrecorderReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsScrecorderReadyRequest) Reset() {
	*x = IsScrecorderReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsScrecorderReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsScrecorderReadyRequest) ProtoMessage() {}

func (x *IsScrecorderReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsScrecorderReadyRequest.ProtoReflect.Descriptor instead.
func (*IsScrecorderReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{79}
}

type IsScrecorderReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *IsScrecorderReadyResponse) Reset() {
	*x = IsScrecorderReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsScrecorderReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsScrecorderReadyResponse) ProtoMessage() {}

func (x *IsScrecorderReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsScrecorderReadyResponse.ProtoReflect.Descriptor instead.
func (*IsScrecorderReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{80}
}

func (x *IsScrecorderReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsScrecorderReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetCVERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CVE string `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
}

func (x *GetCVERequest) Reset() {
	*x = GetCVERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCVERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCVERequest) ProtoMessage() {}

func (x *GetCVERequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCVERequest.ProtoReflect.Descriptor instead.
func (*GetCVERequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{81}
}

func (x *GetCVERequest) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

type QueryCVERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	// NETWORK/LOCAL/ADJACENT_NETWORK/PHYSICAL
	AccessVector string `protobuf:"bytes,2,opt,name=AccessVector,proto3" json:"AccessVector,omitempty"`
	// HIGH/MIDDLE/LOW
	AccessComplexity string  `protobuf:"bytes,3,opt,name=AccessComplexity,proto3" json:"AccessComplexity,omitempty"`
	CWE              string  `protobuf:"bytes,4,opt,name=CWE,proto3" json:"CWE,omitempty"`
	Year             string  `protobuf:"bytes,5,opt,name=Year,proto3" json:"Year,omitempty"`
	Severity         string  `protobuf:"bytes,6,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Score            float64 `protobuf:"fixed64,7,opt,name=Score,proto3" json:"Score,omitempty"`
	Product          string  `protobuf:"bytes,8,opt,name=Product,proto3" json:"Product,omitempty"`
	// by published_date
	AfterYear               string `protobuf:"bytes,9,opt,name=AfterYear,proto3" json:"AfterYear,omitempty"`
	ChineseTranslationFirst bool   `protobuf:"varint,10,opt,name=ChineseTranslationFirst,proto3" json:"ChineseTranslationFirst,omitempty"`
	Keywords                string `protobuf:"bytes,11,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
}

func (x *QueryCVERequest) Reset() {
	*x = QueryCVERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCVERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCVERequest) ProtoMessage() {}

func (x *QueryCVERequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCVERequest.ProtoReflect.Descriptor instead.
func (*QueryCVERequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{82}
}

func (x *QueryCVERequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryCVERequest) GetAccessVector() string {
	if x != nil {
		return x.AccessVector
	}
	return ""
}

func (x *QueryCVERequest) GetAccessComplexity() string {
	if x != nil {
		return x.AccessComplexity
	}
	return ""
}

func (x *QueryCVERequest) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *QueryCVERequest) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *QueryCVERequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *QueryCVERequest) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QueryCVERequest) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *QueryCVERequest) GetAfterYear() string {
	if x != nil {
		return x.AfterYear
	}
	return ""
}

func (x *QueryCVERequest) GetChineseTranslationFirst() bool {
	if x != nil {
		return x.ChineseTranslationFirst
	}
	return false
}

func (x *QueryCVERequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

type CWEDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CWE               string   `protobuf:"bytes,1,opt,name=CWE,proto3" json:"CWE,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NameZh            string   `protobuf:"bytes,3,opt,name=NameZh,proto3" json:"NameZh,omitempty"` //  repeated CWEDetail InterTo = 4;
	Status            string   `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	Stable            bool     `protobuf:"varint,6,opt,name=Stable,proto3" json:"Stable,omitempty"`
	Incomplete        bool     `protobuf:"varint,7,opt,name=Incomplete,proto3" json:"Incomplete,omitempty"`
	Description       string   `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	DescriptionZh     string   `protobuf:"bytes,9,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	LongDescription   string   `protobuf:"bytes,10,opt,name=LongDescription,proto3" json:"LongDescription,omitempty"`
	LongDescriptionZh string   `protobuf:"bytes,11,opt,name=LongDescriptionZh,proto3" json:"LongDescriptionZh,omitempty"`
	RelativeLanguage  []string `protobuf:"bytes,12,rep,name=RelativeLanguage,proto3" json:"RelativeLanguage,omitempty"`
	Solution          string   `protobuf:"bytes,13,opt,name=Solution,proto3" json:"Solution,omitempty"`
	RelativeCVE       []string `protobuf:"bytes,14,rep,name=RelativeCVE,proto3" json:"RelativeCVE,omitempty"`
}

func (x *CWEDetail) Reset() {
	*x = CWEDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWEDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWEDetail) ProtoMessage() {}

func (x *CWEDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWEDetail.ProtoReflect.Descriptor instead.
func (*CWEDetail) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{83}
}

func (x *CWEDetail) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *CWEDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CWEDetail) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *CWEDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CWEDetail) GetStable() bool {
	if x != nil {
		return x.Stable
	}
	return false
}

func (x *CWEDetail) GetIncomplete() bool {
	if x != nil {
		return x.Incomplete
	}
	return false
}

func (x *CWEDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CWEDetail) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *CWEDetail) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *CWEDetail) GetLongDescriptionZh() string {
	if x != nil {
		return x.LongDescriptionZh
	}
	return ""
}

func (x *CWEDetail) GetRelativeLanguage() []string {
	if x != nil {
		return x.RelativeLanguage
	}
	return nil
}

func (x *CWEDetail) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CWEDetail) GetRelativeCVE() []string {
	if x != nil {
		return x.RelativeCVE
	}
	return nil
}

type CVEDetailEx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CVE *CVEDetail   `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
	CWE []*CWEDetail `protobuf:"bytes,2,rep,name=CWE,proto3" json:"CWE,omitempty"`
}

func (x *CVEDetailEx) Reset() {
	*x = CVEDetailEx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEDetailEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEDetailEx) ProtoMessage() {}

func (x *CVEDetailEx) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEDetailEx.ProtoReflect.Descriptor instead.
func (*CVEDetailEx) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{84}
}

func (x *CVEDetailEx) GetCVE() *CVEDetail {
	if x != nil {
		return x.CVE
	}
	return nil
}

func (x *CVEDetailEx) GetCWE() []*CWEDetail {
	if x != nil {
		return x.CWE
	}
	return nil
}

type CVEDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CVE                     string  `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
	DescriptionZh           string  `protobuf:"bytes,2,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	DescriptionOrigin       string  `protobuf:"bytes,3,opt,name=DescriptionOrigin,proto3" json:"DescriptionOrigin,omitempty"`
	Title                   string  `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Solution                string  `protobuf:"bytes,5,opt,name=Solution,proto3" json:"Solution,omitempty"`
	References              string  `protobuf:"bytes,6,opt,name=References,proto3" json:"References,omitempty"`
	AccessVector            string  `protobuf:"bytes,7,opt,name=AccessVector,proto3" json:"AccessVector,omitempty"`
	AccessComplexity        string  `protobuf:"bytes,8,opt,name=AccessComplexity,proto3" json:"AccessComplexity,omitempty"`
	Authentication          string  `protobuf:"bytes,9,opt,name=Authentication,proto3" json:"Authentication,omitempty"`
	ConfidentialityImpact   string  `protobuf:"bytes,10,opt,name=ConfidentialityImpact,proto3" json:"ConfidentialityImpact,omitempty"`
	IntegrityImpact         string  `protobuf:"bytes,11,opt,name=IntegrityImpact,proto3" json:"IntegrityImpact,omitempty"`
	AvailabilityImpact      string  `protobuf:"bytes,12,opt,name=AvailabilityImpact,proto3" json:"AvailabilityImpact,omitempty"`
	Severity                string  `protobuf:"bytes,14,opt,name=Severity,proto3" json:"Severity,omitempty"`
	PublishedAt             int64   `protobuf:"varint,15,opt,name=PublishedAt,proto3" json:"PublishedAt,omitempty"`
	CWE                     string  `protobuf:"bytes,16,opt,name=CWE,proto3" json:"CWE,omitempty"`
	CVSSVersion             string  `protobuf:"bytes,17,opt,name=CVSSVersion,proto3" json:"CVSSVersion,omitempty"`
	CVSSVectorString        string  `protobuf:"bytes,18,opt,name=CVSSVectorString,proto3" json:"CVSSVectorString,omitempty"`
	BaseCVSSv2Score         float64 `protobuf:"fixed64,19,opt,name=BaseCVSSv2Score,proto3" json:"BaseCVSSv2Score,omitempty"`
	ExploitabilityScore     float64 `protobuf:"fixed64,20,opt,name=ExploitabilityScore,proto3" json:"ExploitabilityScore,omitempty"`
	ObtainAllPrivileged     bool    `protobuf:"varint,21,opt,name=ObtainAllPrivileged,proto3" json:"ObtainAllPrivileged,omitempty"`
	ObtainUserPrivileged    bool    `protobuf:"varint,22,opt,name=ObtainUserPrivileged,proto3" json:"ObtainUserPrivileged,omitempty"`
	ObtainOtherPrivileged   bool    `protobuf:"varint,23,opt,name=ObtainOtherPrivileged,proto3" json:"ObtainOtherPrivileged,omitempty"`
	UserInteractionRequired bool    `protobuf:"varint,24,opt,name=UserInteractionRequired,proto3" json:"UserInteractionRequired,omitempty"`
	Product                 string  `protobuf:"bytes,25,opt,name=Product,proto3" json:"Product,omitempty"`
	UpdatedAt               int64   `protobuf:"varint,26,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	LastModifiedData        int64   `protobuf:"varint,27,opt,name=LastModifiedData,proto3" json:"LastModifiedData,omitempty"`
}

func (x *CVEDetail) Reset() {
	*x = CVEDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEDetail) ProtoMessage() {}

func (x *CVEDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEDetail.ProtoReflect.Descriptor instead.
func (*CVEDetail) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{85}
}

func (x *CVEDetail) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *CVEDetail) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *CVEDetail) GetDescriptionOrigin() string {
	if x != nil {
		return x.DescriptionOrigin
	}
	return ""
}

func (x *CVEDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CVEDetail) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CVEDetail) GetReferences() string {
	if x != nil {
		return x.References
	}
	return ""
}

func (x *CVEDetail) GetAccessVector() string {
	if x != nil {
		return x.AccessVector
	}
	return ""
}

func (x *CVEDetail) GetAccessComplexity() string {
	if x != nil {
		return x.AccessComplexity
	}
	return ""
}

func (x *CVEDetail) GetAuthentication() string {
	if x != nil {
		return x.Authentication
	}
	return ""
}

func (x *CVEDetail) GetConfidentialityImpact() string {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return ""
}

func (x *CVEDetail) GetIntegrityImpact() string {
	if x != nil {
		return x.IntegrityImpact
	}
	return ""
}

func (x *CVEDetail) GetAvailabilityImpact() string {
	if x != nil {
		return x.AvailabilityImpact
	}
	return ""
}

func (x *CVEDetail) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *CVEDetail) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *CVEDetail) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *CVEDetail) GetCVSSVersion() string {
	if x != nil {
		return x.CVSSVersion
	}
	return ""
}

func (x *CVEDetail) GetCVSSVectorString() string {
	if x != nil {
		return x.CVSSVectorString
	}
	return ""
}

func (x *CVEDetail) GetBaseCVSSv2Score() float64 {
	if x != nil {
		return x.BaseCVSSv2Score
	}
	return 0
}

func (x *CVEDetail) GetExploitabilityScore() float64 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *CVEDetail) GetObtainAllPrivileged() bool {
	if x != nil {
		return x.ObtainAllPrivileged
	}
	return false
}

func (x *CVEDetail) GetObtainUserPrivileged() bool {
	if x != nil {
		return x.ObtainUserPrivileged
	}
	return false
}

func (x *CVEDetail) GetObtainOtherPrivileged() bool {
	if x != nil {
		return x.ObtainOtherPrivileged
	}
	return false
}

func (x *CVEDetail) GetUserInteractionRequired() bool {
	if x != nil {
		return x.UserInteractionRequired
	}
	return false
}

func (x *CVEDetail) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CVEDetail) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CVEDetail) GetLastModifiedData() int64 {
	if x != nil {
		return x.LastModifiedData
	}
	return 0
}

type QueryCVEResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging      `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*CVEDetail `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryCVEResponse) Reset() {
	*x = QueryCVEResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCVEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCVEResponse) ProtoMessage() {}

func (x *QueryCVEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCVEResponse.ProtoReflect.Descriptor instead.
func (*QueryCVEResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{86}
}

func (x *QueryCVEResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryCVEResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCVEResponse) GetData() []*CVEDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type SaveTextToTemporalFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text []byte `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *SaveTextToTemporalFileRequest) Reset() {
	*x = SaveTextToTemporalFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTextToTemporalFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTextToTemporalFileRequest) ProtoMessage() {}

func (x *SaveTextToTemporalFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTextToTemporalFileRequest.ProtoReflect.Descriptor instead.
func (*SaveTextToTemporalFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{87}
}

func (x *SaveTextToTemporalFileRequest) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

type SaveTextToTemporalFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
}

func (x *SaveTextToTemporalFileResponse) Reset() {
	*x = SaveTextToTemporalFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTextToTemporalFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTextToTemporalFileResponse) ProtoMessage() {}

func (x *SaveTextToTemporalFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTextToTemporalFileResponse.ProtoReflect.Descriptor instead.
func (*SaveTextToTemporalFileResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{88}
}

func (x *SaveTextToTemporalFileResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type ImportChaosMakerRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	// suricata / http-request / icmp
	RuleType     string `protobuf:"bytes,2,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	AIDecoration bool   `protobuf:"varint,3,opt,name=AIDecoration,proto3" json:"AIDecoration,omitempty"`
	Domain       string `protobuf:"bytes,4,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Proxy        string `protobuf:"bytes,5,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	Key          string `protobuf:"bytes,6,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *ImportChaosMakerRulesRequest) Reset() {
	*x = ImportChaosMakerRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportChaosMakerRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportChaosMakerRulesRequest) ProtoMessage() {}

func (x *ImportChaosMakerRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportChaosMakerRulesRequest.ProtoReflect.Descriptor instead.
func (*ImportChaosMakerRulesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{89}
}

func (x *ImportChaosMakerRulesRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ImportChaosMakerRulesRequest) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *ImportChaosMakerRulesRequest) GetAIDecoration() bool {
	if x != nil {
		return x.AIDecoration
	}
	return false
}

func (x *ImportChaosMakerRulesRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ImportChaosMakerRulesRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *ImportChaosMakerRulesRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChaosMakerRuleGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string   `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Keywords    string   `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Protocols   []string `protobuf:"bytes,4,rep,name=Protocols,proto3" json:"Protocols,omitempty"`
	Solution    string   `protobuf:"bytes,5,opt,name=Solution,proto3" json:"Solution,omitempty"`
}

func (x *ChaosMakerRuleGroup) Reset() {
	*x = ChaosMakerRuleGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosMakerRuleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosMakerRuleGroup) ProtoMessage() {}

func (x *ChaosMakerRuleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosMakerRuleGroup.ProtoReflect.Descriptor instead.
func (*ChaosMakerRuleGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{90}
}

func (x *ChaosMakerRuleGroup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChaosMakerRuleGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChaosMakerRuleGroup) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ChaosMakerRuleGroup) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *ChaosMakerRuleGroup) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

type IsRemoteAddrAvailableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Probe   string `protobuf:"bytes,3,opt,name=Probe,proto3" json:"Probe,omitempty"`
}

func (x *IsRemoteAddrAvailableRequest) Reset() {
	*x = IsRemoteAddrAvailableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRemoteAddrAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRemoteAddrAvailableRequest) ProtoMessage() {}

func (x *IsRemoteAddrAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRemoteAddrAvailableRequest.ProtoReflect.Descriptor instead.
func (*IsRemoteAddrAvailableRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{91}
}

func (x *IsRemoteAddrAvailableRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *IsRemoteAddrAvailableRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *IsRemoteAddrAvailableRequest) GetProbe() string {
	if x != nil {
		return x.Probe
	}
	return ""
}

type IsRemoteAddrAvailableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr         string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	IsAvailable  bool   `protobuf:"varint,2,opt,name=IsAvailable,proto3" json:"IsAvailable,omitempty"`
	Reason       string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Status       string `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	PingCount    int64  `protobuf:"varint,5,opt,name=PingCount,proto3" json:"PingCount,omitempty"`
	RequestCount int64  `protobuf:"varint,6,opt,name=RequestCount,proto3" json:"RequestCount,omitempty"`
	LastActiveAt int64  `protobuf:"varint,7,opt,name=LastActiveAt,proto3" json:"LastActiveAt,omitempty"`
}

func (x *IsRemoteAddrAvailableResponse) Reset() {
	*x = IsRemoteAddrAvailableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRemoteAddrAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRemoteAddrAvailableResponse) ProtoMessage() {}

func (x *IsRemoteAddrAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRemoteAddrAvailableResponse.ProtoReflect.Descriptor instead.
func (*IsRemoteAddrAvailableResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{92}
}

func (x *IsRemoteAddrAvailableResponse) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *IsRemoteAddrAvailableResponse) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *IsRemoteAddrAvailableResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IsRemoteAddrAvailableResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsRemoteAddrAvailableResponse) GetPingCount() int64 {
	if x != nil {
		return x.PingCount
	}
	return 0
}

func (x *IsRemoteAddrAvailableResponse) GetRequestCount() int64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *IsRemoteAddrAvailableResponse) GetLastActiveAt() int64 {
	if x != nil {
		return x.LastActiveAt
	}
	return 0
}

type ExecuteChaosMakerRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups                          []*ChaosMakerRuleGroup `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	ExtraOverrideDestinationAddress []string               `protobuf:"bytes,2,rep,name=ExtraOverrideDestinationAddress,proto3" json:"ExtraOverrideDestinationAddress,omitempty"`
	// 随机延迟
	Concurrent             int64 `protobuf:"varint,3,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	TrafficDelayMinSeconds int32 `protobuf:"varint,4,opt,name=TrafficDelayMinSeconds,proto3" json:"TrafficDelayMinSeconds,omitempty"`
	TrafficDelayMaxSeconds int32 `protobuf:"varint,5,opt,name=TrafficDelayMaxSeconds,proto3" json:"TrafficDelayMaxSeconds,omitempty"`
	// 额外重复，如果为 -1 认为是永久重复
	ExtraRepeat int64 `protobuf:"varint,6,opt,name=ExtraRepeat,proto3" json:"ExtraRepeat,omitempty"`
	// 每组流量之间重复的次数
	GroupGapSeconds int64 `protobuf:"varint,7,opt,name=GroupGapSeconds,proto3" json:"GroupGapSeconds,omitempty"`
}

func (x *ExecuteChaosMakerRuleRequest) Reset() {
	*x = ExecuteChaosMakerRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteChaosMakerRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteChaosMakerRuleRequest) ProtoMessage() {}

func (x *ExecuteChaosMakerRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteChaosMakerRuleRequest.ProtoReflect.Descriptor instead.
func (*ExecuteChaosMakerRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{93}
}

func (x *ExecuteChaosMakerRuleRequest) GetGroups() []*ChaosMakerRuleGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ExecuteChaosMakerRuleRequest) GetExtraOverrideDestinationAddress() []string {
	if x != nil {
		return x.ExtraOverrideDestinationAddress
	}
	return nil
}

func (x *ExecuteChaosMakerRuleRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetTrafficDelayMinSeconds() int32 {
	if x != nil {
		return x.TrafficDelayMinSeconds
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetTrafficDelayMaxSeconds() int32 {
	if x != nil {
		return x.TrafficDelayMaxSeconds
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetExtraRepeat() int64 {
	if x != nil {
		return x.ExtraRepeat
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetGroupGapSeconds() int64 {
	if x != nil {
		return x.GroupGapSeconds
	}
	return 0
}

type ChaosMakerRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RawTrafficBeyondIpPacketBase64  string   `protobuf:"bytes,2,opt,name=RawTrafficBeyondIpPacketBase64,proto3" json:"RawTrafficBeyondIpPacketBase64,omitempty"`
	RawTrafficBeyondLinkLayerBase64 string   `protobuf:"bytes,3,opt,name=RawTrafficBeyondLinkLayerBase64,proto3" json:"RawTrafficBeyondLinkLayerBase64,omitempty"`
	RawTrafficBeyondHttpBase64      string   `protobuf:"bytes,4,opt,name=RawTrafficBeyondHttpBase64,proto3" json:"RawTrafficBeyondHttpBase64,omitempty"`
	RuleType                        string   `protobuf:"bytes,5,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	SuricataRaw                     string   `protobuf:"bytes,6,opt,name=SuricataRaw,proto3" json:"SuricataRaw,omitempty"`
	Protocol                        string   `protobuf:"bytes,7,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Action                          string   `protobuf:"bytes,8,opt,name=Action,proto3" json:"Action,omitempty"`
	Name                            string   `protobuf:"bytes,9,opt,name=Name,proto3" json:"Name,omitempty"`
	NameZh                          string   `protobuf:"bytes,10,opt,name=NameZh,proto3" json:"NameZh,omitempty"`
	ClassType                       string   `protobuf:"bytes,11,opt,name=ClassType,proto3" json:"ClassType,omitempty"`
	ClassTypeZh                     string   `protobuf:"bytes,12,opt,name=ClassTypeZh,proto3" json:"ClassTypeZh,omitempty"`
	Group                           string   `protobuf:"bytes,13,opt,name=Group,proto3" json:"Group,omitempty"`
	Keywords                        string   `protobuf:"bytes,15,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	KeywordsZh                      string   `protobuf:"bytes,16,opt,name=KeywordsZh,proto3" json:"KeywordsZh,omitempty"`
	Description                     string   `protobuf:"bytes,17,opt,name=Description,proto3" json:"Description,omitempty"`
	DescriptionZh                   string   `protobuf:"bytes,18,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	CVE                             []string `protobuf:"bytes,19,rep,name=CVE,proto3" json:"CVE,omitempty"`
}

func (x *ChaosMakerRule) Reset() {
	*x = ChaosMakerRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosMakerRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosMakerRule) ProtoMessage() {}

func (x *ChaosMakerRule) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosMakerRule.ProtoReflect.Descriptor instead.
func (*ChaosMakerRule) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{94}
}

func (x *ChaosMakerRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChaosMakerRule) GetRawTrafficBeyondIpPacketBase64() string {
	if x != nil {
		return x.RawTrafficBeyondIpPacketBase64
	}
	return ""
}

func (x *ChaosMakerRule) GetRawTrafficBeyondLinkLayerBase64() string {
	if x != nil {
		return x.RawTrafficBeyondLinkLayerBase64
	}
	return ""
}

func (x *ChaosMakerRule) GetRawTrafficBeyondHttpBase64() string {
	if x != nil {
		return x.RawTrafficBeyondHttpBase64
	}
	return ""
}

func (x *ChaosMakerRule) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *ChaosMakerRule) GetSuricataRaw() string {
	if x != nil {
		return x.SuricataRaw
	}
	return ""
}

func (x *ChaosMakerRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ChaosMakerRule) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ChaosMakerRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChaosMakerRule) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *ChaosMakerRule) GetClassType() string {
	if x != nil {
		return x.ClassType
	}
	return ""
}

func (x *ChaosMakerRule) GetClassTypeZh() string {
	if x != nil {
		return x.ClassTypeZh
	}
	return ""
}

func (x *ChaosMakerRule) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ChaosMakerRule) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ChaosMakerRule) GetKeywordsZh() string {
	if x != nil {
		return x.KeywordsZh
	}
	return ""
}

func (x *ChaosMakerRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChaosMakerRule) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *ChaosMakerRule) GetCVE() []string {
	if x != nil {
		return x.CVE
	}
	return nil
}

type QueryChaosMakerRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging           `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64             `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*ChaosMakerRule `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryChaosMakerRuleResponse) Reset() {
	*x = QueryChaosMakerRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaosMakerRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaosMakerRuleResponse) ProtoMessage() {}

func (x *QueryChaosMakerRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaosMakerRuleResponse.ProtoReflect.Descriptor instead.
func (*QueryChaosMakerRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{95}
}

func (x *QueryChaosMakerRuleResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryChaosMakerRuleResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryChaosMakerRuleResponse) GetData() []*ChaosMakerRule {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteChaosMakerRuleByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeleteChaosMakerRuleByIDRequest) Reset() {
	*x = DeleteChaosMakerRuleByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChaosMakerRuleByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChaosMakerRuleByIDRequest) ProtoMessage() {}

func (x *DeleteChaosMakerRuleByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChaosMakerRuleByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteChaosMakerRuleByIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{96}
}

func (x *DeleteChaosMakerRuleByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryChaosMakerRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging  `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	RuleType   string   `protobuf:"bytes,2,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	Keywords   []string `protobuf:"bytes,3,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	// offset
	FromId  int64 `protobuf:"varint,4,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId int64 `protobuf:"varint,5,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
}

func (x *QueryChaosMakerRuleRequest) Reset() {
	*x = QueryChaosMakerRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaosMakerRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaosMakerRuleRequest) ProtoMessage() {}

func (x *QueryChaosMakerRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaosMakerRuleRequest.ProtoReflect.Descriptor instead.
func (*QueryChaosMakerRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{97}
}

func (x *QueryChaosMakerRuleRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryChaosMakerRuleRequest) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *QueryChaosMakerRuleRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *QueryChaosMakerRuleRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryChaosMakerRuleRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

type ImportsProfileDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalProfileFile string `protobuf:"bytes,1,opt,name=LocalProfileFile,proto3" json:"LocalProfileFile,omitempty"`
}

func (x *ImportsProfileDatabaseRequest) Reset() {
	*x = ImportsProfileDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportsProfileDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportsProfileDatabaseRequest) ProtoMessage() {}

func (x *ImportsProfileDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportsProfileDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ImportsProfileDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{98}
}

func (x *ImportsProfileDatabaseRequest) GetLocalProfileFile() string {
	if x != nil {
		return x.LocalProfileFile
	}
	return ""
}

type ExportsProfileDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalProfileFile string `protobuf:"bytes,1,opt,name=LocalProfileFile,proto3" json:"LocalProfileFile,omitempty"`
}

func (x *ExportsProfileDatabaseRequest) Reset() {
	*x = ExportsProfileDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportsProfileDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportsProfileDatabaseRequest) ProtoMessage() {}

func (x *ExportsProfileDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportsProfileDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ExportsProfileDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{99}
}

func (x *ExportsProfileDatabaseRequest) GetLocalProfileFile() string {
	if x != nil {
		return x.LocalProfileFile
	}
	return ""
}

type UpdateCVEDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy               string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	JustUpdateLatestCVE bool   `protobuf:"varint,2,opt,name=JustUpdateLatestCVE,proto3" json:"JustUpdateLatestCVE,omitempty"`
}

func (x *UpdateCVEDatabaseRequest) Reset() {
	*x = UpdateCVEDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCVEDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCVEDatabaseRequest) ProtoMessage() {}

func (x *UpdateCVEDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCVEDatabaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCVEDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateCVEDatabaseRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateCVEDatabaseRequest) GetJustUpdateLatestCVE() bool {
	if x != nil {
		return x.JustUpdateLatestCVE
	}
	return false
}

type IsCVEDatabaseReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok           bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason       string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	ShouldUpdate bool   `protobuf:"varint,3,opt,name=ShouldUpdate,proto3" json:"ShouldUpdate,omitempty"`
}

func (x *IsCVEDatabaseReadyResponse) Reset() {
	*x = IsCVEDatabaseReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCVEDatabaseReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCVEDatabaseReadyResponse) ProtoMessage() {}

func (x *IsCVEDatabaseReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCVEDatabaseReadyResponse.ProtoReflect.Descriptor instead.
func (*IsCVEDatabaseReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{101}
}

func (x *IsCVEDatabaseReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsCVEDatabaseReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IsCVEDatabaseReadyResponse) GetShouldUpdate() bool {
	if x != nil {
		return x.ShouldUpdate
	}
	return false
}

type IsCVEDatabaseReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsCVEDatabaseReadyRequest) Reset() {
	*x = IsCVEDatabaseReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCVEDatabaseReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCVEDatabaseReadyRequest) ProtoMessage() {}

func (x *IsCVEDatabaseReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCVEDatabaseReadyRequest.ProtoReflect.Descriptor instead.
func (*IsCVEDatabaseReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{102}
}

type MITMRuleExtractedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt      int64  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	SourceType     string `protobuf:"bytes,3,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	TraceId        string `protobuf:"bytes,4,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Regexp         string `protobuf:"bytes,5,opt,name=Regexp,proto3" json:"Regexp,omitempty"`
	RuleName       string `protobuf:"bytes,6,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Data           string `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
	Index          int64  `protobuf:"varint,8,opt,name=Index,proto3" json:"Index,omitempty"`
	Length         int64  `protobuf:"varint,9,opt,name=Length,proto3" json:"Length,omitempty"`
	IsMatchRequest bool   `protobuf:"varint,10,opt,name=IsMatchRequest,proto3" json:"IsMatchRequest,omitempty"`
}

func (x *MITMRuleExtractedData) Reset() {
	*x = MITMRuleExtractedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMRuleExtractedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMRuleExtractedData) ProtoMessage() {}

func (x *MITMRuleExtractedData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMRuleExtractedData.ProtoReflect.Descriptor instead.
func (*MITMRuleExtractedData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{103}
}

func (x *MITMRuleExtractedData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MITMRuleExtractedData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MITMRuleExtractedData) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *MITMRuleExtractedData) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *MITMRuleExtractedData) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

func (x *MITMRuleExtractedData) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *MITMRuleExtractedData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *MITMRuleExtractedData) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MITMRuleExtractedData) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *MITMRuleExtractedData) GetIsMatchRequest() bool {
	if x != nil {
		return x.IsMatchRequest
	}
	return false
}

type QueryMITMRuleExtractedDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*MITMRuleExtractedData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64                    `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Pagination *Paging                  `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryMITMRuleExtractedDataResponse) Reset() {
	*x = QueryMITMRuleExtractedDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMITMRuleExtractedDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMITMRuleExtractedDataResponse) ProtoMessage() {}

func (x *QueryMITMRuleExtractedDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMITMRuleExtractedDataResponse.ProtoReflect.Descriptor instead.
func (*QueryMITMRuleExtractedDataResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{104}
}

func (x *QueryMITMRuleExtractedDataResponse) GetData() []*MITMRuleExtractedData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryMITMRuleExtractedDataResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryMITMRuleExtractedDataResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryMITMRuleExtractedDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination          *Paging              `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	HTTPFlowHash        string               `protobuf:"bytes,2,opt,name=HTTPFlowHash,proto3" json:"HTTPFlowHash,omitempty"`
	HTTPFlowHiddenIndex string               `protobuf:"bytes,3,opt,name=HTTPFlowHiddenIndex,proto3" json:"HTTPFlowHiddenIndex,omitempty"`
	Filter              *ExtractedDataFilter `protobuf:"bytes,4,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QueryMITMRuleExtractedDataRequest) Reset() {
	*x = QueryMITMRuleExtractedDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMITMRuleExtractedDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMITMRuleExtractedDataRequest) ProtoMessage() {}

func (x *QueryMITMRuleExtractedDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMITMRuleExtractedDataRequest.ProtoReflect.Descriptor instead.
func (*QueryMITMRuleExtractedDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{105}
}

func (x *QueryMITMRuleExtractedDataRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryMITMRuleExtractedDataRequest) GetHTTPFlowHash() string {
	if x != nil {
		return x.HTTPFlowHash
	}
	return ""
}

func (x *QueryMITMRuleExtractedDataRequest) GetHTTPFlowHiddenIndex() string {
	if x != nil {
		return x.HTTPFlowHiddenIndex
	}
	return ""
}

func (x *QueryMITMRuleExtractedDataRequest) GetFilter() *ExtractedDataFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ExtractedDataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceID     []string `protobuf:"bytes,1,rep,name=TraceID,proto3" json:"TraceID,omitempty"`
	RuleVerbose []string `protobuf:"bytes,2,rep,name=RuleVerbose,proto3" json:"RuleVerbose,omitempty"`
}

func (x *ExtractedDataFilter) Reset() {
	*x = ExtractedDataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractedDataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractedDataFilter) ProtoMessage() {}

func (x *ExtractedDataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractedDataFilter.ProtoReflect.Descriptor instead.
func (*ExtractedDataFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{106}
}

func (x *ExtractedDataFilter) GetTraceID() []string {
	if x != nil {
		return x.TraceID
	}
	return nil
}

func (x *ExtractedDataFilter) GetRuleVerbose() []string {
	if x != nil {
		return x.RuleVerbose
	}
	return nil
}

type ExportMITMRuleExtractedDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter         *ExtractedDataFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ExportFilePath string               `protobuf:"bytes,2,opt,name=ExportFilePath,proto3" json:"ExportFilePath,omitempty"`
}

func (x *ExportMITMRuleExtractedDataRequest) Reset() {
	*x = ExportMITMRuleExtractedDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportMITMRuleExtractedDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMITMRuleExtractedDataRequest) ProtoMessage() {}

func (x *ExportMITMRuleExtractedDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMITMRuleExtractedDataRequest.ProtoReflect.Descriptor instead.
func (*ExportMITMRuleExtractedDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{107}
}

func (x *ExportMITMRuleExtractedDataRequest) GetFilter() *ExtractedDataFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExportMITMRuleExtractedDataRequest) GetExportFilePath() string {
	if x != nil {
		return x.ExportFilePath
	}
	return ""
}

type ExportMITMRuleExtractedDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportFilePath string  `protobuf:"bytes,1,opt,name=ExportFilePath,proto3" json:"ExportFilePath,omitempty"`
	Percent        float64 `protobuf:"fixed64,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	Verbose        string  `protobuf:"bytes,4,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *ExportMITMRuleExtractedDataResponse) Reset() {
	*x = ExportMITMRuleExtractedDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportMITMRuleExtractedDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMITMRuleExtractedDataResponse) ProtoMessage() {}

func (x *ExportMITMRuleExtractedDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMITMRuleExtractedDataResponse.ProtoReflect.Descriptor instead.
func (*ExportMITMRuleExtractedDataResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{108}
}

func (x *ExportMITMRuleExtractedDataResponse) GetExportFilePath() string {
	if x != nil {
		return x.ExportFilePath
	}
	return ""
}

func (x *ExportMITMRuleExtractedDataResponse) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ExportMITMRuleExtractedDataResponse) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type ExportProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Id          int64  `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *ExportProjectRequest) Reset() {
	*x = ExportProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportProjectRequest) ProtoMessage() {}

func (x *ExportProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportProjectRequest.ProtoReflect.Descriptor instead.
func (*ExportProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{109}
}

func (x *ExportProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ExportProjectRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ExportProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProjectIOProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPath string `protobuf:"bytes,1,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
	// 如果未完成，这个是百分比 0-1.0
	Percent float64 `protobuf:"fixed64,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	// 展示的提示语，可能是中断原因或者错误原因之类的
	Verbose string `protobuf:"bytes,4,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *ProjectIOProgress) Reset() {
	*x = ProjectIOProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectIOProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectIOProgress) ProtoMessage() {}

func (x *ProjectIOProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectIOProgress.ProtoReflect.Descriptor instead.
func (*ProjectIOProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{110}
}

func (x *ProjectIOProgress) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

func (x *ProjectIOProgress) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ProjectIOProgress) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type ImportProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalProjectName string `protobuf:"bytes,1,opt,name=LocalProjectName,proto3" json:"LocalProjectName,omitempty"`
	ProjectFilePath  string `protobuf:"bytes,2,opt,name=ProjectFilePath,proto3" json:"ProjectFilePath,omitempty"`
	Password         string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	FolderId         int64  `protobuf:"varint,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId    int64  `protobuf:"varint,5,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
}

func (x *ImportProjectRequest) Reset() {
	*x = ImportProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProjectRequest) ProtoMessage() {}

func (x *ImportProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProjectRequest.ProtoReflect.Descriptor instead.
func (*ImportProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{111}
}

func (x *ImportProjectRequest) GetLocalProjectName() string {
	if x != nil {
		return x.LocalProjectName
	}
	return ""
}

func (x *ImportProjectRequest) GetProjectFilePath() string {
	if x != nil {
		return x.ProjectFilePath
	}
	return ""
}

func (x *ImportProjectRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ImportProjectRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ImportProjectRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

type IsPrivilegedForNetRawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPrivileged  bool   `protobuf:"varint,1,opt,name=IsPrivileged,proto3" json:"IsPrivileged,omitempty"`
	Advice        string `protobuf:"bytes,2,opt,name=Advice,proto3" json:"Advice,omitempty"`
	AdviceVerbose string `protobuf:"bytes,3,opt,name=AdviceVerbose,proto3" json:"AdviceVerbose,omitempty"`
}

func (x *IsPrivilegedForNetRawResponse) Reset() {
	*x = IsPrivilegedForNetRawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPrivilegedForNetRawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPrivilegedForNetRawResponse) ProtoMessage() {}

func (x *IsPrivilegedForNetRawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPrivilegedForNetRawResponse.ProtoReflect.Descriptor instead.
func (*IsPrivilegedForNetRawResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{112}
}

func (x *IsPrivilegedForNetRawResponse) GetIsPrivileged() bool {
	if x != nil {
		return x.IsPrivileged
	}
	return false
}

func (x *IsPrivilegedForNetRawResponse) GetAdvice() string {
	if x != nil {
		return x.Advice
	}
	return ""
}

func (x *IsPrivilegedForNetRawResponse) GetAdviceVerbose() string {
	if x != nil {
		return x.AdviceVerbose
	}
	return ""
}

type RemoveProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
}

func (x *RemoveProjectRequest) Reset() {
	*x = RemoveProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveProjectRequest) ProtoMessage() {}

func (x *RemoveProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveProjectRequest.ProtoReflect.Descriptor instead.
func (*RemoveProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{113}
}

func (x *RemoveProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type IsProjectNameValidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName   string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	FolderId      int64  `protobuf:"varint,2,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId int64  `protobuf:"varint,3,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type          string `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *IsProjectNameValidRequest) Reset() {
	*x = IsProjectNameValidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsProjectNameValidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsProjectNameValidRequest) ProtoMessage() {}

func (x *IsProjectNameValidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsProjectNameValidRequest.ProtoReflect.Descriptor instead.
func (*IsProjectNameValidRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{114}
}

func (x *IsProjectNameValidRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *IsProjectNameValidRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *IsProjectNameValidRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *IsProjectNameValidRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type NewProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName   string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Description   string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	FolderId      int64  `protobuf:"varint,3,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId int64  `protobuf:"varint,4,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type          string `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	Id            int64  `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *NewProjectRequest) Reset() {
	*x = NewProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProjectRequest) ProtoMessage() {}

func (x *NewProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProjectRequest.ProtoReflect.Descriptor instead.
func (*NewProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{115}
}

func (x *NewProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *NewProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewProjectRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *NewProjectRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *NewProjectRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NewProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
}

func (x *NewProjectResponse) Reset() {
	*x = NewProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProjectResponse) ProtoMessage() {}

func (x *NewProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProjectResponse.ProtoReflect.Descriptor instead.
func (*NewProjectResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{116}
}

func (x *NewProjectResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewProjectResponse) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type GetProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName   string  `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Description   string  `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Pagination    *Paging `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	FolderId      int64   `protobuf:"varint,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId int64   `protobuf:"varint,5,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type          string  `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *GetProjectsRequest) Reset() {
	*x = GetProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsRequest) ProtoMessage() {}

func (x *GetProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsRequest.ProtoReflect.Descriptor instead.
func (*GetProjectsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{117}
}

func (x *GetProjectsRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GetProjectsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetProjectsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProjectsRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *GetProjectsRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *GetProjectsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ProjectDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName  string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Description  string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Id           int64  `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	DatabasePath string `protobuf:"bytes,4,opt,name=DatabasePath,proto3" json:"DatabasePath,omitempty"`
	// 创建时间
	CreatedAt       int64  `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	FolderId        int64  `protobuf:"varint,6,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId   int64  `protobuf:"varint,7,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type            string `protobuf:"bytes,8,opt,name=Type,proto3" json:"Type,omitempty"`
	UpdateAt        int64  `protobuf:"varint,9,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	FolderName      string `protobuf:"bytes,10,opt,name=FolderName,proto3" json:"FolderName,omitempty"`
	ChildFolderName string `protobuf:"bytes,11,opt,name=ChildFolderName,proto3" json:"ChildFolderName,omitempty"`
	FileSize        string `protobuf:"bytes,12,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
}

func (x *ProjectDescription) Reset() {
	*x = ProjectDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDescription) ProtoMessage() {}

func (x *ProjectDescription) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDescription.ProtoReflect.Descriptor instead.
func (*ProjectDescription) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{118}
}

func (x *ProjectDescription) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProjectDescription) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectDescription) GetDatabasePath() string {
	if x != nil {
		return x.DatabasePath
	}
	return ""
}

func (x *ProjectDescription) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProjectDescription) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ProjectDescription) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *ProjectDescription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProjectDescription) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *ProjectDescription) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

func (x *ProjectDescription) GetChildFolderName() string {
	if x != nil {
		return x.ChildFolderName
	}
	return ""
}

func (x *ProjectDescription) GetFileSize() string {
	if x != nil {
		return x.FileSize
	}
	return ""
}

type GetProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects     []*ProjectDescription `protobuf:"bytes,1,rep,name=Projects,proto3" json:"Projects,omitempty"`
	Pagination   *Paging               `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total        int64                 `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage    int64                 `protobuf:"varint,4,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
	ProjectToTal int64                 `protobuf:"varint,9,opt,name=ProjectToTal,proto3" json:"ProjectToTal,omitempty"`
}

func (x *GetProjectsResponse) Reset() {
	*x = GetProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsResponse) ProtoMessage() {}

func (x *GetProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsResponse.ProtoReflect.Descriptor instead.
func (*GetProjectsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{119}
}

func (x *GetProjectsResponse) GetProjects() []*ProjectDescription {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *GetProjectsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProjectsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetProjectsResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetProjectsResponse) GetProjectToTal() int64 {
	if x != nil {
		return x.ProjectToTal
	}
	return 0
}

type SetCurrentProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProjectName
	ProjectName string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Id          int64  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *SetCurrentProjectRequest) Reset() {
	*x = SetCurrentProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCurrentProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCurrentProjectRequest) ProtoMessage() {}

func (x *SetCurrentProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCurrentProjectRequest.ProtoReflect.Descriptor instead.
func (*SetCurrentProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{120}
}

func (x *SetCurrentProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *SetCurrentProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IsDeleteLocal bool  `protobuf:"varint,2,opt,name=IsDeleteLocal,proto3" json:"IsDeleteLocal,omitempty"`
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{121}
}

func (x *DeleteProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteProjectRequest) GetIsDeleteLocal() bool {
	if x != nil {
		return x.IsDeleteLocal
	}
	return false
}

type QueryProjectDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *QueryProjectDetailRequest) Reset() {
	*x = QueryProjectDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProjectDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProjectDetailRequest) ProtoMessage() {}

func (x *QueryProjectDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProjectDetailRequest.ProtoReflect.Descriptor instead.
func (*QueryProjectDetailRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{122}
}

func (x *QueryProjectDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AttachCombinedOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttachCombinedOutputRequest) Reset() {
	*x = AttachCombinedOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachCombinedOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachCombinedOutputRequest) ProtoMessage() {}

func (x *AttachCombinedOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachCombinedOutputRequest.ProtoReflect.Descriptor instead.
func (*AttachCombinedOutputRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{123}
}

type YaklangShellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input string `protobuf:"bytes,1,opt,name=Input,proto3" json:"Input,omitempty"`
}

func (x *YaklangShellRequest) Reset() {
	*x = YaklangShellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangShellRequest) ProtoMessage() {}

func (x *YaklangShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangShellRequest.ProtoReflect.Descriptor instead.
func (*YaklangShellRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{124}
}

func (x *YaklangShellRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type YaklangShellKVPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value        []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	ValueVerbose string `protobuf:"bytes,3,opt,name=ValueVerbose,proto3" json:"ValueVerbose,omitempty"`
	SymbolId     int64  `protobuf:"varint,4,opt,name=SymbolId,proto3" json:"SymbolId,omitempty"`
}

func (x *YaklangShellKVPair) Reset() {
	*x = YaklangShellKVPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangShellKVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangShellKVPair) ProtoMessage() {}

func (x *YaklangShellKVPair) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangShellKVPair.ProtoReflect.Descriptor instead.
func (*YaklangShellKVPair) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{125}
}

func (x *YaklangShellKVPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YaklangShellKVPair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *YaklangShellKVPair) GetValueVerbose() string {
	if x != nil {
		return x.ValueVerbose
	}
	return ""
}

func (x *YaklangShellKVPair) GetSymbolId() int64 {
	if x != nil {
		return x.SymbolId
	}
	return 0
}

type YaklangShellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawResult *ExecResult           `protobuf:"bytes,1,opt,name=RawResult,proto3" json:"RawResult,omitempty"`
	Scope     []*YaklangShellKVPair `protobuf:"bytes,2,rep,name=Scope,proto3" json:"Scope,omitempty"`
}

func (x *YaklangShellResponse) Reset() {
	*x = YaklangShellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangShellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangShellResponse) ProtoMessage() {}

func (x *YaklangShellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangShellResponse.ProtoReflect.Descriptor instead.
func (*YaklangShellResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{126}
}

func (x *YaklangShellResponse) GetRawResult() *ExecResult {
	if x != nil {
		return x.RawResult
	}
	return nil
}

func (x *YaklangShellResponse) GetScope() []*YaklangShellKVPair {
	if x != nil {
		return x.Scope
	}
	return nil
}

type ResetAndInvalidUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetAndInvalidUserDataRequest) Reset() {
	*x = ResetAndInvalidUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetAndInvalidUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetAndInvalidUserDataRequest) ProtoMessage() {}

func (x *ResetAndInvalidUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetAndInvalidUserDataRequest.ProtoReflect.Descriptor instead.
func (*ResetAndInvalidUserDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{127}
}

type RegisterFacadesHTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 这个优先级比较高，如果有这个的话，他的响应应该像是
	// /_yakit/history/<id>
	HTTPFlowID int64 `protobuf:"varint,1,opt,name=HTTPFlowID,proto3" json:"HTTPFlowID,omitempty"`
	// 散装 HTTPFlow
	HTTPResponse []byte `protobuf:"bytes,2,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	Url          string `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *RegisterFacadesHTTPRequest) Reset() {
	*x = RegisterFacadesHTTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFacadesHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFacadesHTTPRequest) ProtoMessage() {}

func (x *RegisterFacadesHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFacadesHTTPRequest.ProtoReflect.Descriptor instead.
func (*RegisterFacadesHTTPRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{128}
}

func (x *RegisterFacadesHTTPRequest) GetHTTPFlowID() int64 {
	if x != nil {
		return x.HTTPFlowID
	}
	return 0
}

func (x *RegisterFacadesHTTPRequest) GetHTTPResponse() []byte {
	if x != nil {
		return x.HTTPResponse
	}
	return nil
}

func (x *RegisterFacadesHTTPRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type RegisterFacadesHTTPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// http(s)://localhost:<facadesport>/...
	FacadesUrl string `protobuf:"bytes,1,opt,name=FacadesUrl,proto3" json:"FacadesUrl,omitempty"`
}

func (x *RegisterFacadesHTTPResponse) Reset() {
	*x = RegisterFacadesHTTPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFacadesHTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFacadesHTTPResponse) ProtoMessage() {}

func (x *RegisterFacadesHTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFacadesHTTPResponse.ProtoReflect.Descriptor instead.
func (*RegisterFacadesHTTPResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{129}
}

func (x *RegisterFacadesHTTPResponse) GetFacadesUrl() string {
	if x != nil {
		return x.FacadesUrl
	}
	return ""
}

type GetHTTPPacketBodyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet             string `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	PacketRaw          []byte `protobuf:"bytes,2,opt,name=PacketRaw,proto3" json:"PacketRaw,omitempty"`
	ForceRenderFuzztag bool   `protobuf:"varint,3,opt,name=ForceRenderFuzztag,proto3" json:"ForceRenderFuzztag,omitempty"`
}

func (x *GetHTTPPacketBodyRequest) Reset() {
	*x = GetHTTPPacketBodyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPPacketBodyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPPacketBodyRequest) ProtoMessage() {}

func (x *GetHTTPPacketBodyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPPacketBodyRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPPacketBodyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{130}
}

func (x *GetHTTPPacketBodyRequest) GetPacket() string {
	if x != nil {
		return x.Packet
	}
	return ""
}

func (x *GetHTTPPacketBodyRequest) GetPacketRaw() []byte {
	if x != nil {
		return x.PacketRaw
	}
	return nil
}

func (x *GetHTTPPacketBodyRequest) GetForceRenderFuzztag() bool {
	if x != nil {
		return x.ForceRenderFuzztag
	}
	return false
}

type DownloadBodyByHTTPFlowIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DownloadBodyByHTTPFlowIDRequest) Reset() {
	*x = DownloadBodyByHTTPFlowIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadBodyByHTTPFlowIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBodyByHTTPFlowIDRequest) ProtoMessage() {}

func (x *DownloadBodyByHTTPFlowIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBodyByHTTPFlowIDRequest.ProtoReflect.Descriptor instead.
func (*DownloadBodyByHTTPFlowIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{131}
}

func (x *DownloadBodyByHTTPFlowIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1,opt,name=Raw,proto3" json:"Raw,omitempty"`
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{132}
}

func (x *Bytes) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type ExtractDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Extracted []byte `protobuf:"bytes,2,opt,name=Extracted,proto3" json:"Extracted,omitempty"`
}

func (x *ExtractDataResponse) Reset() {
	*x = ExtractDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataResponse) ProtoMessage() {}

func (x *ExtractDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataResponse.ProtoReflect.Descriptor instead.
func (*ExtractDataResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{133}
}

func (x *ExtractDataResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExtractDataResponse) GetExtracted() []byte {
	if x != nil {
		return x.Extracted
	}
	return nil
}

type SaveFuzzerLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FuzzerLabel `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SaveFuzzerLabelRequest) Reset() {
	*x = SaveFuzzerLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveFuzzerLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFuzzerLabelRequest) ProtoMessage() {}

func (x *SaveFuzzerLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFuzzerLabelRequest.ProtoReflect.Descriptor instead.
func (*SaveFuzzerLabelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{134}
}

func (x *SaveFuzzerLabelRequest) GetData() []*FuzzerLabel {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryFuzzerLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FuzzerLabel `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryFuzzerLabelResponse) Reset() {
	*x = QueryFuzzerLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFuzzerLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFuzzerLabelResponse) ProtoMessage() {}

func (x *QueryFuzzerLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFuzzerLabelResponse.ProtoReflect.Descriptor instead.
func (*QueryFuzzerLabelResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{135}
}

func (x *QueryFuzzerLabelResponse) GetData() []*FuzzerLabel {
	if x != nil {
		return x.Data
	}
	return nil
}

type FuzzerLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Label              string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	Description        string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	DefaultDescription string `protobuf:"bytes,4,opt,name=DefaultDescription,proto3" json:"DefaultDescription,omitempty"`
	Hash               string `protobuf:"bytes,5,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *FuzzerLabel) Reset() {
	*x = FuzzerLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerLabel) ProtoMessage() {}

func (x *FuzzerLabel) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerLabel.ProtoReflect.Descriptor instead.
func (*FuzzerLabel) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{136}
}

func (x *FuzzerLabel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FuzzerLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FuzzerLabel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FuzzerLabel) GetDefaultDescription() string {
	if x != nil {
		return x.DefaultDescription
	}
	return ""
}

func (x *FuzzerLabel) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type DeleteFuzzerLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *DeleteFuzzerLabelRequest) Reset() {
	*x = DeleteFuzzerLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFuzzerLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFuzzerLabelRequest) ProtoMessage() {}

func (x *DeleteFuzzerLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFuzzerLabelRequest.ProtoReflect.Descriptor instead.
func (*DeleteFuzzerLabelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{137}
}

func (x *DeleteFuzzerLabelRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type SaveFuzzerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FuzzerConfig `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SaveFuzzerConfigRequest) Reset() {
	*x = SaveFuzzerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveFuzzerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFuzzerConfigRequest) ProtoMessage() {}

func (x *SaveFuzzerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFuzzerConfigRequest.ProtoReflect.Descriptor instead.
func (*SaveFuzzerConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{138}
}

func (x *SaveFuzzerConfigRequest) GetData() []*FuzzerConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryFuzzerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging  `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	PageId     []string `protobuf:"bytes,2,rep,name=PageId,proto3" json:"PageId,omitempty"`
}

func (x *QueryFuzzerConfigRequest) Reset() {
	*x = QueryFuzzerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFuzzerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFuzzerConfigRequest) ProtoMessage() {}

func (x *QueryFuzzerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFuzzerConfigRequest.ProtoReflect.Descriptor instead.
func (*QueryFuzzerConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{139}
}

func (x *QueryFuzzerConfigRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryFuzzerConfigRequest) GetPageId() []string {
	if x != nil {
		return x.PageId
	}
	return nil
}

type QueryFuzzerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FuzzerConfig `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryFuzzerConfigResponse) Reset() {
	*x = QueryFuzzerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFuzzerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFuzzerConfigResponse) ProtoMessage() {}

func (x *QueryFuzzerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFuzzerConfigResponse.ProtoReflect.Descriptor instead.
func (*QueryFuzzerConfigResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{140}
}

func (x *QueryFuzzerConfigResponse) GetData() []*FuzzerConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type FuzzerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId string `protobuf:"bytes,1,opt,name=PageId,proto3" json:"PageId,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Config string `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *FuzzerConfig) Reset() {
	*x = FuzzerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerConfig) ProtoMessage() {}

func (x *FuzzerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerConfig.ProtoReflect.Descriptor instead.
func (*FuzzerConfig) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{141}
}

func (x *FuzzerConfig) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *FuzzerConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FuzzerConfig) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type DeleteFuzzerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId    []string `protobuf:"bytes,1,rep,name=PageId,proto3" json:"PageId,omitempty"`
	DeleteAll bool     `protobuf:"varint,2,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
}

func (x *DeleteFuzzerConfigRequest) Reset() {
	*x = DeleteFuzzerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFuzzerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFuzzerConfigRequest) ProtoMessage() {}

func (x *DeleteFuzzerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFuzzerConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteFuzzerConfigRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{142}
}

func (x *DeleteFuzzerConfigRequest) GetPageId() []string {
	if x != nil {
		return x.PageId
	}
	return nil
}

func (x *DeleteFuzzerConfigRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

type ExtractDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	// regexp mode -> regexp between 模式
	Mode string `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	// 根据前后缀提取
	PrefixRegexp string `protobuf:"bytes,3,opt,name=PrefixRegexp,proto3" json:"PrefixRegexp,omitempty"`
	SuffixRegexp string `protobuf:"bytes,4,opt,name=SuffixRegexp,proto3" json:"SuffixRegexp,omitempty"`
	// 根据一个正则提取
	MatchRegexp string `protobuf:"bytes,5,opt,name=MatchRegexp,proto3" json:"MatchRegexp,omitempty"`
	// Token 用来标注这个数据是谁的，一般可以用来处理提取的数据
	Token string `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	// 如果不再有数据了，设置这个 flag
	End bool `protobuf:"varint,7,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *ExtractDataRequest) Reset() {
	*x = ExtractDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataRequest) ProtoMessage() {}

func (x *ExtractDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataRequest.ProtoReflect.Descriptor instead.
func (*ExtractDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{143}
}

func (x *ExtractDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtractDataRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ExtractDataRequest) GetPrefixRegexp() string {
	if x != nil {
		return x.PrefixRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetSuffixRegexp() string {
	if x != nil {
		return x.SuffixRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetMatchRegexp() string {
	if x != nil {
		return x.MatchRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExtractDataRequest) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

type GenerateExtractRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 要提取规则的样例数据
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	// 选择的文本
	Selected []byte `protobuf:"bytes,2,opt,name=Selected,proto3" json:"Selected,omitempty"`
	// 选择前后缀的偏移量
	OffsetSize int64 `protobuf:"varint,3,opt,name=OffsetSize,proto3" json:"OffsetSize,omitempty"`
}

func (x *GenerateExtractRuleRequest) Reset() {
	*x = GenerateExtractRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateExtractRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateExtractRuleRequest) ProtoMessage() {}

func (x *GenerateExtractRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateExtractRuleRequest.ProtoReflect.Descriptor instead.
func (*GenerateExtractRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{144}
}

func (x *GenerateExtractRuleRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GenerateExtractRuleRequest) GetSelected() []byte {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *GenerateExtractRuleRequest) GetOffsetSize() int64 {
	if x != nil {
		return x.OffsetSize
	}
	return 0
}

type GenerateExtractRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixRegexp   string `protobuf:"bytes,1,opt,name=PrefixRegexp,proto3" json:"PrefixRegexp,omitempty"`
	SuffixRegexp   string `protobuf:"bytes,2,opt,name=SuffixRegexp,proto3" json:"SuffixRegexp,omitempty"`
	SelectedRegexp string `protobuf:"bytes,3,opt,name=SelectedRegexp,proto3" json:"SelectedRegexp,omitempty"`
}

func (x *GenerateExtractRuleResponse) Reset() {
	*x = GenerateExtractRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateExtractRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateExtractRuleResponse) ProtoMessage() {}

func (x *GenerateExtractRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateExtractRuleResponse.ProtoReflect.Descriptor instead.
func (*GenerateExtractRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{145}
}

func (x *GenerateExtractRuleResponse) GetPrefixRegexp() string {
	if x != nil {
		return x.PrefixRegexp
	}
	return ""
}

func (x *GenerateExtractRuleResponse) GetSuffixRegexp() string {
	if x != nil {
		return x.SuffixRegexp
	}
	return ""
}

func (x *GenerateExtractRuleResponse) GetSelectedRegexp() string {
	if x != nil {
		return x.SelectedRegexp
	}
	return ""
}

type GetMachineIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineID string `protobuf:"bytes,1,opt,name=MachineID,proto3" json:"MachineID,omitempty"`
}

func (x *GetMachineIDResponse) Reset() {
	*x = GetMachineIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineIDResponse) ProtoMessage() {}

func (x *GetMachineIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineIDResponse.ProtoReflect.Descriptor instead.
func (*GetMachineIDResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{146}
}

func (x *GetMachineIDResponse) GetMachineID() string {
	if x != nil {
		return x.MachineID
	}
	return ""
}

type QueryHTTPFuzzerResponseByTaskIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用来索引对应的请求
	TaskId           int64  `protobuf:"varint,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	FuzzRequestToken string `protobuf:"bytes,2,opt,name=FuzzRequestToken,proto3" json:"FuzzRequestToken,omitempty"`
	// 上一个请求的时间戳
	LastResponseTimestamp int64   `protobuf:"varint,3,opt,name=LastResponseTimestamp,proto3" json:"LastResponseTimestamp,omitempty"`
	Pagination            *Paging `protobuf:"bytes,4,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) Reset() {
	*x = QueryHTTPFuzzerResponseByTaskIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFuzzerResponseByTaskIdRequest) ProtoMessage() {}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFuzzerResponseByTaskIdRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFuzzerResponseByTaskIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{147}
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetFuzzRequestToken() string {
	if x != nil {
		return x.FuzzRequestToken
	}
	return ""
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetLastResponseTimestamp() int64 {
	if x != nil {
		return x.LastResponseTimestamp
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryHTTPFuzzerResponseByTaskIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging           `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*FuzzerResponse `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage  int64             `protobuf:"varint,4,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) Reset() {
	*x = QueryHTTPFuzzerResponseByTaskIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFuzzerResponseByTaskIdResponse) ProtoMessage() {}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFuzzerResponseByTaskIdResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFuzzerResponseByTaskIdResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{148}
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetData() []*FuzzerResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

type QueryWebsocketFlowByHTTPFlowWebsocketHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebsocketRequestHash string  `protobuf:"bytes,1,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
	Pagination           *Paging `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) Reset() {
	*x = QueryWebsocketFlowByHTTPFlowWebsocketHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoMessage() {}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWebsocketFlowByHTTPFlowWebsocketHashRequest.ProtoReflect.Descriptor instead.
func (*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{149}
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebsocketRequestHash string `protobuf:"bytes,1,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) Reset() {
	*x = DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoMessage() {}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{150}
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

type ClientWebsocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTLS          bool   `protobuf:"varint,1,opt,name=IsTLS,proto3" json:"IsTLS,omitempty"`
	UpgradeRequest []byte `protobuf:"bytes,2,opt,name=UpgradeRequest,proto3" json:"UpgradeRequest,omitempty"`
	// 要发送到服务器的请求
	ToServer []byte   `protobuf:"bytes,3,opt,name=ToServer,proto3" json:"ToServer,omitempty"`
	Encode   []string `protobuf:"bytes,4,rep,name=Encode,proto3" json:"Encode,omitempty"`
	// 是否允许 fuzz 标签渲染，然后发送
	AllowToFuzz         bool   `protobuf:"varint,5,opt,name=AllowToFuzz,proto3" json:"AllowToFuzz,omitempty"`
	TotalTimeoutSeconds int64  `protobuf:"varint,6,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	Proxy               string `protobuf:"bytes,7,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *ClientWebsocketRequest) Reset() {
	*x = ClientWebsocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebsocketRequest) ProtoMessage() {}

func (x *ClientWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebsocketRequest.ProtoReflect.Descriptor instead.
func (*ClientWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{151}
}

func (x *ClientWebsocketRequest) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

func (x *ClientWebsocketRequest) GetUpgradeRequest() []byte {
	if x != nil {
		return x.UpgradeRequest
	}
	return nil
}

func (x *ClientWebsocketRequest) GetToServer() []byte {
	if x != nil {
		return x.ToServer
	}
	return nil
}

func (x *ClientWebsocketRequest) GetEncode() []string {
	if x != nil {
		return x.Encode
	}
	return nil
}

func (x *ClientWebsocketRequest) GetAllowToFuzz() bool {
	if x != nil {
		return x.AllowToFuzz
	}
	return false
}

func (x *ClientWebsocketRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ClientWebsocketRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type ClientWebsocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 切换协议是否成功
	SwitchProtocolSucceeded bool `protobuf:"varint,2,opt,name=SwitchProtocolSucceeded,proto3" json:"SwitchProtocolSucceeded,omitempty"`
	// 是 Websocket 数据帧吗？
	IsDataFrame bool `protobuf:"varint,1,opt,name=IsDataFrame,proto3" json:"IsDataFrame,omitempty"`
	// 服务器端返回还是？
	FromServer bool `protobuf:"varint,4,opt,name=FromServer,proto3" json:"FromServer,omitempty"`
	// 编码是啥样的？
	GuessEncode []string `protobuf:"bytes,5,rep,name=GuessEncode,proto3" json:"GuessEncode,omitempty"`
	// 其他状态，以及出现问题的原因
	StatusVerbose string `protobuf:"bytes,6,opt,name=StatusVerbose,proto3" json:"StatusVerbose,omitempty"`
	ReasonVerbose string `protobuf:"bytes,7,opt,name=ReasonVerbose,proto3" json:"ReasonVerbose,omitempty"`
	// DataLength
	DataLength     int64  `protobuf:"varint,8,opt,name=DataLength,proto3" json:"DataLength,omitempty"`
	Data           []byte `protobuf:"bytes,9,opt,name=Data,proto3" json:"Data,omitempty"`
	IsJson         bool   `protobuf:"varint,10,opt,name=IsJson,proto3" json:"IsJson,omitempty"`
	IsProtobuf     bool   `protobuf:"varint,11,opt,name=IsProtobuf,proto3" json:"IsProtobuf,omitempty"`
	DataFrameIndex int64  `protobuf:"varint,12,opt,name=DataFrameIndex,proto3" json:"DataFrameIndex,omitempty"`
	WebsocketHash  string `protobuf:"bytes,13,opt,name=WebsocketHash,proto3" json:"WebsocketHash,omitempty"`
	// 设置大小
	DataSizeVerbose string `protobuf:"bytes,14,opt,name=DataSizeVerbose,proto3" json:"DataSizeVerbose,omitempty"`
	DataVerbose     string `protobuf:"bytes,15,opt,name=DataVerbose,proto3" json:"DataVerbose,omitempty"`
	// 升级
	IsUpgradeResponse bool   `protobuf:"varint,16,opt,name=IsUpgradeResponse,proto3" json:"IsUpgradeResponse,omitempty"`
	UpgradeResponse   []byte `protobuf:"bytes,17,opt,name=UpgradeResponse,proto3" json:"UpgradeResponse,omitempty"`
}

func (x *ClientWebsocketResponse) Reset() {
	*x = ClientWebsocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebsocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebsocketResponse) ProtoMessage() {}

func (x *ClientWebsocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebsocketResponse.ProtoReflect.Descriptor instead.
func (*ClientWebsocketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{152}
}

func (x *ClientWebsocketResponse) GetSwitchProtocolSucceeded() bool {
	if x != nil {
		return x.SwitchProtocolSucceeded
	}
	return false
}

func (x *ClientWebsocketResponse) GetIsDataFrame() bool {
	if x != nil {
		return x.IsDataFrame
	}
	return false
}

func (x *ClientWebsocketResponse) GetFromServer() bool {
	if x != nil {
		return x.FromServer
	}
	return false
}

func (x *ClientWebsocketResponse) GetGuessEncode() []string {
	if x != nil {
		return x.GuessEncode
	}
	return nil
}

func (x *ClientWebsocketResponse) GetStatusVerbose() string {
	if x != nil {
		return x.StatusVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetReasonVerbose() string {
	if x != nil {
		return x.ReasonVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataLength() int64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *ClientWebsocketResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClientWebsocketResponse) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *ClientWebsocketResponse) GetIsProtobuf() bool {
	if x != nil {
		return x.IsProtobuf
	}
	return false
}

func (x *ClientWebsocketResponse) GetDataFrameIndex() int64 {
	if x != nil {
		return x.DataFrameIndex
	}
	return 0
}

func (x *ClientWebsocketResponse) GetWebsocketHash() string {
	if x != nil {
		return x.WebsocketHash
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataSizeVerbose() string {
	if x != nil {
		return x.DataSizeVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataVerbose() string {
	if x != nil {
		return x.DataVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetIsUpgradeResponse() bool {
	if x != nil {
		return x.IsUpgradeResponse
	}
	return false
}

func (x *ClientWebsocketResponse) GetUpgradeResponse() []byte {
	if x != nil {
		return x.UpgradeResponse
	}
	return nil
}

type DefaultProxyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *DefaultProxyResult) Reset() {
	*x = DefaultProxyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultProxyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultProxyResult) ProtoMessage() {}

func (x *DefaultProxyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultProxyResult.ProtoReflect.Descriptor instead.
func (*DefaultProxyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{153}
}

func (x *DefaultProxyResult) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type ExecPacketScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 选择 HTTPFlow 进行扫描
	HTTPFlow    []int64 `protobuf:"varint,1,rep,packed,name=HTTPFlow,proto3" json:"HTTPFlow,omitempty"`
	HTTPRequest []byte  `protobuf:"bytes,2,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	HTTPS       bool    `protobuf:"varint,3,opt,name=HTTPS,proto3" json:"HTTPS,omitempty"`
	// 允许数据包的 Fuzz 打开
	AllowFuzzTag bool `protobuf:"varint,5,opt,name=AllowFuzzTag,proto3" json:"AllowFuzzTag,omitempty"`
	// 扫描进程总超时
	TotalTimeoutSeconds int64 `protobuf:"varint,6,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	// 默认发包的 Timeout
	Timeout int64 `protobuf:"varint,7,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// 并发
	PluginConcurrent int64 `protobuf:"varint,8,opt,name=PluginConcurrent,proto3" json:"PluginConcurrent,omitempty"`
	PacketConcurrent int64 `protobuf:"varint,9,opt,name=PacketConcurrent,proto3" json:"PacketConcurrent,omitempty"`
	// 插件列表
	PluginList []string `protobuf:"bytes,10,rep,name=PluginList,proto3" json:"PluginList,omitempty"`
	// 设置代理
	Proxy string `protobuf:"bytes,11,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *ExecPacketScanRequest) Reset() {
	*x = ExecPacketScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecPacketScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecPacketScanRequest) ProtoMessage() {}

func (x *ExecPacketScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecPacketScanRequest.ProtoReflect.Descriptor instead.
func (*ExecPacketScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{154}
}

func (x *ExecPacketScanRequest) GetHTTPFlow() []int64 {
	if x != nil {
		return x.HTTPFlow
	}
	return nil
}

func (x *ExecPacketScanRequest) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

func (x *ExecPacketScanRequest) GetHTTPS() bool {
	if x != nil {
		return x.HTTPS
	}
	return false
}

func (x *ExecPacketScanRequest) GetAllowFuzzTag() bool {
	if x != nil {
		return x.AllowFuzzTag
	}
	return false
}

func (x *ExecPacketScanRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ExecPacketScanRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPluginConcurrent() int64 {
	if x != nil {
		return x.PluginConcurrent
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPacketConcurrent() int64 {
	if x != nil {
		return x.PacketConcurrent
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPluginList() []string {
	if x != nil {
		return x.PluginList
	}
	return nil
}

func (x *ExecPacketScanRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	StartLine   int64  `protobuf:"varint,2,opt,name=StartLine,proto3" json:"StartLine,omitempty"`
	StartColumn int64  `protobuf:"varint,3,opt,name=StartColumn,proto3" json:"StartColumn,omitempty"`
	EndLine     int64  `protobuf:"varint,4,opt,name=EndLine,proto3" json:"EndLine,omitempty"`
	EndColumn   int64  `protobuf:"varint,5,opt,name=EndColumn,proto3" json:"EndColumn,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{155}
}

func (x *Range) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Range) GetStartLine() int64 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Range) GetStartColumn() int64 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *Range) GetEndLine() int64 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *Range) GetEndColumn() int64 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type YaklangInspectInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptType string `protobuf:"bytes,1,opt,name=YakScriptType,proto3" json:"YakScriptType,omitempty"`
	YakScriptCode string `protobuf:"bytes,2,opt,name=YakScriptCode,proto3" json:"YakScriptCode,omitempty"`
	Range         *Range `protobuf:"bytes,3,opt,name=Range,proto3" json:"Range,omitempty"`
}

func (x *YaklangInspectInformationRequest) Reset() {
	*x = YaklangInspectInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangInspectInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangInspectInformationRequest) ProtoMessage() {}

func (x *YaklangInspectInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangInspectInformationRequest.ProtoReflect.Descriptor instead.
func (*YaklangInspectInformationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{156}
}

func (x *YaklangInspectInformationRequest) GetYakScriptType() string {
	if x != nil {
		return x.YakScriptType
	}
	return ""
}

func (x *YaklangInspectInformationRequest) GetYakScriptCode() string {
	if x != nil {
		return x.YakScriptCode
	}
	return ""
}

func (x *YaklangInspectInformationRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type YaklangLanguageSuggestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InspectType string `protobuf:"bytes,1,opt,name=InspectType,proto3" json:"InspectType,omitempty"` // completion(补全) / hover(提示) / signature(签名) / definition(找定义) / reference(找引用)
	// {
	// from source code : support all InspectType
	YakScriptType string `protobuf:"bytes,2,opt,name=YakScriptType,proto3" json:"YakScriptType,omitempty"`
	YakScriptCode string `protobuf:"bytes,3,opt,name=YakScriptCode,proto3" json:"YakScriptCode,omitempty"` // }
	Range         *Range `protobuf:"bytes,4,opt,name=Range,proto3" json:"Range,omitempty"`                 // selected range
	ModelID       string `protobuf:"bytes,5,opt,name=ModelID,proto3" json:"ModelID,omitempty"`             // monaco model id
	// {
	// from database : support getReference
	// if set this progranName will use this from database
	ProgramName string `protobuf:"bytes,6,opt,name=ProgramName,proto3" json:"ProgramName,omitempty"`
	FileName    string `protobuf:"bytes,7,opt,name=FileName,proto3" json:"FileName,omitempty"` // }
}

func (x *YaklangLanguageSuggestionRequest) Reset() {
	*x = YaklangLanguageSuggestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangLanguageSuggestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangLanguageSuggestionRequest) ProtoMessage() {}

func (x *YaklangLanguageSuggestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangLanguageSuggestionRequest.ProtoReflect.Descriptor instead.
func (*YaklangLanguageSuggestionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{157}
}

func (x *YaklangLanguageSuggestionRequest) GetInspectType() string {
	if x != nil {
		return x.InspectType
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetYakScriptType() string {
	if x != nil {
		return x.YakScriptType
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetYakScriptCode() string {
	if x != nil {
		return x.YakScriptCode
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *YaklangLanguageSuggestionRequest) GetModelID() string {
	if x != nil {
		return x.ModelID
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *YaklangLanguageSuggestionRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type YaklangInformationKV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string                  `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value  []byte                  `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Extern []*YaklangInformationKV `protobuf:"bytes,3,rep,name=Extern,proto3" json:"Extern,omitempty"`
}

func (x *YaklangInformationKV) Reset() {
	*x = YaklangInformationKV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangInformationKV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangInformationKV) ProtoMessage() {}

func (x *YaklangInformationKV) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangInformationKV.ProtoReflect.Descriptor instead.
func (*YaklangInformationKV) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{158}
}

func (x *YaklangInformationKV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YaklangInformationKV) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *YaklangInformationKV) GetExtern() []*YaklangInformationKV {
	if x != nil {
		return x.Extern
	}
	return nil
}

type YaklangInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Data []*YaklangInformationKV `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *YaklangInformation) Reset() {
	*x = YaklangInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangInformation) ProtoMessage() {}

func (x *YaklangInformation) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangInformation.ProtoReflect.Descriptor instead.
func (*YaklangInformation) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{159}
}

func (x *YaklangInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *YaklangInformation) GetData() []*YaklangInformationKV {
	if x != nil {
		return x.Data
	}
	return nil
}

type YaklangLanguageSuggestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuggestionMessage []*SuggestionDescription `protobuf:"bytes,1,rep,name=SuggestionMessage,proto3" json:"SuggestionMessage,omitempty"`
}

func (x *YaklangLanguageSuggestionResponse) Reset() {
	*x = YaklangLanguageSuggestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangLanguageSuggestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangLanguageSuggestionResponse) ProtoMessage() {}

func (x *YaklangLanguageSuggestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangLanguageSuggestionResponse.ProtoReflect.Descriptor instead.
func (*YaklangLanguageSuggestionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{160}
}

func (x *YaklangLanguageSuggestionResponse) GetSuggestionMessage() []*SuggestionDescription {
	if x != nil {
		return x.SuggestionMessage
	}
	return nil
}

type YaklangLanguageFindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URI    string   `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
	Ranges []*Range `protobuf:"bytes,2,rep,name=Ranges,proto3" json:"Ranges,omitempty"`
}

func (x *YaklangLanguageFindResponse) Reset() {
	*x = YaklangLanguageFindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangLanguageFindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangLanguageFindResponse) ProtoMessage() {}

func (x *YaklangLanguageFindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangLanguageFindResponse.ProtoReflect.Descriptor instead.
func (*YaklangLanguageFindResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{161}
}

func (x *YaklangLanguageFindResponse) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *YaklangLanguageFindResponse) GetRanges() []*Range {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type YaklangInspectInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Information  []*YaklangInformation `protobuf:"bytes,1,rep,name=Information,proto3" json:"Information,omitempty"`
	CliParameter []*YakScriptParam     `protobuf:"bytes,2,rep,name=CliParameter,proto3" json:"CliParameter,omitempty"`
	RiskInfo     []*YakRiskInfo        `protobuf:"bytes,3,rep,name=RiskInfo,proto3" json:"RiskInfo,omitempty"`
	UIInfo       []*YakUIInfo          `protobuf:"bytes,4,rep,name=UIInfo,proto3" json:"UIInfo,omitempty"`
	Tags         []string              `protobuf:"bytes,5,rep,name=Tags,proto3" json:"Tags,omitempty"`
	PluginEnvKey []string              `protobuf:"bytes,6,rep,name=PluginEnvKey,proto3" json:"PluginEnvKey,omitempty"`
}

func (x *YaklangInspectInformationResponse) Reset() {
	*x = YaklangInspectInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangInspectInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangInspectInformationResponse) ProtoMessage() {}

func (x *YaklangInspectInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangInspectInformationResponse.ProtoReflect.Descriptor instead.
func (*YaklangInspectInformationResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{162}
}

func (x *YaklangInspectInformationResponse) GetInformation() []*YaklangInformation {
	if x != nil {
		return x.Information
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetCliParameter() []*YakScriptParam {
	if x != nil {
		return x.CliParameter
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetRiskInfo() []*YakRiskInfo {
	if x != nil {
		return x.RiskInfo
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetUIInfo() []*YakUIInfo {
	if x != nil {
		return x.UIInfo
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *YaklangInspectInformationResponse) GetPluginEnvKey() []string {
	if x != nil {
		return x.PluginEnvKey
	}
	return nil
}

type YakUIInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ            string   `protobuf:"bytes,1,opt,name=Typ,proto3" json:"Typ,omitempty"`
	Effected       []string `protobuf:"bytes,2,rep,name=Effected,proto3" json:"Effected,omitempty"`
	WhenExpression string   `protobuf:"bytes,3,opt,name=WhenExpression,proto3" json:"WhenExpression,omitempty"`
}

func (x *YakUIInfo) Reset() {
	*x = YakUIInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakUIInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakUIInfo) ProtoMessage() {}

func (x *YakUIInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakUIInfo.ProtoReflect.Descriptor instead.
func (*YakUIInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{163}
}

func (x *YakUIInfo) GetTyp() string {
	if x != nil {
		return x.Typ
	}
	return ""
}

func (x *YakUIInfo) GetEffected() []string {
	if x != nil {
		return x.Effected
	}
	return nil
}

func (x *YakUIInfo) GetWhenExpression() string {
	if x != nil {
		return x.WhenExpression
	}
	return ""
}

type YakRiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level       string `protobuf:"bytes,1,opt,name=Level,proto3" json:"Level,omitempty"`
	TypeVerbose string `protobuf:"bytes,2,opt,name=TypeVerbose,proto3" json:"TypeVerbose,omitempty"`
	CVE         string `protobuf:"bytes,3,opt,name=CVE,proto3" json:"CVE,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Solution    string `protobuf:"bytes,5,opt,name=Solution,proto3" json:"Solution,omitempty"`
}

func (x *YakRiskInfo) Reset() {
	*x = YakRiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakRiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakRiskInfo) ProtoMessage() {}

func (x *YakRiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakRiskInfo.ProtoReflect.Descriptor instead.
func (*YakRiskInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{164}
}

func (x *YakRiskInfo) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *YakRiskInfo) GetTypeVerbose() string {
	if x != nil {
		return x.TypeVerbose
	}
	return ""
}

func (x *YakRiskInfo) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *YakRiskInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *YakRiskInfo) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

type YaklangGetCliCodeFromDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	NeedHandle bool   `protobuf:"varint,2,opt,name=NeedHandle,proto3" json:"NeedHandle,omitempty"`
}

func (x *YaklangGetCliCodeFromDatabaseResponse) Reset() {
	*x = YaklangGetCliCodeFromDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangGetCliCodeFromDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangGetCliCodeFromDatabaseResponse) ProtoMessage() {}

func (x *YaklangGetCliCodeFromDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangGetCliCodeFromDatabaseResponse.ProtoReflect.Descriptor instead.
func (*YaklangGetCliCodeFromDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{165}
}

func (x *YaklangGetCliCodeFromDatabaseResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *YaklangGetCliCodeFromDatabaseResponse) GetNeedHandle() bool {
	if x != nil {
		return x.NeedHandle
	}
	return false
}

type YaklangGetCliCodeFromDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName string `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
}

func (x *YaklangGetCliCodeFromDatabaseRequest) Reset() {
	*x = YaklangGetCliCodeFromDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangGetCliCodeFromDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangGetCliCodeFromDatabaseRequest) ProtoMessage() {}

func (x *YaklangGetCliCodeFromDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangGetCliCodeFromDatabaseRequest.ProtoReflect.Descriptor instead.
func (*YaklangGetCliCodeFromDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{166}
}

func (x *YaklangGetCliCodeFromDatabaseRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

type StaticAnalyzeErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       []byte `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	PluginType string `protobuf:"bytes,2,opt,name=PluginType,proto3" json:"PluginType,omitempty"` // "yak" "mitm" "port-scan" "codec" "syntaxflow"
}

func (x *StaticAnalyzeErrorRequest) Reset() {
	*x = StaticAnalyzeErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticAnalyzeErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalyzeErrorRequest) ProtoMessage() {}

func (x *StaticAnalyzeErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalyzeErrorRequest.ProtoReflect.Descriptor instead.
func (*StaticAnalyzeErrorRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{167}
}

func (x *StaticAnalyzeErrorRequest) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *StaticAnalyzeErrorRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

type YaklangCompileAndFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *YaklangCompileAndFormatRequest) Reset() {
	*x = YaklangCompileAndFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangCompileAndFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangCompileAndFormatRequest) ProtoMessage() {}

func (x *YaklangCompileAndFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangCompileAndFormatRequest.ProtoReflect.Descriptor instead.
func (*YaklangCompileAndFormatRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{168}
}

func (x *YaklangCompileAndFormatRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type YaklangCompileAndFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string                      `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Errors []*StaticAnalyzeErrorResult `protobuf:"bytes,2,rep,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *YaklangCompileAndFormatResponse) Reset() {
	*x = YaklangCompileAndFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangCompileAndFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangCompileAndFormatResponse) ProtoMessage() {}

func (x *YaklangCompileAndFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangCompileAndFormatResponse.ProtoReflect.Descriptor instead.
func (*YaklangCompileAndFormatResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{169}
}

func (x *YaklangCompileAndFormatResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *YaklangCompileAndFormatResponse) GetErrors() []*StaticAnalyzeErrorResult {
	if x != nil {
		return x.Errors
	}
	return nil
}

type StaticAnalyzeErrorResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message         []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	StartLineNumber int64  `protobuf:"varint,2,opt,name=StartLineNumber,proto3" json:"StartLineNumber,omitempty"`
	EndLineNumber   int64  `protobuf:"varint,3,opt,name=EndLineNumber,proto3" json:"EndLineNumber,omitempty"`
	StartColumn     int64  `protobuf:"varint,4,opt,name=StartColumn,proto3" json:"StartColumn,omitempty"`
	EndColumn       int64  `protobuf:"varint,5,opt,name=EndColumn,proto3" json:"EndColumn,omitempty"`
	RawMessage      []byte `protobuf:"bytes,6,opt,name=RawMessage,proto3" json:"RawMessage,omitempty"`
	Severity        string `protobuf:"bytes,7,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Tag             string `protobuf:"bytes,8,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *StaticAnalyzeErrorResult) Reset() {
	*x = StaticAnalyzeErrorResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticAnalyzeErrorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalyzeErrorResult) ProtoMessage() {}

func (x *StaticAnalyzeErrorResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalyzeErrorResult.ProtoReflect.Descriptor instead.
func (*StaticAnalyzeErrorResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{170}
}

func (x *StaticAnalyzeErrorResult) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *StaticAnalyzeErrorResult) GetStartLineNumber() int64 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetEndLineNumber() int64 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetStartColumn() int64 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetEndColumn() int64 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetRawMessage() []byte {
	if x != nil {
		return x.RawMessage
	}
	return nil
}

func (x *StaticAnalyzeErrorResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *StaticAnalyzeErrorResult) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type StaticAnalyzeErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*StaticAnalyzeErrorResult `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (x *StaticAnalyzeErrorResponse) Reset() {
	*x = StaticAnalyzeErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticAnalyzeErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalyzeErrorResponse) ProtoMessage() {}

func (x *StaticAnalyzeErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalyzeErrorResponse.ProtoReflect.Descriptor instead.
func (*StaticAnalyzeErrorResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{171}
}

func (x *StaticAnalyzeErrorResponse) GetResult() []*StaticAnalyzeErrorResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type SavePayloadProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress            float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`                     // 进度
	HandledBytes        int64   `protobuf:"varint,2,opt,name=HandledBytes,proto3" json:"HandledBytes,omitempty"`              // old
	HandledBytesVerbose string  `protobuf:"bytes,3,opt,name=HandledBytesVerbose,proto3" json:"HandledBytesVerbose,omitempty"` // old
	TotalBytes          int64   `protobuf:"varint,4,opt,name=TotalBytes,proto3" json:"TotalBytes,omitempty"`                  // old
	TotalBytesVerbose   string  `protobuf:"bytes,5,opt,name=TotalBytesVerbose,proto3" json:"TotalBytesVerbose,omitempty"`     // old
	CostDuration        float64 `protobuf:"fixed64,6,opt,name=CostDuration,proto3" json:"CostDuration,omitempty"`             // old
	CostDurationVerbose string  `protobuf:"bytes,7,opt,name=CostDurationVerbose,proto3" json:"CostDurationVerbose,omitempty"` // 耗时
	Speed               string  `protobuf:"bytes,8,opt,name=Speed,proto3" json:"Speed,omitempty"`                             // 速度
	RestDurationVerbose string  `protobuf:"bytes,9,opt,name=RestDurationVerbose,proto3" json:"RestDurationVerbose,omitempty"` // 剩余时间
	Message             string  `protobuf:"bytes,10,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *SavePayloadProgress) Reset() {
	*x = SavePayloadProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePayloadProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePayloadProgress) ProtoMessage() {}

func (x *SavePayloadProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePayloadProgress.ProtoReflect.Descriptor instead.
func (*SavePayloadProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{172}
}

func (x *SavePayloadProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SavePayloadProgress) GetHandledBytes() int64 {
	if x != nil {
		return x.HandledBytes
	}
	return 0
}

func (x *SavePayloadProgress) GetHandledBytesVerbose() string {
	if x != nil {
		return x.HandledBytesVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *SavePayloadProgress) GetTotalBytesVerbose() string {
	if x != nil {
		return x.TotalBytesVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetCostDuration() float64 {
	if x != nil {
		return x.CostDuration
	}
	return 0
}

func (x *SavePayloadProgress) GetCostDurationVerbose() string {
	if x != nil {
		return x.CostDurationVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetSpeed() string {
	if x != nil {
		return x.Speed
	}
	return ""
}

func (x *SavePayloadProgress) GetRestDurationVerbose() string {
	if x != nil {
		return x.RestDurationVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeletePluginByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OnlineBaseUrl string `protobuf:"bytes,2,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
}

func (x *DeletePluginByUserIDRequest) Reset() {
	*x = DeletePluginByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePluginByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePluginByUserIDRequest) ProtoMessage() {}

func (x *DeletePluginByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePluginByUserIDRequest.ProtoReflect.Descriptor instead.
func (*DeletePluginByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{173}
}

func (x *DeletePluginByUserIDRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *DeletePluginByUserIDRequest) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

type DeleteLocalPluginsByWhereRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords string   `protobuf:"bytes,1,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Type     string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	UserId   int64    `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName string   `protobuf:"bytes,4,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Ids      []int64  `protobuf:"varint,5,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Tags     string   `protobuf:"bytes,6,opt,name=Tags,proto3" json:"Tags,omitempty"`
	Groups   []string `protobuf:"bytes,7,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *DeleteLocalPluginsByWhereRequest) Reset() {
	*x = DeleteLocalPluginsByWhereRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLocalPluginsByWhereRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLocalPluginsByWhereRequest) ProtoMessage() {}

func (x *DeleteLocalPluginsByWhereRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLocalPluginsByWhereRequest.ProtoReflect.Descriptor instead.
func (*DeleteLocalPluginsByWhereRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{174}
}

func (x *DeleteLocalPluginsByWhereRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteLocalPluginsByWhereRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteLocalPluginsByWhereRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type DownloadOnlinePluginProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 进度
	Progress float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Log      string  `protobuf:"bytes,2,opt,name=Log,proto3" json:"Log,omitempty"`
}

func (x *DownloadOnlinePluginProgress) Reset() {
	*x = DownloadOnlinePluginProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginProgress) ProtoMessage() {}

func (x *DownloadOnlinePluginProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginProgress.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{175}
}

func (x *DownloadOnlinePluginProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DownloadOnlinePluginProgress) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type DownloadOnlinePluginByTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	BindMe     bool   `protobuf:"varint,2,opt,name=BindMe,proto3" json:"BindMe,omitempty"`
	Keywords   string `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	PluginType string `protobuf:"bytes,4,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
	Status     string `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	IsPrivate  string `protobuf:"bytes,6,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	Tags       string `protobuf:"bytes,7,opt,name=Tags,proto3" json:"Tags,omitempty"`
	UserName   string `protobuf:"bytes,8,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserId     int64  `protobuf:"varint,9,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TimeSearch string `protobuf:"bytes,10,opt,name=TimeSearch,proto3" json:"TimeSearch,omitempty"`
	Group      string `protobuf:"bytes,11,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *DownloadOnlinePluginByTokenRequest) Reset() {
	*x = DownloadOnlinePluginByTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByTokenRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByTokenRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByTokenRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{176}
}

func (x *DownloadOnlinePluginByTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetBindMe() bool {
	if x != nil {
		return x.BindMe
	}
	return false
}

func (x *DownloadOnlinePluginByTokenRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetIsPrivate() string {
	if x != nil {
		return x.IsPrivate
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DownloadOnlinePluginByTokenRequest) GetTimeSearch() string {
	if x != nil {
		return x.TimeSearch
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type DownloadOnlinePluginByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineID int64  `protobuf:"varint,1,opt,name=OnlineID,proto3" json:"OnlineID,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	UUID     string `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *DownloadOnlinePluginByIdRequest) Reset() {
	*x = DownloadOnlinePluginByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByIdRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByIdRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{177}
}

func (x *DownloadOnlinePluginByIdRequest) GetOnlineID() int64 {
	if x != nil {
		return x.OnlineID
	}
	return 0
}

func (x *DownloadOnlinePluginByIdRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginByIdRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type DownloadOnlinePluginByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineIDs []int64  `protobuf:"varint,1,rep,packed,name=OnlineIDs,proto3" json:"OnlineIDs,omitempty"`
	Token     string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	UUID      []string `protobuf:"bytes,3,rep,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *DownloadOnlinePluginByIdsRequest) Reset() {
	*x = DownloadOnlinePluginByIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByIdsRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByIdsRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByIdsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{178}
}

func (x *DownloadOnlinePluginByIdsRequest) GetOnlineIDs() []int64 {
	if x != nil {
		return x.OnlineIDs
	}
	return nil
}

func (x *DownloadOnlinePluginByIdsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginByIdsRequest) GetUUID() []string {
	if x != nil {
		return x.UUID
	}
	return nil
}

type DownloadOnlinePluginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	IsPrivate  []bool   `protobuf:"varint,2,rep,packed,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	Keywords   string   `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	PluginType []string `protobuf:"bytes,4,rep,name=PluginType,proto3" json:"PluginType,omitempty"`
	Tags       []string `protobuf:"bytes,5,rep,name=Tags,proto3" json:"Tags,omitempty"`
	UserName   string   `protobuf:"bytes,6,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserId     int64    `protobuf:"varint,7,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TimeSearch string   `protobuf:"bytes,8,opt,name=TimeSearch,proto3" json:"TimeSearch,omitempty"`
	Group      []string `protobuf:"bytes,9,rep,name=Group,proto3" json:"Group,omitempty"`
	ListType   string   `protobuf:"bytes,10,opt,name=ListType,proto3" json:"ListType,omitempty"`
	Status     []int64  `protobuf:"varint,11,rep,packed,name=Status,proto3" json:"Status,omitempty"`
	UUID       []string `protobuf:"bytes,12,rep,name=UUID,proto3" json:"UUID,omitempty"`
	ScriptName []string `protobuf:"bytes,13,rep,name=ScriptName,proto3" json:"ScriptName,omitempty"`
}

func (x *DownloadOnlinePluginsRequest) Reset() {
	*x = DownloadOnlinePluginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginsRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginsRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{179}
}

func (x *DownloadOnlinePluginsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetIsPrivate() []bool {
	if x != nil {
		return x.IsPrivate
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetPluginType() []string {
	if x != nil {
		return x.PluginType
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DownloadOnlinePluginsRequest) GetTimeSearch() string {
	if x != nil {
		return x.TimeSearch
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetListType() string {
	if x != nil {
		return x.ListType
	}
	return ""
}

func (x *DownloadOnlinePluginsRequest) GetStatus() []int64 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetUUID() []string {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *DownloadOnlinePluginsRequest) GetScriptName() []string {
	if x != nil {
		return x.ScriptName
	}
	return nil
}

type DownloadOnlinePluginByScriptNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptNames []string `protobuf:"bytes,1,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	Token       string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *DownloadOnlinePluginByScriptNamesRequest) Reset() {
	*x = DownloadOnlinePluginByScriptNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByScriptNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByScriptNamesRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByScriptNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByScriptNamesRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByScriptNamesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{180}
}

func (x *DownloadOnlinePluginByScriptNamesRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *DownloadOnlinePluginByScriptNamesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DownloadOnlinePluginByScriptNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DownloadOnlinePluginByScriptName `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *DownloadOnlinePluginByScriptNamesResponse) Reset() {
	*x = DownloadOnlinePluginByScriptNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByScriptNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByScriptNamesResponse) ProtoMessage() {}

func (x *DownloadOnlinePluginByScriptNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByScriptNamesResponse.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByScriptNamesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{181}
}

func (x *DownloadOnlinePluginByScriptNamesResponse) GetData() []*DownloadOnlinePluginByScriptName {
	if x != nil {
		return x.Data
	}
	return nil
}

type DownloadOnlinePluginByScriptName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName string `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Id         int64  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	HeadImg    string `protobuf:"bytes,3,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
}

func (x *DownloadOnlinePluginByScriptName) Reset() {
	*x = DownloadOnlinePluginByScriptName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByScriptName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByScriptName) ProtoMessage() {}

func (x *DownloadOnlinePluginByScriptName) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByScriptName.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByScriptName) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{182}
}

func (x *DownloadOnlinePluginByScriptName) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *DownloadOnlinePluginByScriptName) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DownloadOnlinePluginByScriptName) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

type DownloadOnlinePluginByUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID  string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *DownloadOnlinePluginByUUIDRequest) Reset() {
	*x = DownloadOnlinePluginByUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByUUIDRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByUUIDRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{183}
}

func (x *DownloadOnlinePluginByUUIDRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DownloadOnlinePluginByUUIDRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type OnlineProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUrl   string `protobuf:"bytes,1,opt,name=BaseUrl,proto3" json:"BaseUrl,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Proxy     string `protobuf:"bytes,3,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	IsCompany bool   `protobuf:"varint,4,opt,name=IsCompany,proto3" json:"IsCompany,omitempty"`
}

func (x *OnlineProfile) Reset() {
	*x = OnlineProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineProfile) ProtoMessage() {}

func (x *OnlineProfile) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineProfile.ProtoReflect.Descriptor instead.
func (*OnlineProfile) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{184}
}

func (x *OnlineProfile) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *OnlineProfile) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OnlineProfile) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *OnlineProfile) GetIsCompany() bool {
	if x != nil {
		return x.IsCompany
	}
	return false
}

type SetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	TTL   int64  `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
}

func (x *SetKeyRequest) Reset() {
	*x = SetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyRequest) ProtoMessage() {}

func (x *SetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyRequest.ProtoReflect.Descriptor instead.
func (*SetKeyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{185}
}

func (x *SetKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetKeyRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SetKeyRequest) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

type GetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{186}
}

func (x *GetKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetKeyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *GetKeyResult) Reset() {
	*x = GetKeyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyResult) ProtoMessage() {}

func (x *GetKeyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyResult.ProtoReflect.Descriptor instead.
func (*GetKeyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{187}
}

func (x *GetKeyResult) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GeneralStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	ExpiredAt  int64  `protobuf:"varint,3,opt,name=ExpiredAt,proto3" json:"ExpiredAt,omitempty"`
	ProcessEnv bool   `protobuf:"varint,4,opt,name=ProcessEnv,proto3" json:"ProcessEnv,omitempty"`
	Verbose    string `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Group      string `protobuf:"bytes,6,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *GeneralStorage) Reset() {
	*x = GeneralStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralStorage) ProtoMessage() {}

func (x *GeneralStorage) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralStorage.ProtoReflect.Descriptor instead.
func (*GeneralStorage) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{188}
}

func (x *GeneralStorage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GeneralStorage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GeneralStorage) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *GeneralStorage) GetProcessEnv() bool {
	if x != nil {
		return x.ProcessEnv
	}
	return false
}

func (x *GeneralStorage) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *GeneralStorage) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type GetProcessEnvKeyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GeneralStorage `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *GetProcessEnvKeyResult) Reset() {
	*x = GetProcessEnvKeyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessEnvKeyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessEnvKeyResult) ProtoMessage() {}

func (x *GetProcessEnvKeyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessEnvKeyResult.ProtoReflect.Descriptor instead.
func (*GetProcessEnvKeyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{189}
}

func (x *GetProcessEnvKeyResult) GetResults() []*GeneralStorage {
	if x != nil {
		return x.Results
	}
	return nil
}

type SetSystemProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpProxy string `protobuf:"bytes,1,opt,name=HttpProxy,proto3" json:"HttpProxy,omitempty"`
	Enable    bool   `protobuf:"varint,2,opt,name=Enable,proto3" json:"Enable,omitempty"`
}

func (x *SetSystemProxyRequest) Reset() {
	*x = SetSystemProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSystemProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemProxyRequest) ProtoMessage() {}

func (x *SetSystemProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemProxyRequest.ProtoReflect.Descriptor instead.
func (*SetSystemProxyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{190}
}

func (x *SetSystemProxyRequest) GetHttpProxy() string {
	if x != nil {
		return x.HttpProxy
	}
	return ""
}

func (x *SetSystemProxyRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type GetSystemProxyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentProxy string `protobuf:"bytes,1,opt,name=CurrentProxy,proto3" json:"CurrentProxy,omitempty"`
	Enable       bool   `protobuf:"varint,2,opt,name=Enable,proto3" json:"Enable,omitempty"`
}

func (x *GetSystemProxyResult) Reset() {
	*x = GetSystemProxyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemProxyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemProxyResult) ProtoMessage() {}

func (x *GetSystemProxyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemProxyResult.ProtoReflect.Descriptor instead.
func (*GetSystemProxyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{191}
}

func (x *GetSystemProxyResult) GetCurrentProxy() string {
	if x != nil {
		return x.CurrentProxy
	}
	return ""
}

func (x *GetSystemProxyResult) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

// --- Deprecated interface--
type GetExecBatchYakScriptUnfinishedTaskByUidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) Reset() {
	*x = GetExecBatchYakScriptUnfinishedTaskByUidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecBatchYakScriptUnfinishedTaskByUidRequest) ProtoMessage() {}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecBatchYakScriptUnfinishedTaskByUidRequest.ProtoReflect.Descriptor instead.
func (*GetExecBatchYakScriptUnfinishedTaskByUidRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{192}
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type RecoverExecBatchYakScriptUnfinishedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) Reset() {
	*x = RecoverExecBatchYakScriptUnfinishedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverExecBatchYakScriptUnfinishedTaskRequest) ProtoMessage() {}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverExecBatchYakScriptUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*RecoverExecBatchYakScriptUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{193}
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type ExecBatchYakScriptUnfinishedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent              float64 `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64   `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Uid                  string  `protobuf:"bytes,3,opt,name=Uid,proto3" json:"Uid,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string  `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *ExecBatchYakScriptUnfinishedTask) Reset() {
	*x = ExecBatchYakScriptUnfinishedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptUnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptUnfinishedTask) ProtoMessage() {}

func (x *ExecBatchYakScriptUnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptUnfinishedTask.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptUnfinishedTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{194}
}

func (x *ExecBatchYakScriptUnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ExecBatchYakScriptUnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ExecBatchYakScriptUnfinishedTask) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ExecBatchYakScriptUnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *ExecBatchYakScriptUnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type SimpleDetectUnfinishedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent              float64 `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64   `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Uid                  string  `protobuf:"bytes,3,opt,name=Uid,proto3" json:"Uid,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string  `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	LastRecordPtr        int64   `protobuf:"varint,6,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
}

func (x *SimpleDetectUnfinishedTask) Reset() {
	*x = SimpleDetectUnfinishedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleDetectUnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleDetectUnfinishedTask) ProtoMessage() {}

func (x *SimpleDetectUnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleDetectUnfinishedTask.ProtoReflect.Descriptor instead.
func (*SimpleDetectUnfinishedTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{195}
}

func (x *SimpleDetectUnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *SimpleDetectUnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SimpleDetectUnfinishedTask) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

type GetExecBatchYakScriptUnfinishedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*ExecBatchYakScriptUnfinishedTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) Reset() {
	*x = GetExecBatchYakScriptUnfinishedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecBatchYakScriptUnfinishedTaskResponse) ProtoMessage() {}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecBatchYakScriptUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*GetExecBatchYakScriptUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{196}
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) GetTasks() []*ExecBatchYakScriptUnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetSimpleDetectUnfinishedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*SimpleDetectUnfinishedTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *GetSimpleDetectUnfinishedTaskResponse) Reset() {
	*x = GetSimpleDetectUnfinishedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimpleDetectUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimpleDetectUnfinishedTaskResponse) ProtoMessage() {}

func (x *GetSimpleDetectUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimpleDetectUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*GetSimpleDetectUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{197}
}

func (x *GetSimpleDetectUnfinishedTaskResponse) GetTasks() []*SimpleDetectUnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type UnfinishedTaskFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeId      []string `protobuf:"bytes,1,rep,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	ProgressSource []string `protobuf:"bytes,2,rep,name=ProgressSource,proto3" json:"ProgressSource,omitempty"`
	TaskName       string   `protobuf:"bytes,3,opt,name=TaskName,proto3" json:"TaskName,omitempty"` // support fuzzy search
	Target         string   `protobuf:"bytes,4,opt,name=Target,proto3" json:"Target,omitempty"`     // support fuzzy search
}

func (x *UnfinishedTaskFilter) Reset() {
	*x = UnfinishedTaskFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnfinishedTaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfinishedTaskFilter) ProtoMessage() {}

func (x *UnfinishedTaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfinishedTaskFilter.ProtoReflect.Descriptor instead.
func (*UnfinishedTaskFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{198}
}

func (x *UnfinishedTaskFilter) GetRuntimeId() []string {
	if x != nil {
		return x.RuntimeId
	}
	return nil
}

func (x *UnfinishedTaskFilter) GetProgressSource() []string {
	if x != nil {
		return x.ProgressSource
	}
	return nil
}

func (x *UnfinishedTaskFilter) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UnfinishedTaskFilter) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type QueryUnfinishedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging               `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter     *UnfinishedTaskFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QueryUnfinishedTaskRequest) Reset() {
	*x = QueryUnfinishedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUnfinishedTaskRequest) ProtoMessage() {}

func (x *QueryUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*QueryUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{199}
}

func (x *QueryUnfinishedTaskRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryUnfinishedTaskRequest) GetFilter() *UnfinishedTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DeleteUnfinishedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *UnfinishedTaskFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *DeleteUnfinishedTaskRequest) Reset() {
	*x = DeleteUnfinishedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUnfinishedTaskRequest) ProtoMessage() {}

func (x *DeleteUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{200}
}

func (x *DeleteUnfinishedTaskRequest) GetFilter() *UnfinishedTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UnfinishedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent              float64 `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64   `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	RuntimeId            string  `protobuf:"bytes,3,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string  `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	LastRecordPtr        int64   `protobuf:"varint,6,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
	Target               string  `protobuf:"bytes,7,opt,name=Target,proto3" json:"Target,omitempty"`
}

func (x *UnfinishedTask) Reset() {
	*x = UnfinishedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfinishedTask) ProtoMessage() {}

func (x *UnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfinishedTask.ProtoReflect.Descriptor instead.
func (*UnfinishedTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{201}
}

func (x *UnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *UnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UnfinishedTask) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *UnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *UnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UnfinishedTask) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

func (x *UnfinishedTask) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type QueryUnfinishedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks      []*UnfinishedTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	Pagination *Paging           `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryUnfinishedTaskResponse) Reset() {
	*x = QueryUnfinishedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUnfinishedTaskResponse) ProtoMessage() {}

func (x *QueryUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*QueryUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{202}
}

func (x *QueryUnfinishedTaskResponse) GetTasks() []*UnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *QueryUnfinishedTaskResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryUnfinishedTaskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetUnfinishedTaskDetailByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeId string `protobuf:"bytes,1,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
}

func (x *GetUnfinishedTaskDetailByIdRequest) Reset() {
	*x = GetUnfinishedTaskDetailByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnfinishedTaskDetailByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnfinishedTaskDetailByIdRequest) ProtoMessage() {}

func (x *GetUnfinishedTaskDetailByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnfinishedTaskDetailByIdRequest.ProtoReflect.Descriptor instead.
func (*GetUnfinishedTaskDetailByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{203}
}

func (x *GetUnfinishedTaskDetailByIdRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type RecoverUnfinishedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeId string `protobuf:"bytes,1,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
}

func (x *RecoverUnfinishedTaskRequest) Reset() {
	*x = RecoverUnfinishedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverUnfinishedTaskRequest) ProtoMessage() {}

func (x *RecoverUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*RecoverUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{204}
}

func (x *RecoverUnfinishedTaskRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type FixUploadPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []byte `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *FixUploadPacketRequest) Reset() {
	*x = FixUploadPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixUploadPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixUploadPacketRequest) ProtoMessage() {}

func (x *FixUploadPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixUploadPacketRequest.ProtoReflect.Descriptor instead.
func (*FixUploadPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{205}
}

func (x *FixUploadPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type FixUploadPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []byte `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *FixUploadPacketResponse) Reset() {
	*x = FixUploadPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixUploadPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixUploadPacketResponse) ProtoMessage() {}

func (x *FixUploadPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixUploadPacketResponse.ProtoReflect.Descriptor instead.
func (*FixUploadPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{206}
}

func (x *FixUploadPacketResponse) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type IsMultipartFormDataRequestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMultipartFormData bool `protobuf:"varint,1,opt,name=IsMultipartFormData,proto3" json:"IsMultipartFormData,omitempty"`
}

func (x *IsMultipartFormDataRequestResult) Reset() {
	*x = IsMultipartFormDataRequestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMultipartFormDataRequestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMultipartFormDataRequestResult) ProtoMessage() {}

func (x *IsMultipartFormDataRequestResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMultipartFormDataRequestResult.ProtoReflect.Descriptor instead.
func (*IsMultipartFormDataRequestResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{207}
}

func (x *IsMultipartFormDataRequestResult) GetIsMultipartFormData() bool {
	if x != nil {
		return x.IsMultipartFormData
	}
	return false
}

type AutoDecodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         string              `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	ModifyResult []*AutoDecodeResult `protobuf:"bytes,2,rep,name=ModifyResult,proto3" json:"ModifyResult,omitempty"`
}

func (x *AutoDecodeRequest) Reset() {
	*x = AutoDecodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDecodeRequest) ProtoMessage() {}

func (x *AutoDecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDecodeRequest.ProtoReflect.Descriptor instead.
func (*AutoDecodeRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{208}
}

func (x *AutoDecodeRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *AutoDecodeRequest) GetModifyResult() []*AutoDecodeResult {
	if x != nil {
		return x.ModifyResult
	}
	return nil
}

type AutoDecodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	TypeVerbose string `protobuf:"bytes,2,opt,name=TypeVerbose,proto3" json:"TypeVerbose,omitempty"`
	Origin      []byte `protobuf:"bytes,3,opt,name=Origin,proto3" json:"Origin,omitempty"`
	Result      []byte `protobuf:"bytes,4,opt,name=Result,proto3" json:"Result,omitempty"`
	Modify      bool   `protobuf:"varint,5,opt,name=Modify,proto3" json:"Modify,omitempty"`
}

func (x *AutoDecodeResult) Reset() {
	*x = AutoDecodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDecodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDecodeResult) ProtoMessage() {}

func (x *AutoDecodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDecodeResult.ProtoReflect.Descriptor instead.
func (*AutoDecodeResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{209}
}

func (x *AutoDecodeResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AutoDecodeResult) GetTypeVerbose() string {
	if x != nil {
		return x.TypeVerbose
	}
	return ""
}

func (x *AutoDecodeResult) GetOrigin() []byte {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *AutoDecodeResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AutoDecodeResult) GetModify() bool {
	if x != nil {
		return x.Modify
	}
	return false
}

type AutoDecodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AutoDecodeResult `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *AutoDecodeResponse) Reset() {
	*x = AutoDecodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDecodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDecodeResponse) ProtoMessage() {}

func (x *AutoDecodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDecodeResponse.ProtoReflect.Descriptor instead.
func (*AutoDecodeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{210}
}

func (x *AutoDecodeResponse) GetResults() []*AutoDecodeResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type ExtractDataToFileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
}

func (x *ExtractDataToFileResult) Reset() {
	*x = ExtractDataToFileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataToFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataToFileResult) ProtoMessage() {}

func (x *ExtractDataToFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataToFileResult.ProtoReflect.Descriptor instead.
func (*ExtractDataToFileResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{211}
}

func (x *ExtractDataToFileResult) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type GetYakScriptTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag []*Tags `protobuf:"bytes,1,rep,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *GetYakScriptTagsResponse) Reset() {
	*x = GetYakScriptTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptTagsResponse) ProtoMessage() {}

func (x *GetYakScriptTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptTagsResponse.ProtoReflect.Descriptor instead.
func (*GetYakScriptTagsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{212}
}

func (x *GetYakScriptTagsResponse) GetTag() []*Tags {
	if x != nil {
		return x.Tag
	}
	return nil
}

type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{213}
}

func (x *Tags) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Tags) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryYakScriptLocalAndUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineBaseUrl string `protobuf:"bytes,1,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
	UserId        int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *QueryYakScriptLocalAndUserRequest) Reset() {
	*x = QueryYakScriptLocalAndUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptLocalAndUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptLocalAndUserRequest) ProtoMessage() {}

func (x *QueryYakScriptLocalAndUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptLocalAndUserRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptLocalAndUserRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{214}
}

func (x *QueryYakScriptLocalAndUserRequest) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

func (x *QueryYakScriptLocalAndUserRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type QueryYakScriptLocalAndUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*YakScript `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptLocalAndUserResponse) Reset() {
	*x = QueryYakScriptLocalAndUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptLocalAndUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptLocalAndUserResponse) ProtoMessage() {}

func (x *QueryYakScriptLocalAndUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptLocalAndUserResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptLocalAndUserResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{215}
}

func (x *QueryYakScriptLocalAndUserResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptByOnlineGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineGroup string `protobuf:"bytes,1,opt,name=OnlineGroup,proto3" json:"OnlineGroup,omitempty"`
}

func (x *QueryYakScriptByOnlineGroupRequest) Reset() {
	*x = QueryYakScriptByOnlineGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptByOnlineGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByOnlineGroupRequest) ProtoMessage() {}

func (x *QueryYakScriptByOnlineGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByOnlineGroupRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByOnlineGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{216}
}

func (x *QueryYakScriptByOnlineGroupRequest) GetOnlineGroup() string {
	if x != nil {
		return x.OnlineGroup
	}
	return ""
}

type QueryYakScriptByNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName []string `protobuf:"bytes,1,rep,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *QueryYakScriptByNamesRequest) Reset() {
	*x = QueryYakScriptByNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptByNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByNamesRequest) ProtoMessage() {}

func (x *QueryYakScriptByNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByNamesRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByNamesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{217}
}

func (x *QueryYakScriptByNamesRequest) GetYakScriptName() []string {
	if x != nil {
		return x.YakScriptName
	}
	return nil
}

type QueryYakScriptByIsCoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCorePlugin bool `protobuf:"varint,1,opt,name=IsCorePlugin,proto3" json:"IsCorePlugin,omitempty"`
}

func (x *QueryYakScriptByIsCoreRequest) Reset() {
	*x = QueryYakScriptByIsCoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptByIsCoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByIsCoreRequest) ProtoMessage() {}

func (x *QueryYakScriptByIsCoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByIsCoreRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByIsCoreRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{218}
}

func (x *QueryYakScriptByIsCoreRequest) GetIsCorePlugin() bool {
	if x != nil {
		return x.IsCorePlugin
	}
	return false
}

type QueryYakScriptByNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*YakScript `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptByNamesResponse) Reset() {
	*x = QueryYakScriptByNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptByNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByNamesResponse) ProtoMessage() {}

func (x *QueryYakScriptByNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByNamesResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByNamesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{219}
}

func (x *QueryYakScriptByNamesResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptByIsCoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*YakScript `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptByIsCoreResponse) Reset() {
	*x = QueryYakScriptByIsCoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptByIsCoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByIsCoreResponse) ProtoMessage() {}

func (x *QueryYakScriptByIsCoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByIsCoreResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByIsCoreResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{220}
}

func (x *QueryYakScriptByIsCoreResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptRiskDetailByCWERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CWEId string `protobuf:"bytes,1,opt,name=CWEId,proto3" json:"CWEId,omitempty"`
}

func (x *QueryYakScriptRiskDetailByCWERequest) Reset() {
	*x = QueryYakScriptRiskDetailByCWERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptRiskDetailByCWERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptRiskDetailByCWERequest) ProtoMessage() {}

func (x *QueryYakScriptRiskDetailByCWERequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptRiskDetailByCWERequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptRiskDetailByCWERequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{221}
}

func (x *QueryYakScriptRiskDetailByCWERequest) GetCWEId() string {
	if x != nil {
		return x.CWEId
	}
	return ""
}

type QueryYakScriptRiskDetailByCWEResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CWEId       string `protobuf:"bytes,1,opt,name=CWEId,proto3" json:"CWEId,omitempty"`
	RiskType    string `protobuf:"bytes,2,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	CWESolution string `protobuf:"bytes,4,opt,name=CWESolution,proto3" json:"CWESolution,omitempty"`
}

func (x *QueryYakScriptRiskDetailByCWEResponse) Reset() {
	*x = QueryYakScriptRiskDetailByCWEResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptRiskDetailByCWEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptRiskDetailByCWEResponse) ProtoMessage() {}

func (x *QueryYakScriptRiskDetailByCWEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptRiskDetailByCWEResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptRiskDetailByCWEResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{222}
}

func (x *QueryYakScriptRiskDetailByCWEResponse) GetCWEId() string {
	if x != nil {
		return x.CWEId
	}
	return ""
}

func (x *QueryYakScriptRiskDetailByCWEResponse) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *QueryYakScriptRiskDetailByCWEResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryYakScriptRiskDetailByCWEResponse) GetCWESolution() string {
	if x != nil {
		return x.CWESolution
	}
	return ""
}

type YakScriptRiskTypeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RiskTypeLists `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *YakScriptRiskTypeListResponse) Reset() {
	*x = YakScriptRiskTypeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptRiskTypeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptRiskTypeListResponse) ProtoMessage() {}

func (x *YakScriptRiskTypeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptRiskTypeListResponse.ProtoReflect.Descriptor instead.
func (*YakScriptRiskTypeListResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{223}
}

func (x *YakScriptRiskTypeListResponse) GetData() []*RiskTypeLists {
	if x != nil {
		return x.Data
	}
	return nil
}

type RiskTypeLists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiskType string `protobuf:"bytes,1,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	CWEId    string `protobuf:"bytes,2,opt,name=CWEId,proto3" json:"CWEId,omitempty"`
}

func (x *RiskTypeLists) Reset() {
	*x = RiskTypeLists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskTypeLists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskTypeLists) ProtoMessage() {}

func (x *RiskTypeLists) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskTypeLists.ProtoReflect.Descriptor instead.
func (*RiskTypeLists) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{224}
}

func (x *RiskTypeLists) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *RiskTypeLists) GetCWEId() string {
	if x != nil {
		return x.CWEId
	}
	return ""
}

type ExtractDataToFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonOutput      bool                        `protobuf:"varint,1,opt,name=JsonOutput,proto3" json:"JsonOutput,omitempty"`
	CSVOutput       bool                        `protobuf:"varint,2,opt,name=CSVOutput,proto3" json:"CSVOutput,omitempty"`
	DirName         string                      `protobuf:"bytes,3,opt,name=DirName,proto3" json:"DirName,omitempty"`
	Data            map[string]*ExtractableData `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileNamePattern string                      `protobuf:"bytes,5,opt,name=FileNamePattern,proto3" json:"FileNamePattern,omitempty"`
	// 当没有数据的时候，执行这个即可
	Finished bool `protobuf:"varint,6,opt,name=Finished,proto3" json:"Finished,omitempty"`
}

func (x *ExtractDataToFileRequest) Reset() {
	*x = ExtractDataToFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataToFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataToFileRequest) ProtoMessage() {}

func (x *ExtractDataToFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataToFileRequest.ProtoReflect.Descriptor instead.
func (*ExtractDataToFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{225}
}

func (x *ExtractDataToFileRequest) GetJsonOutput() bool {
	if x != nil {
		return x.JsonOutput
	}
	return false
}

func (x *ExtractDataToFileRequest) GetCSVOutput() bool {
	if x != nil {
		return x.CSVOutput
	}
	return false
}

func (x *ExtractDataToFileRequest) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *ExtractDataToFileRequest) GetData() map[string]*ExtractableData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtractDataToFileRequest) GetFileNamePattern() string {
	if x != nil {
		return x.FileNamePattern
	}
	return ""
}

func (x *ExtractDataToFileRequest) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type ExtractableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string `protobuf:"bytes,1,opt,name=StringValue,proto3" json:"StringValue,omitempty"`
	BytesValue  []byte `protobuf:"bytes,2,opt,name=BytesValue,proto3" json:"BytesValue,omitempty"`
}

func (x *ExtractableData) Reset() {
	*x = ExtractableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractableData) ProtoMessage() {}

func (x *ExtractableData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractableData.ProtoReflect.Descriptor instead.
func (*ExtractableData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{226}
}

func (x *ExtractableData) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *ExtractableData) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

type MITMContentReplacers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*MITMContentReplacer `protobuf:"bytes,1,rep,name=Rules,proto3" json:"Rules,omitempty"`
}

func (x *MITMContentReplacers) Reset() {
	*x = MITMContentReplacers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMContentReplacers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMContentReplacers) ProtoMessage() {}

func (x *MITMContentReplacers) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMContentReplacers.ProtoReflect.Descriptor instead.
func (*MITMContentReplacers) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{227}
}

func (x *MITMContentReplacers) GetRules() []*MITMContentReplacer {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ImportMITMReplacerRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonRaw    []byte `protobuf:"bytes,1,opt,name=JsonRaw,proto3" json:"JsonRaw,omitempty"`
	ReplaceAll bool   `protobuf:"varint,2,opt,name=ReplaceAll,proto3" json:"ReplaceAll,omitempty"`
}

func (x *ImportMITMReplacerRulesRequest) Reset() {
	*x = ImportMITMReplacerRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportMITMReplacerRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMITMReplacerRulesRequest) ProtoMessage() {}

func (x *ImportMITMReplacerRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMITMReplacerRulesRequest.ProtoReflect.Descriptor instead.
func (*ImportMITMReplacerRulesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{228}
}

func (x *ImportMITMReplacerRulesRequest) GetJsonRaw() []byte {
	if x != nil {
		return x.JsonRaw
	}
	return nil
}

func (x *ImportMITMReplacerRulesRequest) GetReplaceAll() bool {
	if x != nil {
		return x.ReplaceAll
	}
	return false
}

type ExportMITMReplacerRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonRaw []byte `protobuf:"bytes,1,opt,name=JsonRaw,proto3" json:"JsonRaw,omitempty"`
}

func (x *ExportMITMReplacerRulesResponse) Reset() {
	*x = ExportMITMReplacerRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportMITMReplacerRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMITMReplacerRulesResponse) ProtoMessage() {}

func (x *ExportMITMReplacerRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMITMReplacerRulesResponse.ProtoReflect.Descriptor instead.
func (*ExportMITMReplacerRulesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{229}
}

func (x *ExportMITMReplacerRulesResponse) GetJsonRaw() []byte {
	if x != nil {
		return x.JsonRaw
	}
	return nil
}

type ExecYakitPluginsByYakScriptFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *QueryYakScriptRequest `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	// 这个 Target 很复杂，URL / IP / CIDR / Host / Host:port
	Target      string           `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`
	Ports       string           `protobuf:"bytes,3,opt,name=Ports,proto3" json:"Ports,omitempty"`
	TargetFile  string           `protobuf:"bytes,5,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	ExtraParams []*ExecParamItem `protobuf:"bytes,4,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) Reset() {
	*x = ExecYakitPluginsByYakScriptFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecYakitPluginsByYakScriptFilterRequest) ProtoMessage() {}

func (x *ExecYakitPluginsByYakScriptFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecYakitPluginsByYakScriptFilterRequest.ProtoReflect.Descriptor instead.
func (*ExecYakitPluginsByYakScriptFilterRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{230}
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetExtraParams() []*ExecParamItem {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type GenerateYakCodeByPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHttps      bool                                    `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request      []byte                                  `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	CodeTemplate GenerateYakCodeByPacketRequest_Template `protobuf:"varint,3,opt,name=CodeTemplate,proto3,enum=ypb.GenerateYakCodeByPacketRequest_Template" json:"CodeTemplate,omitempty"`
}

func (x *GenerateYakCodeByPacketRequest) Reset() {
	*x = GenerateYakCodeByPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateYakCodeByPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateYakCodeByPacketRequest) ProtoMessage() {}

func (x *GenerateYakCodeByPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateYakCodeByPacketRequest.ProtoReflect.Descriptor instead.
func (*GenerateYakCodeByPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{231}
}

func (x *GenerateYakCodeByPacketRequest) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *GenerateYakCodeByPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GenerateYakCodeByPacketRequest) GetCodeTemplate() GenerateYakCodeByPacketRequest_Template {
	if x != nil {
		return x.CodeTemplate
	}
	return GenerateYakCodeByPacketRequest_Ordinary
}

type GenerateCSRFPocByPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHttps bool   `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request []byte `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *GenerateCSRFPocByPacketRequest) Reset() {
	*x = GenerateCSRFPocByPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCSRFPocByPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRFPocByPacketRequest) ProtoMessage() {}

func (x *GenerateCSRFPocByPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRFPocByPacketRequest.ProtoReflect.Descriptor instead.
func (*GenerateCSRFPocByPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{232}
}

func (x *GenerateCSRFPocByPacketRequest) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *GenerateCSRFPocByPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type GenerateCSRFPocByPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *GenerateCSRFPocByPacketResponse) Reset() {
	*x = GenerateCSRFPocByPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCSRFPocByPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRFPocByPacketResponse) ProtoMessage() {}

func (x *GenerateCSRFPocByPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRFPocByPacketResponse.ProtoReflect.Descriptor instead.
func (*GenerateCSRFPocByPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{233}
}

func (x *GenerateCSRFPocByPacketResponse) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type GenerateYakCodeByPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *GenerateYakCodeByPacketResponse) Reset() {
	*x = GenerateYakCodeByPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateYakCodeByPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateYakCodeByPacketResponse) ProtoMessage() {}

func (x *GenerateYakCodeByPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateYakCodeByPacketResponse.ProtoReflect.Descriptor instead.
func (*GenerateYakCodeByPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{234}
}

func (x *GenerateYakCodeByPacketResponse) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type QueryReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *QueryReportRequest) Reset() {
	*x = QueryReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportRequest) ProtoMessage() {}

func (x *QueryReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportRequest.ProtoReflect.Descriptor instead.
func (*QueryReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{235}
}

func (x *QueryReportRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryReportRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type DeleteReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash      string               `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Filter    *QueryReportsRequest `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	IDs       []int64              `protobuf:"varint,4,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	DeleteAll bool                 `protobuf:"varint,5,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
}

func (x *DeleteReportRequest) Reset() {
	*x = DeleteReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReportRequest) ProtoMessage() {}

func (x *DeleteReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{236}
}

func (x *DeleteReportRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteReportRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DeleteReportRequest) GetFilter() *QueryReportsRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteReportRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *DeleteReportRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

type QueryReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*Report `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64     `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Pagination *Paging   `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryReportsResponse) Reset() {
	*x = QueryReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportsResponse) ProtoMessage() {}

func (x *QueryReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportsResponse.ProtoReflect.Descriptor instead.
func (*QueryReportsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{237}
}

func (x *QueryReportsResponse) GetData() []*Report {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryReportsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryReportsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Owner      string  `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	From       string  `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	Keyword    string  `protobuf:"bytes,4,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Title      string  `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (x *QueryReportsRequest) Reset() {
	*x = QueryReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportsRequest) ProtoMessage() {}

func (x *QueryReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportsRequest.ProtoReflect.Descriptor instead.
func (*QueryReportsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{238}
}

func (x *QueryReportsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryReportsRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *QueryReportsRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *QueryReportsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryReportsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	PublishedAt uint64 `protobuf:"varint,2,opt,name=PublishedAt,proto3" json:"PublishedAt,omitempty"`
	Hash        string `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Id          uint64 `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`
	Owner       string `protobuf:"bytes,5,opt,name=Owner,proto3" json:"Owner,omitempty"`
	From        string `protobuf:"bytes,6,opt,name=From,proto3" json:"From,omitempty"`
	JsonRaw     string `protobuf:"bytes,7,opt,name=JsonRaw,proto3" json:"JsonRaw,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{239}
}

func (x *Report) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Report) GetPublishedAt() uint64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *Report) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Report) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Report) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Report) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Report) GetJsonRaw() string {
	if x != nil {
		return x.JsonRaw
	}
	return ""
}

type SetTagForHTTPFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash      string                  `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags      []string                `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CheckTags []*CheckSetTagsHTTPFlow `protobuf:"bytes,4,rep,name=CheckTags,proto3" json:"CheckTags,omitempty"`
}

func (x *SetTagForHTTPFlowRequest) Reset() {
	*x = SetTagForHTTPFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTagForHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagForHTTPFlowRequest) ProtoMessage() {}

func (x *SetTagForHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagForHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*SetTagForHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{240}
}

func (x *SetTagForHTTPFlowRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetTagForHTTPFlowRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SetTagForHTTPFlowRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SetTagForHTTPFlowRequest) GetCheckTags() []*CheckSetTagsHTTPFlow {
	if x != nil {
		return x.CheckTags
	}
	return nil
}

type CheckSetTagsHTTPFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash string   `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags []string `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *CheckSetTagsHTTPFlow) Reset() {
	*x = CheckSetTagsHTTPFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSetTagsHTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSetTagsHTTPFlow) ProtoMessage() {}

func (x *CheckSetTagsHTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSetTagsHTTPFlow.ProtoReflect.Descriptor instead.
func (*CheckSetTagsHTTPFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{241}
}

func (x *CheckSetTagsHTTPFlow) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CheckSetTagsHTTPFlow) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CheckSetTagsHTTPFlow) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RequireICMPRandomLengthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length       int32  `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	ExternalHost string `protobuf:"bytes,2,opt,name=ExternalHost,proto3" json:"ExternalHost,omitempty"`
}

func (x *RequireICMPRandomLengthResponse) Reset() {
	*x = RequireICMPRandomLengthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireICMPRandomLengthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireICMPRandomLengthResponse) ProtoMessage() {}

func (x *RequireICMPRandomLengthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireICMPRandomLengthResponse.ProtoReflect.Descriptor instead.
func (*RequireICMPRandomLengthResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{242}
}

func (x *RequireICMPRandomLengthResponse) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RequireICMPRandomLengthResponse) GetExternalHost() string {
	if x != nil {
		return x.ExternalHost
	}
	return ""
}

type RandomPortTriggerNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteAddr                            string   `protobuf:"bytes,1,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP                              string   `protobuf:"bytes,2,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort                            int32    `protobuf:"varint,3,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	LocalPort                             int32    `protobuf:"varint,4,opt,name=LocalPort,proto3" json:"LocalPort,omitempty"`
	History                               []string `protobuf:"bytes,5,rep,name=History,proto3" json:"History,omitempty"`
	CurrentRemoteCachedConnectionCount    int32    `protobuf:"varint,6,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	LocalPortCachedHistoryConnectionCount int32    `protobuf:"varint,7,opt,name=LocalPortCachedHistoryConnectionCount,proto3" json:"LocalPortCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                      int64    `protobuf:"varint,8,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                             int64    `protobuf:"varint,9,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RandomPortTriggerNotification) Reset() {
	*x = RandomPortTriggerNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPortTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPortTriggerNotification) ProtoMessage() {}

func (x *RandomPortTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPortTriggerNotification.ProtoReflect.Descriptor instead.
func (*RandomPortTriggerNotification) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{243}
}

func (x *RandomPortTriggerNotification) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *RandomPortTriggerNotification) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *RandomPortTriggerNotification) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *RandomPortTriggerNotification) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetLocalPortCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.LocalPortCachedHistoryConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QueryRandomPortTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *QueryRandomPortTriggerRequest) Reset() {
	*x = QueryRandomPortTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRandomPortTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRandomPortTriggerRequest) ProtoMessage() {}

func (x *QueryRandomPortTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRandomPortTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryRandomPortTriggerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{244}
}

func (x *QueryRandomPortTriggerRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RandomPortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Port  int32  `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *RandomPortInfo) Reset() {
	*x = RandomPortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPortInfo) ProtoMessage() {}

func (x *RandomPortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPortInfo.ProtoReflect.Descriptor instead.
func (*RandomPortInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{245}
}

func (x *RandomPortInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RandomPortInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *RandomPortInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DeleteHistoryHTTPFuzzerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	WebFuzzerIndex string `protobuf:"bytes,2,opt,name=WebFuzzerIndex,proto3" json:"WebFuzzerIndex,omitempty"`
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) Reset() {
	*x = DeleteHistoryHTTPFuzzerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHistoryHTTPFuzzerTaskRequest) ProtoMessage() {}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHistoryHTTPFuzzerTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteHistoryHTTPFuzzerTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{246}
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) GetWebFuzzerIndex() string {
	if x != nil {
		return x.WebFuzzerIndex
	}
	return ""
}

type RiskTableStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 最近一次更新的漏洞信息
	LatestCreatedAtTimestamp int64   `protobuf:"varint,1,opt,name=LatestCreatedAtTimestamp,proto3" json:"LatestCreatedAtTimestamp,omitempty"`
	RiskTypeStats            *Fields `protobuf:"bytes,2,opt,name=RiskTypeStats,proto3" json:"RiskTypeStats,omitempty"`
	RiskLevelStats           *Fields `protobuf:"bytes,3,opt,name=RiskLevelStats,proto3" json:"RiskLevelStats,omitempty"`
}

func (x *RiskTableStats) Reset() {
	*x = RiskTableStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskTableStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskTableStats) ProtoMessage() {}

func (x *RiskTableStats) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskTableStats.ProtoReflect.Descriptor instead.
func (*RiskTableStats) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{247}
}

func (x *RiskTableStats) GetLatestCreatedAtTimestamp() int64 {
	if x != nil {
		return x.LatestCreatedAtTimestamp
	}
	return 0
}

func (x *RiskTableStats) GetRiskTypeStats() *Fields {
	if x != nil {
		return x.RiskTypeStats
	}
	return nil
}

func (x *RiskTableStats) GetRiskLevelStats() *Fields {
	if x != nil {
		return x.RiskLevelStats
	}
	return nil
}

type MITMCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaCerts   []byte `protobuf:"bytes,1,opt,name=CaCerts,proto3" json:"CaCerts,omitempty"`
	LocalFile string `protobuf:"bytes,2,opt,name=LocalFile,proto3" json:"LocalFile,omitempty"`
}

func (x *MITMCert) Reset() {
	*x = MITMCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMCert) ProtoMessage() {}

func (x *MITMCert) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMCert.ProtoReflect.Descriptor instead.
func (*MITMCert) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{248}
}

func (x *MITMCert) GetCaCerts() []byte {
	if x != nil {
		return x.CaCerts
	}
	return nil
}

func (x *MITMCert) GetLocalFile() string {
	if x != nil {
		return x.LocalFile
	}
	return ""
}

type FieldName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Verbose string `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Total   int32  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	// 比上一次的增量/变化量
	Delta int32 `protobuf:"varint,4,opt,name=Delta,proto3" json:"Delta,omitempty"`
}

func (x *FieldName) Reset() {
	*x = FieldName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldName) ProtoMessage() {}

func (x *FieldName) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldName.ProtoReflect.Descriptor instead.
func (*FieldName) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{249}
}

func (x *FieldName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldName) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *FieldName) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FieldName) GetDelta() int32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*FieldName `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *Fields) Reset() {
	*x = Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fields) ProtoMessage() {}

func (x *Fields) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fields.ProtoReflect.Descriptor instead.
func (*Fields) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{250}
}

func (x *Fields) GetValues() []*FieldName {
	if x != nil {
		return x.Values
	}
	return nil
}

// 获取Gadget的Options
type YsoOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	NameVerbose string `protobuf:"bytes,2,opt,name=NameVerbose,proto3" json:"NameVerbose,omitempty"`
	Help        string `protobuf:"bytes,3,opt,name=Help,proto3" json:"Help,omitempty"`
}

func (x *YsoOption) Reset() {
	*x = YsoOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOption) ProtoMessage() {}

func (x *YsoOption) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOption.ProtoReflect.Descriptor instead.
func (*YsoOption) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{251}
}

func (x *YsoOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *YsoOption) GetNameVerbose() string {
	if x != nil {
		return x.NameVerbose
	}
	return ""
}

func (x *YsoOption) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

type YsoOptionsWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*YsoOption `protobuf:"bytes,1,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *YsoOptionsWithVerbose) Reset() {
	*x = YsoOptionsWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoOptionsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptionsWithVerbose) ProtoMessage() {}

func (x *YsoOptionsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptionsWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoOptionsWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{252}
}

func (x *YsoOptionsWithVerbose) GetOptions() []*YsoOption {
	if x != nil {
		return x.Options
	}
	return nil
}

// 已弃用
type YsoOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=Names,proto3" json:"Names,omitempty"`
}

func (x *YsoOptions) Reset() {
	*x = YsoOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptions) ProtoMessage() {}

func (x *YsoOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptions.ProtoReflect.Descriptor instead.
func (*YsoOptions) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{253}
}

func (x *YsoOptions) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// 类生成器的参数
type YsoClassGeneraterOptionsWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string                                         `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	KeyVerbose  string                                         `protobuf:"bytes,2,opt,name=KeyVerbose,proto3" json:"KeyVerbose,omitempty"`
	Help        string                                         `protobuf:"bytes,3,opt,name=Help,proto3" json:"Help,omitempty"`
	Value       string                                         `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Type        string                                         `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	BindOptions map[string]*YsoClassOptionsResponseWithVerbose `protobuf:"bytes,6,rep,name=BindOptions,proto3" json:"BindOptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *YsoClassGeneraterOptionsWithVerbose) Reset() {
	*x = YsoClassGeneraterOptionsWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoClassGeneraterOptionsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassGeneraterOptionsWithVerbose) ProtoMessage() {}

func (x *YsoClassGeneraterOptionsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassGeneraterOptionsWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoClassGeneraterOptionsWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{254}
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetKeyVerbose() string {
	if x != nil {
		return x.KeyVerbose
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetBindOptions() map[string]*YsoClassOptionsResponseWithVerbose {
	if x != nil {
		return x.BindOptions
	}
	return nil
}

type YsoClassOptionsResponseWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*YsoClassGeneraterOptionsWithVerbose `protobuf:"bytes,1,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *YsoClassOptionsResponseWithVerbose) Reset() {
	*x = YsoClassOptionsResponseWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoClassOptionsResponseWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassOptionsResponseWithVerbose) ProtoMessage() {}

func (x *YsoClassOptionsResponseWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassOptionsResponseWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoClassOptionsResponseWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{255}
}

func (x *YsoClassOptionsResponseWithVerbose) GetOptions() []*YsoClassGeneraterOptionsWithVerbose {
	if x != nil {
		return x.Options
	}
	return nil
}

// 已弃用
type YsoClassGeneraterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *YsoClassGeneraterOptions) Reset() {
	*x = YsoClassGeneraterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoClassGeneraterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassGeneraterOptions) ProtoMessage() {}

func (x *YsoClassGeneraterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassGeneraterOptions.ProtoReflect.Descriptor instead.
func (*YsoClassGeneraterOptions) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{256}
}

func (x *YsoClassGeneraterOptions) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YsoClassGeneraterOptions) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *YsoClassGeneraterOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 已弃用
type YsoClassOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*YsoClassGeneraterOptions `protobuf:"bytes,1,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *YsoClassOptionsResponse) Reset() {
	*x = YsoClassOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoClassOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassOptionsResponse) ProtoMessage() {}

func (x *YsoClassOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassOptionsResponse.ProtoReflect.Descriptor instead.
func (*YsoClassOptionsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{257}
}

func (x *YsoClassOptionsResponse) GetOptions() []*YsoClassGeneraterOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// 生成代码和字节码
type YsoOptionsRequerstWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gadget  string                                 `protobuf:"bytes,1,opt,name=Gadget,proto3" json:"Gadget,omitempty"`
	Class   string                                 `protobuf:"bytes,2,opt,name=Class,proto3" json:"Class,omitempty"`
	Options []*YsoClassGeneraterOptionsWithVerbose `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *YsoOptionsRequerstWithVerbose) Reset() {
	*x = YsoOptionsRequerstWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoOptionsRequerstWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptionsRequerstWithVerbose) ProtoMessage() {}

func (x *YsoOptionsRequerstWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptionsRequerstWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoOptionsRequerstWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{258}
}

func (x *YsoOptionsRequerstWithVerbose) GetGadget() string {
	if x != nil {
		return x.Gadget
	}
	return ""
}

func (x *YsoOptionsRequerstWithVerbose) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *YsoOptionsRequerstWithVerbose) GetOptions() []*YsoClassGeneraterOptionsWithVerbose {
	if x != nil {
		return x.Options
	}
	return nil
}

// 已弃用
type YsoOptionsRequerst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gadget  string                      `protobuf:"bytes,1,opt,name=Gadget,proto3" json:"Gadget,omitempty"`
	Class   string                      `protobuf:"bytes,2,opt,name=Class,proto3" json:"Class,omitempty"`
	Options []*YsoClassGeneraterOptions `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *YsoOptionsRequerst) Reset() {
	*x = YsoOptionsRequerst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoOptionsRequerst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptionsRequerst) ProtoMessage() {}

func (x *YsoOptionsRequerst) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptionsRequerst.ProtoReflect.Descriptor instead.
func (*YsoOptionsRequerst) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{259}
}

func (x *YsoOptionsRequerst) GetGadget() string {
	if x != nil {
		return x.Gadget
	}
	return ""
}

func (x *YsoOptionsRequerst) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *YsoOptionsRequerst) GetOptions() []*YsoClassGeneraterOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type YsoBytesObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *YsoBytesObject) Reset() {
	*x = YsoBytesObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoBytesObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoBytesObject) ProtoMessage() {}

func (x *YsoBytesObject) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoBytesObject.ProtoReflect.Descriptor instead.
func (*YsoBytesObject) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{260}
}

func (x *YsoBytesObject) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type YsoDumpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *YsoDumpResponse) Reset() {
	*x = YsoDumpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoDumpResponse) ProtoMessage() {}

func (x *YsoDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoDumpResponse.ProtoReflect.Descriptor instead.
func (*YsoDumpResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{261}
}

func (x *YsoDumpResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type YsoCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *YsoCodeResponse) Reset() {
	*x = YsoCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoCodeResponse) ProtoMessage() {}

func (x *YsoCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoCodeResponse.ProtoReflect.Descriptor instead.
func (*YsoCodeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{262}
}

func (x *YsoCodeResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type YsoBytesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Bytes    []byte `protobuf:"bytes,2,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *YsoBytesResponse) Reset() {
	*x = YsoBytesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoBytesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoBytesResponse) ProtoMessage() {}

func (x *YsoBytesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoBytesResponse.ProtoReflect.Descriptor instead.
func (*YsoBytesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{263}
}

func (x *YsoBytesResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *YsoBytesResponse) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type BytesToBase64Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *BytesToBase64Request) Reset() {
	*x = BytesToBase64Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesToBase64Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesToBase64Request) ProtoMessage() {}

func (x *BytesToBase64Request) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesToBase64Request.ProtoReflect.Descriptor instead.
func (*BytesToBase64Request) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{264}
}

func (x *BytesToBase64Request) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type BytesToBase64Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base64 string `protobuf:"bytes,1,opt,name=Base64,proto3" json:"Base64,omitempty"`
}

func (x *BytesToBase64Response) Reset() {
	*x = BytesToBase64Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesToBase64Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesToBase64Response) ProtoMessage() {}

func (x *BytesToBase64Response) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesToBase64Response.ProtoReflect.Descriptor instead.
func (*BytesToBase64Response) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{265}
}

func (x *BytesToBase64Response) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

type QueryICMPTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length int32 `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
}

func (x *QueryICMPTriggerRequest) Reset() {
	*x = QueryICMPTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryICMPTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryICMPTriggerRequest) ProtoMessage() {}

func (x *QueryICMPTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryICMPTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryICMPTriggerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{266}
}

func (x *QueryICMPTriggerRequest) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type QueryICMPTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification []*ICMPTriggerNotification `protobuf:"bytes,1,rep,name=Notification,proto3" json:"Notification,omitempty"`
}

func (x *QueryICMPTriggerResponse) Reset() {
	*x = QueryICMPTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryICMPTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryICMPTriggerResponse) ProtoMessage() {}

func (x *QueryICMPTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryICMPTriggerResponse.ProtoReflect.Descriptor instead.
func (*QueryICMPTriggerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{267}
}

func (x *QueryICMPTriggerResponse) GetNotification() []*ICMPTriggerNotification {
	if x != nil {
		return x.Notification
	}
	return nil
}

type QuerySupportedDnsLogPlatformsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platforms []string `protobuf:"bytes,1,rep,name=Platforms,proto3" json:"Platforms,omitempty"`
}

func (x *QuerySupportedDnsLogPlatformsResponse) Reset() {
	*x = QuerySupportedDnsLogPlatformsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySupportedDnsLogPlatformsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySupportedDnsLogPlatformsResponse) ProtoMessage() {}

func (x *QuerySupportedDnsLogPlatformsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySupportedDnsLogPlatformsResponse.ProtoReflect.Descriptor instead.
func (*QuerySupportedDnsLogPlatformsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{268}
}

func (x *QuerySupportedDnsLogPlatformsResponse) GetPlatforms() []string {
	if x != nil {
		return x.Platforms
	}
	return nil
}

type ICMPTriggerNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size                               int32    `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	CurrentRemoteAddr                  string   `protobuf:"bytes,2,opt,name=CurrentRemoteAddr,proto3" json:"CurrentRemoteAddr,omitempty"`
	Histories                          []string `protobuf:"bytes,3,rep,name=Histories,proto3" json:"Histories,omitempty"`
	CurrentRemoteCachedConnectionCount int32    `protobuf:"varint,4,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	SizedCachedHistoryConnectionCount  int32    `protobuf:"varint,5,opt,name=SizedCachedHistoryConnectionCount,proto3" json:"SizedCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                   int64    `protobuf:"varint,7,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                          int64    `protobuf:"varint,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ICMPTriggerNotification) Reset() {
	*x = ICMPTriggerNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICMPTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICMPTriggerNotification) ProtoMessage() {}

func (x *ICMPTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICMPTriggerNotification.ProtoReflect.Descriptor instead.
func (*ICMPTriggerNotification) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{269}
}

func (x *ICMPTriggerNotification) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ICMPTriggerNotification) GetCurrentRemoteAddr() string {
	if x != nil {
		return x.CurrentRemoteAddr
	}
	return ""
}

func (x *ICMPTriggerNotification) GetHistories() []string {
	if x != nil {
		return x.Histories
	}
	return nil
}

func (x *ICMPTriggerNotification) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetSizedCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.SizedCachedHistoryConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetHistoryHTTPFuzzerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetHistoryHTTPFuzzerTaskRequest) Reset() {
	*x = GetHistoryHTTPFuzzerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryHTTPFuzzerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryHTTPFuzzerTaskRequest) ProtoMessage() {}

func (x *GetHistoryHTTPFuzzerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryHTTPFuzzerTaskRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryHTTPFuzzerTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{270}
}

func (x *GetHistoryHTTPFuzzerTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HistoryHTTPFuzzerTaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo     *HistoryHTTPFuzzerTask `protobuf:"bytes,1,opt,name=BasicInfo,proto3" json:"BasicInfo,omitempty"`
	OriginRequest *FuzzerRequest         `protobuf:"bytes,2,opt,name=OriginRequest,proto3" json:"OriginRequest,omitempty"`
}

func (x *HistoryHTTPFuzzerTaskDetail) Reset() {
	*x = HistoryHTTPFuzzerTaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTaskDetail) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTaskDetail.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTaskDetail) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{271}
}

func (x *HistoryHTTPFuzzerTaskDetail) GetBasicInfo() *HistoryHTTPFuzzerTask {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *HistoryHTTPFuzzerTaskDetail) GetOriginRequest() *FuzzerRequest {
	if x != nil {
		return x.OriginRequest
	}
	return nil
}

type HistoryHTTPFuzzerTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt            int64  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	HTTPFlowTotal        int32  `protobuf:"varint,3,opt,name=HTTPFlowTotal,proto3" json:"HTTPFlowTotal,omitempty"`
	HTTPFlowSuccessCount int32  `protobuf:"varint,4,opt,name=HTTPFlowSuccessCount,proto3" json:"HTTPFlowSuccessCount,omitempty"`
	HTTPFlowFailedCount  int32  `protobuf:"varint,5,opt,name=HTTPFlowFailedCount,proto3" json:"HTTPFlowFailedCount,omitempty"`
	Host                 string `protobuf:"bytes,6,opt,name=Host,proto3" json:"Host,omitempty"`
	Port                 int32  `protobuf:"varint,7,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *HistoryHTTPFuzzerTask) Reset() {
	*x = HistoryHTTPFuzzerTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTask) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTask.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{272}
}

func (x *HistoryHTTPFuzzerTask) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowTotal() int32 {
	if x != nil {
		return x.HTTPFlowTotal
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowSuccessCount() int32 {
	if x != nil {
		return x.HTTPFlowSuccessCount
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowFailedCount() int32 {
	if x != nil {
		return x.HTTPFlowFailedCount
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HistoryHTTPFuzzerTask) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type HistoryHTTPFuzzerTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*HistoryHTTPFuzzerTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *HistoryHTTPFuzzerTasks) Reset() {
	*x = HistoryHTTPFuzzerTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTasks) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTasks) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTasks.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTasks) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{273}
}

func (x *HistoryHTTPFuzzerTasks) GetTasks() []*HistoryHTTPFuzzerTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type HistoryHTTPFuzzerTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*HistoryHTTPFuzzerTaskDetail `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64                          `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage  int64                          `protobuf:"varint,3,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
	Pagination *Paging                        `protobuf:"bytes,4,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *HistoryHTTPFuzzerTasksResponse) Reset() {
	*x = HistoryHTTPFuzzerTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTasksResponse) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTasksResponse.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTasksResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{274}
}

func (x *HistoryHTTPFuzzerTasksResponse) GetData() []*HistoryHTTPFuzzerTaskDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HistoryHTTPFuzzerTasksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HistoryHTTPFuzzerTasksResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *HistoryHTTPFuzzerTasksResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryHistoryHTTPFuzzerTaskExParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination     *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Keyword        string  `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	FuzzerTabIndex string  `protobuf:"bytes,3,opt,name=FuzzerTabIndex,proto3" json:"FuzzerTabIndex,omitempty"`
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) Reset() {
	*x = QueryHistoryHTTPFuzzerTaskExParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHistoryHTTPFuzzerTaskExParams) ProtoMessage() {}

func (x *QueryHistoryHTTPFuzzerTaskExParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHistoryHTTPFuzzerTaskExParams.ProtoReflect.Descriptor instead.
func (*QueryHistoryHTTPFuzzerTaskExParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{275}
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetFuzzerTabIndex() string {
	if x != nil {
		return x.FuzzerTabIndex
	}
	return ""
}

type ExecutePacketYakScriptParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName string `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	IsHttps    bool   `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request    []byte `protobuf:"bytes,3,opt,name=Request,proto3" json:"Request,omitempty"`
	Response   []byte `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *ExecutePacketYakScriptParams) Reset() {
	*x = ExecutePacketYakScriptParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePacketYakScriptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePacketYakScriptParams) ProtoMessage() {}

func (x *ExecutePacketYakScriptParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePacketYakScriptParams.ProtoReflect.Descriptor instead.
func (*ExecutePacketYakScriptParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{276}
}

func (x *ExecutePacketYakScriptParams) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *ExecutePacketYakScriptParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *ExecutePacketYakScriptParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecutePacketYakScriptParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type ExecuteBatchPacketYakScriptParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName []string `protobuf:"bytes,1,rep,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	IsHttps    bool     `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request    []byte   `protobuf:"bytes,3,opt,name=Request,proto3" json:"Request,omitempty"`
	Response   []byte   `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
	// 并发
	Concurrent int32 `protobuf:"varint,5,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	// 设置单个超时时间
	PerTaskTimeout float64 `protobuf:"fixed64,6,opt,name=PerTaskTimeout,proto3" json:"PerTaskTimeout,omitempty"`
}

func (x *ExecuteBatchPacketYakScriptParams) Reset() {
	*x = ExecuteBatchPacketYakScriptParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteBatchPacketYakScriptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBatchPacketYakScriptParams) ProtoMessage() {}

func (x *ExecuteBatchPacketYakScriptParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteBatchPacketYakScriptParams.ProtoReflect.Descriptor instead.
func (*ExecuteBatchPacketYakScriptParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{277}
}

func (x *ExecuteBatchPacketYakScriptParams) GetScriptName() []string {
	if x != nil {
		return x.ScriptName
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *ExecuteBatchPacketYakScriptParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecuteBatchPacketYakScriptParams) GetPerTaskTimeout() float64 {
	if x != nil {
		return x.PerTaskTimeout
	}
	return 0
}

type WebShell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	Pass        string `protobuf:"bytes,3,opt,name=Pass,proto3" json:"Pass,omitempty"`
	SecretKey   string `protobuf:"bytes,4,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	EncMode     string `protobuf:"bytes,5,opt,name=EncMode,proto3" json:"EncMode,omitempty"`
	Charset     string `protobuf:"bytes,6,opt,name=Charset,proto3" json:"Charset,omitempty"`
	ShellType   string `protobuf:"bytes,7,opt,name=ShellType,proto3" json:"ShellType,omitempty"`
	ShellScript string `protobuf:"bytes,8,opt,name=ShellScript,proto3" json:"ShellScript,omitempty"`
	Status      bool   `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`
	Tag         string `protobuf:"bytes,10,opt,name=Tag,proto3" json:"Tag,omitempty"`
	// Proxy
	Proxy            string            `protobuf:"bytes,11,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	Headers          map[string]string `protobuf:"bytes,12,rep,name=Headers,proto3" json:"Headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Remark           string            `protobuf:"bytes,13,opt,name=Remark,proto3" json:"Remark,omitempty"`
	CreatedAt        int64             `protobuf:"varint,14,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        int64             `protobuf:"varint,15,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	PacketCodecName  string            `protobuf:"bytes,16,opt,name=PacketCodecName,proto3" json:"PacketCodecName,omitempty"`
	PayloadCodecName string            `protobuf:"bytes,17,opt,name=PayloadCodecName,proto3" json:"PayloadCodecName,omitempty"`
	Posts            map[string]string `protobuf:"bytes,18,rep,name=Posts,proto3" json:"Posts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ShellOptions     *ShellOptions     `protobuf:"bytes,19,opt,name=ShellOptions,proto3" json:"ShellOptions,omitempty"`
	Os               string            `protobuf:"bytes,20,opt,name=Os,proto3" json:"Os,omitempty"`
	ResDecMOde       string            `protobuf:"bytes,21,opt,name=ResDecMOde,proto3" json:"ResDecMOde,omitempty"` //解密方式
}

func (x *WebShell) Reset() {
	*x = WebShell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebShell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebShell) ProtoMessage() {}

func (x *WebShell) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebShell.ProtoReflect.Descriptor instead.
func (*WebShell) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{278}
}

func (x *WebShell) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebShell) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebShell) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *WebShell) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *WebShell) GetEncMode() string {
	if x != nil {
		return x.EncMode
	}
	return ""
}

func (x *WebShell) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *WebShell) GetShellType() string {
	if x != nil {
		return x.ShellType
	}
	return ""
}

func (x *WebShell) GetShellScript() string {
	if x != nil {
		return x.ShellScript
	}
	return ""
}

func (x *WebShell) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *WebShell) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *WebShell) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *WebShell) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *WebShell) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *WebShell) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WebShell) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *WebShell) GetPacketCodecName() string {
	if x != nil {
		return x.PacketCodecName
	}
	return ""
}

func (x *WebShell) GetPayloadCodecName() string {
	if x != nil {
		return x.PayloadCodecName
	}
	return ""
}

func (x *WebShell) GetPosts() map[string]string {
	if x != nil {
		return x.Posts
	}
	return nil
}

func (x *WebShell) GetShellOptions() *ShellOptions {
	if x != nil {
		return x.ShellOptions
	}
	return nil
}

func (x *WebShell) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *WebShell) GetResDecMOde() string {
	if x != nil {
		return x.ResDecMOde
	}
	return ""
}

type ShellGenerate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncMode   EncMode     `protobuf:"varint,1,opt,name=EncMode,proto3,enum=ypb.EncMode" json:"EncMode,omitempty"`
	Script    ShellScript `protobuf:"varint,2,opt,name=Script,proto3,enum=ypb.ShellScript" json:"Script,omitempty"`
	Pass      string      `protobuf:"bytes,3,opt,name=Pass,proto3" json:"Pass,omitempty"`
	Confuse   bool        `protobuf:"varint,4,opt,name=Confuse,proto3" json:"Confuse,omitempty"` //是否混淆
	IsSession bool        `protobuf:"varint,5,opt,name=IsSession,proto3" json:"IsSession,omitempty"`
}

func (x *ShellGenerate) Reset() {
	*x = ShellGenerate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShellGenerate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellGenerate) ProtoMessage() {}

func (x *ShellGenerate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellGenerate.ProtoReflect.Descriptor instead.
func (*ShellGenerate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{279}
}

func (x *ShellGenerate) GetEncMode() EncMode {
	if x != nil {
		return x.EncMode
	}
	return EncMode_Raw
}

func (x *ShellGenerate) GetScript() ShellScript {
	if x != nil {
		return x.Script
	}
	return ShellScript_JSP
}

func (x *ShellGenerate) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *ShellGenerate) GetConfuse() bool {
	if x != nil {
		return x.Confuse
	}
	return false
}

func (x *ShellGenerate) GetIsSession() bool {
	if x != nil {
		return x.IsSession
	}
	return false
}

type ShellOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetryCount int64 `protobuf:"varint,1,opt,name=RetryCount,proto3" json:"RetryCount,omitempty"` //重新时间
	Timeout    int64 `protobuf:"varint,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`       //超时时间
	BlockSize  int64 `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`   //分块大小
	MaxSize    int64 `protobuf:"varint,4,opt,name=MaxSize,proto3" json:"MaxSize,omitempty"`       //上传的最大包（M）
	UpdateTime int64 `protobuf:"varint,5,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"` //更新时间，当是session-mode的时候涉及到session过期的问题
	IsSession  bool  `protobuf:"varint,6,opt,name=IsSession,proto3" json:"IsSession,omitempty"`   //是否是session类型
}

func (x *ShellOptions) Reset() {
	*x = ShellOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShellOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellOptions) ProtoMessage() {}

func (x *ShellOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellOptions.ProtoReflect.Descriptor instead.
func (*ShellOptions) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{280}
}

func (x *ShellOptions) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *ShellOptions) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ShellOptions) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *ShellOptions) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *ShellOptions) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ShellOptions) GetIsSession() bool {
	if x != nil {
		return x.IsSession
	}
	return false
}

type WebShellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *WebShellRequest) Reset() {
	*x = WebShellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebShellRequest) ProtoMessage() {}

func (x *WebShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebShellRequest.ProtoReflect.Descriptor instead.
func (*WebShellRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{281}
}

func (x *WebShellRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WebShellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State bool   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *WebShellResponse) Reset() {
	*x = WebShellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebShellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebShellResponse) ProtoMessage() {}

func (x *WebShellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebShellResponse.ProtoReflect.Descriptor instead.
func (*WebShellResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{282}
}

func (x *WebShellResponse) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *WebShellResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryWebShellsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Tag        string  `protobuf:"bytes,2,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *QueryWebShellsRequest) Reset() {
	*x = QueryWebShellsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWebShellsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWebShellsRequest) ProtoMessage() {}

func (x *QueryWebShellsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWebShellsRequest.ProtoReflect.Descriptor instead.
func (*QueryWebShellsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{283}
}

func (x *QueryWebShellsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryWebShellsRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type QueryWebShellsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging     `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64       `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*WebShell `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryWebShellsResponse) Reset() {
	*x = QueryWebShellsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWebShellsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWebShellsResponse) ProtoMessage() {}

func (x *QueryWebShellsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWebShellsResponse.ProtoReflect.Descriptor instead.
func (*QueryWebShellsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{284}
}

func (x *QueryWebShellsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryWebShellsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryWebShellsResponse) GetData() []*WebShell {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateWebShellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Url          string            `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	Pass         string            `protobuf:"bytes,3,opt,name=Pass,proto3" json:"Pass,omitempty"`
	SecretKey    string            `protobuf:"bytes,4,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	EncMode      string            `protobuf:"bytes,5,opt,name=EncMode,proto3" json:"EncMode,omitempty"`
	Charset      string            `protobuf:"bytes,6,opt,name=Charset,proto3" json:"Charset,omitempty"`
	ShellType    string            `protobuf:"bytes,7,opt,name=ShellType,proto3" json:"ShellType,omitempty"`
	ShellScript  string            `protobuf:"bytes,8,opt,name=ShellScript,proto3" json:"ShellScript,omitempty"`
	Tag          string            `protobuf:"bytes,10,opt,name=Tag,proto3" json:"Tag,omitempty"`
	ShellOptions *ShellOptions     `protobuf:"bytes,11,opt,name=ShellOptions,proto3" json:"ShellOptions,omitempty"`
	Os           string            `protobuf:"bytes,12,opt,name=Os,proto3" json:"Os,omitempty"`
	ResDataMOde  string            `protobuf:"bytes,13,opt,name=ResDataMOde,proto3" json:"ResDataMOde,omitempty"`
	Headers      map[string]string `protobuf:"bytes,14,rep,name=Headers,proto3" json:"Headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Posts        map[string]string `protobuf:"bytes,15,rep,name=Posts,proto3" json:"Posts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateWebShellRequest) Reset() {
	*x = UpdateWebShellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWebShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWebShellRequest) ProtoMessage() {}

func (x *UpdateWebShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWebShellRequest.ProtoReflect.Descriptor instead.
func (*UpdateWebShellRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{285}
}

func (x *UpdateWebShellRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateWebShellRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateWebShellRequest) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *UpdateWebShellRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *UpdateWebShellRequest) GetEncMode() string {
	if x != nil {
		return x.EncMode
	}
	return ""
}

func (x *UpdateWebShellRequest) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *UpdateWebShellRequest) GetShellType() string {
	if x != nil {
		return x.ShellType
	}
	return ""
}

func (x *UpdateWebShellRequest) GetShellScript() string {
	if x != nil {
		return x.ShellScript
	}
	return ""
}

func (x *UpdateWebShellRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UpdateWebShellRequest) GetShellOptions() *ShellOptions {
	if x != nil {
		return x.ShellOptions
	}
	return nil
}

func (x *UpdateWebShellRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *UpdateWebShellRequest) GetResDataMOde() string {
	if x != nil {
		return x.ResDataMOde
	}
	return ""
}

func (x *UpdateWebShellRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *UpdateWebShellRequest) GetPosts() map[string]string {
	if x != nil {
		return x.Posts
	}
	return nil
}

type DeleteWebShellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Ids []int64 `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeleteWebShellRequest) Reset() {
	*x = DeleteWebShellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebShellRequest) ProtoMessage() {}

func (x *DeleteWebShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebShellRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebShellRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{286}
}

func (x *DeleteWebShellRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteWebShellRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type YakDNSLogBridgeAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DNSLogAddr       string `protobuf:"bytes,1,opt,name=DNSLogAddr,proto3" json:"DNSLogAddr,omitempty"`
	DNSLogAddrSecret string `protobuf:"bytes,2,opt,name=DNSLogAddrSecret,proto3" json:"DNSLogAddrSecret,omitempty"`
	DNSMode          string `protobuf:"bytes,3,opt,name=DNSMode,proto3" json:"DNSMode,omitempty"`
	UseLocal         bool   `protobuf:"varint,4,opt,name=UseLocal,proto3" json:"UseLocal,omitempty"`
	UseRemote        bool   `protobuf:"varint,5,opt,name=UseRemote,proto3" json:"UseRemote,omitempty"`
}

func (x *YakDNSLogBridgeAddr) Reset() {
	*x = YakDNSLogBridgeAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakDNSLogBridgeAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakDNSLogBridgeAddr) ProtoMessage() {}

func (x *YakDNSLogBridgeAddr) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakDNSLogBridgeAddr.ProtoReflect.Descriptor instead.
func (*YakDNSLogBridgeAddr) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{287}
}

func (x *YakDNSLogBridgeAddr) GetDNSLogAddr() string {
	if x != nil {
		return x.DNSLogAddr
	}
	return ""
}

func (x *YakDNSLogBridgeAddr) GetDNSLogAddrSecret() string {
	if x != nil {
		return x.DNSLogAddrSecret
	}
	return ""
}

func (x *YakDNSLogBridgeAddr) GetDNSMode() string {
	if x != nil {
		return x.DNSMode
	}
	return ""
}

func (x *YakDNSLogBridgeAddr) GetUseLocal() bool {
	if x != nil {
		return x.UseLocal
	}
	return false
}

func (x *YakDNSLogBridgeAddr) GetUseRemote() bool {
	if x != nil {
		return x.UseRemote
	}
	return false
}

type RequireDNSLogDomainByScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	ScriptName string `protobuf:"bytes,2,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
}

func (x *RequireDNSLogDomainByScriptRequest) Reset() {
	*x = RequireDNSLogDomainByScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireDNSLogDomainByScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireDNSLogDomainByScriptRequest) ProtoMessage() {}

func (x *RequireDNSLogDomainByScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireDNSLogDomainByScriptRequest.ProtoReflect.Descriptor instead.
func (*RequireDNSLogDomainByScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{288}
}

func (x *RequireDNSLogDomainByScriptRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireDNSLogDomainByScriptRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

type QueryDNSLogByTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	DNSLogAddr string `protobuf:"bytes,2,opt,name=DNSLogAddr,proto3" json:"DNSLogAddr,omitempty"`
	DNSMode    string `protobuf:"bytes,3,opt,name=DNSMode,proto3" json:"DNSMode,omitempty"`
	UseLocal   bool   `protobuf:"varint,4,opt,name=UseLocal,proto3" json:"UseLocal,omitempty"`
	UseRemote  bool   `protobuf:"varint,5,opt,name=UseRemote,proto3" json:"UseRemote,omitempty"`
}

func (x *QueryDNSLogByTokenRequest) Reset() {
	*x = QueryDNSLogByTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDNSLogByTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSLogByTokenRequest) ProtoMessage() {}

func (x *QueryDNSLogByTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSLogByTokenRequest.ProtoReflect.Descriptor instead.
func (*QueryDNSLogByTokenRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{289}
}

func (x *QueryDNSLogByTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryDNSLogByTokenRequest) GetDNSLogAddr() string {
	if x != nil {
		return x.DNSLogAddr
	}
	return ""
}

func (x *QueryDNSLogByTokenRequest) GetDNSMode() string {
	if x != nil {
		return x.DNSMode
	}
	return ""
}

func (x *QueryDNSLogByTokenRequest) GetUseLocal() bool {
	if x != nil {
		return x.UseLocal
	}
	return false
}

func (x *QueryDNSLogByTokenRequest) GetUseRemote() bool {
	if x != nil {
		return x.UseRemote
	}
	return false
}

type QueryDNSLogByTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*DNSLogEvent `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *QueryDNSLogByTokenResponse) Reset() {
	*x = QueryDNSLogByTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDNSLogByTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSLogByTokenResponse) ProtoMessage() {}

func (x *QueryDNSLogByTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSLogByTokenResponse.ProtoReflect.Descriptor instead.
func (*QueryDNSLogByTokenResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{290}
}

func (x *QueryDNSLogByTokenResponse) GetEvents() []*DNSLogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type DNSLogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DNSType    string `protobuf:"bytes,1,opt,name=DNSType,proto3" json:"DNSType,omitempty"`
	Token      string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Domain     string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	RemoteAddr string `protobuf:"bytes,4,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP   string `protobuf:"bytes,5,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort int32  `protobuf:"varint,6,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	Raw        []byte `protobuf:"bytes,7,opt,name=Raw,proto3" json:"Raw,omitempty"`
	Timestamp  int64  `protobuf:"varint,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *DNSLogEvent) Reset() {
	*x = DNSLogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSLogEvent) ProtoMessage() {}

func (x *DNSLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSLogEvent.ProtoReflect.Descriptor instead.
func (*DNSLogEvent) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{291}
}

func (x *DNSLogEvent) GetDNSType() string {
	if x != nil {
		return x.DNSType
	}
	return ""
}

func (x *DNSLogEvent) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DNSLogEvent) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *DNSLogEvent) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *DNSLogEvent) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *DNSLogEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DNSLogRootDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *DNSLogRootDomain) Reset() {
	*x = DNSLogRootDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSLogRootDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSLogRootDomain) ProtoMessage() {}

func (x *DNSLogRootDomain) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSLogRootDomain.ProtoReflect.Descriptor instead.
func (*DNSLogRootDomain) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{292}
}

func (x *DNSLogRootDomain) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSLogRootDomain) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetGlobalReverseServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicReverseIP   string `protobuf:"bytes,1,opt,name=PublicReverseIP,proto3" json:"PublicReverseIP,omitempty"`
	PublicReversePort int32  `protobuf:"varint,2,opt,name=PublicReversePort,proto3" json:"PublicReversePort,omitempty"`
	LocalReverseAddr  string `protobuf:"bytes,3,opt,name=LocalReverseAddr,proto3" json:"LocalReverseAddr,omitempty"`
	LocalReversePort  int32  `protobuf:"varint,4,opt,name=LocalReversePort,proto3" json:"LocalReversePort,omitempty"`
}

func (x *GetGlobalReverseServerResponse) Reset() {
	*x = GetGlobalReverseServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalReverseServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalReverseServerResponse) ProtoMessage() {}

func (x *GetGlobalReverseServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalReverseServerResponse.ProtoReflect.Descriptor instead.
func (*GetGlobalReverseServerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{293}
}

func (x *GetGlobalReverseServerResponse) GetPublicReverseIP() string {
	if x != nil {
		return x.PublicReverseIP
	}
	return ""
}

func (x *GetGlobalReverseServerResponse) GetPublicReversePort() int32 {
	if x != nil {
		return x.PublicReversePort
	}
	return 0
}

func (x *GetGlobalReverseServerResponse) GetLocalReverseAddr() string {
	if x != nil {
		return x.LocalReverseAddr
	}
	return ""
}

func (x *GetGlobalReverseServerResponse) GetLocalReversePort() int32 {
	if x != nil {
		return x.LocalReversePort
	}
	return 0
}

type AvailableLocalAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*NetInterface `protobuf:"bytes,1,rep,name=Interfaces,proto3" json:"Interfaces,omitempty"`
}

func (x *AvailableLocalAddrResponse) Reset() {
	*x = AvailableLocalAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableLocalAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableLocalAddrResponse) ProtoMessage() {}

func (x *AvailableLocalAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableLocalAddrResponse.ProtoReflect.Descriptor instead.
func (*AvailableLocalAddrResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{294}
}

func (x *AvailableLocalAddrResponse) GetInterfaces() []*NetInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type NetInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Addr             string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	IP               string `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
	Description      string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	IsIpv4           bool   `protobuf:"varint,5,opt,name=IsIpv4,proto3" json:"IsIpv4,omitempty"`
	IsIpv6           bool   `protobuf:"varint,6,opt,name=IsIpv6,proto3" json:"IsIpv6,omitempty"`
	NetInterfaceName string `protobuf:"bytes,7,opt,name=NetInterfaceName,proto3" json:"NetInterfaceName,omitempty"`
}

func (x *NetInterface) Reset() {
	*x = NetInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface) ProtoMessage() {}

func (x *NetInterface) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface.ProtoReflect.Descriptor instead.
func (*NetInterface) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{295}
}

func (x *NetInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetInterface) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *NetInterface) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *NetInterface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetInterface) GetIsIpv4() bool {
	if x != nil {
		return x.IsIpv4
	}
	return false
}

func (x *NetInterface) GetIsIpv6() bool {
	if x != nil {
		return x.IsIpv6
	}
	return false
}

func (x *NetInterface) GetNetInterfaceName() string {
	if x != nil {
		return x.NetInterfaceName
	}
	return ""
}

type ConfigGlobalReverseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectParams *GetTunnelServerExternalIPParams `protobuf:"bytes,1,opt,name=ConnectParams,proto3" json:"ConnectParams,omitempty"`
	LocalAddr     string                           `protobuf:"bytes,2,opt,name=LocalAddr,proto3" json:"LocalAddr,omitempty"`
}

func (x *ConfigGlobalReverseParams) Reset() {
	*x = ConfigGlobalReverseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGlobalReverseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGlobalReverseParams) ProtoMessage() {}

func (x *ConfigGlobalReverseParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGlobalReverseParams.ProtoReflect.Descriptor instead.
func (*ConfigGlobalReverseParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{296}
}

func (x *ConfigGlobalReverseParams) GetConnectParams() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

func (x *ConfigGlobalReverseParams) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

type DeleteRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash             string             `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Ids              []int64            `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Filter           *QueryRisksRequest `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	DeleteAll        bool               `protobuf:"varint,5,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DeleteRepetition bool               `protobuf:"varint,6,opt,name=DeleteRepetition,proto3" json:"DeleteRepetition,omitempty"`
}

func (x *DeleteRiskRequest) Reset() {
	*x = DeleteRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRiskRequest) ProtoMessage() {}

func (x *DeleteRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRiskRequest.ProtoReflect.Descriptor instead.
func (*DeleteRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{297}
}

func (x *DeleteRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DeleteRiskRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteRiskRequest) GetFilter() *QueryRisksRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteRiskRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteRiskRequest) GetDeleteRepetition() bool {
	if x != nil {
		return x.DeleteRepetition
	}
	return false
}

type QueryRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash   string             `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Ids    []int64            `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Filter *QueryRisksRequest `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QueryRiskRequest) Reset() {
	*x = QueryRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRiskRequest) ProtoMessage() {}

func (x *QueryRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRiskRequest.ProtoReflect.Descriptor instead.
func (*QueryRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{298}
}

func (x *QueryRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *QueryRiskRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryRiskRequest) GetFilter() *QueryRisksRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

type Risk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash            string `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	IP              string `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Url             string `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	Port            int32  `protobuf:"varint,4,opt,name=Port,proto3" json:"Port,omitempty"`
	Host            string `protobuf:"bytes,5,opt,name=Host,proto3" json:"Host,omitempty"`
	Title           string `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleVerbose    string `protobuf:"bytes,7,opt,name=TitleVerbose,proto3" json:"TitleVerbose,omitempty"`
	RiskType        string `protobuf:"bytes,8,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	RiskTypeVerbose string `protobuf:"bytes,9,opt,name=RiskTypeVerbose,proto3" json:"RiskTypeVerbose,omitempty"`
	Parameter       string `protobuf:"bytes,10,opt,name=Parameter,proto3" json:"Parameter,omitempty"`
	Payload         string `protobuf:"bytes,11,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Details         string `protobuf:"bytes,12,opt,name=Details,proto3" json:"Details,omitempty"`
	FromYakScript   string `protobuf:"bytes,13,opt,name=FromYakScript,proto3" json:"FromYakScript,omitempty"`
	YakScriptUUID   string `protobuf:"bytes,29,opt,name=YakScriptUUID,proto3" json:"YakScriptUUID,omitempty"`
	WaitingVerified bool   `protobuf:"varint,14,opt,name=WaitingVerified,proto3" json:"WaitingVerified,omitempty"`
	ReverseToken    string `protobuf:"bytes,15,opt,name=ReverseToken,proto3" json:"ReverseToken,omitempty"`
	Id              int64  `protobuf:"varint,18,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt       int64  `protobuf:"varint,16,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       int64  `protobuf:"varint,17,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Severity        string `protobuf:"bytes,19,opt,name=Severity,proto3" json:"Severity,omitempty"`
	// 数据包提取出来！
	Request  []byte `protobuf:"bytes,20,opt,name=Request,proto3" json:"Request,omitempty"`
	Response []byte `protobuf:"bytes,21,opt,name=Response,proto3" json:"Response,omitempty"`
	// 这个一般用于生成报告追踪报告中产生的漏洞
	RuntimeId          string `protobuf:"bytes,22,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	CVE                string `protobuf:"bytes,23,opt,name=CVE,proto3" json:"CVE,omitempty"`
	Description        string `protobuf:"bytes,24,opt,name=Description,proto3" json:"Description,omitempty"`
	Solution           string `protobuf:"bytes,25,opt,name=Solution,proto3" json:"Solution,omitempty"`
	TaskName           string `protobuf:"bytes,26,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	Tags               string `protobuf:"bytes,27,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsRead             bool   `protobuf:"varint,28,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
	ResultID           uint64 `protobuf:"varint,30,opt,name=ResultID,proto3" json:"ResultID,omitempty"`
	SyntaxFlowVariable string `protobuf:"bytes,31,opt,name=SyntaxFlowVariable,proto3" json:"SyntaxFlowVariable,omitempty"`
	ProgramName        string `protobuf:"bytes,32,opt,name=ProgramName,proto3" json:"ProgramName,omitempty"`
}

func (x *Risk) Reset() {
	*x = Risk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Risk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Risk) ProtoMessage() {}

func (x *Risk) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Risk.ProtoReflect.Descriptor instead.
func (*Risk) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{299}
}

func (x *Risk) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Risk) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Risk) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Risk) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Risk) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Risk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Risk) GetTitleVerbose() string {
	if x != nil {
		return x.TitleVerbose
	}
	return ""
}

func (x *Risk) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *Risk) GetRiskTypeVerbose() string {
	if x != nil {
		return x.RiskTypeVerbose
	}
	return ""
}

func (x *Risk) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *Risk) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Risk) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Risk) GetFromYakScript() string {
	if x != nil {
		return x.FromYakScript
	}
	return ""
}

func (x *Risk) GetYakScriptUUID() string {
	if x != nil {
		return x.YakScriptUUID
	}
	return ""
}

func (x *Risk) GetWaitingVerified() bool {
	if x != nil {
		return x.WaitingVerified
	}
	return false
}

func (x *Risk) GetReverseToken() string {
	if x != nil {
		return x.ReverseToken
	}
	return ""
}

func (x *Risk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Risk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Risk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Risk) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Risk) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Risk) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Risk) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *Risk) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *Risk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Risk) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *Risk) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Risk) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Risk) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *Risk) GetResultID() uint64 {
	if x != nil {
		return x.ResultID
	}
	return 0
}

func (x *Risk) GetSyntaxFlowVariable() string {
	if x != nil {
		return x.SyntaxFlowVariable
	}
	return ""
}

func (x *Risk) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

type QueryRisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination      *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Search          string  `protobuf:"bytes,2,opt,name=Search,proto3" json:"Search,omitempty"`
	Network         string  `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	Ports           string  `protobuf:"bytes,4,opt,name=Ports,proto3" json:"Ports,omitempty"`
	RiskType        string  `protobuf:"bytes,5,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	Token           string  `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	WaitingVerified bool    `protobuf:"varint,7,opt,name=WaitingVerified,proto3" json:"WaitingVerified,omitempty"`
	Severity        string  `protobuf:"bytes,8,opt,name=Severity,proto3" json:"Severity,omitempty"`
	FromId          int64   `protobuf:"varint,9,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId         int64   `protobuf:"varint,10,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
	Tags            string  `protobuf:"bytes,11,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsRead          string  `protobuf:"bytes,12,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
	Title           string  `protobuf:"bytes,13,opt,name=Title,proto3" json:"Title,omitempty"`
	Ids             []int64 `protobuf:"varint,14,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	RuntimeId       string  `protobuf:"bytes,15,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	// ssa program
	SSAProgramNames []string `protobuf:"bytes,16,rep,name=SSAProgramNames,proto3" json:"SSAProgramNames,omitempty"`
}

func (x *QueryRisksRequest) Reset() {
	*x = QueryRisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRisksRequest) ProtoMessage() {}

func (x *QueryRisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRisksRequest.ProtoReflect.Descriptor instead.
func (*QueryRisksRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{300}
}

func (x *QueryRisksRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryRisksRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *QueryRisksRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *QueryRisksRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *QueryRisksRequest) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *QueryRisksRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryRisksRequest) GetWaitingVerified() bool {
	if x != nil {
		return x.WaitingVerified
	}
	return false
}

func (x *QueryRisksRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *QueryRisksRequest) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QueryRisksRequest) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

func (x *QueryRisksRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *QueryRisksRequest) GetIsRead() string {
	if x != nil {
		return x.IsRead
	}
	return ""
}

func (x *QueryRisksRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryRisksRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryRisksRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *QueryRisksRequest) GetSSAProgramNames() []string {
	if x != nil {
		return x.SSAProgramNames
	}
	return nil
}

type QueryRisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64   `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Risk `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryRisksResponse) Reset() {
	*x = QueryRisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRisksResponse) ProtoMessage() {}

func (x *QueryRisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRisksResponse.ProtoReflect.Descriptor instead.
func (*QueryRisksResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{301}
}

func (x *QueryRisksResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryRisksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryRisksResponse) GetData() []*Risk {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryNewRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfterId int64 `protobuf:"varint,1,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
}

func (x *QueryNewRiskRequest) Reset() {
	*x = QueryNewRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNewRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewRiskRequest) ProtoMessage() {}

func (x *QueryNewRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewRiskRequest.ProtoReflect.Descriptor instead.
func (*QueryNewRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{302}
}

func (x *QueryNewRiskRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

type QueryNewRiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []*NewRisk `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	NewRiskTotal int64      `protobuf:"varint,2,opt,name=NewRiskTotal,proto3" json:"NewRiskTotal,omitempty"`
	Total        int64      `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Unread       int64      `protobuf:"varint,4,opt,name=Unread,proto3" json:"Unread,omitempty"`
}

func (x *QueryNewRiskResponse) Reset() {
	*x = QueryNewRiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNewRiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewRiskResponse) ProtoMessage() {}

func (x *QueryNewRiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewRiskResponse.ProtoReflect.Descriptor instead.
func (*QueryNewRiskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{303}
}

func (x *QueryNewRiskResponse) GetData() []*NewRisk {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryNewRiskResponse) GetNewRiskTotal() int64 {
	if x != nil {
		return x.NewRiskTotal
	}
	return 0
}

func (x *QueryNewRiskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryNewRiskResponse) GetUnread() int64 {
	if x != nil {
		return x.Unread
	}
	return 0
}

type QueryRiskTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiskTags []*FieldGroup `protobuf:"bytes,1,rep,name=RiskTags,proto3" json:"RiskTags,omitempty"`
}

func (x *QueryRiskTagsResponse) Reset() {
	*x = QueryRiskTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRiskTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRiskTagsResponse) ProtoMessage() {}

func (x *QueryRiskTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRiskTagsResponse.ProtoReflect.Descriptor instead.
func (*QueryRiskTagsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{304}
}

func (x *QueryRiskTagsResponse) GetRiskTags() []*FieldGroup {
	if x != nil {
		return x.RiskTags
	}
	return nil
}

type RiskFieldGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiskIPGroup    []*FieldGroup `protobuf:"bytes,1,rep,name=RiskIPGroup,proto3" json:"RiskIPGroup,omitempty"`
	RiskLevelGroup []*FieldName  `protobuf:"bytes,2,rep,name=RiskLevelGroup,proto3" json:"RiskLevelGroup,omitempty"`
	RiskTypeGroup  []*FieldName  `protobuf:"bytes,3,rep,name=RiskTypeGroup,proto3" json:"RiskTypeGroup,omitempty"`
}

func (x *RiskFieldGroupResponse) Reset() {
	*x = RiskFieldGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskFieldGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFieldGroupResponse) ProtoMessage() {}

func (x *RiskFieldGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFieldGroupResponse.ProtoReflect.Descriptor instead.
func (*RiskFieldGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{305}
}

func (x *RiskFieldGroupResponse) GetRiskIPGroup() []*FieldGroup {
	if x != nil {
		return x.RiskIPGroup
	}
	return nil
}

func (x *RiskFieldGroupResponse) GetRiskLevelGroup() []*FieldName {
	if x != nil {
		return x.RiskLevelGroup
	}
	return nil
}

func (x *RiskFieldGroupResponse) GetRiskTypeGroup() []*FieldName {
	if x != nil {
		return x.RiskTypeGroup
	}
	return nil
}

type FieldGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *FieldGroup) Reset() {
	*x = FieldGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldGroup) ProtoMessage() {}

func (x *FieldGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldGroup.ProtoReflect.Descriptor instead.
func (*FieldGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{306}
}

func (x *FieldGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldGroup) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type NewRisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt    int64  `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,4,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Verbose      string `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	TitleVerbose string `protobuf:"bytes,6,opt,name=TitleVerbose,proto3" json:"TitleVerbose,omitempty"`
	IsRead       bool   `protobuf:"varint,7,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
}

func (x *NewRisk) Reset() {
	*x = NewRisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRisk) ProtoMessage() {}

func (x *NewRisk) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRisk.ProtoReflect.Descriptor instead.
func (*NewRisk) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{307}
}

func (x *NewRisk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewRisk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewRisk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NewRisk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *NewRisk) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *NewRisk) GetTitleVerbose() string {
	if x != nil {
		return x.TitleVerbose
	}
	return ""
}

func (x *NewRisk) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

type NewRiskReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfterId int64   `protobuf:"varint,1,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	Ids     []int64 `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *NewRiskReadRequest) Reset() {
	*x = NewRiskReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRiskReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRiskReadRequest) ProtoMessage() {}

func (x *NewRiskReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRiskReadRequest.ProtoReflect.Descriptor instead.
func (*NewRiskReadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{308}
}

func (x *NewRiskReadRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *NewRiskReadRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UploadRiskToOnlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
}

func (x *UploadRiskToOnlineRequest) Reset() {
	*x = UploadRiskToOnlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRiskToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRiskToOnlineRequest) ProtoMessage() {}

func (x *UploadRiskToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRiskToOnlineRequest.ProtoReflect.Descriptor instead.
func (*UploadRiskToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{309}
}

func (x *UploadRiskToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UploadRiskToOnlineRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type SetTagForRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash string   `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags []string `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *SetTagForRiskRequest) Reset() {
	*x = SetTagForRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTagForRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagForRiskRequest) ProtoMessage() {}

func (x *SetTagForRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagForRiskRequest.ProtoReflect.Descriptor instead.
func (*SetTagForRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{310}
}

func (x *SetTagForRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetTagForRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SetTagForRiskRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VerifyTunnelServerDomainParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectParams *GetTunnelServerExternalIPParams `protobuf:"bytes,1,opt,name=ConnectParams,proto3" json:"ConnectParams,omitempty"`
	Domain        string                           `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`
}

func (x *VerifyTunnelServerDomainParams) Reset() {
	*x = VerifyTunnelServerDomainParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTunnelServerDomainParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTunnelServerDomainParams) ProtoMessage() {}

func (x *VerifyTunnelServerDomainParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTunnelServerDomainParams.ProtoReflect.Descriptor instead.
func (*VerifyTunnelServerDomainParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{311}
}

func (x *VerifyTunnelServerDomainParams) GetConnectParams() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

func (x *VerifyTunnelServerDomainParams) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type VerifyTunnelServerDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Ok     bool   `protobuf:"varint,2,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *VerifyTunnelServerDomainResponse) Reset() {
	*x = VerifyTunnelServerDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTunnelServerDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTunnelServerDomainResponse) ProtoMessage() {}

func (x *VerifyTunnelServerDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTunnelServerDomainResponse.ProtoReflect.Descriptor instead.
func (*VerifyTunnelServerDomainResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{312}
}

func (x *VerifyTunnelServerDomainResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VerifyTunnelServerDomainResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *VerifyTunnelServerDomainResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetTunnelServerExternalIPParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=Secret,proto3" json:"Secret,omitempty"`
}

func (x *GetTunnelServerExternalIPParams) Reset() {
	*x = GetTunnelServerExternalIPParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelServerExternalIPParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelServerExternalIPParams) ProtoMessage() {}

func (x *GetTunnelServerExternalIPParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelServerExternalIPParams.ProtoReflect.Descriptor instead.
func (*GetTunnelServerExternalIPParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{313}
}

func (x *GetTunnelServerExternalIPParams) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *GetTunnelServerExternalIPParams) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type GetTunnelServerExternalIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *GetTunnelServerExternalIPResponse) Reset() {
	*x = GetTunnelServerExternalIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelServerExternalIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelServerExternalIPResponse) ProtoMessage() {}

func (x *GetTunnelServerExternalIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelServerExternalIPResponse.ProtoReflect.Descriptor instead.
func (*GetTunnelServerExternalIPResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{314}
}

func (x *GetTunnelServerExternalIPResponse) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type StartFacadesParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 端口复用的
	LocalFacadeHost string `protobuf:"bytes,41,opt,name=LocalFacadeHost,proto3" json:"LocalFacadeHost,omitempty"`
	LocalFacadePort int32  `protobuf:"varint,42,opt,name=LocalFacadePort,proto3" json:"LocalFacadePort,omitempty"`
	// bool EnableRMIServer = 1;
	// int32 RMILocalPort = 2;
	EnableDNSLogServer bool  `protobuf:"varint,3,opt,name=EnableDNSLogServer,proto3" json:"EnableDNSLogServer,omitempty"`
	DNSLogLocalPort    int32 `protobuf:"varint,4,opt,name=DNSLogLocalPort,proto3" json:"DNSLogLocalPort,omitempty"`
	// 连接远程端口参数
	ConnectParam *GetTunnelServerExternalIPParams `protobuf:"bytes,5,opt,name=ConnectParam,proto3" json:"ConnectParam,omitempty"`
	// 远端端口开放情况
	//
	//	int32 RMIRemotePort = 6;
	FacadeRemotePort int32 `protobuf:"varint,16,opt,name=FacadeRemotePort,proto3" json:"FacadeRemotePort,omitempty"`
	DNSLogRemotePort int32 `protobuf:"varint,7,opt,name=DNSLogRemotePort,proto3" json:"DNSLogRemotePort,omitempty"`
	// 外部域名
	ExternalDomain string `protobuf:"bytes,8,opt,name=ExternalDomain,proto3" json:"ExternalDomain,omitempty"`
	// 验证端口是否转发成功
	Verify bool `protobuf:"varint,9,opt,name=Verify,proto3" json:"Verify,omitempty"`
}

func (x *StartFacadesParams) Reset() {
	*x = StartFacadesParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFacadesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFacadesParams) ProtoMessage() {}

func (x *StartFacadesParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFacadesParams.ProtoReflect.Descriptor instead.
func (*StartFacadesParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{315}
}

func (x *StartFacadesParams) GetLocalFacadeHost() string {
	if x != nil {
		return x.LocalFacadeHost
	}
	return ""
}

func (x *StartFacadesParams) GetLocalFacadePort() int32 {
	if x != nil {
		return x.LocalFacadePort
	}
	return 0
}

func (x *StartFacadesParams) GetEnableDNSLogServer() bool {
	if x != nil {
		return x.EnableDNSLogServer
	}
	return false
}

func (x *StartFacadesParams) GetDNSLogLocalPort() int32 {
	if x != nil {
		return x.DNSLogLocalPort
	}
	return 0
}

func (x *StartFacadesParams) GetConnectParam() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParam
	}
	return nil
}

func (x *StartFacadesParams) GetFacadeRemotePort() int32 {
	if x != nil {
		return x.FacadeRemotePort
	}
	return 0
}

func (x *StartFacadesParams) GetDNSLogRemotePort() int32 {
	if x != nil {
		return x.DNSLogRemotePort
	}
	return 0
}

func (x *StartFacadesParams) GetExternalDomain() string {
	if x != nil {
		return x.ExternalDomain
	}
	return ""
}

func (x *StartFacadesParams) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

type ApplyClassToFacadesParamsWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerateClassParams *YsoOptionsRequerstWithVerbose `protobuf:"bytes,1,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
	Token               string                         `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ApplyClassToFacadesParamsWithVerbose) Reset() {
	*x = ApplyClassToFacadesParamsWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyClassToFacadesParamsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyClassToFacadesParamsWithVerbose) ProtoMessage() {}

func (x *ApplyClassToFacadesParamsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyClassToFacadesParamsWithVerbose.ProtoReflect.Descriptor instead.
func (*ApplyClassToFacadesParamsWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{316}
}

func (x *ApplyClassToFacadesParamsWithVerbose) GetGenerateClassParams() *YsoOptionsRequerstWithVerbose {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

func (x *ApplyClassToFacadesParamsWithVerbose) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 已弃用
type ApplyClassToFacadesParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerateClassParams *YsoOptionsRequerst `protobuf:"bytes,1,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
	Token               string              `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ApplyClassToFacadesParams) Reset() {
	*x = ApplyClassToFacadesParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyClassToFacadesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyClassToFacadesParams) ProtoMessage() {}

func (x *ApplyClassToFacadesParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyClassToFacadesParams.ProtoReflect.Descriptor instead.
func (*ApplyClassToFacadesParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{317}
}

func (x *ApplyClassToFacadesParams) GetGenerateClassParams() *YsoOptionsRequerst {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

func (x *ApplyClassToFacadesParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type StartFacadesWithYsoParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 端口复用的
	IsRemote            bool                             `protobuf:"varint,1,opt,name=IsRemote,proto3" json:"IsRemote,omitempty"`
	ReversePort         int32                            `protobuf:"varint,2,opt,name=ReversePort,proto3" json:"ReversePort,omitempty"`
	ReverseHost         string                           `protobuf:"bytes,4,opt,name=ReverseHost,proto3" json:"ReverseHost,omitempty"`
	Token               string                           `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
	BridgeParam         *GetTunnelServerExternalIPParams `protobuf:"bytes,6,opt,name=BridgeParam,proto3" json:"BridgeParam,omitempty"`
	GenerateClassParams *YsoOptionsRequerst              `protobuf:"bytes,7,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
}

func (x *StartFacadesWithYsoParams) Reset() {
	*x = StartFacadesWithYsoParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFacadesWithYsoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFacadesWithYsoParams) ProtoMessage() {}

func (x *StartFacadesWithYsoParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFacadesWithYsoParams.ProtoReflect.Descriptor instead.
func (*StartFacadesWithYsoParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{318}
}

func (x *StartFacadesWithYsoParams) GetIsRemote() bool {
	if x != nil {
		return x.IsRemote
	}
	return false
}

func (x *StartFacadesWithYsoParams) GetReversePort() int32 {
	if x != nil {
		return x.ReversePort
	}
	return 0
}

func (x *StartFacadesWithYsoParams) GetReverseHost() string {
	if x != nil {
		return x.ReverseHost
	}
	return ""
}

func (x *StartFacadesWithYsoParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StartFacadesWithYsoParams) GetBridgeParam() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.BridgeParam
	}
	return nil
}

func (x *StartFacadesWithYsoParams) GetGenerateClassParams() *YsoOptionsRequerst {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Data     string  `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Children []*Tree `protobuf:"bytes,3,rep,name=Children,proto3" json:"Children,omitempty"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{319}
}

func (x *Tree) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tree) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Tree) GetChildren() []*Tree {
	if x != nil {
		return x.Children
	}
	return nil
}

type GetAvailableBruteTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types          []string `protobuf:"bytes,1,rep,name=Types,proto3" json:"Types,omitempty"` // 弃用
	TypesWithChild []*Tree  `protobuf:"bytes,2,rep,name=TypesWithChild,proto3" json:"TypesWithChild,omitempty"`
}

func (x *GetAvailableBruteTypesResponse) Reset() {
	*x = GetAvailableBruteTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableBruteTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableBruteTypesResponse) ProtoMessage() {}

func (x *GetAvailableBruteTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableBruteTypesResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableBruteTypesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{320}
}

func (x *GetAvailableBruteTypesResponse) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GetAvailableBruteTypesResponse) GetTypesWithChild() []*Tree {
	if x != nil {
		return x.TypesWithChild
	}
	return nil
}

type StartBruteParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Targets    string `protobuf:"bytes,2,opt,name=Targets,proto3" json:"Targets,omitempty"`
	TargetFile string `protobuf:"bytes,3,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	// 设置如果用户输入了，就代替默认字典
	ReplaceDefaultUsernameDict bool     `protobuf:"varint,28,opt,name=ReplaceDefaultUsernameDict,proto3" json:"ReplaceDefaultUsernameDict,omitempty"`
	ReplaceDefaultPasswordDict bool     `protobuf:"varint,29,opt,name=ReplaceDefaultPasswordDict,proto3" json:"ReplaceDefaultPasswordDict,omitempty"`
	Usernames                  []string `protobuf:"bytes,4,rep,name=Usernames,proto3" json:"Usernames,omitempty"`
	UsernameFile               string   `protobuf:"bytes,24,opt,name=UsernameFile,proto3" json:"UsernameFile,omitempty"`
	Passwords                  []string `protobuf:"bytes,5,rep,name=Passwords,proto3" json:"Passwords,omitempty"`
	PasswordFile               string   `protobuf:"bytes,25,opt,name=PasswordFile,proto3" json:"PasswordFile,omitempty"`
	Prefix                     []string `protobuf:"bytes,6,rep,name=Prefix,proto3" json:"Prefix,omitempty"`
	Timeout                    float32  `protobuf:"fixed32,7,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// 每个目标之间的并发
	Concurrent int64 `protobuf:"varint,8,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	Retry      int64 `protobuf:"varint,9,opt,name=Retry,proto3" json:"Retry,omitempty"`
	// 目标任务内并发
	TargetTaskConcurrent int64  `protobuf:"varint,10,opt,name=TargetTaskConcurrent,proto3" json:"TargetTaskConcurrent,omitempty"`
	OkToStop             bool   `protobuf:"varint,11,opt,name=OkToStop,proto3" json:"OkToStop,omitempty"`
	DelayMin             int64  `protobuf:"varint,12,opt,name=DelayMin,proto3" json:"DelayMin,omitempty"`
	DelayMax             int64  `protobuf:"varint,13,opt,name=DelayMax,proto3" json:"DelayMax,omitempty"`
	PluginScriptName     string `protobuf:"bytes,14,opt,name=PluginScriptName,proto3" json:"PluginScriptName,omitempty"`
}

func (x *StartBruteParams) Reset() {
	*x = StartBruteParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBruteParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBruteParams) ProtoMessage() {}

func (x *StartBruteParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBruteParams.ProtoReflect.Descriptor instead.
func (*StartBruteParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{321}
}

func (x *StartBruteParams) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StartBruteParams) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *StartBruteParams) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *StartBruteParams) GetReplaceDefaultUsernameDict() bool {
	if x != nil {
		return x.ReplaceDefaultUsernameDict
	}
	return false
}

func (x *StartBruteParams) GetReplaceDefaultPasswordDict() bool {
	if x != nil {
		return x.ReplaceDefaultPasswordDict
	}
	return false
}

func (x *StartBruteParams) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *StartBruteParams) GetUsernameFile() string {
	if x != nil {
		return x.UsernameFile
	}
	return ""
}

func (x *StartBruteParams) GetPasswords() []string {
	if x != nil {
		return x.Passwords
	}
	return nil
}

func (x *StartBruteParams) GetPasswordFile() string {
	if x != nil {
		return x.PasswordFile
	}
	return ""
}

func (x *StartBruteParams) GetPrefix() []string {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *StartBruteParams) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *StartBruteParams) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *StartBruteParams) GetRetry() int64 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *StartBruteParams) GetTargetTaskConcurrent() int64 {
	if x != nil {
		return x.TargetTaskConcurrent
	}
	return 0
}

func (x *StartBruteParams) GetOkToStop() bool {
	if x != nil {
		return x.OkToStop
	}
	return false
}

func (x *StartBruteParams) GetDelayMin() int64 {
	if x != nil {
		return x.DelayMin
	}
	return 0
}

func (x *StartBruteParams) GetDelayMax() int64 {
	if x != nil {
		return x.DelayMax
	}
	return 0
}

func (x *StartBruteParams) GetPluginScriptName() string {
	if x != nil {
		return x.PluginScriptName
	}
	return ""
}

type HTTPRequestMutateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request     []byte   `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	FuzzMethods []string `protobuf:"bytes,2,rep,name=FuzzMethods,proto3" json:"FuzzMethods,omitempty"`
	// use chunk encode
	ChunkEncode bool `protobuf:"varint,3,opt,name=ChunkEncode,proto3" json:"ChunkEncode,omitempty"`
	// multipart boundary
	UploadEncode bool `protobuf:"varint,4,opt,name=UploadEncode,proto3" json:"UploadEncode,omitempty"`
}

func (x *HTTPRequestMutateParams) Reset() {
	*x = HTTPRequestMutateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestMutateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestMutateParams) ProtoMessage() {}

func (x *HTTPRequestMutateParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestMutateParams.ProtoReflect.Descriptor instead.
func (*HTTPRequestMutateParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{322}
}

func (x *HTTPRequestMutateParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPRequestMutateParams) GetFuzzMethods() []string {
	if x != nil {
		return x.FuzzMethods
	}
	return nil
}

func (x *HTTPRequestMutateParams) GetChunkEncode() bool {
	if x != nil {
		return x.ChunkEncode
	}
	return false
}

func (x *HTTPRequestMutateParams) GetUploadEncode() bool {
	if x != nil {
		return x.UploadEncode
	}
	return false
}

type HTTPResponseMutateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []byte `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *HTTPResponseMutateParams) Reset() {
	*x = HTTPResponseMutateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseMutateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseMutateParams) ProtoMessage() {}

func (x *HTTPResponseMutateParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseMutateParams.ProtoReflect.Descriptor instead.
func (*HTTPResponseMutateParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{323}
}

func (x *HTTPResponseMutateParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type MutateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       []byte   `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ExtraResults [][]byte `protobuf:"bytes,2,rep,name=ExtraResults,proto3" json:"ExtraResults,omitempty"`
}

func (x *MutateResult) Reset() {
	*x = MutateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateResult) ProtoMessage() {}

func (x *MutateResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateResult.ProtoReflect.Descriptor instead.
func (*MutateResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{324}
}

func (x *MutateResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MutateResult) GetExtraResults() [][]byte {
	if x != nil {
		return x.ExtraResults
	}
	return nil
}

type QueryHostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	DomainKeyword string  `protobuf:"bytes,2,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Network       string  `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
}

func (x *QueryHostsRequest) Reset() {
	*x = QueryHostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHostsRequest) ProtoMessage() {}

func (x *QueryHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHostsRequest.ProtoReflect.Descriptor instead.
func (*QueryHostsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{325}
}

func (x *QueryHostsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHostsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *QueryHostsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type DeleteHostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll     bool   `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DomainKeyword string `protobuf:"bytes,2,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Network       string `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	ID            int64  `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteHostsRequest) Reset() {
	*x = DeleteHostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostsRequest) ProtoMessage() {}

func (x *DeleteHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostsRequest.ProtoReflect.Descriptor instead.
func (*DeleteHostsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{326}
}

func (x *DeleteHostsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteHostsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *DeleteHostsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DeleteHostsRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type QueryHostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64   `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Host `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryHostsResponse) Reset() {
	*x = QueryHostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHostsResponse) ProtoMessage() {}

func (x *QueryHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHostsResponse.ProtoReflect.Descriptor instead.
func (*QueryHostsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{327}
}

func (x *QueryHostsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHostsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHostsResponse) GetData() []*Host {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Network       string  `protobuf:"bytes,2,opt,name=Network,proto3" json:"Network,omitempty"`
	DomainKeyword string  `protobuf:"bytes,3,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Title         string  `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	All           bool    `protobuf:"varint,5,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *QueryDomainsRequest) Reset() {
	*x = QueryDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDomainsRequest) ProtoMessage() {}

func (x *QueryDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDomainsRequest.ProtoReflect.Descriptor instead.
func (*QueryDomainsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{328}
}

func (x *QueryDomainsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryDomainsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *QueryDomainsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *QueryDomainsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryDomainsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type DeleteDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll     bool                 `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DomainKeyword string               `protobuf:"bytes,2,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Network       string               `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	ID            int64                `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Filter        *QueryDomainsRequest `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	IDs           []int64              `protobuf:"varint,6,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *DeleteDomainsRequest) Reset() {
	*x = DeleteDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDomainsRequest) ProtoMessage() {}

func (x *DeleteDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDomainsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDomainsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{329}
}

func (x *DeleteDomainsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteDomainsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *DeleteDomainsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DeleteDomainsRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DeleteDomainsRequest) GetFilter() *QueryDomainsRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteDomainsRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

type QueryDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging   `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64     `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Domain `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryDomainsResponse) Reset() {
	*x = QueryDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDomainsResponse) ProtoMessage() {}

func (x *QueryDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDomainsResponse.ProtoReflect.Descriptor instead.
func (*QueryDomainsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{330}
}

func (x *QueryDomainsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryDomainsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryDomainsResponse) GetData() []*Domain {
	if x != nil {
		return x.Data
	}
	return nil
}

type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DomainName string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`
	IPAddr     string `protobuf:"bytes,3,opt,name=IPAddr,proto3" json:"IPAddr,omitempty"`
	HTTPTitle  string `protobuf:"bytes,4,opt,name=HTTPTitle,proto3" json:"HTTPTitle,omitempty"`
}

func (x *Domain) Reset() {
	*x = Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{331}
}

func (x *Domain) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Domain) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Domain) GetIPAddr() string {
	if x != nil {
		return x.IPAddr
	}
	return ""
}

func (x *Domain) GetHTTPTitle() string {
	if x != nil {
		return x.HTTPTitle
	}
	return ""
}

type QueryPortsGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortsGroupList []*PortsGroup `protobuf:"bytes,1,rep,name=PortsGroupList,proto3" json:"PortsGroupList,omitempty"`
}

func (x *QueryPortsGroupResponse) Reset() {
	*x = QueryPortsGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPortsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortsGroupResponse) ProtoMessage() {}

func (x *QueryPortsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortsGroupResponse.ProtoReflect.Descriptor instead.
func (*QueryPortsGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{332}
}

func (x *QueryPortsGroupResponse) GetPortsGroupList() []*PortsGroup {
	if x != nil {
		return x.PortsGroupList
	}
	return nil
}

type PortsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName  string       `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	GroupLists []*GroupList `protobuf:"bytes,2,rep,name=GroupLists,proto3" json:"GroupLists,omitempty"`
}

func (x *PortsGroup) Reset() {
	*x = PortsGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortsGroup) ProtoMessage() {}

func (x *PortsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortsGroup.ProtoReflect.Descriptor instead.
func (*PortsGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{333}
}

func (x *PortsGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *PortsGroup) GetGroupLists() []*GroupList {
	if x != nil {
		return x.GroupLists
	}
	return nil
}

type GroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType     string `protobuf:"bytes,1,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	ShowServiceType string `protobuf:"bytes,2,opt,name=ShowServiceType,proto3" json:"ShowServiceType,omitempty"`
	Total           int32  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GroupList) Reset() {
	*x = GroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupList) ProtoMessage() {}

func (x *GroupList) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupList.ProtoReflect.Descriptor instead.
func (*GroupList) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{334}
}

func (x *GroupList) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *GroupList) GetShowServiceType() string {
	if x != nil {
		return x.ShowServiceType
	}
	return ""
}

func (x *GroupList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IP            string   `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	IPInteger     int64    `protobuf:"varint,3,opt,name=IPInteger,proto3" json:"IPInteger,omitempty"`
	IsInPublicNet bool     `protobuf:"varint,4,opt,name=IsInPublicNet,proto3" json:"IsInPublicNet,omitempty"`
	Domains       []string `protobuf:"bytes,5,rep,name=Domains,proto3" json:"Domains,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{335}
}

func (x *Host) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Host) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Host) GetIPInteger() int64 {
	if x != nil {
		return x.IPInteger
	}
	return 0
}

func (x *Host) GetIsInPublicNet() bool {
	if x != nil {
		return x.IsInPublicNet
	}
	return false
}

func (x *Host) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

type DownloadReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileData string `protobuf:"bytes,1,opt,name=FileData,proto3" json:"FileData,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileDir  string `protobuf:"bytes,3,opt,name=FileDir,proto3" json:"FileDir,omitempty"`
}

func (x *DownloadReportRequest) Reset() {
	*x = DownloadReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadReportRequest) ProtoMessage() {}

func (x *DownloadReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadReportRequest.ProtoReflect.Descriptor instead.
func (*DownloadReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{336}
}

func (x *DownloadReportRequest) GetFileData() string {
	if x != nil {
		return x.FileData
	}
	return ""
}

func (x *DownloadReportRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DownloadReportRequest) GetFileDir() string {
	if x != nil {
		return x.FileDir
	}
	return ""
}

type DeleteYakScriptExecResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            []int64 `protobuf:"varint,1,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	YakScriptName string  `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *DeleteYakScriptExecResultRequest) Reset() {
	*x = DeleteYakScriptExecResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteYakScriptExecResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptExecResultRequest) ProtoMessage() {}

func (x *DeleteYakScriptExecResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptExecResultRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptExecResultRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{337}
}

func (x *DeleteYakScriptExecResultRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteYakScriptExecResultRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type YakScriptNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptNames []string `protobuf:"bytes,1,rep,name=YakScriptNames,proto3" json:"YakScriptNames,omitempty"`
}

func (x *YakScriptNames) Reset() {
	*x = YakScriptNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptNames) ProtoMessage() {}

func (x *YakScriptNames) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptNames.ProtoReflect.Descriptor instead.
func (*YakScriptNames) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{338}
}

func (x *YakScriptNames) GetYakScriptNames() []string {
	if x != nil {
		return x.YakScriptNames
	}
	return nil
}

type QueryYakScriptExecResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	YakScriptName string  `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *QueryYakScriptExecResultRequest) Reset() {
	*x = QueryYakScriptExecResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptExecResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptExecResultRequest) ProtoMessage() {}

func (x *QueryYakScriptExecResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptExecResultRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptExecResultRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{339}
}

func (x *QueryYakScriptExecResultRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptExecResultRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type QueryYakScriptExecResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging       `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64         `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*ExecResult `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptExecResultResponse) Reset() {
	*x = QueryYakScriptExecResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptExecResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptExecResultResponse) ProtoMessage() {}

func (x *QueryYakScriptExecResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptExecResultResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptExecResultResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{340}
}

func (x *QueryYakScriptExecResultResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptExecResultResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryYakScriptExecResultResponse) GetData() []*ExecResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type GenerateWebsiteTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeDataJson []byte `protobuf:"bytes,1,opt,name=TreeDataJson,proto3" json:"TreeDataJson,omitempty"`
}

func (x *GenerateWebsiteTreeResponse) Reset() {
	*x = GenerateWebsiteTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateWebsiteTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWebsiteTreeResponse) ProtoMessage() {}

func (x *GenerateWebsiteTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWebsiteTreeResponse.ProtoReflect.Descriptor instead.
func (*GenerateWebsiteTreeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{341}
}

func (x *GenerateWebsiteTreeResponse) GetTreeDataJson() []byte {
	if x != nil {
		return x.TreeDataJson
	}
	return nil
}

type GenerateWebsiteTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets string `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
}

func (x *GenerateWebsiteTreeRequest) Reset() {
	*x = GenerateWebsiteTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateWebsiteTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWebsiteTreeRequest) ProtoMessage() {}

func (x *GenerateWebsiteTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWebsiteTreeRequest.ProtoReflect.Descriptor instead.
func (*GenerateWebsiteTreeRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{342}
}

func (x *GenerateWebsiteTreeRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

type StartBasicCrawlerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets             string `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
	TargetsFile         string `protobuf:"bytes,2,opt,name=TargetsFile,proto3" json:"TargetsFile,omitempty"`
	MaxDepth            string `protobuf:"bytes,3,opt,name=MaxDepth,proto3" json:"MaxDepth,omitempty"`
	MaxCountOfLinks     string `protobuf:"bytes,4,opt,name=MaxCountOfLinks,proto3" json:"MaxCountOfLinks,omitempty"`
	MaxCountOfRequest   string `protobuf:"bytes,5,opt,name=MaxCountOfRequest,proto3" json:"MaxCountOfRequest,omitempty"`
	DisallowSuffix      string `protobuf:"bytes,6,opt,name=DisallowSuffix,proto3" json:"DisallowSuffix,omitempty"`
	StartFromParentPath string `protobuf:"bytes,7,opt,name=StartFromParentPath,proto3" json:"StartFromParentPath,omitempty"`
	MaxRetryTimes       string `protobuf:"bytes,8,opt,name=MaxRetryTimes,proto3" json:"MaxRetryTimes,omitempty"`
	AllowMethods        string `protobuf:"bytes,9,opt,name=AllowMethods,proto3" json:"AllowMethods,omitempty"`
	AllowDomains        string `protobuf:"bytes,10,opt,name=AllowDomains,proto3" json:"AllowDomains,omitempty"`
	ForbiddenDomain     string `protobuf:"bytes,11,opt,name=ForbiddenDomain,proto3" json:"ForbiddenDomain,omitempty"`
	AllowUrlRegexp      string `protobuf:"bytes,12,opt,name=AllowUrlRegexp,proto3" json:"AllowUrlRegexp,omitempty"`
	ForbiddenUrlRegexp  string `protobuf:"bytes,13,opt,name=ForbiddenUrlRegexp,proto3" json:"ForbiddenUrlRegexp,omitempty"`
	UserAgent           string `protobuf:"bytes,14,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	// 基础认证
	BasicAuth         string `protobuf:"bytes,15,opt,name=BasicAuth,proto3" json:"BasicAuth,omitempty"`
	BasicAuthUsername string `protobuf:"bytes,16,opt,name=BasicAuthUsername,proto3" json:"BasicAuthUsername,omitempty"`
	BasicAuthPassword string `protobuf:"bytes,17,opt,name=BasicAuthPassword,proto3" json:"BasicAuthPassword,omitempty"`
	// Transport
	Proxies                []string      `protobuf:"bytes,18,rep,name=Proxies,proto3" json:"Proxies,omitempty"`
	Concurrent             int64         `protobuf:"varint,19,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	MaxRedirectTimes       int64         `protobuf:"varint,20,opt,name=MaxRedirectTimes,proto3" json:"MaxRedirectTimes,omitempty"`
	ConnectTimeoutSeconds  int64         `protobuf:"varint,21,opt,name=ConnectTimeoutSeconds,proto3" json:"ConnectTimeoutSeconds,omitempty"`
	ResponseTimeoutSeconds int64         `protobuf:"varint,22,opt,name=ResponseTimeoutSeconds,proto3" json:"ResponseTimeoutSeconds,omitempty"`
	Headers                []*HTTPHeader `protobuf:"bytes,23,rep,name=Headers,proto3" json:"Headers,omitempty"`
	Cookies                []*HTTPCookie `protobuf:"bytes,24,rep,name=Cookies,proto3" json:"Cookies,omitempty"`
}

func (x *StartBasicCrawlerRequest) Reset() {
	*x = StartBasicCrawlerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBasicCrawlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBasicCrawlerRequest) ProtoMessage() {}

func (x *StartBasicCrawlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBasicCrawlerRequest.ProtoReflect.Descriptor instead.
func (*StartBasicCrawlerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{343}
}

func (x *StartBasicCrawlerRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetTargetsFile() string {
	if x != nil {
		return x.TargetsFile
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxDepth() string {
	if x != nil {
		return x.MaxDepth
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxCountOfLinks() string {
	if x != nil {
		return x.MaxCountOfLinks
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxCountOfRequest() string {
	if x != nil {
		return x.MaxCountOfRequest
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetDisallowSuffix() string {
	if x != nil {
		return x.DisallowSuffix
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetStartFromParentPath() string {
	if x != nil {
		return x.StartFromParentPath
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxRetryTimes() string {
	if x != nil {
		return x.MaxRetryTimes
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetAllowMethods() string {
	if x != nil {
		return x.AllowMethods
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetAllowDomains() string {
	if x != nil {
		return x.AllowDomains
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetForbiddenDomain() string {
	if x != nil {
		return x.ForbiddenDomain
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetAllowUrlRegexp() string {
	if x != nil {
		return x.AllowUrlRegexp
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetForbiddenUrlRegexp() string {
	if x != nil {
		return x.ForbiddenUrlRegexp
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetBasicAuth() string {
	if x != nil {
		return x.BasicAuth
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetBasicAuthUsername() string {
	if x != nil {
		return x.BasicAuthUsername
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetBasicAuthPassword() string {
	if x != nil {
		return x.BasicAuthPassword
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetProxies() []string {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *StartBasicCrawlerRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetMaxRedirectTimes() int64 {
	if x != nil {
		return x.MaxRedirectTimes
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetConnectTimeoutSeconds() int64 {
	if x != nil {
		return x.ConnectTimeoutSeconds
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetResponseTimeoutSeconds() int64 {
	if x != nil {
		return x.ResponseTimeoutSeconds
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetHeaders() []*HTTPHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *StartBasicCrawlerRequest) GetCookies() []*HTTPCookie {
	if x != nil {
		return x.Cookies
	}
	return nil
}

type HTTPCookieSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	Domain   string `protobuf:"bytes,4,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Expires  int64  `protobuf:"varint,5,opt,name=Expires,proto3" json:"Expires,omitempty"`
	MaxAge   int64  `protobuf:"varint,6,opt,name=MaxAge,proto3" json:"MaxAge,omitempty"`
	Secure   bool   `protobuf:"varint,7,opt,name=Secure,proto3" json:"Secure,omitempty"`
	HttpOnly bool   `protobuf:"varint,8,opt,name=HttpOnly,proto3" json:"HttpOnly,omitempty"`
	// default
	// lax
	// strict
	// none
	SameSiteMode string `protobuf:"bytes,9,opt,name=SameSiteMode,proto3" json:"SameSiteMode,omitempty"`
}

func (x *HTTPCookieSetting) Reset() {
	*x = HTTPCookieSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPCookieSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPCookieSetting) ProtoMessage() {}

func (x *HTTPCookieSetting) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPCookieSetting.ProtoReflect.Descriptor instead.
func (*HTTPCookieSetting) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{344}
}

func (x *HTTPCookieSetting) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HTTPCookieSetting) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HTTPCookieSetting) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPCookieSetting) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HTTPCookieSetting) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *HTTPCookieSetting) GetMaxAge() int64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *HTTPCookieSetting) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *HTTPCookieSetting) GetHttpOnly() bool {
	if x != nil {
		return x.HttpOnly
	}
	return false
}

func (x *HTTPCookieSetting) GetSameSiteMode() string {
	if x != nil {
		return x.SameSiteMode
	}
	return ""
}

type HTTPCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	AllowOverride bool   `protobuf:"varint,3,opt,name=AllowOverride,proto3" json:"AllowOverride,omitempty"`
}

func (x *HTTPCookie) Reset() {
	*x = HTTPCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPCookie) ProtoMessage() {}

func (x *HTTPCookie) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPCookie.ProtoReflect.Descriptor instead.
func (*HTTPCookie) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{345}
}

func (x *HTTPCookie) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HTTPCookie) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HTTPCookie) GetAllowOverride() bool {
	if x != nil {
		return x.AllowOverride
	}
	return false
}

type ExportYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId     int64   `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	OutputDir       string  `protobuf:"bytes,2,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	OutputPluginDir string  `protobuf:"bytes,3,opt,name=OutputPluginDir,proto3" json:"OutputPluginDir,omitempty"`
	YakScriptIds    []int64 `protobuf:"varint,4,rep,packed,name=YakScriptIds,proto3" json:"YakScriptIds,omitempty"`
	All             bool    `protobuf:"varint,5,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *ExportYakScriptRequest) Reset() {
	*x = ExportYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptRequest) ProtoMessage() {}

func (x *ExportYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExportYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{346}
}

func (x *ExportYakScriptRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExportYakScriptRequest) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *ExportYakScriptRequest) GetOutputPluginDir() string {
	if x != nil {
		return x.OutputPluginDir
	}
	return ""
}

func (x *ExportYakScriptRequest) GetYakScriptIds() []int64 {
	if x != nil {
		return x.YakScriptIds
	}
	return nil
}

func (x *ExportYakScriptRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type ExportYakScriptStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter         *QueryYakScriptRequest `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	OutputFilename string                 `protobuf:"bytes,2,opt,name=OutputFilename,proto3" json:"OutputFilename,omitempty"`
	Password       string                 `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *ExportYakScriptStreamRequest) Reset() {
	*x = ExportYakScriptStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportYakScriptStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptStreamRequest) ProtoMessage() {}

func (x *ExportYakScriptStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptStreamRequest.ProtoReflect.Descriptor instead.
func (*ExportYakScriptStreamRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{347}
}

func (x *ExportYakScriptStreamRequest) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExportYakScriptStreamRequest) GetOutputFilename() string {
	if x != nil {
		return x.OutputFilename
	}
	return ""
}

func (x *ExportYakScriptStreamRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ImportYakScriptStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=Filename,proto3" json:"Filename,omitempty"`
}

func (x *ImportYakScriptStreamRequest) Reset() {
	*x = ImportYakScriptStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportYakScriptStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportYakScriptStreamRequest) ProtoMessage() {}

func (x *ImportYakScriptStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportYakScriptStreamRequest.ProtoReflect.Descriptor instead.
func (*ImportYakScriptStreamRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{348}
}

func (x *ImportYakScriptStreamRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImportYakScriptStreamRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ImportYakScriptStreamRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type ExportYakScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputDir string `protobuf:"bytes,2,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
}

func (x *ExportYakScriptResponse) Reset() {
	*x = ExportYakScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptResponse) ProtoMessage() {}

func (x *ExportYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptResponse.ProtoReflect.Descriptor instead.
func (*ExportYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{349}
}

func (x *ExportYakScriptResponse) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

type GetMarkdownDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script   *YakScript `protobuf:"bytes,1,opt,name=Script,proto3" json:"Script,omitempty"`
	Markdown string     `protobuf:"bytes,2,opt,name=Markdown,proto3" json:"Markdown,omitempty"`
}

func (x *GetMarkdownDocumentResponse) Reset() {
	*x = GetMarkdownDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkdownDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownDocumentResponse) ProtoMessage() {}

func (x *GetMarkdownDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetMarkdownDocumentResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{350}
}

func (x *GetMarkdownDocumentResponse) GetScript() *YakScript {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *GetMarkdownDocumentResponse) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

type GetMarkdownDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName string `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	YakScriptId   int64  `protobuf:"varint,2,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
}

func (x *GetMarkdownDocumentRequest) Reset() {
	*x = GetMarkdownDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkdownDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownDocumentRequest) ProtoMessage() {}

func (x *GetMarkdownDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetMarkdownDocumentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{351}
}

func (x *GetMarkdownDocumentRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *GetMarkdownDocumentRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

type SaveMarkdownDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName string `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	YakScriptId   int64  `protobuf:"varint,2,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Markdown      string `protobuf:"bytes,3,opt,name=Markdown,proto3" json:"Markdown,omitempty"`
}

func (x *SaveMarkdownDocumentRequest) Reset() {
	*x = SaveMarkdownDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveMarkdownDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveMarkdownDocumentRequest) ProtoMessage() {}

func (x *SaveMarkdownDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveMarkdownDocumentRequest.ProtoReflect.Descriptor instead.
func (*SaveMarkdownDocumentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{352}
}

func (x *SaveMarkdownDocumentRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *SaveMarkdownDocumentRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *SaveMarkdownDocumentRequest) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

type GroupNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []string `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *GroupNames) Reset() {
	*x = GroupNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNames) ProtoMessage() {}

func (x *GroupNames) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNames.ProtoReflect.Descriptor instead.
func (*GroupNames) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{353}
}

func (x *GroupNames) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type QueryGroupsByYakScriptIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Mode        string `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *QueryGroupsByYakScriptIdRequest) Reset() {
	*x = QueryGroupsByYakScriptIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupsByYakScriptIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupsByYakScriptIdRequest) ProtoMessage() {}

func (x *QueryGroupsByYakScriptIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupsByYakScriptIdRequest.ProtoReflect.Descriptor instead.
func (*QueryGroupsByYakScriptIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{354}
}

func (x *QueryGroupsByYakScriptIdRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *QueryGroupsByYakScriptIdRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type MenuItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         string                      `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose       string                      `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	YakScriptId   int64                       `protobuf:"varint,3,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Query         *BatchExecutionPluginFilter `protobuf:"bytes,4,opt,name=Query,proto3" json:"Query,omitempty"`
	MenuItemId    uint64                      `protobuf:"varint,5,opt,name=MenuItemId,proto3" json:"MenuItemId,omitempty"`
	GroupSort     int64                       `protobuf:"varint,6,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	YakScriptName string                      `protobuf:"bytes,7,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *MenuItem) Reset() {
	*x = MenuItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItem) ProtoMessage() {}

func (x *MenuItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItem.ProtoReflect.Descriptor instead.
func (*MenuItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{355}
}

func (x *MenuItem) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *MenuItem) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *MenuItem) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *MenuItem) GetQuery() *BatchExecutionPluginFilter {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *MenuItem) GetMenuItemId() uint64 {
	if x != nil {
		return x.MenuItemId
	}
	return 0
}

func (x *MenuItem) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *MenuItem) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

// 这里的小写不要改动，兼容前端已有的格式
type BatchExecutionPluginFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Tags    string   `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	Include []string `protobuf:"bytes,3,rep,name=include,proto3" json:"include,omitempty"`
	Exclude []string `protobuf:"bytes,4,rep,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *BatchExecutionPluginFilter) Reset() {
	*x = BatchExecutionPluginFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchExecutionPluginFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExecutionPluginFilter) ProtoMessage() {}

func (x *BatchExecutionPluginFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchExecutionPluginFilter.ProtoReflect.Descriptor instead.
func (*BatchExecutionPluginFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{356}
}

func (x *BatchExecutionPluginFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BatchExecutionPluginFilter) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *BatchExecutionPluginFilter) GetInclude() []string {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *BatchExecutionPluginFilter) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

type MenuItemGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    string      `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Items    []*MenuItem `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
	MenuSort int64       `protobuf:"varint,3,opt,name=MenuSort,proto3" json:"MenuSort,omitempty"`
	Mode     string      `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *MenuItemGroup) Reset() {
	*x = MenuItemGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuItemGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItemGroup) ProtoMessage() {}

func (x *MenuItemGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItemGroup.ProtoReflect.Descriptor instead.
func (*MenuItemGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{357}
}

func (x *MenuItemGroup) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *MenuItemGroup) GetItems() []*MenuItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MenuItemGroup) GetMenuSort() int64 {
	if x != nil {
		return x.MenuSort
	}
	return 0
}

func (x *MenuItemGroup) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type GetMenuItemByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetMenuItemByIdRequest) Reset() {
	*x = GetMenuItemByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMenuItemByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuItemByIdRequest) ProtoMessage() {}

func (x *GetMenuItemByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuItemByIdRequest.ProtoReflect.Descriptor instead.
func (*GetMenuItemByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{358}
}

func (x *GetMenuItemByIdRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type MenuByGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*MenuItemGroup `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *MenuByGroup) Reset() {
	*x = MenuByGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuByGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuByGroup) ProtoMessage() {}

func (x *MenuByGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuByGroup.ProtoReflect.Descriptor instead.
func (*MenuByGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{359}
}

func (x *MenuByGroup) GetGroups() []*MenuItemGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type YakScriptIsInMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group       string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	YakScriptId int64  `protobuf:"varint,2,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
}

func (x *YakScriptIsInMenuRequest) Reset() {
	*x = YakScriptIsInMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptIsInMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptIsInMenuRequest) ProtoMessage() {}

func (x *YakScriptIsInMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptIsInMenuRequest.ProtoReflect.Descriptor instead.
func (*YakScriptIsInMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{360}
}

func (x *YakScriptIsInMenuRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *YakScriptIsInMenuRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

type RemoveFromMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Group       string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Mode        string `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *RemoveFromMenuRequest) Reset() {
	*x = RemoveFromMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFromMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFromMenuRequest) ProtoMessage() {}

func (x *RemoveFromMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFromMenuRequest.ProtoReflect.Descriptor instead.
func (*RemoveFromMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{361}
}

func (x *RemoveFromMenuRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *RemoveFromMenuRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RemoveFromMenuRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type AddToMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Group       string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose     string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Mode        string `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	MenuSort    int64  `protobuf:"varint,5,opt,name=MenuSort,proto3" json:"MenuSort,omitempty"`
	GroupSort   int64  `protobuf:"varint,6,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
}

func (x *AddToMenuRequest) Reset() {
	*x = AddToMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToMenuRequest) ProtoMessage() {}

func (x *AddToMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToMenuRequest.ProtoReflect.Descriptor instead.
func (*AddToMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{362}
}

func (x *AddToMenuRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *AddToMenuRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AddToMenuRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *AddToMenuRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AddToMenuRequest) GetMenuSort() int64 {
	if x != nil {
		return x.MenuSort
	}
	return 0
}

func (x *AddToMenuRequest) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

type AddMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MenuItemGroup `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *AddMenuRequest) Reset() {
	*x = AddMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMenuRequest) ProtoMessage() {}

func (x *AddMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMenuRequest.ProtoReflect.Descriptor instead.
func (*AddMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{363}
}

func (x *AddMenuRequest) GetData() []*MenuItemGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryAllMenuItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    string `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Group   string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *QueryAllMenuItemRequest) Reset() {
	*x = QueryAllMenuItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllMenuItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllMenuItemRequest) ProtoMessage() {}

func (x *QueryAllMenuItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllMenuItemRequest.ProtoReflect.Descriptor instead.
func (*QueryAllMenuItemRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{364}
}

func (x *QueryAllMenuItemRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *QueryAllMenuItemRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryAllMenuItemRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type ImportMenuItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawJson      string `protobuf:"bytes,1,opt,name=RawJson,proto3" json:"RawJson,omitempty"`
	JsonFileName string `protobuf:"bytes,2,opt,name=JsonFileName,proto3" json:"JsonFileName,omitempty"`
}

func (x *ImportMenuItemRequest) Reset() {
	*x = ImportMenuItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportMenuItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMenuItemRequest) ProtoMessage() {}

func (x *ImportMenuItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMenuItemRequest.ProtoReflect.Descriptor instead.
func (*ImportMenuItemRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{365}
}

func (x *ImportMenuItemRequest) GetRawJson() string {
	if x != nil {
		return x.RawJson
	}
	return ""
}

func (x *ImportMenuItemRequest) GetJsonFileName() string {
	if x != nil {
		return x.JsonFileName
	}
	return ""
}

type ExportMenuItemResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawJson string `protobuf:"bytes,1,opt,name=RawJson,proto3" json:"RawJson,omitempty"`
}

func (x *ExportMenuItemResult) Reset() {
	*x = ExportMenuItemResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportMenuItemResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMenuItemResult) ProtoMessage() {}

func (x *ExportMenuItemResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMenuItemResult.ProtoReflect.Descriptor instead.
func (*ExportMenuItemResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{366}
}

func (x *ExportMenuItemResult) GetRawJson() string {
	if x != nil {
		return x.RawJson
	}
	return ""
}

type AddToNavigationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NavigationList `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *AddToNavigationRequest) Reset() {
	*x = AddToNavigationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToNavigationRequest) ProtoMessage() {}

func (x *AddToNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToNavigationRequest.ProtoReflect.Descriptor instead.
func (*AddToNavigationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{367}
}

func (x *AddToNavigationRequest) GetData() []*NavigationList {
	if x != nil {
		return x.Data
	}
	return nil
}

type NavigationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group      string            `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Items      []*NavigationItem `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
	GroupSort  int64             `protobuf:"varint,3,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	Mode       string            `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	GroupLabel string            `protobuf:"bytes,5,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
}

func (x *NavigationList) Reset() {
	*x = NavigationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationList) ProtoMessage() {}

func (x *NavigationList) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationList.ProtoReflect.Descriptor instead.
func (*NavigationList) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{368}
}

func (x *NavigationList) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NavigationList) GetItems() []*NavigationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *NavigationList) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *NavigationList) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NavigationList) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

type NavigationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId   int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Group         string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Mode          string `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	VerboseSort   int64  `protobuf:"varint,4,opt,name=VerboseSort,proto3" json:"VerboseSort,omitempty"`
	GroupSort     int64  `protobuf:"varint,5,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	Route         string `protobuf:"bytes,6,opt,name=Route,proto3" json:"Route,omitempty"`
	YakScriptName string `protobuf:"bytes,7,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Verbose       string `protobuf:"bytes,8,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	VerboseLabel  string `protobuf:"bytes,9,opt,name=VerboseLabel,proto3" json:"VerboseLabel,omitempty"`
	GroupLabel    string `protobuf:"bytes,10,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
	HeadImg       string `protobuf:"bytes,11,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
}

func (x *NavigationItem) Reset() {
	*x = NavigationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationItem) ProtoMessage() {}

func (x *NavigationItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationItem.ProtoReflect.Descriptor instead.
func (*NavigationItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{369}
}

func (x *NavigationItem) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *NavigationItem) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NavigationItem) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NavigationItem) GetVerboseSort() int64 {
	if x != nil {
		return x.VerboseSort
	}
	return 0
}

func (x *NavigationItem) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *NavigationItem) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *NavigationItem) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *NavigationItem) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *NavigationItem) GetVerboseLabel() string {
	if x != nil {
		return x.VerboseLabel
	}
	return ""
}

func (x *NavigationItem) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *NavigationItem) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

type GetAllNavigationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode          string `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Group         string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	YakScriptName string `protobuf:"bytes,3,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *GetAllNavigationRequest) Reset() {
	*x = GetAllNavigationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNavigationRequest) ProtoMessage() {}

func (x *GetAllNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNavigationRequest.ProtoReflect.Descriptor instead.
func (*GetAllNavigationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{370}
}

func (x *GetAllNavigationRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *GetAllNavigationRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GetAllNavigationRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type GetAllNavigationItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NavigationList `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetAllNavigationItemResponse) Reset() {
	*x = GetAllNavigationItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllNavigationItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNavigationItemResponse) ProtoMessage() {}

func (x *GetAllNavigationItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNavigationItemResponse.ProtoReflect.Descriptor instead.
func (*GetAllNavigationItemResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{371}
}

func (x *GetAllNavigationItemResponse) GetData() []*NavigationList {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddOneNavigationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName string `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Group         string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose       string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Mode          string `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	VerboseSort   int64  `protobuf:"varint,5,opt,name=VerboseSort,proto3" json:"VerboseSort,omitempty"`
	GroupSort     int64  `protobuf:"varint,6,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	GroupLabel    string `protobuf:"bytes,7,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
	VerboseLabel  string `protobuf:"bytes,8,opt,name=VerboseLabel,proto3" json:"VerboseLabel,omitempty"`
	Route         string `protobuf:"bytes,9,opt,name=Route,proto3" json:"Route,omitempty"`
}

func (x *AddOneNavigationRequest) Reset() {
	*x = AddOneNavigationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOneNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOneNavigationRequest) ProtoMessage() {}

func (x *AddOneNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOneNavigationRequest.ProtoReflect.Descriptor instead.
func (*AddOneNavigationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{372}
}

func (x *AddOneNavigationRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *AddOneNavigationRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AddOneNavigationRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *AddOneNavigationRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AddOneNavigationRequest) GetVerboseSort() int64 {
	if x != nil {
		return x.VerboseSort
	}
	return 0
}

func (x *AddOneNavigationRequest) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *AddOneNavigationRequest) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *AddOneNavigationRequest) GetVerboseLabel() string {
	if x != nil {
		return x.VerboseLabel
	}
	return ""
}

func (x *AddOneNavigationRequest) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

type QueryNavigationGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName string `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Mode          string `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *QueryNavigationGroupsRequest) Reset() {
	*x = QueryNavigationGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNavigationGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNavigationGroupsRequest) ProtoMessage() {}

func (x *QueryNavigationGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNavigationGroupsRequest.ProtoReflect.Descriptor instead.
func (*QueryNavigationGroupsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{373}
}

func (x *QueryNavigationGroupsRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *QueryNavigationGroupsRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type UpdateFromYakitResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy         string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	BaseSourceUrl string `protobuf:"bytes,2,opt,name=BaseSourceUrl,proto3" json:"BaseSourceUrl,omitempty"`
}

func (x *UpdateFromYakitResourceRequest) Reset() {
	*x = UpdateFromYakitResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFromYakitResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromYakitResourceRequest) ProtoMessage() {}

func (x *UpdateFromYakitResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromYakitResourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateFromYakitResourceRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{374}
}

func (x *UpdateFromYakitResourceRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateFromYakitResourceRequest) GetBaseSourceUrl() string {
	if x != nil {
		return x.BaseSourceUrl
	}
	return ""
}

type UpdateFromGithubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy     string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	GithubUrl string `protobuf:"bytes,2,opt,name=GithubUrl,proto3" json:"GithubUrl,omitempty"`
}

func (x *UpdateFromGithubRequest) Reset() {
	*x = UpdateFromGithubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFromGithubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromGithubRequest) ProtoMessage() {}

func (x *UpdateFromGithubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromGithubRequest.ProtoReflect.Descriptor instead.
func (*UpdateFromGithubRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{375}
}

func (x *UpdateFromGithubRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateFromGithubRequest) GetGithubUrl() string {
	if x != nil {
		return x.GithubUrl
	}
	return ""
}

type SimpleScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *SimpleScript) Reset() {
	*x = SimpleScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleScript) ProtoMessage() {}

func (x *SimpleScript) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleScript.ProtoReflect.Descriptor instead.
func (*SimpleScript) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{376}
}

func (x *SimpleScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type LastRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRecordPtr        int64   `protobuf:"varint,1,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
	Percent              float64 `protobuf:"fixed64,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,3,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	ExtraInfo            string  `protobuf:"bytes,4,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`
}

func (x *LastRecord) Reset() {
	*x = LastRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastRecord) ProtoMessage() {}

func (x *LastRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastRecord.ProtoReflect.Descriptor instead.
func (*LastRecord) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{377}
}

func (x *LastRecord) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

func (x *LastRecord) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *LastRecord) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *LastRecord) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type RecordPortScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRecord       *LastRecord       `protobuf:"bytes,1,opt,name=LastRecord,proto3" json:"LastRecord,omitempty"`
	StartBruteParams *StartBruteParams `protobuf:"bytes,3,opt,name=StartBruteParams,proto3" json:"StartBruteParams,omitempty"`
	PortScanRequest  *PortScanRequest  `protobuf:"bytes,2,opt,name=PortScanRequest,proto3" json:"PortScanRequest,omitempty"`
	RuntimeId        string            `protobuf:"bytes,4,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
}

func (x *RecordPortScanRequest) Reset() {
	*x = RecordPortScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPortScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPortScanRequest) ProtoMessage() {}

func (x *RecordPortScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPortScanRequest.ProtoReflect.Descriptor instead.
func (*RecordPortScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{378}
}

func (x *RecordPortScanRequest) GetLastRecord() *LastRecord {
	if x != nil {
		return x.LastRecord
	}
	return nil
}

func (x *RecordPortScanRequest) GetStartBruteParams() *StartBruteParams {
	if x != nil {
		return x.StartBruteParams
	}
	return nil
}

func (x *RecordPortScanRequest) GetPortScanRequest() *PortScanRequest {
	if x != nil {
		return x.PortScanRequest
	}
	return nil
}

func (x *RecordPortScanRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type CreatReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportName string `protobuf:"bytes,1,opt,name=ReportName,proto3" json:"ReportName,omitempty"`
	RuntimeId  string `protobuf:"bytes,2,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
}

func (x *CreatReportRequest) Reset() {
	*x = CreatReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatReportRequest) ProtoMessage() {}

func (x *CreatReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatReportRequest.ProtoReflect.Descriptor instead.
func (*CreatReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{379}
}

func (x *CreatReportRequest) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *CreatReportRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

type PortScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets    string   `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
	Ports      string   `protobuf:"bytes,2,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Mode       string   `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Proto      []string `protobuf:"bytes,4,rep,name=Proto,proto3" json:"Proto,omitempty"`
	Concurrent int64    `protobuf:"varint,5,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	// 主动发包模式
	Active bool `protobuf:"varint,6,opt,name=Active,proto3" json:"Active,omitempty"`
	// service / web / all
	FingerprintMode string `protobuf:"bytes,7,opt,name=FingerprintMode,proto3" json:"FingerprintMode,omitempty"`
	// 保存数据库
	SaveToDB bool `protobuf:"varint,8,opt,name=SaveToDB,proto3" json:"SaveToDB,omitempty"`
	// 保存已经关闭的端口
	SaveClosedPorts bool `protobuf:"varint,9,opt,name=SaveClosedPorts,proto3" json:"SaveClosedPorts,omitempty"`
	// 上传扫描目标为文件
	TargetsFile string `protobuf:"bytes,10,opt,name=TargetsFile,proto3" json:"TargetsFile,omitempty"`
	// 设置上传的文件
	ScriptNames []string `protobuf:"bytes,11,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	// TCPProxy
	Proxy []string `protobuf:"bytes,12,rep,name=Proxy,proto3" json:"Proxy,omitempty"`
	// 设置单次探测超时时间
	ProbeTimeout float64 `protobuf:"fixed64,13,opt,name=ProbeTimeout,proto3" json:"ProbeTimeout,omitempty"`
	// ProbeMax 设置指纹探测条数
	ProbeMax int32 `protobuf:"varint,14,opt,name=ProbeMax,proto3" json:"ProbeMax,omitempty"`
	// 启用 C 段扫描
	EnableCClassScan bool `protobuf:"varint,15,opt,name=EnableCClassScan,proto3" json:"EnableCClassScan,omitempty"`
	// HostAlive Scan
	SkippedHostAliveScan bool    `protobuf:"varint,16,opt,name=SkippedHostAliveScan,proto3" json:"SkippedHostAliveScan,omitempty"`
	HostAliveTimeout     float64 `protobuf:"fixed64,17,opt,name=HostAliveTimeout,proto3" json:"HostAliveTimeout,omitempty"`
	HostAliveConcurrent  int32   `protobuf:"varint,18,opt,name=HostAliveConcurrent,proto3" json:"HostAliveConcurrent,omitempty"`
	HostAlivePorts       string  `protobuf:"bytes,19,opt,name=HostAlivePorts,proto3" json:"HostAlivePorts,omitempty"`
	// 排除端口与主机
	ExcludeHosts string `protobuf:"bytes,20,opt,name=ExcludeHosts,proto3" json:"ExcludeHosts,omitempty"`
	ExcludePorts string `protobuf:"bytes,21,opt,name=ExcludePorts,proto3" json:"ExcludePorts,omitempty"`
	// EnableBasicCrawler
	// 是否启用基础爬虫，以及基础爬虫最多几个请求？
	EnableBasicCrawler     bool  `protobuf:"varint,22,opt,name=EnableBasicCrawler,proto3" json:"EnableBasicCrawler,omitempty"`
	BasicCrawlerRequestMax int64 `protobuf:"varint,23,opt,name=BasicCrawlerRequestMax,proto3" json:"BasicCrawlerRequestMax,omitempty"`
	// SYN Concurrent
	// 简易设置 SYN 每秒并发
	SynConcurrent       int64  `protobuf:"varint,24,opt,name=SynConcurrent,proto3" json:"SynConcurrent,omitempty"`
	TaskName            string `protobuf:"bytes,25,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	EnableBrute         bool   `protobuf:"varint,26,opt,name=EnableBrute,proto3" json:"EnableBrute,omitempty"`
	SynScanNetInterface string `protobuf:"bytes,27,opt,name=SynScanNetInterface,proto3" json:"SynScanNetInterface,omitempty"`
	// 联动插件的配置
	LinkPluginConfig *HybridScanPluginConfig `protobuf:"bytes,28,opt,name=LinkPluginConfig,proto3" json:"LinkPluginConfig,omitempty"`
	// 爬虫是否启用 JS 解析
	BasicCrawlerEnableJSParser bool     `protobuf:"varint,29,opt,name=BasicCrawlerEnableJSParser,proto3" json:"BasicCrawlerEnableJSParser,omitempty"`
	UserFingerprintFiles       []string `protobuf:"bytes,30,rep,name=UserFingerprintFiles,proto3" json:"UserFingerprintFiles,omitempty"`
	SkipCveBaseLine            bool     `protobuf:"varint,31,opt,name=SkipCveBaseLine,proto3" json:"SkipCveBaseLine,omitempty"`
}

func (x *PortScanRequest) Reset() {
	*x = PortScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortScanRequest) ProtoMessage() {}

func (x *PortScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortScanRequest.ProtoReflect.Descriptor instead.
func (*PortScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{380}
}

func (x *PortScanRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *PortScanRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *PortScanRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *PortScanRequest) GetProto() []string {
	if x != nil {
		return x.Proto
	}
	return nil
}

func (x *PortScanRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *PortScanRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *PortScanRequest) GetFingerprintMode() string {
	if x != nil {
		return x.FingerprintMode
	}
	return ""
}

func (x *PortScanRequest) GetSaveToDB() bool {
	if x != nil {
		return x.SaveToDB
	}
	return false
}

func (x *PortScanRequest) GetSaveClosedPorts() bool {
	if x != nil {
		return x.SaveClosedPorts
	}
	return false
}

func (x *PortScanRequest) GetTargetsFile() string {
	if x != nil {
		return x.TargetsFile
	}
	return ""
}

func (x *PortScanRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *PortScanRequest) GetProxy() []string {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *PortScanRequest) GetProbeTimeout() float64 {
	if x != nil {
		return x.ProbeTimeout
	}
	return 0
}

func (x *PortScanRequest) GetProbeMax() int32 {
	if x != nil {
		return x.ProbeMax
	}
	return 0
}

func (x *PortScanRequest) GetEnableCClassScan() bool {
	if x != nil {
		return x.EnableCClassScan
	}
	return false
}

func (x *PortScanRequest) GetSkippedHostAliveScan() bool {
	if x != nil {
		return x.SkippedHostAliveScan
	}
	return false
}

func (x *PortScanRequest) GetHostAliveTimeout() float64 {
	if x != nil {
		return x.HostAliveTimeout
	}
	return 0
}

func (x *PortScanRequest) GetHostAliveConcurrent() int32 {
	if x != nil {
		return x.HostAliveConcurrent
	}
	return 0
}

func (x *PortScanRequest) GetHostAlivePorts() string {
	if x != nil {
		return x.HostAlivePorts
	}
	return ""
}

func (x *PortScanRequest) GetExcludeHosts() string {
	if x != nil {
		return x.ExcludeHosts
	}
	return ""
}

func (x *PortScanRequest) GetExcludePorts() string {
	if x != nil {
		return x.ExcludePorts
	}
	return ""
}

func (x *PortScanRequest) GetEnableBasicCrawler() bool {
	if x != nil {
		return x.EnableBasicCrawler
	}
	return false
}

func (x *PortScanRequest) GetBasicCrawlerRequestMax() int64 {
	if x != nil {
		return x.BasicCrawlerRequestMax
	}
	return 0
}

func (x *PortScanRequest) GetSynConcurrent() int64 {
	if x != nil {
		return x.SynConcurrent
	}
	return 0
}

func (x *PortScanRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *PortScanRequest) GetEnableBrute() bool {
	if x != nil {
		return x.EnableBrute
	}
	return false
}

func (x *PortScanRequest) GetSynScanNetInterface() string {
	if x != nil {
		return x.SynScanNetInterface
	}
	return ""
}

func (x *PortScanRequest) GetLinkPluginConfig() *HybridScanPluginConfig {
	if x != nil {
		return x.LinkPluginConfig
	}
	return nil
}

func (x *PortScanRequest) GetBasicCrawlerEnableJSParser() bool {
	if x != nil {
		return x.BasicCrawlerEnableJSParser
	}
	return false
}

func (x *PortScanRequest) GetUserFingerprintFiles() []string {
	if x != nil {
		return x.UserFingerprintFiles
	}
	return nil
}

func (x *PortScanRequest) GetSkipCveBaseLine() bool {
	if x != nil {
		return x.SkipCveBaseLine
	}
	return false
}

type DeletePortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts     string             `protobuf:"bytes,1,opt,name=Hosts,proto3" json:"Hosts,omitempty"`
	Ports     string             `protobuf:"bytes,2,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Id        []int64            `protobuf:"varint,3,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	All       bool               `protobuf:"varint,4,opt,name=All,proto3" json:"All,omitempty"`
	Ids       []int64            `protobuf:"varint,5,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	DeleteAll bool               `protobuf:"varint,6,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Filter    *QueryPortsRequest `protobuf:"bytes,7,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *DeletePortsRequest) Reset() {
	*x = DeletePortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortsRequest) ProtoMessage() {}

func (x *DeletePortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortsRequest.ProtoReflect.Descriptor instead.
func (*DeletePortsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{381}
}

func (x *DeletePortsRequest) GetHosts() string {
	if x != nil {
		return x.Hosts
	}
	return ""
}

func (x *DeletePortsRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *DeletePortsRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeletePortsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *DeletePortsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeletePortsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeletePortsRequest) GetFilter() *QueryPortsRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QueryPortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	// 根据 Hosts Ports 查询
	Hosts           string `protobuf:"bytes,2,opt,name=Hosts,proto3" json:"Hosts,omitempty"`
	Ports           string `protobuf:"bytes,3,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Service         string `protobuf:"bytes,4,opt,name=Service,proto3" json:"Service,omitempty"`
	State           string `protobuf:"bytes,5,opt,name=State,proto3" json:"State,omitempty"`
	Title           string `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	All             bool   `protobuf:"varint,7,opt,name=All,proto3" json:"All,omitempty"`
	Keywords        string `protobuf:"bytes,8,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	TitleEffective  bool   `protobuf:"varint,9,opt,name=TitleEffective,proto3" json:"TitleEffective,omitempty"`
	ComplexSelect   string `protobuf:"bytes,10,opt,name=ComplexSelect,proto3" json:"ComplexSelect,omitempty"`
	Proto           string `protobuf:"bytes,11,opt,name=Proto,proto3" json:"Proto,omitempty"`
	RuntimeId       string `protobuf:"bytes,12,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	BeforeUpdatedAt int64  `protobuf:"varint,13,opt,name=BeforeUpdatedAt,proto3" json:"BeforeUpdatedAt,omitempty"`
	AfterUpdatedAt  int64  `protobuf:"varint,14,opt,name=AfterUpdatedAt,proto3" json:"AfterUpdatedAt,omitempty"`
	AfterId         int64  `protobuf:"varint,15,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	BeforeId        int64  `protobuf:"varint,16,opt,name=BeforeId,proto3" json:"BeforeId,omitempty"`
	OrderBy         string `protobuf:"bytes,17,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	Order           string `protobuf:"bytes,18,opt,name=Order,proto3" json:"Order,omitempty"`
}

func (x *QueryPortsRequest) Reset() {
	*x = QueryPortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortsRequest) ProtoMessage() {}

func (x *QueryPortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortsRequest.ProtoReflect.Descriptor instead.
func (*QueryPortsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{382}
}

func (x *QueryPortsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPortsRequest) GetHosts() string {
	if x != nil {
		return x.Hosts
	}
	return ""
}

func (x *QueryPortsRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *QueryPortsRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *QueryPortsRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *QueryPortsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryPortsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *QueryPortsRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryPortsRequest) GetTitleEffective() bool {
	if x != nil {
		return x.TitleEffective
	}
	return false
}

func (x *QueryPortsRequest) GetComplexSelect() string {
	if x != nil {
		return x.ComplexSelect
	}
	return ""
}

func (x *QueryPortsRequest) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *QueryPortsRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *QueryPortsRequest) GetBeforeUpdatedAt() int64 {
	if x != nil {
		return x.BeforeUpdatedAt
	}
	return 0
}

func (x *QueryPortsRequest) GetAfterUpdatedAt() int64 {
	if x != nil {
		return x.AfterUpdatedAt
	}
	return 0
}

func (x *QueryPortsRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *QueryPortsRequest) GetBeforeId() int64 {
	if x != nil {
		return x.BeforeId
	}
	return 0
}

func (x *QueryPortsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *QueryPortsRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type QueryPortsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64   `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Port `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryPortsResponse) Reset() {
	*x = QueryPortsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPortsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortsResponse) ProtoMessage() {}

func (x *QueryPortsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortsResponse.ProtoReflect.Descriptor instead.
func (*QueryPortsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{383}
}

func (x *QueryPortsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPortsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryPortsResponse) GetData() []*Port {
	if x != nil {
		return x.Data
	}
	return nil
}

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host        string   `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	IPInteger   int64    `protobuf:"varint,2,opt,name=IPInteger,proto3" json:"IPInteger,omitempty"`
	Port        int64    `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Proto       string   `protobuf:"bytes,4,opt,name=Proto,proto3" json:"Proto,omitempty"`
	ServiceType string   `protobuf:"bytes,5,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	State       string   `protobuf:"bytes,6,opt,name=State,proto3" json:"State,omitempty"`
	Reason      string   `protobuf:"bytes,7,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Fingerprint string   `protobuf:"bytes,8,opt,name=Fingerprint,proto3" json:"Fingerprint,omitempty"`
	CPE         []string `protobuf:"bytes,9,rep,name=CPE,proto3" json:"CPE,omitempty"`
	HtmlTitle   string   `protobuf:"bytes,10,opt,name=HtmlTitle,proto3" json:"HtmlTitle,omitempty"`
	Id          int64    `protobuf:"varint,11,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt   int64    `protobuf:"varint,12,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt   int64    `protobuf:"varint,13,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	TaskName    string   `protobuf:"bytes,14,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{384}
}

func (x *Port) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Port) GetIPInteger() int64 {
	if x != nil {
		return x.IPInteger
	}
	return 0
}

func (x *Port) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Port) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *Port) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *Port) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Port) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Port) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *Port) GetCPE() []string {
	if x != nil {
		return x.CPE
	}
	return nil
}

func (x *Port) GetHtmlTitle() string {
	if x != nil {
		return x.HtmlTitle
	}
	return ""
}

func (x *Port) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Port) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Port) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Port) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type YakitCompletionRawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawJson []byte `protobuf:"bytes,1,opt,name=RawJson,proto3" json:"RawJson,omitempty"`
}

func (x *YakitCompletionRawResponse) Reset() {
	*x = YakitCompletionRawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakitCompletionRawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakitCompletionRawResponse) ProtoMessage() {}

func (x *YakitCompletionRawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakitCompletionRawResponse.ProtoReflect.Descriptor instead.
func (*YakitCompletionRawResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{385}
}

func (x *YakitCompletionRawResponse) GetRawJson() []byte {
	if x != nil {
		return x.RawJson
	}
	return nil
}

type GetYakVMBuildInMethodCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetYakVMBuildInMethodCompletionRequest) Reset() {
	*x = GetYakVMBuildInMethodCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakVMBuildInMethodCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakVMBuildInMethodCompletionRequest) ProtoMessage() {}

func (x *GetYakVMBuildInMethodCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakVMBuildInMethodCompletionRequest.ProtoReflect.Descriptor instead.
func (*GetYakVMBuildInMethodCompletionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{386}
}

// 这个定义我们争取和 monaco editor suggestion 基本一致
type SuggestionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label             string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	Description       string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	InsertText        string `protobuf:"bytes,3,opt,name=InsertText,proto3" json:"InsertText,omitempty"`
	JustAppend        bool   `protobuf:"varint,4,opt,name=JustAppend,proto3" json:"JustAppend,omitempty"`
	DefinitionVerbose string `protobuf:"bytes,5,opt,name=DefinitionVerbose,proto3" json:"DefinitionVerbose,omitempty"` // 展示定义的内容，如果没有的话，一般展示 InsertText 就行
	Kind              string `protobuf:"bytes,6,opt,name=Kind,proto3" json:"Kind,omitempty"`                           // 补全类型, Method = 0, Function = 1, Constructor = 2, Field = 3, Variable = 4, Class = 5, Struct = 6, Interface = 7, Module = 8, Property = 9, Event = 10, Operator = 11, Unit = 12, Value = 13, Constant = 14, Enum = 15, EnumMember = 16, Keyword = 17, Text = 18, Color = 19, File = 20, Reference = 21, Customcolor = 22, Folder = 23, TypeParameter = 24, User = 25, Issue = 26, Snippet = 27
	Command           string `protobuf:"bytes,7,opt,name=Command,proto3" json:"Command,omitempty"`                     // 用于执行的命令
}

func (x *SuggestionDescription) Reset() {
	*x = SuggestionDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestionDescription) ProtoMessage() {}

func (x *SuggestionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestionDescription.ProtoReflect.Descriptor instead.
func (*SuggestionDescription) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{387}
}

func (x *SuggestionDescription) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SuggestionDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SuggestionDescription) GetInsertText() string {
	if x != nil {
		return x.InsertText
	}
	return ""
}

func (x *SuggestionDescription) GetJustAppend() bool {
	if x != nil {
		return x.JustAppend
	}
	return false
}

func (x *SuggestionDescription) GetDefinitionVerbose() string {
	if x != nil {
		return x.DefinitionVerbose
	}
	return ""
}

func (x *SuggestionDescription) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SuggestionDescription) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type MethodSuggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 产生这个方法提示的关键词是啥？
	ExactKeywords []string `protobuf:"bytes,1,rep,name=ExactKeywords,proto3" json:"ExactKeywords,omitempty"`
	FuzzKeywords  []string `protobuf:"bytes,2,rep,name=FuzzKeywords,proto3" json:"FuzzKeywords,omitempty"`
	Regexp        []string `protobuf:"bytes,3,rep,name=Regexp,proto3" json:"Regexp,omitempty"`
	// 提示的内容是啥？
	Suggestions []*SuggestionDescription `protobuf:"bytes,4,rep,name=Suggestions,proto3" json:"Suggestions,omitempty"`
	// 这个代码提示方法组是啥？
	Verbose string `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *MethodSuggestion) Reset() {
	*x = MethodSuggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodSuggestion) ProtoMessage() {}

func (x *MethodSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodSuggestion.ProtoReflect.Descriptor instead.
func (*MethodSuggestion) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{388}
}

func (x *MethodSuggestion) GetExactKeywords() []string {
	if x != nil {
		return x.ExactKeywords
	}
	return nil
}

func (x *MethodSuggestion) GetFuzzKeywords() []string {
	if x != nil {
		return x.FuzzKeywords
	}
	return nil
}

func (x *MethodSuggestion) GetRegexp() []string {
	if x != nil {
		return x.Regexp
	}
	return nil
}

func (x *MethodSuggestion) GetSuggestions() []*SuggestionDescription {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

func (x *MethodSuggestion) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type GetYakVMBuildInMethodCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suggestions []*MethodSuggestion `protobuf:"bytes,1,rep,name=Suggestions,proto3" json:"Suggestions,omitempty"`
}

func (x *GetYakVMBuildInMethodCompletionResponse) Reset() {
	*x = GetYakVMBuildInMethodCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakVMBuildInMethodCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakVMBuildInMethodCompletionResponse) ProtoMessage() {}

func (x *GetYakVMBuildInMethodCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakVMBuildInMethodCompletionResponse.ProtoReflect.Descriptor instead.
func (*GetYakVMBuildInMethodCompletionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{389}
}

func (x *GetYakVMBuildInMethodCompletionResponse) GetSuggestions() []*MethodSuggestion {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

type RenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	NewName string `protobuf:"bytes,2,opt,name=NewName,proto3" json:"NewName,omitempty"`
}

func (x *RenameRequest) Reset() {
	*x = RenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRequest) ProtoMessage() {}

func (x *RenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRequest.ProtoReflect.Descriptor instead.
func (*RenameRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{390}
}

func (x *RenameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type NameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *NameRequest) Reset() {
	*x = NameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameRequest) ProtoMessage() {}

func (x *NameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameRequest.ProtoReflect.Descriptor instead.
func (*NameRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{391}
}

func (x *NameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PayloadGroupNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string              `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"` // "File" / "DataBase" / "Folder"
	Name   string              `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Number int64               `protobuf:"varint,3,opt,name=Number,proto3" json:"Number,omitempty"`
	Nodes  []*PayloadGroupNode `protobuf:"bytes,4,rep,name=Nodes,proto3" json:"Nodes,omitempty"` // for Type "Folder"
}

func (x *PayloadGroupNode) Reset() {
	*x = PayloadGroupNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadGroupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadGroupNode) ProtoMessage() {}

func (x *PayloadGroupNode) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadGroupNode.ProtoReflect.Descriptor instead.
func (*PayloadGroupNode) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{392}
}

func (x *PayloadGroupNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PayloadGroupNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayloadGroupNode) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PayloadGroupNode) GetNodes() []*PayloadGroupNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type GetAllPayloadGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []string            `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	Nodes  []*PayloadGroupNode `protobuf:"bytes,2,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (x *GetAllPayloadGroupResponse) Reset() {
	*x = GetAllPayloadGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPayloadGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadGroupResponse) ProtoMessage() {}

func (x *GetAllPayloadGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadGroupResponse.ProtoReflect.Descriptor instead.
func (*GetAllPayloadGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{393}
}

func (x *GetAllPayloadGroupResponse) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GetAllPayloadGroupResponse) GetNodes() []*PayloadGroupNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type UpdateAllPayloadGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*PayloadGroupNode `protobuf:"bytes,1,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (x *UpdateAllPayloadGroupRequest) Reset() {
	*x = UpdateAllPayloadGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllPayloadGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllPayloadGroupRequest) ProtoMessage() {}

func (x *UpdateAllPayloadGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllPayloadGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateAllPayloadGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{394}
}

func (x *UpdateAllPayloadGroupRequest) GetNodes() []*PayloadGroupNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type SavePayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFile   bool     `protobuf:"varint,1,opt,name=IsFile,proto3" json:"IsFile,omitempty"`
	Group    string   `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Content  string   `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	FileName []string `protobuf:"bytes,4,rep,name=FileName,proto3" json:"FileName,omitempty"`
	Folder   string   `protobuf:"bytes,5,opt,name=Folder,proto3" json:"Folder,omitempty"`
	IsNew    bool     `protobuf:"varint,6,opt,name=IsNew,proto3" json:"IsNew,omitempty"`
}

func (x *SavePayloadRequest) Reset() {
	*x = SavePayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePayloadRequest) ProtoMessage() {}

func (x *SavePayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePayloadRequest.ProtoReflect.Descriptor instead.
func (*SavePayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{395}
}

func (x *SavePayloadRequest) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

func (x *SavePayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *SavePayloadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SavePayloadRequest) GetFileName() []string {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *SavePayloadRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *SavePayloadRequest) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type UpdatePayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// old
	Group    string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`       // old
	OldGroup string `protobuf:"bytes,2,opt,name=OldGroup,proto3" json:"OldGroup,omitempty"` // old
	// new, please use this
	Id   int64    `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Data *Payload `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *UpdatePayloadRequest) Reset() {
	*x = UpdatePayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePayloadRequest) ProtoMessage() {}

func (x *UpdatePayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePayloadRequest.ProtoReflect.Descriptor instead.
func (*UpdatePayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{396}
}

func (x *UpdatePayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *UpdatePayloadRequest) GetOldGroup() string {
	if x != nil {
		return x.OldGroup
	}
	return ""
}

func (x *UpdatePayloadRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePayloadRequest) GetData() *Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdatePayloadToFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *UpdatePayloadToFileRequest) Reset() {
	*x = UpdatePayloadToFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePayloadToFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePayloadToFileRequest) ProtoMessage() {}

func (x *UpdatePayloadToFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePayloadToFileRequest.ProtoReflect.Descriptor instead.
func (*UpdatePayloadToFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{397}
}

func (x *UpdatePayloadToFileRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *UpdatePayloadToFileRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// copy payload(get by id) to group
type BackUpOrCopyPayloadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []int64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Group  string  `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Folder string  `protobuf:"bytes,3,opt,name=Folder,proto3" json:"Folder,omitempty"`
	Copy   bool    `protobuf:"varint,4,opt,name=Copy,proto3" json:"Copy,omitempty"`
}

func (x *BackUpOrCopyPayloadsRequest) Reset() {
	*x = BackUpOrCopyPayloadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackUpOrCopyPayloadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackUpOrCopyPayloadsRequest) ProtoMessage() {}

func (x *BackUpOrCopyPayloadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackUpOrCopyPayloadsRequest.ProtoReflect.Descriptor instead.
func (*BackUpOrCopyPayloadsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{398}
}

func (x *BackUpOrCopyPayloadsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BackUpOrCopyPayloadsRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *BackUpOrCopyPayloadsRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *BackUpOrCopyPayloadsRequest) GetCopy() bool {
	if x != nil {
		return x.Copy
	}
	return false
}

type DeletePayloadByGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *DeletePayloadByGroupRequest) Reset() {
	*x = DeletePayloadByGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePayloadByGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayloadByGroupRequest) ProtoMessage() {}

func (x *DeletePayloadByGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayloadByGroupRequest.ProtoReflect.Descriptor instead.
func (*DeletePayloadByGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{399}
}

func (x *DeletePayloadByGroupRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type DeletePayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Ids []int64 `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeletePayloadRequest) Reset() {
	*x = DeletePayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayloadRequest) ProtoMessage() {}

func (x *DeletePayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayloadRequest.ProtoReflect.Descriptor instead.
func (*DeletePayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{400}
}

func (x *DeletePayloadRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeletePayloadRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type QueryPayloadFromFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group  string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Folder string `protobuf:"bytes,2,opt,name=Folder,proto3" json:"Folder,omitempty"`
}

func (x *QueryPayloadFromFileRequest) Reset() {
	*x = QueryPayloadFromFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPayloadFromFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadFromFileRequest) ProtoMessage() {}

func (x *QueryPayloadFromFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadFromFileRequest.ProtoReflect.Descriptor instead.
func (*QueryPayloadFromFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{401}
}

func (x *QueryPayloadFromFileRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryPayloadFromFileRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

type QueryPayloadFromFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	IsBigFile bool   `protobuf:"varint,2,opt,name=IsBigFile,proto3" json:"IsBigFile,omitempty"`
}

func (x *QueryPayloadFromFileResponse) Reset() {
	*x = QueryPayloadFromFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPayloadFromFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadFromFileResponse) ProtoMessage() {}

func (x *QueryPayloadFromFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadFromFileResponse.ProtoReflect.Descriptor instead.
func (*QueryPayloadFromFileResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{402}
}

func (x *QueryPayloadFromFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryPayloadFromFileResponse) GetIsBigFile() bool {
	if x != nil {
		return x.IsBigFile
	}
	return false
}

type QueryPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Group      string  `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Keyword    string  `protobuf:"bytes,3,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Folder     string  `protobuf:"bytes,4,opt,name=Folder,proto3" json:"Folder,omitempty"`
}

func (x *QueryPayloadRequest) Reset() {
	*x = QueryPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadRequest) ProtoMessage() {}

func (x *QueryPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadRequest.ProtoReflect.Descriptor instead.
func (*QueryPayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{403}
}

func (x *QueryPayloadRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryPayloadRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryPayloadRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

type QueryPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging    `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64      `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Payload `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryPayloadResponse) Reset() {
	*x = QueryPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadResponse) ProtoMessage() {}

func (x *QueryPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadResponse.ProtoReflect.Descriptor instead.
func (*QueryPayloadResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{404}
}

func (x *QueryPayloadResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPayloadResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryPayloadResponse) GetData() []*Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Group        string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	ContentBytes []byte `protobuf:"bytes,3,opt,name=ContentBytes,proto3" json:"ContentBytes,omitempty"`
	Content      string `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"`
	Folder       string `protobuf:"bytes,5,opt,name=Folder,proto3" json:"Folder,omitempty"`
	HitCount     int64  `protobuf:"varint,6,opt,name=HitCount,proto3" json:"HitCount,omitempty"`
	IsFile       bool   `protobuf:"varint,7,opt,name=IsFile,proto3" json:"IsFile,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{405}
}

func (x *Payload) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payload) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Payload) GetContentBytes() []byte {
	if x != nil {
		return x.ContentBytes
	}
	return nil
}

func (x *Payload) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Payload) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *Payload) GetHitCount() int64 {
	if x != nil {
		return x.HitCount
	}
	return 0
}

func (x *Payload) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

type GetAllPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Folder   string `protobuf:"bytes,2,opt,name=Folder,proto3" json:"Folder,omitempty"`
	SavePath string `protobuf:"bytes,3,opt,name=SavePath,proto3" json:"SavePath,omitempty"`
}

func (x *GetAllPayloadRequest) Reset() {
	*x = GetAllPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadRequest) ProtoMessage() {}

func (x *GetAllPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadRequest.ProtoReflect.Descriptor instead.
func (*GetAllPayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{406}
}

func (x *GetAllPayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GetAllPayloadRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *GetAllPayloadRequest) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

type GetAllPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []*Payload `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Progress float64    `protobuf:"fixed64,2,opt,name=Progress,proto3" json:"Progress,omitempty"`
}

func (x *GetAllPayloadResponse) Reset() {
	*x = GetAllPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadResponse) ProtoMessage() {}

func (x *GetAllPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadResponse.ProtoReflect.Descriptor instead.
func (*GetAllPayloadResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{407}
}

func (x *GetAllPayloadResponse) GetData() []*Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllPayloadResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GetAllPayloadFromFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Data     []byte  `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetAllPayloadFromFileResponse) Reset() {
	*x = GetAllPayloadFromFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPayloadFromFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadFromFileResponse) ProtoMessage() {}

func (x *GetAllPayloadFromFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadFromFileResponse.ProtoReflect.Descriptor instead.
func (*GetAllPayloadFromFileResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{408}
}

func (x *GetAllPayloadFromFileResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *GetAllPayloadFromFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination               *Paging      `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Type                     string       `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Keyword                  string       `protobuf:"bytes,3,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	IsHistory                bool         `protobuf:"varint,4,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore                 bool         `protobuf:"varint,5,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule          bool         `protobuf:"varint,6,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	IsBatch                  bool         `protobuf:"varint,7,opt,name=IsBatch,proto3" json:"IsBatch,omitempty"`
	ExcludeNucleiWorkflow    bool         `protobuf:"varint,8,opt,name=ExcludeNucleiWorkflow,proto3" json:"ExcludeNucleiWorkflow,omitempty"`
	ExcludeScriptNames       []string     `protobuf:"bytes,9,rep,name=ExcludeScriptNames,proto3" json:"ExcludeScriptNames,omitempty"`
	IncludedScriptNames      []string     `protobuf:"bytes,10,rep,name=IncludedScriptNames,proto3" json:"IncludedScriptNames,omitempty"`
	Tag                      []string     `protobuf:"bytes,11,rep,name=Tag,proto3" json:"Tag,omitempty"`
	NoResultReturn           bool         `protobuf:"varint,12,opt,name=NoResultReturn,proto3" json:"NoResultReturn,omitempty"` // 这是一很特殊的选项，如果开启了，total 将会为 0
	UserId                   int64        `protobuf:"varint,13,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName                 string       `protobuf:"bytes,14,opt,name=UserName,proto3" json:"UserName,omitempty"`
	IgnoreGeneralModuleOrder bool         `protobuf:"varint,15,opt,name=IgnoreGeneralModuleOrder,proto3" json:"IgnoreGeneralModuleOrder,omitempty"`
	Family                   []string     `protobuf:"bytes,16,rep,name=Family,proto3" json:"Family,omitempty"`
	UUID                     string       `protobuf:"bytes,17,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Group                    *PluginGroup `protobuf:"bytes,18,opt,name=Group,proto3" json:"Group,omitempty"`
	ExcludeTypes             []string     `protobuf:"bytes,19,rep,name=ExcludeTypes,proto3" json:"ExcludeTypes,omitempty"`
	IsMITMParamPlugins       int64        `protobuf:"varint,20,opt,name=IsMITMParamPlugins,proto3" json:"IsMITMParamPlugins,omitempty"` //0->默认全部 1->是mitm带参数插件 2->mitm不带参数
	FieldKeywords            string       `protobuf:"bytes,21,opt,name=FieldKeywords,proto3" json:"FieldKeywords,omitempty"`
}

func (x *QueryYakScriptRequest) Reset() {
	*x = QueryYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptRequest) ProtoMessage() {}

func (x *QueryYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{409}
}

func (x *QueryYakScriptRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryYakScriptRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryYakScriptRequest) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsBatch() bool {
	if x != nil {
		return x.IsBatch
	}
	return false
}

func (x *QueryYakScriptRequest) GetExcludeNucleiWorkflow() bool {
	if x != nil {
		return x.ExcludeNucleiWorkflow
	}
	return false
}

func (x *QueryYakScriptRequest) GetExcludeScriptNames() []string {
	if x != nil {
		return x.ExcludeScriptNames
	}
	return nil
}

func (x *QueryYakScriptRequest) GetIncludedScriptNames() []string {
	if x != nil {
		return x.IncludedScriptNames
	}
	return nil
}

func (x *QueryYakScriptRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *QueryYakScriptRequest) GetNoResultReturn() bool {
	if x != nil {
		return x.NoResultReturn
	}
	return false
}

func (x *QueryYakScriptRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryYakScriptRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *QueryYakScriptRequest) GetIgnoreGeneralModuleOrder() bool {
	if x != nil {
		return x.IgnoreGeneralModuleOrder
	}
	return false
}

func (x *QueryYakScriptRequest) GetFamily() []string {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *QueryYakScriptRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *QueryYakScriptRequest) GetGroup() *PluginGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *QueryYakScriptRequest) GetExcludeTypes() []string {
	if x != nil {
		return x.ExcludeTypes
	}
	return nil
}

func (x *QueryYakScriptRequest) GetIsMITMParamPlugins() int64 {
	if x != nil {
		return x.IsMITMParamPlugins
	}
	return 0
}

func (x *QueryYakScriptRequest) GetFieldKeywords() string {
	if x != nil {
		return x.FieldKeywords
	}
	return ""
}

type PluginGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnSetGroup   bool     `protobuf:"varint,1,opt,name=UnSetGroup,proto3" json:"UnSetGroup,omitempty"`
	Group        []string `protobuf:"bytes,2,rep,name=Group,proto3" json:"Group,omitempty"`
	IsPocBuiltIn string   `protobuf:"bytes,3,opt,name=IsPocBuiltIn,proto3" json:"IsPocBuiltIn,omitempty"`
}

func (x *PluginGroup) Reset() {
	*x = PluginGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginGroup) ProtoMessage() {}

func (x *PluginGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginGroup.ProtoReflect.Descriptor instead.
func (*PluginGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{410}
}

func (x *PluginGroup) GetUnSetGroup() bool {
	if x != nil {
		return x.UnSetGroup
	}
	return false
}

func (x *PluginGroup) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *PluginGroup) GetIsPocBuiltIn() string {
	if x != nil {
		return x.IsPocBuiltIn
	}
	return ""
}

type QueryYakScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging      `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*YakScript `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptResponse) Reset() {
	*x = QueryYakScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptResponse) ProtoMessage() {}

func (x *QueryYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{411}
}

func (x *QueryYakScriptResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryYakScriptResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type YakScriptParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field        string `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
	DefaultValue string `protobuf:"bytes,2,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	// int/number/integer/float/str/bool
	TypeVerbose              string `protobuf:"bytes,3,opt,name=TypeVerbose,proto3" json:"TypeVerbose,omitempty"`
	FieldVerbose             string `protobuf:"bytes,4,opt,name=FieldVerbose,proto3" json:"FieldVerbose,omitempty"`
	Help                     string `protobuf:"bytes,5,opt,name=Help,proto3" json:"Help,omitempty"`
	Required                 bool   `protobuf:"varint,6,opt,name=Required,proto3" json:"Required,omitempty"`
	Group                    string `protobuf:"bytes,7,opt,name=Group,proto3" json:"Group,omitempty"`
	ExtraSetting             string `protobuf:"bytes,8,opt,name=ExtraSetting,proto3" json:"ExtraSetting,omitempty"`
	MethodType               string `protobuf:"bytes,9,opt,name=MethodType,proto3" json:"MethodType,omitempty"`
	JsonSchema               string `protobuf:"bytes,10,opt,name=JsonSchema,proto3" json:"JsonSchema,omitempty"`
	SuggestionDataExpression string `protobuf:"bytes,11,opt,name=SuggestionDataExpression,proto3" json:"SuggestionDataExpression,omitempty"`
}

func (x *YakScriptParam) Reset() {
	*x = YakScriptParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptParam) ProtoMessage() {}

func (x *YakScriptParam) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptParam.ProtoReflect.Descriptor instead.
func (*YakScriptParam) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{412}
}

func (x *YakScriptParam) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *YakScriptParam) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *YakScriptParam) GetTypeVerbose() string {
	if x != nil {
		return x.TypeVerbose
	}
	return ""
}

func (x *YakScriptParam) GetFieldVerbose() string {
	if x != nil {
		return x.FieldVerbose
	}
	return ""
}

func (x *YakScriptParam) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YakScriptParam) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *YakScriptParam) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *YakScriptParam) GetExtraSetting() string {
	if x != nil {
		return x.ExtraSetting
	}
	return ""
}

func (x *YakScriptParam) GetMethodType() string {
	if x != nil {
		return x.MethodType
	}
	return ""
}

func (x *YakScriptParam) GetJsonSchema() string {
	if x != nil {
		return x.JsonSchema
	}
	return ""
}

func (x *YakScriptParam) GetSuggestionDataExpression() string {
	if x != nil {
		return x.SuggestionDataExpression
	}
	return ""
}

type YakScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Content              string            `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Type                 string            `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Params               []*YakScriptParam `protobuf:"bytes,4,rep,name=Params,proto3" json:"Params,omitempty"`
	CreatedAt            int64             `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ScriptName           string            `protobuf:"bytes,6,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Help                 string            `protobuf:"bytes,7,opt,name=Help,proto3" json:"Help,omitempty"`
	Level                string            `protobuf:"bytes,8,opt,name=Level,proto3" json:"Level,omitempty"`
	Author               string            `protobuf:"bytes,9,opt,name=Author,proto3" json:"Author,omitempty"`
	Tags                 string            `protobuf:"bytes,10,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsHistory            bool              `protobuf:"varint,11,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore             bool              `protobuf:"varint,12,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule      bool              `protobuf:"varint,13,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	GeneralModuleVerbose string            `protobuf:"bytes,14,opt,name=GeneralModuleVerbose,proto3" json:"GeneralModuleVerbose,omitempty"`
	GeneralModuleKey     string            `protobuf:"bytes,15,opt,name=GeneralModuleKey,proto3" json:"GeneralModuleKey,omitempty"`
	FromGit              string            `protobuf:"bytes,16,opt,name=FromGit,proto3" json:"FromGit,omitempty"`
	EnablePluginSelector bool              `protobuf:"varint,17,opt,name=EnablePluginSelector,proto3" json:"EnablePluginSelector,omitempty"`
	PluginSelectorTypes  string            `protobuf:"bytes,18,opt,name=PluginSelectorTypes,proto3" json:"PluginSelectorTypes,omitempty"`
	OnlineId             int64             `protobuf:"varint,19,opt,name=OnlineId,proto3" json:"OnlineId,omitempty"`
	UserId               int64             `protobuf:"varint,20,opt,name=UserId,proto3" json:"UserId,omitempty"`
	OnlineScriptName     string            `protobuf:"bytes,21,opt,name=OnlineScriptName,proto3" json:"OnlineScriptName,omitempty"`
	OnlineContributors   string            `protobuf:"bytes,22,opt,name=OnlineContributors,proto3" json:"OnlineContributors,omitempty"`
	UUID                 string            `protobuf:"bytes,23,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OnlineIsPrivate      bool              `protobuf:"varint,24,opt,name=OnlineIsPrivate,proto3" json:"OnlineIsPrivate,omitempty"`
	HeadImg              string            `protobuf:"bytes,25,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	OnlineBaseUrl        string            `protobuf:"bytes,26,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
	BaseOnlineId         int64             `protobuf:"varint,27,opt,name=BaseOnlineId,proto3" json:"BaseOnlineId,omitempty"`
	OnlineOfficial       bool              `protobuf:"varint,28,opt,name=OnlineOfficial,proto3" json:"OnlineOfficial,omitempty"`
	OnlineGroup          string            `protobuf:"bytes,29,opt,name=OnlineGroup,proto3" json:"OnlineGroup,omitempty"`
	IsCorePlugin         bool              `protobuf:"varint,30,opt,name=IsCorePlugin,proto3" json:"IsCorePlugin,omitempty"`
	UpdatedAt            int64             `protobuf:"varint,31,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	RiskType             string            `protobuf:"bytes,32,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	// 结构弃用
	RiskDetail     *QueryYakScriptRiskDetailByCWEResponse `protobuf:"bytes,33,opt,name=RiskDetail,proto3" json:"RiskDetail,omitempty"`
	RiskAnnotation string                                 `protobuf:"bytes,34,opt,name=RiskAnnotation,proto3" json:"RiskAnnotation,omitempty"`
	// 协作者
	CollaboratorInfo []*Collaborator `protobuf:"bytes,35,rep,name=CollaboratorInfo,proto3" json:"CollaboratorInfo,omitempty"`
	RiskInfo         []*YakRiskInfo  `protobuf:"bytes,36,rep,name=RiskInfo,proto3" json:"RiskInfo,omitempty"`
	IsUpdate         bool            `protobuf:"varint,37,opt,name=IsUpdate,proto3" json:"IsUpdate,omitempty"`
	PluginEnvKey     []string        `protobuf:"bytes,38,rep,name=PluginEnvKey,proto3" json:"PluginEnvKey,omitempty"`
}

func (x *YakScript) Reset() {
	*x = YakScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScript) ProtoMessage() {}

func (x *YakScript) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScript.ProtoReflect.Descriptor instead.
func (*YakScript) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{413}
}

func (x *YakScript) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YakScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *YakScript) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *YakScript) GetParams() []*YakScriptParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *YakScript) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *YakScript) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *YakScript) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YakScript) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *YakScript) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *YakScript) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *YakScript) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *YakScript) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *YakScript) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *YakScript) GetGeneralModuleVerbose() string {
	if x != nil {
		return x.GeneralModuleVerbose
	}
	return ""
}

func (x *YakScript) GetGeneralModuleKey() string {
	if x != nil {
		return x.GeneralModuleKey
	}
	return ""
}

func (x *YakScript) GetFromGit() string {
	if x != nil {
		return x.FromGit
	}
	return ""
}

func (x *YakScript) GetEnablePluginSelector() bool {
	if x != nil {
		return x.EnablePluginSelector
	}
	return false
}

func (x *YakScript) GetPluginSelectorTypes() string {
	if x != nil {
		return x.PluginSelectorTypes
	}
	return ""
}

func (x *YakScript) GetOnlineId() int64 {
	if x != nil {
		return x.OnlineId
	}
	return 0
}

func (x *YakScript) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *YakScript) GetOnlineScriptName() string {
	if x != nil {
		return x.OnlineScriptName
	}
	return ""
}

func (x *YakScript) GetOnlineContributors() string {
	if x != nil {
		return x.OnlineContributors
	}
	return ""
}

func (x *YakScript) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *YakScript) GetOnlineIsPrivate() bool {
	if x != nil {
		return x.OnlineIsPrivate
	}
	return false
}

func (x *YakScript) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *YakScript) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

func (x *YakScript) GetBaseOnlineId() int64 {
	if x != nil {
		return x.BaseOnlineId
	}
	return 0
}

func (x *YakScript) GetOnlineOfficial() bool {
	if x != nil {
		return x.OnlineOfficial
	}
	return false
}

func (x *YakScript) GetOnlineGroup() string {
	if x != nil {
		return x.OnlineGroup
	}
	return ""
}

func (x *YakScript) GetIsCorePlugin() bool {
	if x != nil {
		return x.IsCorePlugin
	}
	return false
}

func (x *YakScript) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *YakScript) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *YakScript) GetRiskDetail() *QueryYakScriptRiskDetailByCWEResponse {
	if x != nil {
		return x.RiskDetail
	}
	return nil
}

func (x *YakScript) GetRiskAnnotation() string {
	if x != nil {
		return x.RiskAnnotation
	}
	return ""
}

func (x *YakScript) GetCollaboratorInfo() []*Collaborator {
	if x != nil {
		return x.CollaboratorInfo
	}
	return nil
}

func (x *YakScript) GetRiskInfo() []*YakRiskInfo {
	if x != nil {
		return x.RiskInfo
	}
	return nil
}

func (x *YakScript) GetIsUpdate() bool {
	if x != nil {
		return x.IsUpdate
	}
	return false
}

func (x *YakScript) GetPluginEnvKey() []string {
	if x != nil {
		return x.PluginEnvKey
	}
	return nil
}

type Collaborator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadImg  string `protobuf:"bytes,1,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (x *Collaborator) Reset() {
	*x = Collaborator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collaborator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collaborator) ProtoMessage() {}

func (x *Collaborator) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collaborator.ProtoReflect.Descriptor instead.
func (*Collaborator) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{414}
}

func (x *Collaborator) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *Collaborator) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type SaveNewYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content              string            `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Type                 string            `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Params               []*YakScriptParam `protobuf:"bytes,3,rep,name=Params,proto3" json:"Params,omitempty"`
	ScriptName           string            `protobuf:"bytes,4,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Help                 string            `protobuf:"bytes,5,opt,name=Help,proto3" json:"Help,omitempty"`
	Level                string            `protobuf:"bytes,6,opt,name=Level,proto3" json:"Level,omitempty"`
	Tags                 string            `protobuf:"bytes,7,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsHistory            bool              `protobuf:"varint,8,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore             bool              `protobuf:"varint,9,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule      bool              `protobuf:"varint,10,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	GeneralModuleVerbose string            `protobuf:"bytes,11,opt,name=GeneralModuleVerbose,proto3" json:"GeneralModuleVerbose,omitempty"`
	GeneralModuleKey     string            `protobuf:"bytes,12,opt,name=GeneralModuleKey,proto3" json:"GeneralModuleKey,omitempty"`
	FromGit              string            `protobuf:"bytes,13,opt,name=FromGit,proto3" json:"FromGit,omitempty"`
	EnablePluginSelector bool              `protobuf:"varint,14,opt,name=EnablePluginSelector,proto3" json:"EnablePluginSelector,omitempty"`
	PluginSelectorTypes  string            `protobuf:"bytes,15,opt,name=PluginSelectorTypes,proto3" json:"PluginSelectorTypes,omitempty"`
	IsCorePlugin         bool              `protobuf:"varint,16,opt,name=IsCorePlugin,proto3" json:"IsCorePlugin,omitempty"`
	RiskType             string            `protobuf:"bytes,17,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	// 这个结构弃用,换成YakRiskInfo
	RiskDetail     *QueryYakScriptRiskDetailByCWEResponse `protobuf:"bytes,18,opt,name=RiskDetail,proto3" json:"RiskDetail,omitempty"`
	RiskAnnotation string                                 `protobuf:"bytes,19,opt,name=RiskAnnotation,proto3" json:"RiskAnnotation,omitempty"`
	Id             int64                                  `protobuf:"varint,20,opt,name=Id,proto3" json:"Id,omitempty"`
	RiskInfo       []*YakRiskInfo                         `protobuf:"bytes,21,rep,name=RiskInfo,proto3" json:"RiskInfo,omitempty"`
	PluginEnvKey   []string                               `protobuf:"bytes,22,rep,name=PluginEnvKey,proto3" json:"PluginEnvKey,omitempty"`
}

func (x *SaveNewYakScriptRequest) Reset() {
	*x = SaveNewYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveNewYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNewYakScriptRequest) ProtoMessage() {}

func (x *SaveNewYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNewYakScriptRequest.ProtoReflect.Descriptor instead.
func (*SaveNewYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{415}
}

func (x *SaveNewYakScriptRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetParams() []*YakScriptParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SaveNewYakScriptRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetGeneralModuleVerbose() string {
	if x != nil {
		return x.GeneralModuleVerbose
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetGeneralModuleKey() string {
	if x != nil {
		return x.GeneralModuleKey
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetFromGit() string {
	if x != nil {
		return x.FromGit
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetEnablePluginSelector() bool {
	if x != nil {
		return x.EnablePluginSelector
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetPluginSelectorTypes() string {
	if x != nil {
		return x.PluginSelectorTypes
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetIsCorePlugin() bool {
	if x != nil {
		return x.IsCorePlugin
	}
	return false
}

func (x *SaveNewYakScriptRequest) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetRiskDetail() *QueryYakScriptRiskDetailByCWEResponse {
	if x != nil {
		return x.RiskDetail
	}
	return nil
}

func (x *SaveNewYakScriptRequest) GetRiskAnnotation() string {
	if x != nil {
		return x.RiskAnnotation
	}
	return ""
}

func (x *SaveNewYakScriptRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SaveNewYakScriptRequest) GetRiskInfo() []*YakRiskInfo {
	if x != nil {
		return x.RiskInfo
	}
	return nil
}

func (x *SaveNewYakScriptRequest) GetPluginEnvKey() []string {
	if x != nil {
		return x.PluginEnvKey
	}
	return nil
}

type SaveYakScriptToOnlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptNames      []string `protobuf:"bytes,1,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	Token            string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	IsPrivate        bool     `protobuf:"varint,3,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	All              bool     `protobuf:"varint,4,opt,name=All,proto3" json:"All,omitempty"`
	PluginSupplement string   `protobuf:"bytes,5,opt,name=PluginSupplement,proto3" json:"PluginSupplement,omitempty"`
}

func (x *SaveYakScriptToOnlineRequest) Reset() {
	*x = SaveYakScriptToOnlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveYakScriptToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveYakScriptToOnlineRequest) ProtoMessage() {}

func (x *SaveYakScriptToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveYakScriptToOnlineRequest.ProtoReflect.Descriptor instead.
func (*SaveYakScriptToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{416}
}

func (x *SaveYakScriptToOnlineRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *SaveYakScriptToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SaveYakScriptToOnlineRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *SaveYakScriptToOnlineRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SaveYakScriptToOnlineRequest) GetPluginSupplement() string {
	if x != nil {
		return x.PluginSupplement
	}
	return ""
}

type SaveYakScriptToOnlineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 进度
	Progress    float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message     string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType string  `protobuf:"bytes,3,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
}

func (x *SaveYakScriptToOnlineResponse) Reset() {
	*x = SaveYakScriptToOnlineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveYakScriptToOnlineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveYakScriptToOnlineResponse) ProtoMessage() {}

func (x *SaveYakScriptToOnlineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveYakScriptToOnlineResponse.ProtoReflect.Descriptor instead.
func (*SaveYakScriptToOnlineResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{417}
}

func (x *SaveYakScriptToOnlineResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SaveYakScriptToOnlineResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SaveYakScriptToOnlineResponse) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type ToOnlineResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName string `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
}

func (x *ToOnlineResult) Reset() {
	*x = ToOnlineResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToOnlineResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToOnlineResult) ProtoMessage() {}

func (x *ToOnlineResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToOnlineResult.ProtoReflect.Descriptor instead.
func (*ToOnlineResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{418}
}

func (x *ToOnlineResult) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

type ExportLocalYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputDir       string  `protobuf:"bytes,1,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	OutputPluginDir string  `protobuf:"bytes,2,opt,name=OutputPluginDir,proto3" json:"OutputPluginDir,omitempty"`
	YakScriptIds    []int64 `protobuf:"varint,3,rep,packed,name=YakScriptIds,proto3" json:"YakScriptIds,omitempty"`
	Keywords        string  `protobuf:"bytes,4,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Type            string  `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	UserName        string  `protobuf:"bytes,6,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Tags            string  `protobuf:"bytes,7,opt,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *ExportLocalYakScriptRequest) Reset() {
	*x = ExportLocalYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportLocalYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportLocalYakScriptRequest) ProtoMessage() {}

func (x *ExportLocalYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportLocalYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExportLocalYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{419}
}

func (x *ExportLocalYakScriptRequest) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetOutputPluginDir() string {
	if x != nil {
		return x.OutputPluginDir
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetYakScriptIds() []int64 {
	if x != nil {
		return x.YakScriptIds
	}
	return nil
}

func (x *ExportLocalYakScriptRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ExportLocalYakScriptRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

type ExportLocalYakScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputDir string `protobuf:"bytes,1,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
}

func (x *ExportLocalYakScriptResponse) Reset() {
	*x = ExportLocalYakScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportLocalYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportLocalYakScriptResponse) ProtoMessage() {}

func (x *ExportLocalYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportLocalYakScriptResponse.ProtoReflect.Descriptor instead.
func (*ExportLocalYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{420}
}

func (x *ExportLocalYakScriptResponse) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

type ExportYakScriptLocalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputDir   string  `protobuf:"bytes,1,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	Progress    float64 `protobuf:"fixed64,2,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message     string  `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType string  `protobuf:"bytes,4,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
}

func (x *ExportYakScriptLocalResponse) Reset() {
	*x = ExportYakScriptLocalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportYakScriptLocalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptLocalResponse) ProtoMessage() {}

func (x *ExportYakScriptLocalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptLocalResponse.ProtoReflect.Descriptor instead.
func (*ExportYakScriptLocalResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{421}
}

func (x *ExportYakScriptLocalResponse) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *ExportYakScriptLocalResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ExportYakScriptLocalResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExportYakScriptLocalResponse) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type ImportYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dirs []string `protobuf:"bytes,1,rep,name=Dirs,proto3" json:"Dirs,omitempty"`
}

func (x *ImportYakScriptRequest) Reset() {
	*x = ImportYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportYakScriptRequest) ProtoMessage() {}

func (x *ImportYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ImportYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{422}
}

func (x *ImportYakScriptRequest) GetDirs() []string {
	if x != nil {
		return x.Dirs
	}
	return nil
}

type ImportYakScriptResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 进度
	Progress    float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message     string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType string  `protobuf:"bytes,3,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
}

func (x *ImportYakScriptResult) Reset() {
	*x = ImportYakScriptResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportYakScriptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportYakScriptResult) ProtoMessage() {}

func (x *ImportYakScriptResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportYakScriptResult.ProtoReflect.Descriptor instead.
func (*ImportYakScriptResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{423}
}

func (x *ImportYakScriptResult) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ImportYakScriptResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ImportYakScriptResult) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type QueryYakScriptGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All    bool   `protobuf:"varint,1,opt,name=All,proto3" json:"All,omitempty"`
	PageId string `protobuf:"bytes,2,opt,name=PageId,proto3" json:"PageId,omitempty"`
	// 默认是false， 目前中有专项漏洞这里的关键词组传 true 才会返回数据，插件管理里面不传就不会返回 poc 这边的内置组
	IsPocBuiltIn       bool     `protobuf:"varint,3,opt,name=IsPocBuiltIn,proto3" json:"IsPocBuiltIn,omitempty"`
	ExcludeType        []string `protobuf:"bytes,4,rep,name=ExcludeType,proto3" json:"ExcludeType,omitempty"`
	IsMITMParamPlugins int64    `protobuf:"varint,5,opt,name=IsMITMParamPlugins,proto3" json:"IsMITMParamPlugins,omitempty"`
}

func (x *QueryYakScriptGroupRequest) Reset() {
	*x = QueryYakScriptGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptGroupRequest) ProtoMessage() {}

func (x *QueryYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{424}
}

func (x *QueryYakScriptGroupRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *QueryYakScriptGroupRequest) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *QueryYakScriptGroupRequest) GetIsPocBuiltIn() bool {
	if x != nil {
		return x.IsPocBuiltIn
	}
	return false
}

func (x *QueryYakScriptGroupRequest) GetExcludeType() []string {
	if x != nil {
		return x.ExcludeType
	}
	return nil
}

func (x *QueryYakScriptGroupRequest) GetIsMITMParamPlugins() int64 {
	if x != nil {
		return x.IsMITMParamPlugins
	}
	return 0
}

type QueryYakScriptGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group []*GroupCount `protobuf:"bytes,1,rep,name=Group,proto3" json:"Group,omitempty"`
}

func (x *QueryYakScriptGroupResponse) Reset() {
	*x = QueryYakScriptGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptGroupResponse) ProtoMessage() {}

func (x *QueryYakScriptGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptGroupResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{425}
}

func (x *QueryYakScriptGroupResponse) GetGroup() []*GroupCount {
	if x != nil {
		return x.Group
	}
	return nil
}

type GroupCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total   int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Default bool   `protobuf:"varint,3,opt,name=Default,proto3" json:"Default,omitempty"`
	// 临时组ID
	TemporaryId  string `protobuf:"bytes,5,opt,name=TemporaryId,proto3" json:"TemporaryId,omitempty"`
	IsPocBuiltIn bool   `protobuf:"varint,6,opt,name=IsPocBuiltIn,proto3" json:"IsPocBuiltIn,omitempty"`
}

func (x *GroupCount) Reset() {
	*x = GroupCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCount) ProtoMessage() {}

func (x *GroupCount) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCount.ProtoReflect.Descriptor instead.
func (*GroupCount) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{426}
}

func (x *GroupCount) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GroupCount) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GroupCount) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *GroupCount) GetTemporaryId() string {
	if x != nil {
		return x.TemporaryId
	}
	return ""
}

func (x *GroupCount) GetIsPocBuiltIn() bool {
	if x != nil {
		return x.IsPocBuiltIn
	}
	return false
}

type SaveYakScriptGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter      *QueryYakScriptRequest `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	SaveGroup   []string               `protobuf:"bytes,2,rep,name=SaveGroup,proto3" json:"SaveGroup,omitempty"`
	RemoveGroup []string               `protobuf:"bytes,3,rep,name=RemoveGroup,proto3" json:"RemoveGroup,omitempty"`
	PageId      string                 `protobuf:"bytes,4,opt,name=PageId,proto3" json:"PageId,omitempty"`
}

func (x *SaveYakScriptGroupRequest) Reset() {
	*x = SaveYakScriptGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveYakScriptGroupRequest) ProtoMessage() {}

func (x *SaveYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*SaveYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{427}
}

func (x *SaveYakScriptGroupRequest) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SaveYakScriptGroupRequest) GetSaveGroup() []string {
	if x != nil {
		return x.SaveGroup
	}
	return nil
}

func (x *SaveYakScriptGroupRequest) GetRemoveGroup() []string {
	if x != nil {
		return x.RemoveGroup
	}
	return nil
}

func (x *SaveYakScriptGroupRequest) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

type RenameYakScriptGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	NewGroup string `protobuf:"bytes,2,opt,name=NewGroup,proto3" json:"NewGroup,omitempty"`
}

func (x *RenameYakScriptGroupRequest) Reset() {
	*x = RenameYakScriptGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameYakScriptGroupRequest) ProtoMessage() {}

func (x *RenameYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*RenameYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{428}
}

func (x *RenameYakScriptGroupRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RenameYakScriptGroupRequest) GetNewGroup() string {
	if x != nil {
		return x.NewGroup
	}
	return ""
}

type DeleteYakScriptGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *DeleteYakScriptGroupRequest) Reset() {
	*x = DeleteYakScriptGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptGroupRequest) ProtoMessage() {}

func (x *DeleteYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{429}
}

func (x *DeleteYakScriptGroupRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type GetYakScriptGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetGroup []string `protobuf:"bytes,1,rep,name=SetGroup,proto3" json:"SetGroup,omitempty"`
	AllGroup []string `protobuf:"bytes,2,rep,name=AllGroup,proto3" json:"AllGroup,omitempty"`
}

func (x *GetYakScriptGroupResponse) Reset() {
	*x = GetYakScriptGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptGroupResponse) ProtoMessage() {}

func (x *GetYakScriptGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptGroupResponse.ProtoReflect.Descriptor instead.
func (*GetYakScriptGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{430}
}

func (x *GetYakScriptGroupResponse) GetSetGroup() []string {
	if x != nil {
		return x.SetGroup
	}
	return nil
}

func (x *GetYakScriptGroupResponse) GetAllGroup() []string {
	if x != nil {
		return x.AllGroup
	}
	return nil
}

type ResetYakScriptGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ResetYakScriptGroupRequest) Reset() {
	*x = ResetYakScriptGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetYakScriptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetYakScriptGroupRequest) ProtoMessage() {}

func (x *ResetYakScriptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetYakScriptGroupRequest.ProtoReflect.Descriptor instead.
func (*ResetYakScriptGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{431}
}

func (x *ResetYakScriptGroupRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SetGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
}

func (x *SetGroupRequest) Reset() {
	*x = SetGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupRequest) ProtoMessage() {}

func (x *SetGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupRequest.ProtoReflect.Descriptor instead.
func (*SetGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{432}
}

func (x *SetGroupRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type GetYakScriptTagsAndTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  []*TagsAndType `protobuf:"bytes,1,rep,name=Type,proto3" json:"Type,omitempty"`
	Tag   []*TagsAndType `protobuf:"bytes,2,rep,name=Tag,proto3" json:"Tag,omitempty"`
	Group []*TagsAndType `protobuf:"bytes,3,rep,name=Group,proto3" json:"Group,omitempty"`
}

func (x *GetYakScriptTagsAndTypeResponse) Reset() {
	*x = GetYakScriptTagsAndTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptTagsAndTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptTagsAndTypeResponse) ProtoMessage() {}

func (x *GetYakScriptTagsAndTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptTagsAndTypeResponse.ProtoReflect.Descriptor instead.
func (*GetYakScriptTagsAndTypeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{433}
}

func (x *GetYakScriptTagsAndTypeResponse) GetType() []*TagsAndType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetYakScriptTagsAndTypeResponse) GetTag() []*TagsAndType {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *GetYakScriptTagsAndTypeResponse) GetGroup() []*TagsAndType {
	if x != nil {
		return x.Group
	}
	return nil
}

type TagsAndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *TagsAndType) Reset() {
	*x = TagsAndType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagsAndType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsAndType) ProtoMessage() {}

func (x *TagsAndType) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsAndType.ProtoReflect.Descriptor instead.
func (*TagsAndType) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{434}
}

func (x *TagsAndType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TagsAndType) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CodecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string           `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	Type       string           `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Auto       bool             `protobuf:"varint,3,opt,name=Auto,proto3" json:"Auto,omitempty"`
	Params     []*ExecParamItem `protobuf:"bytes,4,rep,name=Params,proto3" json:"Params,omitempty"`
	ScriptName string           `protobuf:"bytes,5,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	// 如果 InputBytes 设置了，将会无条件覆盖 Text
	InputBytes []byte `protobuf:"bytes,6,opt,name=InputBytes,proto3" json:"InputBytes,omitempty"`
}

func (x *CodecRequest) Reset() {
	*x = CodecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecRequest) ProtoMessage() {}

func (x *CodecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecRequest.ProtoReflect.Descriptor instead.
func (*CodecRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{435}
}

func (x *CodecRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CodecRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CodecRequest) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

func (x *CodecRequest) GetParams() []*ExecParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CodecRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *CodecRequest) GetInputBytes() []byte {
	if x != nil {
		return x.InputBytes
	}
	return nil
}

type CodecWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodecType  string           `protobuf:"bytes,1,opt,name=CodecType,proto3" json:"CodecType,omitempty"`
	Script     string           `protobuf:"bytes,2,opt,name=Script,proto3" json:"Script,omitempty"`
	PluginName string           `protobuf:"bytes,3,opt,name=PluginName,proto3" json:"PluginName,omitempty"`
	Params     []*ExecParamItem `protobuf:"bytes,5,rep,name=Params,proto3" json:"Params,omitempty"`
}

func (x *CodecWork) Reset() {
	*x = CodecWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecWork) ProtoMessage() {}

func (x *CodecWork) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecWork.ProtoReflect.Descriptor instead.
func (*CodecWork) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{436}
}

func (x *CodecWork) GetCodecType() string {
	if x != nil {
		return x.CodecType
	}
	return ""
}

func (x *CodecWork) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *CodecWork) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *CodecWork) GetParams() []*ExecParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

type CodecRequestFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string       `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	Auto       bool         `protobuf:"varint,2,opt,name=Auto,proto3" json:"Auto,omitempty"`
	WorkFlow   []*CodecWork `protobuf:"bytes,3,rep,name=WorkFlow,proto3" json:"WorkFlow,omitempty"`
	InputBytes []byte       `protobuf:"bytes,6,opt,name=InputBytes,proto3" json:"InputBytes,omitempty"`
}

func (x *CodecRequestFlow) Reset() {
	*x = CodecRequestFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecRequestFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecRequestFlow) ProtoMessage() {}

func (x *CodecRequestFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecRequestFlow.ProtoReflect.Descriptor instead.
func (*CodecRequestFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{437}
}

func (x *CodecRequestFlow) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CodecRequestFlow) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

func (x *CodecRequestFlow) GetWorkFlow() []*CodecWork {
	if x != nil {
		return x.WorkFlow
	}
	return nil
}

func (x *CodecRequestFlow) GetInputBytes() []byte {
	if x != nil {
		return x.InputBytes
	}
	return nil
}

type CustomizeCodecFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowName   string       `protobuf:"bytes,1,opt,name=FlowName,proto3" json:"FlowName,omitempty"`
	WorkFlow   []*CodecWork `protobuf:"bytes,2,rep,name=WorkFlow,proto3" json:"WorkFlow,omitempty"`
	WorkFlowUI string       `protobuf:"bytes,3,opt,name=WorkFlowUI,proto3" json:"WorkFlowUI,omitempty"`
}

func (x *CustomizeCodecFlow) Reset() {
	*x = CustomizeCodecFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizeCodecFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeCodecFlow) ProtoMessage() {}

func (x *CustomizeCodecFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeCodecFlow.ProtoReflect.Descriptor instead.
func (*CustomizeCodecFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{438}
}

func (x *CustomizeCodecFlow) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *CustomizeCodecFlow) GetWorkFlow() []*CodecWork {
	if x != nil {
		return x.WorkFlow
	}
	return nil
}

func (x *CustomizeCodecFlow) GetWorkFlowUI() string {
	if x != nil {
		return x.WorkFlowUI
	}
	return ""
}

type DeleteCodecFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll bool   `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	FlowName  string `protobuf:"bytes,2,opt,name=FlowName,proto3" json:"FlowName,omitempty"`
}

func (x *DeleteCodecFlowRequest) Reset() {
	*x = DeleteCodecFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCodecFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodecFlowRequest) ProtoMessage() {}

func (x *DeleteCodecFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodecFlowRequest.ProtoReflect.Descriptor instead.
func (*DeleteCodecFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{439}
}

func (x *DeleteCodecFlowRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteCodecFlowRequest) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

type GetCodecFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flows []*CustomizeCodecFlow `protobuf:"bytes,1,rep,name=Flows,proto3" json:"Flows,omitempty"`
}

func (x *GetCodecFlowResponse) Reset() {
	*x = GetCodecFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodecFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodecFlowResponse) ProtoMessage() {}

func (x *GetCodecFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodecFlowResponse.ProtoReflect.Descriptor instead.
func (*GetCodecFlowResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{440}
}

func (x *GetCodecFlowResponse) GetFlows() []*CustomizeCodecFlow {
	if x != nil {
		return x.Flows
	}
	return nil
}

type CodecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            string `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`       // show result
	RawResult         []byte `protobuf:"bytes,2,opt,name=RawResult,proto3" json:"RawResult,omitempty"` // raw result, need hex editor
	ResultVerbose     string `protobuf:"bytes,3,opt,name=ResultVerbose,proto3" json:"ResultVerbose,omitempty"`
	IsFalseAppearance bool   `protobuf:"varint,4,opt,name=IsFalseAppearance,proto3" json:"IsFalseAppearance,omitempty"` // 是否是失真
}

func (x *CodecResponse) Reset() {
	*x = CodecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecResponse) ProtoMessage() {}

func (x *CodecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecResponse.ProtoReflect.Descriptor instead.
func (*CodecResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{441}
}

func (x *CodecResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *CodecResponse) GetRawResult() []byte {
	if x != nil {
		return x.RawResult
	}
	return nil
}

func (x *CodecResponse) GetResultVerbose() string {
	if x != nil {
		return x.ResultVerbose
	}
	return ""
}

func (x *CodecResponse) GetIsFalseAppearance() bool {
	if x != nil {
		return x.IsFalseAppearance
	}
	return false
}

type CodecMethods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Methods []*CodecMethod `protobuf:"bytes,1,rep,name=Methods,proto3" json:"Methods,omitempty"`
}

func (x *CodecMethods) Reset() {
	*x = CodecMethods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecMethods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecMethods) ProtoMessage() {}

func (x *CodecMethods) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecMethods.ProtoReflect.Descriptor instead.
func (*CodecMethods) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{442}
}

func (x *CodecMethods) GetMethods() []*CodecMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

type CodecMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag         string        `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`                 // Codec 分类
	CodecName   string        `protobuf:"bytes,2,opt,name=CodecName,proto3" json:"CodecName,omitempty"`     //  Codec name
	CodecMethod string        `protobuf:"bytes,3,opt,name=CodecMethod,proto3" json:"CodecMethod,omitempty"` // Codec Method
	Desc        string        `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty"`               // 描述
	Params      []*CodecParam `protobuf:"bytes,5,rep,name=Params,proto3" json:"Params,omitempty"`           // Codec Param 用于构建样式
}

func (x *CodecMethod) Reset() {
	*x = CodecMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecMethod) ProtoMessage() {}

func (x *CodecMethod) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecMethod.ProtoReflect.Descriptor instead.
func (*CodecMethod) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{443}
}

func (x *CodecMethod) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CodecMethod) GetCodecName() string {
	if x != nil {
		return x.CodecName
	}
	return ""
}

func (x *CodecMethod) GetCodecMethod() string {
	if x != nil {
		return x.CodecMethod
	}
	return ""
}

func (x *CodecMethod) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CodecMethod) GetParams() []*CodecParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type CodecParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string      `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type         string      `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`                 // input | select | checkbox | search | monaco | inputSelect
	Options      []string    `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`           // 可选值
	Required     bool        `protobuf:"varint,4,opt,name=Required,proto3" json:"Required,omitempty"`        // 就算是false也需要传
	Desc         string      `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`                 // 描述
	Regex        string      `protobuf:"bytes,6,opt,name=Regex,proto3" json:"Regex,omitempty"`               // 正则
	Label        string      `protobuf:"bytes,7,opt,name=Label,proto3" json:"Label,omitempty"`               // 参数文本标签
	DefaultValue string      `protobuf:"bytes,8,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"` // 默认值
	Connector    *CodecParam `protobuf:"bytes,9,opt,name=Connector,proto3" json:"Connector,omitempty"`       // 连接组件
}

func (x *CodecParam) Reset() {
	*x = CodecParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecParam) ProtoMessage() {}

func (x *CodecParam) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecParam.ProtoReflect.Descriptor instead.
func (*CodecParam) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{444}
}

func (x *CodecParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodecParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CodecParam) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CodecParam) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *CodecParam) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CodecParam) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *CodecParam) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CodecParam) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *CodecParam) GetConnector() *CodecParam {
	if x != nil {
		return x.Connector
	}
	return nil
}

// Yak Invoker
type ExecHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	YakScriptId   int64   `protobuf:"varint,3,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	YakScriptName string  `protobuf:"bytes,4,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *ExecHistoryRequest) Reset() {
	*x = ExecHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRequest) ProtoMessage() {}

func (x *ExecHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRequest.ProtoReflect.Descriptor instead.
func (*ExecHistoryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{445}
}

func (x *ExecHistoryRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ExecHistoryRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExecHistoryRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type ExecHistoryRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*ExecHistoryRecord `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination *Paging              `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64                `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *ExecHistoryRecordResponse) Reset() {
	*x = ExecHistoryRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecHistoryRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRecordResponse) ProtoMessage() {}

func (x *ExecHistoryRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRecordResponse.ProtoReflect.Descriptor instead.
func (*ExecHistoryRecordResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{446}
}

func (x *ExecHistoryRecordResponse) GetData() []*ExecHistoryRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecHistoryRecordResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ExecHistoryRecordResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 执行的历史记录
type ExecHistoryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 脚本内容
	Script string `protobuf:"bytes,1,opt,name=Script,proto3" json:"Script,omitempty"`
	// 脚本 ID（如果有的话）
	ScriptId string `protobuf:"bytes,2,opt,name=ScriptId,proto3" json:"ScriptId,omitempty"`
	// 执行时间点
	Timestamp int64 `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// 执行间隔
	DurationMs int64 `protobuf:"varint,4,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`
	// 执行参数（命令行参数部分）
	Params string `protobuf:"bytes,5,opt,name=Params,proto3" json:"Params,omitempty"`
	// 执行成功还是失败
	Ok bool `protobuf:"varint,7,opt,name=Ok,proto3" json:"Ok,omitempty"`
	// 失败原因是啥？
	Reason string `protobuf:"bytes,8,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// Uid
	Id string `protobuf:"bytes,9,opt,name=Id,proto3" json:"Id,omitempty"`
	// 展示界面内容
	Stdout        []byte `protobuf:"bytes,10,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Stderr        []byte `protobuf:"bytes,11,opt,name=Stderr,proto3" json:"Stderr,omitempty"`
	RuntimeId     string `protobuf:"bytes,12,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	FromYakModule string `protobuf:"bytes,13,opt,name=FromYakModule,proto3" json:"FromYakModule,omitempty"`
	StdoutLen     int64  `protobuf:"varint,14,opt,name=StdoutLen,proto3" json:"StdoutLen,omitempty"`
	StderrLen     int64  `protobuf:"varint,15,opt,name=StderrLen,proto3" json:"StderrLen,omitempty"`
	Messages      []byte `protobuf:"bytes,16,opt,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *ExecHistoryRecord) Reset() {
	*x = ExecHistoryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRecord) ProtoMessage() {}

func (x *ExecHistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRecord.ProtoReflect.Descriptor instead.
func (*ExecHistoryRecord) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{447}
}

func (x *ExecHistoryRecord) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ExecHistoryRecord) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ExecHistoryRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecHistoryRecord) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *ExecHistoryRecord) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *ExecHistoryRecord) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ExecHistoryRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecHistoryRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecHistoryRecord) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *ExecHistoryRecord) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *ExecHistoryRecord) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *ExecHistoryRecord) GetFromYakModule() string {
	if x != nil {
		return x.FromYakModule
	}
	return ""
}

func (x *ExecHistoryRecord) GetStdoutLen() int64 {
	if x != nil {
		return x.StdoutLen
	}
	return 0
}

func (x *ExecHistoryRecord) GetStderrLen() int64 {
	if x != nil {
		return x.StderrLen
	}
	return 0
}

func (x *ExecHistoryRecord) GetMessages() []byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Fuzz 相关模型
type StringFuzzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template                    string `protobuf:"bytes,1,opt,name=Template,proto3" json:"Template,omitempty"`
	HotPatchCode                string `protobuf:"bytes,2,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	HotPatchCodeWithParamGetter string `protobuf:"bytes,3,opt,name=HotPatchCodeWithParamGetter,proto3" json:"HotPatchCodeWithParamGetter,omitempty"`
	Limit                       int64  `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	TimeoutSeconds              int64  `protobuf:"varint,5,opt,name=TimeoutSeconds,proto3" json:"TimeoutSeconds,omitempty"`
}

func (x *StringFuzzerRequest) Reset() {
	*x = StringFuzzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFuzzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFuzzerRequest) ProtoMessage() {}

func (x *StringFuzzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFuzzerRequest.ProtoReflect.Descriptor instead.
func (*StringFuzzerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{448}
}

func (x *StringFuzzerRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *StringFuzzerRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *StringFuzzerRequest) GetHotPatchCodeWithParamGetter() string {
	if x != nil {
		return x.HotPatchCodeWithParamGetter
	}
	return ""
}

func (x *StringFuzzerRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StringFuzzerRequest) GetTimeoutSeconds() int64 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type StringFuzzerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results [][]byte `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *StringFuzzerResponse) Reset() {
	*x = StringFuzzerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFuzzerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFuzzerResponse) ProtoMessage() {}

func (x *StringFuzzerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFuzzerResponse.ProtoReflect.Descriptor instead.
func (*StringFuzzerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{449}
}

func (x *StringFuzzerResponse) GetResults() [][]byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type HTTPRequestAnalysisMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request  string `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	IsHTTPS  bool   `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	Response string `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *HTTPRequestAnalysisMaterial) Reset() {
	*x = HTTPRequestAnalysisMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestAnalysisMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestAnalysisMaterial) ProtoMessage() {}

func (x *HTTPRequestAnalysisMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestAnalysisMaterial.ProtoReflect.Descriptor instead.
func (*HTTPRequestAnalysisMaterial) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{450}
}

func (x *HTTPRequestAnalysisMaterial) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *HTTPRequestAnalysisMaterial) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *HTTPRequestAnalysisMaterial) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type HTTPRequestParamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypePosition        string `protobuf:"bytes,1,opt,name=TypePosition,proto3" json:"TypePosition,omitempty"`
	ParamOriginValue    string `protobuf:"bytes,2,opt,name=ParamOriginValue,proto3" json:"ParamOriginValue,omitempty"`
	ParamName           string `protobuf:"bytes,3,opt,name=ParamName,proto3" json:"ParamName,omitempty"`
	TypePositionVerbose string `protobuf:"bytes,4,opt,name=TypePositionVerbose,proto3" json:"TypePositionVerbose,omitempty"`
}

func (x *HTTPRequestParamItem) Reset() {
	*x = HTTPRequestParamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestParamItem) ProtoMessage() {}

func (x *HTTPRequestParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestParamItem.ProtoReflect.Descriptor instead.
func (*HTTPRequestParamItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{451}
}

func (x *HTTPRequestParamItem) GetTypePosition() string {
	if x != nil {
		return x.TypePosition
	}
	return ""
}

func (x *HTTPRequestParamItem) GetParamOriginValue() string {
	if x != nil {
		return x.ParamOriginValue
	}
	return ""
}

func (x *HTTPRequestParamItem) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *HTTPRequestParamItem) GetTypePositionVerbose() string {
	if x != nil {
		return x.TypePositionVerbose
	}
	return ""
}

type HTTPRequestAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params   []*HTTPRequestParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	Requests []string                `protobuf:"bytes,2,rep,name=Requests,proto3" json:"Requests,omitempty"`
	IsHTTPS  bool                    `protobuf:"varint,3,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
}

func (x *HTTPRequestAnalysis) Reset() {
	*x = HTTPRequestAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestAnalysis) ProtoMessage() {}

func (x *HTTPRequestAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestAnalysis.ProtoReflect.Descriptor instead.
func (*HTTPRequestAnalysis) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{452}
}

func (x *HTTPRequestAnalysis) GetParams() []*HTTPRequestParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *HTTPRequestAnalysis) GetRequests() []string {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *HTTPRequestAnalysis) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

type HTTPResponseMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubMatchers         []*HTTPResponseMatcher `protobuf:"bytes,1,rep,name=SubMatchers,proto3" json:"SubMatchers,omitempty"`
	SubMatcherCondition string                 `protobuf:"bytes,2,opt,name=SubMatcherCondition,proto3" json:"SubMatcherCondition,omitempty"`
	MatcherType         string                 `protobuf:"bytes,3,opt,name=MatcherType,proto3" json:"MatcherType,omitempty"`
	Scope               string                 `protobuf:"bytes,4,opt,name=Scope,proto3" json:"Scope,omitempty"`
	Condition           string                 `protobuf:"bytes,5,opt,name=Condition,proto3" json:"Condition,omitempty"`
	Group               []string               `protobuf:"bytes,6,rep,name=Group,proto3" json:"Group,omitempty"`
	GroupEncoding       string                 `protobuf:"bytes,7,opt,name=GroupEncoding,proto3" json:"GroupEncoding,omitempty"`
	Negative            bool                   `protobuf:"varint,8,opt,name=Negative,proto3" json:"Negative,omitempty"`
	ExprType            string                 `protobuf:"bytes,9,opt,name=ExprType,proto3" json:"ExprType,omitempty"`
	HitColor            string                 `protobuf:"bytes,10,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
	Action              string                 `protobuf:"bytes,11,opt,name=Action,proto3" json:"Action,omitempty"`
}

func (x *HTTPResponseMatcher) Reset() {
	*x = HTTPResponseMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseMatcher) ProtoMessage() {}

func (x *HTTPResponseMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseMatcher.ProtoReflect.Descriptor instead.
func (*HTTPResponseMatcher) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{453}
}

func (x *HTTPResponseMatcher) GetSubMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.SubMatchers
	}
	return nil
}

func (x *HTTPResponseMatcher) GetSubMatcherCondition() string {
	if x != nil {
		return x.SubMatcherCondition
	}
	return ""
}

func (x *HTTPResponseMatcher) GetMatcherType() string {
	if x != nil {
		return x.MatcherType
	}
	return ""
}

func (x *HTTPResponseMatcher) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *HTTPResponseMatcher) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *HTTPResponseMatcher) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *HTTPResponseMatcher) GetGroupEncoding() string {
	if x != nil {
		return x.GroupEncoding
	}
	return ""
}

func (x *HTTPResponseMatcher) GetNegative() bool {
	if x != nil {
		return x.Negative
	}
	return false
}

func (x *HTTPResponseMatcher) GetExprType() string {
	if x != nil {
		return x.ExprType
	}
	return ""
}

func (x *HTTPResponseMatcher) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

func (x *HTTPResponseMatcher) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type RenderVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params       []*KVPair `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	IsHTTPS      bool      `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	IsGmTLS      bool      `protobuf:"varint,3,opt,name=IsGmTLS,proto3" json:"IsGmTLS,omitempty"`
	HTTPRequest  []byte    `protobuf:"bytes,5,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	HTTPResponse []byte    `protobuf:"bytes,4,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
}

func (x *RenderVariablesRequest) Reset() {
	*x = RenderVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesRequest) ProtoMessage() {}

func (x *RenderVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesRequest.ProtoReflect.Descriptor instead.
func (*RenderVariablesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{454}
}

func (x *RenderVariablesRequest) GetParams() []*KVPair {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RenderVariablesRequest) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *RenderVariablesRequest) GetIsGmTLS() bool {
	if x != nil {
		return x.IsGmTLS
	}
	return false
}

func (x *RenderVariablesRequest) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

func (x *RenderVariablesRequest) GetHTTPResponse() []byte {
	if x != nil {
		return x.HTTPResponse
	}
	return nil
}

type RenderVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KVPair `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *RenderVariablesResponse) Reset() {
	*x = RenderVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesResponse) ProtoMessage() {}

func (x *RenderVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesResponse.ProtoReflect.Descriptor instead.
func (*RenderVariablesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{455}
}

func (x *RenderVariablesResponse) GetResults() []*KVPair {
	if x != nil {
		return x.Results
	}
	return nil
}

type MatchHTTPResponseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchers         []*HTTPResponseMatcher `protobuf:"bytes,1,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatcherCondition string                 `protobuf:"bytes,2,opt,name=MatcherCondition,proto3" json:"MatcherCondition,omitempty"`
	IsHTTPS          bool                   `protobuf:"varint,3,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	HTTPResponse     string                 `protobuf:"bytes,4,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	HTTPRequest      string                 `protobuf:"bytes,5,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
}

func (x *MatchHTTPResponseParams) Reset() {
	*x = MatchHTTPResponseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchHTTPResponseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchHTTPResponseParams) ProtoMessage() {}

func (x *MatchHTTPResponseParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchHTTPResponseParams.ProtoReflect.Descriptor instead.
func (*MatchHTTPResponseParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{456}
}

func (x *MatchHTTPResponseParams) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *MatchHTTPResponseParams) GetMatcherCondition() string {
	if x != nil {
		return x.MatcherCondition
	}
	return ""
}

func (x *MatchHTTPResponseParams) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *MatchHTTPResponseParams) GetHTTPResponse() string {
	if x != nil {
		return x.HTTPResponse
	}
	return ""
}

func (x *MatchHTTPResponseParams) GetHTTPRequest() string {
	if x != nil {
		return x.HTTPRequest
	}
	return ""
}

type MatchHTTPResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matched bool `protobuf:"varint,1,opt,name=Matched,proto3" json:"Matched,omitempty"`
}

func (x *MatchHTTPResponseResult) Reset() {
	*x = MatchHTTPResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchHTTPResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchHTTPResponseResult) ProtoMessage() {}

func (x *MatchHTTPResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchHTTPResponseResult.ProtoReflect.Descriptor instead.
func (*MatchHTTPResponseResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{457}
}

func (x *MatchHTTPResponseResult) GetMatched() bool {
	if x != nil {
		return x.Matched
	}
	return false
}

type HTTPResponseExtractor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`   // default for index
	Type             string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`   // regex / xpath / kval / json / nuclei-dsl
	Scope            string   `protobuf:"bytes,3,opt,name=Scope,proto3" json:"Scope,omitempty"` // body / header / raw
	Groups           []string `protobuf:"bytes,4,rep,name=Groups,proto3" json:"Groups,omitempty"`
	RegexpMatchGroup []int64  `protobuf:"varint,5,rep,packed,name=RegexpMatchGroup,proto3" json:"RegexpMatchGroup,omitempty"`
	XPathAttribute   string   `protobuf:"bytes,6,opt,name=XPathAttribute,proto3" json:"XPathAttribute,omitempty"`
}

func (x *HTTPResponseExtractor) Reset() {
	*x = HTTPResponseExtractor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseExtractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseExtractor) ProtoMessage() {}

func (x *HTTPResponseExtractor) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseExtractor.ProtoReflect.Descriptor instead.
func (*HTTPResponseExtractor) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{458}
}

func (x *HTTPResponseExtractor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPResponseExtractor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HTTPResponseExtractor) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *HTTPResponseExtractor) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *HTTPResponseExtractor) GetRegexpMatchGroup() []int64 {
	if x != nil {
		return x.RegexpMatchGroup
	}
	return nil
}

func (x *HTTPResponseExtractor) GetXPathAttribute() string {
	if x != nil {
		return x.XPathAttribute
	}
	return ""
}

type ExtractHTTPResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*FuzzerParamItem `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *ExtractHTTPResponseResult) Reset() {
	*x = ExtractHTTPResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractHTTPResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractHTTPResponseResult) ProtoMessage() {}

func (x *ExtractHTTPResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractHTTPResponseResult.ProtoReflect.Descriptor instead.
func (*ExtractHTTPResponseResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{459}
}

func (x *ExtractHTTPResponseResult) GetValues() []*FuzzerParamItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type ExtractHTTPResponseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extractors   []*HTTPResponseExtractor `protobuf:"bytes,1,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	HTTPResponse string                   `protobuf:"bytes,2,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
}

func (x *ExtractHTTPResponseParams) Reset() {
	*x = ExtractHTTPResponseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractHTTPResponseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractHTTPResponseParams) ProtoMessage() {}

func (x *ExtractHTTPResponseParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractHTTPResponseParams.ProtoReflect.Descriptor instead.
func (*ExtractHTTPResponseParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{460}
}

func (x *ExtractHTTPResponseParams) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *ExtractHTTPResponseParams) GetHTTPResponse() string {
	if x != nil {
		return x.HTTPResponse
	}
	return ""
}

type PreloadHTTPFuzzerParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*FuzzerParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
}

func (x *PreloadHTTPFuzzerParamsRequest) Reset() {
	*x = PreloadHTTPFuzzerParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadHTTPFuzzerParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadHTTPFuzzerParamsRequest) ProtoMessage() {}

func (x *PreloadHTTPFuzzerParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadHTTPFuzzerParamsRequest.ProtoReflect.Descriptor instead.
func (*PreloadHTTPFuzzerParamsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{461}
}

func (x *PreloadHTTPFuzzerParamsRequest) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

type PreloadHTTPFuzzerParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*FuzzerParamItem `protobuf:"bytes,2,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *PreloadHTTPFuzzerParamsResponse) Reset() {
	*x = PreloadHTTPFuzzerParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadHTTPFuzzerParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadHTTPFuzzerParamsResponse) ProtoMessage() {}

func (x *PreloadHTTPFuzzerParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadHTTPFuzzerParamsResponse.ProtoReflect.Descriptor instead.
func (*PreloadHTTPFuzzerParamsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{462}
}

func (x *PreloadHTTPFuzzerParamsResponse) GetValues() []*FuzzerParamItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type FuzzerParamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// nuclei-dsl / raw
	// fuzztag
	Type         string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	MarshalValue string `protobuf:"bytes,4,opt,name=MarshalValue,proto3" json:"MarshalValue,omitempty"`
}

func (x *FuzzerParamItem) Reset() {
	*x = FuzzerParamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerParamItem) ProtoMessage() {}

func (x *FuzzerParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerParamItem.ProtoReflect.Descriptor instead.
func (*FuzzerParamItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{463}
}

func (x *FuzzerParamItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FuzzerParamItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FuzzerParamItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FuzzerParamItem) GetMarshalValue() string {
	if x != nil {
		return x.MarshalValue
	}
	return ""
}

type FuzzerRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*FuzzerRequest `protobuf:"bytes,1,rep,name=Requests,proto3" json:"Requests,omitempty"`
	// concurrent flow
	Concurrent int64 `protobuf:"varint,2,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
}

func (x *FuzzerRequests) Reset() {
	*x = FuzzerRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerRequests) ProtoMessage() {}

func (x *FuzzerRequests) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerRequests.ProtoReflect.Descriptor instead.
func (*FuzzerRequests) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{464}
}

func (x *FuzzerRequests) GetRequests() []*FuzzerRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *FuzzerRequests) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

type FuzzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request                  string             `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	RequestRaw               []byte             `protobuf:"bytes,16,opt,name=RequestRaw,proto3" json:"RequestRaw,omitempty"` // 这里是因为麻将块儿的问题，还是需要处理一下类型
	Params                   []*FuzzerParamItem `protobuf:"bytes,2,rep,name=Params,proto3" json:"Params,omitempty"`
	Concurrent               int64              `protobuf:"varint,3,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	IsHTTPS                  bool               `protobuf:"varint,4,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	IsGmTLS                  bool               `protobuf:"varint,35,opt,name=IsGmTLS,proto3" json:"IsGmTLS,omitempty"`
	ForceFuzz                bool               `protobuf:"varint,5,opt,name=ForceFuzz,proto3" json:"ForceFuzz,omitempty"`
	FuzzTagMode              string             `protobuf:"bytes,50,opt,name=FuzzTagMode,proto3" json:"FuzzTagMode,omitempty"` // "close"/"standard"/"legacy"
	FuzzTagSyncIndex         bool               `protobuf:"varint,51,opt,name=FuzzTagSyncIndex,proto3" json:"FuzzTagSyncIndex,omitempty"`
	Proxy                    string             `protobuf:"bytes,6,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	PerRequestTimeoutSeconds float64            `protobuf:"fixed64,7,opt,name=PerRequestTimeoutSeconds,proto3" json:"PerRequestTimeoutSeconds,omitempty"`
	// 用于处理 Host 和 Header 中 Host 不一致的情况
	ActualAddr string `protobuf:"bytes,8,opt,name=ActualAddr,proto3" json:"ActualAddr,omitempty"`
	// redirect setting
	NoFollowRedirect bool `protobuf:"varint,9,opt,name=NoFollowRedirect,proto3" json:"NoFollowRedirect,omitempty"`
	// 这个弃用了，Meta 自动归类到 Redirect 里面
	NoFollowMetaRedirect bool    `protobuf:"varint,10,opt,name=NoFollowMetaRedirect,proto3" json:"NoFollowMetaRedirect,omitempty"`
	FollowJSRedirect     bool    `protobuf:"varint,11,opt,name=FollowJSRedirect,proto3" json:"FollowJSRedirect,omitempty"`
	RedirectTimes        float64 `protobuf:"fixed64,27,opt,name=RedirectTimes,proto3" json:"RedirectTimes,omitempty"`
	// 如果从历史加载，就用这个！
	HistoryWebFuzzerId int32 `protobuf:"varint,12,opt,name=HistoryWebFuzzerId,proto3" json:"HistoryWebFuzzerId,omitempty"`
	// 如果不想自动修复 Content-Length
	NoFixContentLength bool `protobuf:"varint,13,opt,name=NoFixContentLength,proto3" json:"NoFixContentLength,omitempty"`
	// 热加载代码
	HotPatchCode string `protobuf:"bytes,14,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	// 设置 Fuzzer
	Filter *FuzzerResponseFilter `protobuf:"bytes,15,opt,name=Filter,proto3" json:"Filter,omitempty"`
	// 随时 delay
	DelayMinSeconds float64 `protobuf:"fixed64,17,opt,name=DelayMinSeconds,proto3" json:"DelayMinSeconds,omitempty"`
	DelayMaxSeconds float64 `protobuf:"fixed64,18,opt,name=DelayMaxSeconds,proto3" json:"DelayMaxSeconds,omitempty"`
	// 获取模版数据
	HotPatchCodeWithParamGetter string `protobuf:"bytes,19,opt,name=HotPatchCodeWithParamGetter,proto3" json:"HotPatchCodeWithParamGetter,omitempty"`
	// retry
	MaxRetryTimes        int64   `protobuf:"varint,20,opt,name=MaxRetryTimes,proto3" json:"MaxRetryTimes,omitempty"`              // 最大重试次数
	RetryInStatusCode    string  `protobuf:"bytes,21,opt,name=RetryInStatusCode,proto3" json:"RetryInStatusCode,omitempty"`       // 命中这些状态码的时候，重试
	RetryNotInStatusCode string  `protobuf:"bytes,22,opt,name=RetryNotInStatusCode,proto3" json:"RetryNotInStatusCode,omitempty"` // 不是这些状态的时候，重试
	RetryWaitSeconds     float64 `protobuf:"fixed64,25,opt,name=RetryWaitSeconds,proto3" json:"RetryWaitSeconds,omitempty"`       // 重试等待时间
	RetryMaxWaitSeconds  float64 `protobuf:"fixed64,26,opt,name=RetryMaxWaitSeconds,proto3" json:"RetryMaxWaitSeconds,omitempty"` // 最大重试等待时间
	// Response Charset
	// 默认或者不填为 UTF8
	// 中国的话，用 gb18030
	ResponseCharset string `protobuf:"bytes,23,opt,name=ResponseCharset,proto3" json:"ResponseCharset,omitempty"`
	// Verbose
	// 这个字段不需要用户做任何处理，也不需要客户端传递
	// 这是服务端用来初始化的字段，用以构建快速搜索
	Verbose string `protobuf:"bytes,24,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	// dns config
	DNSServers []string  `protobuf:"bytes,28,rep,name=DNSServers,proto3" json:"DNSServers,omitempty"`
	EtcHosts   []*KVPair `protobuf:"bytes,29,rep,name=EtcHosts,proto3" json:"EtcHosts,omitempty"`
	// 不启用系统代理
	NoSystemProxy bool `protobuf:"varint,30,opt,name=NoSystemProxy,proto3" json:"NoSystemProxy,omitempty"`
	// 重复次数
	RepeatTimes int64 `protobuf:"varint,31,opt,name=RepeatTimes,proto3" json:"RepeatTimes,omitempty"`
	// Extractor n Matchers
	Extractors        []*HTTPResponseExtractor `protobuf:"bytes,32,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	Matchers          []*HTTPResponseMatcher   `protobuf:"bytes,33,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatchersCondition string                   `protobuf:"bytes,34,opt,name=MatchersCondition,proto3" json:"MatchersCondition,omitempty"`
	HitColor          string                   `protobuf:"bytes,36,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
	// 如果发包的时候，需要指定一两个插件，那么可以通过他来操作，并把流量一起返回
	YamlPoCNames []string `protobuf:"bytes,37,rep,name=YamlPoCNames,proto3" json:"YamlPoCNames,omitempty"`
	// 是否继承上一个 Workflow 的变量？（在 Sequence 中生效）
	InheritVariables     bool `protobuf:"varint,38,opt,name=InheritVariables,proto3" json:"InheritVariables,omitempty"`
	ForceOnlyOneResponse bool `protobuf:"varint,39,opt,name=ForceOnlyOneResponse,proto3" json:"ForceOnlyOneResponse,omitempty"`
	InheritCookies       bool `protobuf:"varint,40,opt,name=InheritCookies,proto3" json:"InheritCookies,omitempty"` // 上一个 Request 一般来说是单个请求，他的响应信息中 Cookie 也应该被妥善处理
	// web fuzzer task id
	// 需要配合前端的 Index
	// 这两个 Index 如果有的话，后端在执行 HTTP Fuzzer Sequence 的时候，就可以只传递这两个了
	// 如果没有的话，直接把整个 Request 传回去
	FuzzerIndex    string `protobuf:"bytes,41,opt,name=FuzzerIndex,proto3" json:"FuzzerIndex,omitempty"`
	FuzzerTabIndex string `protobuf:"bytes,42,opt,name=FuzzerTabIndex,proto3" json:"FuzzerTabIndex,omitempty"`
	// BatchTarget
	// 继承透传给 HTTPPOOL 的参数，可以使用批量目标来发送
	BatchTargetFile  bool   `protobuf:"varint,43,opt,name=BatchTargetFile,proto3" json:"BatchTargetFile,omitempty"`
	BatchTarget      []byte `protobuf:"bytes,44,opt,name=BatchTarget,proto3" json:"BatchTarget,omitempty"`
	AfterRequested   bool   `protobuf:"varint,45,opt,name=AfterRequested,proto3" json:"AfterRequested,omitempty"`
	StopAtFirstMatch bool   `protobuf:"varint,46,opt,name=StopAtFirstMatch,proto3" json:"StopAtFirstMatch,omitempty"`
	// retry task id
	RetryTaskID int64 `protobuf:"varint,47,opt,name=RetryTaskID,proto3" json:"RetryTaskID,omitempty"`
	// re matcher
	ReMatch bool `protobuf:"varint,48,opt,name=ReMatch,proto3" json:"ReMatch,omitempty"`
	// default 5M?
	// packet is too large (> MaxBodySize)
	MaxBodySize    int64           `protobuf:"varint,49,opt,name=MaxBodySize,proto3" json:"MaxBodySize,omitempty"`
	PauseTaskID    int64           `protobuf:"varint,52,opt,name=PauseTaskID,proto3" json:"PauseTaskID,omitempty"`
	IsPause        bool            `protobuf:"varint,53,opt,name=IsPause,proto3" json:"IsPause,omitempty"`
	MutateMethods  []*MutateMethod `protobuf:"bytes,54,rep,name=MutateMethods,proto3" json:"MutateMethods,omitempty"`
	SetPauseStatus bool            `protobuf:"varint,55,opt,name=SetPauseStatus,proto3" json:"SetPauseStatus,omitempty"`
	SNI            string          `protobuf:"bytes,56,opt,name=SNI,proto3" json:"SNI,omitempty"`
	OverwriteSNI   bool            `protobuf:"varint,57,opt,name=OverwriteSNI,proto3" json:"OverwriteSNI,omitempty"`
	// use tcp conn pool
	DisableUseConnPool bool `protobuf:"varint,58,opt,name=DisableUseConnPool,proto3" json:"DisableUseConnPool,omitempty"`
	// disable hotPatch
	DisableHotPatch bool `protobuf:"varint,59,opt,name=DisableHotPatch,proto3" json:"DisableHotPatch,omitempty"`
}

func (x *FuzzerRequest) Reset() {
	*x = FuzzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerRequest) ProtoMessage() {}

func (x *FuzzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerRequest.ProtoReflect.Descriptor instead.
func (*FuzzerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{465}
}

func (x *FuzzerRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *FuzzerRequest) GetRequestRaw() []byte {
	if x != nil {
		return x.RequestRaw
	}
	return nil
}

func (x *FuzzerRequest) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FuzzerRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *FuzzerRequest) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *FuzzerRequest) GetIsGmTLS() bool {
	if x != nil {
		return x.IsGmTLS
	}
	return false
}

func (x *FuzzerRequest) GetForceFuzz() bool {
	if x != nil {
		return x.ForceFuzz
	}
	return false
}

func (x *FuzzerRequest) GetFuzzTagMode() string {
	if x != nil {
		return x.FuzzTagMode
	}
	return ""
}

func (x *FuzzerRequest) GetFuzzTagSyncIndex() bool {
	if x != nil {
		return x.FuzzTagSyncIndex
	}
	return false
}

func (x *FuzzerRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FuzzerRequest) GetPerRequestTimeoutSeconds() float64 {
	if x != nil {
		return x.PerRequestTimeoutSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetActualAddr() string {
	if x != nil {
		return x.ActualAddr
	}
	return ""
}

func (x *FuzzerRequest) GetNoFollowRedirect() bool {
	if x != nil {
		return x.NoFollowRedirect
	}
	return false
}

func (x *FuzzerRequest) GetNoFollowMetaRedirect() bool {
	if x != nil {
		return x.NoFollowMetaRedirect
	}
	return false
}

func (x *FuzzerRequest) GetFollowJSRedirect() bool {
	if x != nil {
		return x.FollowJSRedirect
	}
	return false
}

func (x *FuzzerRequest) GetRedirectTimes() float64 {
	if x != nil {
		return x.RedirectTimes
	}
	return 0
}

func (x *FuzzerRequest) GetHistoryWebFuzzerId() int32 {
	if x != nil {
		return x.HistoryWebFuzzerId
	}
	return 0
}

func (x *FuzzerRequest) GetNoFixContentLength() bool {
	if x != nil {
		return x.NoFixContentLength
	}
	return false
}

func (x *FuzzerRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *FuzzerRequest) GetFilter() *FuzzerResponseFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FuzzerRequest) GetDelayMinSeconds() float64 {
	if x != nil {
		return x.DelayMinSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetDelayMaxSeconds() float64 {
	if x != nil {
		return x.DelayMaxSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetHotPatchCodeWithParamGetter() string {
	if x != nil {
		return x.HotPatchCodeWithParamGetter
	}
	return ""
}

func (x *FuzzerRequest) GetMaxRetryTimes() int64 {
	if x != nil {
		return x.MaxRetryTimes
	}
	return 0
}

func (x *FuzzerRequest) GetRetryInStatusCode() string {
	if x != nil {
		return x.RetryInStatusCode
	}
	return ""
}

func (x *FuzzerRequest) GetRetryNotInStatusCode() string {
	if x != nil {
		return x.RetryNotInStatusCode
	}
	return ""
}

func (x *FuzzerRequest) GetRetryWaitSeconds() float64 {
	if x != nil {
		return x.RetryWaitSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetRetryMaxWaitSeconds() float64 {
	if x != nil {
		return x.RetryMaxWaitSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetResponseCharset() string {
	if x != nil {
		return x.ResponseCharset
	}
	return ""
}

func (x *FuzzerRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *FuzzerRequest) GetDNSServers() []string {
	if x != nil {
		return x.DNSServers
	}
	return nil
}

func (x *FuzzerRequest) GetEtcHosts() []*KVPair {
	if x != nil {
		return x.EtcHosts
	}
	return nil
}

func (x *FuzzerRequest) GetNoSystemProxy() bool {
	if x != nil {
		return x.NoSystemProxy
	}
	return false
}

func (x *FuzzerRequest) GetRepeatTimes() int64 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

func (x *FuzzerRequest) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *FuzzerRequest) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *FuzzerRequest) GetMatchersCondition() string {
	if x != nil {
		return x.MatchersCondition
	}
	return ""
}

func (x *FuzzerRequest) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

func (x *FuzzerRequest) GetYamlPoCNames() []string {
	if x != nil {
		return x.YamlPoCNames
	}
	return nil
}

func (x *FuzzerRequest) GetInheritVariables() bool {
	if x != nil {
		return x.InheritVariables
	}
	return false
}

func (x *FuzzerRequest) GetForceOnlyOneResponse() bool {
	if x != nil {
		return x.ForceOnlyOneResponse
	}
	return false
}

func (x *FuzzerRequest) GetInheritCookies() bool {
	if x != nil {
		return x.InheritCookies
	}
	return false
}

func (x *FuzzerRequest) GetFuzzerIndex() string {
	if x != nil {
		return x.FuzzerIndex
	}
	return ""
}

func (x *FuzzerRequest) GetFuzzerTabIndex() string {
	if x != nil {
		return x.FuzzerTabIndex
	}
	return ""
}

func (x *FuzzerRequest) GetBatchTargetFile() bool {
	if x != nil {
		return x.BatchTargetFile
	}
	return false
}

func (x *FuzzerRequest) GetBatchTarget() []byte {
	if x != nil {
		return x.BatchTarget
	}
	return nil
}

func (x *FuzzerRequest) GetAfterRequested() bool {
	if x != nil {
		return x.AfterRequested
	}
	return false
}

func (x *FuzzerRequest) GetStopAtFirstMatch() bool {
	if x != nil {
		return x.StopAtFirstMatch
	}
	return false
}

func (x *FuzzerRequest) GetRetryTaskID() int64 {
	if x != nil {
		return x.RetryTaskID
	}
	return 0
}

func (x *FuzzerRequest) GetReMatch() bool {
	if x != nil {
		return x.ReMatch
	}
	return false
}

func (x *FuzzerRequest) GetMaxBodySize() int64 {
	if x != nil {
		return x.MaxBodySize
	}
	return 0
}

func (x *FuzzerRequest) GetPauseTaskID() int64 {
	if x != nil {
		return x.PauseTaskID
	}
	return 0
}

func (x *FuzzerRequest) GetIsPause() bool {
	if x != nil {
		return x.IsPause
	}
	return false
}

func (x *FuzzerRequest) GetMutateMethods() []*MutateMethod {
	if x != nil {
		return x.MutateMethods
	}
	return nil
}

func (x *FuzzerRequest) GetSetPauseStatus() bool {
	if x != nil {
		return x.SetPauseStatus
	}
	return false
}

func (x *FuzzerRequest) GetSNI() string {
	if x != nil {
		return x.SNI
	}
	return ""
}

func (x *FuzzerRequest) GetOverwriteSNI() bool {
	if x != nil {
		return x.OverwriteSNI
	}
	return false
}

func (x *FuzzerRequest) GetDisableUseConnPool() bool {
	if x != nil {
		return x.DisableUseConnPool
	}
	return false
}

func (x *FuzzerRequest) GetDisableHotPatch() bool {
	if x != nil {
		return x.DisableHotPatch
	}
	return false
}

type MutateMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Value []*KVPair `protobuf:"bytes,2,rep,name=Value,proto3" json:"Value,omitempty"`
}

func (x *MutateMethod) Reset() {
	*x = MutateMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateMethod) ProtoMessage() {}

func (x *MutateMethod) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateMethod.ProtoReflect.Descriptor instead.
func (*MutateMethod) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{466}
}

func (x *MutateMethod) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MutateMethod) GetValue() []*KVPair {
	if x != nil {
		return x.Value
	}
	return nil
}

type KVPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value        string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	MarshalValue string `protobuf:"bytes,3,opt,name=MarshalValue,proto3" json:"MarshalValue,omitempty"`
}

func (x *KVPair) Reset() {
	*x = KVPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVPair) ProtoMessage() {}

func (x *KVPair) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVPair.ProtoReflect.Descriptor instead.
func (*KVPair) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{467}
}

func (x *KVPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KVPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *KVPair) GetMarshalValue() string {
	if x != nil {
		return x.MarshalValue
	}
	return ""
}

type FuzzerResponseFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设置 body 大小作为过滤依据
	MinBodySize int64 `protobuf:"varint,1,opt,name=MinBodySize,proto3" json:"MinBodySize,omitempty"`
	MaxBodySize int64 `protobuf:"varint,2,opt,name=MaxBodySize,proto3" json:"MaxBodySize,omitempty"`
	// 设置正则作为过滤依据，这个正则针对整个数据包生效
	Regexps    []string `protobuf:"bytes,3,rep,name=Regexps,proto3" json:"Regexps,omitempty"`
	Keywords   []string `protobuf:"bytes,4,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	StatusCode []string `protobuf:"bytes,6,rep,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *FuzzerResponseFilter) Reset() {
	*x = FuzzerResponseFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerResponseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerResponseFilter) ProtoMessage() {}

func (x *FuzzerResponseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerResponseFilter.ProtoReflect.Descriptor instead.
func (*FuzzerResponseFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{468}
}

func (x *FuzzerResponseFilter) GetMinBodySize() int64 {
	if x != nil {
		return x.MinBodySize
	}
	return 0
}

func (x *FuzzerResponseFilter) GetMaxBodySize() int64 {
	if x != nil {
		return x.MaxBodySize
	}
	return 0
}

func (x *FuzzerResponseFilter) GetRegexps() []string {
	if x != nil {
		return x.Regexps
	}
	return nil
}

func (x *FuzzerResponseFilter) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *FuzzerResponseFilter) GetStatusCode() []string {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

type RedirectRequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request                  string  `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Response                 string  `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
	IsHttps                  bool    `protobuf:"varint,3,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	PerRequestTimeoutSeconds float64 `protobuf:"fixed64,4,opt,name=PerRequestTimeoutSeconds,proto3" json:"PerRequestTimeoutSeconds,omitempty"`
	Proxy                    string  `protobuf:"bytes,5,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	// Extractor n Matchers
	Extractors        []*HTTPResponseExtractor `protobuf:"bytes,6,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	Matchers          []*HTTPResponseMatcher   `protobuf:"bytes,7,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatchersCondition string                   `protobuf:"bytes,8,opt,name=MatchersCondition,proto3" json:"MatchersCondition,omitempty"`
	HitColor          string                   `protobuf:"bytes,9,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
	Params            []*FuzzerParamItem       `protobuf:"bytes,10,rep,name=Params,proto3" json:"Params,omitempty"`
	IsGmTLS           bool                     `protobuf:"varint,11,opt,name=IsGmTLS,proto3" json:"IsGmTLS,omitempty"`
}

func (x *RedirectRequestParams) Reset() {
	*x = RedirectRequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectRequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectRequestParams) ProtoMessage() {}

func (x *RedirectRequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectRequestParams.ProtoReflect.Descriptor instead.
func (*RedirectRequestParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{469}
}

func (x *RedirectRequestParams) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *RedirectRequestParams) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *RedirectRequestParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *RedirectRequestParams) GetPerRequestTimeoutSeconds() float64 {
	if x != nil {
		return x.PerRequestTimeoutSeconds
	}
	return 0
}

func (x *RedirectRequestParams) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *RedirectRequestParams) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *RedirectRequestParams) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RedirectRequestParams) GetMatchersCondition() string {
	if x != nil {
		return x.MatchersCondition
	}
	return ""
}

func (x *RedirectRequestParams) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

func (x *RedirectRequestParams) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RedirectRequestParams) GetIsGmTLS() bool {
	if x != nil {
		return x.IsGmTLS
	}
	return false
}

type ExtractedUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *ExtractedUrl) Reset() {
	*x = ExtractedUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractedUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractedUrl) ProtoMessage() {}

func (x *ExtractedUrl) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractedUrl.ProtoReflect.Descriptor instead.
func (*ExtractedUrl) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{470}
}

func (x *ExtractedUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type FuzzerSequenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request  *FuzzerRequest  `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Response *FuzzerResponse `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *FuzzerSequenceResponse) Reset() {
	*x = FuzzerSequenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerSequenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerSequenceResponse) ProtoMessage() {}

func (x *FuzzerSequenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerSequenceResponse.ProtoReflect.Descriptor instead.
func (*FuzzerSequenceResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{471}
}

func (x *FuzzerSequenceResponse) GetRequest() *FuzzerRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FuzzerSequenceResponse) GetResponse() *FuzzerResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type FuzzerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method      string        `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	StatusCode  int32         `protobuf:"varint,2,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Host        string        `protobuf:"bytes,3,opt,name=Host,proto3" json:"Host,omitempty"`
	ContentType string        `protobuf:"bytes,4,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	Headers     []*HTTPHeader `protobuf:"bytes,5,rep,name=Headers,proto3" json:"Headers,omitempty"`
	ResponseRaw []byte        `protobuf:"bytes,6,opt,name=ResponseRaw,proto3" json:"ResponseRaw,omitempty"`
	// response body 的长度
	BodyLength int64 `protobuf:"varint,7,opt,name=BodyLength,proto3" json:"BodyLength,omitempty"`
	// 这个请求大约花费了多长时间
	DurationMs          int64 `protobuf:"varint,8,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"` // FirstByte Duration
	DNSDurationMs       int64 `protobuf:"varint,40,opt,name=DNSDurationMs,proto3" json:"DNSDurationMs,omitempty"`
	FirstByteDurationMs int64 `protobuf:"varint,41,opt,name=FirstByteDurationMs,proto3" json:"FirstByteDurationMs,omitempty"`
	TotalDurationMs     int64 `protobuf:"varint,42,opt,name=TotalDurationMs,proto3" json:"TotalDurationMs,omitempty"`
	// 给一个随机 ID
	UUID string `protobuf:"bytes,9,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// timestamp 请求
	Timestamp int64 `protobuf:"varint,10,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// RequestRaw 原始数据包
	RequestRaw []byte `protobuf:"bytes,11,opt,name=RequestRaw,proto3" json:"RequestRaw,omitempty"`
	// 猜测可能的编码
	GuessResponseEncoding string `protobuf:"bytes,12,opt,name=GuessResponseEncoding,proto3" json:"GuessResponseEncoding,omitempty"`
	// 基础状态
	Ok     bool   `protobuf:"varint,31,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,32,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// IsHTTPS
	IsHTTPS bool `protobuf:"varint,33,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	// payloads
	Payloads         []string `protobuf:"bytes,34,rep,name=Payloads,proto3" json:"Payloads,omitempty"`
	BodySimilarity   float64  `protobuf:"fixed64,35,opt,name=BodySimilarity,proto3" json:"BodySimilarity,omitempty"`
	HeaderSimilarity float64  `protobuf:"fixed64,36,opt,name=HeaderSimilarity,proto3" json:"HeaderSimilarity,omitempty"`
	// Matched by filter
	MatchedByFilter bool   `protobuf:"varint,37,opt,name=MatchedByFilter,proto3" json:"MatchedByFilter,omitempty"`
	Url             string `protobuf:"bytes,38,opt,name=Url,proto3" json:"Url,omitempty"`
	TaskId          int64  `protobuf:"varint,39,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	// 使用哪个代理
	Proxy      string `protobuf:"bytes,43,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	RemoteAddr string `protobuf:"bytes,44,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	// 如果设置了
	ExtractedResults []*KVPair           `protobuf:"bytes,45,rep,name=ExtractedResults,proto3" json:"ExtractedResults,omitempty"`
	MatchedByMatcher bool                `protobuf:"varint,46,opt,name=MatchedByMatcher,proto3" json:"MatchedByMatcher,omitempty"`
	HitColor         string              `protobuf:"bytes,47,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
	RedirectFlows    []*RedirectHTTPFlow `protobuf:"bytes,48,rep,name=RedirectFlows,proto3" json:"RedirectFlows,omitempty"`
	// too large file operators
	IsTooLargeResponse         bool   `protobuf:"varint,49,opt,name=IsTooLargeResponse,proto3" json:"IsTooLargeResponse,omitempty"`
	TooLargeResponseHeaderFile string `protobuf:"bytes,50,opt,name=TooLargeResponseHeaderFile,proto3" json:"TooLargeResponseHeaderFile,omitempty"`
	TooLargeResponseBodyFile   string `protobuf:"bytes,51,opt,name=TooLargeResponseBodyFile,proto3" json:"TooLargeResponseBodyFile,omitempty"`
	DisableRenderStyles        bool   `protobuf:"varint,52,opt,name=DisableRenderStyles,proto3" json:"DisableRenderStyles,omitempty"`
	RuntimeID                  string `protobuf:"bytes,53,opt,name=RuntimeID,proto3" json:"RuntimeID,omitempty"`
	Discard                    bool   `protobuf:"varint,54,opt,name=Discard,proto3" json:"Discard,omitempty"`
}

func (x *FuzzerResponse) Reset() {
	*x = FuzzerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerResponse) ProtoMessage() {}

func (x *FuzzerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerResponse.ProtoReflect.Descriptor instead.
func (*FuzzerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{472}
}

func (x *FuzzerResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *FuzzerResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FuzzerResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FuzzerResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FuzzerResponse) GetHeaders() []*HTTPHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *FuzzerResponse) GetResponseRaw() []byte {
	if x != nil {
		return x.ResponseRaw
	}
	return nil
}

func (x *FuzzerResponse) GetBodyLength() int64 {
	if x != nil {
		return x.BodyLength
	}
	return 0
}

func (x *FuzzerResponse) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetDNSDurationMs() int64 {
	if x != nil {
		return x.DNSDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetFirstByteDurationMs() int64 {
	if x != nil {
		return x.FirstByteDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetTotalDurationMs() int64 {
	if x != nil {
		return x.TotalDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *FuzzerResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FuzzerResponse) GetRequestRaw() []byte {
	if x != nil {
		return x.RequestRaw
	}
	return nil
}

func (x *FuzzerResponse) GetGuessResponseEncoding() string {
	if x != nil {
		return x.GuessResponseEncoding
	}
	return ""
}

func (x *FuzzerResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *FuzzerResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FuzzerResponse) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *FuzzerResponse) GetPayloads() []string {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *FuzzerResponse) GetBodySimilarity() float64 {
	if x != nil {
		return x.BodySimilarity
	}
	return 0
}

func (x *FuzzerResponse) GetHeaderSimilarity() float64 {
	if x != nil {
		return x.HeaderSimilarity
	}
	return 0
}

func (x *FuzzerResponse) GetMatchedByFilter() bool {
	if x != nil {
		return x.MatchedByFilter
	}
	return false
}

func (x *FuzzerResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FuzzerResponse) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FuzzerResponse) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FuzzerResponse) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *FuzzerResponse) GetExtractedResults() []*KVPair {
	if x != nil {
		return x.ExtractedResults
	}
	return nil
}

func (x *FuzzerResponse) GetMatchedByMatcher() bool {
	if x != nil {
		return x.MatchedByMatcher
	}
	return false
}

func (x *FuzzerResponse) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

func (x *FuzzerResponse) GetRedirectFlows() []*RedirectHTTPFlow {
	if x != nil {
		return x.RedirectFlows
	}
	return nil
}

func (x *FuzzerResponse) GetIsTooLargeResponse() bool {
	if x != nil {
		return x.IsTooLargeResponse
	}
	return false
}

func (x *FuzzerResponse) GetTooLargeResponseHeaderFile() string {
	if x != nil {
		return x.TooLargeResponseHeaderFile
	}
	return ""
}

func (x *FuzzerResponse) GetTooLargeResponseBodyFile() string {
	if x != nil {
		return x.TooLargeResponseBodyFile
	}
	return ""
}

func (x *FuzzerResponse) GetDisableRenderStyles() bool {
	if x != nil {
		return x.DisableRenderStyles
	}
	return false
}

func (x *FuzzerResponse) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *FuzzerResponse) GetDiscard() bool {
	if x != nil {
		return x.Discard
	}
	return false
}

type RedirectHTTPFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHttps  bool   `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request  []byte `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	Response []byte `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *RedirectHTTPFlow) Reset() {
	*x = RedirectHTTPFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectHTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectHTTPFlow) ProtoMessage() {}

func (x *RedirectHTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectHTTPFlow.ProtoReflect.Descriptor instead.
func (*RedirectHTTPFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{473}
}

func (x *RedirectHTTPFlow) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *RedirectHTTPFlow) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RedirectHTTPFlow) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64  `protobuf:"varint,51,opt,name=Page,proto3" json:"Page,omitempty"`
	Limit    int64  `protobuf:"varint,52,opt,name=Limit,proto3" json:"Limit,omitempty"`
	OrderBy  string `protobuf:"bytes,53,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	Order    string `protobuf:"bytes,54,opt,name=Order,proto3" json:"Order,omitempty"`
	RawOrder string `protobuf:"bytes,55,opt,name=RawOrder,proto3" json:"RawOrder,omitempty"`
}

func (x *Paging) Reset() {
	*x = Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paging) ProtoMessage() {}

func (x *Paging) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paging.ProtoReflect.Descriptor instead.
func (*Paging) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{474}
}

func (x *Paging) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Paging) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Paging) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *Paging) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Paging) GetRawOrder() string {
	if x != nil {
		return x.RawOrder
	}
	return ""
}

type GetHTTPFlowByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *GetHTTPFlowByHashRequest) Reset() {
	*x = GetHTTPFlowByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByHashRequest) ProtoMessage() {}

func (x *GetHTTPFlowByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByHashRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByHashRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{475}
}

func (x *GetHTTPFlowByHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetHTTPFlowByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetHTTPFlowByIdRequest) Reset() {
	*x = GetHTTPFlowByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByIdRequest) ProtoMessage() {}

func (x *GetHTTPFlowByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByIdRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{476}
}

func (x *GetHTTPFlowByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetHTTPFlowByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *GetHTTPFlowByIdsRequest) Reset() {
	*x = GetHTTPFlowByIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByIdsRequest) ProtoMessage() {}

func (x *GetHTTPFlowByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByIdsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{477}
}

func (x *GetHTTPFlowByIdsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetHTTPFlowBodyByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IsRequest bool   `protobuf:"varint,2,opt,name=IsRequest,proto3" json:"IsRequest,omitempty"`
	BufSize   int64  `protobuf:"varint,3,opt,name=BufSize,proto3" json:"BufSize,omitempty"`
	RuntimeId string `protobuf:"bytes,4,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	IsRisk    bool   `protobuf:"varint,5,opt,name=IsRisk,proto3" json:"IsRisk,omitempty"`
}

func (x *GetHTTPFlowBodyByIdRequest) Reset() {
	*x = GetHTTPFlowBodyByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowBodyByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowBodyByIdRequest) ProtoMessage() {}

func (x *GetHTTPFlowBodyByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowBodyByIdRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowBodyByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{478}
}

func (x *GetHTTPFlowBodyByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetHTTPFlowBodyByIdRequest) GetIsRequest() bool {
	if x != nil {
		return x.IsRequest
	}
	return false
}

func (x *GetHTTPFlowBodyByIdRequest) GetBufSize() int64 {
	if x != nil {
		return x.BufSize
	}
	return 0
}

func (x *GetHTTPFlowBodyByIdRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *GetHTTPFlowBodyByIdRequest) GetIsRisk() bool {
	if x != nil {
		return x.IsRisk
	}
	return false
}

type QueryHTTPFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination        *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	SourceType        string  `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	Methods           string  `protobuf:"bytes,3,opt,name=Methods,proto3" json:"Methods,omitempty"`
	SearchURL         string  `protobuf:"bytes,4,opt,name=SearchURL,proto3" json:"SearchURL,omitempty"`
	StatusCode        string  `protobuf:"bytes,5,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	HaveCommonParams  bool    `protobuf:"varint,6,opt,name=HaveCommonParams,proto3" json:"HaveCommonParams,omitempty"`
	HaveBody          bool    `protobuf:"varint,7,opt,name=HaveBody,proto3" json:"HaveBody,omitempty"`
	SearchContentType string  `protobuf:"bytes,9,opt,name=SearchContentType,proto3" json:"SearchContentType,omitempty"`
	// 一般用于查询增量，查询所有更新前的内容
	BeforeUpdatedAt int64  `protobuf:"varint,10,opt,name=BeforeUpdatedAt,proto3" json:"BeforeUpdatedAt,omitempty"`
	AfterUpdatedAt  int64  `protobuf:"varint,11,opt,name=AfterUpdatedAt,proto3" json:"AfterUpdatedAt,omitempty"`
	AfterId         int64  `protobuf:"varint,12,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	BeforeId        int64  `protobuf:"varint,13,opt,name=BeforeId,proto3" json:"BeforeId,omitempty"`
	Keyword         string `protobuf:"bytes,14,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	OnlyWebsocket   bool   `protobuf:"varint,15,opt,name=OnlyWebsocket,proto3" json:"OnlyWebsocket,omitempty"`
	// 查询包含在这个 URL 中的搜索结果
	IncludeInUrl []string `protobuf:"bytes,16,rep,name=IncludeInUrl,proto3" json:"IncludeInUrl,omitempty"`
	// 不查询当前 URL 中的结果
	ExcludeInUrl []string `protobuf:"bytes,17,rep,name=ExcludeInUrl,proto3" json:"ExcludeInUrl,omitempty"`
	// 仅查看当前 IP 对应的结果或不包含
	IncludeInIP        []string `protobuf:"bytes,18,rep,name=IncludeInIP,proto3" json:"IncludeInIP,omitempty"`
	ExcludeInIP        []string `protobuf:"bytes,19,rep,name=ExcludeInIP,proto3" json:"ExcludeInIP,omitempty"`
	ExcludeId          []int64  `protobuf:"varint,20,rep,packed,name=ExcludeId,proto3" json:"ExcludeId,omitempty"`
	IncludeInWhere     []string `protobuf:"bytes,21,rep,name=IncludeInWhere,proto3" json:"IncludeInWhere,omitempty"`
	IncludeId          []int64  `protobuf:"varint,22,rep,packed,name=IncludeId,proto3" json:"IncludeId,omitempty"`
	Tags               []string `protobuf:"bytes,23,rep,name=Tags,proto3" json:"Tags,omitempty"`
	HaveParamsTotal    string   `protobuf:"bytes,24,opt,name=HaveParamsTotal,proto3" json:"HaveParamsTotal,omitempty"`
	Color              []string `protobuf:"bytes,25,rep,name=Color,proto3" json:"Color,omitempty"`
	OffsetId           int64    `protobuf:"varint,26,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	AfterBodyLength    int64    `protobuf:"varint,27,opt,name=AfterBodyLength,proto3" json:"AfterBodyLength,omitempty"`
	BeforeBodyLength   int64    `protobuf:"varint,28,opt,name=BeforeBodyLength,proto3" json:"BeforeBodyLength,omitempty"`
	IsWebsocket        string   `protobuf:"bytes,29,opt,name=IsWebsocket,proto3" json:"IsWebsocket,omitempty"`
	RuntimeId          string   `protobuf:"bytes,31,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	FromPlugin         string   `protobuf:"bytes,32,opt,name=FromPlugin,proto3" json:"FromPlugin,omitempty"`
	Full               bool     `protobuf:"varint,33,opt,name=Full,proto3" json:"Full,omitempty"`
	IncludePath        []string `protobuf:"bytes,34,rep,name=IncludePath,proto3" json:"IncludePath,omitempty"`
	ExcludePath        []string `protobuf:"bytes,35,rep,name=ExcludePath,proto3" json:"ExcludePath,omitempty"`
	IncludeSuffix      []string `protobuf:"bytes,36,rep,name=IncludeSuffix,proto3" json:"IncludeSuffix,omitempty"`
	ExcludeSuffix      []string `protobuf:"bytes,37,rep,name=ExcludeSuffix,proto3" json:"ExcludeSuffix,omitempty"`
	ExcludeContentType []string `protobuf:"bytes,38,rep,name=ExcludeContentType,proto3" json:"ExcludeContentType,omitempty"`
	WithPayload        bool     `protobuf:"varint,39,opt,name=WithPayload,proto3" json:"WithPayload,omitempty"`
	RuntimeIDs         []string `protobuf:"bytes,40,rep,name=RuntimeIDs,proto3" json:"RuntimeIDs,omitempty"`
	IncludeHash        []string `protobuf:"bytes,41,rep,name=IncludeHash,proto3" json:"IncludeHash,omitempty"`
	HiddenIndex        []string `protobuf:"bytes,42,rep,name=HiddenIndex,proto3" json:"HiddenIndex,omitempty"`
	ProcessName        []string `protobuf:"bytes,43,rep,name=ProcessName,proto3" json:"ProcessName,omitempty"`
	ExcludeKeywords    []string `protobuf:"bytes,44,rep,name=ExcludeKeywords,proto3" json:"ExcludeKeywords,omitempty"`
}

func (x *QueryHTTPFlowRequest) Reset() {
	*x = QueryHTTPFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowRequest) ProtoMessage() {}

func (x *QueryHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{479}
}

func (x *QueryHTTPFlowRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetMethods() string {
	if x != nil {
		return x.Methods
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetSearchURL() string {
	if x != nil {
		return x.SearchURL
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetHaveCommonParams() bool {
	if x != nil {
		return x.HaveCommonParams
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetHaveBody() bool {
	if x != nil {
		return x.HaveBody
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetSearchContentType() string {
	if x != nil {
		return x.SearchContentType
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetBeforeUpdatedAt() int64 {
	if x != nil {
		return x.BeforeUpdatedAt
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterUpdatedAt() int64 {
	if x != nil {
		return x.AfterUpdatedAt
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetBeforeId() int64 {
	if x != nil {
		return x.BeforeId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetOnlyWebsocket() bool {
	if x != nil {
		return x.OnlyWebsocket
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetIncludeInUrl() []string {
	if x != nil {
		return x.IncludeInUrl
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeInUrl() []string {
	if x != nil {
		return x.ExcludeInUrl
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeInIP() []string {
	if x != nil {
		return x.IncludeInIP
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeInIP() []string {
	if x != nil {
		return x.ExcludeInIP
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeId() []int64 {
	if x != nil {
		return x.ExcludeId
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeInWhere() []string {
	if x != nil {
		return x.IncludeInWhere
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeId() []int64 {
	if x != nil {
		return x.IncludeId
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetHaveParamsTotal() string {
	if x != nil {
		return x.HaveParamsTotal
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetColor() []string {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetOffsetId() int64 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterBodyLength() int64 {
	if x != nil {
		return x.AfterBodyLength
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetBeforeBodyLength() int64 {
	if x != nil {
		return x.BeforeBodyLength
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetIsWebsocket() string {
	if x != nil {
		return x.IsWebsocket
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetFromPlugin() string {
	if x != nil {
		return x.FromPlugin
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetIncludePath() []string {
	if x != nil {
		return x.IncludePath
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludePath() []string {
	if x != nil {
		return x.ExcludePath
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeContentType() []string {
	if x != nil {
		return x.ExcludeContentType
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetWithPayload() bool {
	if x != nil {
		return x.WithPayload
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetRuntimeIDs() []string {
	if x != nil {
		return x.RuntimeIDs
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeHash() []string {
	if x != nil {
		return x.IncludeHash
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetHiddenIndex() []string {
	if x != nil {
		return x.HiddenIndex
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetProcessName() []string {
	if x != nil {
		return x.ProcessName
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeKeywords() []string {
	if x != nil {
		return x.ExcludeKeywords
	}
	return nil
}

type HTTPFlowsToOnlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	ProjectName        string `protobuf:"bytes,2,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	ProjectDescription string `protobuf:"bytes,3,opt,name=ProjectDescription,proto3" json:"ProjectDescription,omitempty"`
}

func (x *HTTPFlowsToOnlineRequest) Reset() {
	*x = HTTPFlowsToOnlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsToOnlineRequest) ProtoMessage() {}

func (x *HTTPFlowsToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsToOnlineRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{480}
}

func (x *HTTPFlowsToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HTTPFlowsToOnlineRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *HTTPFlowsToOnlineRequest) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

type ExportHTTPFlowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportWhere *QueryHTTPFlowRequest `protobuf:"bytes,1,opt,name=ExportWhere,proto3" json:"ExportWhere,omitempty"`
	Ids         []int64               `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	FieldName   []string              `protobuf:"bytes,3,rep,name=FieldName,proto3" json:"FieldName,omitempty"`
}

func (x *ExportHTTPFlowsRequest) Reset() {
	*x = ExportHTTPFlowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportHTTPFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHTTPFlowsRequest) ProtoMessage() {}

func (x *ExportHTTPFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHTTPFlowsRequest.ProtoReflect.Descriptor instead.
func (*ExportHTTPFlowsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{481}
}

func (x *ExportHTTPFlowsRequest) GetExportWhere() *QueryHTTPFlowRequest {
	if x != nil {
		return x.ExportWhere
	}
	return nil
}

func (x *ExportHTTPFlowsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportHTTPFlowsRequest) GetFieldName() []string {
	if x != nil {
		return x.FieldName
	}
	return nil
}

type QueryHTTPFlowsProcessNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessNames []string `protobuf:"bytes,1,rep,name=ProcessNames,proto3" json:"ProcessNames,omitempty"`
}

func (x *QueryHTTPFlowsProcessNamesResponse) Reset() {
	*x = QueryHTTPFlowsProcessNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowsProcessNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsProcessNamesResponse) ProtoMessage() {}

func (x *QueryHTTPFlowsProcessNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsProcessNamesResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsProcessNamesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{482}
}

func (x *QueryHTTPFlowsProcessNamesResponse) GetProcessNames() []string {
	if x != nil {
		return x.ProcessNames
	}
	return nil
}

type DeleteHTTPFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll      bool                  `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Id             []int64               `protobuf:"varint,4,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	ItemHash       []string              `protobuf:"bytes,2,rep,name=ItemHash,proto3" json:"ItemHash,omitempty"`
	URLPrefix      string                `protobuf:"bytes,3,opt,name=URLPrefix,proto3" json:"URLPrefix,omitempty"`
	Filter         *QueryHTTPFlowRequest `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	URLPrefixBatch []string              `protobuf:"bytes,6,rep,name=URLPrefixBatch,proto3" json:"URLPrefixBatch,omitempty"`
}

func (x *DeleteHTTPFlowRequest) Reset() {
	*x = DeleteHTTPFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHTTPFlowRequest) ProtoMessage() {}

func (x *DeleteHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*DeleteHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{483}
}

func (x *DeleteHTTPFlowRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteHTTPFlowRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetItemHash() []string {
	if x != nil {
		return x.ItemHash
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetURLPrefix() string {
	if x != nil {
		return x.URLPrefix
	}
	return ""
}

func (x *DeleteHTTPFlowRequest) GetFilter() *QueryHTTPFlowRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetURLPrefixBatch() []string {
	if x != nil {
		return x.URLPrefixBatch
	}
	return nil
}

type QueryHTTPFlowsIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeInWhere []string `protobuf:"bytes,1,rep,name=IncludeInWhere,proto3" json:"IncludeInWhere,omitempty"`
	SourceType     string   `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
}

func (x *QueryHTTPFlowsIdsRequest) Reset() {
	*x = QueryHTTPFlowsIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowsIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsIdsRequest) ProtoMessage() {}

func (x *QueryHTTPFlowsIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsIdsRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsIdsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{484}
}

func (x *QueryHTTPFlowsIdsRequest) GetIncludeInWhere() []string {
	if x != nil {
		return x.IncludeInWhere
	}
	return nil
}

func (x *QueryHTTPFlowsIdsRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

type QueryHTTPFlowsIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HTTPFlow `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryHTTPFlowsIdsResponse) Reset() {
	*x = QueryHTTPFlowsIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowsIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsIdsResponse) ProtoMessage() {}

func (x *QueryHTTPFlowsIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsIdsResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsIdsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{485}
}

func (x *QueryHTTPFlowsIdsResponse) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

type HTTPHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header string `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *HTTPHeader) Reset() {
	*x = HTTPHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPHeader) ProtoMessage() {}

func (x *HTTPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPHeader.ProtoReflect.Descriptor instead.
func (*HTTPHeader) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{486}
}

func (x *HTTPHeader) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *HTTPHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HTTPFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HTTPFlow `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *HTTPFlows) Reset() {
	*x = HTTPFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlows) ProtoMessage() {}

func (x *HTTPFlows) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlows.ProtoReflect.Descriptor instead.
func (*HTTPFlows) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{487}
}

func (x *HTTPFlows) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

type HTTPFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHTTPS            bool             `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	Url                string           `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	RequestHeader      []*HTTPHeader    `protobuf:"bytes,4,rep,name=RequestHeader,proto3" json:"RequestHeader,omitempty"`
	Request            []byte           `protobuf:"bytes,5,opt,name=Request,proto3" json:"Request,omitempty"`
	ResponseHeader     []*HTTPHeader    `protobuf:"bytes,6,rep,name=ResponseHeader,proto3" json:"ResponseHeader,omitempty"`
	Response           []byte           `protobuf:"bytes,7,opt,name=Response,proto3" json:"Response,omitempty"`
	SourceType         string           `protobuf:"bytes,8,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	Path               string           `protobuf:"bytes,9,opt,name=Path,proto3" json:"Path,omitempty"`
	Method             string           `protobuf:"bytes,10,opt,name=Method,proto3" json:"Method,omitempty"`
	BodyLength         int64            `protobuf:"varint,11,opt,name=BodyLength,proto3" json:"BodyLength,omitempty"`
	BodySizeVerbose    string           `protobuf:"bytes,19,opt,name=BodySizeVerbose,proto3" json:"BodySizeVerbose,omitempty"`
	RequestLength      int64            `protobuf:"varint,31,opt,name=RequestLength,proto3" json:"RequestLength,omitempty"`          // 设置 Request Body 长度
	RequestSizeVerbose string           `protobuf:"bytes,32,opt,name=RequestSizeVerbose,proto3" json:"RequestSizeVerbose,omitempty"` // 设置 Request
	ContentType        string           `protobuf:"bytes,12,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	StatusCode         int64            `protobuf:"varint,13,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	GetParamsTotal     int64            `protobuf:"varint,14,opt,name=GetParamsTotal,proto3" json:"GetParamsTotal,omitempty"`
	PostParamsTotal    int64            `protobuf:"varint,15,opt,name=PostParamsTotal,proto3" json:"PostParamsTotal,omitempty"`
	CookieParamsTotal  int64            `protobuf:"varint,22,opt,name=CookieParamsTotal,proto3" json:"CookieParamsTotal,omitempty"`
	UpdatedAt          int64            `protobuf:"varint,16,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedAt          int64            `protobuf:"varint,17,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Hash               string           `protobuf:"bytes,18,opt,name=Hash,proto3" json:"Hash,omitempty"`
	GetParams          []*FuzzableParam `protobuf:"bytes,20,rep,name=GetParams,proto3" json:"GetParams,omitempty"`
	PostParams         []*FuzzableParam `protobuf:"bytes,21,rep,name=PostParams,proto3" json:"PostParams,omitempty"`
	CookieParams       []*FuzzableParam `protobuf:"bytes,23,rep,name=CookieParams,proto3" json:"CookieParams,omitempty"`
	HostPort           string           `protobuf:"bytes,24,opt,name=HostPort,proto3" json:"HostPort,omitempty"`
	IPAddress          string           `protobuf:"bytes,25,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	HtmlTitle          string           `protobuf:"bytes,26,opt,name=HtmlTitle,proto3" json:"HtmlTitle,omitempty"`
	Tags               string           `protobuf:"bytes,27,opt,name=Tags,proto3" json:"Tags,omitempty"`
	NoFixContentLength bool             `protobuf:"varint,28,opt,name=NoFixContentLength,proto3" json:"NoFixContentLength,omitempty"`
	Id                 uint64           `protobuf:"varint,29,opt,name=Id,proto3" json:"Id,omitempty"`
	// websocket 相关字段
	IsWebsocket   bool   `protobuf:"varint,30,opt,name=IsWebsocket,proto3" json:"IsWebsocket,omitempty"`
	WebsocketHash string `protobuf:"bytes,33,opt,name=WebsocketHash,proto3" json:"WebsocketHash,omitempty"`
	// 一般这不是无损的情况，会涉及到用户 Copy Paste 直接 Body 的需求
	InvalidForUTF8Request  bool   `protobuf:"varint,34,opt,name=InvalidForUTF8Request,proto3" json:"InvalidForUTF8Request,omitempty"`
	InvalidForUTF8Response bool   `protobuf:"varint,35,opt,name=InvalidForUTF8Response,proto3" json:"InvalidForUTF8Response,omitempty"`
	RawRequestBodyBase64   string `protobuf:"bytes,36,opt,name=RawRequestBodyBase64,proto3" json:"RawRequestBodyBase64,omitempty"`
	RawResponseBodyBase64  string `protobuf:"bytes,37,opt,name=RawResponseBodyBase64,proto3" json:"RawResponseBodyBase64,omitempty"`
	// 可以安全的传输到 Fuzzer 的 HTTPRequest
	SafeHTTPRequest string `protobuf:"bytes,38,opt,name=SafeHTTPRequest,proto3" json:"SafeHTTPRequest,omitempty"`
	// 在完全数据下，可加载 Domain 和 RootDomain 还有 Json
	Domains                    []string `protobuf:"bytes,40,rep,name=Domains,proto3" json:"Domains,omitempty"`
	RootDomains                []string `protobuf:"bytes,41,rep,name=RootDomains,proto3" json:"RootDomains,omitempty"`
	JsonObjects                []string `protobuf:"bytes,42,rep,name=JsonObjects,proto3" json:"JsonObjects,omitempty"`
	IsTooLargeResponse         bool     `protobuf:"varint,43,opt,name=IsTooLargeResponse,proto3" json:"IsTooLargeResponse,omitempty"`
	TooLargeResponseHeaderFile string   `protobuf:"bytes,44,opt,name=TooLargeResponseHeaderFile,proto3" json:"TooLargeResponseHeaderFile,omitempty"`
	TooLargeResponseBodyFile   string   `protobuf:"bytes,45,opt,name=TooLargeResponseBodyFile,proto3" json:"TooLargeResponseBodyFile,omitempty"`
	DisableRenderStyles        bool     `protobuf:"varint,46,opt,name=DisableRenderStyles,proto3" json:"DisableRenderStyles,omitempty"`
	// payloads (web fuzzer)
	Payloads    []string `protobuf:"bytes,47,rep,name=Payloads,proto3" json:"Payloads,omitempty"`
	DurationMs  int64    `protobuf:"varint,48,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`
	HiddenIndex string   `protobuf:"bytes,49,opt,name=HiddenIndex,proto3" json:"HiddenIndex,omitempty"`
	FromPlugin  string   `protobuf:"bytes,50,opt,name=FromPlugin,proto3" json:"FromPlugin,omitempty"`
}

func (x *HTTPFlow) Reset() {
	*x = HTTPFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlow) ProtoMessage() {}

func (x *HTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlow.ProtoReflect.Descriptor instead.
func (*HTTPFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{488}
}

func (x *HTTPFlow) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *HTTPFlow) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPFlow) GetRequestHeader() []*HTTPHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *HTTPFlow) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPFlow) GetResponseHeader() []*HTTPHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *HTTPFlow) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *HTTPFlow) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *HTTPFlow) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPFlow) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPFlow) GetBodyLength() int64 {
	if x != nil {
		return x.BodyLength
	}
	return 0
}

func (x *HTTPFlow) GetBodySizeVerbose() string {
	if x != nil {
		return x.BodySizeVerbose
	}
	return ""
}

func (x *HTTPFlow) GetRequestLength() int64 {
	if x != nil {
		return x.RequestLength
	}
	return 0
}

func (x *HTTPFlow) GetRequestSizeVerbose() string {
	if x != nil {
		return x.RequestSizeVerbose
	}
	return ""
}

func (x *HTTPFlow) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *HTTPFlow) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPFlow) GetGetParamsTotal() int64 {
	if x != nil {
		return x.GetParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetPostParamsTotal() int64 {
	if x != nil {
		return x.PostParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetCookieParamsTotal() int64 {
	if x != nil {
		return x.CookieParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HTTPFlow) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HTTPFlow) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *HTTPFlow) GetGetParams() []*FuzzableParam {
	if x != nil {
		return x.GetParams
	}
	return nil
}

func (x *HTTPFlow) GetPostParams() []*FuzzableParam {
	if x != nil {
		return x.PostParams
	}
	return nil
}

func (x *HTTPFlow) GetCookieParams() []*FuzzableParam {
	if x != nil {
		return x.CookieParams
	}
	return nil
}

func (x *HTTPFlow) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *HTTPFlow) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *HTTPFlow) GetHtmlTitle() string {
	if x != nil {
		return x.HtmlTitle
	}
	return ""
}

func (x *HTTPFlow) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *HTTPFlow) GetNoFixContentLength() bool {
	if x != nil {
		return x.NoFixContentLength
	}
	return false
}

func (x *HTTPFlow) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HTTPFlow) GetIsWebsocket() bool {
	if x != nil {
		return x.IsWebsocket
	}
	return false
}

func (x *HTTPFlow) GetWebsocketHash() string {
	if x != nil {
		return x.WebsocketHash
	}
	return ""
}

func (x *HTTPFlow) GetInvalidForUTF8Request() bool {
	if x != nil {
		return x.InvalidForUTF8Request
	}
	return false
}

func (x *HTTPFlow) GetInvalidForUTF8Response() bool {
	if x != nil {
		return x.InvalidForUTF8Response
	}
	return false
}

func (x *HTTPFlow) GetRawRequestBodyBase64() string {
	if x != nil {
		return x.RawRequestBodyBase64
	}
	return ""
}

func (x *HTTPFlow) GetRawResponseBodyBase64() string {
	if x != nil {
		return x.RawResponseBodyBase64
	}
	return ""
}

func (x *HTTPFlow) GetSafeHTTPRequest() string {
	if x != nil {
		return x.SafeHTTPRequest
	}
	return ""
}

func (x *HTTPFlow) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *HTTPFlow) GetRootDomains() []string {
	if x != nil {
		return x.RootDomains
	}
	return nil
}

func (x *HTTPFlow) GetJsonObjects() []string {
	if x != nil {
		return x.JsonObjects
	}
	return nil
}

func (x *HTTPFlow) GetIsTooLargeResponse() bool {
	if x != nil {
		return x.IsTooLargeResponse
	}
	return false
}

func (x *HTTPFlow) GetTooLargeResponseHeaderFile() string {
	if x != nil {
		return x.TooLargeResponseHeaderFile
	}
	return ""
}

func (x *HTTPFlow) GetTooLargeResponseBodyFile() string {
	if x != nil {
		return x.TooLargeResponseBodyFile
	}
	return ""
}

func (x *HTTPFlow) GetDisableRenderStyles() bool {
	if x != nil {
		return x.DisableRenderStyles
	}
	return false
}

func (x *HTTPFlow) GetPayloads() []string {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *HTTPFlow) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *HTTPFlow) GetHiddenIndex() string {
	if x != nil {
		return x.HiddenIndex
	}
	return ""
}

func (x *HTTPFlow) GetFromPlugin() string {
	if x != nil {
		return x.FromPlugin
	}
	return ""
}

type FuzzableParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position     string `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	ParamName    string `protobuf:"bytes,2,opt,name=ParamName,proto3" json:"ParamName,omitempty"`
	OriginValue  []byte `protobuf:"bytes,3,opt,name=OriginValue,proto3" json:"OriginValue,omitempty"`
	AutoTemplate []byte `protobuf:"bytes,4,opt,name=AutoTemplate,proto3" json:"AutoTemplate,omitempty"`
	IsHTTPS      bool   `protobuf:"varint,5,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
}

func (x *FuzzableParam) Reset() {
	*x = FuzzableParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzableParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzableParam) ProtoMessage() {}

func (x *FuzzableParam) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzableParam.ProtoReflect.Descriptor instead.
func (*FuzzableParam) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{489}
}

func (x *FuzzableParam) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *FuzzableParam) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *FuzzableParam) GetOriginValue() []byte {
	if x != nil {
		return x.OriginValue
	}
	return nil
}

func (x *FuzzableParam) GetAutoTemplate() []byte {
	if x != nil {
		return x.AutoTemplate
	}
	return nil
}

func (x *FuzzableParam) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

type GetHTTPFlowBodyByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"` // 第一个响应里才有，应该保存的文件名
	EOF      bool   `protobuf:"varint,3,opt,name=EOF,proto3" json:"EOF,omitempty"`          // 是否是最后一个包
}

func (x *GetHTTPFlowBodyByIdResponse) Reset() {
	*x = GetHTTPFlowBodyByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowBodyByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowBodyByIdResponse) ProtoMessage() {}

func (x *GetHTTPFlowBodyByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowBodyByIdResponse.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowBodyByIdResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{490}
}

func (x *GetHTTPFlowBodyByIdResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetHTTPFlowBodyByIdResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GetHTTPFlowBodyByIdResponse) GetEOF() bool {
	if x != nil {
		return x.EOF
	}
	return false
}

type QueryHTTPFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging     `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*HTTPFlow `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64       `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryHTTPFlowResponse) Reset() {
	*x = QueryHTTPFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowResponse) ProtoMessage() {}

func (x *QueryHTTPFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{491}
}

func (x *QueryHTTPFlowResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFlowResponse) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHTTPFlowResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type HTTPFlowsFieldGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshRequest bool `protobuf:"varint,1,opt,name=RefreshRequest,proto3" json:"RefreshRequest,omitempty"`
}

func (x *HTTPFlowsFieldGroupRequest) Reset() {
	*x = HTTPFlowsFieldGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsFieldGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsFieldGroupRequest) ProtoMessage() {}

func (x *HTTPFlowsFieldGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsFieldGroupRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsFieldGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{492}
}

func (x *HTTPFlowsFieldGroupRequest) GetRefreshRequest() bool {
	if x != nil {
		return x.RefreshRequest
	}
	return false
}

type HTTPFlowsFieldGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags       []*TagsCode `protobuf:"bytes,1,rep,name=Tags,proto3" json:"Tags,omitempty"`
	StatusCode []*TagsCode `protobuf:"bytes,2,rep,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *HTTPFlowsFieldGroupResponse) Reset() {
	*x = HTTPFlowsFieldGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsFieldGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsFieldGroupResponse) ProtoMessage() {}

func (x *HTTPFlowsFieldGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsFieldGroupResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowsFieldGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{493}
}

func (x *HTTPFlowsFieldGroupResponse) GetTags() []*TagsCode {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HTTPFlowsFieldGroupResponse) GetStatusCode() []*TagsCode {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

type HTTPFlowsShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids         []int64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	LimitNum    int64   `protobuf:"varint,2,opt,name=LimitNum,proto3" json:"LimitNum,omitempty"`
	ExpiredTime int64   `protobuf:"varint,3,opt,name=ExpiredTime,proto3" json:"ExpiredTime,omitempty"`
	Pwd         bool    `protobuf:"varint,4,opt,name=Pwd,proto3" json:"Pwd,omitempty"`
	ShareId     string  `protobuf:"bytes,5,opt,name=ShareId,proto3" json:"ShareId,omitempty"`
	Token       string  `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	Module      string  `protobuf:"bytes,7,opt,name=Module,proto3" json:"Module,omitempty"`
}

func (x *HTTPFlowsShareRequest) Reset() {
	*x = HTTPFlowsShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsShareRequest) ProtoMessage() {}

func (x *HTTPFlowsShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsShareRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsShareRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{494}
}

func (x *HTTPFlowsShareRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *HTTPFlowsShareRequest) GetLimitNum() int64 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *HTTPFlowsShareRequest) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *HTTPFlowsShareRequest) GetPwd() bool {
	if x != nil {
		return x.Pwd
	}
	return false
}

func (x *HTTPFlowsShareRequest) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *HTTPFlowsShareRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HTTPFlowsShareRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type HTTPFlowsShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId     string `protobuf:"bytes,1,opt,name=ShareId,proto3" json:"ShareId,omitempty"`
	ExtractCode string `protobuf:"bytes,2,opt,name=ExtractCode,proto3" json:"ExtractCode,omitempty"`
}

func (x *HTTPFlowsShareResponse) Reset() {
	*x = HTTPFlowsShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsShareResponse) ProtoMessage() {}

func (x *HTTPFlowsShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsShareResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowsShareResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{495}
}

func (x *HTTPFlowsShareResponse) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *HTTPFlowsShareResponse) GetExtractCode() string {
	if x != nil {
		return x.ExtractCode
	}
	return ""
}

type HTTPFlowsExtractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareExtractContent string `protobuf:"bytes,1,opt,name=ShareExtractContent,proto3" json:"ShareExtractContent,omitempty"`
}

func (x *HTTPFlowsExtractRequest) Reset() {
	*x = HTTPFlowsExtractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsExtractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsExtractRequest) ProtoMessage() {}

func (x *HTTPFlowsExtractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsExtractRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsExtractRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{496}
}

func (x *HTTPFlowsExtractRequest) GetShareExtractContent() string {
	if x != nil {
		return x.ShareExtractContent
	}
	return ""
}

type TagsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *TagsCode) Reset() {
	*x = TagsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsCode) ProtoMessage() {}

func (x *TagsCode) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsCode.ProtoReflect.Descriptor instead.
func (*TagsCode) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{497}
}

func (x *TagsCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TagsCode) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type WebsocketFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging          `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*WebsocketFlow `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64            `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *WebsocketFlows) Reset() {
	*x = WebsocketFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketFlows) ProtoMessage() {}

func (x *WebsocketFlows) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketFlows.ProtoReflect.Descriptor instead.
func (*WebsocketFlows) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{498}
}

func (x *WebsocketFlows) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *WebsocketFlows) GetData() []*WebsocketFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebsocketFlows) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type WebsocketFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedAt            int64  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	WebsocketRequestHash string `protobuf:"bytes,3,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
	FrameIndex           int64  `protobuf:"varint,4,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"`
	FromServer           bool   `protobuf:"varint,5,opt,name=FromServer,proto3" json:"FromServer,omitempty"`
	MessageType          string `protobuf:"bytes,6,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Data                 []byte `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
	DataSizeVerbose      string `protobuf:"bytes,8,opt,name=DataSizeVerbose,proto3" json:"DataSizeVerbose,omitempty"`
	DataLength           int64  `protobuf:"varint,9,opt,name=DataLength,proto3" json:"DataLength,omitempty"`
	DataVerbose          string `protobuf:"bytes,10,opt,name=DataVerbose,proto3" json:"DataVerbose,omitempty"`
	IsJson               bool   `protobuf:"varint,11,opt,name=IsJson,proto3" json:"IsJson,omitempty"`
	IsProtobuf           bool   `protobuf:"varint,12,opt,name=IsProtobuf,proto3" json:"IsProtobuf,omitempty"`
}

func (x *WebsocketFlow) Reset() {
	*x = WebsocketFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketFlow) ProtoMessage() {}

func (x *WebsocketFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketFlow.ProtoReflect.Descriptor instead.
func (*WebsocketFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{499}
}

func (x *WebsocketFlow) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WebsocketFlow) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WebsocketFlow) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

func (x *WebsocketFlow) GetFrameIndex() int64 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *WebsocketFlow) GetFromServer() bool {
	if x != nil {
		return x.FromServer
	}
	return false
}

func (x *WebsocketFlow) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *WebsocketFlow) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebsocketFlow) GetDataSizeVerbose() string {
	if x != nil {
		return x.DataSizeVerbose
	}
	return ""
}

func (x *WebsocketFlow) GetDataLength() int64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *WebsocketFlow) GetDataVerbose() string {
	if x != nil {
		return x.DataVerbose
	}
	return ""
}

func (x *WebsocketFlow) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *WebsocketFlow) GetIsProtobuf() bool {
	if x != nil {
		return x.IsProtobuf
	}
	return false
}

type SetMITMFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeHostname     []string        `protobuf:"bytes,7,rep,name=includeHostname,proto3" json:"includeHostname,omitempty"`
	ExcludeHostname     []string        `protobuf:"bytes,8,rep,name=excludeHostname,proto3" json:"excludeHostname,omitempty"`
	ExcludeSuffix       []string        `protobuf:"bytes,9,rep,name=excludeSuffix,proto3" json:"excludeSuffix,omitempty"`
	IncludeSuffix       []string        `protobuf:"bytes,10,rep,name=includeSuffix,proto3" json:"includeSuffix,omitempty"`
	ExcludeMethod       []string        `protobuf:"bytes,11,rep,name=excludeMethod,proto3" json:"excludeMethod,omitempty"`
	ExcludeContentTypes []string        `protobuf:"bytes,40,rep,name=excludeContentTypes,proto3" json:"excludeContentTypes,omitempty"`
	ExcludeUri          []string        `protobuf:"bytes,43,rep,name=excludeUri,proto3" json:"excludeUri,omitempty"`
	IncludeUri          []string        `protobuf:"bytes,44,rep,name=includeUri,proto3" json:"includeUri,omitempty"`
	FilterData          *MITMFilterData `protobuf:"bytes,1,opt,name=FilterData,proto3" json:"FilterData,omitempty"`
}

func (x *SetMITMFilterRequest) Reset() {
	*x = SetMITMFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMITMFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMITMFilterRequest) ProtoMessage() {}

func (x *SetMITMFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMITMFilterRequest.ProtoReflect.Descriptor instead.
func (*SetMITMFilterRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{500}
}

func (x *SetMITMFilterRequest) GetIncludeHostname() []string {
	if x != nil {
		return x.IncludeHostname
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeHostname() []string {
	if x != nil {
		return x.ExcludeHostname
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *SetMITMFilterRequest) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeMethod() []string {
	if x != nil {
		return x.ExcludeMethod
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeContentTypes() []string {
	if x != nil {
		return x.ExcludeContentTypes
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeUri() []string {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *SetMITMFilterRequest) GetIncludeUri() []string {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *SetMITMFilterRequest) GetFilterData() *MITMFilterData {
	if x != nil {
		return x.FilterData
	}
	return nil
}

type SetMITMFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMITMFilterResponse) Reset() {
	*x = SetMITMFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMITMFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMITMFilterResponse) ProtoMessage() {}

func (x *SetMITMFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMITMFilterResponse.ProtoReflect.Descriptor instead.
func (*SetMITMFilterResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{501}
}

// 中间人劫持的问题
type MITMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 54
	Request         []byte `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response        []byte `protobuf:"bytes,111,opt,name=response,proto3" json:"response,omitempty"`
	Host            string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	DownstreamProxy string `protobuf:"bytes,4,opt,name=downstreamProxy,proto3" json:"downstreamProxy,omitempty"`
	// 用来保证不要串台
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// 这个是响应劫持需要注意的字段。保证不串台
	ResponseId int64 `protobuf:"varint,16,opt,name=responseId,proto3" json:"responseId,omitempty"`
	Recover    bool  `protobuf:"varint,6,opt,name=recover,proto3" json:"recover,omitempty"`
	// 过滤器
	IncludeHostname      []string        `protobuf:"bytes,7,rep,name=includeHostname,proto3" json:"includeHostname,omitempty"`
	ExcludeHostname      []string        `protobuf:"bytes,8,rep,name=excludeHostname,proto3" json:"excludeHostname,omitempty"`
	ExcludeSuffix        []string        `protobuf:"bytes,9,rep,name=excludeSuffix,proto3" json:"excludeSuffix,omitempty"`
	IncludeSuffix        []string        `protobuf:"bytes,10,rep,name=includeSuffix,proto3" json:"includeSuffix,omitempty"`
	ExcludeMethod        []string        `protobuf:"bytes,11,rep,name=excludeMethod,proto3" json:"excludeMethod,omitempty"`
	ExcludeContentTypes  []string        `protobuf:"bytes,40,rep,name=excludeContentTypes,proto3" json:"excludeContentTypes,omitempty"`
	ExcludeUri           []string        `protobuf:"bytes,43,rep,name=excludeUri,proto3" json:"excludeUri,omitempty"`
	IncludeUri           []string        `protobuf:"bytes,44,rep,name=includeUri,proto3" json:"includeUri,omitempty"`
	FilterData           *MITMFilterData `protobuf:"bytes,63,opt,name=FilterData,proto3" json:"FilterData,omitempty"`
	UpdateFilter         bool            `protobuf:"varint,12,opt,name=updateFilter,proto3" json:"updateFilter,omitempty"`
	HijackResponse       bool            `protobuf:"varint,13,opt,name=hijackResponse,proto3" json:"hijackResponse,omitempty"`
	CancelhijackResponse bool            `protobuf:"varint,54,opt,name=cancelhijackResponse,proto3" json:"cancelhijackResponse,omitempty"`
	// 手动丢包
	Drop bool `protobuf:"varint,14,opt,name=drop,proto3" json:"drop,omitempty"`
	// 原封不动放行
	Forward bool `protobuf:"varint,15,opt,name=forward,proto3" json:"forward,omitempty"`
	// mitm plugin 中间人插件，本质上是一段 Yak 代码
	SetYakScript     bool             `protobuf:"varint,21,opt,name=setYakScript,proto3" json:"setYakScript,omitempty"`
	YakScriptParams  []*ExecParamItem `protobuf:"bytes,22,rep,name=yakScriptParams,proto3" json:"yakScriptParams,omitempty"`
	YakScriptID      int64            `protobuf:"varint,23,opt,name=yakScriptID,proto3" json:"yakScriptID,omitempty"`
	YakScriptContent string           `protobuf:"bytes,25,opt,name=yakScriptContent,proto3" json:"yakScriptContent,omitempty"`
	// 查看当前启用插件
	GetCurrentHook bool `protobuf:"varint,30,opt,name=getCurrentHook,proto3" json:"getCurrentHook,omitempty"`
	// 移除插件
	RemoveHook       bool              `protobuf:"varint,31,opt,name=removeHook,proto3" json:"removeHook,omitempty"` // 当这个为 true 的时候，将会
	RemoveHookParams *RemoveHookParams `protobuf:"bytes,32,opt,name=removeHookParams,proto3" json:"removeHookParams,omitempty"`
	// 设置自动转发
	SetAutoForward   bool `protobuf:"varint,33,opt,name=setAutoForward,proto3" json:"setAutoForward,omitempty"`
	AutoForwardValue bool `protobuf:"varint,34,opt,name=autoForwardValue,proto3" json:"autoForwardValue,omitempty"`
	// 设置清除上下文
	SetClearMITMPluginContext bool `protobuf:"varint,35,opt,name=setClearMITMPluginContext,proto3" json:"setClearMITMPluginContext,omitempty"`
	// 设置启用插件模式，自动加载所有主插件。
	// 如果不设置 initPluginNames 的话，启动所有默认插件
	SetPluginMode   bool     `protobuf:"varint,36,opt,name=setPluginMode,proto3" json:"setPluginMode,omitempty"`
	InitPluginNames []string `protobuf:"bytes,37,rep,name=initPluginNames,proto3" json:"initPluginNames,omitempty"`
	// 设置内容替代器
	SetContentReplacers bool                   `protobuf:"varint,38,opt,name=setContentReplacers,proto3" json:"setContentReplacers,omitempty"`
	Replacers           []*MITMContentReplacer `protobuf:"bytes,39,rep,name=replacers,proto3" json:"replacers,omitempty"`
	// 恢复 filter, 防止用户删除了全部的 filter
	SetResetFilter bool `protobuf:"varint,41,opt,name=setResetFilter,proto3" json:"setResetFilter,omitempty"`
	// enable h2
	EnableHttp2  bool           `protobuf:"varint,42,opt,name=enableHttp2,proto3" json:"enableHttp2,omitempty"`
	Certificates []*Certificate `protobuf:"bytes,45,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// gmtls config
	EnableGMTLS     bool `protobuf:"varint,46,opt,name=enableGMTLS,proto3" json:"enableGMTLS,omitempty"`
	OnlyEnableGMTLS bool `protobuf:"varint,47,opt,name=onlyEnableGMTLS,proto3" json:"onlyEnableGMTLS,omitempty"`
	PreferGMTLS     bool `protobuf:"varint,48,opt,name=preferGMTLS,proto3" json:"preferGMTLS,omitempty"`
	// 代理用户名和密码
	ProxyUsername   string    `protobuf:"bytes,49,opt,name=proxyUsername,proto3" json:"proxyUsername,omitempty"`
	ProxyPassword   string    `protobuf:"bytes,50,opt,name=proxyPassword,proto3" json:"proxyPassword,omitempty"`
	EnableProxyAuth bool      `protobuf:"varint,51,opt,name=enableProxyAuth,proto3" json:"enableProxyAuth,omitempty"`
	DnsServers      []string  `protobuf:"bytes,52,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
	Hosts           []*KVPair `protobuf:"bytes,53,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// max content-length
	MaxContentLength int64 `protobuf:"varint,55,opt,name=maxContentLength,proto3" json:"maxContentLength,omitempty"`
	// 提前为此次flow设置tags
	Tags []string `protobuf:"bytes,56,rep,name=Tags,proto3" json:"Tags,omitempty"`
	// 过滤 ws
	FilterWebsocket       bool `protobuf:"varint,57,opt,name=filterWebsocket,proto3" json:"filterWebsocket,omitempty"`
	UpdateFilterWebsocket bool `protobuf:"varint,58,opt,name=updateFilterWebsocket,proto3" json:"updateFilterWebsocket,omitempty"`
	// force close
	ForceDisableKeepAlive bool `protobuf:"varint,59,opt,name=ForceDisableKeepAlive,proto3" json:"ForceDisableKeepAlive,omitempty"`
	// runtime change proxy
	SetDownstreamProxy bool `protobuf:"varint,60,opt,name=SetDownstreamProxy,proto3" json:"SetDownstreamProxy,omitempty"`
	// disable MITM CA Cert Page
	DisableCACertPage bool `protobuf:"varint,61,opt,name=DisableCACertPage,proto3" json:"DisableCACertPage,omitempty"`
	// random JA3 fingerprint
	RandomJA3 bool `protobuf:"varint,62,opt,name=RandomJA3,proto3" json:"RandomJA3,omitempty"`
	// disable websocket compression
	DisableWebsocketCompression bool `protobuf:"varint,64,opt,name=DisableWebsocketCompression,proto3" json:"DisableWebsocketCompression,omitempty"`
}

func (x *MITMRequest) Reset() {
	*x = MITMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMRequest) ProtoMessage() {}

func (x *MITMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMRequest.ProtoReflect.Descriptor instead.
func (*MITMRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{502}
}

func (x *MITMRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MITMRequest) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MITMRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MITMRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MITMRequest) GetDownstreamProxy() string {
	if x != nil {
		return x.DownstreamProxy
	}
	return ""
}

func (x *MITMRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MITMRequest) GetResponseId() int64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *MITMRequest) GetRecover() bool {
	if x != nil {
		return x.Recover
	}
	return false
}

func (x *MITMRequest) GetIncludeHostname() []string {
	if x != nil {
		return x.IncludeHostname
	}
	return nil
}

func (x *MITMRequest) GetExcludeHostname() []string {
	if x != nil {
		return x.ExcludeHostname
	}
	return nil
}

func (x *MITMRequest) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *MITMRequest) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *MITMRequest) GetExcludeMethod() []string {
	if x != nil {
		return x.ExcludeMethod
	}
	return nil
}

func (x *MITMRequest) GetExcludeContentTypes() []string {
	if x != nil {
		return x.ExcludeContentTypes
	}
	return nil
}

func (x *MITMRequest) GetExcludeUri() []string {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *MITMRequest) GetIncludeUri() []string {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *MITMRequest) GetFilterData() *MITMFilterData {
	if x != nil {
		return x.FilterData
	}
	return nil
}

func (x *MITMRequest) GetUpdateFilter() bool {
	if x != nil {
		return x.UpdateFilter
	}
	return false
}

func (x *MITMRequest) GetHijackResponse() bool {
	if x != nil {
		return x.HijackResponse
	}
	return false
}

func (x *MITMRequest) GetCancelhijackResponse() bool {
	if x != nil {
		return x.CancelhijackResponse
	}
	return false
}

func (x *MITMRequest) GetDrop() bool {
	if x != nil {
		return x.Drop
	}
	return false
}

func (x *MITMRequest) GetForward() bool {
	if x != nil {
		return x.Forward
	}
	return false
}

func (x *MITMRequest) GetSetYakScript() bool {
	if x != nil {
		return x.SetYakScript
	}
	return false
}

func (x *MITMRequest) GetYakScriptParams() []*ExecParamItem {
	if x != nil {
		return x.YakScriptParams
	}
	return nil
}

func (x *MITMRequest) GetYakScriptID() int64 {
	if x != nil {
		return x.YakScriptID
	}
	return 0
}

func (x *MITMRequest) GetYakScriptContent() string {
	if x != nil {
		return x.YakScriptContent
	}
	return ""
}

func (x *MITMRequest) GetGetCurrentHook() bool {
	if x != nil {
		return x.GetCurrentHook
	}
	return false
}

func (x *MITMRequest) GetRemoveHook() bool {
	if x != nil {
		return x.RemoveHook
	}
	return false
}

func (x *MITMRequest) GetRemoveHookParams() *RemoveHookParams {
	if x != nil {
		return x.RemoveHookParams
	}
	return nil
}

func (x *MITMRequest) GetSetAutoForward() bool {
	if x != nil {
		return x.SetAutoForward
	}
	return false
}

func (x *MITMRequest) GetAutoForwardValue() bool {
	if x != nil {
		return x.AutoForwardValue
	}
	return false
}

func (x *MITMRequest) GetSetClearMITMPluginContext() bool {
	if x != nil {
		return x.SetClearMITMPluginContext
	}
	return false
}

func (x *MITMRequest) GetSetPluginMode() bool {
	if x != nil {
		return x.SetPluginMode
	}
	return false
}

func (x *MITMRequest) GetInitPluginNames() []string {
	if x != nil {
		return x.InitPluginNames
	}
	return nil
}

func (x *MITMRequest) GetSetContentReplacers() bool {
	if x != nil {
		return x.SetContentReplacers
	}
	return false
}

func (x *MITMRequest) GetReplacers() []*MITMContentReplacer {
	if x != nil {
		return x.Replacers
	}
	return nil
}

func (x *MITMRequest) GetSetResetFilter() bool {
	if x != nil {
		return x.SetResetFilter
	}
	return false
}

func (x *MITMRequest) GetEnableHttp2() bool {
	if x != nil {
		return x.EnableHttp2
	}
	return false
}

func (x *MITMRequest) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *MITMRequest) GetEnableGMTLS() bool {
	if x != nil {
		return x.EnableGMTLS
	}
	return false
}

func (x *MITMRequest) GetOnlyEnableGMTLS() bool {
	if x != nil {
		return x.OnlyEnableGMTLS
	}
	return false
}

func (x *MITMRequest) GetPreferGMTLS() bool {
	if x != nil {
		return x.PreferGMTLS
	}
	return false
}

func (x *MITMRequest) GetProxyUsername() string {
	if x != nil {
		return x.ProxyUsername
	}
	return ""
}

func (x *MITMRequest) GetProxyPassword() string {
	if x != nil {
		return x.ProxyPassword
	}
	return ""
}

func (x *MITMRequest) GetEnableProxyAuth() bool {
	if x != nil {
		return x.EnableProxyAuth
	}
	return false
}

func (x *MITMRequest) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *MITMRequest) GetHosts() []*KVPair {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *MITMRequest) GetMaxContentLength() int64 {
	if x != nil {
		return x.MaxContentLength
	}
	return 0
}

func (x *MITMRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MITMRequest) GetFilterWebsocket() bool {
	if x != nil {
		return x.FilterWebsocket
	}
	return false
}

func (x *MITMRequest) GetUpdateFilterWebsocket() bool {
	if x != nil {
		return x.UpdateFilterWebsocket
	}
	return false
}

func (x *MITMRequest) GetForceDisableKeepAlive() bool {
	if x != nil {
		return x.ForceDisableKeepAlive
	}
	return false
}

func (x *MITMRequest) GetSetDownstreamProxy() bool {
	if x != nil {
		return x.SetDownstreamProxy
	}
	return false
}

func (x *MITMRequest) GetDisableCACertPage() bool {
	if x != nil {
		return x.DisableCACertPage
	}
	return false
}

func (x *MITMRequest) GetRandomJA3() bool {
	if x != nil {
		return x.RandomJA3
	}
	return false
}

func (x *MITMRequest) GetDisableWebsocketCompression() bool {
	if x != nil {
		return x.DisableWebsocketCompression
	}
	return false
}

type FilterDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatcherType string   `protobuf:"bytes,1,opt,name=MatcherType,proto3" json:"MatcherType,omitempty"`
	Group       []string `protobuf:"bytes,2,rep,name=Group,proto3" json:"Group,omitempty"`
}

func (x *FilterDataItem) Reset() {
	*x = FilterDataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterDataItem) ProtoMessage() {}

func (x *FilterDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterDataItem.ProtoReflect.Descriptor instead.
func (*FilterDataItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{503}
}

func (x *FilterDataItem) GetMatcherType() string {
	if x != nil {
		return x.MatcherType
	}
	return ""
}

func (x *FilterDataItem) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

type MITMFilterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeHostnames []*FilterDataItem `protobuf:"bytes,1,rep,name=IncludeHostnames,proto3" json:"IncludeHostnames,omitempty"`
	ExcludeHostnames []*FilterDataItem `protobuf:"bytes,2,rep,name=ExcludeHostnames,proto3" json:"ExcludeHostnames,omitempty"`
	IncludeSuffix    []*FilterDataItem `protobuf:"bytes,3,rep,name=IncludeSuffix,proto3" json:"IncludeSuffix,omitempty"`
	ExcludeSuffix    []*FilterDataItem `protobuf:"bytes,4,rep,name=ExcludeSuffix,proto3" json:"ExcludeSuffix,omitempty"`
	IncludeUri       []*FilterDataItem `protobuf:"bytes,5,rep,name=IncludeUri,proto3" json:"IncludeUri,omitempty"`
	ExcludeUri       []*FilterDataItem `protobuf:"bytes,6,rep,name=ExcludeUri,proto3" json:"ExcludeUri,omitempty"`
	ExcludeMethods   []*FilterDataItem `protobuf:"bytes,7,rep,name=ExcludeMethods,proto3" json:"ExcludeMethods,omitempty"`
	ExcludeMIME      []*FilterDataItem `protobuf:"bytes,8,rep,name=ExcludeMIME,proto3" json:"ExcludeMIME,omitempty"`
}

func (x *MITMFilterData) Reset() {
	*x = MITMFilterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMFilterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMFilterData) ProtoMessage() {}

func (x *MITMFilterData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMFilterData.ProtoReflect.Descriptor instead.
func (*MITMFilterData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{504}
}

func (x *MITMFilterData) GetIncludeHostnames() []*FilterDataItem {
	if x != nil {
		return x.IncludeHostnames
	}
	return nil
}

func (x *MITMFilterData) GetExcludeHostnames() []*FilterDataItem {
	if x != nil {
		return x.ExcludeHostnames
	}
	return nil
}

func (x *MITMFilterData) GetIncludeSuffix() []*FilterDataItem {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *MITMFilterData) GetExcludeSuffix() []*FilterDataItem {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *MITMFilterData) GetIncludeUri() []*FilterDataItem {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *MITMFilterData) GetExcludeUri() []*FilterDataItem {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *MITMFilterData) GetExcludeMethods() []*FilterDataItem {
	if x != nil {
		return x.ExcludeMethods
	}
	return nil
}

func (x *MITMFilterData) GetExcludeMIME() []*FilterDataItem {
	if x != nil {
		return x.ExcludeMIME
	}
	return nil
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrtPem         []byte   `protobuf:"bytes,1,opt,name=CrtPem,proto3" json:"CrtPem,omitempty"`
	KeyPem         []byte   `protobuf:"bytes,2,opt,name=KeyPem,proto3" json:"KeyPem,omitempty"`
	CaCertificates [][]byte `protobuf:"bytes,3,rep,name=CaCertificates,proto3" json:"CaCertificates,omitempty"`
	// pkcs12path need a .p12 or .pfx file
	Pkcs12Bytes    []byte `protobuf:"bytes,4,opt,name=Pkcs12Bytes,proto3" json:"Pkcs12Bytes,omitempty"`
	Pkcs12Password []byte `protobuf:"bytes,5,opt,name=Pkcs12Password,proto3" json:"Pkcs12Password,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{505}
}

func (x *Certificate) GetCrtPem() []byte {
	if x != nil {
		return x.CrtPem
	}
	return nil
}

func (x *Certificate) GetKeyPem() []byte {
	if x != nil {
		return x.KeyPem
	}
	return nil
}

func (x *Certificate) GetCaCertificates() [][]byte {
	if x != nil {
		return x.CaCertificates
	}
	return nil
}

func (x *Certificate) GetPkcs12Bytes() []byte {
	if x != nil {
		return x.Pkcs12Bytes
	}
	return nil
}

func (x *Certificate) GetPkcs12Password() []byte {
	if x != nil {
		return x.Pkcs12Password
	}
	return nil
}

type MITMContentReplacer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 如果是正则的话，就把匹配到的内容替换成对应结果
	// 优先 Golang 原生规则
	// 然后再是 Re2 规则
	// 然后子字符串
	Rule string `protobuf:"bytes,1,opt,name=Rule,proto3" json:"Rule,omitempty"`
	// 这个功能意义在于，不要替代内容，仅标注颜色（敏感内容）
	NoReplace bool `protobuf:"varint,2,opt,name=NoReplace,proto3" json:"NoReplace,omitempty"`
	// 这里保存对应结果
	Result string `protobuf:"bytes,3,opt,name=Result,proto3" json:"Result,omitempty"`
	// 选择替换之后的颜色
	Color string `protobuf:"bytes,4,opt,name=Color,proto3" json:"Color,omitempty"`
	// 生效内容：默认对 body 生效
	EnableForRequest  bool `protobuf:"varint,5,opt,name=EnableForRequest,proto3" json:"EnableForRequest,omitempty"`
	EnableForResponse bool `protobuf:"varint,6,opt,name=EnableForResponse,proto3" json:"EnableForResponse,omitempty"`
	EnableForHeader   bool `protobuf:"varint,9,opt,name=EnableForHeader,proto3" json:"EnableForHeader,omitempty"`
	EnableForBody     bool `protobuf:"varint,10,opt,name=EnableForBody,proto3" json:"EnableForBody,omitempty"`
	EnableForURI      bool `protobuf:"varint,15,opt,name=EnableForURI,proto3" json:"EnableForURI,omitempty"`
	// Index
	Index int32 `protobuf:"varint,7,opt,name=Index,proto3" json:"Index,omitempty"`
	// 额外标签，用于标注 flow
	ExtraTag []string `protobuf:"bytes,8,rep,name=ExtraTag,proto3" json:"ExtraTag,omitempty"`
	// 一键禁用启用全部
	Disabled bool `protobuf:"varint,11,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	// 展示名称，一般用于助记，不会有啥额外影响
	VerboseName string `protobuf:"bytes,12,opt,name=VerboseName,proto3" json:"VerboseName,omitempty"`
	// 为数据包新增 Header
	ExtraHeaders []*HTTPHeader        `protobuf:"bytes,13,rep,name=ExtraHeaders,proto3" json:"ExtraHeaders,omitempty"`
	ExtraCookies []*HTTPCookieSetting `protobuf:"bytes,14,rep,name=ExtraCookies,proto3" json:"ExtraCookies,omitempty"`
	// Action
	// 额外重复一次这个数据包（替换后的数据）
	// 只有替换数据
	ExtraRepeat bool `protobuf:"varint,16,opt,name=ExtraRepeat,proto3" json:"ExtraRepeat,omitempty"`
	// 匹配掉之后直接丢包
	Drop         bool   `protobuf:"varint,17,opt,name=Drop,proto3" json:"Drop,omitempty"`
	EffectiveURL string `protobuf:"bytes,18,opt,name=EffectiveURL,proto3" json:"EffectiveURL,omitempty"`
}

func (x *MITMContentReplacer) Reset() {
	*x = MITMContentReplacer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMContentReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMContentReplacer) ProtoMessage() {}

func (x *MITMContentReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMContentReplacer.ProtoReflect.Descriptor instead.
func (*MITMContentReplacer) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{506}
}

func (x *MITMContentReplacer) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *MITMContentReplacer) GetNoReplace() bool {
	if x != nil {
		return x.NoReplace
	}
	return false
}

func (x *MITMContentReplacer) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *MITMContentReplacer) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *MITMContentReplacer) GetEnableForRequest() bool {
	if x != nil {
		return x.EnableForRequest
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForResponse() bool {
	if x != nil {
		return x.EnableForResponse
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForHeader() bool {
	if x != nil {
		return x.EnableForHeader
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForBody() bool {
	if x != nil {
		return x.EnableForBody
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForURI() bool {
	if x != nil {
		return x.EnableForURI
	}
	return false
}

func (x *MITMContentReplacer) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MITMContentReplacer) GetExtraTag() []string {
	if x != nil {
		return x.ExtraTag
	}
	return nil
}

func (x *MITMContentReplacer) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *MITMContentReplacer) GetVerboseName() string {
	if x != nil {
		return x.VerboseName
	}
	return ""
}

func (x *MITMContentReplacer) GetExtraHeaders() []*HTTPHeader {
	if x != nil {
		return x.ExtraHeaders
	}
	return nil
}

func (x *MITMContentReplacer) GetExtraCookies() []*HTTPCookieSetting {
	if x != nil {
		return x.ExtraCookies
	}
	return nil
}

func (x *MITMContentReplacer) GetExtraRepeat() bool {
	if x != nil {
		return x.ExtraRepeat
	}
	return false
}

func (x *MITMContentReplacer) GetDrop() bool {
	if x != nil {
		return x.Drop
	}
	return false
}

func (x *MITMContentReplacer) GetEffectiveURL() string {
	if x != nil {
		return x.EffectiveURL
	}
	return ""
}

type RemoveHookParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClearAll     bool     `protobuf:"varint,1,opt,name=ClearAll,proto3" json:"ClearAll,omitempty"`
	HookName     []string `protobuf:"bytes,2,rep,name=HookName,proto3" json:"HookName,omitempty"`
	RemoveHookID []string `protobuf:"bytes,3,rep,name=RemoveHookID,proto3" json:"RemoveHookID,omitempty"`
}

func (x *RemoveHookParams) Reset() {
	*x = RemoveHookParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHookParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHookParams) ProtoMessage() {}

func (x *RemoveHookParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHookParams.ProtoReflect.Descriptor instead.
func (*RemoveHookParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{507}
}

func (x *RemoveHookParams) GetClearAll() bool {
	if x != nil {
		return x.ClearAll
	}
	return false
}

func (x *RemoveHookParams) GetHookName() []string {
	if x != nil {
		return x.HookName
	}
	return nil
}

func (x *RemoveHookParams) GetRemoveHookID() []string {
	if x != nil {
		return x.RemoveHookID
	}
	return nil
}

type MITMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []byte `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// 劫持的是 HTTPS 吗？
	IsHttps bool   `protobuf:"varint,3,opt,name=isHttps,proto3" json:"isHttps,omitempty"`
	Url     string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// 和 Request 中的一一对应
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// 过滤器
	JustFilter          bool            `protobuf:"varint,16,opt,name=justFilter,proto3" json:"justFilter,omitempty"`
	IncludeHostname     []string        `protobuf:"bytes,17,rep,name=includeHostname,proto3" json:"includeHostname,omitempty"`
	ExcludeHostname     []string        `protobuf:"bytes,18,rep,name=excludeHostname,proto3" json:"excludeHostname,omitempty"`
	ExcludeSuffix       []string        `protobuf:"bytes,19,rep,name=excludeSuffix,proto3" json:"excludeSuffix,omitempty"`
	IncludeSuffix       []string        `protobuf:"bytes,110,rep,name=includeSuffix,proto3" json:"includeSuffix,omitempty"`
	ExcludeMethod       []string        `protobuf:"bytes,111,rep,name=excludeMethod,proto3" json:"excludeMethod,omitempty"`
	ExcludeContentTypes []string        `protobuf:"bytes,113,rep,name=excludeContentTypes,proto3" json:"excludeContentTypes,omitempty"`
	ExcludeUri          []string        `protobuf:"bytes,114,rep,name=excludeUri,proto3" json:"excludeUri,omitempty"`
	IncludeUri          []string        `protobuf:"bytes,115,rep,name=includeUri,proto3" json:"includeUri,omitempty"`
	FilterData          *MITMFilterData `protobuf:"bytes,116,opt,name=FilterData,proto3" json:"FilterData,omitempty"`
	// 替代过滤器的内容
	JustContentReplacer bool                   `protobuf:"varint,120,opt,name=justContentReplacer,proto3" json:"justContentReplacer,omitempty"`
	Replacers           []*MITMContentReplacer `protobuf:"bytes,121,rep,name=replacers,proto3" json:"replacers,omitempty"`
	// 刷新表格: 如果这个是 True 的话，那么不应该发送回劫持器，应该只发送刷新表格的信息
	Refresh         bool      `protobuf:"varint,2,opt,name=refresh,proto3" json:"refresh,omitempty"`
	HistoryHTTPFlow *HTTPFlow `protobuf:"bytes,22,opt,name=historyHTTPFlow,proto3" json:"historyHTTPFlow,omitempty"`
	ForResponse     bool      `protobuf:"varint,23,opt,name=forResponse,proto3" json:"forResponse,omitempty"`
	Response        []byte    `protobuf:"bytes,24,opt,name=response,proto3" json:"response,omitempty"`
	ResponseId      int64     `protobuf:"varint,26,opt,name=responseId,proto3" json:"responseId,omitempty"`
	// exec result
	HaveMessage    bool              `protobuf:"varint,27,opt,name=haveMessage,proto3" json:"haveMessage,omitempty"`
	Message        *ExecResult       `protobuf:"bytes,28,opt,name=message,proto3" json:"message,omitempty"`
	GetCurrentHook bool              `protobuf:"varint,30,opt,name=getCurrentHook,proto3" json:"getCurrentHook,omitempty"`
	Hooks          []*YakScriptHooks `protobuf:"bytes,31,rep,name=hooks,proto3" json:"hooks,omitempty"`
	RemoteAddr     string            `protobuf:"bytes,32,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	// 这里用来展示一些服务端通知，直接弹框就好
	HaveNotification    bool   `protobuf:"varint,34,opt,name=haveNotification,proto3" json:"haveNotification,omitempty"`
	NotificationContent []byte `protobuf:"bytes,33,opt,name=notificationContent,proto3" json:"notificationContent,omitempty"`
	// 这两个标志是用来设置 MITM 加载状态的，用于服务端控制用户端的 "加载中"
	HaveLoadingSetter bool `protobuf:"varint,35,opt,name=haveLoadingSetter,proto3" json:"haveLoadingSetter,omitempty"`
	LoadingFlag       bool `protobuf:"varint,36,opt,name=loadingFlag,proto3" json:"loadingFlag,omitempty"`
	// Websocket 相关配置
	IsWebsocket     bool     `protobuf:"varint,37,opt,name=isWebsocket,proto3" json:"isWebsocket,omitempty"`
	WebsocketEncode []string `protobuf:"bytes,38,rep,name=websocketEncode,proto3" json:"websocketEncode,omitempty"`
	// Websocket 传输的数据
	Payload []byte `protobuf:"bytes,39,opt,name=Payload,proto3" json:"Payload,omitempty"`
	// 响应跟踪信息
	TraceInfo *TraceInfo `protobuf:"bytes,40,opt,name=traceInfo,proto3" json:"traceInfo,omitempty"`
}

func (x *MITMResponse) Reset() {
	*x = MITMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMResponse) ProtoMessage() {}

func (x *MITMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMResponse.ProtoReflect.Descriptor instead.
func (*MITMResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{508}
}

func (x *MITMResponse) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MITMResponse) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *MITMResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MITMResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MITMResponse) GetJustFilter() bool {
	if x != nil {
		return x.JustFilter
	}
	return false
}

func (x *MITMResponse) GetIncludeHostname() []string {
	if x != nil {
		return x.IncludeHostname
	}
	return nil
}

func (x *MITMResponse) GetExcludeHostname() []string {
	if x != nil {
		return x.ExcludeHostname
	}
	return nil
}

func (x *MITMResponse) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *MITMResponse) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *MITMResponse) GetExcludeMethod() []string {
	if x != nil {
		return x.ExcludeMethod
	}
	return nil
}

func (x *MITMResponse) GetExcludeContentTypes() []string {
	if x != nil {
		return x.ExcludeContentTypes
	}
	return nil
}

func (x *MITMResponse) GetExcludeUri() []string {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *MITMResponse) GetIncludeUri() []string {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *MITMResponse) GetFilterData() *MITMFilterData {
	if x != nil {
		return x.FilterData
	}
	return nil
}

func (x *MITMResponse) GetJustContentReplacer() bool {
	if x != nil {
		return x.JustContentReplacer
	}
	return false
}

func (x *MITMResponse) GetReplacers() []*MITMContentReplacer {
	if x != nil {
		return x.Replacers
	}
	return nil
}

func (x *MITMResponse) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *MITMResponse) GetHistoryHTTPFlow() *HTTPFlow {
	if x != nil {
		return x.HistoryHTTPFlow
	}
	return nil
}

func (x *MITMResponse) GetForResponse() bool {
	if x != nil {
		return x.ForResponse
	}
	return false
}

func (x *MITMResponse) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MITMResponse) GetResponseId() int64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *MITMResponse) GetHaveMessage() bool {
	if x != nil {
		return x.HaveMessage
	}
	return false
}

func (x *MITMResponse) GetMessage() *ExecResult {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MITMResponse) GetGetCurrentHook() bool {
	if x != nil {
		return x.GetCurrentHook
	}
	return false
}

func (x *MITMResponse) GetHooks() []*YakScriptHooks {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *MITMResponse) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *MITMResponse) GetHaveNotification() bool {
	if x != nil {
		return x.HaveNotification
	}
	return false
}

func (x *MITMResponse) GetNotificationContent() []byte {
	if x != nil {
		return x.NotificationContent
	}
	return nil
}

func (x *MITMResponse) GetHaveLoadingSetter() bool {
	if x != nil {
		return x.HaveLoadingSetter
	}
	return false
}

func (x *MITMResponse) GetLoadingFlag() bool {
	if x != nil {
		return x.LoadingFlag
	}
	return false
}

func (x *MITMResponse) GetIsWebsocket() bool {
	if x != nil {
		return x.IsWebsocket
	}
	return false
}

func (x *MITMResponse) GetWebsocketEncode() []string {
	if x != nil {
		return x.WebsocketEncode
	}
	return nil
}

func (x *MITMResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MITMResponse) GetTraceInfo() *TraceInfo {
	if x != nil {
		return x.TraceInfo
	}
	return nil
}

type TraceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableDNSServers []string `protobuf:"bytes,1,rep,name=AvailableDNSServers,proto3" json:"AvailableDNSServers,omitempty"`
	DurationMs          int64    `protobuf:"varint,2,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`           // ServerTime
	DNSDurationMs       int64    `protobuf:"varint,3,opt,name=DNSDurationMs,proto3" json:"DNSDurationMs,omitempty"`     // DNSTime
	ConnDurationMs      int64    `protobuf:"varint,4,opt,name=ConnDurationMs,proto3" json:"ConnDurationMs,omitempty"`   // ConnTime
	TotalDurationMs     int64    `protobuf:"varint,5,opt,name=TotalDurationMs,proto3" json:"TotalDurationMs,omitempty"` // TotalTime
}

func (x *TraceInfo) Reset() {
	*x = TraceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceInfo) ProtoMessage() {}

func (x *TraceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceInfo.ProtoReflect.Descriptor instead.
func (*TraceInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{509}
}

func (x *TraceInfo) GetAvailableDNSServers() []string {
	if x != nil {
		return x.AvailableDNSServers
	}
	return nil
}

func (x *TraceInfo) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *TraceInfo) GetDNSDurationMs() int64 {
	if x != nil {
		return x.DNSDurationMs
	}
	return 0
}

func (x *TraceInfo) GetConnDurationMs() int64 {
	if x != nil {
		return x.ConnDurationMs
	}
	return 0
}

func (x *TraceInfo) GetTotalDurationMs() int64 {
	if x != nil {
		return x.TotalDurationMs
	}
	return 0
}

type YakScriptHooks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HookName string               `protobuf:"bytes,1,opt,name=HookName,proto3" json:"HookName,omitempty"`
	Hooks    []*YakScriptHookItem `protobuf:"bytes,2,rep,name=Hooks,proto3" json:"Hooks,omitempty"`
}

func (x *YakScriptHooks) Reset() {
	*x = YakScriptHooks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptHooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptHooks) ProtoMessage() {}

func (x *YakScriptHooks) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptHooks.ProtoReflect.Descriptor instead.
func (*YakScriptHooks) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{510}
}

func (x *YakScriptHooks) GetHookName() string {
	if x != nil {
		return x.HookName
	}
	return ""
}

func (x *YakScriptHooks) GetHooks() []*YakScriptHookItem {
	if x != nil {
		return x.Hooks
	}
	return nil
}

type YakScriptHookItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId   int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	YakScriptName string `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Verbose       string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *YakScriptHookItem) Reset() {
	*x = YakScriptHookItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptHookItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptHookItem) ProtoMessage() {}

func (x *YakScriptHookItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptHookItem.ProtoReflect.Descriptor instead.
func (*YakScriptHookItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{511}
}

func (x *YakScriptHookItem) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *YakScriptHookItem) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *YakScriptHookItem) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

// 最基础的 ECHO
type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{512}
}

func (x *EchoRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type EchoResposne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *EchoResposne) Reset() {
	*x = EchoResposne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResposne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResposne) ProtoMessage() {}

func (x *EchoResposne) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResposne.ProtoReflect.Descriptor instead.
func (*EchoResposne) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{513}
}

func (x *EchoResposne) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// 开启一个端口，对接 GRPC 服务器
type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw    []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port   uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Path   string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Width  uint32 `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{514}
}

func (x *Input) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Input) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Input) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Input) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Input) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Input) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw        []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	RemoteAddr string `protobuf:"bytes,11,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	LocalAddr  string `protobuf:"bytes,12,opt,name=localAddr,proto3" json:"localAddr,omitempty"`
	// 如果 control 为 true 说明这是一个控制信息
	Control bool `protobuf:"varint,2,opt,name=control,proto3" json:"control,omitempty"`
	// 服务端需要关闭
	Closed bool `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	// 服务端正在等待连接接入
	Waiting bool `protobuf:"varint,4,opt,name=waiting,proto3" json:"waiting,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{515}
}

func (x *Output) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Output) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *Output) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *Output) GetControl() bool {
	if x != nil {
		return x.Control
	}
	return false
}

func (x *Output) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Output) GetWaiting() bool {
	if x != nil {
		return x.Waiting
	}
	return false
}

// 执行脚本
type ExecParamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ExecParamItem) Reset() {
	*x = ExecParamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecParamItem) ProtoMessage() {}

func (x *ExecParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecParamItem.ProtoReflect.Descriptor instead.
func (*ExecParamItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{516}
}

func (x *ExecParamItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExecParamItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 执行优先级为：ScriptPath > Script > ScriptId
	Params      []*ExecParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	Script      string           `protobuf:"bytes,2,opt,name=Script,proto3" json:"Script,omitempty"`
	ScriptId    string           `protobuf:"bytes,3,opt,name=ScriptId,proto3" json:"ScriptId,omitempty"`
	YakScriptId int64            `protobuf:"varint,5,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	// 这个是为了满足 Runner 的情况，属于特殊情况
	RunnerParamRaw  string `protobuf:"bytes,6,opt,name=RunnerParamRaw,proto3" json:"RunnerParamRaw,omitempty"`
	NoDividedEngine bool   `protobuf:"varint,7,opt,name=NoDividedEngine,proto3" json:"NoDividedEngine,omitempty"`
	WorkDir         string `protobuf:"bytes,8,opt,name=WorkDir,proto3" json:"WorkDir,omitempty"`       // 工作目录
	ScriptPath      string `protobuf:"bytes,9,opt,name=ScriptPath,proto3" json:"ScriptPath,omitempty"` // 脚本位置
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{517}
}

func (x *ExecRequest) GetParams() []*ExecParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ExecRequest) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ExecRequest) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ExecRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExecRequest) GetRunnerParamRaw() string {
	if x != nil {
		return x.RunnerParamRaw
	}
	return ""
}

func (x *ExecRequest) GetNoDividedEngine() bool {
	if x != nil {
		return x.NoDividedEngine
	}
	return false
}

func (x *ExecRequest) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *ExecRequest) GetScriptPath() string {
	if x != nil {
		return x.ScriptPath
	}
	return ""
}

type ExecResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash       string `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	OutputJson string `protobuf:"bytes,2,opt,name=OutputJson,proto3" json:"OutputJson,omitempty"`
	Raw        []byte `protobuf:"bytes,3,opt,name=Raw,proto3" json:"Raw,omitempty"`
	IsMessage  bool   `protobuf:"varint,4,opt,name=IsMessage,proto3" json:"IsMessage,omitempty"`
	Message    []byte `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
	// 如果是一个保存过的 ExecResult 他应该有数据库记录 ID
	Id        int64   `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	RuntimeID string  `protobuf:"bytes,7,opt,name=RuntimeID,proto3" json:"RuntimeID,omitempty"`
	Progress  float32 `protobuf:"fixed32,8,opt,name=Progress,proto3" json:"Progress,omitempty"`
}

func (x *ExecResult) Reset() {
	*x = ExecResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResult) ProtoMessage() {}

func (x *ExecResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResult.ProtoReflect.Descriptor instead.
func (*ExecResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{518}
}

func (x *ExecResult) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ExecResult) GetOutputJson() string {
	if x != nil {
		return x.OutputJson
	}
	return ""
}

func (x *ExecResult) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *ExecResult) GetIsMessage() bool {
	if x != nil {
		return x.IsMessage
	}
	return false
}

func (x *ExecResult) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ExecResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExecResult) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *ExecResult) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GetLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License string `protobuf:"bytes,1,opt,name=License,proto3" json:"License,omitempty"`
}

func (x *GetLicenseResponse) Reset() {
	*x = GetLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicenseResponse) ProtoMessage() {}

func (x *GetLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLicenseResponse.ProtoReflect.Descriptor instead.
func (*GetLicenseResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{519}
}

func (x *GetLicenseResponse) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type CheckLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseActivation string `protobuf:"bytes,1,opt,name=LicenseActivation,proto3" json:"LicenseActivation,omitempty"`
	CompanyVersion    string `protobuf:"bytes,2,opt,name=CompanyVersion,proto3" json:"CompanyVersion,omitempty"`
}

func (x *CheckLicenseRequest) Reset() {
	*x = CheckLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLicenseRequest) ProtoMessage() {}

func (x *CheckLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLicenseRequest.ProtoReflect.Descriptor instead.
func (*CheckLicenseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{520}
}

func (x *CheckLicenseRequest) GetLicenseActivation() string {
	if x != nil {
		return x.LicenseActivation
	}
	return ""
}

func (x *CheckLicenseRequest) GetCompanyVersion() string {
	if x != nil {
		return x.CompanyVersion
	}
	return ""
}

type DefaultDnsServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultDnsServer []string `protobuf:"bytes,1,rep,name=DefaultDnsServer,proto3" json:"DefaultDnsServer,omitempty"`
}

func (x *DefaultDnsServerResponse) Reset() {
	*x = DefaultDnsServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultDnsServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultDnsServerResponse) ProtoMessage() {}

func (x *DefaultDnsServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultDnsServerResponse.ProtoReflect.Descriptor instead.
func (*DefaultDnsServerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{521}
}

func (x *DefaultDnsServerResponse) GetDefaultDnsServer() []string {
	if x != nil {
		return x.DefaultDnsServer
	}
	return nil
}

type HTTPFlowBareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	BareType string `protobuf:"bytes,2,opt,name=BareType,proto3" json:"BareType,omitempty"`
}

func (x *HTTPFlowBareRequest) Reset() {
	*x = HTTPFlowBareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowBareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowBareRequest) ProtoMessage() {}

func (x *HTTPFlowBareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowBareRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowBareRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{522}
}

func (x *HTTPFlowBareRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HTTPFlowBareRequest) GetBareType() string {
	if x != nil {
		return x.BareType
	}
	return ""
}

type HTTPFlowBareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *HTTPFlowBareResponse) Reset() {
	*x = HTTPFlowBareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowBareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowBareResponse) ProtoMessage() {}

func (x *HTTPFlowBareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowBareResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowBareResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{523}
}

func (x *HTTPFlowBareResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HTTPFlowBareResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImportHTTPFuzzerTaskFromYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YamlContent string `protobuf:"bytes,1,opt,name=YamlContent,proto3" json:"YamlContent,omitempty"`
}

func (x *ImportHTTPFuzzerTaskFromYamlRequest) Reset() {
	*x = ImportHTTPFuzzerTaskFromYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportHTTPFuzzerTaskFromYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportHTTPFuzzerTaskFromYamlRequest) ProtoMessage() {}

func (x *ImportHTTPFuzzerTaskFromYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportHTTPFuzzerTaskFromYamlRequest.ProtoReflect.Descriptor instead.
func (*ImportHTTPFuzzerTaskFromYamlRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{524}
}

func (x *ImportHTTPFuzzerTaskFromYamlRequest) GetYamlContent() string {
	if x != nil {
		return x.YamlContent
	}
	return ""
}

type ImportHTTPFuzzerTaskFromYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GeneralResponse `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Requests *FuzzerRequests  `protobuf:"bytes,2,opt,name=Requests,proto3" json:"Requests,omitempty"`
}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) Reset() {
	*x = ImportHTTPFuzzerTaskFromYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportHTTPFuzzerTaskFromYamlResponse) ProtoMessage() {}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportHTTPFuzzerTaskFromYamlResponse.ProtoReflect.Descriptor instead.
func (*ImportHTTPFuzzerTaskFromYamlResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{525}
}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) GetStatus() *GeneralResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImportHTTPFuzzerTaskFromYamlResponse) GetRequests() *FuzzerRequests {
	if x != nil {
		return x.Requests
	}
	return nil
}

type ExportHTTPFuzzerTaskToYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests     *FuzzerRequests `protobuf:"bytes,1,opt,name=Requests,proto3" json:"Requests,omitempty"`
	TemplateType string          `protobuf:"bytes,2,opt,name=TemplateType,proto3" json:"TemplateType,omitempty"`
}

func (x *ExportHTTPFuzzerTaskToYamlRequest) Reset() {
	*x = ExportHTTPFuzzerTaskToYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportHTTPFuzzerTaskToYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHTTPFuzzerTaskToYamlRequest) ProtoMessage() {}

func (x *ExportHTTPFuzzerTaskToYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHTTPFuzzerTaskToYamlRequest.ProtoReflect.Descriptor instead.
func (*ExportHTTPFuzzerTaskToYamlRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{526}
}

func (x *ExportHTTPFuzzerTaskToYamlRequest) GetRequests() *FuzzerRequests {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ExportHTTPFuzzerTaskToYamlRequest) GetTemplateType() string {
	if x != nil {
		return x.TemplateType
	}
	return ""
}

type ExportHTTPFuzzerTaskToYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *GeneralResponse `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	YamlContent string           `protobuf:"bytes,2,opt,name=YamlContent,proto3" json:"YamlContent,omitempty"`
}

func (x *ExportHTTPFuzzerTaskToYamlResponse) Reset() {
	*x = ExportHTTPFuzzerTaskToYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportHTTPFuzzerTaskToYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHTTPFuzzerTaskToYamlResponse) ProtoMessage() {}

func (x *ExportHTTPFuzzerTaskToYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHTTPFuzzerTaskToYamlResponse.ProtoReflect.Descriptor instead.
func (*ExportHTTPFuzzerTaskToYamlResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{527}
}

func (x *ExportHTTPFuzzerTaskToYamlResponse) GetStatus() *GeneralResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ExportHTTPFuzzerTaskToYamlResponse) GetYamlContent() string {
	if x != nil {
		return x.YamlContent
	}
	return ""
}

type RenderHTTPFuzzerPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet []byte `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
}

func (x *RenderHTTPFuzzerPacketRequest) Reset() {
	*x = RenderHTTPFuzzerPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderHTTPFuzzerPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderHTTPFuzzerPacketRequest) ProtoMessage() {}

func (x *RenderHTTPFuzzerPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderHTTPFuzzerPacketRequest.ProtoReflect.Descriptor instead.
func (*RenderHTTPFuzzerPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{528}
}

func (x *RenderHTTPFuzzerPacketRequest) GetPacket() []byte {
	if x != nil {
		return x.Packet
	}
	return nil
}

type RenderHTTPFuzzerPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet []byte `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
}

func (x *RenderHTTPFuzzerPacketResponse) Reset() {
	*x = RenderHTTPFuzzerPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderHTTPFuzzerPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderHTTPFuzzerPacketResponse) ProtoMessage() {}

func (x *RenderHTTPFuzzerPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderHTTPFuzzerPacketResponse.ProtoReflect.Descriptor instead.
func (*RenderHTTPFuzzerPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{529}
}

func (x *RenderHTTPFuzzerPacketResponse) GetPacket() []byte {
	if x != nil {
		return x.Packet
	}
	return nil
}

type SmokingEvaluatePluginBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptNames []string `protobuf:"bytes,1,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
}

func (x *SmokingEvaluatePluginBatchRequest) Reset() {
	*x = SmokingEvaluatePluginBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmokingEvaluatePluginBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginBatchRequest) ProtoMessage() {}

func (x *SmokingEvaluatePluginBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginBatchRequest.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginBatchRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{530}
}

func (x *SmokingEvaluatePluginBatchRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

type SmokingEvaluatePluginBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress    float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Message     string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MessageType string  `protobuf:"bytes,3,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
}

func (x *SmokingEvaluatePluginBatchResponse) Reset() {
	*x = SmokingEvaluatePluginBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmokingEvaluatePluginBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginBatchResponse) ProtoMessage() {}

func (x *SmokingEvaluatePluginBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginBatchResponse.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginBatchResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{531}
}

func (x *SmokingEvaluatePluginBatchResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SmokingEvaluatePluginBatchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SmokingEvaluatePluginBatchResponse) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type GenerateURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme   string `protobuf:"bytes,1,opt,name=Scheme,proto3" json:"Scheme,omitempty"`
	Host     string `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	Port     int32  `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Username string `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *GenerateURLRequest) Reset() {
	*x = GenerateURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateURLRequest) ProtoMessage() {}

func (x *GenerateURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateURLRequest.ProtoReflect.Descriptor instead.
func (*GenerateURLRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{532}
}

func (x *GenerateURLRequest) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *GenerateURLRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GenerateURLRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GenerateURLRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GenerateURLRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GenerateURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *GenerateURLResponse) Reset() {
	*x = GenerateURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateURLResponse) ProtoMessage() {}

func (x *GenerateURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateURLResponse.ProtoReflect.Descriptor instead.
func (*GenerateURLResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{533}
}

func (x *GenerateURLResponse) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type YakVersionAtLeastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AtLeastVersion string `protobuf:"bytes,1,opt,name=AtLeastVersion,proto3" json:"AtLeastVersion,omitempty"`
	YakVersion     string `protobuf:"bytes,2,opt,name=YakVersion,proto3" json:"YakVersion,omitempty"`
}

func (x *YakVersionAtLeastRequest) Reset() {
	*x = YakVersionAtLeastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakVersionAtLeastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakVersionAtLeastRequest) ProtoMessage() {}

func (x *YakVersionAtLeastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakVersionAtLeastRequest.ProtoReflect.Descriptor instead.
func (*YakVersionAtLeastRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{534}
}

func (x *YakVersionAtLeastRequest) GetAtLeastVersion() string {
	if x != nil {
		return x.AtLeastVersion
	}
	return ""
}

func (x *YakVersionAtLeastRequest) GetYakVersion() string {
	if x != nil {
		return x.YakVersion
	}
	return ""
}

type ParseTrafficRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *ParseTrafficRequest) Reset() {
	*x = ParseTrafficRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTrafficRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTrafficRequest) ProtoMessage() {}

func (x *ParseTrafficRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTrafficRequest.ProtoReflect.Descriptor instead.
func (*ParseTrafficRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{535}
}

func (x *ParseTrafficRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ParseTrafficRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ParseTrafficResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OK      bool   `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Result  string `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ParseTrafficResponse) Reset() {
	*x = ParseTrafficResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTrafficResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTrafficResponse) ProtoMessage() {}

func (x *ParseTrafficResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTrafficResponse.ProtoReflect.Descriptor instead.
func (*ParseTrafficResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{536}
}

func (x *ParseTrafficResponse) GetOK() bool {
	if x != nil {
		return x.OK
	}
	return false
}

func (x *ParseTrafficResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ParseTrafficResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TraceRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
}

func (x *TraceRouteRequest) Reset() {
	*x = TraceRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRouteRequest) ProtoMessage() {}

func (x *TraceRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRouteRequest.ProtoReflect.Descriptor instead.
func (*TraceRouteRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{537}
}

func (x *TraceRouteRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type TraceRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string `protobuf:"bytes,1,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Rtt    int64  `protobuf:"varint,2,opt,name=Rtt,proto3" json:"Rtt,omitempty"`
	Reason string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Hop    int64  `protobuf:"varint,4,opt,name=Hop,proto3" json:"Hop,omitempty"`
}

func (x *TraceRouteResponse) Reset() {
	*x = TraceRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRouteResponse) ProtoMessage() {}

func (x *TraceRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRouteResponse.ProtoReflect.Descriptor instead.
func (*TraceRouteResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{538}
}

func (x *TraceRouteResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TraceRouteResponse) GetRtt() int64 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *TraceRouteResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TraceRouteResponse) GetHop() int64 {
	if x != nil {
		return x.Hop
	}
	return 0
}

type EvaluateExpressionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression        string    `protobuf:"bytes,1,opt,name=Expression,proto3" json:"Expression,omitempty"`
	Variables         []*KVPair `protobuf:"bytes,2,rep,name=Variables,proto3" json:"Variables,omitempty"`
	ImportYaklangLibs bool      `protobuf:"varint,3,opt,name=ImportYaklangLibs,proto3" json:"ImportYaklangLibs,omitempty"`
}

func (x *EvaluateExpressionRequest) Reset() {
	*x = EvaluateExpressionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateExpressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateExpressionRequest) ProtoMessage() {}

func (x *EvaluateExpressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateExpressionRequest.ProtoReflect.Descriptor instead.
func (*EvaluateExpressionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{539}
}

func (x *EvaluateExpressionRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *EvaluateExpressionRequest) GetVariables() []*KVPair {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *EvaluateExpressionRequest) GetImportYaklangLibs() bool {
	if x != nil {
		return x.ImportYaklangLibs
	}
	return false
}

type EvaluateExpressionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     string `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"` // json marshal
	BoolResult bool   `protobuf:"varint,2,opt,name=BoolResult,proto3" json:"BoolResult,omitempty"`
}

func (x *EvaluateExpressionResponse) Reset() {
	*x = EvaluateExpressionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateExpressionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateExpressionResponse) ProtoMessage() {}

func (x *EvaluateExpressionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateExpressionResponse.ProtoReflect.Descriptor instead.
func (*EvaluateExpressionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{540}
}

func (x *EvaluateExpressionResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *EvaluateExpressionResponse) GetBoolResult() bool {
	if x != nil {
		return x.BoolResult
	}
	return false
}

type EvaluateMultiExpressionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions       []string  `protobuf:"bytes,1,rep,name=Expressions,proto3" json:"Expressions,omitempty"`
	Variables         []*KVPair `protobuf:"bytes,2,rep,name=Variables,proto3" json:"Variables,omitempty"`
	ImportYaklangLibs bool      `protobuf:"varint,3,opt,name=ImportYaklangLibs,proto3" json:"ImportYaklangLibs,omitempty"`
}

func (x *EvaluateMultiExpressionRequest) Reset() {
	*x = EvaluateMultiExpressionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateMultiExpressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateMultiExpressionRequest) ProtoMessage() {}

func (x *EvaluateMultiExpressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateMultiExpressionRequest.ProtoReflect.Descriptor instead.
func (*EvaluateMultiExpressionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{541}
}

func (x *EvaluateMultiExpressionRequest) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *EvaluateMultiExpressionRequest) GetVariables() []*KVPair {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *EvaluateMultiExpressionRequest) GetImportYaklangLibs() bool {
	if x != nil {
		return x.ImportYaklangLibs
	}
	return false
}

type EvaluateMultiExpressionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*EvaluateExpressionResponse `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *EvaluateMultiExpressionResponse) Reset() {
	*x = EvaluateMultiExpressionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateMultiExpressionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateMultiExpressionResponse) ProtoMessage() {}

func (x *EvaluateMultiExpressionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateMultiExpressionResponse.ProtoReflect.Descriptor instead.
func (*EvaluateMultiExpressionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{542}
}

func (x *EvaluateMultiExpressionResponse) GetResults() []*EvaluateExpressionResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

type ThirdPartyAppConfigItemTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Required     bool   `protobuf:"varint,2,opt,name=Required,proto3" json:"Required,omitempty"`
	Name         string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Verbose      string `protobuf:"bytes,7,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Type         string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	DefaultValue string `protobuf:"bytes,4,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	Desc         string `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Extra        string `protobuf:"bytes,6,opt,name=Extra,proto3" json:"Extra,omitempty"`
}

func (x *ThirdPartyAppConfigItemTemplate) Reset() {
	*x = ThirdPartyAppConfigItemTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdPartyAppConfigItemTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyAppConfigItemTemplate) ProtoMessage() {}

func (x *ThirdPartyAppConfigItemTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyAppConfigItemTemplate.ProtoReflect.Descriptor instead.
func (*ThirdPartyAppConfigItemTemplate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{543}
}

func (x *ThirdPartyAppConfigItemTemplate) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ThirdPartyAppConfigItemTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ThirdPartyAppConfigItemTemplate) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type GetThirdPartyAppConfigTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                             `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Verbose string                             `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Type    string                             `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Items   []*ThirdPartyAppConfigItemTemplate `protobuf:"bytes,3,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (x *GetThirdPartyAppConfigTemplate) Reset() {
	*x = GetThirdPartyAppConfigTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThirdPartyAppConfigTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThirdPartyAppConfigTemplate) ProtoMessage() {}

func (x *GetThirdPartyAppConfigTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThirdPartyAppConfigTemplate.ProtoReflect.Descriptor instead.
func (*GetThirdPartyAppConfigTemplate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{544}
}

func (x *GetThirdPartyAppConfigTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetThirdPartyAppConfigTemplate) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *GetThirdPartyAppConfigTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetThirdPartyAppConfigTemplate) GetItems() []*ThirdPartyAppConfigItemTemplate {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetThirdPartyAppConfigTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Templates []*GetThirdPartyAppConfigTemplate `protobuf:"bytes,2,rep,name=Templates,proto3" json:"Templates,omitempty"`
}

func (x *GetThirdPartyAppConfigTemplateResponse) Reset() {
	*x = GetThirdPartyAppConfigTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThirdPartyAppConfigTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThirdPartyAppConfigTemplateResponse) ProtoMessage() {}

func (x *GetThirdPartyAppConfigTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThirdPartyAppConfigTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetThirdPartyAppConfigTemplateResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{545}
}

func (x *GetThirdPartyAppConfigTemplateResponse) GetTemplates() []*GetThirdPartyAppConfigTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

type GetFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFingerprintRequest) Reset() {
	*x = GetFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFingerprintRequest) ProtoMessage() {}

func (x *GetFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFingerprintRequest.ProtoReflect.Descriptor instead.
func (*GetFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{546}
}

type GetFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFingerprintResponse) Reset() {
	*x = GetFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFingerprintResponse) ProtoMessage() {}

func (x *GetFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFingerprintResponse.ProtoReflect.Descriptor instead.
func (*GetFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{547}
}

type AddFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Fingerprint string `protobuf:"bytes,2,opt,name=Fingerprint,proto3" json:"Fingerprint,omitempty"`
}

func (x *AddFingerprintRequest) Reset() {
	*x = AddFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFingerprintRequest) ProtoMessage() {}

func (x *AddFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFingerprintRequest.ProtoReflect.Descriptor instead.
func (*AddFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{548}
}

func (x *AddFingerprintRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddFingerprintRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type AddFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFingerprintResponse) Reset() {
	*x = AddFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFingerprintResponse) ProtoMessage() {}

func (x *AddFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFingerprintResponse.ProtoReflect.Descriptor instead.
func (*AddFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{549}
}

type ModifyFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModifyFingerprintRequest) Reset() {
	*x = ModifyFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyFingerprintRequest) ProtoMessage() {}

func (x *ModifyFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyFingerprintRequest.ProtoReflect.Descriptor instead.
func (*ModifyFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{550}
}

type ModifyFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModifyFingerprintResponse) Reset() {
	*x = ModifyFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyFingerprintResponse) ProtoMessage() {}

func (x *ModifyFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyFingerprintResponse.ProtoReflect.Descriptor instead.
func (*ModifyFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{551}
}

type ReadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath   string `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	BufSize    int64  `protobuf:"varint,2,opt,name=BufSize,proto3" json:"BufSize,omitempty"`
	FileSystem string `protobuf:"bytes,3,opt,name=FileSystem,proto3" json:"FileSystem,omitempty"` // "local" "ssadb"
}

func (x *ReadFileRequest) Reset() {
	*x = ReadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileRequest) ProtoMessage() {}

func (x *ReadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileRequest.ProtoReflect.Descriptor instead.
func (*ReadFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{552}
}

func (x *ReadFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ReadFileRequest) GetBufSize() int64 {
	if x != nil {
		return x.BufSize
	}
	return 0
}

func (x *ReadFileRequest) GetFileSystem() string {
	if x != nil {
		return x.FileSystem
	}
	return ""
}

type ReadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	EOF  bool   `protobuf:"varint,2,opt,name=EOF,proto3" json:"EOF,omitempty"`
}

func (x *ReadFileResponse) Reset() {
	*x = ReadFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileResponse) ProtoMessage() {}

func (x *ReadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileResponse.ProtoReflect.Descriptor instead.
func (*ReadFileResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{553}
}

func (x *ReadFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReadFileResponse) GetEOF() bool {
	if x != nil {
		return x.EOF
	}
	return false
}

type GetReverseShellProgramListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System  string `protobuf:"bytes,1,opt,name=System,proto3" json:"System,omitempty"`
	CmdType string `protobuf:"bytes,2,opt,name=CmdType,proto3" json:"CmdType,omitempty"`
}

func (x *GetReverseShellProgramListRequest) Reset() {
	*x = GetReverseShellProgramListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReverseShellProgramListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReverseShellProgramListRequest) ProtoMessage() {}

func (x *GetReverseShellProgramListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReverseShellProgramListRequest.ProtoReflect.Descriptor instead.
func (*GetReverseShellProgramListRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{554}
}

func (x *GetReverseShellProgramListRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *GetReverseShellProgramListRequest) GetCmdType() string {
	if x != nil {
		return x.CmdType
	}
	return ""
}

type GetReverseShellProgramListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramList []string `protobuf:"bytes,1,rep,name=ProgramList,proto3" json:"ProgramList,omitempty"`
	ShellList   []string `protobuf:"bytes,2,rep,name=ShellList,proto3" json:"ShellList,omitempty"`
}

func (x *GetReverseShellProgramListResponse) Reset() {
	*x = GetReverseShellProgramListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReverseShellProgramListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReverseShellProgramListResponse) ProtoMessage() {}

func (x *GetReverseShellProgramListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReverseShellProgramListResponse.ProtoReflect.Descriptor instead.
func (*GetReverseShellProgramListResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{555}
}

func (x *GetReverseShellProgramListResponse) GetProgramList() []string {
	if x != nil {
		return x.ProgramList
	}
	return nil
}

func (x *GetReverseShellProgramListResponse) GetShellList() []string {
	if x != nil {
		return x.ShellList
	}
	return nil
}

type GenerateReverseShellCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System    string `protobuf:"bytes,1,opt,name=System,proto3" json:"System,omitempty"`
	CmdType   string `protobuf:"bytes,2,opt,name=CmdType,proto3" json:"CmdType,omitempty"`
	ShellType string `protobuf:"bytes,4,opt,name=ShellType,proto3" json:"ShellType,omitempty"`
	Encode    string `protobuf:"bytes,5,opt,name=Encode,proto3" json:"Encode,omitempty"`
	Program   string `protobuf:"bytes,6,opt,name=Program,proto3" json:"Program,omitempty"`
	IP        string `protobuf:"bytes,7,opt,name=IP,proto3" json:"IP,omitempty"`
	Port      int32  `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *GenerateReverseShellCommandRequest) Reset() {
	*x = GenerateReverseShellCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateReverseShellCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReverseShellCommandRequest) ProtoMessage() {}

func (x *GenerateReverseShellCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReverseShellCommandRequest.ProtoReflect.Descriptor instead.
func (*GenerateReverseShellCommandRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{556}
}

func (x *GenerateReverseShellCommandRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetCmdType() string {
	if x != nil {
		return x.CmdType
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetShellType() string {
	if x != nil {
		return x.ShellType
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetEncode() string {
	if x != nil {
		return x.Encode
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *GenerateReverseShellCommandRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type GenerateReverseShellCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GeneralResponse `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Result string           `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *GenerateReverseShellCommandResponse) Reset() {
	*x = GenerateReverseShellCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateReverseShellCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReverseShellCommandResponse) ProtoMessage() {}

func (x *GenerateReverseShellCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReverseShellCommandResponse.ProtoReflect.Descriptor instead.
func (*GenerateReverseShellCommandResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{557}
}

func (x *GenerateReverseShellCommandResponse) GetStatus() *GeneralResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GenerateReverseShellCommandResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type DbOperateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName    string `protobuf:"bytes,1,opt,name=TableName,proto3" json:"TableName,omitempty"`       // 表名 数据源
	Operation    string `protobuf:"bytes,2,opt,name=Operation,proto3" json:"Operation,omitempty"`       // 操作 (增删改查)
	EffectRows   int64  `protobuf:"varint,3,opt,name=EffectRows,proto3" json:"EffectRows,omitempty"`    // 影响行数
	ExtraMessage string `protobuf:"bytes,4,opt,name=ExtraMessage,proto3" json:"ExtraMessage,omitempty"` // 额外信息
}

func (x *DbOperateMessage) Reset() {
	*x = DbOperateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbOperateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbOperateMessage) ProtoMessage() {}

func (x *DbOperateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbOperateMessage.ProtoReflect.Descriptor instead.
func (*DbOperateMessage) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{558}
}

func (x *DbOperateMessage) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DbOperateMessage) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *DbOperateMessage) GetEffectRows() int64 {
	if x != nil {
		return x.EffectRows
	}
	return 0
}

func (x *DbOperateMessage) GetExtraMessage() string {
	if x != nil {
		return x.ExtraMessage
	}
	return ""
}

type CPE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Part     string `protobuf:"bytes,1,opt,name=Part,proto3" json:"Part,omitempty"`
	Vendor   string `protobuf:"bytes,2,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
	Product  string `protobuf:"bytes,3,opt,name=Product,proto3" json:"Product,omitempty"`
	Version  string `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
	Update   string `protobuf:"bytes,5,opt,name=Update,proto3" json:"Update,omitempty"`
	Edition  string `protobuf:"bytes,6,opt,name=Edition,proto3" json:"Edition,omitempty"`
	Language string `protobuf:"bytes,7,opt,name=Language,proto3" json:"Language,omitempty"`
}

func (x *CPE) Reset() {
	*x = CPE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPE) ProtoMessage() {}

func (x *CPE) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPE.ProtoReflect.Descriptor instead.
func (*CPE) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{559}
}

func (x *CPE) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *CPE) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CPE) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CPE) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CPE) GetUpdate() string {
	if x != nil {
		return x.Update
	}
	return ""
}

func (x *CPE) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *CPE) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type FingerprintRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RuleName        string `protobuf:"bytes,2,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	CPE             *CPE   `protobuf:"bytes,3,opt,name=CPE,proto3" json:"CPE,omitempty"`
	WebPath         string `protobuf:"bytes,4,opt,name=WebPath,proto3" json:"WebPath,omitempty"`
	ExtInfo         string `protobuf:"bytes,5,opt,name=ExtInfo,proto3" json:"ExtInfo,omitempty"`
	MatchExpression string `protobuf:"bytes,6,opt,name=MatchExpression,proto3" json:"MatchExpression,omitempty"`
}

func (x *FingerprintRule) Reset() {
	*x = FingerprintRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FingerprintRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintRule) ProtoMessage() {}

func (x *FingerprintRule) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintRule.ProtoReflect.Descriptor instead.
func (*FingerprintRule) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{560}
}

func (x *FingerprintRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FingerprintRule) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *FingerprintRule) GetCPE() *CPE {
	if x != nil {
		return x.CPE
	}
	return nil
}

func (x *FingerprintRule) GetWebPath() string {
	if x != nil {
		return x.WebPath
	}
	return ""
}

func (x *FingerprintRule) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *FingerprintRule) GetMatchExpression() string {
	if x != nil {
		return x.MatchExpression
	}
	return ""
}

type FingerprintFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor    []string `protobuf:"bytes,1,rep,name=Vendor,proto3" json:"Vendor,omitempty"`
	Product   []string `protobuf:"bytes,2,rep,name=Product,proto3" json:"Product,omitempty"`
	IncludeId []int64  `protobuf:"varint,3,rep,packed,name=IncludeId,proto3" json:"IncludeId,omitempty"`
}

func (x *FingerprintFilter) Reset() {
	*x = FingerprintFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FingerprintFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintFilter) ProtoMessage() {}

func (x *FingerprintFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintFilter.ProtoReflect.Descriptor instead.
func (*FingerprintFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{561}
}

func (x *FingerprintFilter) GetVendor() []string {
	if x != nil {
		return x.Vendor
	}
	return nil
}

func (x *FingerprintFilter) GetProduct() []string {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *FingerprintFilter) GetIncludeId() []int64 {
	if x != nil {
		return x.IncludeId
	}
	return nil
}

type QueryFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter     *FingerprintFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Pagination *Paging            `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryFingerprintRequest) Reset() {
	*x = QueryFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFingerprintRequest) ProtoMessage() {}

func (x *QueryFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFingerprintRequest.ProtoReflect.Descriptor instead.
func (*QueryFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{562}
}

func (x *QueryFingerprintRequest) GetFilter() *FingerprintFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryFingerprintRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging            `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*FingerprintRule `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64              `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryFingerprintResponse) Reset() {
	*x = QueryFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFingerprintResponse) ProtoMessage() {}

func (x *QueryFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFingerprintResponse.ProtoReflect.Descriptor instead.
func (*QueryFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{563}
}

func (x *QueryFingerprintResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryFingerprintResponse) GetData() []*FingerprintRule {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryFingerprintResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *FingerprintFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *DeleteFingerprintRequest) Reset() {
	*x = DeleteFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFingerprintRequest) ProtoMessage() {}

func (x *DeleteFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFingerprintRequest.ProtoReflect.Descriptor instead.
func (*DeleteFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{564}
}

func (x *DeleteFingerprintRequest) GetFilter() *FingerprintFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CreateFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *FingerprintRule `protobuf:"bytes,1,opt,name=Rule,proto3" json:"Rule,omitempty"`
}

func (x *CreateFingerprintRequest) Reset() {
	*x = CreateFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFingerprintRequest) ProtoMessage() {}

func (x *CreateFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFingerprintRequest.ProtoReflect.Descriptor instead.
func (*CreateFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{565}
}

func (x *CreateFingerprintRequest) GetRule() *FingerprintRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type UpdateFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RuleName string           `protobuf:"bytes,2,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Rule     *FingerprintRule `protobuf:"bytes,3,opt,name=Rule,proto3" json:"Rule,omitempty"`
}

func (x *UpdateFingerprintRequest) Reset() {
	*x = UpdateFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFingerprintRequest) ProtoMessage() {}

func (x *UpdateFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFingerprintRequest.ProtoReflect.Descriptor instead.
func (*UpdateFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{566}
}

func (x *UpdateFingerprintRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateFingerprintRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *UpdateFingerprintRequest) GetRule() *FingerprintRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type QuerySyntaxFlowRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging               `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter     *SyntaxFlowRuleFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QuerySyntaxFlowRuleRequest) Reset() {
	*x = QuerySyntaxFlowRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySyntaxFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowRuleRequest) ProtoMessage() {}

func (x *QuerySyntaxFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{567}
}

func (x *QuerySyntaxFlowRuleRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowRuleRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SyntaxFlowRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64    `protobuf:"varint,18,opt,name=Id,proto3" json:"Id,omitempty"`
	RuleName      string   `protobuf:"bytes,1,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Content       string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Language      string   `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"`
	Type          string   `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Severity      string   `protobuf:"bytes,5,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Purpose       string   `protobuf:"bytes,6,opt,name=Purpose,proto3" json:"Purpose,omitempty"`
	IsBuildInRule bool     `protobuf:"varint,7,opt,name=IsBuildInRule,proto3" json:"IsBuildInRule,omitempty"`
	Title         string   `protobuf:"bytes,8,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleZh       string   `protobuf:"bytes,9,opt,name=TitleZh,proto3" json:"TitleZh,omitempty"`
	Description   string   `protobuf:"bytes,10,opt,name=Description,proto3" json:"Description,omitempty"`
	Verified      bool     `protobuf:"varint,11,opt,name=Verified,proto3" json:"Verified,omitempty"`
	AllowIncluded bool     `protobuf:"varint,12,opt,name=AllowIncluded,proto3" json:"AllowIncluded,omitempty"`
	IncludedName  string   `protobuf:"bytes,13,opt,name=IncludedName,proto3" json:"IncludedName,omitempty"`
	Tag           string   `protobuf:"bytes,14,opt,name=Tag,proto3" json:"Tag,omitempty"`
	AlertDesc     string   `protobuf:"bytes,15,opt,name=AlertDesc,proto3" json:"AlertDesc,omitempty"`
	Hash          string   `protobuf:"bytes,16,opt,name=Hash,proto3" json:"Hash,omitempty"`
	GroupName     []string `protobuf:"bytes,17,rep,name=GroupName,proto3" json:"GroupName,omitempty"`
}

func (x *SyntaxFlowRule) Reset() {
	*x = SyntaxFlowRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRule) ProtoMessage() {}

func (x *SyntaxFlowRule) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRule.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRule) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{568}
}

func (x *SyntaxFlowRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SyntaxFlowRule) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SyntaxFlowRule) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SyntaxFlowRule) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SyntaxFlowRule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SyntaxFlowRule) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SyntaxFlowRule) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *SyntaxFlowRule) GetIsBuildInRule() bool {
	if x != nil {
		return x.IsBuildInRule
	}
	return false
}

func (x *SyntaxFlowRule) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SyntaxFlowRule) GetTitleZh() string {
	if x != nil {
		return x.TitleZh
	}
	return ""
}

func (x *SyntaxFlowRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SyntaxFlowRule) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *SyntaxFlowRule) GetAllowIncluded() bool {
	if x != nil {
		return x.AllowIncluded
	}
	return false
}

func (x *SyntaxFlowRule) GetIncludedName() string {
	if x != nil {
		return x.IncludedName
	}
	return ""
}

func (x *SyntaxFlowRule) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SyntaxFlowRule) GetAlertDesc() string {
	if x != nil {
		return x.AlertDesc
	}
	return ""
}

func (x *SyntaxFlowRule) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SyntaxFlowRule) GetGroupName() []string {
	if x != nil {
		return x.GroupName
	}
	return nil
}

type SyntaxFlowRuleInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleName string   `protobuf:"bytes,1,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Content  string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Language string   `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"`
	Tags     []string `protobuf:"bytes,4,rep,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *SyntaxFlowRuleInput) Reset() {
	*x = SyntaxFlowRuleInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowRuleInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRuleInput) ProtoMessage() {}

func (x *SyntaxFlowRuleInput) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRuleInput.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRuleInput) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{569}
}

func (x *SyntaxFlowRuleInput) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SyntaxFlowRuleInput) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SyntaxFlowRuleInput) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SyntaxFlowRuleInput) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SyntaxFlowRuleFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleNames  []string `protobuf:"bytes,1,rep,name=RuleNames,proto3" json:"RuleNames,omitempty"`
	Language   []string `protobuf:"bytes,2,rep,name=Language,proto3" json:"Language,omitempty"`
	GroupNames []string `protobuf:"bytes,3,rep,name=GroupNames,proto3" json:"GroupNames,omitempty"`
	Severity   []string `protobuf:"bytes,4,rep,name=Severity,proto3" json:"Severity,omitempty"`
	Purpose    []string `protobuf:"bytes,5,rep,name=Purpose,proto3" json:"Purpose,omitempty"`
	Tag        []string `protobuf:"bytes,6,rep,name=Tag,proto3" json:"Tag,omitempty"`
	Keyword    string   `protobuf:"bytes,7,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	// 是否包含作为库的规则  这些规则只提供相关数据并被其他规则引用 默认不包含
	IncludeLibraryRule bool `protobuf:"varint,8,opt,name=includeLibraryRule,proto3" json:"includeLibraryRule,omitempty"` // default false
	// for infinite list
	FromId  int64 `protobuf:"varint,9,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId int64 `protobuf:"varint,10,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
}

func (x *SyntaxFlowRuleFilter) Reset() {
	*x = SyntaxFlowRuleFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowRuleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRuleFilter) ProtoMessage() {}

func (x *SyntaxFlowRuleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRuleFilter.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRuleFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{570}
}

func (x *SyntaxFlowRuleFilter) GetRuleNames() []string {
	if x != nil {
		return x.RuleNames
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetLanguage() []string {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetPurpose() []string {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *SyntaxFlowRuleFilter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SyntaxFlowRuleFilter) GetIncludeLibraryRule() bool {
	if x != nil {
		return x.IncludeLibraryRule
	}
	return false
}

func (x *SyntaxFlowRuleFilter) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SyntaxFlowRuleFilter) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

type SSAProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// basic info
	CreateAt      int64  `protobuf:"varint,1,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt      int64  `protobuf:"varint,2,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Dbpath        string `protobuf:"bytes,5,opt,name=Dbpath,proto3" json:"Dbpath,omitempty"`
	Language      string `protobuf:"bytes,6,opt,name=Language,proto3" json:"Language,omitempty"`
	EngineVersion string `protobuf:"bytes,7,opt,name=EngineVersion,proto3" json:"EngineVersion,omitempty"`
	// need re-compile
	Recompile bool `protobuf:"varint,8,opt,name=Recompile,proto3" json:"Recompile,omitempty"`
	// risk number
	HighRiskNumber     int64  `protobuf:"varint,9,opt,name=HighRiskNumber,proto3" json:"HighRiskNumber,omitempty"`
	CriticalRiskNumber int64  `protobuf:"varint,10,opt,name=CriticalRiskNumber,proto3" json:"CriticalRiskNumber,omitempty"`
	WarnRiskNumber     int64  `protobuf:"varint,11,opt,name=WarnRiskNumber,proto3" json:"WarnRiskNumber,omitempty"`
	LowRiskNumber      int64  `protobuf:"varint,12,opt,name=LowRiskNumber,proto3" json:"LowRiskNumber,omitempty"`
	Id                 uint32 `protobuf:"varint,13,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *SSAProgram) Reset() {
	*x = SSAProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSAProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProgram) ProtoMessage() {}

func (x *SSAProgram) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProgram.ProtoReflect.Descriptor instead.
func (*SSAProgram) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{571}
}

func (x *SSAProgram) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SSAProgram) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *SSAProgram) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SSAProgram) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SSAProgram) GetDbpath() string {
	if x != nil {
		return x.Dbpath
	}
	return ""
}

func (x *SSAProgram) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SSAProgram) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

func (x *SSAProgram) GetRecompile() bool {
	if x != nil {
		return x.Recompile
	}
	return false
}

func (x *SSAProgram) GetHighRiskNumber() int64 {
	if x != nil {
		return x.HighRiskNumber
	}
	return 0
}

func (x *SSAProgram) GetCriticalRiskNumber() int64 {
	if x != nil {
		return x.CriticalRiskNumber
	}
	return 0
}

func (x *SSAProgram) GetWarnRiskNumber() int64 {
	if x != nil {
		return x.WarnRiskNumber
	}
	return 0
}

func (x *SSAProgram) GetLowRiskNumber() int64 {
	if x != nil {
		return x.LowRiskNumber
	}
	return 0
}

func (x *SSAProgram) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SSAProgramInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"` // index
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *SSAProgramInput) Reset() {
	*x = SSAProgramInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSAProgramInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProgramInput) ProtoMessage() {}

func (x *SSAProgramInput) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProgramInput.ProtoReflect.Descriptor instead.
func (*SSAProgramInput) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{572}
}

func (x *SSAProgramInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SSAProgramInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SSAProgramFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramNames []string `protobuf:"bytes,1,rep,name=ProgramNames,proto3" json:"ProgramNames,omitempty"`
	Languages    []string `protobuf:"bytes,2,rep,name=Languages,proto3" json:"Languages,omitempty"`
	Ids          []int64  `protobuf:"varint,3,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	// update range
	BeforeUpdatedAt int64 `protobuf:"varint,5,opt,name=BeforeUpdatedAt,proto3" json:"BeforeUpdatedAt,omitempty"`
	AfterUpdatedAt  int64 `protobuf:"varint,6,opt,name=AfterUpdatedAt,proto3" json:"AfterUpdatedAt,omitempty"`
	// fuzz search
	Keyword string `protobuf:"bytes,7,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	// id range
	AfterID  int64 `protobuf:"varint,8,opt,name=AfterID,proto3" json:"AfterID,omitempty"`
	BeforeID int64 `protobuf:"varint,9,opt,name=BeforeID,proto3" json:"BeforeID,omitempty"`
}

func (x *SSAProgramFilter) Reset() {
	*x = SSAProgramFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSAProgramFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSAProgramFilter) ProtoMessage() {}

func (x *SSAProgramFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSAProgramFilter.ProtoReflect.Descriptor instead.
func (*SSAProgramFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{573}
}

func (x *SSAProgramFilter) GetProgramNames() []string {
	if x != nil {
		return x.ProgramNames
	}
	return nil
}

func (x *SSAProgramFilter) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *SSAProgramFilter) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SSAProgramFilter) GetBeforeUpdatedAt() int64 {
	if x != nil {
		return x.BeforeUpdatedAt
	}
	return 0
}

func (x *SSAProgramFilter) GetAfterUpdatedAt() int64 {
	if x != nil {
		return x.AfterUpdatedAt
	}
	return 0
}

func (x *SSAProgramFilter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SSAProgramFilter) GetAfterID() int64 {
	if x != nil {
		return x.AfterID
	}
	return 0
}

func (x *SSAProgramFilter) GetBeforeID() int64 {
	if x != nil {
		return x.BeforeID
	}
	return 0
}

type QuerySSAProgramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paging     *Paging           `protobuf:"bytes,1,opt,name=Paging,proto3" json:"Paging,omitempty"` // abort
	Pagination *Paging           `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter     *SSAProgramFilter `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QuerySSAProgramRequest) Reset() {
	*x = QuerySSAProgramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySSAProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSAProgramRequest) ProtoMessage() {}

func (x *QuerySSAProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSAProgramRequest.ProtoReflect.Descriptor instead.
func (*QuerySSAProgramRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{574}
}

func (x *QuerySSAProgramRequest) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *QuerySSAProgramRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySSAProgramRequest) GetFilter() *SSAProgramFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UpdateSSAProgramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramInput *SSAProgramInput `protobuf:"bytes,1,opt,name=ProgramInput,proto3" json:"ProgramInput,omitempty"`
}

func (x *UpdateSSAProgramRequest) Reset() {
	*x = UpdateSSAProgramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSSAProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSAProgramRequest) ProtoMessage() {}

func (x *UpdateSSAProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSAProgramRequest.ProtoReflect.Descriptor instead.
func (*UpdateSSAProgramRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{575}
}

func (x *UpdateSSAProgramRequest) GetProgramInput() *SSAProgramInput {
	if x != nil {
		return x.ProgramInput
	}
	return nil
}

type DeleteSSAProgramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll bool              `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Filter    *SSAProgramFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *DeleteSSAProgramRequest) Reset() {
	*x = DeleteSSAProgramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSSAProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSSAProgramRequest) ProtoMessage() {}

func (x *DeleteSSAProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSSAProgramRequest.ProtoReflect.Descriptor instead.
func (*DeleteSSAProgramRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{576}
}

func (x *DeleteSSAProgramRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteSSAProgramRequest) GetFilter() *SSAProgramFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QuerySSAProgramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paging     *Paging       `protobuf:"bytes,1,opt,name=Paging,proto3" json:"Paging,omitempty"` // abort
	Pagination *Paging       `protobuf:"bytes,5,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Programs   []*SSAProgram `protobuf:"bytes,2,rep,name=Programs,proto3" json:"Programs,omitempty"` // abort
	Data       []*SSAProgram `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64         `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QuerySSAProgramResponse) Reset() {
	*x = QuerySSAProgramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySSAProgramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySSAProgramResponse) ProtoMessage() {}

func (x *QuerySSAProgramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySSAProgramResponse.ProtoReflect.Descriptor instead.
func (*QuerySSAProgramResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{577}
}

func (x *QuerySSAProgramResponse) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *QuerySSAProgramResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySSAProgramResponse) GetPrograms() []*SSAProgram {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *QuerySSAProgramResponse) GetData() []*SSAProgram {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QuerySSAProgramResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateSyntaxFlowRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyntaxFlowInput *SyntaxFlowRuleInput `protobuf:"bytes,1,opt,name=SyntaxFlowInput,proto3" json:"SyntaxFlowInput,omitempty"`
}

func (x *CreateSyntaxFlowRuleRequest) Reset() {
	*x = CreateSyntaxFlowRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSyntaxFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyntaxFlowRuleRequest) ProtoMessage() {}

func (x *CreateSyntaxFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyntaxFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateSyntaxFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{578}
}

func (x *CreateSyntaxFlowRuleRequest) GetSyntaxFlowInput() *SyntaxFlowRuleInput {
	if x != nil {
		return x.SyntaxFlowInput
	}
	return nil
}

type UpdateSyntaxFlowRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyntaxFlowInput *SyntaxFlowRuleInput `protobuf:"bytes,1,opt,name=SyntaxFlowInput,proto3" json:"SyntaxFlowInput,omitempty"`
}

func (x *UpdateSyntaxFlowRuleRequest) Reset() {
	*x = UpdateSyntaxFlowRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyntaxFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyntaxFlowRuleRequest) ProtoMessage() {}

func (x *UpdateSyntaxFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyntaxFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyntaxFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{579}
}

func (x *UpdateSyntaxFlowRuleRequest) GetSyntaxFlowInput() *SyntaxFlowRuleInput {
	if x != nil {
		return x.SyntaxFlowInput
	}
	return nil
}

type QuerySyntaxFlowRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging           `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	DbMessage  *DbOperateMessage `protobuf:"bytes,2,opt,name=DbMessage,proto3" json:"DbMessage,omitempty"`
	Rule       []*SyntaxFlowRule `protobuf:"bytes,3,rep,name=Rule,proto3" json:"Rule,omitempty"`
	Total      uint64            `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QuerySyntaxFlowRuleResponse) Reset() {
	*x = QuerySyntaxFlowRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySyntaxFlowRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowRuleResponse) ProtoMessage() {}

func (x *QuerySyntaxFlowRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowRuleResponse.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{580}
}

func (x *QuerySyntaxFlowRuleResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowRuleResponse) GetDbMessage() *DbOperateMessage {
	if x != nil {
		return x.DbMessage
	}
	return nil
}

func (x *QuerySyntaxFlowRuleResponse) GetRule() []*SyntaxFlowRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *QuerySyntaxFlowRuleResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteSyntaxFlowRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *SyntaxFlowRuleFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *DeleteSyntaxFlowRuleRequest) Reset() {
	*x = DeleteSyntaxFlowRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSyntaxFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyntaxFlowRuleRequest) ProtoMessage() {}

func (x *DeleteSyntaxFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyntaxFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyntaxFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{581}
}

func (x *DeleteSyntaxFlowRuleRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SyntaxFlowRuleGroupFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupNames []string `protobuf:"bytes,2,rep,name=GroupNames,proto3" json:"GroupNames,omitempty"`
	// for fuzzing search
	KeyWord string `protobuf:"bytes,1,opt,name=KeyWord,proto3" json:"KeyWord,omitempty"`
}

func (x *SyntaxFlowRuleGroupFilter) Reset() {
	*x = SyntaxFlowRuleGroupFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowRuleGroupFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowRuleGroupFilter) ProtoMessage() {}

func (x *SyntaxFlowRuleGroupFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowRuleGroupFilter.ProtoReflect.Descriptor instead.
func (*SyntaxFlowRuleGroupFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{582}
}

func (x *SyntaxFlowRuleGroupFilter) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *SyntaxFlowRuleGroupFilter) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

type SyntaxFlowGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	Count     int32  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *SyntaxFlowGroup) Reset() {
	*x = SyntaxFlowGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowGroup) ProtoMessage() {}

func (x *SyntaxFlowGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowGroup.ProtoReflect.Descriptor instead.
func (*SyntaxFlowGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{583}
}

func (x *SyntaxFlowGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *SyntaxFlowGroup) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type QuerySyntaxFlowRuleGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *SyntaxFlowRuleGroupFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QuerySyntaxFlowRuleGroupRequest) Reset() {
	*x = QuerySyntaxFlowRuleGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySyntaxFlowRuleGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowRuleGroupRequest) ProtoMessage() {}

func (x *QuerySyntaxFlowRuleGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowRuleGroupRequest.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowRuleGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{584}
}

func (x *QuerySyntaxFlowRuleGroupRequest) GetFilter() *SyntaxFlowRuleGroupFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QuerySyntaxFlowRuleGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group []*SyntaxFlowGroup `protobuf:"bytes,1,rep,name=Group,proto3" json:"Group,omitempty"`
}

func (x *QuerySyntaxFlowRuleGroupResponse) Reset() {
	*x = QuerySyntaxFlowRuleGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySyntaxFlowRuleGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowRuleGroupResponse) ProtoMessage() {}

func (x *QuerySyntaxFlowRuleGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowRuleGroupResponse.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowRuleGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{585}
}

func (x *QuerySyntaxFlowRuleGroupResponse) GetGroup() []*SyntaxFlowGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type CreateSyntaxFlowGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
}

func (x *CreateSyntaxFlowGroupRequest) Reset() {
	*x = CreateSyntaxFlowGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSyntaxFlowGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyntaxFlowGroupRequest) ProtoMessage() {}

func (x *CreateSyntaxFlowGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyntaxFlowGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateSyntaxFlowGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{586}
}

func (x *CreateSyntaxFlowGroupRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type UpdateSyntaxFlowRuleAndGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter       *SyntaxFlowRuleFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	AddGroups    []string              `protobuf:"bytes,2,rep,name=AddGroups,proto3" json:"AddGroups,omitempty"`
	RemoveGroups []string              `protobuf:"bytes,3,rep,name=RemoveGroups,proto3" json:"RemoveGroups,omitempty"`
	All          bool                  `protobuf:"varint,4,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) Reset() {
	*x = UpdateSyntaxFlowRuleAndGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyntaxFlowRuleAndGroupRequest) ProtoMessage() {}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyntaxFlowRuleAndGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyntaxFlowRuleAndGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{587}
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) GetAddGroups() []string {
	if x != nil {
		return x.AddGroups
	}
	return nil
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) GetRemoveGroups() []string {
	if x != nil {
		return x.RemoveGroups
	}
	return nil
}

func (x *UpdateSyntaxFlowRuleAndGroupRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type DeleteSyntaxFlowRuleGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *SyntaxFlowRuleGroupFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *DeleteSyntaxFlowRuleGroupRequest) Reset() {
	*x = DeleteSyntaxFlowRuleGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSyntaxFlowRuleGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyntaxFlowRuleGroupRequest) ProtoMessage() {}

func (x *DeleteSyntaxFlowRuleGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyntaxFlowRuleGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyntaxFlowRuleGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{588}
}

func (x *DeleteSyntaxFlowRuleGroupRequest) GetFilter() *SyntaxFlowRuleGroupFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SyntaxFlowScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlMode string `protobuf:"bytes,1,opt,name=ControlMode,proto3" json:"ControlMode,omitempty"` // 控制模式 "start" "pause" "resume" "status"
	// 启动扫描任务
	Filter      *SyntaxFlowRuleFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`           // 用于指定扫描的规则
	ProgramName []string              `protobuf:"bytes,3,rep,name=ProgramName,proto3" json:"ProgramName,omitempty"` // 用于指定扫描的程序
	// 恢复扫描任务
	ResumeTaskId string `protobuf:"bytes,5,opt,name=ResumeTaskId,proto3" json:"ResumeTaskId,omitempty"` // 恢复任务ID
	// 其他参数
	IgnoreLanguage bool `protobuf:"varint,4,opt,name=IgnoreLanguage,proto3" json:"IgnoreLanguage,omitempty"` // 是否忽略语言 默认为false 将会只运行和当前项目语言一致的规则，最后运行的规则可能会比当前选中的规则少一些。
}

func (x *SyntaxFlowScanRequest) Reset() {
	*x = SyntaxFlowScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowScanRequest) ProtoMessage() {}

func (x *SyntaxFlowScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowScanRequest.ProtoReflect.Descriptor instead.
func (*SyntaxFlowScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{589}
}

func (x *SyntaxFlowScanRequest) GetControlMode() string {
	if x != nil {
		return x.ControlMode
	}
	return ""
}

func (x *SyntaxFlowScanRequest) GetFilter() *SyntaxFlowRuleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SyntaxFlowScanRequest) GetProgramName() []string {
	if x != nil {
		return x.ProgramName
	}
	return nil
}

func (x *SyntaxFlowScanRequest) GetResumeTaskId() string {
	if x != nil {
		return x.ResumeTaskId
	}
	return ""
}

func (x *SyntaxFlowScanRequest) GetIgnoreLanguage() bool {
	if x != nil {
		return x.IgnoreLanguage
	}
	return false
}

type QuerySyntaxFlowScanTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging                   `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter     *SyntaxFlowScanTaskFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QuerySyntaxFlowScanTaskRequest) Reset() {
	*x = QuerySyntaxFlowScanTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySyntaxFlowScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowScanTaskRequest) ProtoMessage() {}

func (x *QuerySyntaxFlowScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowScanTaskRequest.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{590}
}

func (x *QuerySyntaxFlowScanTaskRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowScanTaskRequest) GetFilter() *SyntaxFlowScanTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SyntaxFlowScanTaskFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Programs []string `protobuf:"bytes,1,rep,name=Programs,proto3" json:"Programs,omitempty"`
	Status   []string `protobuf:"bytes,2,rep,name=Status,proto3" json:"Status,omitempty"`
	TaskIds  []string `protobuf:"bytes,3,rep,name=TaskIds,proto3" json:"TaskIds,omitempty"`
	FromId   int64    `protobuf:"varint,4,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UntilId  int64    `protobuf:"varint,5,opt,name=UntilId,proto3" json:"UntilId,omitempty"`
}

func (x *SyntaxFlowScanTaskFilter) Reset() {
	*x = SyntaxFlowScanTaskFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowScanTaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowScanTaskFilter) ProtoMessage() {}

func (x *SyntaxFlowScanTaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowScanTaskFilter.ProtoReflect.Descriptor instead.
func (*SyntaxFlowScanTaskFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{591}
}

func (x *SyntaxFlowScanTaskFilter) GetPrograms() []string {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *SyntaxFlowScanTaskFilter) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SyntaxFlowScanTaskFilter) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *SyntaxFlowScanTaskFilter) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SyntaxFlowScanTaskFilter) GetUntilId() int64 {
	if x != nil {
		return x.UntilId
	}
	return 0
}

type QuerySyntaxFlowScanTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging               `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*SyntaxFlowScanTask `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64                 `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QuerySyntaxFlowScanTaskResponse) Reset() {
	*x = QuerySyntaxFlowScanTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[592]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySyntaxFlowScanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowScanTaskResponse) ProtoMessage() {}

func (x *QuerySyntaxFlowScanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[592]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowScanTaskResponse.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowScanTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{592}
}

func (x *QuerySyntaxFlowScanTaskResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowScanTaskResponse) GetData() []*SyntaxFlowScanTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QuerySyntaxFlowScanTaskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SyntaxFlowScanTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt int64    `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt int64    `protobuf:"varint,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	TaskId    string   `protobuf:"bytes,4,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	Programs  []string `protobuf:"bytes,5,rep,name=Programs,proto3" json:"Programs,omitempty"`
	RuleCount int64    `protobuf:"varint,6,opt,name=RuleCount,proto3" json:"RuleCount,omitempty"`
	Status    string   `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"` // executing / paused / done / error
	Reason    string   `protobuf:"bytes,8,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// query execute
	FailedQuery  int64 `protobuf:"varint,9,opt,name=FailedQuery,proto3" json:"FailedQuery,omitempty"`
	SkipQuery    int64 `protobuf:"varint,10,opt,name=SkipQuery,proto3" json:"SkipQuery,omitempty"`
	SuccessQuery int64 `protobuf:"varint,11,opt,name=SuccessQuery,proto3" json:"SuccessQuery,omitempty"`
	// risk
	RiskCount int64 `protobuf:"varint,12,opt,name=RiskCount,proto3" json:"RiskCount,omitempty"`
	// query process
	TotalQuery int64 `protobuf:"varint,13,opt,name=TotalQuery,proto3" json:"TotalQuery,omitempty"`
}

func (x *SyntaxFlowScanTask) Reset() {
	*x = SyntaxFlowScanTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[593]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowScanTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowScanTask) ProtoMessage() {}

func (x *SyntaxFlowScanTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[593]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowScanTask.ProtoReflect.Descriptor instead.
func (*SyntaxFlowScanTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{593}
}

func (x *SyntaxFlowScanTask) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SyntaxFlowScanTask) GetPrograms() []string {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *SyntaxFlowScanTask) GetRuleCount() int64 {
	if x != nil {
		return x.RuleCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SyntaxFlowScanTask) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SyntaxFlowScanTask) GetFailedQuery() int64 {
	if x != nil {
		return x.FailedQuery
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetSkipQuery() int64 {
	if x != nil {
		return x.SkipQuery
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetSuccessQuery() int64 {
	if x != nil {
		return x.SuccessQuery
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetRiskCount() int64 {
	if x != nil {
		return x.RiskCount
	}
	return 0
}

func (x *SyntaxFlowScanTask) GetTotalQuery() int64 {
	if x != nil {
		return x.TotalQuery
	}
	return 0
}

type DeleteSyntaxFlowScanTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll bool                      `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Filter    *SyntaxFlowScanTaskFilter `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *DeleteSyntaxFlowScanTaskRequest) Reset() {
	*x = DeleteSyntaxFlowScanTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSyntaxFlowScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyntaxFlowScanTaskRequest) ProtoMessage() {}

func (x *DeleteSyntaxFlowScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyntaxFlowScanTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyntaxFlowScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{594}
}

func (x *DeleteSyntaxFlowScanTaskRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteSyntaxFlowScanTaskRequest) GetFilter() *SyntaxFlowScanTaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SyntaxFlowScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID string `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	// 扫描状态
	Status     string      `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"` // "executing" | "done" | "paused" | "error"
	ExecResult *ExecResult `protobuf:"bytes,3,opt,name=ExecResult,proto3" json:"ExecResult,omitempty"`
	// result
	Result *SyntaxFlowResult `protobuf:"bytes,4,opt,name=Result,proto3" json:"Result,omitempty"`
	Risks  []*Risk           `protobuf:"bytes,5,rep,name=risks,proto3" json:"risks,omitempty"`
}

func (x *SyntaxFlowScanResponse) Reset() {
	*x = SyntaxFlowScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowScanResponse) ProtoMessage() {}

func (x *SyntaxFlowScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowScanResponse.ProtoReflect.Descriptor instead.
func (*SyntaxFlowScanResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{595}
}

func (x *SyntaxFlowScanResponse) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SyntaxFlowScanResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SyntaxFlowScanResponse) GetExecResult() *ExecResult {
	if x != nil {
		return x.ExecResult
	}
	return nil
}

func (x *SyntaxFlowScanResponse) GetResult() *SyntaxFlowResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SyntaxFlowScanResponse) GetRisks() []*Risk {
	if x != nil {
		return x.Risks
	}
	return nil
}

type SyntaxFlowResultFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIDs      []string `protobuf:"bytes,1,rep,name=TaskIDs,proto3" json:"TaskIDs,omitempty"`
	ResultIDs    []string `protobuf:"bytes,2,rep,name=ResultIDs,proto3" json:"ResultIDs,omitempty"`
	RuleNames    []string `protobuf:"bytes,3,rep,name=RuleNames,proto3" json:"RuleNames,omitempty"`
	ProgramNames []string `protobuf:"bytes,4,rep,name=ProgramNames,proto3" json:"ProgramNames,omitempty"`
	Keyword      string   `protobuf:"bytes,5,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	OnlyRisk     bool     `protobuf:"varint,6,opt,name=OnlyRisk,proto3" json:"OnlyRisk,omitempty"`
	AfterID      int64    `protobuf:"varint,7,opt,name=AfterID,proto3" json:"AfterID,omitempty"`
	BeforeID     int64    `protobuf:"varint,8,opt,name=BeforeID,proto3" json:"BeforeID,omitempty"`
	Severity     []string `protobuf:"bytes,9,rep,name=Severity,proto3" json:"Severity,omitempty"` //  "info", "low", "middle", "critical", "high"
}

func (x *SyntaxFlowResultFilter) Reset() {
	*x = SyntaxFlowResultFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowResultFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowResultFilter) ProtoMessage() {}

func (x *SyntaxFlowResultFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowResultFilter.ProtoReflect.Descriptor instead.
func (*SyntaxFlowResultFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{596}
}

func (x *SyntaxFlowResultFilter) GetTaskIDs() []string {
	if x != nil {
		return x.TaskIDs
	}
	return nil
}

func (x *SyntaxFlowResultFilter) GetResultIDs() []string {
	if x != nil {
		return x.ResultIDs
	}
	return nil
}

func (x *SyntaxFlowResultFilter) GetRuleNames() []string {
	if x != nil {
		return x.RuleNames
	}
	return nil
}

func (x *SyntaxFlowResultFilter) GetProgramNames() []string {
	if x != nil {
		return x.ProgramNames
	}
	return nil
}

func (x *SyntaxFlowResultFilter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SyntaxFlowResultFilter) GetOnlyRisk() bool {
	if x != nil {
		return x.OnlyRisk
	}
	return false
}

func (x *SyntaxFlowResultFilter) GetAfterID() int64 {
	if x != nil {
		return x.AfterID
	}
	return 0
}

func (x *SyntaxFlowResultFilter) GetBeforeID() int64 {
	if x != nil {
		return x.BeforeID
	}
	return 0
}

func (x *SyntaxFlowResultFilter) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

type QuerySyntaxFlowResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging                 `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Filter     *SyntaxFlowResultFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QuerySyntaxFlowResultRequest) Reset() {
	*x = QuerySyntaxFlowResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySyntaxFlowResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowResultRequest) ProtoMessage() {}

func (x *QuerySyntaxFlowResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowResultRequest.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowResultRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{597}
}

func (x *QuerySyntaxFlowResultRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowResultRequest) GetFilter() *SyntaxFlowResultFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QuerySyntaxFlowResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging             `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	DbMessage  *DbOperateMessage   `protobuf:"bytes,2,opt,name=DbMessage,proto3" json:"DbMessage,omitempty"`
	Results    []*SyntaxFlowResult `protobuf:"bytes,3,rep,name=Results,proto3" json:"Results,omitempty"`
	Total      uint64              `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QuerySyntaxFlowResultResponse) Reset() {
	*x = QuerySyntaxFlowResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySyntaxFlowResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySyntaxFlowResultResponse) ProtoMessage() {}

func (x *QuerySyntaxFlowResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySyntaxFlowResultResponse.ProtoReflect.Descriptor instead.
func (*QuerySyntaxFlowResultResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{598}
}

func (x *QuerySyntaxFlowResultResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySyntaxFlowResultResponse) GetDbMessage() *DbOperateMessage {
	if x != nil {
		return x.DbMessage
	}
	return nil
}

func (x *QuerySyntaxFlowResultResponse) GetResults() []*SyntaxFlowResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *QuerySyntaxFlowResultResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SyntaxFlowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result ID for yakurl(syntaxflow://)
	ResultID uint64 `protobuf:"varint,1,opt,name=ResultID,proto3" json:"ResultID,omitempty"`
	TaskID   string `protobuf:"bytes,2,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	// rule info
	RuleName    string `protobuf:"bytes,3,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleZh     string `protobuf:"bytes,5,opt,name=TitleZh,proto3" json:"TitleZh,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	Severity    string `protobuf:"bytes,7,opt,name=Severity,proto3" json:"Severity,omitempty"` //  "info", "low", "middle", "critical", "high"
	Purpose     string `protobuf:"bytes,8,opt,name=Purpose,proto3" json:"Purpose,omitempty"`
	// target info
	ProgramName string `protobuf:"bytes,9,opt,name=ProgramName,proto3" json:"ProgramName,omitempty"`
	Language    string `protobuf:"bytes,10,opt,name=Language,proto3" json:"Language,omitempty"`
	// runtime info
	RiskCount   uint64 `protobuf:"varint,11,opt,name=RiskCount,proto3" json:"RiskCount,omitempty"`
	RuleContent string `protobuf:"bytes,12,opt,name=RuleContent,proto3" json:"RuleContent,omitempty"`
}

func (x *SyntaxFlowResult) Reset() {
	*x = SyntaxFlowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxFlowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxFlowResult) ProtoMessage() {}

func (x *SyntaxFlowResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxFlowResult.ProtoReflect.Descriptor instead.
func (*SyntaxFlowResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{599}
}

func (x *SyntaxFlowResult) GetResultID() uint64 {
	if x != nil {
		return x.ResultID
	}
	return 0
}

func (x *SyntaxFlowResult) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SyntaxFlowResult) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SyntaxFlowResult) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SyntaxFlowResult) GetTitleZh() string {
	if x != nil {
		return x.TitleZh
	}
	return ""
}

func (x *SyntaxFlowResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SyntaxFlowResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SyntaxFlowResult) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *SyntaxFlowResult) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *SyntaxFlowResult) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SyntaxFlowResult) GetRiskCount() uint64 {
	if x != nil {
		return x.RiskCount
	}
	return 0
}

func (x *SyntaxFlowResult) GetRuleContent() string {
	if x != nil {
		return x.RuleContent
	}
	return ""
}

type QueryPluginEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []string `protobuf:"bytes,1,rep,name=Key,proto3" json:"Key,omitempty"`
}

func (x *QueryPluginEnvRequest) Reset() {
	*x = QueryPluginEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPluginEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPluginEnvRequest) ProtoMessage() {}

func (x *QueryPluginEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPluginEnvRequest.ProtoReflect.Descriptor instead.
func (*QueryPluginEnvRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{600}
}

func (x *QueryPluginEnvRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

type PluginEnvData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env []*KVPair `protobuf:"bytes,1,rep,name=Env,proto3" json:"Env,omitempty"`
}

func (x *PluginEnvData) Reset() {
	*x = PluginEnvData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginEnvData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginEnvData) ProtoMessage() {}

func (x *PluginEnvData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginEnvData.ProtoReflect.Descriptor instead.
func (*PluginEnvData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{601}
}

func (x *PluginEnvData) GetEnv() []*KVPair {
	if x != nil {
		return x.Env
	}
	return nil
}

type DeletePluginEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	All bool   `protobuf:"varint,2,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *DeletePluginEnvRequest) Reset() {
	*x = DeletePluginEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePluginEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePluginEnvRequest) ProtoMessage() {}

func (x *DeletePluginEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePluginEnvRequest.ProtoReflect.Descriptor instead.
func (*DeletePluginEnvRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{602}
}

func (x *DeletePluginEnvRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeletePluginEnvRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type GetAllFuzztagInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *GetAllFuzztagInfoRequest) Reset() {
	*x = GetAllFuzztagInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllFuzztagInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllFuzztagInfoRequest) ProtoMessage() {}

func (x *GetAllFuzztagInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllFuzztagInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAllFuzztagInfoRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{603}
}

func (x *GetAllFuzztagInfoRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetAllFuzztagInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FuzztagInfo `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetAllFuzztagInfoResponse) Reset() {
	*x = GetAllFuzztagInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllFuzztagInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllFuzztagInfoResponse) ProtoMessage() {}

func (x *GetAllFuzztagInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllFuzztagInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAllFuzztagInfoResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{604}
}

func (x *GetAllFuzztagInfoResponse) GetData() []*FuzztagInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type FuzztagArgumentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DefaultValue string   `protobuf:"bytes,2,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	Description  string   `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	IsOptional   bool     `protobuf:"varint,4,opt,name=IsOptional,proto3" json:"IsOptional,omitempty"`
	IsList       bool     `protobuf:"varint,5,opt,name=IsList,proto3" json:"IsList,omitempty"`
	Separators   []string `protobuf:"bytes,6,rep,name=Separators,proto3" json:"Separators,omitempty"`
}

func (x *FuzztagArgumentType) Reset() {
	*x = FuzztagArgumentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzztagArgumentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzztagArgumentType) ProtoMessage() {}

func (x *FuzztagArgumentType) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzztagArgumentType.ProtoReflect.Descriptor instead.
func (*FuzztagArgumentType) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{605}
}

func (x *FuzztagArgumentType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FuzztagArgumentType) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *FuzztagArgumentType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FuzztagArgumentType) GetIsOptional() bool {
	if x != nil {
		return x.IsOptional
	}
	return false
}

func (x *FuzztagArgumentType) GetIsList() bool {
	if x != nil {
		return x.IsList
	}
	return false
}

func (x *FuzztagArgumentType) GetSeparators() []string {
	if x != nil {
		return x.Separators
	}
	return nil
}

type FuzztagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	VerboseName   string                 `protobuf:"bytes,3,opt,name=VerboseName,proto3" json:"VerboseName,omitempty"`
	Examples      []string               `protobuf:"bytes,4,rep,name=Examples,proto3" json:"Examples,omitempty"`
	ArgumentTypes []*FuzztagArgumentType `protobuf:"bytes,5,rep,name=ArgumentTypes,proto3" json:"ArgumentTypes,omitempty"`
}

func (x *FuzztagInfo) Reset() {
	*x = FuzztagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[606]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzztagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzztagInfo) ProtoMessage() {}

func (x *FuzztagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[606]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzztagInfo.ProtoReflect.Descriptor instead.
func (*FuzztagInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{606}
}

func (x *FuzztagInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FuzztagInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FuzztagInfo) GetVerboseName() string {
	if x != nil {
		return x.VerboseName
	}
	return ""
}

func (x *FuzztagInfo) GetExamples() []string {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *FuzztagInfo) GetArgumentTypes() []*FuzztagArgumentType {
	if x != nil {
		return x.ArgumentTypes
	}
	return nil
}

type GenerateFuzztagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Range *Range `protobuf:"bytes,3,opt,name=Range,proto3" json:"Range,omitempty"`
}

func (x *GenerateFuzztagRequest) Reset() {
	*x = GenerateFuzztagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[607]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFuzztagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFuzztagRequest) ProtoMessage() {}

func (x *GenerateFuzztagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[607]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFuzztagRequest.ProtoReflect.Descriptor instead.
func (*GenerateFuzztagRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{607}
}

func (x *GenerateFuzztagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenerateFuzztagRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GenerateFuzztagRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type GenerateFuzztagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GeneralResponse `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Result string           `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *GenerateFuzztagResponse) Reset() {
	*x = GenerateFuzztagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[608]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFuzztagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFuzztagResponse) ProtoMessage() {}

func (x *GenerateFuzztagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[608]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFuzztagResponse.ProtoReflect.Descriptor instead.
func (*GenerateFuzztagResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{608}
}

func (x *GenerateFuzztagResponse) GetStatus() *GeneralResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GenerateFuzztagResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_yakgrpc_proto protoreflect.FileDescriptor

var file_yakgrpc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x79, 0x61, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x79, 0x70, 0x62, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x0a,
	0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x0f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64,
	0x73, 0x22, 0xef, 0x05, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x63,
	0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xdb, 0x04, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x50, 0x6f, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x03, 0x50, 0x6f, 0x43, 0x12, 0x27, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x22, 0x4f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x22, 0x4f, 0x0a, 0x1f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x22, 0x31, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x84, 0x02, 0x0a, 0x24, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x4d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53,
	0x61, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x63, 0x61, 0x6e, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0x86, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xfe, 0x02, 0x0a, 0x0e, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc4,
	0x01, 0x0a, 0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x12, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63,
	0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x42, 0x0a, 0x10, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x10, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc1, 0x01, 0x0a, 0x1f, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73,
	0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x6e, 0x0a, 0x16, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc8, 0x03, 0x0a, 0x11, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x6d, 0x0a, 0x17, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x6e, 0x0a, 0x18, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x63, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x0c, 0x50, 0x63,
	0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x14, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x63, 0x61, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x14, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x63, 0x61, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x15, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x1a, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1a, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x1c, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1c, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x19, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x19, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x72, 0x63, 0x49, 0x50, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x72, 0x63, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x44,
	0x73, 0x74, 0x49, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x73, 0x74, 0x49,
	0x50, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xde, 0x01,
	0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43,
	0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x22, 0xe2,
	0x05, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x72, 0x63, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x49,
	0x70, 0x76, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76,
	0x36, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x72, 0x63, 0x49,
	0x50, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x72, 0x63, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x73, 0x74, 0x49, 0x50, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x73, 0x74, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x54,
	0x63, 0x70, 0x49, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x49, 0x73, 0x54, 0x63, 0x70, 0x49, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a,
	0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x54,
	0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x73, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x48, 0x61, 0x6c, 0x66, 0x4f,
	0x70, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x48, 0x61, 0x6c,
	0x66, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x4e, 0x49, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x53, 0x4e, 0x49, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xf3, 0x05, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x52, 0x61, 0x77, 0x12, 0x48, 0x0a, 0x1f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x53, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x72, 0x63, 0x12, 0x48, 0x0a,
	0x1f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x44, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x44, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76,
	0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x34, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x36, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x53, 0x72, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x53, 0x72, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50,
	0x44, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x44, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x12, 0x3a, 0x0a, 0x18, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x44, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x44, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xe1, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43, 0x50, 0x52, 0x65,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x52,
	0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x10, 0x0a,
	0x03, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x53, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb9, 0x01,
	0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f,
	0x6d, 0x4e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d,
	0x4e, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x77, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x50, 0x63,
	0x61, 0x70, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x53, 0x75,
	0x72, 0x69, 0x63, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x72, 0x69, 0x63, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x53, 0x75, 0x72, 0x69, 0x63, 0x61, 0x74,
	0x61, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x75, 0x72, 0x69, 0x63,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xef, 0x01, 0x0a, 0x0d, 0x50, 0x63,
	0x61, 0x70, 0x58, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x20, 0x4e,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4b, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4b, 0x42, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x43, 0x50, 0x52, 0x65,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x03, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x61, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x06, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f,
	0x6d, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xaa, 0x03, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x69, 0x7a,
	0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x55,
	0x72, 0x6c, 0x12, 0x21, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x61, 0x76, 0x65, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x48, 0x61, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x59,
	0x61, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x1b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x74, 0x74, 0x69, 0x66, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xaa, 0x01, 0x0a, 0x1c, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x69, 0x66, 0x79, 0x48, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x54, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x54,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x33, 0x0a, 0x19, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x21, 0x0a, 0x1f, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x63, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x57,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6b,
	0x63, 0x73, 0x31, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x40, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x31, 0x32,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x22, 0xaa, 0x08, 0x0a, 0x13, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a,
	0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x4e, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x4e, 0x53, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x4e, 0x53, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x4e, 0x53, 0x46, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x43, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x44, 0x4e, 0x53, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x43, 0x50, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x4e, 0x53, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x48,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x44, 0x4e, 0x53, 0x46, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x44, 0x6f, 0x48, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x6f, 0x48, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x48, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3a, 0x0a, 0x18,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x76, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x70,
	0x53, 0x61, 0x76, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x61, 0x76, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x53, 0x79, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x55, 0x52, 0x49, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x55, 0x52, 0x49, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6e,
	0x55, 0x52, 0x49, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x55, 0x52, 0x49,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x49, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x69, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x41, 0x69, 0x41, 0x70, 0x69, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x62, 0x53, 0x61, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x44, 0x62, 0x53, 0x61, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2c, 0x0a,
	0x11, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4d,
	0x69, 0x6e, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x54, 0x6c, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x96, 0x02, 0x0a, 0x1b, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x52, 0x4c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x52, 0x4c,
	0x12, 0x2d, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0xb2, 0x02, 0x0a, 0x16, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x34,
	0x0a, 0x1e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x75, 0x6c, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x06, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x1c,
	0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x08, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x15,
	0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x6b, 0x0a, 0x1d, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x17,
	0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x2e, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22,
	0x74, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x4e, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x66,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x61, 0x66,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x21, 0x47, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x45, 0x78,
	0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x45, 0x78, 0x65,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63,
	0x61, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10,
	0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x68,
	0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48,
	0x74, 0x74, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0xa6, 0x04,
	0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73,
	0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x73, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x25, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x2b, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0f,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x13, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x0e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x7b, 0x0a, 0x1b, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xaa, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x54, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x43, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x54, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x22, 0x30, 0x0a,
	0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22,
	0x1a, 0x0a, 0x18, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x19, 0x49,
	0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x21, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x43, 0x56, 0x45, 0x22, 0xf4, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x43, 0x57, 0x45, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x66, 0x74, 0x65, 0x72, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x09, 0x43,
	0x57, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x57, 0x45, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x28,
	0x0a, 0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x6f, 0x6e, 0x67,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x56, 0x45, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x56, 0x45,
	0x22, 0x51, 0x0a, 0x0b, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x12,
	0x20, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x43, 0x56,
	0x45, 0x12, 0x20, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x57, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03,
	0x43, 0x57, 0x45, 0x22, 0xff, 0x07, 0x0a, 0x09, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x43, 0x56, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a,
	0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x57,
	0x45, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43,
	0x56, 0x53, 0x53, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x43, 0x56, 0x53, 0x53, 0x76, 0x32, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x43, 0x56,
	0x53, 0x53, 0x76, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x4f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x15, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x33, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x3c, 0x0a, 0x1e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x49,
	0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x41, 0x49, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0xa3,
	0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x1c, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x1d, 0x49, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x22, 0xf6, 0x02, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68,
	0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x61,
	0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x61, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0xfc, 0x04, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x49, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x52, 0x61, 0x77, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x49, 0x70, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x48, 0x0a, 0x1f, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x79, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x48, 0x74, 0x74, 0x70, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x48, 0x74, 0x74, 0x70, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x72, 0x69, 0x63, 0x61, 0x74, 0x61, 0x52, 0x61, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x72, 0x69, 0x63, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61,
	0x6d, 0x65, 0x5a, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65,
	0x5a, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5a, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x5a, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x5a, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x5a, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x43, 0x56, 0x45, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56, 0x45, 0x22, 0x89,
	0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x22, 0x4b, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x62, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x30, 0x0a, 0x13, 0x4a, 0x75, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x56, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x4a, 0x75,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x56,
	0x45, 0x22, 0x68, 0x0a, 0x1a, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x49,
	0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x15, 0x4d, 0x49, 0x54,
	0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x22, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d,
	0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x51, 0x0a,
	0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x22, 0x7e, 0x0a, 0x22, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x81, 0x01, 0x0a, 0x23, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x81, 0x01, 0x0a, 0x1d, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93,
	0x01, 0x0a, 0x19, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdb, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xcf, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x54, 0x61,
	0x6c, 0x22, 0x4c, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x4c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x2b, 0x0a,
	0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x59, 0x61, 0x6b,
	0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x7c, 0x0a, 0x12, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e,
	0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x09, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4b, 0x56, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x1a,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c,
	0x22, 0x3d, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x22,
	0x80, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x61, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x75, 0x7a, 0x7a, 0x74,
	0x61, 0x67, 0x22, 0x31, 0x0a, 0x1f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77,
	0x22, 0x49, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x22, 0x3e, 0x0a, 0x16, 0x53,
	0x61, 0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x18, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x99, 0x01,
	0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x40, 0x0a, 0x17, 0x53, 0x61, 0x76,
	0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x18, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x19,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x52, 0x0a, 0x0c, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0xce, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x6c, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0xcf, 0x01, 0x0a,
	0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x46, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x75, 0x7a, 0x7a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3,
	0x01, 0x0a, 0x27, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x30, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x31, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x73, 0x54, 0x4c, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49,
	0x73, 0x54, 0x4c, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x75, 0x7a, 0x7a, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x75,
	0x7a, 0x7a, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xe1, 0x04, 0x0a, 0x17, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x75, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x75, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x73, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x49, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a,
	0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xe9, 0x02, 0x0a, 0x15, 0x45,
	0x78, 0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x13,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x90, 0x01, 0x0a,
	0x20, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x8a, 0x02, 0x0a, 0x20, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x14,
	0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x56, 0x52, 0x06, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x22,
	0x57, 0x0a, 0x12, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x56, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x21, 0x59, 0x61, 0x6b, 0x6c,
	0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53, 0x0a, 0x1b, 0x59, 0x61, 0x6b, 0x6c, 0x61,
	0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x22, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xa5, 0x02, 0x0a,
	0x21, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x0c, 0x43, 0x6c, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x61, 0x6b, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x55, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x55, 0x49,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x55, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e,
	0x76, 0x4b, 0x65, 0x79, 0x22, 0x61, 0x0a, 0x09, 0x59, 0x61, 0x6b, 0x55, 0x49, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x79, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x54, 0x79, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x57, 0x68, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x57, 0x68, 0x65, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x52,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56,
	0x45, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5b, 0x0a, 0x25, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x43, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4e, 0x65, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x24,
	0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x1e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x1f, 0x59,
	0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x18, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x53,
	0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x8d, 0x03, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x13, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f,
	0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x5b, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0xc4, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x4c, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4c, 0x6f, 0x67, 0x22, 0xc2, 0x02, 0x0a, 0x22, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x67, 0x0a, 0x1f, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x22, 0x6a, 0x0a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22,
	0xf4, 0x02, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x28, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x29, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x6c, 0x0a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x22, 0x4d, 0x0a, 0x21, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x79, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x49, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x54, 0x54, 0x4c, 0x22, 0x21, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x24, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2d, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x4d, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74, 0x74,
	0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x74,
	0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x43, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a,
	0x20, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x1a,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x50, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x22, 0x6a, 0x0a, 0x2b, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x5e, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x7c, 0x0a, 0x1a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf4, 0x01, 0x0a, 0x0e, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x42,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0x3c, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x22, 0x32, 0x0a, 0x16, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x17, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x20, 0x49, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x62, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x22, 0x45, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x35, 0x0a,
	0x17, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x37, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x32, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x61, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x46,
	0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x44, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x1d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79,
	0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x22, 0x43, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x24,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x25, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x57, 0x45, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x57, 0x45, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x1d, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x43, 0x57, 0x45, 0x49, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x53, 0x56, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x53, 0x56, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0x4d,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a,
	0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x52, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x1e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0x3b, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x61, 0x77, 0x22, 0xe2, 0x01, 0x0a, 0x28, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x69,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73,
	0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x22, 0x23, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x22, 0x54, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74,
	0x74, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f, 0x63, 0x42,
	0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59,
	0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x22, 0x7a, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c,
	0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xa8, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0x5d, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x49, 0x43, 0x4d, 0x50, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x48, 0x6f, 0x73, 0x74, 0x22, 0xa3, 0x03, 0x0a, 0x1d, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x22, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x25, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x35, 0x0a, 0x1d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x5c, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x57, 0x65, 0x62, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x31, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x08, 0x4d, 0x49, 0x54, 0x4d, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x65, 0x0a, 0x09, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x22, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x09, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x61, 0x6d, 0x65,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x22, 0x41, 0x0a, 0x15, 0x59,
	0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x22,
	0x0a, 0x0a, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x23, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x65, 0x6c, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x42, 0x69,
	0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x42, 0x69, 0x6e, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x67, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x68, 0x0a, 0x22, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73,
	0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x18, 0x59, 0x73,
	0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x52, 0x0a, 0x17, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x59, 0x73, 0x6f, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x64, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73,
	0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7b, 0x0a, 0x12, 0x59, 0x73,
	0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x37,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x59, 0x73, 0x6f, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a,
	0x0f, 0x59, 0x73, 0x6f, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x0f, 0x59, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x10, 0x59,
	0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x2c, 0x0a, 0x14, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x2f, 0x0a, 0x15, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x22, 0x31, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x43, 0x4d, 0x50,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x45, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x17, 0x49, 0x43, 0x4d,
	0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x21, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x21, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x31, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x91, 0x01, 0x0a, 0x1b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x38, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x15, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0x4a, 0x0a, 0x16, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8e, 0x01, 0x0a, 0x1c,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01, 0x0a,
	0x21, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xff, 0x05, 0x0a, 0x08, 0x57,
	0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x34, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x35, 0x0a, 0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x4f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x44, 0x65, 0x63,
	0x4d, 0x4f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x44,
	0x65, 0x63, 0x4d, 0x4f, 0x64, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a,
	0x0d, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x07, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45,
	0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x50, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a,
	0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a,
	0x0f, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x22, 0x3c, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x56,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x7e, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57,
	0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd0, 0x04, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x0c, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x4f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x4f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x38, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x49, 0x64, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c,
	0x6f, 0x67, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x4e, 0x53, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x55, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x22,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44,
	0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x55, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x22, 0x46, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x44, 0x4e, 0x53,
	0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x4e, 0x53, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x40, 0x0a, 0x10,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd0,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x50, 0x12, 0x2c, 0x0a, 0x11, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0x4f, 0x0a, 0x1a, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49,
	0x73, 0x49, 0x70, 0x76, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x36, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x49, 0x70, 0x76, 0x36, 0x12, 0x2a, 0x0a,
	0x10, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64,
	0x73, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x92, 0x07, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72,
	0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43,
	0x56, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c,
	0x6f, 0x77, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x03, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x49, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x2f, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x8a, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65,
	0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x4e,
	0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x44, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x61, 0x67, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0b, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x50, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x50, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x36, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x0d, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x36, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x52,
	0x69, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0x40, 0x0a, 0x12, 0x4e,
	0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x53, 0x0a,
	0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x52,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x62, 0x0a, 0x20, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4d, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x33, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x50, 0x22, 0xa4, 0x03, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x52, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7c, 0x0a,
	0x19, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73,
	0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74,
	0x52, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x19,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x59, 0x73, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x46, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x52, 0x13, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x55, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x25, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x69, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x22, 0x80, 0x05, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72,
	0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x44, 0x69, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x44, 0x69, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x44, 0x69, 0x63, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x44, 0x69, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6b, 0x54, 0x6f, 0x53,
	0x74, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x6b, 0x54, 0x6f, 0x53,
	0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x36, 0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a,
	0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x82, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x44,
	0x73, 0x22, 0x7a, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a,
	0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x48, 0x54, 0x54, 0x50, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x48, 0x54, 0x54, 0x50, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x52, 0x0a,
	0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x5a, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x6d, 0x0a,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x84, 0x01, 0x0a,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x50, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x49, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x49, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x22, 0x58,
	0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x74, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x23, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x54, 0x72, 0x65, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x22, 0xd6, 0x07, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x78,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x52, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x11, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x74, 0x74, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x48, 0x74, 0x74, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6d,
	0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5a, 0x0a,
	0x0a, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x41, 0x6c, 0x6c, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6a, 0x0a,
	0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x17, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x72, 0x22, 0x61, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x64, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b,
	0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22,
	0x24, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x57, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xf7,
	0x01, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x22, 0x7a, 0x0a, 0x0d, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x28,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x75,
	0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x22, 0x52, 0x0a, 0x18, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb2, 0x01, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72,
	0x74, 0x22, 0x38, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x30, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x77,
	0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x61, 0x77, 0x4a,
	0x73, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x29, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xd0, 0x02, 0x0a,
	0x0e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x22,
	0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x9d, 0x02, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61,
	0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x4d, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55, 0x72, 0x6c, 0x22, 0x28, 0x0a, 0x0c, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x41, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x22, 0x52, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xc0, 0x09, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x44,
	0x42, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x44,
	0x42, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x53, 0x61, 0x76, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x61,
	0x6e, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x48, 0x6f, 0x73,
	0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x79, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x53, 0x79, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x79,
	0x6e, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x1a, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4a, 0x53, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4a, 0x53, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x76, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x76, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x41,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2e, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x9a, 0x04,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xec, 0x02, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x49, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x45,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x43, 0x50, 0x45, 0x12, 0x1c, 0x0a, 0x09, 0x48,
	0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x48, 0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x36, 0x0a, 0x1a, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x59, 0x61, 0x6b, 0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x75, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4a, 0x75, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0xcc, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x45,
	0x78, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x46, 0x75, 0x7a, 0x7a, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x46, 0x75, 0x7a, 0x7a, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x22, 0x62, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3d, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2b, 0x0a,
	0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73,
	0x4e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77,
	0x22, 0x7a, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x71, 0x0a, 0x1b, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x4f, 0x72, 0x43, 0x6f,
	0x70, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x43, 0x6f, 0x70, 0x79, 0x22, 0x33, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x38, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x49, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x22, 0x50, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x42, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x42, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x22, 0x7b, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x01,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x55, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x4f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x80, 0x06, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x75,
	0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x49, 0x73,
	0x4d, 0x49, 0x54, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x67, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x55, 0x6e, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x73, 0x50, 0x6f, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x73, 0x50, 0x6f, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x22,
	0x7f, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xf6, 0x02, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3a, 0x0a,
	0x18, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x0a, 0x0a, 0x09, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x48, 0x65, 0x6c, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72,
	0x6f, 0x6d, 0x47, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x6d, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73,
	0x43, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x23, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x4b, 0x65,
	0x79, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45,
	0x6e, 0x76, 0x4b, 0x65, 0x79, 0x22, 0x44, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x06, 0x0a, 0x17,
	0x53, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x43, 0x6f,
	0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x1c, 0x53,
	0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x41, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x77, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x0e, 0x54, 0x6f, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x1b, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44,
	0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0x3c, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x69, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x44, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x44, 0x69, 0x72, 0x73, 0x22, 0x6f, 0x0a, 0x15, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x50, 0x6f, 0x63, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x50, 0x6f, 0x63,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x4d,
	0x49, 0x54, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x49, 0x73, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x1b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x98, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x50, 0x6f, 0x63, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73,
	0x50, 0x6f, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x19, 0x53,
	0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x65, 0x77,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x33, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x53, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x32, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x2f, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x54,
	0x61, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x39, 0x0a, 0x0b, 0x54, 0x61,
	0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x41, 0x75,
	0x74, 0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x8d,
	0x01, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x86,
	0x01, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x2a, 0x0a, 0x08, 0x57,
	0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x57,
	0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x57, 0x6f, 0x72,
	0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x57, 0x6f, 0x72,
	0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f,
	0x77, 0x55, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x46,
	0x6c, 0x6f, 0x77, 0x55, 0x49, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x22, 0x99, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61,
	0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52,
	0x61, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x49, 0x73, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x73, 0x46, 0x61, 0x6c,
	0x73, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0c,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x07,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x27,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xa1, 0x03, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61,
	0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46,
	0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x4c, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1b,
	0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x14,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x6d,
	0x0a, 0x1b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x22, 0x81, 0x03, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x0b, 0x53,
	0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x75,
	0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78,
	0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78,
	0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x12, 0x20,
	0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x17, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x22,
	0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x15, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x58, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x58,
	0x50, 0x61, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x49, 0x0a,
	0x19, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x1e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x1f, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x0f, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x0e, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc0, 0x12, 0x0a, 0x0d,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x54,
	0x61, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75,
	0x7a, 0x7a, 0x54, 0x61, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x75, 0x7a,
	0x7a, 0x54, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x50,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x50,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x6f, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x4a, 0x53, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x53, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x57, 0x65, 0x62, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x57, 0x65,
	0x62, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x6f, 0x46,
	0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x48, 0x6f, 0x74, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57,
	0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61,
	0x78, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x27, 0x0a, 0x08, 0x45, 0x74, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x08, 0x45, 0x74, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x4e, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x59, 0x61, 0x6d, 0x6c, 0x50, 0x6f, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x25, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x59, 0x61, 0x6d, 0x6c, 0x50, 0x6f, 0x43, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x62, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x41,
	0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x52, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x36,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x53, 0x4e, 0x49, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x4e, 0x49,
	0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x4e, 0x49,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x4e, 0x49, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x22, 0x45,
	0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x06, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x73, 0x68,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d,
	0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x14,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x78,
	0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbd,
	0x03, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x50, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x69,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x22, 0x20,
	0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c,
	0x22, 0x77, 0x0a, 0x16, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x0a, 0x0a, 0x0e, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x6f, 0x64,
	0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x4e, 0x53, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x44, 0x4e, 0x53, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x12, 0x34, 0x0a, 0x15, 0x47,
	0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x47, 0x75, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x53, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18,
	0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x55, 0x72, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x37, 0x0a,
	0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x42, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3b,
	0x0a, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x18,
	0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0d, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x49,
	0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x54,
	0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54,
	0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54,
	0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x22, 0x62, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x77,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x61, 0x77,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x2b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x9a, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x66,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x75, 0x66, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x22, 0xb5, 0x0b, 0x0a, 0x14, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x61, 0x76, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x48, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x48, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x12,
	0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49,
	0x50, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f,
	0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x2a, 0x0a, 0x10, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x75, 0x6c, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12,
	0x2e, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x73, 0x18,
	0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54,
	0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48,
	0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x62, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68,
	0x65, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x0a, 0x48, 0x54, 0x54,
	0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x09, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x0e, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x35,
	0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74,
	0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48,
	0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46,
	0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55,
	0x54, 0x46, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x61, 0x66, 0x65, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x61, 0x66, 0x65, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x49, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x2f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x22, 0x5f, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45,
	0x4f, 0x46, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x4f, 0x46, 0x22, 0x7d, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x44, 0x0a, 0x1a,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x6f, 0x0a, 0x1b, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x15, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x50, 0x77, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x54, 0x0a, 0x16, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a,
	0x17, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x08, 0x54, 0x61,
	0x67, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x8b, 0x03, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x83, 0x03,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x2b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x2c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x33,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x11, 0x0a,
	0x0b, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x72, 0x69, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x72, 0x69, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x68, 0x69, 0x6a,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x72, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3c, 0x0a,
	0x0f, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x79, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x79,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x10, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x65, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x32, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54,
	0x4c, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x6e, 0x6c,
	0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x35, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x53, 0x65, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2c, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4a, 0x41, 0x33, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4a, 0x41, 0x33, 0x12, 0x40, 0x0a, 0x1b, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x0e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xe6, 0x03, 0x0a, 0x0e, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x39, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0d, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x33, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x55, 0x72, 0x69, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x0e, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4d, 0x49, 0x4d, 0x45, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x49, 0x4d, 0x45, 0x22, 0xaf,
	0x01, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x43, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x50, 0x6b, 0x63,
	0x73, 0x31, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6b, 0x63, 0x73,
	0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xfe, 0x04, 0x0a, 0x13, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x4e, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55,
	0x52, 0x49, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x55, 0x52, 0x49, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x72, 0x6f,
	0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52,
	0x4c, 0x22, 0x6e, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x49,
	0x44, 0x22, 0x8e, 0x0a, 0x0a, 0x0c, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x75, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6a, 0x75,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x71, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x72,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x73,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x73, 0x18, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x0f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x68, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x76, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x4e, 0x53, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x44, 0x4e, 0x53, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x5a, 0x0a, 0x0e, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x48, 0x6f, 0x6f, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x75, 0x0a, 0x11, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x21, 0x0a,
	0x0b, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x26, 0x0a, 0x0c, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa4,
	0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x37, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b,
	0x02, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x61, 0x77, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x44, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x4e, 0x6f, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xd4, 0x01, 0x0a,
	0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61,
	0x77, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x46, 0x0a, 0x18, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x14, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x23, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x59, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x59, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x85, 0x01, 0x0a, 0x24, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x08,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x21, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x6f, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x74, 0x0a, 0x22, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x59, 0x61, 0x6d, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6d, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x59, 0x61, 0x6d,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x1d, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x38, 0x0a, 0x1e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x45, 0x0a, 0x21, 0x53,
	0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x7c, 0x0a, 0x22, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x27, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x62, 0x0a, 0x18, 0x59, 0x61, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x59, 0x61, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x59, 0x61, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x13,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x4b, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x27, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x52, 0x74, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x52,
	0x74, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x48, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x48, 0x6f, 0x70, 0x22, 0x94, 0x01, 0x0a,
	0x19, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59,
	0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c,
	0x69, 0x62, 0x73, 0x22, 0x54, 0x0a, 0x1a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x1e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29,
	0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x62, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x6c,
	0x61, 0x6e, 0x67, 0x4c, 0x69, 0x62, 0x73, 0x22, 0x5c, 0x0a, 0x1f, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x1f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6b, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1a, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x66, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x75, 0x66, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x4f, 0x46,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x4f, 0x46, 0x22, 0x55, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6d, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6d, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x64, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6d, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x50, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x23, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x77,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52,
	0x6f, 0x77, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x03, 0x43, 0x50, 0x45, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x01,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x03, 0x43, 0x50, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x43, 0x50, 0x45, 0x52, 0x03, 0x43, 0x50, 0x45, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x65, 0x62,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x65, 0x62, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4a,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0x70, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x7c, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xfc, 0x03, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x49, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x5a, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x7b, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0xb4, 0x02, 0x0a,
	0x14, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x49, 0x64, 0x22, 0xa8, 0x03, 0x0a, 0x0a, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x62, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x62, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x69, 0x67, 0x68,
	0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x69,
	0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x77, 0x52,
	0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x4c, 0x6f, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x47,
	0x0a, 0x0f, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x10, 0x53, 0x53, 0x41, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x49, 0x44, 0x22, 0x99, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x53,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x66, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd3, 0x01, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x41, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x61, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0f, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x61, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x44, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09,
	0x44, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x50, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x19, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72,
	0x64, 0x22, 0x45, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x3c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xac, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c,
	0x22, 0x5a, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xda, 0x01, 0x0a,
	0x15, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x9a, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x64, 0x22, 0x91, 0x01,
	0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x84, 0x03, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x70,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x6b, 0x69,
	0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x69,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52,
	0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x76, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xc9, 0x01, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x72,
	0x69, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x22, 0x9a, 0x02, 0x0a,
	0x16, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a,
	0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x44,
	0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x44, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe8, 0x02, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x29, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x2e, 0x0a,
	0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x03, 0x45, 0x6e, 0x76, 0x22, 0x3c, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x22, 0x2c, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x74,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x01, 0x0a,
	0x13, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x74,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x5f,
	0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a,
	0x35, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x6f,
	0x64, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x61, 0x6b, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x0b, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x53, 0x50, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4a, 0x53, 0x50, 0x58, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x50, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x53, 0x50, 0x58, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x48, 0x50, 0x10, 0x04, 0x2a, 0x54, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x65, 0x73, 0x52, 0x61, 0x77, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x65, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x58, 0x6f, 0x72, 0x52, 0x61, 0x77, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x58,
	0x6f, 0x72, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x10, 0x05, 0x32, 0xd6, 0xec, 0x01, 0x0a, 0x03,
	0x59, 0x61, 0x6b, 0x12, 0x2b, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x11, 0x59, 0x61, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x45, 0x63,
	0x68, 0x6f, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x4d, 0x49, 0x54, 0x4d, 0x12, 0x10, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74,
	0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x49,
	0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49,
	0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x49, 0x54, 0x4d, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x12, 0x27,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12,
	0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x65,
	0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x78, 0x65, 0x63, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d,
	0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x13, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x12, 0x45, 0x78, 0x65,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01,
	0x12, 0x63, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x28, 0x50, 0x6f, 0x70,
	0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x27, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x30, 0x01, 0x12, 0x2f, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x44, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x11, 0x55, 0x6e, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01,
	0x12, 0x4d, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x4e, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x66, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x26,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x6c,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x12,
	0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x12, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x79, 0x43, 0x57, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x15, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x53, 0x61, 0x76,
	0x65, 0x4e, 0x65, 0x77, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x60, 0x0a, 0x15, 0x53,
	0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5b, 0x0a,
	0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x1a, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x4c, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x58, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x14, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f,
	0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x11,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64,
	0x73, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x42, 0x61, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x62,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x45, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x6c, 0x0a, 0x1c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x64,
	0x0a, 0x17, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x0f,
	0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x49, 0x73,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x13,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x73, 0x0a, 0x1c,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x28, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6d, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x59, 0x61, 0x6d, 0x6c, 0x12,
	0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x59, 0x61, 0x6d, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x6f, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x16, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3d, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47,
	0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7c, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x77,
	0x0a, 0x29, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x70, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x41, 0x6c, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x1f, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x13,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x20,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x12, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x1a, 0x12, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x74,
	0x74, 0x69, 0x66, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x69, 0x66, 0x79, 0x48,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x53, 0x61,
	0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x1c, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x44, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x4f, 0x72, 0x43, 0x6f,
	0x70, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x4f, 0x72, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x53, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x17,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x1b, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x30, 0x01, 0x12, 0x4d, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30,
	0x01, 0x12, 0x39, 0x0a, 0x0f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x77, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x56, 0x4d, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x56,
	0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x59, 0x61, 0x6b, 0x6c, 0x61,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a,
	0x19, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x59, 0x61, 0x6b,
	0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64,
	0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x59, 0x61, 0x6b,
	0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b,
	0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1d, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b,
	0x6c, 0x61, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x0f, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x33, 0x0a,
	0x08, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x30, 0x01, 0x12, 0x31, 0x0a, 0x10, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x17, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x64, 0x0a,
	0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x20,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f,
	0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x57, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x76, 0x0a, 0x22, 0x50, 0x6f, 0x70, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x21, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3c, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x38, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e,
	0x75, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x73,
	0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x6e, 0x75, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x37, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x51, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x15, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x43, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x4e, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x36, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x12, 0x15,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x18, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x30, 0x01, 0x12, 0x4e, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x30, 0x01, 0x12, 0x4c, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x46, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12,
	0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x41, 0x0a,
	0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x16, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x36, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x12, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46,
	0x6f, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x33, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x59, 0x73, 0x6f, 0x47, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x59, 0x73, 0x6f, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x1a,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x1a,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x59, 0x73, 0x6f, 0x44, 0x75, 0x6d,
	0x70, 0x12, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f,
	0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x0d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x1a, 0x0d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57,
	0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65,
	0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57,
	0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x44, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59,
	0x61, 0x6b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x46, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x5d, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x27,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x4e, 0x53, 0x4c,
	0x6f, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x4e,
	0x53, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e,
	0x53, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44,
	0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x17, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x43, 0x4d, 0x50, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x49, 0x43, 0x4d, 0x50, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x16, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x22,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x21, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x65, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x46, 0x50,
	0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f, 0x63,
	0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53,
	0x52, 0x46, 0x50, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x06, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x32, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x76, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a,
	0x0d, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x73, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x12,
	0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x44, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x25,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12,
	0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x1a, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3f, 0x0a,
	0x0e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3c,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x6c, 0x61,
	0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x4b, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x47, 0x0a,
	0x15, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x4e, 0x65, 0x74, 0x52, 0x61, 0x77, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x52, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x63, 0x61, 0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x4e, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x49,
	0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a,
	0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x4f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x30, 0x01, 0x12, 0x2f,
	0x0a, 0x15, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x6d, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72,
	0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x46, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6f,
	0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x13, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4d, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30,
	0x01, 0x12, 0x5e, 0x0a, 0x15, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x75, 0x6c, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x75, 0x6c,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x75, 0x6c, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x12, 0x49,
	0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x45, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x16, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x16, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x12, 0x12,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x45, 0x78, 0x12, 0x61, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x49, 0x73, 0x53, 0x63, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x30, 0x01, 0x12, 0x41, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73,
	0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x56, 0x75, 0x6c,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x75, 0x6c,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x75,
	0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x54, 0x0a,
	0x12, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x5e,
	0x0a, 0x15, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x6d,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f,
	0x0a, 0x1a, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x47, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x4e, 0x53, 0x12, 0x1e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3f,
	0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x31,
	0x32, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x59, 0x61, 0x6b, 0x55, 0x52, 0x4c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x59,
	0x61, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x63, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x63, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x63, 0x61, 0x70,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x05, 0x50, 0x63, 0x61, 0x70,
	0x58, 0x12, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x63, 0x61, 0x70, 0x58, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x63, 0x61, 0x70, 0x58,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43, 0x50,
	0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43,
	0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x43, 0x50, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x18, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x10, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x63, 0x61, 0x6e, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x32, 0x12, 0x20, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x12, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x2b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x61, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d,
	0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x64, 0x0a,
	0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53,
	0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x41, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x62,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e,
	0x76, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x40, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x45, 0x6e, 0x76, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a, 0x7a,
	0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x74, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yakgrpc_proto_rawDescOnce sync.Once
	file_yakgrpc_proto_rawDescData = file_yakgrpc_proto_rawDesc
)

func file_yakgrpc_proto_rawDescGZIP() []byte {
	file_yakgrpc_proto_rawDescOnce.Do(func() {
		file_yakgrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_yakgrpc_proto_rawDescData)
	})
	return file_yakgrpc_proto_rawDescData
}

var file_yakgrpc_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yakgrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 615)
var file_yakgrpc_proto_goTypes = []interface{}{
	(ShellType)(0),   // 0: ypb.ShellType
	(ShellScript)(0), // 1: ypb.ShellScript
	(EncMode)(0),     // 2: ypb.EncMode
	(GenerateYakCodeByPacketRequest_Template)(0), // 3: ypb.GenerateYakCodeByPacketRequest.Template
	(*Empty)(nil),                                             // 4: ypb.Empty
	(*VersionResponse)(nil),                                   // 5: ypb.VersionResponse
	(*GeneralResponse)(nil),                                   // 6: ypb.GeneralResponse
	(*DeleteYakScriptRequest)(nil),                            // 7: ypb.DeleteYakScriptRequest
	(*ExecBatchYakScriptRequest)(nil),                         // 8: ypb.ExecBatchYakScriptRequest
	(*ExecBatchYakScriptResult)(nil),                          // 9: ypb.ExecBatchYakScriptResult
	(*GetYakScriptByIdRequest)(nil),                           // 10: ypb.GetYakScriptByIdRequest
	(*GetYakScriptByNameRequest)(nil),                         // 11: ypb.GetYakScriptByNameRequest
	(*GetYakScriptByOnlineIDRequest)(nil),                     // 12: ypb.GetYakScriptByOnlineIDRequest
	(*VerifySystemCertificateResponse)(nil),                   // 13: ypb.VerifySystemCertificateResponse
	(*GetSpaceEngineAccountStatusRequest)(nil),                // 14: ypb.GetSpaceEngineAccountStatusRequest
	(*GetSpaceEngineStatusRequest)(nil),                       // 15: ypb.GetSpaceEngineStatusRequest
	(*SpaceEngineStatus)(nil),                                 // 16: ypb.SpaceEngineStatus
	(*FetchPortAssetFromSpaceEngineRequest)(nil),              // 17: ypb.FetchPortAssetFromSpaceEngineRequest
	(*DeleteHybridScanTaskRequest)(nil),                       // 18: ypb.DeleteHybridScanTaskRequest
	(*HybridScanTask)(nil),                                    // 19: ypb.HybridScanTask
	(*QueryHybridScanTaskResponse)(nil),                       // 20: ypb.QueryHybridScanTaskResponse
	(*QueryHybridScanTaskRequest)(nil),                        // 21: ypb.QueryHybridScanTaskRequest
	(*HybridScanTaskFilter)(nil),                              // 22: ypb.HybridScanTaskFilter
	(*HybridScanResponse)(nil),                                // 23: ypb.HybridScanResponse
	(*HybridScanUpdateActiveTaskTable)(nil),                   // 24: ypb.HybridScanUpdateActiveTaskTable
	(*HybridScanInputTarget)(nil),                             // 25: ypb.HybridScanInputTarget
	(*HybridScanPluginConfig)(nil),                            // 26: ypb.HybridScanPluginConfig
	(*HybridScanRequest)(nil),                                 // 27: ypb.HybridScanRequest
	(*DuplexConnectionRequest)(nil),                           // 28: ypb.DuplexConnectionRequest
	(*DuplexConnectionResponse)(nil),                          // 29: ypb.DuplexConnectionResponse
	(*PcapMetadataRequest)(nil),                               // 30: ypb.PcapMetadataRequest
	(*PcapMetadata)(nil),                                      // 31: ypb.PcapMetadata
	(*QueryTrafficPacketRequest)(nil),                         // 32: ypb.QueryTrafficPacketRequest
	(*QueryTrafficTCPReassembledRequest)(nil),                 // 33: ypb.QueryTrafficTCPReassembledRequest
	(*TrafficSession)(nil),                                    // 34: ypb.TrafficSession
	(*QueryTrafficSessionResponse)(nil),                       // 35: ypb.QueryTrafficSessionResponse
	(*TrafficPacket)(nil),                                     // 36: ypb.TrafficPacket
	(*QueryTrafficPacketResponse)(nil),                        // 37: ypb.QueryTrafficPacketResponse
	(*TrafficTCPReassembled)(nil),                             // 38: ypb.TrafficTCPReassembled
	(*QueryTrafficTCPReassembledResponse)(nil),                // 39: ypb.QueryTrafficTCPReassembledResponse
	(*QueryTrafficSessionRequest)(nil),                        // 40: ypb.QueryTrafficSessionRequest
	(*PcapXRequest)(nil),                                      // 41: ypb.PcapXRequest
	(*SuricataConfig)(nil),                                    // 42: ypb.SuricataConfig
	(*PcapXResponse)(nil),                                     // 43: ypb.PcapXResponse
	(*RequestYakURLParams)(nil),                               // 44: ypb.RequestYakURLParams
	(*YakURL)(nil),                                            // 45: ypb.YakURL
	(*YakURLResource)(nil),                                    // 46: ypb.YakURLResource
	(*RequestYakURLResponse)(nil),                             // 47: ypb.RequestYakURLResponse
	(*PacketPrettifyHelperRequest)(nil),                       // 48: ypb.PacketPrettifyHelperRequest
	(*PacketPrettifyHelperResponse)(nil),                      // 49: ypb.PacketPrettifyHelperResponse
	(*DiagnoseNetworkDNSRequest)(nil),                         // 50: ypb.DiagnoseNetworkDNSRequest
	(*ResetGlobalNetworkConfigRequest)(nil),                   // 51: ypb.ResetGlobalNetworkConfigRequest
	(*GetGlobalNetworkConfigRequest)(nil),                     // 52: ypb.GetGlobalNetworkConfigRequest
	(*ValidP12PassWordRequest)(nil),                           // 53: ypb.ValidP12PassWordRequest
	(*ValidP12PassWordResponse)(nil),                          // 54: ypb.ValidP12PassWordResponse
	(*GlobalNetworkConfig)(nil),                               // 55: ypb.GlobalNetworkConfig
	(*AuthInfo)(nil),                                          // 56: ypb.AuthInfo
	(*ThirdPartyApplicationConfig)(nil),                       // 57: ypb.ThirdPartyApplicationConfig
	(*DiagnoseNetworkRequest)(nil),                            // 58: ypb.DiagnoseNetworkRequest
	(*DiagnoseNetworkResponse)(nil),                           // 59: ypb.DiagnoseNetworkResponse
	(*DisconnectVulinboxAgentRequest)(nil),                    // 60: ypb.DisconnectVulinboxAgentRequest
	(*GetRegisteredAgentRequest)(nil),                         // 61: ypb.GetRegisteredAgentRequest
	(*GetRegisteredAgentResponse)(nil),                        // 62: ypb.GetRegisteredAgentResponse
	(*SmokingEvaluatePluginRequest)(nil),                      // 63: ypb.SmokingEvaluatePluginRequest
	(*SmokingEvaluateResult)(nil),                             // 64: ypb.SmokingEvaluateResult
	(*SmokingEvaluatePluginResponse)(nil),                     // 65: ypb.SmokingEvaluatePluginResponse
	(*IsVulinboxReadyRequest)(nil),                            // 66: ypb.IsVulinboxReadyRequest
	(*IsVulinboxReadyResponse)(nil),                           // 67: ypb.IsVulinboxReadyResponse
	(*InstallVulinboxRequest)(nil),                            // 68: ypb.InstallVulinboxRequest
	(*StartVulinboxRequest)(nil),                              // 69: ypb.StartVulinboxRequest
	(*GenQualityInspectionReportRequest)(nil),                 // 70: ypb.GenQualityInspectionReportRequest
	(*DebugPluginRequest)(nil),                                // 71: ypb.DebugPluginRequest
	(*HTTPRequestBuilderResult)(nil),                          // 72: ypb.HTTPRequestBuilderResult
	(*HTTPRequestBuilderResponse)(nil),                        // 73: ypb.HTTPRequestBuilderResponse
	(*HTTPRequestBuilderParams)(nil),                          // 74: ypb.HTTPRequestBuilderParams
	(*ScreenRecorder)(nil),                                    // 75: ypb.ScreenRecorder
	(*QueryScreenRecorderRequest)(nil),                        // 76: ypb.QueryScreenRecorderRequest
	(*UploadScreenRecorderRequest)(nil),                       // 77: ypb.UploadScreenRecorderRequest
	(*GetOneScreenRecorderRequest)(nil),                       // 78: ypb.GetOneScreenRecorderRequest
	(*UpdateScreenRecorderRequest)(nil),                       // 79: ypb.UpdateScreenRecorderRequest
	(*QueryScreenRecorderResponse)(nil),                       // 80: ypb.QueryScreenRecorderResponse
	(*StartScrecorderRequest)(nil),                            // 81: ypb.StartScrecorderRequest
	(*InstallScrecorderRequest)(nil),                          // 82: ypb.InstallScrecorderRequest
	(*IsScrecorderReadyRequest)(nil),                          // 83: ypb.IsScrecorderReadyRequest
	(*IsScrecorderReadyResponse)(nil),                         // 84: ypb.IsScrecorderReadyResponse
	(*GetCVERequest)(nil),                                     // 85: ypb.GetCVERequest
	(*QueryCVERequest)(nil),                                   // 86: ypb.QueryCVERequest
	(*CWEDetail)(nil),                                         // 87: ypb.CWEDetail
	(*CVEDetailEx)(nil),                                       // 88: ypb.CVEDetailEx
	(*CVEDetail)(nil),                                         // 89: ypb.CVEDetail
	(*QueryCVEResponse)(nil),                                  // 90: ypb.QueryCVEResponse
	(*SaveTextToTemporalFileRequest)(nil),                     // 91: ypb.SaveTextToTemporalFileRequest
	(*SaveTextToTemporalFileResponse)(nil),                    // 92: ypb.SaveTextToTemporalFileResponse
	(*ImportChaosMakerRulesRequest)(nil),                      // 93: ypb.ImportChaosMakerRulesRequest
	(*ChaosMakerRuleGroup)(nil),                               // 94: ypb.ChaosMakerRuleGroup
	(*IsRemoteAddrAvailableRequest)(nil),                      // 95: ypb.IsRemoteAddrAvailableRequest
	(*IsRemoteAddrAvailableResponse)(nil),                     // 96: ypb.IsRemoteAddrAvailableResponse
	(*ExecuteChaosMakerRuleRequest)(nil),                      // 97: ypb.ExecuteChaosMakerRuleRequest
	(*ChaosMakerRule)(nil),                                    // 98: ypb.ChaosMakerRule
	(*QueryChaosMakerRuleResponse)(nil),                       // 99: ypb.QueryChaosMakerRuleResponse
	(*DeleteChaosMakerRuleByIDRequest)(nil),                   // 100: ypb.DeleteChaosMakerRuleByIDRequest
	(*QueryChaosMakerRuleRequest)(nil),                        // 101: ypb.QueryChaosMakerRuleRequest
	(*ImportsProfileDatabaseRequest)(nil),                     // 102: ypb.ImportsProfileDatabaseRequest
	(*ExportsProfileDatabaseRequest)(nil),                     // 103: ypb.ExportsProfileDatabaseRequest
	(*UpdateCVEDatabaseRequest)(nil),                          // 104: ypb.UpdateCVEDatabaseRequest
	(*IsCVEDatabaseReadyResponse)(nil),                        // 105: ypb.IsCVEDatabaseReadyResponse
	(*IsCVEDatabaseReadyRequest)(nil),                         // 106: ypb.IsCVEDatabaseReadyRequest
	(*MITMRuleExtractedData)(nil),                             // 107: ypb.MITMRuleExtractedData
	(*QueryMITMRuleExtractedDataResponse)(nil),                // 108: ypb.QueryMITMRuleExtractedDataResponse
	(*QueryMITMRuleExtractedDataRequest)(nil),                 // 109: ypb.QueryMITMRuleExtractedDataRequest
	(*ExtractedDataFilter)(nil),                               // 110: ypb.ExtractedDataFilter
	(*ExportMITMRuleExtractedDataRequest)(nil),                // 111: ypb.ExportMITMRuleExtractedDataRequest
	(*ExportMITMRuleExtractedDataResponse)(nil),               // 112: ypb.ExportMITMRuleExtractedDataResponse
	(*ExportProjectRequest)(nil),                              // 113: ypb.ExportProjectRequest
	(*ProjectIOProgress)(nil),                                 // 114: ypb.ProjectIOProgress
	(*ImportProjectRequest)(nil),                              // 115: ypb.ImportProjectRequest
	(*IsPrivilegedForNetRawResponse)(nil),                     // 116: ypb.IsPrivilegedForNetRawResponse
	(*RemoveProjectRequest)(nil),                              // 117: ypb.RemoveProjectRequest
	(*IsProjectNameValidRequest)(nil),                         // 118: ypb.IsProjectNameValidRequest
	(*NewProjectRequest)(nil),                                 // 119: ypb.NewProjectRequest
	(*NewProjectResponse)(nil),                                // 120: ypb.NewProjectResponse
	(*GetProjectsRequest)(nil),                                // 121: ypb.GetProjectsRequest
	(*ProjectDescription)(nil),                                // 122: ypb.ProjectDescription
	(*GetProjectsResponse)(nil),                               // 123: ypb.GetProjectsResponse
	(*SetCurrentProjectRequest)(nil),                          // 124: ypb.SetCurrentProjectRequest
	(*DeleteProjectRequest)(nil),                              // 125: ypb.DeleteProjectRequest
	(*QueryProjectDetailRequest)(nil),                         // 126: ypb.QueryProjectDetailRequest
	(*AttachCombinedOutputRequest)(nil),                       // 127: ypb.AttachCombinedOutputRequest
	(*YaklangShellRequest)(nil),                               // 128: ypb.YaklangShellRequest
	(*YaklangShellKVPair)(nil),                                // 129: ypb.YaklangShellKVPair
	(*YaklangShellResponse)(nil),                              // 130: ypb.YaklangShellResponse
	(*ResetAndInvalidUserDataRequest)(nil),                    // 131: ypb.ResetAndInvalidUserDataRequest
	(*RegisterFacadesHTTPRequest)(nil),                        // 132: ypb.RegisterFacadesHTTPRequest
	(*RegisterFacadesHTTPResponse)(nil),                       // 133: ypb.RegisterFacadesHTTPResponse
	(*GetHTTPPacketBodyRequest)(nil),                          // 134: ypb.GetHTTPPacketBodyRequest
	(*DownloadBodyByHTTPFlowIDRequest)(nil),                   // 135: ypb.DownloadBodyByHTTPFlowIDRequest
	(*Bytes)(nil),                                             // 136: ypb.Bytes
	(*ExtractDataResponse)(nil),                               // 137: ypb.ExtractDataResponse
	(*SaveFuzzerLabelRequest)(nil),                            // 138: ypb.SaveFuzzerLabelRequest
	(*QueryFuzzerLabelResponse)(nil),                          // 139: ypb.QueryFuzzerLabelResponse
	(*FuzzerLabel)(nil),                                       // 140: ypb.FuzzerLabel
	(*DeleteFuzzerLabelRequest)(nil),                          // 141: ypb.DeleteFuzzerLabelRequest
	(*SaveFuzzerConfigRequest)(nil),                           // 142: ypb.SaveFuzzerConfigRequest
	(*QueryFuzzerConfigRequest)(nil),                          // 143: ypb.QueryFuzzerConfigRequest
	(*QueryFuzzerConfigResponse)(nil),                         // 144: ypb.QueryFuzzerConfigResponse
	(*FuzzerConfig)(nil),                                      // 145: ypb.FuzzerConfig
	(*DeleteFuzzerConfigRequest)(nil),                         // 146: ypb.DeleteFuzzerConfigRequest
	(*ExtractDataRequest)(nil),                                // 147: ypb.ExtractDataRequest
	(*GenerateExtractRuleRequest)(nil),                        // 148: ypb.GenerateExtractRuleRequest
	(*GenerateExtractRuleResponse)(nil),                       // 149: ypb.GenerateExtractRuleResponse
	(*GetMachineIDResponse)(nil),                              // 150: ypb.GetMachineIDResponse
	(*QueryHTTPFuzzerResponseByTaskIdRequest)(nil),            // 151: ypb.QueryHTTPFuzzerResponseByTaskIdRequest
	(*QueryHTTPFuzzerResponseByTaskIdResponse)(nil),           // 152: ypb.QueryHTTPFuzzerResponseByTaskIdResponse
	(*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest)(nil),  // 153: ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest
	(*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest)(nil), // 154: ypb.DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest
	(*ClientWebsocketRequest)(nil),                            // 155: ypb.ClientWebsocketRequest
	(*ClientWebsocketResponse)(nil),                           // 156: ypb.ClientWebsocketResponse
	(*DefaultProxyResult)(nil),                                // 157: ypb.DefaultProxyResult
	(*ExecPacketScanRequest)(nil),                             // 158: ypb.ExecPacketScanRequest
	(*Range)(nil),                                             // 159: ypb.Range
	(*YaklangInspectInformationRequest)(nil),                  // 160: ypb.YaklangInspectInformationRequest
	(*YaklangLanguageSuggestionRequest)(nil),                  // 161: ypb.YaklangLanguageSuggestionRequest
	(*YaklangInformationKV)(nil),                              // 162: ypb.YaklangInformationKV
	(*YaklangInformation)(nil),                                // 163: ypb.YaklangInformation
	(*YaklangLanguageSuggestionResponse)(nil),                 // 164: ypb.YaklangLanguageSuggestionResponse
	(*YaklangLanguageFindResponse)(nil),                       // 165: ypb.YaklangLanguageFindResponse
	(*YaklangInspectInformationResponse)(nil),                 // 166: ypb.YaklangInspectInformationResponse
	(*YakUIInfo)(nil),                                         // 167: ypb.YakUIInfo
	(*YakRiskInfo)(nil),                                       // 168: ypb.YakRiskInfo
	(*YaklangGetCliCodeFromDatabaseResponse)(nil),             // 169: ypb.YaklangGetCliCodeFromDatabaseResponse
	(*YaklangGetCliCodeFromDatabaseRequest)(nil),              // 170: ypb.YaklangGetCliCodeFromDatabaseRequest
	(*StaticAnalyzeErrorRequest)(nil),                         // 171: ypb.StaticAnalyzeErrorRequest
	(*YaklangCompileAndFormatRequest)(nil),                    // 172: ypb.YaklangCompileAndFormatRequest
	(*YaklangCompileAndFormatResponse)(nil),                   // 173: ypb.YaklangCompileAndFormatResponse
	(*StaticAnalyzeErrorResult)(nil),                          // 174: ypb.StaticAnalyzeErrorResult
	(*StaticAnalyzeErrorResponse)(nil),                        // 175: ypb.StaticAnalyzeErrorResponse
	(*SavePayloadProgress)(nil),                               // 176: ypb.SavePayloadProgress
	(*DeletePluginByUserIDRequest)(nil),                       // 177: ypb.DeletePluginByUserIDRequest
	(*DeleteLocalPluginsByWhereRequest)(nil),                  // 178: ypb.DeleteLocalPluginsByWhereRequest
	(*DownloadOnlinePluginProgress)(nil),                      // 179: ypb.DownloadOnlinePluginProgress
	(*DownloadOnlinePluginByTokenRequest)(nil),                // 180: ypb.DownloadOnlinePluginByTokenRequest
	(*DownloadOnlinePluginByIdRequest)(nil),                   // 181: ypb.DownloadOnlinePluginByIdRequest
	(*DownloadOnlinePluginByIdsRequest)(nil),                  // 182: ypb.DownloadOnlinePluginByIdsRequest
	(*DownloadOnlinePluginsRequest)(nil),                      // 183: ypb.DownloadOnlinePluginsRequest
	(*DownloadOnlinePluginByScriptNamesRequest)(nil),          // 184: ypb.DownloadOnlinePluginByScriptNamesRequest
	(*DownloadOnlinePluginByScriptNamesResponse)(nil),         // 185: ypb.DownloadOnlinePluginByScriptNamesResponse
	(*DownloadOnlinePluginByScriptName)(nil),                  // 186: ypb.DownloadOnlinePluginByScriptName
	(*DownloadOnlinePluginByUUIDRequest)(nil),                 // 187: ypb.DownloadOnlinePluginByUUIDRequest
	(*OnlineProfile)(nil),                                     // 188: ypb.OnlineProfile
	(*SetKeyRequest)(nil),                                     // 189: ypb.SetKeyRequest
	(*GetKeyRequest)(nil),                                     // 190: ypb.GetKeyRequest
	(*GetKeyResult)(nil),                                      // 191: ypb.GetKeyResult
	(*GeneralStorage)(nil),                                    // 192: ypb.GeneralStorage
	(*GetProcessEnvKeyResult)(nil),                            // 193: ypb.GetProcessEnvKeyResult
	(*SetSystemProxyRequest)(nil),                             // 194: ypb.SetSystemProxyRequest
	(*GetSystemProxyResult)(nil),                              // 195: ypb.GetSystemProxyResult
	(*GetExecBatchYakScriptUnfinishedTaskByUidRequest)(nil),   // 196: ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	(*RecoverExecBatchYakScriptUnfinishedTaskRequest)(nil),    // 197: ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	(*ExecBatchYakScriptUnfinishedTask)(nil),                  // 198: ypb.ExecBatchYakScriptUnfinishedTask
	(*SimpleDetectUnfinishedTask)(nil),                        // 199: ypb.SimpleDetectUnfinishedTask
	(*GetExecBatchYakScriptUnfinishedTaskResponse)(nil),       // 200: ypb.GetExecBatchYakScriptUnfinishedTaskResponse
	(*GetSimpleDetectUnfinishedTaskResponse)(nil),             // 201: ypb.GetSimpleDetectUnfinishedTaskResponse
	(*UnfinishedTaskFilter)(nil),                              // 202: ypb.UnfinishedTaskFilter
	(*QueryUnfinishedTaskRequest)(nil),                        // 203: ypb.QueryUnfinishedTaskRequest
	(*DeleteUnfinishedTaskRequest)(nil),                       // 204: ypb.DeleteUnfinishedTaskRequest
	(*UnfinishedTask)(nil),                                    // 205: ypb.UnfinishedTask
	(*QueryUnfinishedTaskResponse)(nil),                       // 206: ypb.QueryUnfinishedTaskResponse
	(*GetUnfinishedTaskDetailByIdRequest)(nil),                // 207: ypb.GetUnfinishedTaskDetailByIdRequest
	(*RecoverUnfinishedTaskRequest)(nil),                      // 208: ypb.RecoverUnfinishedTaskRequest
	(*FixUploadPacketRequest)(nil),                            // 209: ypb.FixUploadPacketRequest
	(*FixUploadPacketResponse)(nil),                           // 210: ypb.FixUploadPacketResponse
	(*IsMultipartFormDataRequestResult)(nil),                  // 211: ypb.IsMultipartFormDataRequestResult
	(*AutoDecodeRequest)(nil),                                 // 212: ypb.AutoDecodeRequest
	(*AutoDecodeResult)(nil),                                  // 213: ypb.AutoDecodeResult
	(*AutoDecodeResponse)(nil),                                // 214: ypb.AutoDecodeResponse
	(*ExtractDataToFileResult)(nil),                           // 215: ypb.ExtractDataToFileResult
	(*GetYakScriptTagsResponse)(nil),                          // 216: ypb.GetYakScriptTagsResponse
	(*Tags)(nil),                                              // 217: ypb.Tags
	(*QueryYakScriptLocalAndUserRequest)(nil),                 // 218: ypb.QueryYakScriptLocalAndUserRequest
	(*QueryYakScriptLocalAndUserResponse)(nil),                // 219: ypb.QueryYakScriptLocalAndUserResponse
	(*QueryYakScriptByOnlineGroupRequest)(nil),                // 220: ypb.QueryYakScriptByOnlineGroupRequest
	(*QueryYakScriptByNamesRequest)(nil),                      // 221: ypb.QueryYakScriptByNamesRequest
	(*QueryYakScriptByIsCoreRequest)(nil),                     // 222: ypb.QueryYakScriptByIsCoreRequest
	(*QueryYakScriptByNamesResponse)(nil),                     // 223: ypb.QueryYakScriptByNamesResponse
	(*QueryYakScriptByIsCoreResponse)(nil),                    // 224: ypb.QueryYakScriptByIsCoreResponse
	(*QueryYakScriptRiskDetailByCWERequest)(nil),              // 225: ypb.QueryYakScriptRiskDetailByCWERequest
	(*QueryYakScriptRiskDetailByCWEResponse)(nil),             // 226: ypb.QueryYakScriptRiskDetailByCWEResponse
	(*YakScriptRiskTypeListResponse)(nil),                     // 227: ypb.YakScriptRiskTypeListResponse
	(*RiskTypeLists)(nil),                                     // 228: ypb.RiskTypeLists
	(*ExtractDataToFileRequest)(nil),                          // 229: ypb.ExtractDataToFileRequest
	(*ExtractableData)(nil),                                   // 230: ypb.ExtractableData
	(*MITMContentReplacers)(nil),                              // 231: ypb.MITMContentReplacers
	(*ImportMITMReplacerRulesRequest)(nil),                    // 232: ypb.ImportMITMReplacerRulesRequest
	(*ExportMITMReplacerRulesResponse)(nil),                   // 233: ypb.ExportMITMReplacerRulesResponse
	(*ExecYakitPluginsByYakScriptFilterRequest)(nil),          // 234: ypb.ExecYakitPluginsByYakScriptFilterRequest
	(*GenerateYakCodeByPacketRequest)(nil),                    // 235: ypb.GenerateYakCodeByPacketRequest
	(*GenerateCSRFPocByPacketRequest)(nil),                    // 236: ypb.GenerateCSRFPocByPacketRequest
	(*GenerateCSRFPocByPacketResponse)(nil),                   // 237: ypb.GenerateCSRFPocByPacketResponse
	(*GenerateYakCodeByPacketResponse)(nil),                   // 238: ypb.GenerateYakCodeByPacketResponse
	(*QueryReportRequest)(nil),                                // 239: ypb.QueryReportRequest
	(*DeleteReportRequest)(nil),                               // 240: ypb.DeleteReportRequest
	(*QueryReportsResponse)(nil),                              // 241: ypb.QueryReportsResponse
	(*QueryReportsRequest)(nil),                               // 242: ypb.QueryReportsRequest
	(*Report)(nil),                                            // 243: ypb.Report
	(*SetTagForHTTPFlowRequest)(nil),                          // 244: ypb.SetTagForHTTPFlowRequest
	(*CheckSetTagsHTTPFlow)(nil),                              // 245: ypb.CheckSetTagsHTTPFlow
	(*RequireICMPRandomLengthResponse)(nil),                   // 246: ypb.RequireICMPRandomLengthResponse
	(*RandomPortTriggerNotification)(nil),                     // 247: ypb.RandomPortTriggerNotification
	(*QueryRandomPortTriggerRequest)(nil),                     // 248: ypb.QueryRandomPortTriggerRequest
	(*RandomPortInfo)(nil),                                    // 249: ypb.RandomPortInfo
	(*DeleteHistoryHTTPFuzzerTaskRequest)(nil),                // 250: ypb.DeleteHistoryHTTPFuzzerTaskRequest
	(*RiskTableStats)(nil),                                    // 251: ypb.RiskTableStats
	(*MITMCert)(nil),                                          // 252: ypb.MITMCert
	(*FieldName)(nil),                                         // 253: ypb.FieldName
	(*Fields)(nil),                                            // 254: ypb.Fields
	(*YsoOption)(nil),                                         // 255: ypb.YsoOption
	(*YsoOptionsWithVerbose)(nil),                             // 256: ypb.YsoOptionsWithVerbose
	(*YsoOptions)(nil),                                        // 257: ypb.YsoOptions
	(*YsoClassGeneraterOptionsWithVerbose)(nil),               // 258: ypb.YsoClassGeneraterOptionsWithVerbose
	(*YsoClassOptionsResponseWithVerbose)(nil),                // 259: ypb.YsoClassOptionsResponseWithVerbose
	(*YsoClassGeneraterOptions)(nil),                          // 260: ypb.YsoClassGeneraterOptions
	(*YsoClassOptionsResponse)(nil),                           // 261: ypb.YsoClassOptionsResponse
	(*YsoOptionsRequerstWithVerbose)(nil),                     // 262: ypb.YsoOptionsRequerstWithVerbose
	(*YsoOptionsRequerst)(nil),                                // 263: ypb.YsoOptionsRequerst
	(*YsoBytesObject)(nil),                                    // 264: ypb.YsoBytesObject
	(*YsoDumpResponse)(nil),                                   // 265: ypb.YsoDumpResponse
	(*YsoCodeResponse)(nil),                                   // 266: ypb.YsoCodeResponse
	(*YsoBytesResponse)(nil),                                  // 267: ypb.YsoBytesResponse
	(*BytesToBase64Request)(nil),                              // 268: ypb.BytesToBase64Request
	(*BytesToBase64Response)(nil),                             // 269: ypb.BytesToBase64Response
	(*QueryICMPTriggerRequest)(nil),                           // 270: ypb.QueryICMPTriggerRequest
	(*QueryICMPTriggerResponse)(nil),                          // 271: ypb.QueryICMPTriggerResponse
	(*QuerySupportedDnsLogPlatformsResponse)(nil),             // 272: ypb.QuerySupportedDnsLogPlatformsResponse
	(*ICMPTriggerNotification)(nil),                           // 273: ypb.ICMPTriggerNotification
	(*GetHistoryHTTPFuzzerTaskRequest)(nil),                   // 274: ypb.GetHistoryHTTPFuzzerTaskRequest
	(*HistoryHTTPFuzzerTaskDetail)(nil),                       // 275: ypb.HistoryHTTPFuzzerTaskDetail
	(*HistoryHTTPFuzzerTask)(nil),                             // 276: ypb.HistoryHTTPFuzzerTask
	(*HistoryHTTPFuzzerTasks)(nil),                            // 277: ypb.HistoryHTTPFuzzerTasks
	(*HistoryHTTPFuzzerTasksResponse)(nil),                    // 278: ypb.HistoryHTTPFuzzerTasksResponse
	(*QueryHistoryHTTPFuzzerTaskExParams)(nil),                // 279: ypb.QueryHistoryHTTPFuzzerTaskExParams
	(*ExecutePacketYakScriptParams)(nil),                      // 280: ypb.ExecutePacketYakScriptParams
	(*ExecuteBatchPacketYakScriptParams)(nil),                 // 281: ypb.ExecuteBatchPacketYakScriptParams
	(*WebShell)(nil),                                          // 282: ypb.WebShell
	(*ShellGenerate)(nil),                                     // 283: ypb.ShellGenerate
	(*ShellOptions)(nil),                                      // 284: ypb.ShellOptions
	(*WebShellRequest)(nil),                                   // 285: ypb.WebShellRequest
	(*WebShellResponse)(nil),                                  // 286: ypb.WebShellResponse
	(*QueryWebShellsRequest)(nil),                             // 287: ypb.QueryWebShellsRequest
	(*QueryWebShellsResponse)(nil),                            // 288: ypb.QueryWebShellsResponse
	(*UpdateWebShellRequest)(nil),                             // 289: ypb.UpdateWebShellRequest
	(*DeleteWebShellRequest)(nil),                             // 290: ypb.DeleteWebShellRequest
	(*YakDNSLogBridgeAddr)(nil),                               // 291: ypb.YakDNSLogBridgeAddr
	(*RequireDNSLogDomainByScriptRequest)(nil),                // 292: ypb.RequireDNSLogDomainByScriptRequest
	(*QueryDNSLogByTokenRequest)(nil),                         // 293: ypb.QueryDNSLogByTokenRequest
	(*QueryDNSLogByTokenResponse)(nil),                        // 294: ypb.QueryDNSLogByTokenResponse
	(*DNSLogEvent)(nil),                                       // 295: ypb.DNSLogEvent
	(*DNSLogRootDomain)(nil),                                  // 296: ypb.DNSLogRootDomain
	(*GetGlobalReverseServerResponse)(nil),                    // 297: ypb.GetGlobalReverseServerResponse
	(*AvailableLocalAddrResponse)(nil),                        // 298: ypb.AvailableLocalAddrResponse
	(*NetInterface)(nil),                                      // 299: ypb.NetInterface
	(*ConfigGlobalReverseParams)(nil),                         // 300: ypb.ConfigGlobalReverseParams
	(*DeleteRiskRequest)(nil),                                 // 301: ypb.DeleteRiskRequest
	(*QueryRiskRequest)(nil),                                  // 302: ypb.QueryRiskRequest
	(*Risk)(nil),                                              // 303: ypb.Risk
	(*QueryRisksRequest)(nil),                                 // 304: ypb.QueryRisksRequest
	(*QueryRisksResponse)(nil),                                // 305: ypb.QueryRisksResponse
	(*QueryNewRiskRequest)(nil),                               // 306: ypb.QueryNewRiskRequest
	(*QueryNewRiskResponse)(nil),                              // 307: ypb.QueryNewRiskResponse
	(*QueryRiskTagsResponse)(nil),                             // 308: ypb.QueryRiskTagsResponse
	(*RiskFieldGroupResponse)(nil),                            // 309: ypb.RiskFieldGroupResponse
	(*FieldGroup)(nil),                                        // 310: ypb.FieldGroup
	(*NewRisk)(nil),                                           // 311: ypb.NewRisk
	(*NewRiskReadRequest)(nil),                                // 312: ypb.NewRiskReadRequest
	(*UploadRiskToOnlineRequest)(nil),                         // 313: ypb.UploadRiskToOnlineRequest
	(*SetTagForRiskRequest)(nil),                              // 314: ypb.SetTagForRiskRequest
	(*VerifyTunnelServerDomainParams)(nil),                    // 315: ypb.VerifyTunnelServerDomainParams
	(*VerifyTunnelServerDomainResponse)(nil),                  // 316: ypb.VerifyTunnelServerDomainResponse
	(*GetTunnelServerExternalIPParams)(nil),                   // 317: ypb.GetTunnelServerExternalIPParams
	(*GetTunnelServerExternalIPResponse)(nil),                 // 318: ypb.GetTunnelServerExternalIPResponse
	(*StartFacadesParams)(nil),                                // 319: ypb.StartFacadesParams
	(*ApplyClassToFacadesParamsWithVerbose)(nil),              // 320: ypb.ApplyClassToFacadesParamsWithVerbose
	(*ApplyClassToFacadesParams)(nil),                         // 321: ypb.ApplyClassToFacadesParams
	(*StartFacadesWithYsoParams)(nil),                         // 322: ypb.StartFacadesWithYsoParams
	(*Tree)(nil),                                              // 323: ypb.Tree
	(*GetAvailableBruteTypesResponse)(nil),                    // 324: ypb.GetAvailableBruteTypesResponse
	(*StartBruteParams)(nil),                                  // 325: ypb.StartBruteParams
	(*HTTPRequestMutateParams)(nil),                           // 326: ypb.HTTPRequestMutateParams
	(*HTTPResponseMutateParams)(nil),                          // 327: ypb.HTTPResponseMutateParams
	(*MutateResult)(nil),                                      // 328: ypb.MutateResult
	(*QueryHostsRequest)(nil),                                 // 329: ypb.QueryHostsRequest
	(*DeleteHostsRequest)(nil),                                // 330: ypb.DeleteHostsRequest
	(*QueryHostsResponse)(nil),                                // 331: ypb.QueryHostsResponse
	(*QueryDomainsRequest)(nil),                               // 332: ypb.QueryDomainsRequest
	(*DeleteDomainsRequest)(nil),                              // 333: ypb.DeleteDomainsRequest
	(*QueryDomainsResponse)(nil),                              // 334: ypb.QueryDomainsResponse
	(*Domain)(nil),                                            // 335: ypb.Domain
	(*QueryPortsGroupResponse)(nil),                           // 336: ypb.QueryPortsGroupResponse
	(*PortsGroup)(nil),                                        // 337: ypb.PortsGroup
	(*GroupList)(nil),                                         // 338: ypb.GroupList
	(*Host)(nil),                                              // 339: ypb.Host
	(*DownloadReportRequest)(nil),                             // 340: ypb.DownloadReportRequest
	(*DeleteYakScriptExecResultRequest)(nil),                  // 341: ypb.DeleteYakScriptExecResultRequest
	(*YakScriptNames)(nil),                                    // 342: ypb.YakScriptNames
	(*QueryYakScriptExecResultRequest)(nil),                   // 343: ypb.QueryYakScriptExecResultRequest
	(*QueryYakScriptExecResultResponse)(nil),                  // 344: ypb.QueryYakScriptExecResultResponse
	(*GenerateWebsiteTreeResponse)(nil),                       // 345: ypb.GenerateWebsiteTreeResponse
	(*GenerateWebsiteTreeRequest)(nil),                        // 346: ypb.GenerateWebsiteTreeRequest
	(*StartBasicCrawlerRequest)(nil),                          // 347: ypb.StartBasicCrawlerRequest
	(*HTTPCookieSetting)(nil),                                 // 348: ypb.HTTPCookieSetting
	(*HTTPCookie)(nil),                                        // 349: ypb.HTTPCookie
	(*ExportYakScriptRequest)(nil),                            // 350: ypb.ExportYakScriptRequest
	(*ExportYakScriptStreamRequest)(nil),                      // 351: ypb.ExportYakScriptStreamRequest
	(*ImportYakScriptStreamRequest)(nil),                      // 352: ypb.ImportYakScriptStreamRequest
	(*ExportYakScriptResponse)(nil),                           // 353: ypb.ExportYakScriptResponse
	(*GetMarkdownDocumentResponse)(nil),                       // 354: ypb.GetMarkdownDocumentResponse
	(*GetMarkdownDocumentRequest)(nil),                        // 355: ypb.GetMarkdownDocumentRequest
	(*SaveMarkdownDocumentRequest)(nil),                       // 356: ypb.SaveMarkdownDocumentRequest
	(*GroupNames)(nil),                                        // 357: ypb.GroupNames
	(*QueryGroupsByYakScriptIdRequest)(nil),                   // 358: ypb.QueryGroupsByYakScriptIdRequest
	(*MenuItem)(nil),                                          // 359: ypb.MenuItem
	(*BatchExecutionPluginFilter)(nil),                        // 360: ypb.BatchExecutionPluginFilter
	(*MenuItemGroup)(nil),                                     // 361: ypb.MenuItemGroup
	(*GetMenuItemByIdRequest)(nil),                            // 362: ypb.GetMenuItemByIdRequest
	(*MenuByGroup)(nil),                                       // 363: ypb.MenuByGroup
	(*YakScriptIsInMenuRequest)(nil),                          // 364: ypb.YakScriptIsInMenuRequest
	(*RemoveFromMenuRequest)(nil),                             // 365: ypb.RemoveFromMenuRequest
	(*AddToMenuRequest)(nil),                                  // 366: ypb.AddToMenuRequest
	(*AddMenuRequest)(nil),                                    // 367: ypb.AddMenuRequest
	(*QueryAllMenuItemRequest)(nil),                           // 368: ypb.QueryAllMenuItemRequest
	(*ImportMenuItemRequest)(nil),                             // 369: ypb.ImportMenuItemRequest
	(*ExportMenuItemResult)(nil),                              // 370: ypb.ExportMenuItemResult
	(*AddToNavigationRequest)(nil),                            // 371: ypb.AddToNavigationRequest
	(*NavigationList)(nil),                                    // 372: ypb.NavigationList
	(*NavigationItem)(nil),                                    // 373: ypb.NavigationItem
	(*GetAllNavigationRequest)(nil),                           // 374: ypb.GetAllNavigationRequest
	(*GetAllNavigationItemResponse)(nil),                      // 375: ypb.GetAllNavigationItemResponse
	(*AddOneNavigationRequest)(nil),                           // 376: ypb.AddOneNavigationRequest
	(*QueryNavigationGroupsRequest)(nil),                      // 377: ypb.QueryNavigationGroupsRequest
	(*UpdateFromYakitResourceRequest)(nil),                    // 378: ypb.UpdateFromYakitResourceRequest
	(*UpdateFromGithubRequest)(nil),                           // 379: ypb.UpdateFromGithubRequest
	(*SimpleScript)(nil),                                      // 380: ypb.SimpleScript
	(*LastRecord)(nil),                                        // 381: ypb.LastRecord
	(*RecordPortScanRequest)(nil),                             // 382: ypb.RecordPortScanRequest
	(*CreatReportRequest)(nil),                                // 383: ypb.CreatReportRequest
	(*PortScanRequest)(nil),                                   // 384: ypb.PortScanRequest
	(*DeletePortsRequest)(nil),                                // 385: ypb.DeletePortsRequest
	(*QueryPortsRequest)(nil),                                 // 386: ypb.QueryPortsRequest
	(*QueryPortsResponse)(nil),                                // 387: ypb.QueryPortsResponse
	(*Port)(nil),                                              // 388: ypb.Port
	(*YakitCompletionRawResponse)(nil),                        // 389: ypb.YakitCompletionRawResponse
	(*GetYakVMBuildInMethodCompletionRequest)(nil),            // 390: ypb.GetYakVMBuildInMethodCompletionRequest
	(*SuggestionDescription)(nil),                             // 391: ypb.SuggestionDescription
	(*MethodSuggestion)(nil),                                  // 392: ypb.MethodSuggestion
	(*GetYakVMBuildInMethodCompletionResponse)(nil),           // 393: ypb.GetYakVMBuildInMethodCompletionResponse
	(*RenameRequest)(nil),                                     // 394: ypb.RenameRequest
	(*NameRequest)(nil),                                       // 395: ypb.NameRequest
	(*PayloadGroupNode)(nil),                                  // 396: ypb.PayloadGroupNode
	(*GetAllPayloadGroupResponse)(nil),                        // 397: ypb.GetAllPayloadGroupResponse
	(*UpdateAllPayloadGroupRequest)(nil),                      // 398: ypb.UpdateAllPayloadGroupRequest
	(*SavePayloadRequest)(nil),                                // 399: ypb.SavePayloadRequest
	(*UpdatePayloadRequest)(nil),                              // 400: ypb.UpdatePayloadRequest
	(*UpdatePayloadToFileRequest)(nil),                        // 401: ypb.UpdatePayloadToFileRequest
	(*BackUpOrCopyPayloadsRequest)(nil),                       // 402: ypb.BackUpOrCopyPayloadsRequest
	(*DeletePayloadByGroupRequest)(nil),                       // 403: ypb.DeletePayloadByGroupRequest
	(*DeletePayloadRequest)(nil),                              // 404: ypb.DeletePayloadRequest
	(*QueryPayloadFromFileRequest)(nil),                       // 405: ypb.QueryPayloadFromFileRequest
	(*QueryPayloadFromFileResponse)(nil),                      // 406: ypb.QueryPayloadFromFileResponse
	(*QueryPayloadRequest)(nil),                               // 407: ypb.QueryPayloadRequest
	(*QueryPayloadResponse)(nil),                              // 408: ypb.QueryPayloadResponse
	(*Payload)(nil),                                           // 409: ypb.Payload
	(*GetAllPayloadRequest)(nil),                              // 410: ypb.GetAllPayloadRequest
	(*GetAllPayloadResponse)(nil),                             // 411: ypb.GetAllPayloadResponse
	(*GetAllPayloadFromFileResponse)(nil),                     // 412: ypb.GetAllPayloadFromFileResponse
	(*QueryYakScriptRequest)(nil),                             // 413: ypb.QueryYakScriptRequest
	(*PluginGroup)(nil),                                       // 414: ypb.PluginGroup
	(*QueryYakScriptResponse)(nil),                            // 415: ypb.QueryYakScriptResponse
	(*YakScriptParam)(nil),                                    // 416: ypb.YakScriptParam
	(*YakScript)(nil),                                         // 417: ypb.YakScript
	(*Collaborator)(nil),                                      // 418: ypb.Collaborator
	(*SaveNewYakScriptRequest)(nil),                           // 419: ypb.SaveNewYakScriptRequest
	(*SaveYakScriptToOnlineRequest)(nil),                      // 420: ypb.SaveYakScriptToOnlineRequest
	(*SaveYakScriptToOnlineResponse)(nil),                     // 421: ypb.SaveYakScriptToOnlineResponse
	(*ToOnlineResult)(nil),                                    // 422: ypb.ToOnlineResult
	(*ExportLocalYakScriptRequest)(nil),                       // 423: ypb.ExportLocalYakScriptRequest
	(*ExportLocalYakScriptResponse)(nil),                      // 424: ypb.ExportLocalYakScriptResponse
	(*ExportYakScriptLocalResponse)(nil),                      // 425: ypb.ExportYakScriptLocalResponse
	(*ImportYakScriptRequest)(nil),                            // 426: ypb.ImportYakScriptRequest
	(*ImportYakScriptResult)(nil),                             // 427: ypb.ImportYakScriptResult
	(*QueryYakScriptGroupRequest)(nil),                        // 428: ypb.QueryYakScriptGroupRequest
	(*QueryYakScriptGroupResponse)(nil),                       // 429: ypb.QueryYakScriptGroupResponse
	(*GroupCount)(nil),                                        // 430: ypb.GroupCount
	(*SaveYakScriptGroupRequest)(nil),                         // 431: ypb.SaveYakScriptGroupRequest
	(*RenameYakScriptGroupRequest)(nil),                       // 432: ypb.RenameYakScriptGroupRequest
	(*DeleteYakScriptGroupRequest)(nil),                       // 433: ypb.DeleteYakScriptGroupRequest
	(*GetYakScriptGroupResponse)(nil),                         // 434: ypb.GetYakScriptGroupResponse
	(*ResetYakScriptGroupRequest)(nil),                        // 435: ypb.ResetYakScriptGroupRequest
	(*SetGroupRequest)(nil),                                   // 436: ypb.SetGroupRequest
	(*GetYakScriptTagsAndTypeResponse)(nil),                   // 437: ypb.GetYakScriptTagsAndTypeResponse
	(*TagsAndType)(nil),                                       // 438: ypb.TagsAndType
	(*CodecRequest)(nil),                                      // 439: ypb.CodecRequest
	(*CodecWork)(nil),                                         // 440: ypb.CodecWork
	(*CodecRequestFlow)(nil),                                  // 441: ypb.CodecRequestFlow
	(*CustomizeCodecFlow)(nil),                                // 442: ypb.CustomizeCodecFlow
	(*DeleteCodecFlowRequest)(nil),                            // 443: ypb.DeleteCodecFlowRequest
	(*GetCodecFlowResponse)(nil),                              // 444: ypb.GetCodecFlowResponse
	(*CodecResponse)(nil),                                     // 445: ypb.CodecResponse
	(*CodecMethods)(nil),                                      // 446: ypb.CodecMethods
	(*CodecMethod)(nil),                                       // 447: ypb.CodecMethod
	(*CodecParam)(nil),                                        // 448: ypb.CodecParam
	(*ExecHistoryRequest)(nil),                                // 449: ypb.ExecHistoryRequest
	(*ExecHistoryRecordResponse)(nil),                         // 450: ypb.ExecHistoryRecordResponse
	(*ExecHistoryRecord)(nil),                                 // 451: ypb.ExecHistoryRecord
	(*StringFuzzerRequest)(nil),                               // 452: ypb.StringFuzzerRequest
	(*StringFuzzerResponse)(nil),                              // 453: ypb.StringFuzzerResponse
	(*HTTPRequestAnalysisMaterial)(nil),                       // 454: ypb.HTTPRequestAnalysisMaterial
	(*HTTPRequestParamItem)(nil),                              // 455: ypb.HTTPRequestParamItem
	(*HTTPRequestAnalysis)(nil),                               // 456: ypb.HTTPRequestAnalysis
	(*HTTPResponseMatcher)(nil),                               // 457: ypb.HTTPResponseMatcher
	(*RenderVariablesRequest)(nil),                            // 458: ypb.RenderVariablesRequest
	(*RenderVariablesResponse)(nil),                           // 459: ypb.RenderVariablesResponse
	(*MatchHTTPResponseParams)(nil),                           // 460: ypb.MatchHTTPResponseParams
	(*MatchHTTPResponseResult)(nil),                           // 461: ypb.MatchHTTPResponseResult
	(*HTTPResponseExtractor)(nil),                             // 462: ypb.HTTPResponseExtractor
	(*ExtractHTTPResponseResult)(nil),                         // 463: ypb.ExtractHTTPResponseResult
	(*ExtractHTTPResponseParams)(nil),                         // 464: ypb.ExtractHTTPResponseParams
	(*PreloadHTTPFuzzerParamsRequest)(nil),                    // 465: ypb.PreloadHTTPFuzzerParamsRequest
	(*PreloadHTTPFuzzerParamsResponse)(nil),                   // 466: ypb.PreloadHTTPFuzzerParamsResponse
	(*FuzzerParamItem)(nil),                                   // 467: ypb.FuzzerParamItem
	(*FuzzerRequests)(nil),                                    // 468: ypb.FuzzerRequests
	(*FuzzerRequest)(nil),                                     // 469: ypb.FuzzerRequest
	(*MutateMethod)(nil),                                      // 470: ypb.MutateMethod
	(*KVPair)(nil),                                            // 471: ypb.KVPair
	(*FuzzerResponseFilter)(nil),                              // 472: ypb.FuzzerResponseFilter
	(*RedirectRequestParams)(nil),                             // 473: ypb.RedirectRequestParams
	(*ExtractedUrl)(nil),                                      // 474: ypb.ExtractedUrl
	(*FuzzerSequenceResponse)(nil),                            // 475: ypb.FuzzerSequenceResponse
	(*FuzzerResponse)(nil),                                    // 476: ypb.FuzzerResponse
	(*RedirectHTTPFlow)(nil),                                  // 477: ypb.RedirectHTTPFlow
	(*Paging)(nil),                                            // 478: ypb.Paging
	(*GetHTTPFlowByHashRequest)(nil),                          // 479: ypb.GetHTTPFlowByHashRequest
	(*GetHTTPFlowByIdRequest)(nil),                            // 480: ypb.GetHTTPFlowByIdRequest
	(*GetHTTPFlowByIdsRequest)(nil),                           // 481: ypb.GetHTTPFlowByIdsRequest
	(*GetHTTPFlowBodyByIdRequest)(nil),                        // 482: ypb.GetHTTPFlowBodyByIdRequest
	(*QueryHTTPFlowRequest)(nil),                              // 483: ypb.QueryHTTPFlowRequest
	(*HTTPFlowsToOnlineRequest)(nil),                          // 484: ypb.HTTPFlowsToOnlineRequest
	(*ExportHTTPFlowsRequest)(nil),                            // 485: ypb.ExportHTTPFlowsRequest
	(*QueryHTTPFlowsProcessNamesResponse)(nil),                // 486: ypb.QueryHTTPFlowsProcessNamesResponse
	(*DeleteHTTPFlowRequest)(nil),                             // 487: ypb.DeleteHTTPFlowRequest
	(*QueryHTTPFlowsIdsRequest)(nil),                          // 488: ypb.QueryHTTPFlowsIdsRequest
	(*QueryHTTPFlowsIdsResponse)(nil),                         // 489: ypb.QueryHTTPFlowsIdsResponse
	(*HTTPHeader)(nil),                                        // 490: ypb.HTTPHeader
	(*HTTPFlows)(nil),                                         // 491: ypb.HTTPFlows
	(*HTTPFlow)(nil),                                          // 492: ypb.HTTPFlow
	(*FuzzableParam)(nil),                                     // 493: ypb.FuzzableParam
	(*GetHTTPFlowBodyByIdResponse)(nil),                       // 494: ypb.GetHTTPFlowBodyByIdResponse
	(*QueryHTTPFlowResponse)(nil),                             // 495: ypb.QueryHTTPFlowResponse
	(*HTTPFlowsFieldGroupRequest)(nil),                        // 496: ypb.HTTPFlowsFieldGroupRequest
	(*HTTPFlowsFieldGroupResponse)(nil),                       // 497: ypb.HTTPFlowsFieldGroupResponse
	(*HTTPFlowsShareRequest)(nil),                             // 498: ypb.HTTPFlowsShareRequest
	(*HTTPFlowsShareResponse)(nil),                            // 499: ypb.HTTPFlowsShareResponse
	(*HTTPFlowsExtractRequest)(nil),                           // 500: ypb.HTTPFlowsExtractRequest
	(*TagsCode)(nil),                                          // 501: ypb.TagsCode
	(*WebsocketFlows)(nil),                                    // 502: ypb.WebsocketFlows
	(*WebsocketFlow)(nil),                                     // 503: ypb.WebsocketFlow
	(*SetMITMFilterRequest)(nil),                              // 504: ypb.SetMITMFilterRequest
	(*SetMITMFilterResponse)(nil),                             // 505: ypb.SetMITMFilterResponse
	(*MITMRequest)(nil),                                       // 506: ypb.MITMRequest
	(*FilterDataItem)(nil),                                    // 507: ypb.FilterDataItem
	(*MITMFilterData)(nil),                                    // 508: ypb.MITMFilterData
	(*Certificate)(nil),                                       // 509: ypb.Certificate
	(*MITMContentReplacer)(nil),                               // 510: ypb.MITMContentReplacer
	(*RemoveHookParams)(nil),                                  // 511: ypb.RemoveHookParams
	(*MITMResponse)(nil),                                      // 512: ypb.MITMResponse
	(*TraceInfo)(nil),                                         // 513: ypb.TraceInfo
	(*YakScriptHooks)(nil),                                    // 514: ypb.YakScriptHooks
	(*YakScriptHookItem)(nil),                                 // 515: ypb.YakScriptHookItem
	(*EchoRequest)(nil),                                       // 516: ypb.EchoRequest
	(*EchoResposne)(nil),                                      // 517: ypb.EchoResposne
	(*Input)(nil),                                             // 518: ypb.Input
	(*Output)(nil),                                            // 519: ypb.Output
	(*ExecParamItem)(nil),                                     // 520: ypb.ExecParamItem
	(*ExecRequest)(nil),                                       // 521: ypb.ExecRequest
	(*ExecResult)(nil),                                        // 522: ypb.ExecResult
	(*GetLicenseResponse)(nil),                                // 523: ypb.GetLicenseResponse
	(*CheckLicenseRequest)(nil),                               // 524: ypb.CheckLicenseRequest
	(*DefaultDnsServerResponse)(nil),                          // 525: ypb.DefaultDnsServerResponse
	(*HTTPFlowBareRequest)(nil),                               // 526: ypb.HTTPFlowBareRequest
	(*HTTPFlowBareResponse)(nil),                              // 527: ypb.HTTPFlowBareResponse
	(*ImportHTTPFuzzerTaskFromYamlRequest)(nil),               // 528: ypb.ImportHTTPFuzzerTaskFromYamlRequest
	(*ImportHTTPFuzzerTaskFromYamlResponse)(nil),              // 529: ypb.ImportHTTPFuzzerTaskFromYamlResponse
	(*ExportHTTPFuzzerTaskToYamlRequest)(nil),                 // 530: ypb.ExportHTTPFuzzerTaskToYamlRequest
	(*ExportHTTPFuzzerTaskToYamlResponse)(nil),                // 531: ypb.ExportHTTPFuzzerTaskToYamlResponse
	(*RenderHTTPFuzzerPacketRequest)(nil),                     // 532: ypb.RenderHTTPFuzzerPacketRequest
	(*RenderHTTPFuzzerPacketResponse)(nil),                    // 533: ypb.RenderHTTPFuzzerPacketResponse
	(*SmokingEvaluatePluginBatchRequest)(nil),                 // 534: ypb.SmokingEvaluatePluginBatchRequest
	(*SmokingEvaluatePluginBatchResponse)(nil),                // 535: ypb.SmokingEvaluatePluginBatchResponse
	(*GenerateURLRequest)(nil),                                // 536: ypb.GenerateURLRequest
	(*GenerateURLResponse)(nil),                               // 537: ypb.GenerateURLResponse
	(*YakVersionAtLeastRequest)(nil),                          // 538: ypb.YakVersionAtLeastRequest
	(*ParseTrafficRequest)(nil),                               // 539: ypb.ParseTrafficRequest
	(*ParseTrafficResponse)(nil),                              // 540: ypb.ParseTrafficResponse
	(*TraceRouteRequest)(nil),                                 // 541: ypb.TraceRouteRequest
	(*TraceRouteResponse)(nil),                                // 542: ypb.TraceRouteResponse
	(*EvaluateExpressionRequest)(nil),                         // 543: ypb.EvaluateExpressionRequest
	(*EvaluateExpressionResponse)(nil),                        // 544: ypb.EvaluateExpressionResponse
	(*EvaluateMultiExpressionRequest)(nil),                    // 545: ypb.EvaluateMultiExpressionRequest
	(*EvaluateMultiExpressionResponse)(nil),                   // 546: ypb.EvaluateMultiExpressionResponse
	(*ThirdPartyAppConfigItemTemplate)(nil),                   // 547: ypb.ThirdPartyAppConfigItemTemplate
	(*GetThirdPartyAppConfigTemplate)(nil),                    // 548: ypb.GetThirdPartyAppConfigTemplate
	(*GetThirdPartyAppConfigTemplateResponse)(nil),            // 549: ypb.GetThirdPartyAppConfigTemplateResponse
	(*GetFingerprintRequest)(nil),                             // 550: ypb.GetFingerprintRequest
	(*GetFingerprintResponse)(nil),                            // 551: ypb.GetFingerprintResponse
	(*AddFingerprintRequest)(nil),                             // 552: ypb.AddFingerprintRequest
	(*AddFingerprintResponse)(nil),                            // 553: ypb.AddFingerprintResponse
	(*ModifyFingerprintRequest)(nil),                          // 554: ypb.ModifyFingerprintRequest
	(*ModifyFingerprintResponse)(nil),                         // 555: ypb.ModifyFingerprintResponse
	(*ReadFileRequest)(nil),                                   // 556: ypb.ReadFileRequest
	(*ReadFileResponse)(nil),                                  // 557: ypb.ReadFileResponse
	(*GetReverseShellProgramListRequest)(nil),                 // 558: ypb.GetReverseShellProgramListRequest
	(*GetReverseShellProgramListResponse)(nil),                // 559: ypb.GetReverseShellProgramListResponse
	(*GenerateReverseShellCommandRequest)(nil),                // 560: ypb.GenerateReverseShellCommandRequest
	(*GenerateReverseShellCommandResponse)(nil),               // 561: ypb.GenerateReverseShellCommandResponse
	(*DbOperateMessage)(nil),                                  // 562: ypb.DbOperateMessage
	(*CPE)(nil),                                               // 563: ypb.CPE
	(*FingerprintRule)(nil),                                   // 564: ypb.FingerprintRule
	(*FingerprintFilter)(nil),                                 // 565: ypb.FingerprintFilter
	(*QueryFingerprintRequest)(nil),                           // 566: ypb.QueryFingerprintRequest
	(*QueryFingerprintResponse)(nil),                          // 567: ypb.QueryFingerprintResponse
	(*DeleteFingerprintRequest)(nil),                          // 568: ypb.DeleteFingerprintRequest
	(*CreateFingerprintRequest)(nil),                          // 569: ypb.CreateFingerprintRequest
	(*UpdateFingerprintRequest)(nil),                          // 570: ypb.UpdateFingerprintRequest
	(*QuerySyntaxFlowRuleRequest)(nil),                        // 571: ypb.QuerySyntaxFlowRuleRequest
	(*SyntaxFlowRule)(nil),                                    // 572: ypb.SyntaxFlowRule
	(*SyntaxFlowRuleInput)(nil),                               // 573: ypb.SyntaxFlowRuleInput
	(*SyntaxFlowRuleFilter)(nil),                              // 574: ypb.SyntaxFlowRuleFilter
	(*SSAProgram)(nil),                                        // 575: ypb.SSAProgram
	(*SSAProgramInput)(nil),                                   // 576: ypb.SSAProgramInput
	(*SSAProgramFilter)(nil),                                  // 577: ypb.SSAProgramFilter
	(*QuerySSAProgramRequest)(nil),                            // 578: ypb.QuerySSAProgramRequest
	(*UpdateSSAProgramRequest)(nil),                           // 579: ypb.UpdateSSAProgramRequest
	(*DeleteSSAProgramRequest)(nil),                           // 580: ypb.DeleteSSAProgramRequest
	(*QuerySSAProgramResponse)(nil),                           // 581: ypb.QuerySSAProgramResponse
	(*CreateSyntaxFlowRuleRequest)(nil),                       // 582: ypb.CreateSyntaxFlowRuleRequest
	(*UpdateSyntaxFlowRuleRequest)(nil),                       // 583: ypb.UpdateSyntaxFlowRuleRequest
	(*QuerySyntaxFlowRuleResponse)(nil),                       // 584: ypb.QuerySyntaxFlowRuleResponse
	(*DeleteSyntaxFlowRuleRequest)(nil),                       // 585: ypb.DeleteSyntaxFlowRuleRequest
	(*SyntaxFlowRuleGroupFilter)(nil),                         // 586: ypb.SyntaxFlowRuleGroupFilter
	(*SyntaxFlowGroup)(nil),                                   // 587: ypb.SyntaxFlowGroup
	(*QuerySyntaxFlowRuleGroupRequest)(nil),                   // 588: ypb.QuerySyntaxFlowRuleGroupRequest
	(*QuerySyntaxFlowRuleGroupResponse)(nil),                  // 589: ypb.QuerySyntaxFlowRuleGroupResponse
	(*CreateSyntaxFlowGroupRequest)(nil),                      // 590: ypb.CreateSyntaxFlowGroupRequest
	(*UpdateSyntaxFlowRuleAndGroupRequest)(nil),               // 591: ypb.UpdateSyntaxFlowRuleAndGroupRequest
	(*DeleteSyntaxFlowRuleGroupRequest)(nil),                  // 592: ypb.DeleteSyntaxFlowRuleGroupRequest
	(*SyntaxFlowScanRequest)(nil),                             // 593: ypb.SyntaxFlowScanRequest
	(*QuerySyntaxFlowScanTaskRequest)(nil),                    // 594: ypb.QuerySyntaxFlowScanTaskRequest
	(*SyntaxFlowScanTaskFilter)(nil),                          // 595: ypb.SyntaxFlowScanTaskFilter
	(*QuerySyntaxFlowScanTaskResponse)(nil),                   // 596: ypb.QuerySyntaxFlowScanTaskResponse
	(*SyntaxFlowScanTask)(nil),                                // 597: ypb.SyntaxFlowScanTask
	(*DeleteSyntaxFlowScanTaskRequest)(nil),                   // 598: ypb.DeleteSyntaxFlowScanTaskRequest
	(*SyntaxFlowScanResponse)(nil),                            // 599: ypb.SyntaxFlowScanResponse
	(*SyntaxFlowResultFilter)(nil),                            // 600: ypb.SyntaxFlowResultFilter
	(*QuerySyntaxFlowResultRequest)(nil),                      // 601: ypb.QuerySyntaxFlowResultRequest
	(*QuerySyntaxFlowResultResponse)(nil),                     // 602: ypb.QuerySyntaxFlowResultResponse
	(*SyntaxFlowResult)(nil),                                  // 603: ypb.SyntaxFlowResult
	(*QueryPluginEnvRequest)(nil),                             // 604: ypb.QueryPluginEnvRequest
	(*PluginEnvData)(nil),                                     // 605: ypb.PluginEnvData
	(*DeletePluginEnvRequest)(nil),                            // 606: ypb.DeletePluginEnvRequest
	(*GetAllFuzztagInfoRequest)(nil),                          // 607: ypb.GetAllFuzztagInfoRequest
	(*GetAllFuzztagInfoResponse)(nil),                         // 608: ypb.GetAllFuzztagInfoResponse
	(*FuzztagArgumentType)(nil),                               // 609: ypb.FuzztagArgumentType
	(*FuzztagInfo)(nil),                                       // 610: ypb.FuzztagInfo
	(*GenerateFuzztagRequest)(nil),                            // 611: ypb.GenerateFuzztagRequest
	(*GenerateFuzztagResponse)(nil),                           // 612: ypb.GenerateFuzztagResponse
	nil,                                                       // 613: ypb.ExtractDataToFileRequest.DataEntry
	nil,                                                       // 614: ypb.YsoClassGeneraterOptionsWithVerbose.BindOptionsEntry
	nil,                                                       // 615: ypb.WebShell.HeadersEntry
	nil,                                                       // 616: ypb.WebShell.PostsEntry
	nil,                                                       // 617: ypb.UpdateWebShellRequest.HeadersEntry
	nil,                                                       // 618: ypb.UpdateWebShellRequest.PostsEntry
}
var file_yakgrpc_proto_depIdxs = []int32{
	520, // 0: ypb.ExecBatchYakScriptRequest.ExtraParams:type_name -> ypb.ExecParamItem
	413, // 1: ypb.ExecBatchYakScriptRequest.PluginFilter:type_name -> ypb.QueryYakScriptRequest
	417, // 2: ypb.ExecBatchYakScriptResult.PoC:type_name -> ypb.YakScript
	522, // 3: ypb.ExecBatchYakScriptResult.Result:type_name -> ypb.ExecResult
	520, // 4: ypb.ExecBatchYakScriptResult.ExtraParam:type_name -> ypb.ExecParamItem
	22,  // 5: ypb.DeleteHybridScanTaskRequest.Filter:type_name -> ypb.HybridScanTaskFilter
	478, // 6: ypb.QueryHybridScanTaskResponse.Pagination:type_name -> ypb.Paging
	19,  // 7: ypb.QueryHybridScanTaskResponse.Data:type_name -> ypb.HybridScanTask
	478, // 8: ypb.QueryHybridScanTaskRequest.Pagination:type_name -> ypb.Paging
	22,  // 9: ypb.QueryHybridScanTaskRequest.Filter:type_name -> ypb.HybridScanTaskFilter
	522, // 10: ypb.HybridScanResponse.ExecResult:type_name -> ypb.ExecResult
	24,  // 11: ypb.HybridScanResponse.UpdateActiveTask:type_name -> ypb.HybridScanUpdateActiveTaskTable
	27,  // 12: ypb.HybridScanResponse.HybridScanConfig:type_name -> ypb.HybridScanRequest
	74,  // 13: ypb.HybridScanInputTarget.HTTPRequestTemplate:type_name -> ypb.HTTPRequestBuilderParams
	413, // 14: ypb.HybridScanPluginConfig.Filter:type_name -> ypb.QueryYakScriptRequest
	26,  // 15: ypb.HybridScanRequest.Plugin:type_name -> ypb.HybridScanPluginConfig
	25,  // 16: ypb.HybridScanRequest.Targets:type_name -> ypb.HybridScanInputTarget
	299, // 17: ypb.PcapMetadata.AvailablePcapDevices:type_name -> ypb.NetInterface
	471, // 18: ypb.PcapMetadata.AvailableSessionTypes:type_name -> ypb.KVPair
	471, // 19: ypb.PcapMetadata.AvailableLinkLayerTypes:type_name -> ypb.KVPair
	471, // 20: ypb.PcapMetadata.AvailableNetworkLayerTypes:type_name -> ypb.KVPair
	471, // 21: ypb.PcapMetadata.AvailableTransportLayerTypes:type_name -> ypb.KVPair
	299, // 22: ypb.PcapMetadata.DefaultPublicNetInterface:type_name -> ypb.NetInterface
	478, // 23: ypb.QueryTrafficPacketRequest.Pagination:type_name -> ypb.Paging
	478, // 24: ypb.QueryTrafficTCPReassembledRequest.Pagination:type_name -> ypb.Paging
	34,  // 25: ypb.QueryTrafficSessionResponse.Data:type_name -> ypb.TrafficSession
	478, // 26: ypb.QueryTrafficSessionResponse.Pagination:type_name -> ypb.Paging
	36,  // 27: ypb.QueryTrafficPacketResponse.Data:type_name -> ypb.TrafficPacket
	478, // 28: ypb.QueryTrafficPacketResponse.Pagination:type_name -> ypb.Paging
	38,  // 29: ypb.QueryTrafficTCPReassembledResponse.Data:type_name -> ypb.TrafficTCPReassembled
	478, // 30: ypb.QueryTrafficTCPReassembledResponse.Pagination:type_name -> ypb.Paging
	478, // 31: ypb.QueryTrafficSessionRequest.Pagination:type_name -> ypb.Paging
	42,  // 32: ypb.PcapXRequest.SuricataLoader:type_name -> ypb.SuricataConfig
	45,  // 33: ypb.RequestYakURLParams.Url:type_name -> ypb.YakURL
	471, // 34: ypb.YakURL.Query:type_name -> ypb.KVPair
	45,  // 35: ypb.YakURLResource.Url:type_name -> ypb.YakURL
	471, // 36: ypb.YakURLResource.Extra:type_name -> ypb.KVPair
	46,  // 37: ypb.RequestYakURLResponse.Resources:type_name -> ypb.YakURLResource
	509, // 38: ypb.GlobalNetworkConfig.ClientCertificates:type_name -> ypb.Certificate
	57,  // 39: ypb.GlobalNetworkConfig.AppConfigs:type_name -> ypb.ThirdPartyApplicationConfig
	56,  // 40: ypb.GlobalNetworkConfig.AuthInfos:type_name -> ypb.AuthInfo
	471, // 41: ypb.ThirdPartyApplicationConfig.ExtraParams:type_name -> ypb.KVPair
	96,  // 42: ypb.GetRegisteredAgentResponse.Agents:type_name -> ypb.IsRemoteAddrAvailableResponse
	74,  // 43: ypb.SmokingEvaluatePluginRequest.Requests:type_name -> ypb.HTTPRequestBuilderParams
	159, // 44: ypb.SmokingEvaluateResult.Range:type_name -> ypb.Range
	64,  // 45: ypb.SmokingEvaluatePluginResponse.Results:type_name -> ypb.SmokingEvaluateResult
	74,  // 46: ypb.DebugPluginRequest.HTTPRequestTemplate:type_name -> ypb.HTTPRequestBuilderParams
	471, // 47: ypb.DebugPluginRequest.ExecParams:type_name -> ypb.KVPair
	26,  // 48: ypb.DebugPluginRequest.LinkPluginConfig:type_name -> ypb.HybridScanPluginConfig
	72,  // 49: ypb.HTTPRequestBuilderResponse.Results:type_name -> ypb.HTTPRequestBuilderResult
	471, // 50: ypb.HTTPRequestBuilderParams.GetParams:type_name -> ypb.KVPair
	471, // 51: ypb.HTTPRequestBuilderParams.Headers:type_name -> ypb.KVPair
	471, // 52: ypb.HTTPRequestBuilderParams.Cookie:type_name -> ypb.KVPair
	471, // 53: ypb.HTTPRequestBuilderParams.PostParams:type_name -> ypb.KVPair
	471, // 54: ypb.HTTPRequestBuilderParams.MultipartParams:type_name -> ypb.KVPair
	471, // 55: ypb.HTTPRequestBuilderParams.MultipartFileParams:type_name -> ypb.KVPair
	478, // 56: ypb.QueryScreenRecorderRequest.Pagination:type_name -> ypb.Paging
	75,  // 57: ypb.QueryScreenRecorderResponse.Data:type_name -> ypb.ScreenRecorder
	478, // 58: ypb.QueryScreenRecorderResponse.Pagination:type_name -> ypb.Paging
	478, // 59: ypb.QueryCVERequest.Pagination:type_name -> ypb.Paging
	89,  // 60: ypb.CVEDetailEx.CVE:type_name -> ypb.CVEDetail
	87,  // 61: ypb.CVEDetailEx.CWE:type_name -> ypb.CWEDetail
	478, // 62: ypb.QueryCVEResponse.Pagination:type_name -> ypb.Paging
	89,  // 63: ypb.QueryCVEResponse.Data:type_name -> ypb.CVEDetail
	94,  // 64: ypb.ExecuteChaosMakerRuleRequest.Groups:type_name -> ypb.ChaosMakerRuleGroup
	478, // 65: ypb.QueryChaosMakerRuleResponse.Pagination:type_name -> ypb.Paging
	98,  // 66: ypb.QueryChaosMakerRuleResponse.Data:type_name -> ypb.ChaosMakerRule
	478, // 67: ypb.QueryChaosMakerRuleRequest.Pagination:type_name -> ypb.Paging
	107, // 68: ypb.QueryMITMRuleExtractedDataResponse.Data:type_name -> ypb.MITMRuleExtractedData
	478, // 69: ypb.QueryMITMRuleExtractedDataResponse.Pagination:type_name -> ypb.Paging
	478, // 70: ypb.QueryMITMRuleExtractedDataRequest.Pagination:type_name -> ypb.Paging
	110, // 71: ypb.QueryMITMRuleExtractedDataRequest.Filter:type_name -> ypb.ExtractedDataFilter
	110, // 72: ypb.ExportMITMRuleExtractedDataRequest.Filter:type_name -> ypb.ExtractedDataFilter
	478, // 73: ypb.GetProjectsRequest.Pagination:type_name -> ypb.Paging
	122, // 74: ypb.GetProjectsResponse.Projects:type_name -> ypb.ProjectDescription
	478, // 75: ypb.GetProjectsResponse.Pagination:type_name -> ypb.Paging
	522, // 76: ypb.YaklangShellResponse.RawResult:type_name -> ypb.ExecResult
	129, // 77: ypb.YaklangShellResponse.Scope:type_name -> ypb.YaklangShellKVPair
	140, // 78: ypb.SaveFuzzerLabelRequest.Data:type_name -> ypb.FuzzerLabel
	140, // 79: ypb.QueryFuzzerLabelResponse.Data:type_name -> ypb.FuzzerLabel
	145, // 80: ypb.SaveFuzzerConfigRequest.Data:type_name -> ypb.FuzzerConfig
	478, // 81: ypb.QueryFuzzerConfigRequest.Pagination:type_name -> ypb.Paging
	145, // 82: ypb.QueryFuzzerConfigResponse.Data:type_name -> ypb.FuzzerConfig
	478, // 83: ypb.QueryHTTPFuzzerResponseByTaskIdRequest.Pagination:type_name -> ypb.Paging
	478, // 84: ypb.QueryHTTPFuzzerResponseByTaskIdResponse.Pagination:type_name -> ypb.Paging
	476, // 85: ypb.QueryHTTPFuzzerResponseByTaskIdResponse.Data:type_name -> ypb.FuzzerResponse
	478, // 86: ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest.Pagination:type_name -> ypb.Paging
	159, // 87: ypb.YaklangInspectInformationRequest.Range:type_name -> ypb.Range
	159, // 88: ypb.YaklangLanguageSuggestionRequest.Range:type_name -> ypb.Range
	162, // 89: ypb.YaklangInformationKV.Extern:type_name -> ypb.YaklangInformationKV
	162, // 90: ypb.YaklangInformation.Data:type_name -> ypb.YaklangInformationKV
	391, // 91: ypb.YaklangLanguageSuggestionResponse.SuggestionMessage:type_name -> ypb.SuggestionDescription
	159, // 92: ypb.YaklangLanguageFindResponse.Ranges:type_name -> ypb.Range
	163, // 93: ypb.YaklangInspectInformationResponse.Information:type_name -> ypb.YaklangInformation
	416, // 94: ypb.YaklangInspectInformationResponse.CliParameter:type_name -> ypb.YakScriptParam
	168, // 95: ypb.YaklangInspectInformationResponse.RiskInfo:type_name -> ypb.YakRiskInfo
	167, // 96: ypb.YaklangInspectInformationResponse.UIInfo:type_name -> ypb.YakUIInfo
	174, // 97: ypb.YaklangCompileAndFormatResponse.Errors:type_name -> ypb.StaticAnalyzeErrorResult
	174, // 98: ypb.StaticAnalyzeErrorResponse.Result:type_name -> ypb.StaticAnalyzeErrorResult
	186, // 99: ypb.DownloadOnlinePluginByScriptNamesResponse.Data:type_name -> ypb.DownloadOnlinePluginByScriptName
	192, // 100: ypb.GetProcessEnvKeyResult.Results:type_name -> ypb.GeneralStorage
	198, // 101: ypb.GetExecBatchYakScriptUnfinishedTaskResponse.Tasks:type_name -> ypb.ExecBatchYakScriptUnfinishedTask
	199, // 102: ypb.GetSimpleDetectUnfinishedTaskResponse.Tasks:type_name -> ypb.SimpleDetectUnfinishedTask
	478, // 103: ypb.QueryUnfinishedTaskRequest.Pagination:type_name -> ypb.Paging
	202, // 104: ypb.QueryUnfinishedTaskRequest.Filter:type_name -> ypb.UnfinishedTaskFilter
	202, // 105: ypb.DeleteUnfinishedTaskRequest.Filter:type_name -> ypb.UnfinishedTaskFilter
	205, // 106: ypb.QueryUnfinishedTaskResponse.Tasks:type_name -> ypb.UnfinishedTask
	478, // 107: ypb.QueryUnfinishedTaskResponse.Pagination:type_name -> ypb.Paging
	213, // 108: ypb.AutoDecodeRequest.ModifyResult:type_name -> ypb.AutoDecodeResult
	213, // 109: ypb.AutoDecodeResponse.Results:type_name -> ypb.AutoDecodeResult
	217, // 110: ypb.GetYakScriptTagsResponse.Tag:type_name -> ypb.Tags
	417, // 111: ypb.QueryYakScriptLocalAndUserResponse.Data:type_name -> ypb.YakScript
	417, // 112: ypb.QueryYakScriptByNamesResponse.Data:type_name -> ypb.YakScript
	417, // 113: ypb.QueryYakScriptByIsCoreResponse.Data:type_name -> ypb.YakScript
	228, // 114: ypb.YakScriptRiskTypeListResponse.Data:type_name -> ypb.RiskTypeLists
	613, // 115: ypb.ExtractDataToFileRequest.Data:type_name -> ypb.ExtractDataToFileRequest.DataEntry
	510, // 116: ypb.MITMContentReplacers.Rules:type_name -> ypb.MITMContentReplacer
	413, // 117: ypb.ExecYakitPluginsByYakScriptFilterRequest.Filter:type_name -> ypb.QueryYakScriptRequest
	520, // 118: ypb.ExecYakitPluginsByYakScriptFilterRequest.ExtraParams:type_name -> ypb.ExecParamItem
	3,   // 119: ypb.GenerateYakCodeByPacketRequest.CodeTemplate:type_name -> ypb.GenerateYakCodeByPacketRequest.Template
	242, // 120: ypb.DeleteReportRequest.Filter:type_name -> ypb.QueryReportsRequest
	243, // 121: ypb.QueryReportsResponse.Data:type_name -> ypb.Report
	478, // 122: ypb.QueryReportsResponse.Pagination:type_name -> ypb.Paging
	478, // 123: ypb.QueryReportsRequest.Pagination:type_name -> ypb.Paging
	245, // 124: ypb.SetTagForHTTPFlowRequest.CheckTags:type_name -> ypb.CheckSetTagsHTTPFlow
	254, // 125: ypb.RiskTableStats.RiskTypeStats:type_name -> ypb.Fields
	254, // 126: ypb.RiskTableStats.RiskLevelStats:type_name -> ypb.Fields
	253, // 127: ypb.Fields.Values:type_name -> ypb.FieldName
	255, // 128: ypb.YsoOptionsWithVerbose.Options:type_name -> ypb.YsoOption
	614, // 129: ypb.YsoClassGeneraterOptionsWithVerbose.BindOptions:type_name -> ypb.YsoClassGeneraterOptionsWithVerbose.BindOptionsEntry
	258, // 130: ypb.YsoClassOptionsResponseWithVerbose.Options:type_name -> ypb.YsoClassGeneraterOptionsWithVerbose
	260, // 131: ypb.YsoClassOptionsResponse.Options:type_name -> ypb.YsoClassGeneraterOptions
	258, // 132: ypb.YsoOptionsRequerstWithVerbose.Options:type_name -> ypb.YsoClassGeneraterOptionsWithVerbose
	260, // 133: ypb.YsoOptionsRequerst.Options:type_name -> ypb.YsoClassGeneraterOptions
	273, // 134: ypb.QueryICMPTriggerResponse.Notification:type_name -> ypb.ICMPTriggerNotification
	276, // 135: ypb.HistoryHTTPFuzzerTaskDetail.BasicInfo:type_name -> ypb.HistoryHTTPFuzzerTask
	469, // 136: ypb.HistoryHTTPFuzzerTaskDetail.OriginRequest:type_name -> ypb.FuzzerRequest
	276, // 137: ypb.HistoryHTTPFuzzerTasks.Tasks:type_name -> ypb.HistoryHTTPFuzzerTask
	275, // 138: ypb.HistoryHTTPFuzzerTasksResponse.Data:type_name -> ypb.HistoryHTTPFuzzerTaskDetail
	478, // 139: ypb.HistoryHTTPFuzzerTasksResponse.Pagination:type_name -> ypb.Paging
	478, // 140: ypb.QueryHistoryHTTPFuzzerTaskExParams.Pagination:type_name -> ypb.Paging
	615, // 141: ypb.WebShell.Headers:type_name -> ypb.WebShell.HeadersEntry
	616, // 142: ypb.WebShell.Posts:type_name -> ypb.WebShell.PostsEntry
	284, // 143: ypb.WebShell.ShellOptions:type_name -> ypb.ShellOptions
	2,   // 144: ypb.ShellGenerate.EncMode:type_name -> ypb.EncMode
	1,   // 145: ypb.ShellGenerate.Script:type_name -> ypb.ShellScript
	478, // 146: ypb.QueryWebShellsRequest.Pagination:type_name -> ypb.Paging
	478, // 147: ypb.QueryWebShellsResponse.Pagination:type_name -> ypb.Paging
	282, // 148: ypb.QueryWebShellsResponse.Data:type_name -> ypb.WebShell
	284, // 149: ypb.UpdateWebShellRequest.ShellOptions:type_name -> ypb.ShellOptions
	617, // 150: ypb.UpdateWebShellRequest.Headers:type_name -> ypb.UpdateWebShellRequest.HeadersEntry
	618, // 151: ypb.UpdateWebShellRequest.Posts:type_name -> ypb.UpdateWebShellRequest.PostsEntry
	295, // 152: ypb.QueryDNSLogByTokenResponse.Events:type_name -> ypb.DNSLogEvent
	299, // 153: ypb.AvailableLocalAddrResponse.Interfaces:type_name -> ypb.NetInterface
	317, // 154: ypb.ConfigGlobalReverseParams.ConnectParams:type_name -> ypb.GetTunnelServerExternalIPParams
	304, // 155: ypb.DeleteRiskRequest.Filter:type_name -> ypb.QueryRisksRequest
	304, // 156: ypb.QueryRiskRequest.Filter:type_name -> ypb.QueryRisksRequest
	478, // 157: ypb.QueryRisksRequest.Pagination:type_name -> ypb.Paging
	478, // 158: ypb.QueryRisksResponse.Pagination:type_name -> ypb.Paging
	303, // 159: ypb.QueryRisksResponse.Data:type_name -> ypb.Risk
	311, // 160: ypb.QueryNewRiskResponse.Data:type_name -> ypb.NewRisk
	310, // 161: ypb.QueryRiskTagsResponse.RiskTags:type_name -> ypb.FieldGroup
	310, // 162: ypb.RiskFieldGroupResponse.RiskIPGroup:type_name -> ypb.FieldGroup
	253, // 163: ypb.RiskFieldGroupResponse.RiskLevelGroup:type_name -> ypb.FieldName
	253, // 164: ypb.RiskFieldGroupResponse.RiskTypeGroup:type_name -> ypb.FieldName
	317, // 165: ypb.VerifyTunnelServerDomainParams.ConnectParams:type_name -> ypb.GetTunnelServerExternalIPParams
	317, // 166: ypb.StartFacadesParams.ConnectParam:type_name -> ypb.GetTunnelServerExternalIPParams
	262, // 167: ypb.ApplyClassToFacadesParamsWithVerbose.GenerateClassParams:type_name -> ypb.YsoOptionsRequerstWithVerbose
	263, // 168: ypb.ApplyClassToFacadesParams.GenerateClassParams:type_name -> ypb.YsoOptionsRequerst
	317, // 169: ypb.StartFacadesWithYsoParams.BridgeParam:type_name -> ypb.GetTunnelServerExternalIPParams
	263, // 170: ypb.StartFacadesWithYsoParams.GenerateClassParams:type_name -> ypb.YsoOptionsRequerst
	323, // 171: ypb.Tree.Children:type_name -> ypb.Tree
	323, // 172: ypb.GetAvailableBruteTypesResponse.TypesWithChild:type_name -> ypb.Tree
	478, // 173: ypb.QueryHostsRequest.Pagination:type_name -> ypb.Paging
	478, // 174: ypb.QueryHostsResponse.Pagination:type_name -> ypb.Paging
	339, // 175: ypb.QueryHostsResponse.Data:type_name -> ypb.Host
	478, // 176: ypb.QueryDomainsRequest.Pagination:type_name -> ypb.Paging
	332, // 177: ypb.DeleteDomainsRequest.Filter:type_name -> ypb.QueryDomainsRequest
	478, // 178: ypb.QueryDomainsResponse.Pagination:type_name -> ypb.Paging
	335, // 179: ypb.QueryDomainsResponse.Data:type_name -> ypb.Domain
	337, // 180: ypb.QueryPortsGroupResponse.PortsGroupList:type_name -> ypb.PortsGroup
	338, // 181: ypb.PortsGroup.GroupLists:type_name -> ypb.GroupList
	478, // 182: ypb.QueryYakScriptExecResultRequest.Pagination:type_name -> ypb.Paging
	478, // 183: ypb.QueryYakScriptExecResultResponse.Pagination:type_name -> ypb.Paging
	522, // 184: ypb.QueryYakScriptExecResultResponse.Data:type_name -> ypb.ExecResult
	490, // 185: ypb.StartBasicCrawlerRequest.Headers:type_name -> ypb.HTTPHeader
	349, // 186: ypb.StartBasicCrawlerRequest.Cookies:type_name -> ypb.HTTPCookie
	413, // 187: ypb.ExportYakScriptStreamRequest.Filter:type_name -> ypb.QueryYakScriptRequest
	417, // 188: ypb.GetMarkdownDocumentResponse.Script:type_name -> ypb.YakScript
	360, // 189: ypb.MenuItem.Query:type_name -> ypb.BatchExecutionPluginFilter
	359, // 190: ypb.MenuItemGroup.Items:type_name -> ypb.MenuItem
	361, // 191: ypb.MenuByGroup.Groups:type_name -> ypb.MenuItemGroup
	361, // 192: ypb.AddMenuRequest.Data:type_name -> ypb.MenuItemGroup
	372, // 193: ypb.AddToNavigationRequest.Data:type_name -> ypb.NavigationList
	373, // 194: ypb.NavigationList.Items:type_name -> ypb.NavigationItem
	372, // 195: ypb.GetAllNavigationItemResponse.Data:type_name -> ypb.NavigationList
	381, // 196: ypb.RecordPortScanRequest.LastRecord:type_name -> ypb.LastRecord
	325, // 197: ypb.RecordPortScanRequest.StartBruteParams:type_name -> ypb.StartBruteParams
	384, // 198: ypb.RecordPortScanRequest.PortScanRequest:type_name -> ypb.PortScanRequest
	26,  // 199: ypb.PortScanRequest.LinkPluginConfig:type_name -> ypb.HybridScanPluginConfig
	386, // 200: ypb.DeletePortsRequest.Filter:type_name -> ypb.QueryPortsRequest
	478, // 201: ypb.QueryPortsRequest.Pagination:type_name -> ypb.Paging
	478, // 202: ypb.QueryPortsResponse.Pagination:type_name -> ypb.Paging
	388, // 203: ypb.QueryPortsResponse.Data:type_name -> ypb.Port
	391, // 204: ypb.MethodSuggestion.Suggestions:type_name -> ypb.SuggestionDescription
	392, // 205: ypb.GetYakVMBuildInMethodCompletionResponse.Suggestions:type_name -> ypb.MethodSuggestion
	396, // 206: ypb.PayloadGroupNode.Nodes:type_name -> ypb.PayloadGroupNode
	396, // 207: ypb.GetAllPayloadGroupResponse.Nodes:type_name -> ypb.PayloadGroupNode
	396, // 208: ypb.UpdateAllPayloadGroupRequest.Nodes:type_name -> ypb.PayloadGroupNode
	409, // 209: ypb.UpdatePayloadRequest.Data:type_name -> ypb.Payload
	478, // 210: ypb.QueryPayloadRequest.Pagination:type_name -> ypb.Paging
	478, // 211: ypb.QueryPayloadResponse.Pagination:type_name -> ypb.Paging
	409, // 212: ypb.QueryPayloadResponse.Data:type_name -> ypb.Payload
	409, // 213: ypb.GetAllPayloadResponse.Data:type_name -> ypb.Payload
	478, // 214: ypb.QueryYakScriptRequest.Pagination:type_name -> ypb.Paging
	414, // 215: ypb.QueryYakScriptRequest.Group:type_name -> ypb.PluginGroup
	478, // 216: ypb.QueryYakScriptResponse.Pagination:type_name -> ypb.Paging
	417, // 217: ypb.QueryYakScriptResponse.Data:type_name -> ypb.YakScript
	416, // 218: ypb.YakScript.Params:type_name -> ypb.YakScriptParam
	226, // 219: ypb.YakScript.RiskDetail:type_name -> ypb.QueryYakScriptRiskDetailByCWEResponse
	418, // 220: ypb.YakScript.CollaboratorInfo:type_name -> ypb.Collaborator
	168, // 221: ypb.YakScript.RiskInfo:type_name -> ypb.YakRiskInfo
	416, // 222: ypb.SaveNewYakScriptRequest.Params:type_name -> ypb.YakScriptParam
	226, // 223: ypb.SaveNewYakScriptRequest.RiskDetail:type_name -> ypb.QueryYakScriptRiskDetailByCWEResponse
	168, // 224: ypb.SaveNewYakScriptRequest.RiskInfo:type_name -> ypb.YakRiskInfo
	430, // 225: ypb.QueryYakScriptGroupResponse.Group:type_name -> ypb.GroupCount
	413, // 226: ypb.SaveYakScriptGroupRequest.Filter:type_name -> ypb.QueryYakScriptRequest
	438, // 227: ypb.GetYakScriptTagsAndTypeResponse.Type:type_name -> ypb.TagsAndType
	438, // 228: ypb.GetYakScriptTagsAndTypeResponse.Tag:type_name -> ypb.TagsAndType
	438, // 229: ypb.GetYakScriptTagsAndTypeResponse.Group:type_name -> ypb.TagsAndType
	520, // 230: ypb.CodecRequest.Params:type_name -> ypb.ExecParamItem
	520, // 231: ypb.CodecWork.Params:type_name -> ypb.ExecParamItem
	440, // 232: ypb.CodecRequestFlow.WorkFlow:type_name -> ypb.CodecWork
	440, // 233: ypb.CustomizeCodecFlow.WorkFlow:type_name -> ypb.CodecWork
	442, // 234: ypb.GetCodecFlowResponse.Flows:type_name -> ypb.CustomizeCodecFlow
	447, // 235: ypb.CodecMethods.Methods:type_name -> ypb.CodecMethod
	448, // 236: ypb.CodecMethod.Params:type_name -> ypb.CodecParam
	448, // 237: ypb.CodecParam.Connector:type_name -> ypb.CodecParam
	478, // 238: ypb.ExecHistoryRequest.Pagination:type_name -> ypb.Paging
	451, // 239: ypb.ExecHistoryRecordResponse.Data:type_name -> ypb.ExecHistoryRecord
	478, // 240: ypb.ExecHistoryRecordResponse.Pagination:type_name -> ypb.Paging
	455, // 241: ypb.HTTPRequestAnalysis.Params:type_name -> ypb.HTTPRequestParamItem
	457, // 242: ypb.HTTPResponseMatcher.SubMatchers:type_name -> ypb.HTTPResponseMatcher
	471, // 243: ypb.RenderVariablesRequest.Params:type_name -> ypb.KVPair
	471, // 244: ypb.RenderVariablesResponse.Results:type_name -> ypb.KVPair
	457, // 245: ypb.MatchHTTPResponseParams.Matchers:type_name -> ypb.HTTPResponseMatcher
	467, // 246: ypb.ExtractHTTPResponseResult.Values:type_name -> ypb.FuzzerParamItem
	462, // 247: ypb.ExtractHTTPResponseParams.Extractors:type_name -> ypb.HTTPResponseExtractor
	467, // 248: ypb.PreloadHTTPFuzzerParamsRequest.Params:type_name -> ypb.FuzzerParamItem
	467, // 249: ypb.PreloadHTTPFuzzerParamsResponse.Values:type_name -> ypb.FuzzerParamItem
	469, // 250: ypb.FuzzerRequests.Requests:type_name -> ypb.FuzzerRequest
	467, // 251: ypb.FuzzerRequest.Params:type_name -> ypb.FuzzerParamItem
	472, // 252: ypb.FuzzerRequest.Filter:type_name -> ypb.FuzzerResponseFilter
	471, // 253: ypb.FuzzerRequest.EtcHosts:type_name -> ypb.KVPair
	462, // 254: ypb.FuzzerRequest.Extractors:type_name -> ypb.HTTPResponseExtractor
	457, // 255: ypb.FuzzerRequest.Matchers:type_name -> ypb.HTTPResponseMatcher
	470, // 256: ypb.FuzzerRequest.MutateMethods:type_name -> ypb.MutateMethod
	471, // 257: ypb.MutateMethod.Value:type_name -> ypb.KVPair
	462, // 258: ypb.RedirectRequestParams.Extractors:type_name -> ypb.HTTPResponseExtractor
	457, // 259: ypb.RedirectRequestParams.Matchers:type_name -> ypb.HTTPResponseMatcher
	467, // 260: ypb.RedirectRequestParams.Params:type_name -> ypb.FuzzerParamItem
	469, // 261: ypb.FuzzerSequenceResponse.Request:type_name -> ypb.FuzzerRequest
	476, // 262: ypb.FuzzerSequenceResponse.Response:type_name -> ypb.FuzzerResponse
	490, // 263: ypb.FuzzerResponse.Headers:type_name -> ypb.HTTPHeader
	471, // 264: ypb.FuzzerResponse.ExtractedResults:type_name -> ypb.KVPair
	477, // 265: ypb.FuzzerResponse.RedirectFlows:type_name -> ypb.RedirectHTTPFlow
	478, // 266: ypb.QueryHTTPFlowRequest.Pagination:type_name -> ypb.Paging
	483, // 267: ypb.ExportHTTPFlowsRequest.ExportWhere:type_name -> ypb.QueryHTTPFlowRequest
	483, // 268: ypb.DeleteHTTPFlowRequest.Filter:type_name -> ypb.QueryHTTPFlowRequest
	492, // 269: ypb.QueryHTTPFlowsIdsResponse.Data:type_name -> ypb.HTTPFlow
	492, // 270: ypb.HTTPFlows.Data:type_name -> ypb.HTTPFlow
	490, // 271: ypb.HTTPFlow.RequestHeader:type_name -> ypb.HTTPHeader
	490, // 272: ypb.HTTPFlow.ResponseHeader:type_name -> ypb.HTTPHeader
	493, // 273: ypb.HTTPFlow.GetParams:type_name -> ypb.FuzzableParam
	493, // 274: ypb.HTTPFlow.PostParams:type_name -> ypb.FuzzableParam
	493, // 275: ypb.HTTPFlow.CookieParams:type_name -> ypb.FuzzableParam
	478, // 276: ypb.QueryHTTPFlowResponse.Pagination:type_name -> ypb.Paging
	492, // 277: ypb.QueryHTTPFlowResponse.Data:type_name -> ypb.HTTPFlow
	501, // 278: ypb.HTTPFlowsFieldGroupResponse.Tags:type_name -> ypb.TagsCode
	501, // 279: ypb.HTTPFlowsFieldGroupResponse.StatusCode:type_name -> ypb.TagsCode
	478, // 280: ypb.WebsocketFlows.Pagination:type_name -> ypb.Paging
	503, // 281: ypb.WebsocketFlows.Data:type_name -> ypb.WebsocketFlow
	508, // 282: ypb.SetMITMFilterRequest.FilterData:type_name -> ypb.MITMFilterData
	508, // 283: ypb.MITMRequest.FilterData:type_name -> ypb.MITMFilterData
	520, // 284: ypb.MITMRequest.yakScriptParams:type_name -> ypb.ExecParamItem
	511, // 285: ypb.MITMRequest.removeHookParams:type_name -> ypb.RemoveHookParams
	510, // 286: ypb.MITMRequest.replacers:type_name -> ypb.MITMContentReplacer
	509, // 287: ypb.MITMRequest.certificates:type_name -> ypb.Certificate
	471, // 288: ypb.MITMRequest.hosts:type_name -> ypb.KVPair
	507, // 289: ypb.MITMFilterData.IncludeHostnames:type_name -> ypb.FilterDataItem
	507, // 290: ypb.MITMFilterData.ExcludeHostnames:type_name -> ypb.FilterDataItem
	507, // 291: ypb.MITMFilterData.IncludeSuffix:type_name -> ypb.FilterDataItem
	507, // 292: ypb.MITMFilterData.ExcludeSuffix:type_name -> ypb.FilterDataItem
	507, // 293: ypb.MITMFilterData.IncludeUri:type_name -> ypb.FilterDataItem
	507, // 294: ypb.MITMFilterData.ExcludeUri:type_name -> ypb.FilterDataItem
	507, // 295: ypb.MITMFilterData.ExcludeMethods:type_name -> ypb.FilterDataItem
	507, // 296: ypb.MITMFilterData.ExcludeMIME:type_name -> ypb.FilterDataItem
	490, // 297: ypb.MITMContentReplacer.ExtraHeaders:type_name -> ypb.HTTPHeader
	348, // 298: ypb.MITMContentReplacer.ExtraCookies:type_name -> ypb.HTTPCookieSetting
	508, // 299: ypb.MITMResponse.FilterData:type_name -> ypb.MITMFilterData
	510, // 300: ypb.MITMResponse.replacers:type_name -> ypb.MITMContentReplacer
	492, // 301: ypb.MITMResponse.historyHTTPFlow:type_name -> ypb.HTTPFlow
	522, // 302: ypb.MITMResponse.message:type_name -> ypb.ExecResult
	514, // 303: ypb.MITMResponse.hooks:type_name -> ypb.YakScriptHooks
	513, // 304: ypb.MITMResponse.traceInfo:type_name -> ypb.TraceInfo
	515, // 305: ypb.YakScriptHooks.Hooks:type_name -> ypb.YakScriptHookItem
	520, // 306: ypb.ExecRequest.Params:type_name -> ypb.ExecParamItem
	6,   // 307: ypb.ImportHTTPFuzzerTaskFromYamlResponse.Status:type_name -> ypb.GeneralResponse
	468, // 308: ypb.ImportHTTPFuzzerTaskFromYamlResponse.Requests:type_name -> ypb.FuzzerRequests
	468, // 309: ypb.ExportHTTPFuzzerTaskToYamlRequest.Requests:type_name -> ypb.FuzzerRequests
	6,   // 310: ypb.ExportHTTPFuzzerTaskToYamlResponse.Status:type_name -> ypb.GeneralResponse
	471, // 311: ypb.EvaluateExpressionRequest.Variables:type_name -> ypb.KVPair
	471, // 312: ypb.EvaluateMultiExpressionRequest.Variables:type_name -> ypb.KVPair
	544, // 313: ypb.EvaluateMultiExpressionResponse.Results:type_name -> ypb.EvaluateExpressionResponse
	547, // 314: ypb.GetThirdPartyAppConfigTemplate.Items:type_name -> ypb.ThirdPartyAppConfigItemTemplate
	548, // 315: ypb.GetThirdPartyAppConfigTemplateResponse.Templates:type_name -> ypb.GetThirdPartyAppConfigTemplate
	6,   // 316: ypb.GenerateReverseShellCommandResponse.Status:type_name -> ypb.GeneralResponse
	563, // 317: ypb.FingerprintRule.CPE:type_name -> ypb.CPE
	565, // 318: ypb.QueryFingerprintRequest.Filter:type_name -> ypb.FingerprintFilter
	478, // 319: ypb.QueryFingerprintRequest.Pagination:type_name -> ypb.Paging
	478, // 320: ypb.QueryFingerprintResponse.Pagination:type_name -> ypb.Paging
	564, // 321: ypb.QueryFingerprintResponse.Data:type_name -> ypb.FingerprintRule
	565, // 322: ypb.DeleteFingerprintRequest.Filter:type_name -> ypb.FingerprintFilter
	564, // 323: ypb.CreateFingerprintRequest.Rule:type_name -> ypb.FingerprintRule
	564, // 324: ypb.UpdateFingerprintRequest.Rule:type_name -> ypb.FingerprintRule
	478, // 325: ypb.QuerySyntaxFlowRuleRequest.Pagination:type_name -> ypb.Paging
	574, // 326: ypb.QuerySyntaxFlowRuleRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	478, // 327: ypb.QuerySSAProgramRequest.Paging:type_name -> ypb.Paging
	478, // 328: ypb.QuerySSAProgramRequest.Pagination:type_name -> ypb.Paging
	577, // 329: ypb.QuerySSAProgramRequest.Filter:type_name -> ypb.SSAProgramFilter
	576, // 330: ypb.UpdateSSAProgramRequest.ProgramInput:type_name -> ypb.SSAProgramInput
	577, // 331: ypb.DeleteSSAProgramRequest.Filter:type_name -> ypb.SSAProgramFilter
	478, // 332: ypb.QuerySSAProgramResponse.Paging:type_name -> ypb.Paging
	478, // 333: ypb.QuerySSAProgramResponse.Pagination:type_name -> ypb.Paging
	575, // 334: ypb.QuerySSAProgramResponse.Programs:type_name -> ypb.SSAProgram
	575, // 335: ypb.QuerySSAProgramResponse.Data:type_name -> ypb.SSAProgram
	573, // 336: ypb.CreateSyntaxFlowRuleRequest.SyntaxFlowInput:type_name -> ypb.SyntaxFlowRuleInput
	573, // 337: ypb.UpdateSyntaxFlowRuleRequest.SyntaxFlowInput:type_name -> ypb.SyntaxFlowRuleInput
	478, // 338: ypb.QuerySyntaxFlowRuleResponse.Pagination:type_name -> ypb.Paging
	562, // 339: ypb.QuerySyntaxFlowRuleResponse.DbMessage:type_name -> ypb.DbOperateMessage
	572, // 340: ypb.QuerySyntaxFlowRuleResponse.Rule:type_name -> ypb.SyntaxFlowRule
	574, // 341: ypb.DeleteSyntaxFlowRuleRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	586, // 342: ypb.QuerySyntaxFlowRuleGroupRequest.Filter:type_name -> ypb.SyntaxFlowRuleGroupFilter
	587, // 343: ypb.QuerySyntaxFlowRuleGroupResponse.Group:type_name -> ypb.SyntaxFlowGroup
	574, // 344: ypb.UpdateSyntaxFlowRuleAndGroupRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	586, // 345: ypb.DeleteSyntaxFlowRuleGroupRequest.Filter:type_name -> ypb.SyntaxFlowRuleGroupFilter
	574, // 346: ypb.SyntaxFlowScanRequest.Filter:type_name -> ypb.SyntaxFlowRuleFilter
	478, // 347: ypb.QuerySyntaxFlowScanTaskRequest.Pagination:type_name -> ypb.Paging
	595, // 348: ypb.QuerySyntaxFlowScanTaskRequest.Filter:type_name -> ypb.SyntaxFlowScanTaskFilter
	478, // 349: ypb.QuerySyntaxFlowScanTaskResponse.Pagination:type_name -> ypb.Paging
	597, // 350: ypb.QuerySyntaxFlowScanTaskResponse.Data:type_name -> ypb.SyntaxFlowScanTask
	595, // 351: ypb.DeleteSyntaxFlowScanTaskRequest.Filter:type_name -> ypb.SyntaxFlowScanTaskFilter
	522, // 352: ypb.SyntaxFlowScanResponse.ExecResult:type_name -> ypb.ExecResult
	603, // 353: ypb.SyntaxFlowScanResponse.Result:type_name -> ypb.SyntaxFlowResult
	303, // 354: ypb.SyntaxFlowScanResponse.risks:type_name -> ypb.Risk
	478, // 355: ypb.QuerySyntaxFlowResultRequest.Pagination:type_name -> ypb.Paging
	600, // 356: ypb.QuerySyntaxFlowResultRequest.Filter:type_name -> ypb.SyntaxFlowResultFilter
	478, // 357: ypb.QuerySyntaxFlowResultResponse.Pagination:type_name -> ypb.Paging
	562, // 358: ypb.QuerySyntaxFlowResultResponse.DbMessage:type_name -> ypb.DbOperateMessage
	603, // 359: ypb.QuerySyntaxFlowResultResponse.Results:type_name -> ypb.SyntaxFlowResult
	471, // 360: ypb.PluginEnvData.Env:type_name -> ypb.KVPair
	610, // 361: ypb.GetAllFuzztagInfoResponse.Data:type_name -> ypb.FuzztagInfo
	609, // 362: ypb.FuzztagInfo.ArgumentTypes:type_name -> ypb.FuzztagArgumentType
	159, // 363: ypb.GenerateFuzztagRequest.Range:type_name -> ypb.Range
	6,   // 364: ypb.GenerateFuzztagResponse.Status:type_name -> ypb.GeneralResponse
	230, // 365: ypb.ExtractDataToFileRequest.DataEntry.value:type_name -> ypb.ExtractableData
	259, // 366: ypb.YsoClassGeneraterOptionsWithVerbose.BindOptionsEntry.value:type_name -> ypb.YsoClassOptionsResponseWithVerbose
	4,   // 367: ypb.Yak.Version:input_type -> ypb.Empty
	538, // 368: ypb.Yak.YakVersionAtLeast:input_type -> ypb.YakVersionAtLeastRequest
	516, // 369: ypb.Yak.Echo:input_type -> ypb.EchoRequest
	4,   // 370: ypb.Yak.VerifySystemCertificate:input_type -> ypb.Empty
	506, // 371: ypb.Yak.MITM:input_type -> ypb.MITMRequest
	504, // 372: ypb.Yak.SetMITMFilter:input_type -> ypb.SetMITMFilterRequest
	4,   // 373: ypb.Yak.GetMITMFilter:input_type -> ypb.Empty
	4,   // 374: ypb.Yak.ResetMITMFilter:input_type -> ypb.Empty
	4,   // 375: ypb.Yak.DownloadMITMCert:input_type -> ypb.Empty
	518, // 376: ypb.Yak.OpenPort:input_type -> ypb.Input
	521, // 377: ypb.Yak.Exec:input_type -> ypb.ExecRequest
	449, // 378: ypb.Yak.QueryExecHistory:input_type -> ypb.ExecHistoryRequest
	4,   // 379: ypb.Yak.RemoveExecHistory:input_type -> ypb.Empty
	4,   // 380: ypb.Yak.LoadNucleiTemplates:input_type -> ypb.Empty
	4,   // 381: ypb.Yak.AutoUpdateYakModule:input_type -> ypb.Empty
	521, // 382: ypb.Yak.ExecYakScript:input_type -> ypb.ExecRequest
	8,   // 383: ypb.Yak.ExecBatchYakScript:input_type -> ypb.ExecBatchYakScriptRequest
	4,   // 384: ypb.Yak.GetExecBatchYakScriptUnfinishedTask:input_type -> ypb.Empty
	196, // 385: ypb.Yak.GetExecBatchYakScriptUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	196, // 386: ypb.Yak.PopExecBatchYakScriptUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	197, // 387: ypb.Yak.RecoverExecBatchYakScriptUnfinishedTask:input_type -> ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	413, // 388: ypb.Yak.QueryYakScript:input_type -> ypb.QueryYakScriptRequest
	413, // 389: ypb.Yak.QueryYakScriptByYakScriptName:input_type -> ypb.QueryYakScriptRequest
	417, // 390: ypb.Yak.SaveYakScript:input_type -> ypb.YakScript
	7,   // 391: ypb.Yak.DeleteYakScript:input_type -> ypb.DeleteYakScriptRequest
	10,  // 392: ypb.Yak.GetYakScriptById:input_type -> ypb.GetYakScriptByIdRequest
	11,  // 393: ypb.Yak.GetYakScriptByName:input_type -> ypb.GetYakScriptByNameRequest
	12,  // 394: ypb.Yak.GetYakScriptByOnlineID:input_type -> ypb.GetYakScriptByOnlineIDRequest
	7,   // 395: ypb.Yak.IgnoreYakScript:input_type -> ypb.DeleteYakScriptRequest
	7,   // 396: ypb.Yak.UnIgnoreYakScript:input_type -> ypb.DeleteYakScriptRequest
	350, // 397: ypb.Yak.ExportYakScript:input_type -> ypb.ExportYakScriptRequest
	351, // 398: ypb.Yak.ExportYakScriptStream:input_type -> ypb.ExportYakScriptStreamRequest
	352, // 399: ypb.Yak.ImportYakScriptStream:input_type -> ypb.ImportYakScriptStreamRequest
	280, // 400: ypb.Yak.ExecutePacketYakScript:input_type -> ypb.ExecutePacketYakScriptParams
	281, // 401: ypb.Yak.ExecuteBatchPacketYakScript:input_type -> ypb.ExecuteBatchPacketYakScriptParams
	4,   // 402: ypb.Yak.GetYakScriptTags:input_type -> ypb.Empty
	218, // 403: ypb.Yak.QueryYakScriptLocalAndUser:input_type -> ypb.QueryYakScriptLocalAndUserRequest
	220, // 404: ypb.Yak.QueryYakScriptByOnlineGroup:input_type -> ypb.QueryYakScriptByOnlineGroupRequest
	4,   // 405: ypb.Yak.QueryYakScriptLocalAll:input_type -> ypb.Empty
	221, // 406: ypb.Yak.QueryYakScriptByNames:input_type -> ypb.QueryYakScriptByNamesRequest
	222, // 407: ypb.Yak.QueryYakScriptByIsCore:input_type -> ypb.QueryYakScriptByIsCoreRequest
	225, // 408: ypb.Yak.QueryYakScriptRiskDetailByCWE:input_type -> ypb.QueryYakScriptRiskDetailByCWERequest
	4,   // 409: ypb.Yak.YakScriptRiskTypeList:input_type -> ypb.Empty
	419, // 410: ypb.Yak.SaveNewYakScript:input_type -> ypb.SaveNewYakScriptRequest
	420, // 411: ypb.Yak.SaveYakScriptToOnline:input_type -> ypb.SaveYakScriptToOnlineRequest
	423, // 412: ypb.Yak.ExportLocalYakScript:input_type -> ypb.ExportLocalYakScriptRequest
	423, // 413: ypb.Yak.ExportLocalYakScriptStream:input_type -> ypb.ExportLocalYakScriptRequest
	426, // 414: ypb.Yak.ImportYakScript:input_type -> ypb.ImportYakScriptRequest
	428, // 415: ypb.Yak.QueryYakScriptGroup:input_type -> ypb.QueryYakScriptGroupRequest
	431, // 416: ypb.Yak.SaveYakScriptGroup:input_type -> ypb.SaveYakScriptGroupRequest
	432, // 417: ypb.Yak.RenameYakScriptGroup:input_type -> ypb.RenameYakScriptGroupRequest
	433, // 418: ypb.Yak.DeleteYakScriptGroup:input_type -> ypb.DeleteYakScriptGroupRequest
	413, // 419: ypb.Yak.GetYakScriptGroup:input_type -> ypb.QueryYakScriptRequest
	435, // 420: ypb.Yak.ResetYakScriptGroup:input_type -> ypb.ResetYakScriptGroupRequest
	436, // 421: ypb.Yak.SetGroup:input_type -> ypb.SetGroupRequest
	479, // 422: ypb.Yak.GetHTTPFlowByHash:input_type -> ypb.GetHTTPFlowByHashRequest
	480, // 423: ypb.Yak.GetHTTPFlowById:input_type -> ypb.GetHTTPFlowByIdRequest
	482, // 424: ypb.Yak.GetHTTPFlowBodyById:input_type -> ypb.GetHTTPFlowBodyByIdRequest
	481, // 425: ypb.Yak.GetHTTPFlowByIds:input_type -> ypb.GetHTTPFlowByIdsRequest
	483, // 426: ypb.Yak.QueryHTTPFlows:input_type -> ypb.QueryHTTPFlowRequest
	487, // 427: ypb.Yak.DeleteHTTPFlows:input_type -> ypb.DeleteHTTPFlowRequest
	244, // 428: ypb.Yak.SetTagForHTTPFlow:input_type -> ypb.SetTagForHTTPFlowRequest
	488, // 429: ypb.Yak.QueryHTTPFlowsIds:input_type -> ypb.QueryHTTPFlowsIdsRequest
	496, // 430: ypb.Yak.HTTPFlowsFieldGroup:input_type -> ypb.HTTPFlowsFieldGroupRequest
	498, // 431: ypb.Yak.HTTPFlowsShare:input_type -> ypb.HTTPFlowsShareRequest
	500, // 432: ypb.Yak.HTTPFlowsExtract:input_type -> ypb.HTTPFlowsExtractRequest
	526, // 433: ypb.Yak.GetHTTPFlowBare:input_type -> ypb.HTTPFlowBareRequest
	485, // 434: ypb.Yak.ExportHTTPFlows:input_type -> ypb.ExportHTTPFlowsRequest
	484, // 435: ypb.Yak.HTTPFlowsToOnline:input_type -> ypb.HTTPFlowsToOnlineRequest
	483, // 436: ypb.Yak.QueryHTTPFlowsProcessNames:input_type -> ypb.QueryHTTPFlowRequest
	469, // 437: ypb.Yak.ExtractUrl:input_type -> ypb.FuzzerRequest
	274, // 438: ypb.Yak.GetHistoryHTTPFuzzerTask:input_type -> ypb.GetHistoryHTTPFuzzerTaskRequest
	4,   // 439: ypb.Yak.QueryHistoryHTTPFuzzerTask:input_type -> ypb.Empty
	279, // 440: ypb.Yak.QueryHistoryHTTPFuzzerTaskEx:input_type -> ypb.QueryHistoryHTTPFuzzerTaskExParams
	250, // 441: ypb.Yak.DeleteHistoryHTTPFuzzerTask:input_type -> ypb.DeleteHistoryHTTPFuzzerTaskRequest
	469, // 442: ypb.Yak.HTTPFuzzer:input_type -> ypb.FuzzerRequest
	468, // 443: ypb.Yak.HTTPFuzzerSequence:input_type -> ypb.FuzzerRequests
	465, // 444: ypb.Yak.PreloadHTTPFuzzerParams:input_type -> ypb.PreloadHTTPFuzzerParamsRequest
	458, // 445: ypb.Yak.RenderVariables:input_type -> ypb.RenderVariablesRequest
	460, // 446: ypb.Yak.MatchHTTPResponse:input_type -> ypb.MatchHTTPResponseParams
	464, // 447: ypb.Yak.ExtractHTTPResponse:input_type -> ypb.ExtractHTTPResponseParams
	473, // 448: ypb.Yak.RedirectRequest:input_type -> ypb.RedirectRequestParams
	326, // 449: ypb.Yak.HTTPRequestMutate:input_type -> ypb.HTTPRequestMutateParams
	327, // 450: ypb.Yak.HTTPResponseMutate:input_type -> ypb.HTTPResponseMutateParams
	209, // 451: ypb.Yak.FixUploadPacket:input_type -> ypb.FixUploadPacketRequest
	209, // 452: ypb.Yak.IsMultipartFormDataRequest:input_type -> ypb.FixUploadPacketRequest
	148, // 453: ypb.Yak.GenerateExtractRule:input_type -> ypb.GenerateExtractRuleRequest
	147, // 454: ypb.Yak.ExtractData:input_type -> ypb.ExtractDataRequest
	528, // 455: ypb.Yak.ImportHTTPFuzzerTaskFromYaml:input_type -> ypb.ImportHTTPFuzzerTaskFromYamlRequest
	530, // 456: ypb.Yak.ExportHTTPFuzzerTaskToYaml:input_type -> ypb.ExportHTTPFuzzerTaskToYamlRequest
	532, // 457: ypb.Yak.RenderHTTPFuzzerPacket:input_type -> ypb.RenderHTTPFuzzerPacketRequest
	138, // 458: ypb.Yak.SaveFuzzerLabel:input_type -> ypb.SaveFuzzerLabelRequest
	4,   // 459: ypb.Yak.QueryFuzzerLabel:input_type -> ypb.Empty
	141, // 460: ypb.Yak.DeleteFuzzerLabel:input_type -> ypb.DeleteFuzzerLabelRequest
	142, // 461: ypb.Yak.SaveFuzzerConfig:input_type -> ypb.SaveFuzzerConfigRequest
	143, // 462: ypb.Yak.QueryFuzzerConfig:input_type -> ypb.QueryFuzzerConfigRequest
	146, // 463: ypb.Yak.DeleteFuzzerConfig:input_type -> ypb.DeleteFuzzerConfigRequest
	151, // 464: ypb.Yak.QueryHTTPFuzzerResponseByTaskId:input_type -> ypb.QueryHTTPFuzzerResponseByTaskIdRequest
	155, // 465: ypb.Yak.CreateWebsocketFuzzer:input_type -> ypb.ClientWebsocketRequest
	153, // 466: ypb.Yak.QueryWebsocketFlowByHTTPFlowWebsocketHash:input_type -> ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest
	154, // 467: ypb.Yak.DeleteWebsocketFlowByHTTPFlowWebsocketHash:input_type -> ypb.DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest
	4,   // 468: ypb.Yak.DeleteWebsocketFlowAll:input_type -> ypb.Empty
	476, // 469: ypb.Yak.ConvertFuzzerResponseToHTTPFlow:input_type -> ypb.FuzzerResponse
	452, // 470: ypb.Yak.StringFuzzer:input_type -> ypb.StringFuzzerRequest
	454, // 471: ypb.Yak.HTTPRequestAnalyzer:input_type -> ypb.HTTPRequestAnalysisMaterial
	439, // 472: ypb.Yak.Codec:input_type -> ypb.CodecRequest
	441, // 473: ypb.Yak.NewCodec:input_type -> ypb.CodecRequestFlow
	4,   // 474: ypb.Yak.GetAllCodecMethods:input_type -> ypb.Empty
	442, // 475: ypb.Yak.SaveCodecFlow:input_type -> ypb.CustomizeCodecFlow
	443, // 476: ypb.Yak.DeleteCodecFlow:input_type -> ypb.DeleteCodecFlowRequest
	4,   // 477: ypb.Yak.GetAllCodecFlow:input_type -> ypb.Empty
	48,  // 478: ypb.Yak.PacketPrettifyHelper:input_type -> ypb.PacketPrettifyHelperRequest
	407, // 479: ypb.Yak.QueryPayload:input_type -> ypb.QueryPayloadRequest
	405, // 480: ypb.Yak.QueryPayloadFromFile:input_type -> ypb.QueryPayloadFromFileRequest
	395, // 481: ypb.Yak.DeletePayloadByFolder:input_type -> ypb.NameRequest
	403, // 482: ypb.Yak.DeletePayloadByGroup:input_type -> ypb.DeletePayloadByGroupRequest
	404, // 483: ypb.Yak.DeletePayload:input_type -> ypb.DeletePayloadRequest
	399, // 484: ypb.Yak.SavePayload:input_type -> ypb.SavePayloadRequest
	399, // 485: ypb.Yak.SavePayloadStream:input_type -> ypb.SavePayloadRequest
	399, // 486: ypb.Yak.SavePayloadToFileStream:input_type -> ypb.SavePayloadRequest
	399, // 487: ypb.Yak.SaveLargePayloadToFileStream:input_type -> ypb.SavePayloadRequest
	394, // 488: ypb.Yak.RenamePayloadFolder:input_type -> ypb.RenameRequest
	394, // 489: ypb.Yak.RenamePayloadGroup:input_type -> ypb.RenameRequest
	400, // 490: ypb.Yak.UpdatePayload:input_type -> ypb.UpdatePayloadRequest
	401, // 491: ypb.Yak.UpdatePayloadToFile:input_type -> ypb.UpdatePayloadToFileRequest
	402, // 492: ypb.Yak.BackUpOrCopyPayloads:input_type -> ypb.BackUpOrCopyPayloadsRequest
	4,   // 493: ypb.Yak.GetAllPayloadGroup:input_type -> ypb.Empty
	398, // 494: ypb.Yak.UpdateAllPayloadGroup:input_type -> ypb.UpdateAllPayloadGroupRequest
	410, // 495: ypb.Yak.GetAllPayload:input_type -> ypb.GetAllPayloadRequest
	410, // 496: ypb.Yak.GetAllPayloadFromFile:input_type -> ypb.GetAllPayloadRequest
	410, // 497: ypb.Yak.ExportAllPayload:input_type -> ypb.GetAllPayloadRequest
	410, // 498: ypb.Yak.ExportAllPayloadFromFile:input_type -> ypb.GetAllPayloadRequest
	395, // 499: ypb.Yak.CreatePayloadFolder:input_type -> ypb.NameRequest
	395, // 500: ypb.Yak.RemoveDuplicatePayloads:input_type -> ypb.NameRequest
	395, // 501: ypb.Yak.CoverPayloadGroupToDatabase:input_type -> ypb.NameRequest
	395, // 502: ypb.Yak.ConvertPayloadGroupToDatabase:input_type -> ypb.NameRequest
	4,   // 503: ypb.Yak.MigratePayloads:input_type -> ypb.Empty
	4,   // 504: ypb.Yak.GetYakitCompletionRaw:input_type -> ypb.Empty
	390, // 505: ypb.Yak.GetYakVMBuildInMethodCompletion:input_type -> ypb.GetYakVMBuildInMethodCompletionRequest
	171, // 506: ypb.Yak.StaticAnalyzeError:input_type -> ypb.StaticAnalyzeErrorRequest
	172, // 507: ypb.Yak.YaklangCompileAndFormat:input_type -> ypb.YaklangCompileAndFormatRequest
	161, // 508: ypb.Yak.YaklangLanguageSuggestion:input_type -> ypb.YaklangLanguageSuggestionRequest
	161, // 509: ypb.Yak.YaklangLanguageFind:input_type -> ypb.YaklangLanguageSuggestionRequest
	160, // 510: ypb.Yak.YaklangInspectInformation:input_type -> ypb.YaklangInspectInformationRequest
	170, // 511: ypb.Yak.YaklangGetCliCodeFromDatabase:input_type -> ypb.YaklangGetCliCodeFromDatabaseRequest
	518, // 512: ypb.Yak.YaklangTerminal:input_type -> ypb.Input
	384, // 513: ypb.Yak.PortScan:input_type -> ypb.PortScanRequest
	4,   // 514: ypb.Yak.ViewPortScanCode:input_type -> ypb.Empty
	382, // 515: ypb.Yak.SimpleDetect:input_type -> ypb.RecordPortScanRequest
	382, // 516: ypb.Yak.SaveCancelSimpleDetect:input_type -> ypb.RecordPortScanRequest
	383, // 517: ypb.Yak.SimpleDetectCreatReport:input_type -> ypb.CreatReportRequest
	203, // 518: ypb.Yak.QuerySimpleDetectUnfinishedTask:input_type -> ypb.QueryUnfinishedTaskRequest
	207, // 519: ypb.Yak.GetSimpleDetectRecordRequestById:input_type -> ypb.GetUnfinishedTaskDetailByIdRequest
	204, // 520: ypb.Yak.DeleteSimpleDetectUnfinishedTask:input_type -> ypb.DeleteUnfinishedTaskRequest
	208, // 521: ypb.Yak.RecoverSimpleDetectTask:input_type -> ypb.RecoverUnfinishedTaskRequest
	4,   // 522: ypb.Yak.GetSimpleDetectUnfinishedTask:input_type -> ypb.Empty
	196, // 523: ypb.Yak.GetSimpleDetectUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	196, // 524: ypb.Yak.PopSimpleDetectUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	197, // 525: ypb.Yak.RecoverSimpleDetectUnfinishedTask:input_type -> ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	386, // 526: ypb.Yak.QueryPorts:input_type -> ypb.QueryPortsRequest
	385, // 527: ypb.Yak.DeletePorts:input_type -> ypb.DeletePortsRequest
	329, // 528: ypb.Yak.QueryHosts:input_type -> ypb.QueryHostsRequest
	330, // 529: ypb.Yak.DeleteHosts:input_type -> ypb.DeleteHostsRequest
	332, // 530: ypb.Yak.QueryDomains:input_type -> ypb.QueryDomainsRequest
	333, // 531: ypb.Yak.DeleteDomains:input_type -> ypb.DeleteDomainsRequest
	4,   // 532: ypb.Yak.QueryPortsGroup:input_type -> ypb.Empty
	378, // 533: ypb.Yak.UpdateFromYakitResource:input_type -> ypb.UpdateFromYakitResourceRequest
	379, // 534: ypb.Yak.UpdateFromGithub:input_type -> ypb.UpdateFromGithubRequest
	366, // 535: ypb.Yak.AddToMenu:input_type -> ypb.AddToMenuRequest
	365, // 536: ypb.Yak.RemoveFromMenu:input_type -> ypb.RemoveFromMenuRequest
	364, // 537: ypb.Yak.YakScriptIsInMenu:input_type -> ypb.YakScriptIsInMenuRequest
	4,   // 538: ypb.Yak.GetAllMenuItem:input_type -> ypb.Empty
	4,   // 539: ypb.Yak.DeleteAllMenuItem:input_type -> ypb.Empty
	369, // 540: ypb.Yak.ImportMenuItem:input_type -> ypb.ImportMenuItemRequest
	4,   // 541: ypb.Yak.ExportMenuItem:input_type -> ypb.Empty
	362, // 542: ypb.Yak.GetMenuItemById:input_type -> ypb.GetMenuItemByIdRequest
	358, // 543: ypb.Yak.QueryGroupsByYakScriptId:input_type -> ypb.QueryGroupsByYakScriptIdRequest
	367, // 544: ypb.Yak.AddMenus:input_type -> ypb.AddMenuRequest
	368, // 545: ypb.Yak.QueryAllMenuItem:input_type -> ypb.QueryAllMenuItemRequest
	368, // 546: ypb.Yak.DeleteAllMenu:input_type -> ypb.QueryAllMenuItemRequest
	371, // 547: ypb.Yak.AddToNavigation:input_type -> ypb.AddToNavigationRequest
	374, // 548: ypb.Yak.GetAllNavigationItem:input_type -> ypb.GetAllNavigationRequest
	374, // 549: ypb.Yak.DeleteAllNavigation:input_type -> ypb.GetAllNavigationRequest
	376, // 550: ypb.Yak.AddOneNavigation:input_type -> ypb.AddOneNavigationRequest
	377, // 551: ypb.Yak.QueryNavigationGroups:input_type -> ypb.QueryNavigationGroupsRequest
	356, // 552: ypb.Yak.SaveMarkdownDocument:input_type -> ypb.SaveMarkdownDocumentRequest
	355, // 553: ypb.Yak.GetMarkdownDocument:input_type -> ypb.GetMarkdownDocumentRequest
	355, // 554: ypb.Yak.DeleteMarkdownDocument:input_type -> ypb.GetMarkdownDocumentRequest
	347, // 555: ypb.Yak.StartBasicCrawler:input_type -> ypb.StartBasicCrawlerRequest
	4,   // 556: ypb.Yak.ViewBasicCrawlerCode:input_type -> ypb.Empty
	346, // 557: ypb.Yak.GenerateWebsiteTree:input_type -> ypb.GenerateWebsiteTreeRequest
	343, // 558: ypb.Yak.QueryYakScriptExecResult:input_type -> ypb.QueryYakScriptExecResultRequest
	4,   // 559: ypb.Yak.QueryYakScriptNameInExecResult:input_type -> ypb.Empty
	341, // 560: ypb.Yak.DeleteYakScriptExecResult:input_type -> ypb.DeleteYakScriptExecResultRequest
	4,   // 561: ypb.Yak.DeleteYakScriptExec:input_type -> ypb.Empty
	325, // 562: ypb.Yak.StartBrute:input_type -> ypb.StartBruteParams
	4,   // 563: ypb.Yak.GetAvailableBruteTypes:input_type -> ypb.Empty
	317, // 564: ypb.Yak.GetTunnelServerExternalIP:input_type -> ypb.GetTunnelServerExternalIPParams
	315, // 565: ypb.Yak.VerifyTunnelServerDomain:input_type -> ypb.VerifyTunnelServerDomainParams
	319, // 566: ypb.Yak.StartFacades:input_type -> ypb.StartFacadesParams
	322, // 567: ypb.Yak.StartFacadesWithYsoObject:input_type -> ypb.StartFacadesWithYsoParams
	320, // 568: ypb.Yak.ApplyClassToFacades:input_type -> ypb.ApplyClassToFacadesParamsWithVerbose
	268, // 569: ypb.Yak.BytesToBase64:input_type -> ypb.BytesToBase64Request
	300, // 570: ypb.Yak.ConfigGlobalReverse:input_type -> ypb.ConfigGlobalReverseParams
	4,   // 571: ypb.Yak.AvailableLocalAddr:input_type -> ypb.Empty
	4,   // 572: ypb.Yak.GetGlobalReverseServer:input_type -> ypb.Empty
	304, // 573: ypb.Yak.QueryRisks:input_type -> ypb.QueryRisksRequest
	302, // 574: ypb.Yak.QueryRisk:input_type -> ypb.QueryRiskRequest
	301, // 575: ypb.Yak.DeleteRisk:input_type -> ypb.DeleteRiskRequest
	4,   // 576: ypb.Yak.QueryAvailableRiskType:input_type -> ypb.Empty
	4,   // 577: ypb.Yak.QueryAvailableRiskLevel:input_type -> ypb.Empty
	4,   // 578: ypb.Yak.QueryRiskTableStats:input_type -> ypb.Empty
	4,   // 579: ypb.Yak.ResetRiskTableStats:input_type -> ypb.Empty
	4,   // 580: ypb.Yak.QueryAvailableTarget:input_type -> ypb.Empty
	306, // 581: ypb.Yak.QueryNewRisk:input_type -> ypb.QueryNewRiskRequest
	312, // 582: ypb.Yak.NewRiskRead:input_type -> ypb.NewRiskReadRequest
	313, // 583: ypb.Yak.UploadRiskToOnline:input_type -> ypb.UploadRiskToOnlineRequest
	314, // 584: ypb.Yak.SetTagForRisk:input_type -> ypb.SetTagForRiskRequest
	4,   // 585: ypb.Yak.QueryRiskTags:input_type -> ypb.Empty
	4,   // 586: ypb.Yak.RiskFieldGroup:input_type -> ypb.Empty
	242, // 587: ypb.Yak.QueryReports:input_type -> ypb.QueryReportsRequest
	239, // 588: ypb.Yak.QueryReport:input_type -> ypb.QueryReportRequest
	240, // 589: ypb.Yak.DeleteReport:input_type -> ypb.DeleteReportRequest
	4,   // 590: ypb.Yak.QueryAvailableReportFrom:input_type -> ypb.Empty
	340, // 591: ypb.Yak.DownloadReport:input_type -> ypb.DownloadReportRequest
	4,   // 592: ypb.Yak.GetAllYsoGadgetOptions:input_type -> ypb.Empty
	262, // 593: ypb.Yak.GetAllYsoClassOptions:input_type -> ypb.YsoOptionsRequerstWithVerbose
	262, // 594: ypb.Yak.GetAllYsoClassGeneraterOptions:input_type -> ypb.YsoOptionsRequerstWithVerbose
	262, // 595: ypb.Yak.GenerateYsoCode:input_type -> ypb.YsoOptionsRequerstWithVerbose
	262, // 596: ypb.Yak.GenerateYsoBytes:input_type -> ypb.YsoOptionsRequerstWithVerbose
	264, // 597: ypb.Yak.YsoDump:input_type -> ypb.YsoBytesObject
	282, // 598: ypb.Yak.CreateWebShell:input_type -> ypb.WebShell
	290, // 599: ypb.Yak.DeleteWebShell:input_type -> ypb.DeleteWebShellRequest
	282, // 600: ypb.Yak.UpdateWebShell:input_type -> ypb.WebShell
	287, // 601: ypb.Yak.QueryWebShells:input_type -> ypb.QueryWebShellsRequest
	285, // 602: ypb.Yak.Ping:input_type -> ypb.WebShellRequest
	285, // 603: ypb.Yak.GetBasicInfo:input_type -> ypb.WebShellRequest
	283, // 604: ypb.Yak.GenerateWebShell:input_type -> ypb.ShellGenerate
	291, // 605: ypb.Yak.SetYakBridgeLogServer:input_type -> ypb.YakDNSLogBridgeAddr
	4,   // 606: ypb.Yak.GetCurrentYakBridgeLogServer:input_type -> ypb.Empty
	291, // 607: ypb.Yak.RequireDNSLogDomain:input_type -> ypb.YakDNSLogBridgeAddr
	292, // 608: ypb.Yak.RequireDNSLogDomainByScript:input_type -> ypb.RequireDNSLogDomainByScriptRequest
	293, // 609: ypb.Yak.QueryDNSLogByToken:input_type -> ypb.QueryDNSLogByTokenRequest
	292, // 610: ypb.Yak.QueryDNSLogTokenByScript:input_type -> ypb.RequireDNSLogDomainByScriptRequest
	4,   // 611: ypb.Yak.RequireICMPRandomLength:input_type -> ypb.Empty
	270, // 612: ypb.Yak.QueryICMPTrigger:input_type -> ypb.QueryICMPTriggerRequest
	4,   // 613: ypb.Yak.RequireRandomPortToken:input_type -> ypb.Empty
	248, // 614: ypb.Yak.QueryRandomPortTrigger:input_type -> ypb.QueryRandomPortTriggerRequest
	4,   // 615: ypb.Yak.QuerySupportedDnsLogPlatforms:input_type -> ypb.Empty
	4,   // 616: ypb.Yak.GetAvailableYakScriptTags:input_type -> ypb.Empty
	4,   // 617: ypb.Yak.ForceUpdateAvailableYakScriptTags:input_type -> ypb.Empty
	234, // 618: ypb.Yak.ExecYakitPluginsByYakScriptFilter:input_type -> ypb.ExecYakitPluginsByYakScriptFilterRequest
	235, // 619: ypb.Yak.GenerateYakCodeByPacket:input_type -> ypb.GenerateYakCodeByPacketRequest
	236, // 620: ypb.Yak.GenerateCSRFPocByPacket:input_type -> ypb.GenerateCSRFPocByPacketRequest
	4,   // 621: ypb.Yak.ExportMITMReplacerRules:input_type -> ypb.Empty
	232, // 622: ypb.Yak.ImportMITMReplacerRules:input_type -> ypb.ImportMITMReplacerRulesRequest
	4,   // 623: ypb.Yak.GetCurrentRules:input_type -> ypb.Empty
	231, // 624: ypb.Yak.SetCurrentRules:input_type -> ypb.MITMContentReplacers
	536, // 625: ypb.Yak.GenerateURL:input_type -> ypb.GenerateURLRequest
	229, // 626: ypb.Yak.ExtractDataToFile:input_type -> ypb.ExtractDataToFileRequest
	212, // 627: ypb.Yak.AutoDecode:input_type -> ypb.AutoDecodeRequest
	4,   // 628: ypb.Yak.GetSystemProxy:input_type -> ypb.Empty
	194, // 629: ypb.Yak.SetSystemProxy:input_type -> ypb.SetSystemProxyRequest
	190, // 630: ypb.Yak.GetKey:input_type -> ypb.GetKeyRequest
	189, // 631: ypb.Yak.SetKey:input_type -> ypb.SetKeyRequest
	190, // 632: ypb.Yak.DelKey:input_type -> ypb.GetKeyRequest
	4,   // 633: ypb.Yak.GetAllProcessEnvKey:input_type -> ypb.Empty
	189, // 634: ypb.Yak.SetProcessEnvKey:input_type -> ypb.SetKeyRequest
	190, // 635: ypb.Yak.GetProjectKey:input_type -> ypb.GetKeyRequest
	189, // 636: ypb.Yak.SetProjectKey:input_type -> ypb.SetKeyRequest
	4,   // 637: ypb.Yak.GetOnlineProfile:input_type -> ypb.Empty
	188, // 638: ypb.Yak.SetOnlineProfile:input_type -> ypb.OnlineProfile
	181, // 639: ypb.Yak.DownloadOnlinePluginById:input_type -> ypb.DownloadOnlinePluginByIdRequest
	182, // 640: ypb.Yak.DownloadOnlinePluginByIds:input_type -> ypb.DownloadOnlinePluginByIdsRequest
	180, // 641: ypb.Yak.DownloadOnlinePluginAll:input_type -> ypb.DownloadOnlinePluginByTokenRequest
	177, // 642: ypb.Yak.DeletePluginByUserID:input_type -> ypb.DeletePluginByUserIDRequest
	4,   // 643: ypb.Yak.DeleteAllLocalPlugins:input_type -> ypb.Empty
	4,   // 644: ypb.Yak.GetYakScriptTagsAndType:input_type -> ypb.Empty
	178, // 645: ypb.Yak.DeleteLocalPluginsByWhere:input_type -> ypb.DeleteLocalPluginsByWhereRequest
	184, // 646: ypb.Yak.DownloadOnlinePluginByScriptNames:input_type -> ypb.DownloadOnlinePluginByScriptNamesRequest
	183, // 647: ypb.Yak.DownloadOnlinePlugins:input_type -> ypb.DownloadOnlinePluginsRequest
	183, // 648: ypb.Yak.DownloadOnlinePluginBatch:input_type -> ypb.DownloadOnlinePluginsRequest
	184, // 649: ypb.Yak.DownloadOnlinePluginByPluginName:input_type -> ypb.DownloadOnlinePluginByScriptNamesRequest
	187, // 650: ypb.Yak.DownloadOnlinePluginByUUID:input_type -> ypb.DownloadOnlinePluginByUUIDRequest
	158, // 651: ypb.Yak.ExecPacketScan:input_type -> ypb.ExecPacketScanRequest
	4,   // 652: ypb.Yak.GetEngineDefaultProxy:input_type -> ypb.Empty
	157, // 653: ypb.Yak.SetEngineDefaultProxy:input_type -> ypb.DefaultProxyResult
	4,   // 654: ypb.Yak.GetMachineID:input_type -> ypb.Empty
	4,   // 655: ypb.Yak.GetLicense:input_type -> ypb.Empty
	524, // 656: ypb.Yak.CheckLicense:input_type -> ypb.CheckLicenseRequest
	135, // 657: ypb.Yak.GetRequestBodyByHTTPFlowID:input_type -> ypb.DownloadBodyByHTTPFlowIDRequest
	135, // 658: ypb.Yak.GetResponseBodyByHTTPFlowID:input_type -> ypb.DownloadBodyByHTTPFlowIDRequest
	134, // 659: ypb.Yak.GetHTTPPacketBody:input_type -> ypb.GetHTTPPacketBodyRequest
	132, // 660: ypb.Yak.RegisterFacadesHTTP:input_type -> ypb.RegisterFacadesHTTPRequest
	131, // 661: ypb.Yak.ResetAndInvalidUserData:input_type -> ypb.ResetAndInvalidUserDataRequest
	128, // 662: ypb.Yak.CreateYaklangShell:input_type -> ypb.YaklangShellRequest
	127, // 663: ypb.Yak.AttachCombinedOutput:input_type -> ypb.AttachCombinedOutputRequest
	4,   // 664: ypb.Yak.IsPrivilegedForNetRaw:input_type -> ypb.Empty
	4,   // 665: ypb.Yak.PromotePermissionForUserPcap:input_type -> ypb.Empty
	124, // 666: ypb.Yak.SetCurrentProject:input_type -> ypb.SetCurrentProjectRequest
	4,   // 667: ypb.Yak.GetCurrentProject:input_type -> ypb.Empty
	121, // 668: ypb.Yak.GetProjects:input_type -> ypb.GetProjectsRequest
	119, // 669: ypb.Yak.NewProject:input_type -> ypb.NewProjectRequest
	119, // 670: ypb.Yak.UpdateProject:input_type -> ypb.NewProjectRequest
	118, // 671: ypb.Yak.IsProjectNameValid:input_type -> ypb.IsProjectNameValidRequest
	117, // 672: ypb.Yak.RemoveProject:input_type -> ypb.RemoveProjectRequest
	125, // 673: ypb.Yak.DeleteProject:input_type -> ypb.DeleteProjectRequest
	4,   // 674: ypb.Yak.GetDefaultProject:input_type -> ypb.Empty
	126, // 675: ypb.Yak.QueryProjectDetail:input_type -> ypb.QueryProjectDetailRequest
	4,   // 676: ypb.Yak.GetTemporaryProject:input_type -> ypb.Empty
	113, // 677: ypb.Yak.ExportProject:input_type -> ypb.ExportProjectRequest
	115, // 678: ypb.Yak.ImportProject:input_type -> ypb.ImportProjectRequest
	4,   // 679: ypb.Yak.MigrateLegacyDatabase:input_type -> ypb.Empty
	109, // 680: ypb.Yak.QueryMITMRuleExtractedData:input_type -> ypb.QueryMITMRuleExtractedDataRequest
	111, // 681: ypb.Yak.ExportMITMRuleExtractedData:input_type -> ypb.ExportMITMRuleExtractedDataRequest
	93,  // 682: ypb.Yak.ImportChaosMakerRules:input_type -> ypb.ImportChaosMakerRulesRequest
	101, // 683: ypb.Yak.QueryChaosMakerRule:input_type -> ypb.QueryChaosMakerRuleRequest
	100, // 684: ypb.Yak.DeleteChaosMakerRuleByID:input_type -> ypb.DeleteChaosMakerRuleByIDRequest
	97,  // 685: ypb.Yak.ExecuteChaosMakerRule:input_type -> ypb.ExecuteChaosMakerRuleRequest
	95,  // 686: ypb.Yak.IsRemoteAddrAvailable:input_type -> ypb.IsRemoteAddrAvailableRequest
	95,  // 687: ypb.Yak.ConnectVulinboxAgent:input_type -> ypb.IsRemoteAddrAvailableRequest
	61,  // 688: ypb.Yak.GetRegisteredVulinboxAgent:input_type -> ypb.GetRegisteredAgentRequest
	60,  // 689: ypb.Yak.DisconnectVulinboxAgent:input_type -> ypb.DisconnectVulinboxAgentRequest
	106, // 690: ypb.Yak.IsCVEDatabaseReady:input_type -> ypb.IsCVEDatabaseReadyRequest
	104, // 691: ypb.Yak.UpdateCVEDatabase:input_type -> ypb.UpdateCVEDatabaseRequest
	103, // 692: ypb.Yak.ExportsProfileDatabase:input_type -> ypb.ExportsProfileDatabaseRequest
	102, // 693: ypb.Yak.ImportsProfileDatabase:input_type -> ypb.ImportsProfileDatabaseRequest
	86,  // 694: ypb.Yak.QueryCVE:input_type -> ypb.QueryCVERequest
	85,  // 695: ypb.Yak.GetCVE:input_type -> ypb.GetCVERequest
	91,  // 696: ypb.Yak.SaveTextToTemporalFile:input_type -> ypb.SaveTextToTemporalFileRequest
	83,  // 697: ypb.Yak.IsScrecorderReady:input_type -> ypb.IsScrecorderReadyRequest
	82,  // 698: ypb.Yak.InstallScrecorder:input_type -> ypb.InstallScrecorderRequest
	81,  // 699: ypb.Yak.StartScrecorder:input_type -> ypb.StartScrecorderRequest
	76,  // 700: ypb.Yak.QueryScreenRecorders:input_type -> ypb.QueryScreenRecorderRequest
	76,  // 701: ypb.Yak.DeleteScreenRecorders:input_type -> ypb.QueryScreenRecorderRequest
	77,  // 702: ypb.Yak.UploadScreenRecorders:input_type -> ypb.UploadScreenRecorderRequest
	78,  // 703: ypb.Yak.GetOneScreenRecorders:input_type -> ypb.GetOneScreenRecorderRequest
	79,  // 704: ypb.Yak.UpdateScreenRecorders:input_type -> ypb.UpdateScreenRecorderRequest
	66,  // 705: ypb.Yak.IsVulinboxReady:input_type -> ypb.IsVulinboxReadyRequest
	68,  // 706: ypb.Yak.InstallVulinbox:input_type -> ypb.InstallVulinboxRequest
	69,  // 707: ypb.Yak.StartVulinbox:input_type -> ypb.StartVulinboxRequest
	70,  // 708: ypb.Yak.GenQualityInspectionReport:input_type -> ypb.GenQualityInspectionReportRequest
	74,  // 709: ypb.Yak.HTTPRequestBuilder:input_type -> ypb.HTTPRequestBuilderParams
	71,  // 710: ypb.Yak.DebugPlugin:input_type -> ypb.DebugPluginRequest
	63,  // 711: ypb.Yak.SmokingEvaluatePlugin:input_type -> ypb.SmokingEvaluatePluginRequest
	534, // 712: ypb.Yak.SmokingEvaluatePluginBatch:input_type -> ypb.SmokingEvaluatePluginBatchRequest
	4,   // 713: ypb.Yak.GetSystemDefaultDnsServers:input_type -> ypb.Empty
	58,  // 714: ypb.Yak.DiagnoseNetwork:input_type -> ypb.DiagnoseNetworkRequest
	50,  // 715: ypb.Yak.DiagnoseNetworkDNS:input_type -> ypb.DiagnoseNetworkDNSRequest
	541, // 716: ypb.Yak.TraceRoute:input_type -> ypb.TraceRouteRequest
	52,  // 717: ypb.Yak.GetGlobalNetworkConfig:input_type -> ypb.GetGlobalNetworkConfigRequest
	55,  // 718: ypb.Yak.SetGlobalNetworkConfig:input_type -> ypb.GlobalNetworkConfig
	51,  // 719: ypb.Yak.ResetGlobalNetworkConfig:input_type -> ypb.ResetGlobalNetworkConfigRequest
	53,  // 720: ypb.Yak.ValidP12PassWord:input_type -> ypb.ValidP12PassWordRequest
	44,  // 721: ypb.Yak.RequestYakURL:input_type -> ypb.RequestYakURLParams
	556, // 722: ypb.Yak.ReadFile:input_type -> ypb.ReadFileRequest
	30,  // 723: ypb.Yak.GetPcapMetadata:input_type -> ypb.PcapMetadataRequest
	41,  // 724: ypb.Yak.PcapX:input_type -> ypb.PcapXRequest
	40,  // 725: ypb.Yak.QueryTrafficSession:input_type -> ypb.QueryTrafficSessionRequest
	32,  // 726: ypb.Yak.QueryTrafficPacket:input_type -> ypb.QueryTrafficPacketRequest
	33,  // 727: ypb.Yak.QueryTrafficTCPReassembled:input_type -> ypb.QueryTrafficTCPReassembledRequest
	539, // 728: ypb.Yak.ParseTraffic:input_type -> ypb.ParseTrafficRequest
	28,  // 729: ypb.Yak.DuplexConnection:input_type -> ypb.DuplexConnectionRequest
	27,  // 730: ypb.Yak.HybridScan:input_type -> ypb.HybridScanRequest
	21,  // 731: ypb.Yak.QueryHybridScanTask:input_type -> ypb.QueryHybridScanTaskRequest
	18,  // 732: ypb.Yak.DeleteHybridScanTask:input_type -> ypb.DeleteHybridScanTaskRequest
	15,  // 733: ypb.Yak.GetSpaceEngineStatus:input_type -> ypb.GetSpaceEngineStatusRequest
	14,  // 734: ypb.Yak.GetSpaceEngineAccountStatus:input_type -> ypb.GetSpaceEngineAccountStatusRequest
	57,  // 735: ypb.Yak.GetSpaceEngineAccountStatusV2:input_type -> ypb.ThirdPartyApplicationConfig
	17,  // 736: ypb.Yak.FetchPortAssetFromSpaceEngine:input_type -> ypb.FetchPortAssetFromSpaceEngineRequest
	543, // 737: ypb.Yak.EvaluateExpression:input_type -> ypb.EvaluateExpressionRequest
	545, // 738: ypb.Yak.EvaluateMultiExpression:input_type -> ypb.EvaluateMultiExpressionRequest
	4,   // 739: ypb.Yak.GetThirdPartyAppConfigTemplate:input_type -> ypb.Empty
	4,   // 740: ypb.Yak.CheckHahValidAiConfig:input_type -> ypb.Empty
	550, // 741: ypb.Yak.GetFingerprint:input_type -> ypb.GetFingerprintRequest
	552, // 742: ypb.Yak.AddFingerprint:input_type -> ypb.AddFingerprintRequest
	554, // 743: ypb.Yak.ModifyFingerprint:input_type -> ypb.ModifyFingerprintRequest
	566, // 744: ypb.Yak.QueryFingerprint:input_type -> ypb.QueryFingerprintRequest
	568, // 745: ypb.Yak.DeleteFingerprint:input_type -> ypb.DeleteFingerprintRequest
	570, // 746: ypb.Yak.UpdateFingerprint:input_type -> ypb.UpdateFingerprintRequest
	569, // 747: ypb.Yak.CreateFingerprint:input_type -> ypb.CreateFingerprintRequest
	4,   // 748: ypb.Yak.RecoverBuiltinFingerprint:input_type -> ypb.Empty
	558, // 749: ypb.Yak.GetReverseShellProgramList:input_type -> ypb.GetReverseShellProgramListRequest
	560, // 750: ypb.Yak.GenerateReverseShellCommand:input_type -> ypb.GenerateReverseShellCommandRequest
	571, // 751: ypb.Yak.QuerySyntaxFlowRule:input_type -> ypb.QuerySyntaxFlowRuleRequest
	582, // 752: ypb.Yak.CreateSyntaxFlowRule:input_type -> ypb.CreateSyntaxFlowRuleRequest
	583, // 753: ypb.Yak.UpdateSyntaxFlowRule:input_type -> ypb.UpdateSyntaxFlowRuleRequest
	585, // 754: ypb.Yak.DeleteSyntaxFlowRule:input_type -> ypb.DeleteSyntaxFlowRuleRequest
	588, // 755: ypb.Yak.QuerySyntaxFlowRuleGroup:input_type -> ypb.QuerySyntaxFlowRuleGroupRequest
	592, // 756: ypb.Yak.DeleteSyntaxFlowRuleGroup:input_type -> ypb.DeleteSyntaxFlowRuleGroupRequest
	590, // 757: ypb.Yak.CreateSyntaxFlowRuleGroup:input_type -> ypb.CreateSyntaxFlowGroupRequest
	591, // 758: ypb.Yak.UpdateSyntaxFlowRuleAndGroup:input_type -> ypb.UpdateSyntaxFlowRuleAndGroupRequest
	593, // 759: ypb.Yak.SyntaxFlowScan:input_type -> ypb.SyntaxFlowScanRequest
	594, // 760: ypb.Yak.QuerySyntaxFlowScanTask:input_type -> ypb.QuerySyntaxFlowScanTaskRequest
	598, // 761: ypb.Yak.DeleteSyntaxFlowScanTask:input_type -> ypb.DeleteSyntaxFlowScanTaskRequest
	601, // 762: ypb.Yak.QuerySyntaxFlowResult:input_type -> ypb.QuerySyntaxFlowResultRequest
	578, // 763: ypb.Yak.QuerySSAPrograms:input_type -> ypb.QuerySSAProgramRequest
	579, // 764: ypb.Yak.UpdateSSAProgram:input_type -> ypb.UpdateSSAProgramRequest
	580, // 765: ypb.Yak.DeleteSSAPrograms:input_type -> ypb.DeleteSSAProgramRequest
	4,   // 766: ypb.Yak.GetAllPluginEnv:input_type -> ypb.Empty
	604, // 767: ypb.Yak.QueryPluginEnv:input_type -> ypb.QueryPluginEnvRequest
	605, // 768: ypb.Yak.CreatePluginEnv:input_type -> ypb.PluginEnvData
	605, // 769: ypb.Yak.SetPluginEnv:input_type -> ypb.PluginEnvData
	606, // 770: ypb.Yak.DeletePluginEnv:input_type -> ypb.DeletePluginEnvRequest
	607, // 771: ypb.Yak.GetAllFuzztagInfo:input_type -> ypb.GetAllFuzztagInfoRequest
	611, // 772: ypb.Yak.GenerateFuzztag:input_type -> ypb.GenerateFuzztagRequest
	5,   // 773: ypb.Yak.Version:output_type -> ypb.VersionResponse
	6,   // 774: ypb.Yak.YakVersionAtLeast:output_type -> ypb.GeneralResponse
	517, // 775: ypb.Yak.Echo:output_type -> ypb.EchoResposne
	13,  // 776: ypb.Yak.VerifySystemCertificate:output_type -> ypb.VerifySystemCertificateResponse
	512, // 777: ypb.Yak.MITM:output_type -> ypb.MITMResponse
	505, // 778: ypb.Yak.SetMITMFilter:output_type -> ypb.SetMITMFilterResponse
	504, // 779: ypb.Yak.GetMITMFilter:output_type -> ypb.SetMITMFilterRequest
	504, // 780: ypb.Yak.ResetMITMFilter:output_type -> ypb.SetMITMFilterRequest
	252, // 781: ypb.Yak.DownloadMITMCert:output_type -> ypb.MITMCert
	519, // 782: ypb.Yak.OpenPort:output_type -> ypb.Output
	522, // 783: ypb.Yak.Exec:output_type -> ypb.ExecResult
	450, // 784: ypb.Yak.QueryExecHistory:output_type -> ypb.ExecHistoryRecordResponse
	4,   // 785: ypb.Yak.RemoveExecHistory:output_type -> ypb.Empty
	4,   // 786: ypb.Yak.LoadNucleiTemplates:output_type -> ypb.Empty
	522, // 787: ypb.Yak.AutoUpdateYakModule:output_type -> ypb.ExecResult
	522, // 788: ypb.Yak.ExecYakScript:output_type -> ypb.ExecResult
	9,   // 789: ypb.Yak.ExecBatchYakScript:output_type -> ypb.ExecBatchYakScriptResult
	200, // 790: ypb.Yak.GetExecBatchYakScriptUnfinishedTask:output_type -> ypb.GetExecBatchYakScriptUnfinishedTaskResponse
	8,   // 791: ypb.Yak.GetExecBatchYakScriptUnfinishedTaskByUid:output_type -> ypb.ExecBatchYakScriptRequest
	8,   // 792: ypb.Yak.PopExecBatchYakScriptUnfinishedTaskByUid:output_type -> ypb.ExecBatchYakScriptRequest
	9,   // 793: ypb.Yak.RecoverExecBatchYakScriptUnfinishedTask:output_type -> ypb.ExecBatchYakScriptResult
	415, // 794: ypb.Yak.QueryYakScript:output_type -> ypb.QueryYakScriptResponse
	417, // 795: ypb.Yak.QueryYakScriptByYakScriptName:output_type -> ypb.YakScript
	417, // 796: ypb.Yak.SaveYakScript:output_type -> ypb.YakScript
	4,   // 797: ypb.Yak.DeleteYakScript:output_type -> ypb.Empty
	417, // 798: ypb.Yak.GetYakScriptById:output_type -> ypb.YakScript
	417, // 799: ypb.Yak.GetYakScriptByName:output_type -> ypb.YakScript
	417, // 800: ypb.Yak.GetYakScriptByOnlineID:output_type -> ypb.YakScript
	4,   // 801: ypb.Yak.IgnoreYakScript:output_type -> ypb.Empty
	4,   // 802: ypb.Yak.UnIgnoreYakScript:output_type -> ypb.Empty
	353, // 803: ypb.Yak.ExportYakScript:output_type -> ypb.ExportYakScriptResponse
	522, // 804: ypb.Yak.ExportYakScriptStream:output_type -> ypb.ExecResult
	522, // 805: ypb.Yak.ImportYakScriptStream:output_type -> ypb.ExecResult
	522, // 806: ypb.Yak.ExecutePacketYakScript:output_type -> ypb.ExecResult
	9,   // 807: ypb.Yak.ExecuteBatchPacketYakScript:output_type -> ypb.ExecBatchYakScriptResult
	216, // 808: ypb.Yak.GetYakScriptTags:output_type -> ypb.GetYakScriptTagsResponse
	219, // 809: ypb.Yak.QueryYakScriptLocalAndUser:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	219, // 810: ypb.Yak.QueryYakScriptByOnlineGroup:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	219, // 811: ypb.Yak.QueryYakScriptLocalAll:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	223, // 812: ypb.Yak.QueryYakScriptByNames:output_type -> ypb.QueryYakScriptByNamesResponse
	224, // 813: ypb.Yak.QueryYakScriptByIsCore:output_type -> ypb.QueryYakScriptByIsCoreResponse
	226, // 814: ypb.Yak.QueryYakScriptRiskDetailByCWE:output_type -> ypb.QueryYakScriptRiskDetailByCWEResponse
	227, // 815: ypb.Yak.YakScriptRiskTypeList:output_type -> ypb.YakScriptRiskTypeListResponse
	417, // 816: ypb.Yak.SaveNewYakScript:output_type -> ypb.YakScript
	421, // 817: ypb.Yak.SaveYakScriptToOnline:output_type -> ypb.SaveYakScriptToOnlineResponse
	424, // 818: ypb.Yak.ExportLocalYakScript:output_type -> ypb.ExportLocalYakScriptResponse
	425, // 819: ypb.Yak.ExportLocalYakScriptStream:output_type -> ypb.ExportYakScriptLocalResponse
	427, // 820: ypb.Yak.ImportYakScript:output_type -> ypb.ImportYakScriptResult
	429, // 821: ypb.Yak.QueryYakScriptGroup:output_type -> ypb.QueryYakScriptGroupResponse
	4,   // 822: ypb.Yak.SaveYakScriptGroup:output_type -> ypb.Empty
	4,   // 823: ypb.Yak.RenameYakScriptGroup:output_type -> ypb.Empty
	4,   // 824: ypb.Yak.DeleteYakScriptGroup:output_type -> ypb.Empty
	434, // 825: ypb.Yak.GetYakScriptGroup:output_type -> ypb.GetYakScriptGroupResponse
	4,   // 826: ypb.Yak.ResetYakScriptGroup:output_type -> ypb.Empty
	4,   // 827: ypb.Yak.SetGroup:output_type -> ypb.Empty
	492, // 828: ypb.Yak.GetHTTPFlowByHash:output_type -> ypb.HTTPFlow
	492, // 829: ypb.Yak.GetHTTPFlowById:output_type -> ypb.HTTPFlow
	494, // 830: ypb.Yak.GetHTTPFlowBodyById:output_type -> ypb.GetHTTPFlowBodyByIdResponse
	491, // 831: ypb.Yak.GetHTTPFlowByIds:output_type -> ypb.HTTPFlows
	495, // 832: ypb.Yak.QueryHTTPFlows:output_type -> ypb.QueryHTTPFlowResponse
	4,   // 833: ypb.Yak.DeleteHTTPFlows:output_type -> ypb.Empty
	4,   // 834: ypb.Yak.SetTagForHTTPFlow:output_type -> ypb.Empty
	489, // 835: ypb.Yak.QueryHTTPFlowsIds:output_type -> ypb.QueryHTTPFlowsIdsResponse
	497, // 836: ypb.Yak.HTTPFlowsFieldGroup:output_type -> ypb.HTTPFlowsFieldGroupResponse
	499, // 837: ypb.Yak.HTTPFlowsShare:output_type -> ypb.HTTPFlowsShareResponse
	4,   // 838: ypb.Yak.HTTPFlowsExtract:output_type -> ypb.Empty
	527, // 839: ypb.Yak.GetHTTPFlowBare:output_type -> ypb.HTTPFlowBareResponse
	495, // 840: ypb.Yak.ExportHTTPFlows:output_type -> ypb.QueryHTTPFlowResponse
	4,   // 841: ypb.Yak.HTTPFlowsToOnline:output_type -> ypb.Empty
	486, // 842: ypb.Yak.QueryHTTPFlowsProcessNames:output_type -> ypb.QueryHTTPFlowsProcessNamesResponse
	474, // 843: ypb.Yak.ExtractUrl:output_type -> ypb.ExtractedUrl
	275, // 844: ypb.Yak.GetHistoryHTTPFuzzerTask:output_type -> ypb.HistoryHTTPFuzzerTaskDetail
	277, // 845: ypb.Yak.QueryHistoryHTTPFuzzerTask:output_type -> ypb.HistoryHTTPFuzzerTasks
	278, // 846: ypb.Yak.QueryHistoryHTTPFuzzerTaskEx:output_type -> ypb.HistoryHTTPFuzzerTasksResponse
	4,   // 847: ypb.Yak.DeleteHistoryHTTPFuzzerTask:output_type -> ypb.Empty
	476, // 848: ypb.Yak.HTTPFuzzer:output_type -> ypb.FuzzerResponse
	475, // 849: ypb.Yak.HTTPFuzzerSequence:output_type -> ypb.FuzzerSequenceResponse
	466, // 850: ypb.Yak.PreloadHTTPFuzzerParams:output_type -> ypb.PreloadHTTPFuzzerParamsResponse
	459, // 851: ypb.Yak.RenderVariables:output_type -> ypb.RenderVariablesResponse
	461, // 852: ypb.Yak.MatchHTTPResponse:output_type -> ypb.MatchHTTPResponseResult
	463, // 853: ypb.Yak.ExtractHTTPResponse:output_type -> ypb.ExtractHTTPResponseResult
	476, // 854: ypb.Yak.RedirectRequest:output_type -> ypb.FuzzerResponse
	328, // 855: ypb.Yak.HTTPRequestMutate:output_type -> ypb.MutateResult
	328, // 856: ypb.Yak.HTTPResponseMutate:output_type -> ypb.MutateResult
	210, // 857: ypb.Yak.FixUploadPacket:output_type -> ypb.FixUploadPacketResponse
	211, // 858: ypb.Yak.IsMultipartFormDataRequest:output_type -> ypb.IsMultipartFormDataRequestResult
	149, // 859: ypb.Yak.GenerateExtractRule:output_type -> ypb.GenerateExtractRuleResponse
	137, // 860: ypb.Yak.ExtractData:output_type -> ypb.ExtractDataResponse
	529, // 861: ypb.Yak.ImportHTTPFuzzerTaskFromYaml:output_type -> ypb.ImportHTTPFuzzerTaskFromYamlResponse
	531, // 862: ypb.Yak.ExportHTTPFuzzerTaskToYaml:output_type -> ypb.ExportHTTPFuzzerTaskToYamlResponse
	533, // 863: ypb.Yak.RenderHTTPFuzzerPacket:output_type -> ypb.RenderHTTPFuzzerPacketResponse
	4,   // 864: ypb.Yak.SaveFuzzerLabel:output_type -> ypb.Empty
	139, // 865: ypb.Yak.QueryFuzzerLabel:output_type -> ypb.QueryFuzzerLabelResponse
	4,   // 866: ypb.Yak.DeleteFuzzerLabel:output_type -> ypb.Empty
	562, // 867: ypb.Yak.SaveFuzzerConfig:output_type -> ypb.DbOperateMessage
	144, // 868: ypb.Yak.QueryFuzzerConfig:output_type -> ypb.QueryFuzzerConfigResponse
	562, // 869: ypb.Yak.DeleteFuzzerConfig:output_type -> ypb.DbOperateMessage
	152, // 870: ypb.Yak.QueryHTTPFuzzerResponseByTaskId:output_type -> ypb.QueryHTTPFuzzerResponseByTaskIdResponse
	156, // 871: ypb.Yak.CreateWebsocketFuzzer:output_type -> ypb.ClientWebsocketResponse
	502, // 872: ypb.Yak.QueryWebsocketFlowByHTTPFlowWebsocketHash:output_type -> ypb.WebsocketFlows
	4,   // 873: ypb.Yak.DeleteWebsocketFlowByHTTPFlowWebsocketHash:output_type -> ypb.Empty
	4,   // 874: ypb.Yak.DeleteWebsocketFlowAll:output_type -> ypb.Empty
	492, // 875: ypb.Yak.ConvertFuzzerResponseToHTTPFlow:output_type -> ypb.HTTPFlow
	453, // 876: ypb.Yak.StringFuzzer:output_type -> ypb.StringFuzzerResponse
	456, // 877: ypb.Yak.HTTPRequestAnalyzer:output_type -> ypb.HTTPRequestAnalysis
	445, // 878: ypb.Yak.Codec:output_type -> ypb.CodecResponse
	445, // 879: ypb.Yak.NewCodec:output_type -> ypb.CodecResponse
	446, // 880: ypb.Yak.GetAllCodecMethods:output_type -> ypb.CodecMethods
	4,   // 881: ypb.Yak.SaveCodecFlow:output_type -> ypb.Empty
	4,   // 882: ypb.Yak.DeleteCodecFlow:output_type -> ypb.Empty
	444, // 883: ypb.Yak.GetAllCodecFlow:output_type -> ypb.GetCodecFlowResponse
	49,  // 884: ypb.Yak.PacketPrettifyHelper:output_type -> ypb.PacketPrettifyHelperResponse
	408, // 885: ypb.Yak.QueryPayload:output_type -> ypb.QueryPayloadResponse
	406, // 886: ypb.Yak.QueryPayloadFromFile:output_type -> ypb.QueryPayloadFromFileResponse
	4,   // 887: ypb.Yak.DeletePayloadByFolder:output_type -> ypb.Empty
	4,   // 888: ypb.Yak.DeletePayloadByGroup:output_type -> ypb.Empty
	4,   // 889: ypb.Yak.DeletePayload:output_type -> ypb.Empty
	4,   // 890: ypb.Yak.SavePayload:output_type -> ypb.Empty
	176, // 891: ypb.Yak.SavePayloadStream:output_type -> ypb.SavePayloadProgress
	176, // 892: ypb.Yak.SavePayloadToFileStream:output_type -> ypb.SavePayloadProgress
	176, // 893: ypb.Yak.SaveLargePayloadToFileStream:output_type -> ypb.SavePayloadProgress
	4,   // 894: ypb.Yak.RenamePayloadFolder:output_type -> ypb.Empty
	4,   // 895: ypb.Yak.RenamePayloadGroup:output_type -> ypb.Empty
	4,   // 896: ypb.Yak.UpdatePayload:output_type -> ypb.Empty
	4,   // 897: ypb.Yak.UpdatePayloadToFile:output_type -> ypb.Empty
	4,   // 898: ypb.Yak.BackUpOrCopyPayloads:output_type -> ypb.Empty
	397, // 899: ypb.Yak.GetAllPayloadGroup:output_type -> ypb.GetAllPayloadGroupResponse
	4,   // 900: ypb.Yak.UpdateAllPayloadGroup:output_type -> ypb.Empty
	411, // 901: ypb.Yak.GetAllPayload:output_type -> ypb.GetAllPayloadResponse
	412, // 902: ypb.Yak.GetAllPayloadFromFile:output_type -> ypb.GetAllPayloadFromFileResponse
	411, // 903: ypb.Yak.ExportAllPayload:output_type -> ypb.GetAllPayloadResponse
	411, // 904: ypb.Yak.ExportAllPayloadFromFile:output_type -> ypb.GetAllPayloadResponse
	4,   // 905: ypb.Yak.CreatePayloadFolder:output_type -> ypb.Empty
	176, // 906: ypb.Yak.RemoveDuplicatePayloads:output_type -> ypb.SavePayloadProgress
	176, // 907: ypb.Yak.CoverPayloadGroupToDatabase:output_type -> ypb.SavePayloadProgress
	176, // 908: ypb.Yak.ConvertPayloadGroupToDatabase:output_type -> ypb.SavePayloadProgress
	176, // 909: ypb.Yak.MigratePayloads:output_type -> ypb.SavePayloadProgress
	389, // 910: ypb.Yak.GetYakitCompletionRaw:output_type -> ypb.YakitCompletionRawResponse
	393, // 911: ypb.Yak.GetYakVMBuildInMethodCompletion:output_type -> ypb.GetYakVMBuildInMethodCompletionResponse
	175, // 912: ypb.Yak.StaticAnalyzeError:output_type -> ypb.StaticAnalyzeErrorResponse
	173, // 913: ypb.Yak.YaklangCompileAndFormat:output_type -> ypb.YaklangCompileAndFormatResponse
	164, // 914: ypb.Yak.YaklangLanguageSuggestion:output_type -> ypb.YaklangLanguageSuggestionResponse
	165, // 915: ypb.Yak.YaklangLanguageFind:output_type -> ypb.YaklangLanguageFindResponse
	166, // 916: ypb.Yak.YaklangInspectInformation:output_type -> ypb.YaklangInspectInformationResponse
	169, // 917: ypb.Yak.YaklangGetCliCodeFromDatabase:output_type -> ypb.YaklangGetCliCodeFromDatabaseResponse
	519, // 918: ypb.Yak.YaklangTerminal:output_type -> ypb.Output
	522, // 919: ypb.Yak.PortScan:output_type -> ypb.ExecResult
	380, // 920: ypb.Yak.ViewPortScanCode:output_type -> ypb.SimpleScript
	522, // 921: ypb.Yak.SimpleDetect:output_type -> ypb.ExecResult
	4,   // 922: ypb.Yak.SaveCancelSimpleDetect:output_type -> ypb.Empty
	522, // 923: ypb.Yak.SimpleDetectCreatReport:output_type -> ypb.ExecResult
	206, // 924: ypb.Yak.QuerySimpleDetectUnfinishedTask:output_type -> ypb.QueryUnfinishedTaskResponse
	382, // 925: ypb.Yak.GetSimpleDetectRecordRequestById:output_type -> ypb.RecordPortScanRequest
	4,   // 926: ypb.Yak.DeleteSimpleDetectUnfinishedTask:output_type -> ypb.Empty
	522, // 927: ypb.Yak.RecoverSimpleDetectTask:output_type -> ypb.ExecResult
	201, // 928: ypb.Yak.GetSimpleDetectUnfinishedTask:output_type -> ypb.GetSimpleDetectUnfinishedTaskResponse
	382, // 929: ypb.Yak.GetSimpleDetectUnfinishedTaskByUid:output_type -> ypb.RecordPortScanRequest
	382, // 930: ypb.Yak.PopSimpleDetectUnfinishedTaskByUid:output_type -> ypb.RecordPortScanRequest
	522, // 931: ypb.Yak.RecoverSimpleDetectUnfinishedTask:output_type -> ypb.ExecResult
	387, // 932: ypb.Yak.QueryPorts:output_type -> ypb.QueryPortsResponse
	4,   // 933: ypb.Yak.DeletePorts:output_type -> ypb.Empty
	331, // 934: ypb.Yak.QueryHosts:output_type -> ypb.QueryHostsResponse
	4,   // 935: ypb.Yak.DeleteHosts:output_type -> ypb.Empty
	334, // 936: ypb.Yak.QueryDomains:output_type -> ypb.QueryDomainsResponse
	4,   // 937: ypb.Yak.DeleteDomains:output_type -> ypb.Empty
	336, // 938: ypb.Yak.QueryPortsGroup:output_type -> ypb.QueryPortsGroupResponse
	4,   // 939: ypb.Yak.UpdateFromYakitResource:output_type -> ypb.Empty
	4,   // 940: ypb.Yak.UpdateFromGithub:output_type -> ypb.Empty
	4,   // 941: ypb.Yak.AddToMenu:output_type -> ypb.Empty
	4,   // 942: ypb.Yak.RemoveFromMenu:output_type -> ypb.Empty
	4,   // 943: ypb.Yak.YakScriptIsInMenu:output_type -> ypb.Empty
	363, // 944: ypb.Yak.GetAllMenuItem:output_type -> ypb.MenuByGroup
	4,   // 945: ypb.Yak.DeleteAllMenuItem:output_type -> ypb.Empty
	4,   // 946: ypb.Yak.ImportMenuItem:output_type -> ypb.Empty
	370, // 947: ypb.Yak.ExportMenuItem:output_type -> ypb.ExportMenuItemResult
	359, // 948: ypb.Yak.GetMenuItemById:output_type -> ypb.MenuItem
	357, // 949: ypb.Yak.QueryGroupsByYakScriptId:output_type -> ypb.GroupNames
	4,   // 950: ypb.Yak.AddMenus:output_type -> ypb.Empty
	363, // 951: ypb.Yak.QueryAllMenuItem:output_type -> ypb.MenuByGroup
	4,   // 952: ypb.Yak.DeleteAllMenu:output_type -> ypb.Empty
	4,   // 953: ypb.Yak.AddToNavigation:output_type -> ypb.Empty
	375, // 954: ypb.Yak.GetAllNavigationItem:output_type -> ypb.GetAllNavigationItemResponse
	4,   // 955: ypb.Yak.DeleteAllNavigation:output_type -> ypb.Empty
	4,   // 956: ypb.Yak.AddOneNavigation:output_type -> ypb.Empty
	357, // 957: ypb.Yak.QueryNavigationGroups:output_type -> ypb.GroupNames
	4,   // 958: ypb.Yak.SaveMarkdownDocument:output_type -> ypb.Empty
	354, // 959: ypb.Yak.GetMarkdownDocument:output_type -> ypb.GetMarkdownDocumentResponse
	4,   // 960: ypb.Yak.DeleteMarkdownDocument:output_type -> ypb.Empty
	522, // 961: ypb.Yak.StartBasicCrawler:output_type -> ypb.ExecResult
	380, // 962: ypb.Yak.ViewBasicCrawlerCode:output_type -> ypb.SimpleScript
	345, // 963: ypb.Yak.GenerateWebsiteTree:output_type -> ypb.GenerateWebsiteTreeResponse
	344, // 964: ypb.Yak.QueryYakScriptExecResult:output_type -> ypb.QueryYakScriptExecResultResponse
	342, // 965: ypb.Yak.QueryYakScriptNameInExecResult:output_type -> ypb.YakScriptNames
	4,   // 966: ypb.Yak.DeleteYakScriptExecResult:output_type -> ypb.Empty
	4,   // 967: ypb.Yak.DeleteYakScriptExec:output_type -> ypb.Empty
	522, // 968: ypb.Yak.StartBrute:output_type -> ypb.ExecResult
	324, // 969: ypb.Yak.GetAvailableBruteTypes:output_type -> ypb.GetAvailableBruteTypesResponse
	318, // 970: ypb.Yak.GetTunnelServerExternalIP:output_type -> ypb.GetTunnelServerExternalIPResponse
	316, // 971: ypb.Yak.VerifyTunnelServerDomain:output_type -> ypb.VerifyTunnelServerDomainResponse
	522, // 972: ypb.Yak.StartFacades:output_type -> ypb.ExecResult
	522, // 973: ypb.Yak.StartFacadesWithYsoObject:output_type -> ypb.ExecResult
	4,   // 974: ypb.Yak.ApplyClassToFacades:output_type -> ypb.Empty
	269, // 975: ypb.Yak.BytesToBase64:output_type -> ypb.BytesToBase64Response
	4,   // 976: ypb.Yak.ConfigGlobalReverse:output_type -> ypb.Empty
	298, // 977: ypb.Yak.AvailableLocalAddr:output_type -> ypb.AvailableLocalAddrResponse
	297, // 978: ypb.Yak.GetGlobalReverseServer:output_type -> ypb.GetGlobalReverseServerResponse
	305, // 979: ypb.Yak.QueryRisks:output_type -> ypb.QueryRisksResponse
	303, // 980: ypb.Yak.QueryRisk:output_type -> ypb.Risk
	4,   // 981: ypb.Yak.DeleteRisk:output_type -> ypb.Empty
	254, // 982: ypb.Yak.QueryAvailableRiskType:output_type -> ypb.Fields
	254, // 983: ypb.Yak.QueryAvailableRiskLevel:output_type -> ypb.Fields
	251, // 984: ypb.Yak.QueryRiskTableStats:output_type -> ypb.RiskTableStats
	4,   // 985: ypb.Yak.ResetRiskTableStats:output_type -> ypb.Empty
	254, // 986: ypb.Yak.QueryAvailableTarget:output_type -> ypb.Fields
	307, // 987: ypb.Yak.QueryNewRisk:output_type -> ypb.QueryNewRiskResponse
	4,   // 988: ypb.Yak.NewRiskRead:output_type -> ypb.Empty
	4,   // 989: ypb.Yak.UploadRiskToOnline:output_type -> ypb.Empty
	4,   // 990: ypb.Yak.SetTagForRisk:output_type -> ypb.Empty
	308, // 991: ypb.Yak.QueryRiskTags:output_type -> ypb.QueryRiskTagsResponse
	309, // 992: ypb.Yak.RiskFieldGroup:output_type -> ypb.RiskFieldGroupResponse
	241, // 993: ypb.Yak.QueryReports:output_type -> ypb.QueryReportsResponse
	243, // 994: ypb.Yak.QueryReport:output_type -> ypb.Report
	4,   // 995: ypb.Yak.DeleteReport:output_type -> ypb.Empty
	254, // 996: ypb.Yak.QueryAvailableReportFrom:output_type -> ypb.Fields
	4,   // 997: ypb.Yak.DownloadReport:output_type -> ypb.Empty
	256, // 998: ypb.Yak.GetAllYsoGadgetOptions:output_type -> ypb.YsoOptionsWithVerbose
	256, // 999: ypb.Yak.GetAllYsoClassOptions:output_type -> ypb.YsoOptionsWithVerbose
	259, // 1000: ypb.Yak.GetAllYsoClassGeneraterOptions:output_type -> ypb.YsoClassOptionsResponseWithVerbose
	266, // 1001: ypb.Yak.GenerateYsoCode:output_type -> ypb.YsoCodeResponse
	267, // 1002: ypb.Yak.GenerateYsoBytes:output_type -> ypb.YsoBytesResponse
	265, // 1003: ypb.Yak.YsoDump:output_type -> ypb.YsoDumpResponse
	282, // 1004: ypb.Yak.CreateWebShell:output_type -> ypb.WebShell
	4,   // 1005: ypb.Yak.DeleteWebShell:output_type -> ypb.Empty
	282, // 1006: ypb.Yak.UpdateWebShell:output_type -> ypb.WebShell
	288, // 1007: ypb.Yak.QueryWebShells:output_type -> ypb.QueryWebShellsResponse
	286, // 1008: ypb.Yak.Ping:output_type -> ypb.WebShellResponse
	286, // 1009: ypb.Yak.GetBasicInfo:output_type -> ypb.WebShellResponse
	286, // 1010: ypb.Yak.GenerateWebShell:output_type -> ypb.WebShellResponse
	4,   // 1011: ypb.Yak.SetYakBridgeLogServer:output_type -> ypb.Empty
	291, // 1012: ypb.Yak.GetCurrentYakBridgeLogServer:output_type -> ypb.YakDNSLogBridgeAddr
	296, // 1013: ypb.Yak.RequireDNSLogDomain:output_type -> ypb.DNSLogRootDomain
	296, // 1014: ypb.Yak.RequireDNSLogDomainByScript:output_type -> ypb.DNSLogRootDomain
	294, // 1015: ypb.Yak.QueryDNSLogByToken:output_type -> ypb.QueryDNSLogByTokenResponse
	294, // 1016: ypb.Yak.QueryDNSLogTokenByScript:output_type -> ypb.QueryDNSLogByTokenResponse
	246, // 1017: ypb.Yak.RequireICMPRandomLength:output_type -> ypb.RequireICMPRandomLengthResponse
	271, // 1018: ypb.Yak.QueryICMPTrigger:output_type -> ypb.QueryICMPTriggerResponse
	249, // 1019: ypb.Yak.RequireRandomPortToken:output_type -> ypb.RandomPortInfo
	247, // 1020: ypb.Yak.QueryRandomPortTrigger:output_type -> ypb.RandomPortTriggerNotification
	272, // 1021: ypb.Yak.QuerySupportedDnsLogPlatforms:output_type -> ypb.QuerySupportedDnsLogPlatformsResponse
	254, // 1022: ypb.Yak.GetAvailableYakScriptTags:output_type -> ypb.Fields
	4,   // 1023: ypb.Yak.ForceUpdateAvailableYakScriptTags:output_type -> ypb.Empty
	522, // 1024: ypb.Yak.ExecYakitPluginsByYakScriptFilter:output_type -> ypb.ExecResult
	238, // 1025: ypb.Yak.GenerateYakCodeByPacket:output_type -> ypb.GenerateYakCodeByPacketResponse
	237, // 1026: ypb.Yak.GenerateCSRFPocByPacket:output_type -> ypb.GenerateCSRFPocByPacketResponse
	233, // 1027: ypb.Yak.ExportMITMReplacerRules:output_type -> ypb.ExportMITMReplacerRulesResponse
	4,   // 1028: ypb.Yak.ImportMITMReplacerRules:output_type -> ypb.Empty
	231, // 1029: ypb.Yak.GetCurrentRules:output_type -> ypb.MITMContentReplacers
	4,   // 1030: ypb.Yak.SetCurrentRules:output_type -> ypb.Empty
	537, // 1031: ypb.Yak.GenerateURL:output_type -> ypb.GenerateURLResponse
	215, // 1032: ypb.Yak.ExtractDataToFile:output_type -> ypb.ExtractDataToFileResult
	214, // 1033: ypb.Yak.AutoDecode:output_type -> ypb.AutoDecodeResponse
	195, // 1034: ypb.Yak.GetSystemProxy:output_type -> ypb.GetSystemProxyResult
	4,   // 1035: ypb.Yak.SetSystemProxy:output_type -> ypb.Empty
	191, // 1036: ypb.Yak.GetKey:output_type -> ypb.GetKeyResult
	4,   // 1037: ypb.Yak.SetKey:output_type -> ypb.Empty
	4,   // 1038: ypb.Yak.DelKey:output_type -> ypb.Empty
	193, // 1039: ypb.Yak.GetAllProcessEnvKey:output_type -> ypb.GetProcessEnvKeyResult
	4,   // 1040: ypb.Yak.SetProcessEnvKey:output_type -> ypb.Empty
	191, // 1041: ypb.Yak.GetProjectKey:output_type -> ypb.GetKeyResult
	4,   // 1042: ypb.Yak.SetProjectKey:output_type -> ypb.Empty
	188, // 1043: ypb.Yak.GetOnlineProfile:output_type -> ypb.OnlineProfile
	4,   // 1044: ypb.Yak.SetOnlineProfile:output_type -> ypb.Empty
	4,   // 1045: ypb.Yak.DownloadOnlinePluginById:output_type -> ypb.Empty
	4,   // 1046: ypb.Yak.DownloadOnlinePluginByIds:output_type -> ypb.Empty
	179, // 1047: ypb.Yak.DownloadOnlinePluginAll:output_type -> ypb.DownloadOnlinePluginProgress
	4,   // 1048: ypb.Yak.DeletePluginByUserID:output_type -> ypb.Empty
	4,   // 1049: ypb.Yak.DeleteAllLocalPlugins:output_type -> ypb.Empty
	437, // 1050: ypb.Yak.GetYakScriptTagsAndType:output_type -> ypb.GetYakScriptTagsAndTypeResponse
	4,   // 1051: ypb.Yak.DeleteLocalPluginsByWhere:output_type -> ypb.Empty
	185, // 1052: ypb.Yak.DownloadOnlinePluginByScriptNames:output_type -> ypb.DownloadOnlinePluginByScriptNamesResponse
	179, // 1053: ypb.Yak.DownloadOnlinePlugins:output_type -> ypb.DownloadOnlinePluginProgress
	4,   // 1054: ypb.Yak.DownloadOnlinePluginBatch:output_type -> ypb.Empty
	185, // 1055: ypb.Yak.DownloadOnlinePluginByPluginName:output_type -> ypb.DownloadOnlinePluginByScriptNamesResponse
	417, // 1056: ypb.Yak.DownloadOnlinePluginByUUID:output_type -> ypb.YakScript
	522, // 1057: ypb.Yak.ExecPacketScan:output_type -> ypb.ExecResult
	157, // 1058: ypb.Yak.GetEngineDefaultProxy:output_type -> ypb.DefaultProxyResult
	4,   // 1059: ypb.Yak.SetEngineDefaultProxy:output_type -> ypb.Empty
	150, // 1060: ypb.Yak.GetMachineID:output_type -> ypb.GetMachineIDResponse
	523, // 1061: ypb.Yak.GetLicense:output_type -> ypb.GetLicenseResponse
	4,   // 1062: ypb.Yak.CheckLicense:output_type -> ypb.Empty
	136, // 1063: ypb.Yak.GetRequestBodyByHTTPFlowID:output_type -> ypb.Bytes
	136, // 1064: ypb.Yak.GetResponseBodyByHTTPFlowID:output_type -> ypb.Bytes
	136, // 1065: ypb.Yak.GetHTTPPacketBody:output_type -> ypb.Bytes
	133, // 1066: ypb.Yak.RegisterFacadesHTTP:output_type -> ypb.RegisterFacadesHTTPResponse
	4,   // 1067: ypb.Yak.ResetAndInvalidUserData:output_type -> ypb.Empty
	130, // 1068: ypb.Yak.CreateYaklangShell:output_type -> ypb.YaklangShellResponse
	522, // 1069: ypb.Yak.AttachCombinedOutput:output_type -> ypb.ExecResult
	116, // 1070: ypb.Yak.IsPrivilegedForNetRaw:output_type -> ypb.IsPrivilegedForNetRawResponse
	4,   // 1071: ypb.Yak.PromotePermissionForUserPcap:output_type -> ypb.Empty
	4,   // 1072: ypb.Yak.SetCurrentProject:output_type -> ypb.Empty
	122, // 1073: ypb.Yak.GetCurrentProject:output_type -> ypb.ProjectDescription
	123, // 1074: ypb.Yak.GetProjects:output_type -> ypb.GetProjectsResponse
	120, // 1075: ypb.Yak.NewProject:output_type -> ypb.NewProjectResponse
	120, // 1076: ypb.Yak.UpdateProject:output_type -> ypb.NewProjectResponse
	4,   // 1077: ypb.Yak.IsProjectNameValid:output_type -> ypb.Empty
	4,   // 1078: ypb.Yak.RemoveProject:output_type -> ypb.Empty
	4,   // 1079: ypb.Yak.DeleteProject:output_type -> ypb.Empty
	122, // 1080: ypb.Yak.GetDefaultProject:output_type -> ypb.ProjectDescription
	122, // 1081: ypb.Yak.QueryProjectDetail:output_type -> ypb.ProjectDescription
	122, // 1082: ypb.Yak.GetTemporaryProject:output_type -> ypb.ProjectDescription
	114, // 1083: ypb.Yak.ExportProject:output_type -> ypb.ProjectIOProgress
	114, // 1084: ypb.Yak.ImportProject:output_type -> ypb.ProjectIOProgress
	4,   // 1085: ypb.Yak.MigrateLegacyDatabase:output_type -> ypb.Empty
	108, // 1086: ypb.Yak.QueryMITMRuleExtractedData:output_type -> ypb.QueryMITMRuleExtractedDataResponse
	112, // 1087: ypb.Yak.ExportMITMRuleExtractedData:output_type -> ypb.ExportMITMRuleExtractedDataResponse
	4,   // 1088: ypb.Yak.ImportChaosMakerRules:output_type -> ypb.Empty
	99,  // 1089: ypb.Yak.QueryChaosMakerRule:output_type -> ypb.QueryChaosMakerRuleResponse
	4,   // 1090: ypb.Yak.DeleteChaosMakerRuleByID:output_type -> ypb.Empty
	522, // 1091: ypb.Yak.ExecuteChaosMakerRule:output_type -> ypb.ExecResult
	96,  // 1092: ypb.Yak.IsRemoteAddrAvailable:output_type -> ypb.IsRemoteAddrAvailableResponse
	96,  // 1093: ypb.Yak.ConnectVulinboxAgent:output_type -> ypb.IsRemoteAddrAvailableResponse
	62,  // 1094: ypb.Yak.GetRegisteredVulinboxAgent:output_type -> ypb.GetRegisteredAgentResponse
	4,   // 1095: ypb.Yak.DisconnectVulinboxAgent:output_type -> ypb.Empty
	105, // 1096: ypb.Yak.IsCVEDatabaseReady:output_type -> ypb.IsCVEDatabaseReadyResponse
	522, // 1097: ypb.Yak.UpdateCVEDatabase:output_type -> ypb.ExecResult
	522, // 1098: ypb.Yak.ExportsProfileDatabase:output_type -> ypb.ExecResult
	522, // 1099: ypb.Yak.ImportsProfileDatabase:output_type -> ypb.ExecResult
	90,  // 1100: ypb.Yak.QueryCVE:output_type -> ypb.QueryCVEResponse
	88,  // 1101: ypb.Yak.GetCVE:output_type -> ypb.CVEDetailEx
	92,  // 1102: ypb.Yak.SaveTextToTemporalFile:output_type -> ypb.SaveTextToTemporalFileResponse
	84,  // 1103: ypb.Yak.IsScrecorderReady:output_type -> ypb.IsScrecorderReadyResponse
	522, // 1104: ypb.Yak.InstallScrecorder:output_type -> ypb.ExecResult
	522, // 1105: ypb.Yak.StartScrecorder:output_type -> ypb.ExecResult
	80,  // 1106: ypb.Yak.QueryScreenRecorders:output_type -> ypb.QueryScreenRecorderResponse
	4,   // 1107: ypb.Yak.DeleteScreenRecorders:output_type -> ypb.Empty
	4,   // 1108: ypb.Yak.UploadScreenRecorders:output_type -> ypb.Empty
	75,  // 1109: ypb.Yak.GetOneScreenRecorders:output_type -> ypb.ScreenRecorder
	4,   // 1110: ypb.Yak.UpdateScreenRecorders:output_type -> ypb.Empty
	67,  // 1111: ypb.Yak.IsVulinboxReady:output_type -> ypb.IsVulinboxReadyResponse
	522, // 1112: ypb.Yak.InstallVulinbox:output_type -> ypb.ExecResult
	522, // 1113: ypb.Yak.StartVulinbox:output_type -> ypb.ExecResult
	522, // 1114: ypb.Yak.GenQualityInspectionReport:output_type -> ypb.ExecResult
	73,  // 1115: ypb.Yak.HTTPRequestBuilder:output_type -> ypb.HTTPRequestBuilderResponse
	522, // 1116: ypb.Yak.DebugPlugin:output_type -> ypb.ExecResult
	65,  // 1117: ypb.Yak.SmokingEvaluatePlugin:output_type -> ypb.SmokingEvaluatePluginResponse
	535, // 1118: ypb.Yak.SmokingEvaluatePluginBatch:output_type -> ypb.SmokingEvaluatePluginBatchResponse
	525, // 1119: ypb.Yak.GetSystemDefaultDnsServers:output_type -> ypb.DefaultDnsServerResponse
	59,  // 1120: ypb.Yak.DiagnoseNetwork:output_type -> ypb.DiagnoseNetworkResponse
	59,  // 1121: ypb.Yak.DiagnoseNetworkDNS:output_type -> ypb.DiagnoseNetworkResponse
	542, // 1122: ypb.Yak.TraceRoute:output_type -> ypb.TraceRouteResponse
	55,  // 1123: ypb.Yak.GetGlobalNetworkConfig:output_type -> ypb.GlobalNetworkConfig
	4,   // 1124: ypb.Yak.SetGlobalNetworkConfig:output_type -> ypb.Empty
	4,   // 1125: ypb.Yak.ResetGlobalNetworkConfig:output_type -> ypb.Empty
	54,  // 1126: ypb.Yak.ValidP12PassWord:output_type -> ypb.ValidP12PassWordResponse
	47,  // 1127: ypb.Yak.RequestYakURL:output_type -> ypb.RequestYakURLResponse
	557, // 1128: ypb.Yak.ReadFile:output_type -> ypb.ReadFileResponse
	31,  // 1129: ypb.Yak.GetPcapMetadata:output_type -> ypb.PcapMetadata
	43,  // 1130: ypb.Yak.PcapX:output_type -> ypb.PcapXResponse
	35,  // 1131: ypb.Yak.QueryTrafficSession:output_type -> ypb.QueryTrafficSessionResponse
	37,  // 1132: ypb.Yak.QueryTrafficPacket:output_type -> ypb.QueryTrafficPacketResponse
	39,  // 1133: ypb.Yak.QueryTrafficTCPReassembled:output_type -> ypb.QueryTrafficTCPReassembledResponse
	540, // 1134: ypb.Yak.ParseTraffic:output_type -> ypb.ParseTrafficResponse
	29,  // 1135: ypb.Yak.DuplexConnection:output_type -> ypb.DuplexConnectionResponse
	23,  // 1136: ypb.Yak.HybridScan:output_type -> ypb.HybridScanResponse
	20,  // 1137: ypb.Yak.QueryHybridScanTask:output_type -> ypb.QueryHybridScanTaskResponse
	4,   // 1138: ypb.Yak.DeleteHybridScanTask:output_type -> ypb.Empty
	16,  // 1139: ypb.Yak.GetSpaceEngineStatus:output_type -> ypb.SpaceEngineStatus
	16,  // 1140: ypb.Yak.GetSpaceEngineAccountStatus:output_type -> ypb.SpaceEngineStatus
	16,  // 1141: ypb.Yak.GetSpaceEngineAccountStatusV2:output_type -> ypb.SpaceEngineStatus
	522, // 1142: ypb.Yak.FetchPortAssetFromSpaceEngine:output_type -> ypb.ExecResult
	544, // 1143: ypb.Yak.EvaluateExpression:output_type -> ypb.EvaluateExpressionResponse
	546, // 1144: ypb.Yak.EvaluateMultiExpression:output_type -> ypb.EvaluateMultiExpressionResponse
	549, // 1145: ypb.Yak.GetThirdPartyAppConfigTemplate:output_type -> ypb.GetThirdPartyAppConfigTemplateResponse
	6,   // 1146: ypb.Yak.CheckHahValidAiConfig:output_type -> ypb.GeneralResponse
	551, // 1147: ypb.Yak.GetFingerprint:output_type -> ypb.GetFingerprintResponse
	553, // 1148: ypb.Yak.AddFingerprint:output_type -> ypb.AddFingerprintResponse
	555, // 1149: ypb.Yak.ModifyFingerprint:output_type -> ypb.ModifyFingerprintResponse
	567, // 1150: ypb.Yak.QueryFingerprint:output_type -> ypb.QueryFingerprintResponse
	562, // 1151: ypb.Yak.DeleteFingerprint:output_type -> ypb.DbOperateMessage
	562, // 1152: ypb.Yak.UpdateFingerprint:output_type -> ypb.DbOperateMessage
	562, // 1153: ypb.Yak.CreateFingerprint:output_type -> ypb.DbOperateMessage
	562, // 1154: ypb.Yak.RecoverBuiltinFingerprint:output_type -> ypb.DbOperateMessage
	559, // 1155: ypb.Yak.GetReverseShellProgramList:output_type -> ypb.GetReverseShellProgramListResponse
	561, // 1156: ypb.Yak.GenerateReverseShellCommand:output_type -> ypb.GenerateReverseShellCommandResponse
	584, // 1157: ypb.Yak.QuerySyntaxFlowRule:output_type -> ypb.QuerySyntaxFlowRuleResponse
	562, // 1158: ypb.Yak.CreateSyntaxFlowRule:output_type -> ypb.DbOperateMessage
	562, // 1159: ypb.Yak.UpdateSyntaxFlowRule:output_type -> ypb.DbOperateMessage
	562, // 1160: ypb.Yak.DeleteSyntaxFlowRule:output_type -> ypb.DbOperateMessage
	589, // 1161: ypb.Yak.QuerySyntaxFlowRuleGroup:output_type -> ypb.QuerySyntaxFlowRuleGroupResponse
	562, // 1162: ypb.Yak.DeleteSyntaxFlowRuleGroup:output_type -> ypb.DbOperateMessage
	562, // 1163: ypb.Yak.CreateSyntaxFlowRuleGroup:output_type -> ypb.DbOperateMessage
	562, // 1164: ypb.Yak.UpdateSyntaxFlowRuleAndGroup:output_type -> ypb.DbOperateMessage
	599, // 1165: ypb.Yak.SyntaxFlowScan:output_type -> ypb.SyntaxFlowScanResponse
	596, // 1166: ypb.Yak.QuerySyntaxFlowScanTask:output_type -> ypb.QuerySyntaxFlowScanTaskResponse
	562, // 1167: ypb.Yak.DeleteSyntaxFlowScanTask:output_type -> ypb.DbOperateMessage
	602, // 1168: ypb.Yak.QuerySyntaxFlowResult:output_type -> ypb.QuerySyntaxFlowResultResponse
	581, // 1169: ypb.Yak.QuerySSAPrograms:output_type -> ypb.QuerySSAProgramResponse
	562, // 1170: ypb.Yak.UpdateSSAProgram:output_type -> ypb.DbOperateMessage
	562, // 1171: ypb.Yak.DeleteSSAPrograms:output_type -> ypb.DbOperateMessage
	605, // 1172: ypb.Yak.GetAllPluginEnv:output_type -> ypb.PluginEnvData
	605, // 1173: ypb.Yak.QueryPluginEnv:output_type -> ypb.PluginEnvData
	4,   // 1174: ypb.Yak.CreatePluginEnv:output_type -> ypb.Empty
	4,   // 1175: ypb.Yak.SetPluginEnv:output_type -> ypb.Empty
	4,   // 1176: ypb.Yak.DeletePluginEnv:output_type -> ypb.Empty
	608, // 1177: ypb.Yak.GetAllFuzztagInfo:output_type -> ypb.GetAllFuzztagInfoResponse
	612, // 1178: ypb.Yak.GenerateFuzztag:output_type -> ypb.GenerateFuzztagResponse
	773, // [773:1179] is the sub-list for method output_type
	367, // [367:773] is the sub-list for method input_type
	367, // [367:367] is the sub-list for extension type_name
	367, // [367:367] is the sub-list for extension extendee
	0,   // [0:367] is the sub-list for field type_name
}

func init() { file_yakgrpc_proto_init() }
func file_yakgrpc_proto_init() {
	if File_yakgrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yakgrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptByOnlineIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifySystemCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceEngineAccountStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceEngineStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceEngineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchPortAssetFromSpaceEngineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHybridScanTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridScanTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHybridScanTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHybridScanTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridScanTaskFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridScanUpdateActiveTaskTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridScanInputTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridScanPluginConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplexConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplexConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcapMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcapMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTrafficPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTrafficTCPReassembledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTrafficSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTrafficPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTCPReassembled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTrafficTCPReassembledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTrafficSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcapXRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuricataConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcapXResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestYakURLParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakURLResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestYakURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketPrettifyHelperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketPrettifyHelperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnoseNetworkDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetGlobalNetworkConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalNetworkConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidP12PassWordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidP12PassWordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalNetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdPartyApplicationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnoseNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnoseNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectVulinboxAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmokingEvaluatePluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmokingEvaluateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmokingEvaluatePluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsVulinboxReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsVulinboxReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallVulinboxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVulinboxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenQualityInspectionReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestBuilderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestBuilderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestBuilderParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenRecorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryScreenRecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadScreenRecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneScreenRecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScreenRecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryScreenRecorderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartScrecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallScrecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsScrecorderReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsScrecorderReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCVERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCVERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWEDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVEDetailEx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVEDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCVEResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTextToTemporalFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTextToTemporalFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportChaosMakerRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosMakerRuleGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRemoteAddrAvailableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRemoteAddrAvailableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteChaosMakerRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosMakerRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaosMakerRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChaosMakerRuleByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaosMakerRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportsProfileDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportsProfileDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCVEDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCVEDatabaseReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCVEDatabaseReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMRuleExtractedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMITMRuleExtractedDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMITMRuleExtractedDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractedDataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportMITMRuleExtractedDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportMITMRuleExtractedDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectIOProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPrivilegedForNetRawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsProjectNameValidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCurrentProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProjectDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachCombinedOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangShellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangShellKVPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangShellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetAndInvalidUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterFacadesHTTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterFacadesHTTPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPPacketBodyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadBodyByHTTPFlowIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveFuzzerLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFuzzerLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFuzzerLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveFuzzerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFuzzerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFuzzerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFuzzerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateExtractRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateExtractRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFuzzerResponseByTaskIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFuzzerResponseByTaskIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientWebsocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientWebsocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultProxyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecPacketScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangInspectInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangLanguageSuggestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangInformationKV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangLanguageSuggestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangLanguageFindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangInspectInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakUIInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakRiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangGetCliCodeFromDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangGetCliCodeFromDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticAnalyzeErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangCompileAndFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangCompileAndFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticAnalyzeErrorResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticAnalyzeErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePayloadProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePluginByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLocalPluginsByWhereRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByScriptNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByScriptNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByScriptName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessEnvKeyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSystemProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemProxyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecBatchYakScriptUnfinishedTaskByUidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverExecBatchYakScriptUnfinishedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptUnfinishedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleDetectUnfinishedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecBatchYakScriptUnfinishedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimpleDetectUnfinishedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnfinishedTaskFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUnfinishedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUnfinishedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnfinishedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUnfinishedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnfinishedTaskDetailByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverUnfinishedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixUploadPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixUploadPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMultipartFormDataRequestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDecodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDecodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDecodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataToFileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptLocalAndUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptLocalAndUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptByOnlineGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptByNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptByIsCoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptByNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptByIsCoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptRiskDetailByCWERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptRiskDetailByCWEResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptRiskTypeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskTypeLists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataToFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMContentReplacers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportMITMReplacerRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportMITMReplacerRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecYakitPluginsByYakScriptFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateYakCodeByPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCSRFPocByPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCSRFPocByPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateYakCodeByPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTagForHTTPFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSetTagsHTTPFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireICMPRandomLengthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPortTriggerNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRandomPortTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHistoryHTTPFuzzerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskTableStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoOptionsWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoClassGeneraterOptionsWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoClassOptionsResponseWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoClassGeneraterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoClassOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoOptionsRequerstWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoOptionsRequerst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoBytesObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoDumpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoBytesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesToBase64Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesToBase64Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryICMPTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryICMPTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySupportedDnsLogPlatformsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICMPTriggerNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoryHTTPFuzzerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHistoryHTTPFuzzerTaskExParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePacketYakScriptParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteBatchPacketYakScriptParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebShell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShellGenerate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShellOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebShellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebShellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWebShellsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWebShellsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWebShellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebShellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakDNSLogBridgeAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireDNSLogDomainByScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDNSLogByTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDNSLogByTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSLogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSLogRootDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalReverseServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableLocalAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGlobalReverseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Risk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNewRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNewRiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRiskTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskFieldGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRiskReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRiskToOnlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTagForRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTunnelServerDomainParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTunnelServerDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelServerExternalIPParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelServerExternalIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFacadesParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyClassToFacadesParamsWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyClassToFacadesParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFacadesWithYsoParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableBruteTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBruteParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestMutateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseMutateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPortsGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortsGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteYakScriptExecResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptExecResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptExecResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateWebsiteTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateWebsiteTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBasicCrawlerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPCookieSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportYakScriptStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportYakScriptStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportYakScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkdownDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkdownDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveMarkdownDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGroupsByYakScriptIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchExecutionPluginFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuItemGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMenuItemByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuByGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptIsInMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFromMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllMenuItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportMenuItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportMenuItemResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToNavigationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllNavigationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllNavigationItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOneNavigationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNavigationGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFromYakitResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFromGithubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPortScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPortsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakitCompletionRawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakVMBuildInMethodCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestionDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodSuggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakVMBuildInMethodCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadGroupNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPayloadGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllPayloadGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePayloadToFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackUpOrCopyPayloadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePayloadByGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPayloadFromFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPayloadFromFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPayloadFromFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collaborator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveNewYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveYakScriptToOnlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveYakScriptToOnlineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToOnlineResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportLocalYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportLocalYakScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportYakScriptLocalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportYakScriptResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveYakScriptGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameYakScriptGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteYakScriptGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetYakScriptGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptTagsAndTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagsAndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecRequestFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizeCodecFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCodecFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodecFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecMethods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecHistoryRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecHistoryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFuzzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFuzzerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestAnalysisMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestParamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchHTTPResponseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchHTTPResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseExtractor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractHTTPResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractHTTPResponseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreloadHTTPFuzzerParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreloadHTTPFuzzerParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerParamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerResponseFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectRequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractedUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerSequenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectHTTPFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowByIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowBodyByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsToOnlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportHTTPFlowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowsProcessNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHTTPFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowsIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowsIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzableParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowBodyByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsFieldGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsFieldGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsExtractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMITMFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMITMFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterDataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMFilterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMContentReplacer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHookParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptHooks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptHookItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResposne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecParamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultDnsServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowBareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowBareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportHTTPFuzzerTaskFromYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportHTTPFuzzerTaskFromYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportHTTPFuzzerTaskToYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportHTTPFuzzerTaskToYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderHTTPFuzzerPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderHTTPFuzzerPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmokingEvaluatePluginBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmokingEvaluatePluginBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakVersionAtLeastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTrafficRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTrafficResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateExpressionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateExpressionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateMultiExpressionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateMultiExpressionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdPartyAppConfigItemTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThirdPartyAppConfigTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThirdPartyAppConfigTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReverseShellProgramListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReverseShellProgramListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateReverseShellCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateReverseShellCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbOperateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FingerprintRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FingerprintFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySyntaxFlowRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[568].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[569].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowRuleInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[570].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowRuleFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[571].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSAProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[572].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSAProgramInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[573].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSAProgramFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[574].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySSAProgramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[575].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSSAProgramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[576].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSSAProgramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[577].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySSAProgramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[578].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSyntaxFlowRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[579].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyntaxFlowRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[580].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySyntaxFlowRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[581].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSyntaxFlowRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[582].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowRuleGroupFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[583].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[584].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySyntaxFlowRuleGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[585].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySyntaxFlowRuleGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[586].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSyntaxFlowGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[587].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyntaxFlowRuleAndGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[588].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSyntaxFlowRuleGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[589].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[590].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySyntaxFlowScanTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[591].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowScanTaskFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[592].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySyntaxFlowScanTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[593].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowScanTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[594].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSyntaxFlowScanTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[595].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[596].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowResultFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[597].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySyntaxFlowResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[598].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySyntaxFlowResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[599].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxFlowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[600].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPluginEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[601].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginEnvData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[602].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePluginEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[603].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllFuzztagInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[604].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllFuzztagInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[605].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzztagArgumentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[606].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzztagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[607].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFuzztagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[608].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFuzztagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yakgrpc_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   615,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yakgrpc_proto_goTypes,
		DependencyIndexes: file_yakgrpc_proto_depIdxs,
		EnumInfos:         file_yakgrpc_proto_enumTypes,
		MessageInfos:      file_yakgrpc_proto_msgTypes,
	}.Build()
	File_yakgrpc_proto = out.File
	file_yakgrpc_proto_rawDesc = nil
	file_yakgrpc_proto_goTypes = nil
	file_yakgrpc_proto_depIdxs = nil
}
