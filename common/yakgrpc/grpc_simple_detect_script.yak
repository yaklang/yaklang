yakit.AutoInitYakit()

loglevel("info")

runtimeID = getParams("RUNTIME_ID")
yakit.StatusCard("RuntimeIDFromRisks", runtimeID)

# Input your code!
updateStatus = s => yakit.StatusCard("当前状态", s)

updateStatus("解析参数")
yakit.Info("解析参数")
yakit.Info("开始处理扫描参数")

targetFiles = cli.String("target-file")

hostCount = cli.Int("host-count")

// 恢复任务的指针
recordPtr = cli.Int("record-ptr", cli.setDefault(0))
recordFile = cli.String("record-file")

progressData = cli.Float("progress-data")

baseProgress = 0.05

if progressData > 0 {
    baseProgress = progressData
}

yakit.SetProgress(baseProgress)

taskName = cli.String("task-name")

tcpPorts = cli.String(
    "ports",
    cli.setDefault("22,443,445,80,8000-8004,3306,3389,5432,8080-8084,7000-7005"),
)
mode = cli.String("mode", cli.setDefault("fingerprint"))
saveToDB = cli.Bool("save-to-db")
saveClosed = cli.Bool("save-closed-ports")
proxies = cli.String("proxy", cli.setDefault("no"))
probeTimeoutFloat = cli.Float("probe-timeout", cli.setDefault(5.0), cli.setRequired(false))
probeMax = cli.Int("probe-max", cli.setRequired(false), cli.setDefault(4))

// host alive scan
skippedHostAliveScan = cli.Bool("skipped-host-alive-scan")
hostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))
hostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))
hostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))

if proxies == "no" {
    proxies = ""
}


active = cli.Bool("active")
concurrent = cli.Int("concurrent", cli.setDefault(50))
synConcurrent = cli.Int("syn-concurrent", cli.setDefault(800))
protos = cli.String("proto", cli.setDefault("tcp,udp"))

fpMode = cli.String("fp-mode", cli.setDefault("all"))
scriptNameFile = cli.String("script-name-file", cli.setDefault(""))

// brute
enableBrute = cli.Have("enable-brute")

userList := cli.String("user-list-file")
passList := cli.String("pass-list-file")
bruteConcurrent := cli.Int("brute-concurrent")
taskConcurrent := cli.Int("task-concurrent")
minDelay, maxDelay := cli.Int("delay-min", cli.setDefault(3)), cli.Int("delay-max", cli.setDefault(5))
okToStop := cli.Bool("ok-to-stop")
replaceDefaultUsernameDict := cli.Bool("replace-default-username-dict")
replaceDefaultPasswordDict := cli.Bool("replace-default-password-dict")
finishingThreshold = cli.Int("finishing-threshold", cli.setDefault(1))

cli.check()
yakit.SetProgress(baseProgress + 0.01)
sleep(1)
yakit.Info("用户自定义字典预处理")
// 定义存储用户名与密码的字典
userdefinedUsernameList = make([]string)
userdefinedPasswordList = make([]string)

// 获取用户列表
userRaw, _ := file.ReadFile(userList)
if len(userRaw) <= 0 {
    yakit.Error("用户文件字典获取失败")
} else {
    userdefinedUsernameList = str.ParseStringToLines(string(userRaw))
}


passRaw, _ := file.ReadFile(passList)
if len(passRaw) <= 0 {
    yakit.Error("用户密码文件获取失败")
} else {
    userdefinedPasswordList = str.ParseStringToLines(string(passRaw))
}


bruteOpt = []

if minDelay > 0 && maxDelay > 0 {
    yakit.Info("单目标测试随机延迟：%v-%v/s", minDelay, maxDelay)
    opt = append(bruteOpt, brute.minDelay(minDelay), brute.maxDelay(maxDelay))
}


if finishingThreshold > 0 {
    opt = append(
        bruteOpt,
        brute.finishingThreshold(finishingThreshold),
    )
}


if bruteConcurrent > 0 {
    yakit.Info("设置最多同时爆破目标：%v", concurrent)
    opt = append(bruteOpt, brute.concurrentTarget(bruteConcurrent))
}


if taskConcurrent > 0 {
    yakit.Info("设置单目标爆破并发：%v", taskConcurrent)
    opt = append(bruteOpt, brute.concurrent(taskConcurrent))
}


excludeHosts = cli.String("exclude-hosts")
excludePorts = cli.String("exclude-ports")
enableCrawler = cli.Have("enable-basic-crawler")
crawlerMaxRequest = cli.Int("basic-crawler-request-max")

tcpOps = []
tcpOps = append(tcpOps, servicescan.active(active))

if concurrent > 0 {
    tcpOps = append(tcpOps, servicescan.concurrent(concurrent))
}


if protos != "" {
    protoList = str.Split(protos, ",")
    printf("PROTO: %#v\n", protos)
    tcpOps = append(tcpOps, servicescan.proto(protoList...))
}


if probeMax > 0 {
    tcpOps = append(tcpOps, servicescan.maxProbes(probeMax))
} else {
    tcpOps = append(tcpOps, servicescan.maxProbes(3))
}


if proxies != "" {
    proxyList = str.Split(proxies, ",")
    printf("PROXY: %v\n", proxyList)
    tcpOps = append(tcpOps, servicescan.proxy(proxyList...))
}


if probeTimeoutFloat > 0 {
    tcpOps = append(
        tcpOps,
        servicescan.probeTimeout(probeTimeoutFloat),
    )
}


if fpMode == "web" {
    tcpOps = append(tcpOps, servicescan.web())
}


if fpMode == "service" {
    tcpOps = append(tcpOps, servicescan.service())
}


if fpMode == "all" {
    tcpOps = append(tcpOps, servicescan.all())
}


if excludePorts != "" {
    yakit.Info("设置排除端口：%v", excludePorts)
    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))
}

if excludeHosts != "" {
    yakit.Info("设置排除主机：%v", excludeHosts)
    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))
}


synPorts = "1-4,6-17,19-35,37-38,40,42-45,47-60,63,65-104,106,108-120,122-125,127-130,132-133,135-139,141-146,148-151,156-158,161-163,165,168,173-174,176-177,179-182,184-185,189-194,196,199-202,204-206,209-214,216-217,219-226,228-231,233-238,243,247-262,264-265,267-268,270-271,273,276-277,280,284,288-289,293-295,300-301,303,305-306,308,311,315-316,322,325-326,329,333-334,336-337,340,343,346,350-353,355,358,360-362,364,366,369-370,372-373,379-380,383,388-389,391-392,395,397,399-404,406-408,410-420,422-423,425,427-428,432-435,437-454,456-458,460,462,464-466,470,472-475,479-481,485-487,491-493,496-497,500-502,505,507,509-516,518-519,522-528,530,533-536,538,540-545,548,552-557,560-561,563-564,568-572,577-578,580,582-583,587,590-591,593,596,598-649,651-670,672-678,680-692,694-771,773-916,918-939,941-1114,1116-1119,1121-1128,1130-1132,1134-1139,1141-1145,1147-1154,1156-1159,1162-1169,1173-1176,1178-1180,1182-1192,1194-1196,1198-1201,1204,1207-1218,1220-1223,1228-1229,1233-1234,1236,1239-1241,1243-1244,1247-1251,1259,1261-1262,1264,1268,1270-1272,1276-1277,1279,1282,1287,1290-1291,1296-1297,1299-1303,1305-1312,1314-1319,1321-1322,1324,1327-1328,1330-1331,1334,1336-1340,1346-1374,1376,1379-1391,1393-1405,1407-1414,1416-1420,1422-1427,1429-1430,1432-1446,1448-1451,1453-1459,1461-1462,1464-1467,1469-1470,1472-1476,1479-1480,1482-1484,1486,1488,1491-1503,1505-1511,1513,1515-1519,1521-1529,1531-1533,1535,1537-1545,1547-1552,1556,1558-1560,1565-1566,1569,1580,1583-1584,1592,1594,1598,1600,1605,1607,1615,1620,1622,1627,1631-1632,1635,1638,1641,1645,1650-1652,1658,1661-1664,1666-1668,1670-1672,1677,1680,1683,1687-1688,1691,1694,1699-1701,1703,1707-1709,1711-1713,1715,1717-1723,1730,1735-1736,1745,1750,1752-1753,1755,1759,1761-1763,1782-1783,1785,1791-1792,1796,1799-1801,1805-1808,1811-1812,1814,1823,1825,1827,1832,1835,1839-1840,1846,1852,1858,1860-1864,1870-1871,1875,1883,1885,1889,1900-1901,1906,1910-1912,1914,1918,1924-1925,1927,1935,1947,1954,1956,1958,1964-1965,1967,1971-1977,1979,1981,1984,1986-2016,2018-2028,2030-2031,2033-2035,2038,2040-2049,2053-2054,2060,2062,2064-2065,2067-2070,2074,2080-2084,2086-2087,2095-2096,2099-2108,2111-2112,2115,2119-2121,2124,2126,2132,2134-2135,2142,2144,2148,2150,2154,2156-2158,2160-2161,2165,2170,2179,2187,2190-2191,2196-2197,2200-2201,2203,2216,2222,2224,2231-2232,2241,2248,2250-2251,2253,2255,2260-2262,2265,2269-2271,2280,2288,2290-2292,2296,2300-2302,2304,2306-2307,2312-2313,2323,2325-2326,2330,2335,2340-2341,2357,2366,2371-2372,2375-2376,2381-2383,2386-2387,2391-2394,2399,2401-2403,2405,2409-2410,2418,2425-2426,2430-2433,2435-2436,2438-2440,2449,2456,2463,2470,2472,2474,2492-2493,2500-2501,2505,2522,2525,2529-2532,2537,2539,2542,2550-2551,2554,2557-2558,2564,2567-2569,2573,2576,2580,2583-2584,2595-2596,2598-2602,2604-2610,2622-2623,2627-2628,2631,2638,2644,2655,2657-2659,2670,2675,2679,2691,2696,2700-2704,2706,2710-2712,2717-2718,2721,2723,2725,2728-2729,2734,2737,2739,2766,2771,2784,2800,2802,2804-2806,2809,2811-2812,2821,2847,2850,2862-2863,2869,2875-2876,2880,2882,2888-2889,2898,2901-2903,2907-2910,2915,2920,2930,2948-2949,2957-2958,2967-2968,2973,2977-2978,2984,2987-2989,2991,2993-2994,2997-2998,3000-3003,3005-3007,3011-3014,3017-3018,3023,3025,3030-3031,3040,3045,3049-3050,3052,3057,3061-3064,3071,3073-3074,3077,3080,3086,3089,3098,3102-3103,3111,3118-3119,3121,3128,3141,3146,3158,3160,3162,3167-3168,3175,3185,3190,3200,3207,3210-3212,3217,3219-3221,3230-3231,3233,3240-3241,3243,3245,3249,3251,3260-3261,3263-3264,3268-3269,3280-3281,3283,3291-3292,3299-3301,3304,3306-3311,3313-3314,3317-3319,3322-3325,3333-3334,3346,3351,3359,3362-3363,3365,3367-3372,3374-3376,3380,3388-3390,3396-3400,3404,3410,3413-3415,3419,3421,3423-3425,3427,3430,3438-3439,3443,3456-3457,3459,3468,3474,3476,3478-3479,3482-3483,3485-3486,3491-3493,3495,3497,3503,3505-3506,3509-3511,3513-3515,3517,3519-3521,3526-3527,3530-3532,3534,3541,3544,3546-3547,3549,3551-3552,3555,3563,3577,3579-3580,3584,3586,3590,3599-3603,3606,3608,3615,3621-3622,3632-3633,3636-3637,3646-3647,3651-3654,3656,3658-3659,3663-3664,3669-3670,3672,3674,3676,3680-3681,3683-3684,3686,3689-3690,3696-3697,3700,3702-3703,3708,3712-3713,3716-3717,3720,3722-3724,3726,3728,3731,3734,3737-3738,3741-3742,3749,3752,3754,3763,3765-3766,3784,3786-3788,3790-3793,3795-3796,3798-3801,3803,3805-3814,3816-3817,3820,3823-3828,3830-3831,3834-3835,3837,3839-3840,3842,3845-3854,3856-3861,3863,3865-3872,3876-3880,3882-3885,3888-3890,3894-3895,3897,3899-3902,3904-3909,3911,3913-3916,3918-3920,3922-3923,3925,3928-3931,3935-3937,3940-3941,3943-3946,3948-3949,3952,3956-3957,3959,3961-3964,3967-3969,3971-3972,3975,3979-3986,3989-4010,4015-4020,4022,4024-4025,4029,4031-4032,4034-4036,4039-4040,4045,4049-4050,4052,4056,4058,4065,4070,4072,4080,4087,4090,4094-4096,4100-4101,4111-4113,4118-4121,4123,4125-4126,4129,4132-4133,4135,4141,4143-4147,4156-4158,4161,4164-4165,4170,4174,4176-4177,4184-4185,4188,4190,4192,4199-4300,4302,4307,4321-4323,4325,4328,4333,4342-4343,4355-4358,4368-4369,4374-4376,4384,4388-4389,4401,4407,4414-4415,4417-4418,4422-4423,4426,4430,4433,4442-4447,4449,4454,4464,4471,4476,4480,4500,4516-4517,4530,4534,4537-4538,4545,4550,4555,4557-4559,4567,4570,4599-4602,4606,4609,4644,4649,4658,4660,4662,4665,4672,4683,4687,4689,4700,4711-4713,4725,4738,4745,4760,4767,4770-4771,4778,4786,4789,4793,4800,4819,4827,4845,4847-4848,4850,4859-4860,4867,4875-4877,4879,4881-4882,4888-4889,4899-4900,4903,4912,4931,4949-4950,4953,4987,4991,4998-5017,5020-5021,5023,5026-5027,5030,5033,5040,5046,5048,5050-5055,5060-5061,5063,5066,5070,5074,5080-5081,5087-5088,5090,5095-5096,5098,5100-5102,5111,5114-5115,5120-5122,5125,5133,5137,5145-5147,5151-5153,5161-5162,5164,5166,5190-5191,5193,5195-5197,5200-5203,5212,5214,5219,5221-5223,5225-5226,5232-5235,5242,5250,5252,5259,5261,5269,5279-5281,5291,5298,5300-5303,5306,5308,5320-5321,5339,5344,5347,5349,5353,5357-5358,5363,5370,5377,5397,5400,5405-5406,5414,5416-5417,5423,5431-5433,5440-5442,5444,5450,5457-5458,5462-5463,5470-5475,5490,5500-5502,5510,5520,5530,5544,5550,5552-5555,5557,5560,5566,5580-5583,5611-5612,5620-5622,5629,5631-5633,5637-5639,5646,5665-5667,5670,5672,5675,5678-5680,5705,5711,5713-5714,5717-5718,5721-5723,5730,5732,5734,5737,5743-5744,5747-5748,5769-5770,5780,5793,5800-5804,5806-5808,5810-5812,5814-5815,5817-5818,5820-5827,5831,5834,5836,5838-5841,5845,5848-5850,5852-5854,5858-5860,5862,5868-5869,5871,5874-5875,5877-5878,5881,5887-5888,5899-5912,5914-5915,5917-5918,5920-5927,5931,5934,5936,5938-5940,5945,5948-5950,5952-5954,5958-5963,5966,5968-5969,5971,5974-5975,5977-5978,5981,5985-5990,5997-6063,6065,6067-6068,6077,6083,6085,6090-6091,6100-6101,6103,6105-6106,6110-6116,6118,6120-6121,6123,6126,6129-6130,6141-6147,6156,6161,6203,6222,6247,6250-6252,6259,6273-6274,6306,6309-6310,6323-6324,6346-6347,6349-6350,6379,6389,6400-6401,6412,6418-6419,6442,6481,6483,6500,6502-6504,6510,6514,6520,6535,6543-6544,6547-6548,6550-6551,6565-6567,6579-6580,6588,6600,6602,6606,6619,6626,6628,6644,6646-6647,6650,6662,6665-6670,6672-6673,6678,6689,6692,6699-6701,6709-6711,6725,6732,6734,6779-6780,6786-6789,6792,6839,6877,6881,6888,6896-6897,6901,6920,6922,6936,6942,6956,6969,6972-6973,7000-7012,7015-7016,7019,7024-7025,7033,7043,7050-7051,7067-7068,7070-7072,7080,7088,7092,7099-7104,7106,7119,7121,7123,7173,7184,7200-7201,7218,7231,7236,7241,7272-7273,7278,7281,7300-7359,7400,7402,7411,7435,7438,7443,7451,7456,7464,7471,7496,7500-7501,7512,7548,7553,7555,7560,7566,7588,7597,7600,7625,7627-7628,7631,7634,7637,7654,7676-7677,7685,7688,7725,7727,7734,7741,7744,7749,7770-7772,7777-7778,7780,7788-7789,7800,7802,7813,7830,7852-7854,7872,7878,7887,7895,7900-7903,7911,7913,7920-7921,7929,7932-7933,7937-7938,7975,7981-7982,7998-8003,8005-8011,8014-8016,8018-8019,8021-8023,8025,8029,8031,8034,8037,8041-8042,8045,8050,8052,8060,8064,8066,8076,8080-8090,8092-8093,8095,8097-8100,8110,8116,8118,8123,8133,8140,8144,8180-8182,8189,8192-8194,8199-8202,8222,8232,8243,8245,8248,8254-8255,8268,8273,8280,8282,8290-8295,8300,8308,8320-8321,8333,8339,8383,8385,8400-8405,8409,8443,8445,8451-8455,8470-8474,8477,8479,8481,8484,8500,8515,8530-8531,8539-8540,8555,8562,8600-8601,8621,8640,8644,8648-8649,8651-8652,8654-8655,8658,8673,8675-8676,8680,8686,8699,8701,8736,8752,8756,8765-8766,8770,8772,8778,8790,8798,8800-8801,8808,8843,8865,8873,8877-8880,8882-8883,8887-8889,8892,8898-8900,8912,8925,8937,8953-8954,8980,8987,8989-8991,8994,8996,8999-9005,9009-9011,9013,9020-9022,9037,9040,9044,9050-9051,9061,9065,9071,9080-9081,9084,9086,9090-9092,9098-9107,9110-9111,9125,9128,9130-9131,9133,9152,9160-9161,9170,9183,9191,9197-9198,9200-9207,9210-9211,9220,9281-9282,9284,9287,9290,9293,9300,9306,9312,9333,9343,9351,9364,9400,9409,9415,9418,9443-9444,9454,9464,9478,9485,9493,9500-9503,9513,9522,9527,9535-9536,9555,9575,9583,9592-9595,9598,9600,9612-9613,9616,9618-9621,9628-9629,9643,9648,9654,9661,9665-9668,9673-9674,9679-9680,9683,9694,9700,9745,9762,9777,9800,9802,9812,9814-9815,9823,9825-9826,9830,9844,9875-9878,9898,9900-9901,9908-9912,9914-9915,9917,9919,9925,9929,9941,9943-9944,9950,9968,9971,9975,9978-9979,9988,9990-9992,9995,9998-10012,10018-10020,10022-10025,10034-10035,10042,10045,10050-10051,10058,10064,10082-10083,10093,10100-10101,10104,10107,10115,10160-10162,10180,10200,10215,10238,10243,10245-10246,10255,10261,10280,10338,10347,10357,10387,10414,10443,10494,10500,10509,10529,10535,10550-10556,10565-10567,10601-10602,10616-10617,10621,10626,10628-10629,10699,10754,10778,10842,10852,10873,10878,10900,11000-11001,11003,11007,11019,11026,11031-11033,11089,11100,11110-11111,11161-11165,11171,11173,11180,11200,11208,11224,11250,11288,11296,11371,11401,11552,11600,11697,11735,11813,11862-11863,11876-11877,11940,11967,11971,12000-12002,12005-12006,12009,12012-12013,12019,12021,12031,12034,12059,12077,12080,12090,12096-12097,12121,12132,12137,12146,12156,12171,12174,12192,12215,12225,12240,12243,12251,12262,12265,12271,12275,12296,12321-12322,12340,12345-12346,12380,12414,12452,12699,12702,12753,12766,12865,12891-12892,12955,12962,13017,13093,13130,13132,13140,13142,13149,13167,13188,13192-13194,13229,13250,13261,13264-13265,13306,13318,13340,13359,13456,13502,13580,13695,13701,13705,13708-13710,13712-13718,13720-13724,13730,13766,13782-13784,13786,13846,13894,13899,14000-14001,14141,14147,14149-14150,14154,14218,14237-14238,14254,14418,14441-14444,14500,14534,14545,14693,14733,14827,14891,14916,15000-15005,15050,15118,15145,15151,15190-15191,15275,15317,15344-15345,15402,15448,15550,15631,15645-15646,15660,15670,15677,15722,15730,15742,15758,15915,16000-16001,16012,16016,16018,16048,16080,16113,16161-16162,16270,16273,16283,16286,16297,16349,16372,16444,16464,16619,16666,16705,16723-16725,16789,16797,16800,16845,16851,16900-16901,16959,16992-16993,17007,17016-17017,17070,17089,17129,17184-17185,17224-17225,17235,17251,17255,17300,17409,17413,17500,17595,17700-17702,17715,17755-17756,17777,17801-17802,17860,17867,17877,17969,17985,17988,17997,18000,18012,18015,18018,18040,18080,18101,18136,18148,18181-18184,18187,18231,18264,18333,18336-18337,18380,18439,18505,18517,18569,18668-18669,18874,18887,18910,18962,18988,19010,19101,19130,19150,19194,19200-19201,19283,19315,19333,19350,19353,19403,19464,19501,19612,19634,19715,19780,19801,19842,19852,19900,19995-19996,20000-20002,20005,20011,20017,20021,20031-20032,20039,20046,20052,20076,20080,20085,20089,20102,20106,20111,20118,20125,20127,20147,20167,20179-20180,20221-20228,20280,20473,20734,20828,20883,20934,20940,20990,21011,21078,21201,21473,21571,21590,21631,21634,21728,21792,21800,21891,21915,22022,22063,22100,22125,22128,22177,22200,22222-22223,22273,22289-22290,22321,22341,22347,22350-22351,22555,22563,22711,22719,22727,22763,22769,22800,22882,22939,22951,22959,22969,23017,23040,23052,23219,23228,23270,23296,23342,23382,23430,23451,23502,23723,23796,23887,23953,24218,24249,24322-24323,24392,24416,24444,24465,24552,24554,24616,24678,24680,24800,24999-25001,25174,25260,25262,25288,25327,25445,25473,25486,25565,25703,25717,25734-25735,25793,25847,25900,26000-26001,26007,26133,26208,26214,26340,26417,26470,26669,26972,27000-27003,27005,27007,27009-27010,27015-27019,27055,27074-27075,27087,27204,27316,27350-27353,27355-27357,27372,27374,27521,27537,27665,27715,27770,27999,28017,28114,28142,28200-28201,28211,28374,28567,28717,28850-28851,28924,28967,29045,29152,29243,29507,29672,29810,29831,30000-30001,30005,30087,30195,30299,30519,30599,30644,30659,30704-30705,30718,30896,30951,31029,31033,31038,31058,31072,31337,31339,31386,31416,31438,31457,31522,31657,31727-31728,32006,32022,32031,32088,32102,32200,32219,32249,32260-32261,32764-32765,32767-32792,32797-32799,32803,32807,32814-32816,32820,32822,32835,32837,32842,32858,32868-32869,32871,32888,32897-32898,32904-32905,32908,32910-32911,32932,32944,32960-32961,32976,33000,33011,33017,33070,33087,33124,33175,33192,33200,33203,33277,33327,33334-33335,33337,33354,33367,33395,33434,33444,33453,33522-33523,33550,33554,33604-33605,33656,33841,33879,33882,33889,33895,33899,34021,34036,34096,34189,34249,34317,34341,34381,34401,34507,34510,34571-34573,34683,34728,34765,34783,34833,34875,35033,35050,35116,35131,35217,35272,35349,35392-35393,35401,35500,35506,35513,35553,35593,35731,35879,35900-35901,35906,35929,35986,36046,36104-36105,36256,36275,36368,36411,36436,36462,36508,36530,36552,36659,36677,36694,36710,36748,36823-36824,36914,36950,36962,36983,37121,37151,37174,37185,37218,37393,37522,37607,37614,37647,37654,37674,37777,37789,37839,37855,38029,38037,38185,38188,38194,38205,38224,38270,38292,38313,38331,38358,38422,38446,38481,38546,38561,38570,38761,38764,38780,38800,38805,38936,39067,39117,39136,39265,39293,39376,39380,39433,39482,39489,39630,39659,39681,39732,39763,39774,39795,39869,39883,39895,39917,40000-40003,40005,40011,40193,40306,40393,40400,40457,40489,40513,40614,40628,40712,40732,40754,40811-40812,40834,40911,40951,41064,41121,41123,41142,41230,41250,41281,41318,41342,41345,41348,41398,41442,41511,41523,41551,41632,41773,41794-41795,41808,42001,42035,42127,42158,42251,42276,42322,42449,42452,42510,42559-42560,42575,42590,42632,42675,42679,42685,42735,42906,42990,43000,43002,43018,43027,43103,43139,43143,43188,43212,43231,43242,43425,43654,43690,43734,43823,43868,44004,44101,44119,44123,44176,44200,44334,44380,44410,44431,44442-44443,44479,44501,44505,44541,44616,44628,44704,44709,44711,44965,44981,45038,45050,45100,45136,45164,45220,45226,45413,45438,45463,45602,45624,45697,45777,45864,45960,45966,46034,46069,46115,46171,46182,46200,46310,46372,46418,46436,46593,46813,46992,46996,47001,47012,47029,47119,47197,47267,47348,47372,47448,47544,47557,47567,47581,47595,47624,47634,47700,47777,47806,47850,47858,47860,47966,47969,48009,48050,48067,48080,48083,48127,48153,48167,48356,48434,48619,48631,48648,48682,48783,48813,48925,48966-48967,48973,49002,49048,49132,49152-49161,49163-49173,49175-49176,49179,49186,49189-49191,49195-49197,49201-49204,49211,49213,49216,49228,49232,49235-49236,49241,49275,49302,49352,49372,49398,49400-49401,49452,49498,49500,49519-49522,49597,49603,49678,49751,49762,49765,49803,49927,49999-50003,50006,50016,50019,50040,50050,50101,50189,50198,50202,50205,50224,50246,50258,50277,50300,50356,50389,50500,50513,50529,50545,50576-50577,50585,50636,50692,50733,50787,50800,50809,50815,50831,50833-50836,50849,50854,50887,50903,50945,50997,51011,51020,51037,51067,51103,51118,51139,51191,51233-51235,51240,51300,51343,51351,51366,51413,51423,51460,51484-51485,51488,51493,51515,51582,51658,51771-51772,51800,51809,51906,51909,51961,51965,52000-52003,52025,52046,52071,52173,52225-52226,52230,52237,52262,52391,52477,52506,52573,52660,52665,52673,52675,52710,52735,52822,52847-52851,52853,52869,52893,52948,53085,53178,53189,53211-53212,53240,53313-53314,53319,53361,53370,53460,53469,53491,53535,53633,53639,53656,53690,53742,53782,53827,53852,53910,53958,54045,54075,54101,54127,54235,54263,54276,54320-54321,54323,54328,54514,54551,54605,54658,54688,54722,54741,54873,54907,54987,54991,55000,55020,55055-55056,55183,55187,55227,55312,55350,55382,55400,55426,55479,55527,55555-55556,55568-55569,55576,55579,55600,55635,55652,55684,55721,55758,55773,55781,55901,55907,55910,55948,56016,56055,56259,56293,56507,56535,56591,56668,56681,56723,56725,56737-56738,56810,56822,56827,56973,56975,57020,57103,57123,57294,57325,57335,57347,57350,57352,57387,57398,57479,57576,57665,57678,57681,57702,57730,57733,57797,57891,57896,57923,57928,57988,57999,58001-58002,58072,58080,58107,58109,58164,58252,58305,58310,58374,58430,58446,58456,58468,58498,58562,58570,58610,58622,58630,58632,58634,58699,58721,58838,58908,58970,58991,59087,59107,59110,59122,59149,59160,59191,59200-59202,59239,59340,59499,59504,59509-59510,59525,59565,59684,59778,59810,59829,59841,59987,60000,60002-60003,60020,60055,60086,60111,60123,60146,60177,60227,60243,60279,60377,60401,60403,60443,60485,60492,60504,60544,60579,60612,60621,60628,60642,60713,60728,60743,60753,60782-60783,60789,60794,60989,61159,61169-61170,61402,61473,61516,61532,61613,61616-61617,61669,61722,61734,61827,61851,61900,61942,62006,62042,62078,62080,62188,62312,62519,62570,62674,62866,63105,63156,63331,63423,63675,63803,64080,64127,64320,64438,64507,64551,64623,64680,64726-64727,64890,65000,65048,65129,65301,65310-65311,65389,65488,65514"
tcpPortsList = str.ParseStringToPorts(tcpPorts)

if len(tcpPortsList) >= 65535 {
    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"
    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")
} else {
    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")
}

yakit.SetProgress(baseProgress + 0.02)
sleep(1)
var synscanEnable = false
try {
    yakit.Info("检测 SYN 扫描是否可用中")
    yakit.SetProgress(baseProgress+ 0.02)
    baseProgress += 0.05
    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }


    synscanEnable = true
    yakit.StatusCard("SYN 扫描", "可用")
} catch err {
    yakit.Error("SYN 扫描不可用，原因是：%v", err)
    if str.Contains(sprintf("%v", err), "couldn't load wpcap.dll") {
        yakit.StatusCard("SYN失败", "请安装Npcap", "SYN扫描失败")
    }

}


/*
    插件处理模块
*/
yakit.Info("开始创建插件调用模块")
scriptNames = x.If(
    scriptNameFile != "",
    x.Filter(
        x.Map(
            str.ParseStringToLines(string(file.ReadFile(scriptNameFile)[0])),
            func(e) { return str.TrimSpace(e) },
        ),
        func(e) { return e != "" },
    ),
    make([]string),
)

pluginsL = len(scriptNames)

yakit.StatusCard("加载插件", f"0/${pluginsL}")

manager, err := hook.NewMixPluginCaller()

if err != nil {
    updateStatus("创建插件调用模块失败")
    die(err)
}

manager.SetConcurrent(20)
manager.SetDividedContext(true)

loadPluginFailed = 0
loadPluginFinished = 0

x.Foreach(
    scriptNames,
    func(name) {
        err = manager.LoadPlugin(name)
        if err != nil {
            loadPluginFailed++
            yakit.Error("Load Plugin Failed: %s", err)
            return
        }


        loadPluginFinished++
        yakit.Info("Load Plugin Success: %s", name)
        return
    },
)
onlyBrute = false
if loadPluginFinished > 0 || loadPluginFailed > 0 {
    yakit.StatusCard(
        "加载插件",
        f"${loadPluginFinished}/${loadPluginFailed+loadPluginFinished}",
    )
} else if enableBrute {
    onlyBrute = true
    yakit.StatusCard("加载插件", "弱口令检测")
}


yakit.Info("扫描参数设置完成，准备扫描~")

pingOpt = []

if proxies != "" {
    proxyList = str.Split(proxies, ",")
    pingOpt = append(pingOpt, ping.proxy(proxyList...))
}


if skippedHostAliveScan {
    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScan))
}


if hostAliveTimeout > 0 {
    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))
}


if hostAliveConcurrent > 0 {
    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))
}


if len(hostAliveTCPPorts) > 0 {
    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))
}


if excludeHosts != "" {
    pingOpt = append(pingOpt, ping.excludeHosts(excludeHosts))
}

HostAliveFile = ""
aliveHostCount = 0
if !skippedHostAliveScan && recordPtr == 0 {
    yakit.Info("开始探测存活~")
    hostRaw, _ = file.ReadFile(targetFiles)
    hosts = str.ReplaceAll(string(hostRaw), "\n", ",")

    ScanHostCount = 0
    showAliveHostCount = func() {
        yakit.StatusCard("存活主机数/扫描主机数", f"${aliveHostCount}/${ScanHostCount}")
    }
    aliveHostStr = ""
    // os.RemoveAll(targetFiles)~
    for res := range ping.Scan(hosts, pingOpt...) {
        if res.Ok {
            aliveHostCount++
            yakit.Info("ping onResult: %v", res)
            aliveHostStr += res.IP + "\n"
            db.NewAliveHost(res.IP)
        }

        ScanHostCount++
        showAliveHostCount()
    }

    hostCount = ScanHostCount
    yakit.StatusCard("Ping存活主机数", aliveHostCount)
    aliveHostStr = str.Trim(aliveHostStr, "\n")

    HostAliveFile = file.Join(yakit.GetHomeTempDir(), runtimeID)
    file.Save(HostAliveFile, aliveHostStr)~
    if len(aliveHostStr) == 0 {
        yakit.Error("没有存活主机")
        //die("没有存活主机")
    }

} else {
    yakit.Info("跳过存活探测~")
}

if recordPtr > 0 && !skippedHostAliveScan {
    HostAliveFile = recordFile
}

var files = make([]string)

inputFiles = []

if !skippedHostAliveScan {
    inputFiles = str.SplitAndTrim(HostAliveFile, ",")
} else {
    inputFiles = str.SplitAndTrim(targetFiles, ",")
}
files.Push(inputFiles...)

hostTotal = hostCount
portTotal = len(str.RemoveDuplicatePorts(tcpPorts, synPorts))
// 需要传递给报告的参数
yakit.StatusCard("扫描主机数", hostTotal)
yakit.StatusCard("扫描端口数", portTotal)
yakit.StatusCard("开放端口数/已扫主机数", "-/-")

totalTasks = hostTotal * portTotal
portResultFinalTotal = 0
progressLock = sync.NewLock()
updateProgress = func(delta) {
    if totalTasks <= 0 {
        return
    }

    progressLock.Lock()
    defer progressLock.Unlock()


    portResultFinalTotal = portResultFinalTotal + delta
    if portResultFinalTotal > totalTasks {
        portResultFinalTotal = totalTasks
    }
    yakit.Info(
        "Curr Progress %v",
        sprintf(
            "%v/%v/%.3f",
            portResultFinalTotal,
            totalTasks,
            0.1 + (float(portResultFinalTotal) / float(totalTasks)) * 0.9,
        ),
    )
    yakit.SetProgress((baseProgress + ((1 - baseProgress) * (float(portResultFinalTotal) / float(totalTasks))))-0.01)

}

bruteWg = sync.NewSizedWaitGroup(10)

bruteScan = func(result) {
    go func {
        defer bruteWg.Done()
        bruteType = ""
        if result.GetServiceName() == "exasoftport1" {
            return
        }
        for _, bt := range brute.GetAvailableBruteTypes() {
            if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {
                bruteType = bt
                break
            }

        }

        if bruteType == "" {
            return
        }

        defaultusers = []
        defaultpass = []

        if bruteType == "ftp" {
            defaultusers = ["ftp", "www", "anonymous", "admin"]
            defaultpass = ["admin", "admin123", "123456"]
        } else if bruteType == "memcached" {
            defaultusers = ["root", "admin"]
            defaultpass = ["root", "123456"]
        } else if bruteType == "mongodb" {
            defaultusers = ["root", "admin", "mongodb"]
            defaultpass = ["root", "admin123", "root@123", "123456"]
        } else if bruteType == "mssql" {
            defaultusers = ["root", "admin", "mssql"]
            defaultpass = ["root", "admin123", "root@123", "admin", "123456"]
        } else if bruteType == "mysql" {
            defaultusers = ["mysql", "root", "admin"]
            defaultpass = ["root", "123456", "admin123", "admin", "root@123"]
        } else if bruteType == "postgres" {
            defaultusers = ["postgres", "root", "admin"]
            defaultpass = ["root", "admin", "123456"]
        } else if bruteType == "rdp" {
            defaultusers = ["admin", "administrator", "root", "guest"]
            defaultpass = ["administrator", "guest", "admin", "123456"]
        } else if bruteType == "redis" {
            defaultusers = ["redis"]
            defaultpass = ["redis", "123456"]
        } else if bruteType == "smb" {
            defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]
            defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]
        } else if bruteType == "snmp" {
            defaultusers = ["snmp"]
            defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]
        } else if bruteType == "ssh" {
            defaultusers = ["root", "admin"]
            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]
        } else if bruteType == "telnet" {
            defaultusers = ["root", "admin"]
            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]
        } else if bruteType == "tomcat" {
            defaultusers = ["manager", "tomcat"]
            defaultpass = ["tomcat", "manager"]
        } else if bruteType == "vnc" {
            defaultusers = ["vnc"]
            defaultpass = ["123456", "admin", "root"]
        } else if bruteType == "oracle" {
            defaultusers = ["sys", "system", "oracle"]
            defaultpass = ["sys", "system", "oracle","123456",""]
        } else if bruteType == "rtsp" {
            defaultusers = ["admin"]
            defaultpass = ["12345","123456",""]
        }


        uL = make([]string)
        pL = make([]string)

        if (replaceDefaultUsernameDict) {
            uL = append(uL, defaultusers...)
        }


        if (replaceDefaultPasswordDict) {
            pL = append(pL, defaultpass...)
        }

        bruteTasks := len(uL) * len(pL) // 计算爆破任务数量
        totalTasks += bruteTasks // 将爆破任务数量添加到总任务数中


        addr := str.HostPort(result.Target, result.Port)
        yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)

        instance, err := brute.New(
            string(bruteType),
            brute.userList(append(userdefinedUsernameList, uL...)...),
            brute.passList(append(userdefinedPasswordList, pL...)...),
            brute.debug(true),
            brute.okToStop(okToStop),
            bruteOpt...,
        )
        if err != nil {
            yakit.Error(
                "构建弱口令与未授权扫描失败：%v",
                err,
            )
            return
        }


        res, err := instance.Start(addr)
        if err != nil {
            yakit.Error("输入目标失败：%v", err)
            return
        }


        riskTarget = addr
        for rt := range res {
            yakit.Info("rt string %v ", rt.String())
            updateProgress(1) // 更新进度
            if rt == nil {
                continue
            }

            if !rt.Ok {
                continue
            }
            if rt.Username == "" && rt.Password == "" {
                risk.NewRisk(
                    riskTarget, risk.severity("high"), risk.type("weak-pass"),
                    risk.typeVerbose("未授权访问"),
                    risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)),
                    risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)),
                    risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"),
                    risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。
2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。
3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`),
                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}),
                )
            } else {
                risk.NewRisk(
                    riskTarget,risk.severity("high"),risk.type("weak-pass"),
                    risk.typeVerbose("弱口令"),
                    risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"),
                    risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"),
                    risk.title(sprintf(
                        "Weak Password[%v]：%v user(%v) pass(%v)",
                        rt.Type,
                        rt.Target,
                        rt.Username,
                        rt.Password,
                    )),
                    risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, rt.Password)),
                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}),
                )
            }
        }
    }
}

handleServiceScanResult = func(result) {
    if !onlyBrute {
        manager.HandleServiceScanResult(result)
    }

    if enableBrute  && len(result.GetServiceName()) != 0 {
        serviceName = result.GetServiceName()
        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)
        bruteScan(result)
        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)

    }

}

/*
    端口扫描部分分为两大块儿
    1. 重点端口 TCP 扫描
    2. 同步非重点端口 SYN 扫描
*/

ScanHostCount = 0
aliveHostCountList = []
scanHostLock = sync.NewLock()

addScanHostCount = func() {
    scanHostLock.Lock()
    defer scanHostLock.Unlock()

    ScanHostCount++
}

OpenPortCount = 0
openPortCountLock = sync.NewLock()
addOpenPortCount = func() {
    openPortCountLock.Lock()
    defer openPortCountLock.Unlock()
    OpenPortCount++
    yakit.StatusCard("开放端口数/已扫主机数", f"${OpenPortCount}/${ScanHostCount}")
    if skippedHostAliveScan {
        aliveHostCount := len(aliveHostCountList)
        yakit.StatusCard("存活主机数/扫描主机数", f"${aliveHostCount}/${ScanHostCount}")
    }

}

/* 进行 TCP 扫描*/

func handleTCP(target) {
    try {
        for result in servicescan.Scan(target, tcpPorts, tcpOps...)~ {
            if !result.IsOpen() {
                continue
            }

            if result.Target not in aliveHostCountList {
                aliveHostCountList = append(aliveHostCountList, result.Target)
            }

            yakit.Info("GOT: %v", result.String())
            yakit.Output({"host": "TCP-" + result.Target, "port": result.Port, "fingerprint": result.GetServiceName(), "htmlTitle": "" + result.GetHtmlTitle(), "isOpen": true})
            yakit.SavePortFromResult(result)
            addOpenPortCount()
            handleServiceScanResult(result)
        }

    } catch err {
        yakit.Error("处理 TCP 指纹识别失败: %v", err)
    }finally{
        p = 1 * len(str.ParseStringToPorts(str.Trim(tcpPorts, ",")))
        updateProgress(p)
    }
}

synWg = sync.NewSizedWaitGroup(2)

func handleSYN(target) {
    synWg.Add()
    go func(ctarget) {
        defer synWg.Done()

        try {
            for result in servicescan.ScanFromSynResult(
                synscan.Scan(ctarget, synPorts, synscan.initPortFilter(synPorts), synscan.initHostFilter(ctarget),
                             synscan.excludePorts(tcpPorts), synscan.concurrent(synConcurrent))~,
                tcpOps...,
            )~ {
                if !result.IsOpen() {
                    continue
                }

                if result.Target not in aliveHostCountList {
                    aliveHostCountList = append(aliveHostCountList, result.Target)
                }

                yakit.Info("SYNGOT: %v", result.String())
                yakit.Output({"host": "SYN-" + result.Target, "port": result.Port, "fingerprint": result.GetServiceName(), "htmlTitle": "" + result.GetHtmlTitle(), "isOpen": true})
                yakit.SavePortFromResult(result)

                addOpenPortCount()
                handleServiceScanResult(result)
            }

        } catch err {
            yakit.Error("SYN 处理 TCP 指纹识别失败: %v", err)
        }finally{
            p = 1 * len(str.ParseStringToPorts(str.Trim(synPorts, ",")))
            updateProgress(p)
        }
    }(target)
}

swg = sync.NewSizedWaitGroup(20)

fileReader, err = file.NewMultiFileLineReader(files...)
if err != nil {
    yakit.Error("无法创建文件读取管理器：%v", err)
    die(err)
}


if recordPtr > 0 {
    yakit.Info("恢复文件指针到 %d", recordPtr)
    err = fileReader.SetRecoverPtr(targetFiles, recordPtr)
    if err != nil {
        yakit.Error("恢复文件指针失败：%v", err)
        die(err)
    }

}


for fileReader.Next(){
    var currentTarget = fileReader.Text()
    yakit.StatusCard("当前文件指针", fileReader.GetLastRecordPtr())
    swg.Add()
    go func {
        defer swg.Done()

        addScanHostCount()
        wg = sync.NewWaitGroup()
        wg.Add(1)
        go func {
            defer wg.Done()


            handleTCP(currentTarget)
        }

        if synscanEnable {
            wg.Add(1)
            go func {
                defer wg.Done()

                handleSYN(currentTarget)
            }
        }

        wg.Wait()
    }
}

synWg.Wait()
swg.Wait()
yakit.SetProgress(0.94)

go fn {
    yakit.Info("Start Vuln Check...")
    for {
        yakit.Info("漏洞检测中...")
        sleep(3)
        yakit.Info("漏洞检测中.....")
        sleep(3)
        yakit.Info("漏洞检测中........")
        sleep(3)
    }
}

hostCountSec = 0
if aliveHostCount != 0  {
    hostCountSec = aliveHostCount
}else {
    hostCountSec = len(aliveHostCountList)
}

if hostCountSec != 0 {
    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数
    // 定时器，超过一定时间，就扫描结束
    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount
    yakit.Info("waitTimeSec %v", waitTimeSec)
    if waitTimeSec < 10 {
        waitTimeSec = 60
    }
    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {
        yakit.SetProgress(1)
        yakit.Info("AfterFunc 本次扫描任务已完成。")
        os.Exit(0)
    })
}

bruteWg.Wait()
yakit.Info("brute end success!")
manager.Wait()
yakit.SetProgress(1)
yakit.Info("本次扫描任务已完成。")