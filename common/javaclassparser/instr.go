package javaclassparser

type Instr struct {
	name   string
	op     byte
	length int
}

var allInstr map[byte]*Instr = map[byte]*Instr{}

func regInstr(name string, op byte, length int) {
	allInstr[op] = &Instr{name: name, op: op, length: length}
}
func init() {
	regInstr("aaload", 0x32, 0)
	regInstr("aastore", 0x53, 0)
	regInstr("aconst_null", 0x01, 0)
	regInstr("aload", 0x19, 1)
	//regInstr("aload_wide", -1, 3)
	regInstr("aload_0", 0x2a, 0)
	regInstr("aload_1", 0x2b, 0)
	regInstr("aload_2", 0x2c, 0)
	regInstr("aload_3", 0x2d, 0)
	regInstr("anewarray", 0xbd, 2)
	regInstr("areturn", 0xb0, 0)
	regInstr("arraylength", 0xbe, 0)
	regInstr("astore", 0x3a, 1)
	//regInstr("astore_wide", -1, 3)
	regInstr("astore_0", 0x4b, 0)
	regInstr("astore_1", 0x4c, 0)
	regInstr("astore_2", 0x4d, 0)
	regInstr("astore_3", 0x4e, 0)
	regInstr("athrow", 0xbf, 0)
	regInstr("baload", 0x33, 0)
	regInstr("bastore", 0x54, 0)
	regInstr("bipush", 0x10, 1)
	regInstr("caload", 0x34, 0)
	regInstr("castore", 0x55, 0)
	regInstr("checkcast", 0xc0, 2)
	regInstr("d2f", 0x90, 0)
	regInstr("d2i", 0x8e, 0)
	regInstr("d2l", 0x8f, 0)
	regInstr("dadd", 0x63, 0)
	regInstr("daload", 0x31, 0)
	regInstr("dastore", 0x52, 0)
	regInstr("dcmpg", 0x98, 0)
	regInstr("dcmpl", 0x97, 0)
	regInstr("dconst_0", 0xe, 0)
	regInstr("dconst_1", 0xf, 0)
	regInstr("ddiv", 0x6f, 0)
	regInstr("dload", 0x18, 1)
	//regInstr("dload_wide", -1, 3)
	regInstr("dload_0", 0x26, 0)
	regInstr("dload_1", 0x27, 0)
	regInstr("dload_2", 0x28, 0)
	regInstr("dload_3", 0x29, 0)
	regInstr("dmul", 0x6b, 0)
	regInstr("dneg", 0x77, 0)
	regInstr("drem", 0x73, 0)
	regInstr("dreturn", 0xaf, 0)
	regInstr("dstore", 0x39, 1)
	//regInstr("dstore_wide", -1, 3)
	regInstr("dstore_0", 0x47, 0)
	regInstr("dstore_1", 0x48, 0)
	regInstr("dstore_2", 0x49, 0)
	regInstr("dstore_3", 0x4a, 0)
	regInstr("dsub", 0x67, 0)
	regInstr("dup", 0x59, 0)
	regInstr("dup_x1", 0x5a, 0)
	regInstr("dup_x2", 0x5b, 0)
	regInstr("dup2", 0x5c, 0)
	regInstr("dup2_x1", 0x5d, 0)
	regInstr("dup2_x2", 0x5e, 0)
	regInstr("f2d", 0x8d, 0)
	regInstr("f2i", 0x8b, 0)
	regInstr("f2l", 0x8c, 0)
	regInstr("fadd", 0x62, 0)
	regInstr("faload", 0x30, 0)
	regInstr("fastore", 0x51, 0)
	regInstr("fcmpg", 0x96, 0)
	regInstr("fcmpl", 0x95, 0)
	regInstr("fconst_0", 0xb, 0)
	regInstr("fconst_1", 0xc, 0)
	regInstr("fconst_2", 0xd, 0)
	regInstr("fdiv", 0x6e, 0)
	regInstr("fload", 0x17, 1)
	//regInstr("fload_wide", -1, 3)
	regInstr("fload_0", 0x22, 0)
	regInstr("fload_1", 0x23, 0)
	regInstr("fload_2", 0x24, 0)
	regInstr("fload_3", 0x25, 0)
	regInstr("fmul", 0x6a, 0)
	regInstr("fneg", 0x76, 0)
	regInstr("frem", 0x72, 0)
	regInstr("freturn", 0xae, 0)
	regInstr("fstore", 0x38, 1)
	//regInstr("fstore_wide", -1, 3)
	regInstr("fstore_0", 0x43, 0)
	regInstr("fstore_1", 0x44, 0)
	regInstr("fstore_2", 0x45, 0)
	regInstr("fstore_3", 0x46, 0)
	regInstr("fsub", 0x66, 0)
	regInstr("getfield", 0xb4, 2)
	regInstr("getstatic", 0xb2, 2)
	regInstr("goto", 0xa7, 2)
	regInstr("goto_w", 0xc8, 4)
	regInstr("i2b", 0x91, 0)
	regInstr("i2c", 0x92, 0)
	regInstr("i2d", 0x87, 0)
	regInstr("i2f", 0x86, 0)
	regInstr("i2l", 0x85, 0)
	regInstr("i2s", 0x93, 0)
	regInstr("iadd", 0x60, 0)
	regInstr("iaload", 0x2E, 0)
	regInstr("iand", 0x7E, 0)
	regInstr("iastore", 0x4F, 0)
	regInstr("iconst_m1", 0x2, 0)
	regInstr("iconst_0", 0x3, 0)
	regInstr("iconst_1", 0x4, 0)
	regInstr("iconst_2", 0x5, 0)
	regInstr("iconst_3", 0x6, 0)
	regInstr("iconst_4", 0x7, 0)
	regInstr("iconst_5", 0x8, 0)
	regInstr("idiv", 0x6c, 0)
	regInstr("if_acmpeq", 0xa5, 2)
	regInstr("if_acmpne", 0xa6, 2)
	regInstr("if_icmpeq", 0x9f, 2)
	regInstr("if_icmpne", 0xa0, 2)
	regInstr("if_icmplt", 0xa1, 2)
	regInstr("if_icmpge", 0xa2, 2)
	regInstr("if_icmpgt", 0xa3, 2)
	regInstr("if_icmple", 0xa4, 2)
	regInstr("ifeq", 0x99, 2)
	regInstr("ifne", 0x9a, 2)
	regInstr("iflt", 0x9b, 2)
	regInstr("ifge", 0x9c, 2)
	regInstr("ifgt", 0x9d, 2)
	regInstr("ifle", 0x9e, 2)
	regInstr("ifnonnull", 0xc7, 2)
	regInstr("ifnull", 0xc6, 2)
	regInstr("iinc", 0x84, 2)
	//regInstr("iinc_wide", -1, 5)
	regInstr("iload", 0x15, 1)
	//regInstr("iload_wide", -1, 3)
	regInstr("iload_0", 0x1a, 0)
	regInstr("iload_1", 0x1b, 0)
	regInstr("iload_2", 0x1c, 0)
	regInstr("iload_3", 0x1d, 0)
	regInstr("imul", 0x68, 0)
	regInstr("ineg", 0x74, 0)
	regInstr("instanceof", 0xc1, 2)
	regInstr("invokedynamic", 0xba, 4)
	regInstr("invokeinterface", 0xb9, 4)
	regInstr("invokespecial", 0xb7, 2)
	regInstr("invokestatic", 0xb8, 2)
	regInstr("invokevirtual", 0xb6, 2)
	regInstr("ior", 0x80, 0)
	regInstr("irem", 0x70, 0)
	regInstr("ireturn", 0xac, 0)
	regInstr("ishl", 0x78, 0)
	regInstr("ishr", 0x7a, 0)
	regInstr("istore", 0x36, 1)
	//regInstr("istore_wide", -1, 3)
	regInstr("istore_0", 0x3b, 0)
	regInstr("istore_1", 0x3c, 0)
	regInstr("istore_2", 0x3d, 0)
	regInstr("istore_3", 0x3e, 0)
	regInstr("isub", 0x64, 0)
	regInstr("iushr", 0x7c, 0)
	regInstr("ixor", 0x82, 0)
	regInstr("jsr", 0xa8, 2)
	regInstr("jsr_w", 0xc9, 4)
	regInstr("l2d", 0x8a, 0)
	regInstr("l2f", 0x89, 0)
	regInstr("l2i", 0x88, 0)
	regInstr("ladd", 0x61, 0)
	regInstr("laload", 0x2f, 0)
	regInstr("land", 0x7f, 0)
	regInstr("lastore", 0x50, 0)
	regInstr("lcmp", 0x94, 0)
	regInstr("lconst_0", 0x9, 0)
	regInstr("lconst_1", 0xa, 0)
	regInstr("ldc", 0x12, 1)
	regInstr("ldc_w", 0x13, 2)
	regInstr("ldc2_w", 0x14, 2)
	regInstr("ldiv", 0x6d, 0)
	regInstr("lload", 0x16, 1)
	//regInstr("lload_wide", -1, 3)
	regInstr("lload_0", 0x1e, 0)
	regInstr("lload_1", 0x1f, 0)
	regInstr("lload_2", 0x20, 0)
	regInstr("lload_3", 0x21, 0)
	regInstr("lmul", 0x69, 0)
	regInstr("lneg", 0x75, 0)
	regInstr("lookupswitch", 0xab, -1)
	regInstr("lor", 0x81, 0)
	regInstr("lrem", 0x71, 0)
	regInstr("lreturn", 0xad, 0)
	regInstr("lshl", 0x79, 0)
	regInstr("lshr", 0x7b, 0)
	regInstr("lstore", 0x37, 1)
	//regInstr("lstore_wide", -1, 3)
	regInstr("lstore_0", 0x3f, 0)
	regInstr("lstore_1", 0x40, 0)
	regInstr("lstore_2", 0x41, 0)
	regInstr("lstore_3", 0x42, 0)
	regInstr("lsub", 0x65, 0)
	regInstr("lushr", 0x7d, 0)
	regInstr("lxor", 0x83, 0)
	regInstr("monitorenter", 0xc2, 0)
	regInstr("monitorexit", 0xc3, 0)
	regInstr("multianewarray", 0xc5, 3)
	regInstr("new", 0xbb, 2)
	regInstr("newarray", 0xbc, 1)
	regInstr("nop", 0x0, 0)
	regInstr("pop", 0x57, 0)
	regInstr("pop2", 0x58, 0)
	regInstr("putfield", 0xb5, 2)
	regInstr("putstatic", 0xb3, 2)
	regInstr("ret", 0xa9, 1)
	//regInstr("ret_wide", -1, 3)
	regInstr("return", 0xb1, 0)
	regInstr("saload", 0x35, 0)
	regInstr("sastore", 0x56, 0)
	regInstr("sipush", 0x11, 2)
	regInstr("swap", 0x5f, 0)
	regInstr("tableswitch", 0xaa, -1)
	regInstr("wide", 0xc4, -1)
	//regInstr("fake_try", -1, 0)
	//regInstr("fake_catch", -1, 0)
}
