// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: tunnel.proto

package tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tunnel_RemoteIP_FullMethodName                           = "/tpb.Tunnel/RemoteIP"
	Tunnel_CreateTunnel_FullMethodName                       = "/tpb.Tunnel/CreateTunnel"
	Tunnel_RegisterTunnel_FullMethodName                     = "/tpb.Tunnel/RegisterTunnel"
	Tunnel_GetAllRegisteredTunnel_FullMethodName             = "/tpb.Tunnel/GetAllRegisteredTunnel"
	Tunnel_GetRegisteredTunnelDescriptionByID_FullMethodName = "/tpb.Tunnel/GetRegisteredTunnelDescriptionByID"
	Tunnel_RequireRandomPortTrigger_FullMethodName           = "/tpb.Tunnel/RequireRandomPortTrigger"
	Tunnel_QueryExistedRandomPortTrigger_FullMethodName      = "/tpb.Tunnel/QueryExistedRandomPortTrigger"
	Tunnel_QuerySpecificICMPLengthTrigger_FullMethodName     = "/tpb.Tunnel/QuerySpecificICMPLengthTrigger"
	Tunnel_RequireHTTPRequestTrigger_FullMethodName          = "/tpb.Tunnel/RequireHTTPRequestTrigger"
	Tunnel_QueryExistedHTTPRequestTrigger_FullMethodName     = "/tpb.Tunnel/QueryExistedHTTPRequestTrigger"
	Tunnel_CheckServerReachable_FullMethodName               = "/tpb.Tunnel/CheckServerReachable"
)

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClient interface {
	RemoteIP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RemoteIPResponse, error)
	CreateTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TunnelInput, TunnelOutput], error)
	// 注册一个隧道
	RegisterTunnel(ctx context.Context, in *RegisterTunnelRequest, opts ...grpc.CallOption) (*RegisterTunnelResponse, error)
	// 获取所有隧道的简要描述信息
	GetAllRegisteredTunnel(ctx context.Context, in *GetAllRegisteredTunnelRequest, opts ...grpc.CallOption) (*GetAllRegisteredTunnelResponse, error)
	GetRegisteredTunnelDescriptionByID(ctx context.Context, in *GetRegisteredTunnelDescriptionByIDRequest, opts ...grpc.CallOption) (*RegisteredTunnel, error)
	// 随机端口触发器
	RequireRandomPortTrigger(ctx context.Context, in *RequireRandomPortTriggerParams, opts ...grpc.CallOption) (*RequireRandomPortTriggerResponse, error)
	QueryExistedRandomPortTrigger(ctx context.Context, in *QueryExistedRandomPortTriggerRequest, opts ...grpc.CallOption) (*QueryExistedRandomPortTriggerResponse, error)
	// 随机 ICMP 长度触发器
	QuerySpecificICMPLengthTrigger(ctx context.Context, in *QuerySpecificICMPLengthTriggerParams, opts ...grpc.CallOption) (*QuerySpecificICMPLengthTriggerResponse, error)
	RequireHTTPRequestTrigger(ctx context.Context, in *RequireHTTPRequestTriggerParams, opts ...grpc.CallOption) (*RequireHTTPRequestTriggerResponse, error)
	QueryExistedHTTPRequestTrigger(ctx context.Context, in *QueryExistedHTTPRequestTriggerRequest, opts ...grpc.CallOption) (*QueryExistedHTTPRequestTriggerResponse, error)
	CheckServerReachable(ctx context.Context, in *CheckServerReachableRequest, opts ...grpc.CallOption) (*CheckServerReachableResponse, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) RemoteIP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RemoteIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteIPResponse)
	err := c.cc.Invoke(ctx, Tunnel_RemoteIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TunnelInput, TunnelOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[0], Tunnel_CreateTunnel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TunnelInput, TunnelOutput]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tunnel_CreateTunnelClient = grpc.BidiStreamingClient[TunnelInput, TunnelOutput]

func (c *tunnelClient) RegisterTunnel(ctx context.Context, in *RegisterTunnelRequest, opts ...grpc.CallOption) (*RegisterTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTunnelResponse)
	err := c.cc.Invoke(ctx, Tunnel_RegisterTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetAllRegisteredTunnel(ctx context.Context, in *GetAllRegisteredTunnelRequest, opts ...grpc.CallOption) (*GetAllRegisteredTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRegisteredTunnelResponse)
	err := c.cc.Invoke(ctx, Tunnel_GetAllRegisteredTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetRegisteredTunnelDescriptionByID(ctx context.Context, in *GetRegisteredTunnelDescriptionByIDRequest, opts ...grpc.CallOption) (*RegisteredTunnel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisteredTunnel)
	err := c.cc.Invoke(ctx, Tunnel_GetRegisteredTunnelDescriptionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RequireRandomPortTrigger(ctx context.Context, in *RequireRandomPortTriggerParams, opts ...grpc.CallOption) (*RequireRandomPortTriggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequireRandomPortTriggerResponse)
	err := c.cc.Invoke(ctx, Tunnel_RequireRandomPortTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) QueryExistedRandomPortTrigger(ctx context.Context, in *QueryExistedRandomPortTriggerRequest, opts ...grpc.CallOption) (*QueryExistedRandomPortTriggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExistedRandomPortTriggerResponse)
	err := c.cc.Invoke(ctx, Tunnel_QueryExistedRandomPortTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) QuerySpecificICMPLengthTrigger(ctx context.Context, in *QuerySpecificICMPLengthTriggerParams, opts ...grpc.CallOption) (*QuerySpecificICMPLengthTriggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySpecificICMPLengthTriggerResponse)
	err := c.cc.Invoke(ctx, Tunnel_QuerySpecificICMPLengthTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RequireHTTPRequestTrigger(ctx context.Context, in *RequireHTTPRequestTriggerParams, opts ...grpc.CallOption) (*RequireHTTPRequestTriggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequireHTTPRequestTriggerResponse)
	err := c.cc.Invoke(ctx, Tunnel_RequireHTTPRequestTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) QueryExistedHTTPRequestTrigger(ctx context.Context, in *QueryExistedHTTPRequestTriggerRequest, opts ...grpc.CallOption) (*QueryExistedHTTPRequestTriggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExistedHTTPRequestTriggerResponse)
	err := c.cc.Invoke(ctx, Tunnel_QueryExistedHTTPRequestTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CheckServerReachable(ctx context.Context, in *CheckServerReachableRequest, opts ...grpc.CallOption) (*CheckServerReachableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckServerReachableResponse)
	err := c.cc.Invoke(ctx, Tunnel_CheckServerReachable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServer is the server API for Tunnel service.
// All implementations must embed UnimplementedTunnelServer
// for forward compatibility.
type TunnelServer interface {
	RemoteIP(context.Context, *Empty) (*RemoteIPResponse, error)
	CreateTunnel(grpc.BidiStreamingServer[TunnelInput, TunnelOutput]) error
	// 注册一个隧道
	RegisterTunnel(context.Context, *RegisterTunnelRequest) (*RegisterTunnelResponse, error)
	// 获取所有隧道的简要描述信息
	GetAllRegisteredTunnel(context.Context, *GetAllRegisteredTunnelRequest) (*GetAllRegisteredTunnelResponse, error)
	GetRegisteredTunnelDescriptionByID(context.Context, *GetRegisteredTunnelDescriptionByIDRequest) (*RegisteredTunnel, error)
	// 随机端口触发器
	RequireRandomPortTrigger(context.Context, *RequireRandomPortTriggerParams) (*RequireRandomPortTriggerResponse, error)
	QueryExistedRandomPortTrigger(context.Context, *QueryExistedRandomPortTriggerRequest) (*QueryExistedRandomPortTriggerResponse, error)
	// 随机 ICMP 长度触发器
	QuerySpecificICMPLengthTrigger(context.Context, *QuerySpecificICMPLengthTriggerParams) (*QuerySpecificICMPLengthTriggerResponse, error)
	RequireHTTPRequestTrigger(context.Context, *RequireHTTPRequestTriggerParams) (*RequireHTTPRequestTriggerResponse, error)
	QueryExistedHTTPRequestTrigger(context.Context, *QueryExistedHTTPRequestTriggerRequest) (*QueryExistedHTTPRequestTriggerResponse, error)
	CheckServerReachable(context.Context, *CheckServerReachableRequest) (*CheckServerReachableResponse, error)
	mustEmbedUnimplementedTunnelServer()
}

// UnimplementedTunnelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelServer struct{}

func (UnimplementedTunnelServer) RemoteIP(context.Context, *Empty) (*RemoteIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteIP not implemented")
}
func (UnimplementedTunnelServer) CreateTunnel(grpc.BidiStreamingServer[TunnelInput, TunnelOutput]) error {
	return status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedTunnelServer) RegisterTunnel(context.Context, *RegisterTunnelRequest) (*RegisterTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTunnel not implemented")
}
func (UnimplementedTunnelServer) GetAllRegisteredTunnel(context.Context, *GetAllRegisteredTunnelRequest) (*GetAllRegisteredTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRegisteredTunnel not implemented")
}
func (UnimplementedTunnelServer) GetRegisteredTunnelDescriptionByID(context.Context, *GetRegisteredTunnelDescriptionByIDRequest) (*RegisteredTunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredTunnelDescriptionByID not implemented")
}
func (UnimplementedTunnelServer) RequireRandomPortTrigger(context.Context, *RequireRandomPortTriggerParams) (*RequireRandomPortTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireRandomPortTrigger not implemented")
}
func (UnimplementedTunnelServer) QueryExistedRandomPortTrigger(context.Context, *QueryExistedRandomPortTriggerRequest) (*QueryExistedRandomPortTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExistedRandomPortTrigger not implemented")
}
func (UnimplementedTunnelServer) QuerySpecificICMPLengthTrigger(context.Context, *QuerySpecificICMPLengthTriggerParams) (*QuerySpecificICMPLengthTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySpecificICMPLengthTrigger not implemented")
}
func (UnimplementedTunnelServer) RequireHTTPRequestTrigger(context.Context, *RequireHTTPRequestTriggerParams) (*RequireHTTPRequestTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireHTTPRequestTrigger not implemented")
}
func (UnimplementedTunnelServer) QueryExistedHTTPRequestTrigger(context.Context, *QueryExistedHTTPRequestTriggerRequest) (*QueryExistedHTTPRequestTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExistedHTTPRequestTrigger not implemented")
}
func (UnimplementedTunnelServer) CheckServerReachable(context.Context, *CheckServerReachableRequest) (*CheckServerReachableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckServerReachable not implemented")
}
func (UnimplementedTunnelServer) mustEmbedUnimplementedTunnelServer() {}
func (UnimplementedTunnelServer) testEmbeddedByValue()                {}

// UnsafeTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServer will
// result in compilation errors.
type UnsafeTunnelServer interface {
	mustEmbedUnimplementedTunnelServer()
}

func RegisterTunnelServer(s grpc.ServiceRegistrar, srv TunnelServer) {
	// If the following call pancis, it indicates UnimplementedTunnelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tunnel_ServiceDesc, srv)
}

func _Tunnel_RemoteIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoteIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_RemoteIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoteIP(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).CreateTunnel(&grpc.GenericServerStream[TunnelInput, TunnelOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tunnel_CreateTunnelServer = grpc.BidiStreamingServer[TunnelInput, TunnelOutput]

func _Tunnel_RegisterTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RegisterTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_RegisterTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RegisterTunnel(ctx, req.(*RegisterTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetAllRegisteredTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRegisteredTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetAllRegisteredTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GetAllRegisteredTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetAllRegisteredTunnel(ctx, req.(*GetAllRegisteredTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetRegisteredTunnelDescriptionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredTunnelDescriptionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetRegisteredTunnelDescriptionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GetRegisteredTunnelDescriptionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetRegisteredTunnelDescriptionByID(ctx, req.(*GetRegisteredTunnelDescriptionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RequireRandomPortTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequireRandomPortTriggerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RequireRandomPortTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_RequireRandomPortTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RequireRandomPortTrigger(ctx, req.(*RequireRandomPortTriggerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_QueryExistedRandomPortTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExistedRandomPortTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).QueryExistedRandomPortTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_QueryExistedRandomPortTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).QueryExistedRandomPortTrigger(ctx, req.(*QueryExistedRandomPortTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_QuerySpecificICMPLengthTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpecificICMPLengthTriggerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).QuerySpecificICMPLengthTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_QuerySpecificICMPLengthTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).QuerySpecificICMPLengthTrigger(ctx, req.(*QuerySpecificICMPLengthTriggerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RequireHTTPRequestTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequireHTTPRequestTriggerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RequireHTTPRequestTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_RequireHTTPRequestTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RequireHTTPRequestTrigger(ctx, req.(*RequireHTTPRequestTriggerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_QueryExistedHTTPRequestTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExistedHTTPRequestTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).QueryExistedHTTPRequestTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_QueryExistedHTTPRequestTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).QueryExistedHTTPRequestTrigger(ctx, req.(*QueryExistedHTTPRequestTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CheckServerReachable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckServerReachableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CheckServerReachable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_CheckServerReachable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CheckServerReachable(ctx, req.(*CheckServerReachableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tunnel_ServiceDesc is the grpc.ServiceDesc for Tunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tpb.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoteIP",
			Handler:    _Tunnel_RemoteIP_Handler,
		},
		{
			MethodName: "RegisterTunnel",
			Handler:    _Tunnel_RegisterTunnel_Handler,
		},
		{
			MethodName: "GetAllRegisteredTunnel",
			Handler:    _Tunnel_GetAllRegisteredTunnel_Handler,
		},
		{
			MethodName: "GetRegisteredTunnelDescriptionByID",
			Handler:    _Tunnel_GetRegisteredTunnelDescriptionByID_Handler,
		},
		{
			MethodName: "RequireRandomPortTrigger",
			Handler:    _Tunnel_RequireRandomPortTrigger_Handler,
		},
		{
			MethodName: "QueryExistedRandomPortTrigger",
			Handler:    _Tunnel_QueryExistedRandomPortTrigger_Handler,
		},
		{
			MethodName: "QuerySpecificICMPLengthTrigger",
			Handler:    _Tunnel_QuerySpecificICMPLengthTrigger_Handler,
		},
		{
			MethodName: "RequireHTTPRequestTrigger",
			Handler:    _Tunnel_RequireHTTPRequestTrigger_Handler,
		},
		{
			MethodName: "QueryExistedHTTPRequestTrigger",
			Handler:    _Tunnel_QueryExistedHTTPRequestTrigger_Handler,
		},
		{
			MethodName: "CheckServerReachable",
			Handler:    _Tunnel_CheckServerReachable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTunnel",
			Handler:       _Tunnel_CreateTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}

const (
	DNSLog_RequireDomain_FullMethodName      = "/tpb.DNSLog/RequireDomain"
	DNSLog_QueryExistedDNSLog_FullMethodName = "/tpb.DNSLog/QueryExistedDNSLog"
)

// DNSLogClient is the client API for DNSLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNSLogClient interface {
	RequireDomain(ctx context.Context, in *RequireDomainParams, opts ...grpc.CallOption) (*RequireDomainResponse, error)
	QueryExistedDNSLog(ctx context.Context, in *QueryExistedDNSLogParams, opts ...grpc.CallOption) (*QueryExistedDNSLogResponse, error)
}

type dNSLogClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSLogClient(cc grpc.ClientConnInterface) DNSLogClient {
	return &dNSLogClient{cc}
}

func (c *dNSLogClient) RequireDomain(ctx context.Context, in *RequireDomainParams, opts ...grpc.CallOption) (*RequireDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequireDomainResponse)
	err := c.cc.Invoke(ctx, DNSLog_RequireDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSLogClient) QueryExistedDNSLog(ctx context.Context, in *QueryExistedDNSLogParams, opts ...grpc.CallOption) (*QueryExistedDNSLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExistedDNSLogResponse)
	err := c.cc.Invoke(ctx, DNSLog_QueryExistedDNSLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSLogServer is the server API for DNSLog service.
// All implementations must embed UnimplementedDNSLogServer
// for forward compatibility.
type DNSLogServer interface {
	RequireDomain(context.Context, *RequireDomainParams) (*RequireDomainResponse, error)
	QueryExistedDNSLog(context.Context, *QueryExistedDNSLogParams) (*QueryExistedDNSLogResponse, error)
	mustEmbedUnimplementedDNSLogServer()
}

// UnimplementedDNSLogServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDNSLogServer struct{}

func (UnimplementedDNSLogServer) RequireDomain(context.Context, *RequireDomainParams) (*RequireDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireDomain not implemented")
}
func (UnimplementedDNSLogServer) QueryExistedDNSLog(context.Context, *QueryExistedDNSLogParams) (*QueryExistedDNSLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExistedDNSLog not implemented")
}
func (UnimplementedDNSLogServer) mustEmbedUnimplementedDNSLogServer() {}
func (UnimplementedDNSLogServer) testEmbeddedByValue()                {}

// UnsafeDNSLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNSLogServer will
// result in compilation errors.
type UnsafeDNSLogServer interface {
	mustEmbedUnimplementedDNSLogServer()
}

func RegisterDNSLogServer(s grpc.ServiceRegistrar, srv DNSLogServer) {
	// If the following call pancis, it indicates UnimplementedDNSLogServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DNSLog_ServiceDesc, srv)
}

func _DNSLog_RequireDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequireDomainParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSLogServer).RequireDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNSLog_RequireDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSLogServer).RequireDomain(ctx, req.(*RequireDomainParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSLog_QueryExistedDNSLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExistedDNSLogParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSLogServer).QueryExistedDNSLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNSLog_QueryExistedDNSLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSLogServer).QueryExistedDNSLog(ctx, req.(*QueryExistedDNSLogParams))
	}
	return interceptor(ctx, in, info, handler)
}

// DNSLog_ServiceDesc is the grpc.ServiceDesc for DNSLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DNSLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tpb.DNSLog",
	HandlerType: (*DNSLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequireDomain",
			Handler:    _DNSLog_RequireDomain_Handler,
		},
		{
			MethodName: "QueryExistedDNSLog",
			Handler:    _DNSLog_QueryExistedDNSLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tunnel.proto",
}
