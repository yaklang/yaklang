// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.4
// source: tunnel.proto

package tpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_tunnel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{0}
}

type HTTPRequestTriggerNotification struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Url              string                 `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
	RemoteAddr       string                 `protobuf:"bytes,2,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	IsHttps          bool                   `protobuf:"varint,3,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	TriggerTimestamp int64                  `protobuf:"varint,4,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp        int64                  `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Request          []byte                 `protobuf:"bytes,6,opt,name=Request,proto3" json:"Request,omitempty"`
	Response         []byte                 `protobuf:"bytes,7,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HTTPRequestTriggerNotification) Reset() {
	*x = HTTPRequestTriggerNotification{}
	mi := &file_tunnel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestTriggerNotification) ProtoMessage() {}

func (x *HTTPRequestTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestTriggerNotification.ProtoReflect.Descriptor instead.
func (*HTTPRequestTriggerNotification) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPRequestTriggerNotification) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPRequestTriggerNotification) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *HTTPRequestTriggerNotification) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HTTPRequestTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *HTTPRequestTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HTTPRequestTriggerNotification) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPRequestTriggerNotification) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type QueryExistedHTTPRequestTriggerResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Notifications []*HTTPRequestTriggerNotification `protobuf:"bytes,1,rep,name=Notifications,proto3" json:"Notifications,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExistedHTTPRequestTriggerResponse) Reset() {
	*x = QueryExistedHTTPRequestTriggerResponse{}
	mi := &file_tunnel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExistedHTTPRequestTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedHTTPRequestTriggerResponse) ProtoMessage() {}

func (x *QueryExistedHTTPRequestTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedHTTPRequestTriggerResponse.ProtoReflect.Descriptor instead.
func (*QueryExistedHTTPRequestTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *QueryExistedHTTPRequestTriggerResponse) GetNotifications() []*HTTPRequestTriggerNotification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type QueryExistedHTTPRequestTriggerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExistedHTTPRequestTriggerRequest) Reset() {
	*x = QueryExistedHTTPRequestTriggerRequest{}
	mi := &file_tunnel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExistedHTTPRequestTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedHTTPRequestTriggerRequest) ProtoMessage() {}

func (x *QueryExistedHTTPRequestTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedHTTPRequestTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryExistedHTTPRequestTriggerRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *QueryExistedHTTPRequestTriggerRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RequireHTTPRequestTriggerParams struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Token                string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TTLSeconds           int32                  `protobuf:"varint,2,opt,name=TTLSeconds,proto3" json:"TTLSeconds,omitempty"`
	ExpectedHTTPResponse []byte                 `protobuf:"bytes,3,opt,name=ExpectedHTTPResponse,proto3" json:"ExpectedHTTPResponse,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RequireHTTPRequestTriggerParams) Reset() {
	*x = RequireHTTPRequestTriggerParams{}
	mi := &file_tunnel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequireHTTPRequestTriggerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireHTTPRequestTriggerParams) ProtoMessage() {}

func (x *RequireHTTPRequestTriggerParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireHTTPRequestTriggerParams.ProtoReflect.Descriptor instead.
func (*RequireHTTPRequestTriggerParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *RequireHTTPRequestTriggerParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireHTTPRequestTriggerParams) GetTTLSeconds() int32 {
	if x != nil {
		return x.TTLSeconds
	}
	return 0
}

func (x *RequireHTTPRequestTriggerParams) GetExpectedHTTPResponse() []byte {
	if x != nil {
		return x.ExpectedHTTPResponse
	}
	return nil
}

type RequireHTTPRequestTriggerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrimaryUrl    string                 `protobuf:"bytes,1,opt,name=PrimaryUrl,proto3" json:"PrimaryUrl,omitempty"`
	PrimaryHost   string                 `protobuf:"bytes,2,opt,name=PrimaryHost,proto3" json:"PrimaryHost,omitempty"`
	Urls          []string               `protobuf:"bytes,3,rep,name=Urls,proto3" json:"Urls,omitempty"`
	Hosts         []string               `protobuf:"bytes,4,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
	Token         string                 `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequireHTTPRequestTriggerResponse) Reset() {
	*x = RequireHTTPRequestTriggerResponse{}
	mi := &file_tunnel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequireHTTPRequestTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireHTTPRequestTriggerResponse) ProtoMessage() {}

func (x *RequireHTTPRequestTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireHTTPRequestTriggerResponse.ProtoReflect.Descriptor instead.
func (*RequireHTTPRequestTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *RequireHTTPRequestTriggerResponse) GetPrimaryUrl() string {
	if x != nil {
		return x.PrimaryUrl
	}
	return ""
}

func (x *RequireHTTPRequestTriggerResponse) GetPrimaryHost() string {
	if x != nil {
		return x.PrimaryHost
	}
	return ""
}

func (x *RequireHTTPRequestTriggerResponse) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *RequireHTTPRequestTriggerResponse) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *RequireHTTPRequestTriggerResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RegisterTunnelRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	PublicKeyPEM []byte                 `protobuf:"bytes,1,opt,name=PublicKeyPEM,proto3" json:"PublicKeyPEM,omitempty"`
	Secret       string                 `protobuf:"bytes,2,opt,name=Secret,proto3" json:"Secret,omitempty"`
	// 用来描述 Tunnel 携带信息的，比如想要测试的机器名或者测试的内容之类的
	Verbose       string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterTunnelRequest) Reset() {
	*x = RegisterTunnelRequest{}
	mi := &file_tunnel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTunnelRequest) ProtoMessage() {}

func (x *RegisterTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTunnelRequest.ProtoReflect.Descriptor instead.
func (*RegisterTunnelRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterTunnelRequest) GetPublicKeyPEM() []byte {
	if x != nil {
		return x.PublicKeyPEM
	}
	return nil
}

func (x *RegisterTunnelRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterTunnelRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type RegisterTunnelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterTunnelResponse) Reset() {
	*x = RegisterTunnelResponse{}
	mi := &file_tunnel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTunnelResponse) ProtoMessage() {}

func (x *RegisterTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTunnelResponse.ProtoReflect.Descriptor instead.
func (*RegisterTunnelResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterTunnelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAllRegisteredTunnelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 二级密码
	SecondaryPassword string `protobuf:"bytes,5,opt,name=SecondaryPassword,proto3" json:"SecondaryPassword,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetAllRegisteredTunnelRequest) Reset() {
	*x = GetAllRegisteredTunnelRequest{}
	mi := &file_tunnel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllRegisteredTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRegisteredTunnelRequest) ProtoMessage() {}

func (x *GetAllRegisteredTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRegisteredTunnelRequest.ProtoReflect.Descriptor instead.
func (*GetAllRegisteredTunnelRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllRegisteredTunnelRequest) GetSecondaryPassword() string {
	if x != nil {
		return x.SecondaryPassword
	}
	return ""
}

type RegisterTunnelMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectHost   string                 `protobuf:"bytes,1,opt,name=ConnectHost,proto3" json:"ConnectHost,omitempty"`
	ConnectPort   int64                  `protobuf:"varint,2,opt,name=ConnectPort,proto3" json:"ConnectPort,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Verbose       string                 `protobuf:"bytes,4,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterTunnelMeta) Reset() {
	*x = RegisterTunnelMeta{}
	mi := &file_tunnel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterTunnelMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTunnelMeta) ProtoMessage() {}

func (x *RegisterTunnelMeta) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTunnelMeta.ProtoReflect.Descriptor instead.
func (*RegisterTunnelMeta) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterTunnelMeta) GetConnectHost() string {
	if x != nil {
		return x.ConnectHost
	}
	return ""
}

func (x *RegisterTunnelMeta) GetConnectPort() int64 {
	if x != nil {
		return x.ConnectPort
	}
	return 0
}

func (x *RegisterTunnelMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterTunnelMeta) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type GetAllRegisteredTunnelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tunnels       []*RegisterTunnelMeta  `protobuf:"bytes,1,rep,name=Tunnels,proto3" json:"Tunnels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllRegisteredTunnelResponse) Reset() {
	*x = GetAllRegisteredTunnelResponse{}
	mi := &file_tunnel_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllRegisteredTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRegisteredTunnelResponse) ProtoMessage() {}

func (x *GetAllRegisteredTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRegisteredTunnelResponse.ProtoReflect.Descriptor instead.
func (*GetAllRegisteredTunnelResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllRegisteredTunnelResponse) GetTunnels() []*RegisterTunnelMeta {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

type GetRegisteredTunnelDescriptionByIDRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// 二级密码
	SecondaryPassword string `protobuf:"bytes,2,opt,name=SecondaryPassword,proto3" json:"SecondaryPassword,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetRegisteredTunnelDescriptionByIDRequest) Reset() {
	*x = GetRegisteredTunnelDescriptionByIDRequest{}
	mi := &file_tunnel_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRegisteredTunnelDescriptionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredTunnelDescriptionByIDRequest) ProtoMessage() {}

func (x *GetRegisteredTunnelDescriptionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredTunnelDescriptionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredTunnelDescriptionByIDRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{11}
}

func (x *GetRegisteredTunnelDescriptionByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetRegisteredTunnelDescriptionByIDRequest) GetSecondaryPassword() string {
	if x != nil {
		return x.SecondaryPassword
	}
	return ""
}

type RegisteredTunnel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *RegisterTunnelMeta    `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	Auth          []byte                 `protobuf:"bytes,2,opt,name=Auth,proto3" json:"Auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisteredTunnel) Reset() {
	*x = RegisteredTunnel{}
	mi := &file_tunnel_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisteredTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredTunnel) ProtoMessage() {}

func (x *RegisteredTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredTunnel.ProtoReflect.Descriptor instead.
func (*RegisteredTunnel) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{12}
}

func (x *RegisteredTunnel) GetInfo() *RegisterTunnelMeta {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RegisteredTunnel) GetAuth() []byte {
	if x != nil {
		return x.Auth
	}
	return nil
}

type QuerySpecificICMPLengthTriggerParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Length        int32                  `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySpecificICMPLengthTriggerParams) Reset() {
	*x = QuerySpecificICMPLengthTriggerParams{}
	mi := &file_tunnel_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySpecificICMPLengthTriggerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySpecificICMPLengthTriggerParams) ProtoMessage() {}

func (x *QuerySpecificICMPLengthTriggerParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySpecificICMPLengthTriggerParams.ProtoReflect.Descriptor instead.
func (*QuerySpecificICMPLengthTriggerParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{13}
}

func (x *QuerySpecificICMPLengthTriggerParams) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type ICMPTriggerNotification struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	Size                               int32                  `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	CurrentRemoteAddr                  string                 `protobuf:"bytes,2,opt,name=CurrentRemoteAddr,proto3" json:"CurrentRemoteAddr,omitempty"`
	Histories                          []string               `protobuf:"bytes,3,rep,name=Histories,proto3" json:"Histories,omitempty"`
	CurrentRemoteCachedConnectionCount int32                  `protobuf:"varint,4,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	SizeCachedHistoryConnectionCount   int32                  `protobuf:"varint,5,opt,name=SizeCachedHistoryConnectionCount,proto3" json:"SizeCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                   int64                  `protobuf:"varint,6,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                          int64                  `protobuf:"varint,7,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *ICMPTriggerNotification) Reset() {
	*x = ICMPTriggerNotification{}
	mi := &file_tunnel_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICMPTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICMPTriggerNotification) ProtoMessage() {}

func (x *ICMPTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICMPTriggerNotification.ProtoReflect.Descriptor instead.
func (*ICMPTriggerNotification) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{14}
}

func (x *ICMPTriggerNotification) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ICMPTriggerNotification) GetCurrentRemoteAddr() string {
	if x != nil {
		return x.CurrentRemoteAddr
	}
	return ""
}

func (x *ICMPTriggerNotification) GetHistories() []string {
	if x != nil {
		return x.Histories
	}
	return nil
}

func (x *ICMPTriggerNotification) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetSizeCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.SizeCachedHistoryConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QuerySpecificICMPLengthTriggerResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Notifications []*ICMPTriggerNotification `protobuf:"bytes,1,rep,name=Notifications,proto3" json:"Notifications,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySpecificICMPLengthTriggerResponse) Reset() {
	*x = QuerySpecificICMPLengthTriggerResponse{}
	mi := &file_tunnel_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySpecificICMPLengthTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySpecificICMPLengthTriggerResponse) ProtoMessage() {}

func (x *QuerySpecificICMPLengthTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySpecificICMPLengthTriggerResponse.ProtoReflect.Descriptor instead.
func (*QuerySpecificICMPLengthTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{15}
}

func (x *QuerySpecificICMPLengthTriggerResponse) GetNotifications() []*ICMPTriggerNotification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type CheckServerReachableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
	HttpCheck     bool                   `protobuf:"varint,2,opt,name=HttpCheck,proto3" json:"HttpCheck,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckServerReachableRequest) Reset() {
	*x = CheckServerReachableRequest{}
	mi := &file_tunnel_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckServerReachableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckServerReachableRequest) ProtoMessage() {}

func (x *CheckServerReachableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckServerReachableRequest.ProtoReflect.Descriptor instead.
func (*CheckServerReachableRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{16}
}

func (x *CheckServerReachableRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CheckServerReachableRequest) GetHttpCheck() bool {
	if x != nil {
		return x.HttpCheck
	}
	return false
}

type CheckServerReachableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reachable     bool                   `protobuf:"varint,1,opt,name=Reachable,proto3" json:"Reachable,omitempty"`
	Verbose       string                 `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	HTTPResponse  []byte                 `protobuf:"bytes,3,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	HTTPRequest   []byte                 `protobuf:"bytes,4,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckServerReachableResponse) Reset() {
	*x = CheckServerReachableResponse{}
	mi := &file_tunnel_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckServerReachableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckServerReachableResponse) ProtoMessage() {}

func (x *CheckServerReachableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckServerReachableResponse.ProtoReflect.Descriptor instead.
func (*CheckServerReachableResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{17}
}

func (x *CheckServerReachableResponse) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *CheckServerReachableResponse) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *CheckServerReachableResponse) GetHTTPResponse() []byte {
	if x != nil {
		return x.HTTPResponse
	}
	return nil
}

func (x *CheckServerReachableResponse) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

type QueryExistedDNSLogParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Mode          string                 `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExistedDNSLogParams) Reset() {
	*x = QueryExistedDNSLogParams{}
	mi := &file_tunnel_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExistedDNSLogParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedDNSLogParams) ProtoMessage() {}

func (x *QueryExistedDNSLogParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedDNSLogParams.ProtoReflect.Descriptor instead.
func (*QueryExistedDNSLogParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{18}
}

func (x *QueryExistedDNSLogParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryExistedDNSLogParams) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type DNSLogEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Domain        string                 `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	RemoteAddr    string                 `protobuf:"bytes,4,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP      string                 `protobuf:"bytes,5,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort    int32                  `protobuf:"varint,6,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	Raw           []byte                 `protobuf:"bytes,7,opt,name=Raw,proto3" json:"Raw,omitempty"`
	Timestamp     int64                  `protobuf:"varint,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Mode          string                 `protobuf:"bytes,9,opt,name=Mode,proto3" json:"Mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSLogEvent) Reset() {
	*x = DNSLogEvent{}
	mi := &file_tunnel_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSLogEvent) ProtoMessage() {}

func (x *DNSLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSLogEvent.ProtoReflect.Descriptor instead.
func (*DNSLogEvent) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{19}
}

func (x *DNSLogEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DNSLogEvent) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DNSLogEvent) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *DNSLogEvent) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *DNSLogEvent) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *DNSLogEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DNSLogEvent) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type QueryExistedDNSLogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*DNSLogEvent         `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExistedDNSLogResponse) Reset() {
	*x = QueryExistedDNSLogResponse{}
	mi := &file_tunnel_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExistedDNSLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedDNSLogResponse) ProtoMessage() {}

func (x *QueryExistedDNSLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedDNSLogResponse.ProtoReflect.Descriptor instead.
func (*QueryExistedDNSLogResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{20}
}

func (x *QueryExistedDNSLogResponse) GetEvents() []*DNSLogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RequireDomainParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          string                 `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequireDomainParams) Reset() {
	*x = RequireDomainParams{}
	mi := &file_tunnel_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequireDomainParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireDomainParams) ProtoMessage() {}

func (x *RequireDomainParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireDomainParams.ProtoReflect.Descriptor instead.
func (*RequireDomainParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{21}
}

func (x *RequireDomainParams) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type RequireDomainResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Mode          string                 `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequireDomainResponse) Reset() {
	*x = RequireDomainResponse{}
	mi := &file_tunnel_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequireDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireDomainResponse) ProtoMessage() {}

func (x *RequireDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireDomainResponse.ProtoReflect.Descriptor instead.
func (*RequireDomainResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{22}
}

func (x *RequireDomainResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RequireDomainResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireDomainResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type QueryExistedRandomPortTriggerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExistedRandomPortTriggerRequest) Reset() {
	*x = QueryExistedRandomPortTriggerRequest{}
	mi := &file_tunnel_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExistedRandomPortTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedRandomPortTriggerRequest) ProtoMessage() {}

func (x *QueryExistedRandomPortTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedRandomPortTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryExistedRandomPortTriggerRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{23}
}

func (x *QueryExistedRandomPortTriggerRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RandomPortTriggerEvent struct {
	state                                 protoimpl.MessageState `protogen:"open.v1"`
	RemoteAddr                            string                 `protobuf:"bytes,1,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP                              string                 `protobuf:"bytes,2,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort                            int32                  `protobuf:"varint,3,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	LocalPort                             int32                  `protobuf:"varint,4,opt,name=LocalPort,proto3" json:"LocalPort,omitempty"`
	History                               []string               `protobuf:"bytes,5,rep,name=History,proto3" json:"History,omitempty"`
	CurrentRemoteCachedConnectionCount    int32                  `protobuf:"varint,6,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	LocalPortCachedHistoryConnectionCount int32                  `protobuf:"varint,7,opt,name=LocalPortCachedHistoryConnectionCount,proto3" json:"LocalPortCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                      int64                  `protobuf:"varint,8,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                             int64                  `protobuf:"varint,9,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *RandomPortTriggerEvent) Reset() {
	*x = RandomPortTriggerEvent{}
	mi := &file_tunnel_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandomPortTriggerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPortTriggerEvent) ProtoMessage() {}

func (x *RandomPortTriggerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPortTriggerEvent.ProtoReflect.Descriptor instead.
func (*RandomPortTriggerEvent) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{24}
}

func (x *RandomPortTriggerEvent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *RandomPortTriggerEvent) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *RandomPortTriggerEvent) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *RandomPortTriggerEvent) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetLocalPortCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.LocalPortCachedHistoryConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QueryExistedRandomPortTriggerResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Events        []*RandomPortTriggerEvent `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExistedRandomPortTriggerResponse) Reset() {
	*x = QueryExistedRandomPortTriggerResponse{}
	mi := &file_tunnel_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExistedRandomPortTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedRandomPortTriggerResponse) ProtoMessage() {}

func (x *QueryExistedRandomPortTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedRandomPortTriggerResponse.ProtoReflect.Descriptor instead.
func (*QueryExistedRandomPortTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{25}
}

func (x *QueryExistedRandomPortTriggerResponse) GetEvents() []*RandomPortTriggerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RequireRandomPortTriggerParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TTLSeconds    int32                  `protobuf:"varint,2,opt,name=TTLSeconds,proto3" json:"TTLSeconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequireRandomPortTriggerParams) Reset() {
	*x = RequireRandomPortTriggerParams{}
	mi := &file_tunnel_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequireRandomPortTriggerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireRandomPortTriggerParams) ProtoMessage() {}

func (x *RequireRandomPortTriggerParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireRandomPortTriggerParams.ProtoReflect.Descriptor instead.
func (*RequireRandomPortTriggerParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{26}
}

func (x *RequireRandomPortTriggerParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireRandomPortTriggerParams) GetTTLSeconds() int32 {
	if x != nil {
		return x.TTLSeconds
	}
	return 0
}

type RequireRandomPortTriggerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          int32                  `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	ExternalIP    string                 `protobuf:"bytes,3,opt,name=ExternalIP,proto3" json:"ExternalIP,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequireRandomPortTriggerResponse) Reset() {
	*x = RequireRandomPortTriggerResponse{}
	mi := &file_tunnel_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequireRandomPortTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireRandomPortTriggerResponse) ProtoMessage() {}

func (x *RequireRandomPortTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireRandomPortTriggerResponse.ProtoReflect.Descriptor instead.
func (*RequireRandomPortTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{27}
}

func (x *RequireRandomPortTriggerResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RequireRandomPortTriggerResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireRandomPortTriggerResponse) GetExternalIP() string {
	if x != nil {
		return x.ExternalIP
	}
	return ""
}

type Mirror struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Network       string                 `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mirror) Reset() {
	*x = Mirror{}
	mi := &file_tunnel_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mirror) ProtoMessage() {}

func (x *Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mirror.ProtoReflect.Descriptor instead.
func (*Mirror) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{28}
}

func (x *Mirror) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Mirror) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Mirror) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type TunnelInput struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Mirrors []*Mirror              `protobuf:"bytes,1,rep,name=Mirrors,proto3" json:"Mirrors,omitempty"`
	// 发送给哪个端口镜像的？
	ToId string `protobuf:"bytes,2,opt,name=ToId,proto3" json:"ToId,omitempty"`
	// 数据
	Data []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	// 对应的远端地址是啥？用来区分 conn
	ToRemoteAddr string `protobuf:"bytes,4,opt,name=ToRemoteAddr,proto3" json:"ToRemoteAddr,omitempty"`
	// Close
	Close         bool `protobuf:"varint,5,opt,name=Close,proto3" json:"Close,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TunnelInput) Reset() {
	*x = TunnelInput{}
	mi := &file_tunnel_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInput) ProtoMessage() {}

func (x *TunnelInput) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInput.ProtoReflect.Descriptor instead.
func (*TunnelInput) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{29}
}

func (x *TunnelInput) GetMirrors() []*Mirror {
	if x != nil {
		return x.Mirrors
	}
	return nil
}

func (x *TunnelInput) GetToId() string {
	if x != nil {
		return x.ToId
	}
	return ""
}

func (x *TunnelInput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TunnelInput) GetToRemoteAddr() string {
	if x != nil {
		return x.ToRemoteAddr
	}
	return ""
}

func (x *TunnelInput) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

type TunnelOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromId        string                 `protobuf:"bytes,1,opt,name=FromId,proto3" json:"FromId,omitempty"`
	RemoteAddr    string                 `protobuf:"bytes,2,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Close         bool                   `protobuf:"varint,4,opt,name=Close,proto3" json:"Close,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TunnelOutput) Reset() {
	*x = TunnelOutput{}
	mi := &file_tunnel_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelOutput) ProtoMessage() {}

func (x *TunnelOutput) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelOutput.ProtoReflect.Descriptor instead.
func (*TunnelOutput) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{30}
}

func (x *TunnelOutput) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *TunnelOutput) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *TunnelOutput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TunnelOutput) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

type RemoteIPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IPAddress     string                 `protobuf:"bytes,1,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteIPResponse) Reset() {
	*x = RemoteIPResponse{}
	mi := &file_tunnel_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteIPResponse) ProtoMessage() {}

func (x *RemoteIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteIPResponse.ProtoReflect.Descriptor instead.
func (*RemoteIPResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{31}
}

func (x *RemoteIPResponse) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

var File_tunnel_proto protoreflect.FileDescriptor

const file_tunnel_proto_rawDesc = "" +
	"\n" +
	"\ftunnel.proto\x12\x03tpb\"\a\n" +
	"\x05Empty\"\xec\x01\n" +
	"\x1eHTTPRequestTriggerNotification\x12\x10\n" +
	"\x03Url\x18\x01 \x01(\tR\x03Url\x12\x1e\n" +
	"\n" +
	"RemoteAddr\x18\x02 \x01(\tR\n" +
	"RemoteAddr\x12\x18\n" +
	"\aIsHttps\x18\x03 \x01(\bR\aIsHttps\x12*\n" +
	"\x10TriggerTimestamp\x18\x04 \x01(\x03R\x10TriggerTimestamp\x12\x1c\n" +
	"\tTimestamp\x18\x05 \x01(\x03R\tTimestamp\x12\x18\n" +
	"\aRequest\x18\x06 \x01(\fR\aRequest\x12\x1a\n" +
	"\bResponse\x18\a \x01(\fR\bResponse\"s\n" +
	"&QueryExistedHTTPRequestTriggerResponse\x12I\n" +
	"\rNotifications\x18\x01 \x03(\v2#.tpb.HTTPRequestTriggerNotificationR\rNotifications\"=\n" +
	"%QueryExistedHTTPRequestTriggerRequest\x12\x14\n" +
	"\x05Token\x18\x01 \x01(\tR\x05Token\"\x8b\x01\n" +
	"\x1fRequireHTTPRequestTriggerParams\x12\x14\n" +
	"\x05Token\x18\x01 \x01(\tR\x05Token\x12\x1e\n" +
	"\n" +
	"TTLSeconds\x18\x02 \x01(\x05R\n" +
	"TTLSeconds\x122\n" +
	"\x14ExpectedHTTPResponse\x18\x03 \x01(\fR\x14ExpectedHTTPResponse\"\xa5\x01\n" +
	"!RequireHTTPRequestTriggerResponse\x12\x1e\n" +
	"\n" +
	"PrimaryUrl\x18\x01 \x01(\tR\n" +
	"PrimaryUrl\x12 \n" +
	"\vPrimaryHost\x18\x02 \x01(\tR\vPrimaryHost\x12\x12\n" +
	"\x04Urls\x18\x03 \x03(\tR\x04Urls\x12\x14\n" +
	"\x05Hosts\x18\x04 \x03(\tR\x05Hosts\x12\x14\n" +
	"\x05Token\x18\x05 \x01(\tR\x05Token\"m\n" +
	"\x15RegisterTunnelRequest\x12\"\n" +
	"\fPublicKeyPEM\x18\x01 \x01(\fR\fPublicKeyPEM\x12\x16\n" +
	"\x06Secret\x18\x02 \x01(\tR\x06Secret\x12\x18\n" +
	"\aVerbose\x18\x03 \x01(\tR\aVerbose\"(\n" +
	"\x16RegisterTunnelResponse\x12\x0e\n" +
	"\x02Id\x18\x01 \x01(\tR\x02Id\"M\n" +
	"\x1dGetAllRegisteredTunnelRequest\x12,\n" +
	"\x11SecondaryPassword\x18\x05 \x01(\tR\x11SecondaryPassword\"\x82\x01\n" +
	"\x12RegisterTunnelMeta\x12 \n" +
	"\vConnectHost\x18\x01 \x01(\tR\vConnectHost\x12 \n" +
	"\vConnectPort\x18\x02 \x01(\x03R\vConnectPort\x12\x0e\n" +
	"\x02Id\x18\x03 \x01(\tR\x02Id\x12\x18\n" +
	"\aVerbose\x18\x04 \x01(\tR\aVerbose\"S\n" +
	"\x1eGetAllRegisteredTunnelResponse\x121\n" +
	"\aTunnels\x18\x01 \x03(\v2\x17.tpb.RegisterTunnelMetaR\aTunnels\"i\n" +
	")GetRegisteredTunnelDescriptionByIDRequest\x12\x0e\n" +
	"\x02Id\x18\x01 \x01(\tR\x02Id\x12,\n" +
	"\x11SecondaryPassword\x18\x02 \x01(\tR\x11SecondaryPassword\"S\n" +
	"\x10RegisteredTunnel\x12+\n" +
	"\x04Info\x18\x01 \x01(\v2\x17.tpb.RegisterTunnelMetaR\x04Info\x12\x12\n" +
	"\x04Auth\x18\x02 \x01(\fR\x04Auth\">\n" +
	"$QuerySpecificICMPLengthTriggerParams\x12\x16\n" +
	"\x06Length\x18\x01 \x01(\x05R\x06Length\"\xdf\x02\n" +
	"\x17ICMPTriggerNotification\x12\x12\n" +
	"\x04Size\x18\x01 \x01(\x05R\x04Size\x12,\n" +
	"\x11CurrentRemoteAddr\x18\x02 \x01(\tR\x11CurrentRemoteAddr\x12\x1c\n" +
	"\tHistories\x18\x03 \x03(\tR\tHistories\x12N\n" +
	"\"CurrentRemoteCachedConnectionCount\x18\x04 \x01(\x05R\"CurrentRemoteCachedConnectionCount\x12J\n" +
	" SizeCachedHistoryConnectionCount\x18\x05 \x01(\x05R SizeCachedHistoryConnectionCount\x12*\n" +
	"\x10TriggerTimestamp\x18\x06 \x01(\x03R\x10TriggerTimestamp\x12\x1c\n" +
	"\tTimestamp\x18\a \x01(\x03R\tTimestamp\"l\n" +
	"&QuerySpecificICMPLengthTriggerResponse\x12B\n" +
	"\rNotifications\x18\x01 \x03(\v2\x1c.tpb.ICMPTriggerNotificationR\rNotifications\"M\n" +
	"\x1bCheckServerReachableRequest\x12\x10\n" +
	"\x03Url\x18\x01 \x01(\tR\x03Url\x12\x1c\n" +
	"\tHttpCheck\x18\x02 \x01(\bR\tHttpCheck\"\x9c\x01\n" +
	"\x1cCheckServerReachableResponse\x12\x1c\n" +
	"\tReachable\x18\x01 \x01(\bR\tReachable\x12\x18\n" +
	"\aVerbose\x18\x02 \x01(\tR\aVerbose\x12\"\n" +
	"\fHTTPResponse\x18\x03 \x01(\fR\fHTTPResponse\x12 \n" +
	"\vHTTPRequest\x18\x04 \x01(\fR\vHTTPRequest\"D\n" +
	"\x18QueryExistedDNSLogParams\x12\x14\n" +
	"\x05Token\x18\x01 \x01(\tR\x05Token\x12\x12\n" +
	"\x04Mode\x18\x02 \x01(\tR\x04Mode\"\xef\x01\n" +
	"\vDNSLogEvent\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\tR\x04Type\x12\x14\n" +
	"\x05Token\x18\x02 \x01(\tR\x05Token\x12\x16\n" +
	"\x06Domain\x18\x03 \x01(\tR\x06Domain\x12\x1e\n" +
	"\n" +
	"RemoteAddr\x18\x04 \x01(\tR\n" +
	"RemoteAddr\x12\x1a\n" +
	"\bRemoteIP\x18\x05 \x01(\tR\bRemoteIP\x12\x1e\n" +
	"\n" +
	"RemotePort\x18\x06 \x01(\x05R\n" +
	"RemotePort\x12\x10\n" +
	"\x03Raw\x18\a \x01(\fR\x03Raw\x12\x1c\n" +
	"\tTimestamp\x18\b \x01(\x03R\tTimestamp\x12\x12\n" +
	"\x04Mode\x18\t \x01(\tR\x04Mode\"F\n" +
	"\x1aQueryExistedDNSLogResponse\x12(\n" +
	"\x06Events\x18\x01 \x03(\v2\x10.tpb.DNSLogEventR\x06Events\")\n" +
	"\x13RequireDomainParams\x12\x12\n" +
	"\x04Mode\x18\x01 \x01(\tR\x04Mode\"Y\n" +
	"\x15RequireDomainResponse\x12\x16\n" +
	"\x06Domain\x18\x01 \x01(\tR\x06Domain\x12\x14\n" +
	"\x05Token\x18\x02 \x01(\tR\x05Token\x12\x12\n" +
	"\x04Mode\x18\x03 \x01(\tR\x04Mode\"<\n" +
	"$QueryExistedRandomPortTriggerRequest\x12\x14\n" +
	"\x05Token\x18\x01 \x01(\tR\x05Token\"\x9c\x03\n" +
	"\x16RandomPortTriggerEvent\x12\x1e\n" +
	"\n" +
	"RemoteAddr\x18\x01 \x01(\tR\n" +
	"RemoteAddr\x12\x1a\n" +
	"\bRemoteIP\x18\x02 \x01(\tR\bRemoteIP\x12\x1e\n" +
	"\n" +
	"RemotePort\x18\x03 \x01(\x05R\n" +
	"RemotePort\x12\x1c\n" +
	"\tLocalPort\x18\x04 \x01(\x05R\tLocalPort\x12\x18\n" +
	"\aHistory\x18\x05 \x03(\tR\aHistory\x12N\n" +
	"\"CurrentRemoteCachedConnectionCount\x18\x06 \x01(\x05R\"CurrentRemoteCachedConnectionCount\x12T\n" +
	"%LocalPortCachedHistoryConnectionCount\x18\a \x01(\x05R%LocalPortCachedHistoryConnectionCount\x12*\n" +
	"\x10TriggerTimestamp\x18\b \x01(\x03R\x10TriggerTimestamp\x12\x1c\n" +
	"\tTimestamp\x18\t \x01(\x03R\tTimestamp\"\\\n" +
	"%QueryExistedRandomPortTriggerResponse\x123\n" +
	"\x06Events\x18\x01 \x03(\v2\x1b.tpb.RandomPortTriggerEventR\x06Events\"V\n" +
	"\x1eRequireRandomPortTriggerParams\x12\x14\n" +
	"\x05Token\x18\x01 \x01(\tR\x05Token\x12\x1e\n" +
	"\n" +
	"TTLSeconds\x18\x02 \x01(\x05R\n" +
	"TTLSeconds\"l\n" +
	" RequireRandomPortTriggerResponse\x12\x12\n" +
	"\x04Port\x18\x01 \x01(\x05R\x04Port\x12\x14\n" +
	"\x05Token\x18\x02 \x01(\tR\x05Token\x12\x1e\n" +
	"\n" +
	"ExternalIP\x18\x03 \x01(\tR\n" +
	"ExternalIP\"F\n" +
	"\x06Mirror\x12\x0e\n" +
	"\x02Id\x18\x01 \x01(\tR\x02Id\x12\x12\n" +
	"\x04Port\x18\x02 \x01(\x05R\x04Port\x12\x18\n" +
	"\aNetwork\x18\x03 \x01(\tR\aNetwork\"\x96\x01\n" +
	"\vTunnelInput\x12%\n" +
	"\aMirrors\x18\x01 \x03(\v2\v.tpb.MirrorR\aMirrors\x12\x12\n" +
	"\x04ToId\x18\x02 \x01(\tR\x04ToId\x12\x12\n" +
	"\x04Data\x18\x03 \x01(\fR\x04Data\x12\"\n" +
	"\fToRemoteAddr\x18\x04 \x01(\tR\fToRemoteAddr\x12\x14\n" +
	"\x05Close\x18\x05 \x01(\bR\x05Close\"p\n" +
	"\fTunnelOutput\x12\x16\n" +
	"\x06FromId\x18\x01 \x01(\tR\x06FromId\x12\x1e\n" +
	"\n" +
	"RemoteAddr\x18\x02 \x01(\tR\n" +
	"RemoteAddr\x12\x12\n" +
	"\x04Data\x18\x03 \x01(\fR\x04Data\x12\x14\n" +
	"\x05Close\x18\x04 \x01(\bR\x05Close\"0\n" +
	"\x10RemoteIPResponse\x12\x1c\n" +
	"\tIPAddress\x18\x01 \x01(\tR\tIPAddress2\xa8\b\n" +
	"\x06Tunnel\x12-\n" +
	"\bRemoteIP\x12\n" +
	".tpb.Empty\x1a\x15.tpb.RemoteIPResponse\x127\n" +
	"\fCreateTunnel\x12\x10.tpb.TunnelInput\x1a\x11.tpb.TunnelOutput(\x010\x01\x12I\n" +
	"\x0eRegisterTunnel\x12\x1a.tpb.RegisterTunnelRequest\x1a\x1b.tpb.RegisterTunnelResponse\x12a\n" +
	"\x16GetAllRegisteredTunnel\x12\".tpb.GetAllRegisteredTunnelRequest\x1a#.tpb.GetAllRegisteredTunnelResponse\x12k\n" +
	"\"GetRegisteredTunnelDescriptionByID\x12..tpb.GetRegisteredTunnelDescriptionByIDRequest\x1a\x15.tpb.RegisteredTunnel\x12f\n" +
	"\x18RequireRandomPortTrigger\x12#.tpb.RequireRandomPortTriggerParams\x1a%.tpb.RequireRandomPortTriggerResponse\x12v\n" +
	"\x1dQueryExistedRandomPortTrigger\x12).tpb.QueryExistedRandomPortTriggerRequest\x1a*.tpb.QueryExistedRandomPortTriggerResponse\x12x\n" +
	"\x1eQuerySpecificICMPLengthTrigger\x12).tpb.QuerySpecificICMPLengthTriggerParams\x1a+.tpb.QuerySpecificICMPLengthTriggerResponse\x12i\n" +
	"\x19RequireHTTPRequestTrigger\x12$.tpb.RequireHTTPRequestTriggerParams\x1a&.tpb.RequireHTTPRequestTriggerResponse\x12y\n" +
	"\x1eQueryExistedHTTPRequestTrigger\x12*.tpb.QueryExistedHTTPRequestTriggerRequest\x1a+.tpb.QueryExistedHTTPRequestTriggerResponse\x12[\n" +
	"\x14CheckServerReachable\x12 .tpb.CheckServerReachableRequest\x1a!.tpb.CheckServerReachableResponse2\xa5\x01\n" +
	"\x06DNSLog\x12E\n" +
	"\rRequireDomain\x12\x18.tpb.RequireDomainParams\x1a\x1a.tpb.RequireDomainResponse\x12T\n" +
	"\x12QueryExistedDNSLog\x12\x1d.tpb.QueryExistedDNSLogParams\x1a\x1f.tpb.QueryExistedDNSLogResponseB\aZ\x05/;tpbb\x06proto3"

var (
	file_tunnel_proto_rawDescOnce sync.Once
	file_tunnel_proto_rawDescData []byte
)

func file_tunnel_proto_rawDescGZIP() []byte {
	file_tunnel_proto_rawDescOnce.Do(func() {
		file_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tunnel_proto_rawDesc), len(file_tunnel_proto_rawDesc)))
	})
	return file_tunnel_proto_rawDescData
}

var file_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_tunnel_proto_goTypes = []any{
	(*Empty)(nil),                                     // 0: tpb.Empty
	(*HTTPRequestTriggerNotification)(nil),            // 1: tpb.HTTPRequestTriggerNotification
	(*QueryExistedHTTPRequestTriggerResponse)(nil),    // 2: tpb.QueryExistedHTTPRequestTriggerResponse
	(*QueryExistedHTTPRequestTriggerRequest)(nil),     // 3: tpb.QueryExistedHTTPRequestTriggerRequest
	(*RequireHTTPRequestTriggerParams)(nil),           // 4: tpb.RequireHTTPRequestTriggerParams
	(*RequireHTTPRequestTriggerResponse)(nil),         // 5: tpb.RequireHTTPRequestTriggerResponse
	(*RegisterTunnelRequest)(nil),                     // 6: tpb.RegisterTunnelRequest
	(*RegisterTunnelResponse)(nil),                    // 7: tpb.RegisterTunnelResponse
	(*GetAllRegisteredTunnelRequest)(nil),             // 8: tpb.GetAllRegisteredTunnelRequest
	(*RegisterTunnelMeta)(nil),                        // 9: tpb.RegisterTunnelMeta
	(*GetAllRegisteredTunnelResponse)(nil),            // 10: tpb.GetAllRegisteredTunnelResponse
	(*GetRegisteredTunnelDescriptionByIDRequest)(nil), // 11: tpb.GetRegisteredTunnelDescriptionByIDRequest
	(*RegisteredTunnel)(nil),                          // 12: tpb.RegisteredTunnel
	(*QuerySpecificICMPLengthTriggerParams)(nil),      // 13: tpb.QuerySpecificICMPLengthTriggerParams
	(*ICMPTriggerNotification)(nil),                   // 14: tpb.ICMPTriggerNotification
	(*QuerySpecificICMPLengthTriggerResponse)(nil),    // 15: tpb.QuerySpecificICMPLengthTriggerResponse
	(*CheckServerReachableRequest)(nil),               // 16: tpb.CheckServerReachableRequest
	(*CheckServerReachableResponse)(nil),              // 17: tpb.CheckServerReachableResponse
	(*QueryExistedDNSLogParams)(nil),                  // 18: tpb.QueryExistedDNSLogParams
	(*DNSLogEvent)(nil),                               // 19: tpb.DNSLogEvent
	(*QueryExistedDNSLogResponse)(nil),                // 20: tpb.QueryExistedDNSLogResponse
	(*RequireDomainParams)(nil),                       // 21: tpb.RequireDomainParams
	(*RequireDomainResponse)(nil),                     // 22: tpb.RequireDomainResponse
	(*QueryExistedRandomPortTriggerRequest)(nil),      // 23: tpb.QueryExistedRandomPortTriggerRequest
	(*RandomPortTriggerEvent)(nil),                    // 24: tpb.RandomPortTriggerEvent
	(*QueryExistedRandomPortTriggerResponse)(nil),     // 25: tpb.QueryExistedRandomPortTriggerResponse
	(*RequireRandomPortTriggerParams)(nil),            // 26: tpb.RequireRandomPortTriggerParams
	(*RequireRandomPortTriggerResponse)(nil),          // 27: tpb.RequireRandomPortTriggerResponse
	(*Mirror)(nil),                                    // 28: tpb.Mirror
	(*TunnelInput)(nil),                               // 29: tpb.TunnelInput
	(*TunnelOutput)(nil),                              // 30: tpb.TunnelOutput
	(*RemoteIPResponse)(nil),                          // 31: tpb.RemoteIPResponse
}
var file_tunnel_proto_depIdxs = []int32{
	1,  // 0: tpb.QueryExistedHTTPRequestTriggerResponse.Notifications:type_name -> tpb.HTTPRequestTriggerNotification
	9,  // 1: tpb.GetAllRegisteredTunnelResponse.Tunnels:type_name -> tpb.RegisterTunnelMeta
	9,  // 2: tpb.RegisteredTunnel.Info:type_name -> tpb.RegisterTunnelMeta
	14, // 3: tpb.QuerySpecificICMPLengthTriggerResponse.Notifications:type_name -> tpb.ICMPTriggerNotification
	19, // 4: tpb.QueryExistedDNSLogResponse.Events:type_name -> tpb.DNSLogEvent
	24, // 5: tpb.QueryExistedRandomPortTriggerResponse.Events:type_name -> tpb.RandomPortTriggerEvent
	28, // 6: tpb.TunnelInput.Mirrors:type_name -> tpb.Mirror
	0,  // 7: tpb.Tunnel.RemoteIP:input_type -> tpb.Empty
	29, // 8: tpb.Tunnel.CreateTunnel:input_type -> tpb.TunnelInput
	6,  // 9: tpb.Tunnel.RegisterTunnel:input_type -> tpb.RegisterTunnelRequest
	8,  // 10: tpb.Tunnel.GetAllRegisteredTunnel:input_type -> tpb.GetAllRegisteredTunnelRequest
	11, // 11: tpb.Tunnel.GetRegisteredTunnelDescriptionByID:input_type -> tpb.GetRegisteredTunnelDescriptionByIDRequest
	26, // 12: tpb.Tunnel.RequireRandomPortTrigger:input_type -> tpb.RequireRandomPortTriggerParams
	23, // 13: tpb.Tunnel.QueryExistedRandomPortTrigger:input_type -> tpb.QueryExistedRandomPortTriggerRequest
	13, // 14: tpb.Tunnel.QuerySpecificICMPLengthTrigger:input_type -> tpb.QuerySpecificICMPLengthTriggerParams
	4,  // 15: tpb.Tunnel.RequireHTTPRequestTrigger:input_type -> tpb.RequireHTTPRequestTriggerParams
	3,  // 16: tpb.Tunnel.QueryExistedHTTPRequestTrigger:input_type -> tpb.QueryExistedHTTPRequestTriggerRequest
	16, // 17: tpb.Tunnel.CheckServerReachable:input_type -> tpb.CheckServerReachableRequest
	21, // 18: tpb.DNSLog.RequireDomain:input_type -> tpb.RequireDomainParams
	18, // 19: tpb.DNSLog.QueryExistedDNSLog:input_type -> tpb.QueryExistedDNSLogParams
	31, // 20: tpb.Tunnel.RemoteIP:output_type -> tpb.RemoteIPResponse
	30, // 21: tpb.Tunnel.CreateTunnel:output_type -> tpb.TunnelOutput
	7,  // 22: tpb.Tunnel.RegisterTunnel:output_type -> tpb.RegisterTunnelResponse
	10, // 23: tpb.Tunnel.GetAllRegisteredTunnel:output_type -> tpb.GetAllRegisteredTunnelResponse
	12, // 24: tpb.Tunnel.GetRegisteredTunnelDescriptionByID:output_type -> tpb.RegisteredTunnel
	27, // 25: tpb.Tunnel.RequireRandomPortTrigger:output_type -> tpb.RequireRandomPortTriggerResponse
	25, // 26: tpb.Tunnel.QueryExistedRandomPortTrigger:output_type -> tpb.QueryExistedRandomPortTriggerResponse
	15, // 27: tpb.Tunnel.QuerySpecificICMPLengthTrigger:output_type -> tpb.QuerySpecificICMPLengthTriggerResponse
	5,  // 28: tpb.Tunnel.RequireHTTPRequestTrigger:output_type -> tpb.RequireHTTPRequestTriggerResponse
	2,  // 29: tpb.Tunnel.QueryExistedHTTPRequestTrigger:output_type -> tpb.QueryExistedHTTPRequestTriggerResponse
	17, // 30: tpb.Tunnel.CheckServerReachable:output_type -> tpb.CheckServerReachableResponse
	22, // 31: tpb.DNSLog.RequireDomain:output_type -> tpb.RequireDomainResponse
	20, // 32: tpb.DNSLog.QueryExistedDNSLog:output_type -> tpb.QueryExistedDNSLogResponse
	20, // [20:33] is the sub-list for method output_type
	7,  // [7:20] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_tunnel_proto_init() }
func file_tunnel_proto_init() {
	if File_tunnel_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tunnel_proto_rawDesc), len(file_tunnel_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tunnel_proto_goTypes,
		DependencyIndexes: file_tunnel_proto_depIdxs,
		MessageInfos:      file_tunnel_proto_msgTypes,
	}.Build()
	File_tunnel_proto = out.File
	file_tunnel_proto_goTypes = nil
	file_tunnel_proto_depIdxs = nil
}
