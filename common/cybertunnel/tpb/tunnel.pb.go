// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.0
// source: tunnel.proto

package tpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{0}
}

type HTTPRequestTriggerNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url              string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
	RemoteAddr       string `protobuf:"bytes,2,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	IsHttps          bool   `protobuf:"varint,3,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	TriggerTimestamp int64  `protobuf:"varint,4,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp        int64  `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Request          []byte `protobuf:"bytes,6,opt,name=Request,proto3" json:"Request,omitempty"`
	Response         []byte `protobuf:"bytes,7,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *HTTPRequestTriggerNotification) Reset() {
	*x = HTTPRequestTriggerNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestTriggerNotification) ProtoMessage() {}

func (x *HTTPRequestTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestTriggerNotification.ProtoReflect.Descriptor instead.
func (*HTTPRequestTriggerNotification) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPRequestTriggerNotification) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPRequestTriggerNotification) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *HTTPRequestTriggerNotification) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HTTPRequestTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *HTTPRequestTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HTTPRequestTriggerNotification) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPRequestTriggerNotification) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type QueryExistedHTTPRequestTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notifications []*HTTPRequestTriggerNotification `protobuf:"bytes,1,rep,name=Notifications,proto3" json:"Notifications,omitempty"`
}

func (x *QueryExistedHTTPRequestTriggerResponse) Reset() {
	*x = QueryExistedHTTPRequestTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExistedHTTPRequestTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedHTTPRequestTriggerResponse) ProtoMessage() {}

func (x *QueryExistedHTTPRequestTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedHTTPRequestTriggerResponse.ProtoReflect.Descriptor instead.
func (*QueryExistedHTTPRequestTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *QueryExistedHTTPRequestTriggerResponse) GetNotifications() []*HTTPRequestTriggerNotification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type QueryExistedHTTPRequestTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *QueryExistedHTTPRequestTriggerRequest) Reset() {
	*x = QueryExistedHTTPRequestTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExistedHTTPRequestTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedHTTPRequestTriggerRequest) ProtoMessage() {}

func (x *QueryExistedHTTPRequestTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedHTTPRequestTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryExistedHTTPRequestTriggerRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *QueryExistedHTTPRequestTriggerRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RequireHTTPRequestTriggerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token                string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TTLSeconds           int32  `protobuf:"varint,2,opt,name=TTLSeconds,proto3" json:"TTLSeconds,omitempty"`
	ExpectedHTTPResponse []byte `protobuf:"bytes,3,opt,name=ExpectedHTTPResponse,proto3" json:"ExpectedHTTPResponse,omitempty"`
}

func (x *RequireHTTPRequestTriggerParams) Reset() {
	*x = RequireHTTPRequestTriggerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireHTTPRequestTriggerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireHTTPRequestTriggerParams) ProtoMessage() {}

func (x *RequireHTTPRequestTriggerParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireHTTPRequestTriggerParams.ProtoReflect.Descriptor instead.
func (*RequireHTTPRequestTriggerParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *RequireHTTPRequestTriggerParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireHTTPRequestTriggerParams) GetTTLSeconds() int32 {
	if x != nil {
		return x.TTLSeconds
	}
	return 0
}

func (x *RequireHTTPRequestTriggerParams) GetExpectedHTTPResponse() []byte {
	if x != nil {
		return x.ExpectedHTTPResponse
	}
	return nil
}

type RequireHTTPRequestTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryUrl  string   `protobuf:"bytes,1,opt,name=PrimaryUrl,proto3" json:"PrimaryUrl,omitempty"`
	PrimaryHost string   `protobuf:"bytes,2,opt,name=PrimaryHost,proto3" json:"PrimaryHost,omitempty"`
	Urls        []string `protobuf:"bytes,3,rep,name=Urls,proto3" json:"Urls,omitempty"`
	Hosts       []string `protobuf:"bytes,4,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
	Token       string   `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *RequireHTTPRequestTriggerResponse) Reset() {
	*x = RequireHTTPRequestTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireHTTPRequestTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireHTTPRequestTriggerResponse) ProtoMessage() {}

func (x *RequireHTTPRequestTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireHTTPRequestTriggerResponse.ProtoReflect.Descriptor instead.
func (*RequireHTTPRequestTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *RequireHTTPRequestTriggerResponse) GetPrimaryUrl() string {
	if x != nil {
		return x.PrimaryUrl
	}
	return ""
}

func (x *RequireHTTPRequestTriggerResponse) GetPrimaryHost() string {
	if x != nil {
		return x.PrimaryHost
	}
	return ""
}

func (x *RequireHTTPRequestTriggerResponse) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *RequireHTTPRequestTriggerResponse) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *RequireHTTPRequestTriggerResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RegisterTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyPEM []byte `protobuf:"bytes,1,opt,name=PublicKeyPEM,proto3" json:"PublicKeyPEM,omitempty"`
	Secret       string `protobuf:"bytes,2,opt,name=Secret,proto3" json:"Secret,omitempty"`
	// 用来描述 Tunnel 携带信息的，比如想要测试的机器名或者测试的内容之类的
	Verbose string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *RegisterTunnelRequest) Reset() {
	*x = RegisterTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTunnelRequest) ProtoMessage() {}

func (x *RegisterTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTunnelRequest.ProtoReflect.Descriptor instead.
func (*RegisterTunnelRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterTunnelRequest) GetPublicKeyPEM() []byte {
	if x != nil {
		return x.PublicKeyPEM
	}
	return nil
}

func (x *RegisterTunnelRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterTunnelRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type RegisterTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *RegisterTunnelResponse) Reset() {
	*x = RegisterTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTunnelResponse) ProtoMessage() {}

func (x *RegisterTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTunnelResponse.ProtoReflect.Descriptor instead.
func (*RegisterTunnelResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterTunnelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAllRegisteredTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 二级密码
	SecondaryPassword string `protobuf:"bytes,5,opt,name=SecondaryPassword,proto3" json:"SecondaryPassword,omitempty"`
}

func (x *GetAllRegisteredTunnelRequest) Reset() {
	*x = GetAllRegisteredTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRegisteredTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRegisteredTunnelRequest) ProtoMessage() {}

func (x *GetAllRegisteredTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRegisteredTunnelRequest.ProtoReflect.Descriptor instead.
func (*GetAllRegisteredTunnelRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllRegisteredTunnelRequest) GetSecondaryPassword() string {
	if x != nil {
		return x.SecondaryPassword
	}
	return ""
}

type RegisterTunnelMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectHost string `protobuf:"bytes,1,opt,name=ConnectHost,proto3" json:"ConnectHost,omitempty"`
	ConnectPort int64  `protobuf:"varint,2,opt,name=ConnectPort,proto3" json:"ConnectPort,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Verbose     string `protobuf:"bytes,4,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *RegisterTunnelMeta) Reset() {
	*x = RegisterTunnelMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTunnelMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTunnelMeta) ProtoMessage() {}

func (x *RegisterTunnelMeta) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTunnelMeta.ProtoReflect.Descriptor instead.
func (*RegisterTunnelMeta) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterTunnelMeta) GetConnectHost() string {
	if x != nil {
		return x.ConnectHost
	}
	return ""
}

func (x *RegisterTunnelMeta) GetConnectPort() int64 {
	if x != nil {
		return x.ConnectPort
	}
	return 0
}

func (x *RegisterTunnelMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterTunnelMeta) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type GetAllRegisteredTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnels []*RegisterTunnelMeta `protobuf:"bytes,1,rep,name=Tunnels,proto3" json:"Tunnels,omitempty"`
}

func (x *GetAllRegisteredTunnelResponse) Reset() {
	*x = GetAllRegisteredTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRegisteredTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRegisteredTunnelResponse) ProtoMessage() {}

func (x *GetAllRegisteredTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRegisteredTunnelResponse.ProtoReflect.Descriptor instead.
func (*GetAllRegisteredTunnelResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllRegisteredTunnelResponse) GetTunnels() []*RegisterTunnelMeta {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

type GetRegisteredTunnelDescriptionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// 二级密码
	SecondaryPassword string `protobuf:"bytes,2,opt,name=SecondaryPassword,proto3" json:"SecondaryPassword,omitempty"`
}

func (x *GetRegisteredTunnelDescriptionByIDRequest) Reset() {
	*x = GetRegisteredTunnelDescriptionByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredTunnelDescriptionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredTunnelDescriptionByIDRequest) ProtoMessage() {}

func (x *GetRegisteredTunnelDescriptionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredTunnelDescriptionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredTunnelDescriptionByIDRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{11}
}

func (x *GetRegisteredTunnelDescriptionByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetRegisteredTunnelDescriptionByIDRequest) GetSecondaryPassword() string {
	if x != nil {
		return x.SecondaryPassword
	}
	return ""
}

type RegisteredTunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegisterTunnelMeta `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	Auth []byte              `protobuf:"bytes,2,opt,name=Auth,proto3" json:"Auth,omitempty"`
}

func (x *RegisteredTunnel) Reset() {
	*x = RegisteredTunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredTunnel) ProtoMessage() {}

func (x *RegisteredTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredTunnel.ProtoReflect.Descriptor instead.
func (*RegisteredTunnel) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{12}
}

func (x *RegisteredTunnel) GetInfo() *RegisterTunnelMeta {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RegisteredTunnel) GetAuth() []byte {
	if x != nil {
		return x.Auth
	}
	return nil
}

type QuerySpecificICMPLengthTriggerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length int32 `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
}

func (x *QuerySpecificICMPLengthTriggerParams) Reset() {
	*x = QuerySpecificICMPLengthTriggerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySpecificICMPLengthTriggerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySpecificICMPLengthTriggerParams) ProtoMessage() {}

func (x *QuerySpecificICMPLengthTriggerParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySpecificICMPLengthTriggerParams.ProtoReflect.Descriptor instead.
func (*QuerySpecificICMPLengthTriggerParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{13}
}

func (x *QuerySpecificICMPLengthTriggerParams) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type ICMPTriggerNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size                               int32    `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	CurrentRemoteAddr                  string   `protobuf:"bytes,2,opt,name=CurrentRemoteAddr,proto3" json:"CurrentRemoteAddr,omitempty"`
	Histories                          []string `protobuf:"bytes,3,rep,name=Histories,proto3" json:"Histories,omitempty"`
	CurrentRemoteCachedConnectionCount int32    `protobuf:"varint,4,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	SizeCachedHistoryConnectionCount   int32    `protobuf:"varint,5,opt,name=SizeCachedHistoryConnectionCount,proto3" json:"SizeCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                   int64    `protobuf:"varint,6,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                          int64    `protobuf:"varint,7,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ICMPTriggerNotification) Reset() {
	*x = ICMPTriggerNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICMPTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICMPTriggerNotification) ProtoMessage() {}

func (x *ICMPTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICMPTriggerNotification.ProtoReflect.Descriptor instead.
func (*ICMPTriggerNotification) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{14}
}

func (x *ICMPTriggerNotification) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ICMPTriggerNotification) GetCurrentRemoteAddr() string {
	if x != nil {
		return x.CurrentRemoteAddr
	}
	return ""
}

func (x *ICMPTriggerNotification) GetHistories() []string {
	if x != nil {
		return x.Histories
	}
	return nil
}

func (x *ICMPTriggerNotification) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetSizeCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.SizeCachedHistoryConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QuerySpecificICMPLengthTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notifications []*ICMPTriggerNotification `protobuf:"bytes,1,rep,name=Notifications,proto3" json:"Notifications,omitempty"`
}

func (x *QuerySpecificICMPLengthTriggerResponse) Reset() {
	*x = QuerySpecificICMPLengthTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySpecificICMPLengthTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySpecificICMPLengthTriggerResponse) ProtoMessage() {}

func (x *QuerySpecificICMPLengthTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySpecificICMPLengthTriggerResponse.ProtoReflect.Descriptor instead.
func (*QuerySpecificICMPLengthTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{15}
}

func (x *QuerySpecificICMPLengthTriggerResponse) GetNotifications() []*ICMPTriggerNotification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type CheckServerReachableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server    string          `protobuf:"bytes,1,opt,name=Server,proto3" json:"Server,omitempty"`
	HttpCheck bool            `protobuf:"varint,2,opt,name=HttpCheck,proto3" json:"HttpCheck,omitempty"`
	HttpFlow  *HTTPSimpleFlow `protobuf:"bytes,3,opt,name=HttpFlow,proto3" json:"HttpFlow,omitempty"`
}

func (x *CheckServerReachableRequest) Reset() {
	*x = CheckServerReachableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckServerReachableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckServerReachableRequest) ProtoMessage() {}

func (x *CheckServerReachableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckServerReachableRequest.ProtoReflect.Descriptor instead.
func (*CheckServerReachableRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{16}
}

func (x *CheckServerReachableRequest) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *CheckServerReachableRequest) GetHttpCheck() bool {
	if x != nil {
		return x.HttpCheck
	}
	return false
}

func (x *CheckServerReachableRequest) GetHttpFlow() *HTTPSimpleFlow {
	if x != nil {
		return x.HttpFlow
	}
	return nil
}

type HTTPSimpleFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHttps      bool   `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	HttpRequest  []byte `protobuf:"bytes,2,opt,name=HttpRequest,proto3" json:"HttpRequest,omitempty"`
	HttpResponse []byte `protobuf:"bytes,3,opt,name=HttpResponse,proto3" json:"HttpResponse,omitempty"`
}

func (x *HTTPSimpleFlow) Reset() {
	*x = HTTPSimpleFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPSimpleFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPSimpleFlow) ProtoMessage() {}

func (x *HTTPSimpleFlow) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPSimpleFlow.ProtoReflect.Descriptor instead.
func (*HTTPSimpleFlow) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{17}
}

func (x *HTTPSimpleFlow) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HTTPSimpleFlow) GetHttpRequest() []byte {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *HTTPSimpleFlow) GetHttpResponse() []byte {
	if x != nil {
		return x.HttpResponse
	}
	return nil
}

type CheckServerReachableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reachable bool            `protobuf:"varint,1,opt,name=Reachable,proto3" json:"Reachable,omitempty"`
	HttpFlow  *HTTPSimpleFlow `protobuf:"bytes,2,opt,name=HttpFlow,proto3" json:"HttpFlow,omitempty"`
	Verbose   string          `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *CheckServerReachableResponse) Reset() {
	*x = CheckServerReachableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckServerReachableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckServerReachableResponse) ProtoMessage() {}

func (x *CheckServerReachableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckServerReachableResponse.ProtoReflect.Descriptor instead.
func (*CheckServerReachableResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{18}
}

func (x *CheckServerReachableResponse) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *CheckServerReachableResponse) GetHttpFlow() *HTTPSimpleFlow {
	if x != nil {
		return x.HttpFlow
	}
	return nil
}

func (x *CheckServerReachableResponse) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type QueryExistedDNSLogParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Mode  string `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *QueryExistedDNSLogParams) Reset() {
	*x = QueryExistedDNSLogParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExistedDNSLogParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedDNSLogParams) ProtoMessage() {}

func (x *QueryExistedDNSLogParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedDNSLogParams.ProtoReflect.Descriptor instead.
func (*QueryExistedDNSLogParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{19}
}

func (x *QueryExistedDNSLogParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryExistedDNSLogParams) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type DNSLogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Token      string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Domain     string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	RemoteAddr string `protobuf:"bytes,4,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP   string `protobuf:"bytes,5,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort int32  `protobuf:"varint,6,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	Raw        []byte `protobuf:"bytes,7,opt,name=Raw,proto3" json:"Raw,omitempty"`
	Timestamp  int64  `protobuf:"varint,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Mode       string `protobuf:"bytes,9,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *DNSLogEvent) Reset() {
	*x = DNSLogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSLogEvent) ProtoMessage() {}

func (x *DNSLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSLogEvent.ProtoReflect.Descriptor instead.
func (*DNSLogEvent) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{20}
}

func (x *DNSLogEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DNSLogEvent) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DNSLogEvent) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *DNSLogEvent) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *DNSLogEvent) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *DNSLogEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DNSLogEvent) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type QueryExistedDNSLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*DNSLogEvent `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *QueryExistedDNSLogResponse) Reset() {
	*x = QueryExistedDNSLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExistedDNSLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedDNSLogResponse) ProtoMessage() {}

func (x *QueryExistedDNSLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedDNSLogResponse.ProtoReflect.Descriptor instead.
func (*QueryExistedDNSLogResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{21}
}

func (x *QueryExistedDNSLogResponse) GetEvents() []*DNSLogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RequireDomainParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode string `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *RequireDomainParams) Reset() {
	*x = RequireDomainParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireDomainParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireDomainParams) ProtoMessage() {}

func (x *RequireDomainParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireDomainParams.ProtoReflect.Descriptor instead.
func (*RequireDomainParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{22}
}

func (x *RequireDomainParams) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type RequireDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Mode   string `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *RequireDomainResponse) Reset() {
	*x = RequireDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireDomainResponse) ProtoMessage() {}

func (x *RequireDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireDomainResponse.ProtoReflect.Descriptor instead.
func (*RequireDomainResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{23}
}

func (x *RequireDomainResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RequireDomainResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireDomainResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type QueryExistedRandomPortTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *QueryExistedRandomPortTriggerRequest) Reset() {
	*x = QueryExistedRandomPortTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExistedRandomPortTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedRandomPortTriggerRequest) ProtoMessage() {}

func (x *QueryExistedRandomPortTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedRandomPortTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryExistedRandomPortTriggerRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{24}
}

func (x *QueryExistedRandomPortTriggerRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RandomPortTriggerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteAddr                            string   `protobuf:"bytes,1,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP                              string   `protobuf:"bytes,2,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort                            int32    `protobuf:"varint,3,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	LocalPort                             int32    `protobuf:"varint,4,opt,name=LocalPort,proto3" json:"LocalPort,omitempty"`
	History                               []string `protobuf:"bytes,5,rep,name=History,proto3" json:"History,omitempty"`
	CurrentRemoteCachedConnectionCount    int32    `protobuf:"varint,6,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	LocalPortCachedHistoryConnectionCount int32    `protobuf:"varint,7,opt,name=LocalPortCachedHistoryConnectionCount,proto3" json:"LocalPortCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                      int64    `protobuf:"varint,8,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                             int64    `protobuf:"varint,9,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RandomPortTriggerEvent) Reset() {
	*x = RandomPortTriggerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPortTriggerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPortTriggerEvent) ProtoMessage() {}

func (x *RandomPortTriggerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPortTriggerEvent.ProtoReflect.Descriptor instead.
func (*RandomPortTriggerEvent) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{25}
}

func (x *RandomPortTriggerEvent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *RandomPortTriggerEvent) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *RandomPortTriggerEvent) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *RandomPortTriggerEvent) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetLocalPortCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.LocalPortCachedHistoryConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *RandomPortTriggerEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QueryExistedRandomPortTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*RandomPortTriggerEvent `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *QueryExistedRandomPortTriggerResponse) Reset() {
	*x = QueryExistedRandomPortTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExistedRandomPortTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExistedRandomPortTriggerResponse) ProtoMessage() {}

func (x *QueryExistedRandomPortTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExistedRandomPortTriggerResponse.ProtoReflect.Descriptor instead.
func (*QueryExistedRandomPortTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{26}
}

func (x *QueryExistedRandomPortTriggerResponse) GetEvents() []*RandomPortTriggerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RequireRandomPortTriggerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TTLSeconds int32  `protobuf:"varint,2,opt,name=TTLSeconds,proto3" json:"TTLSeconds,omitempty"`
}

func (x *RequireRandomPortTriggerParams) Reset() {
	*x = RequireRandomPortTriggerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireRandomPortTriggerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireRandomPortTriggerParams) ProtoMessage() {}

func (x *RequireRandomPortTriggerParams) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireRandomPortTriggerParams.ProtoReflect.Descriptor instead.
func (*RequireRandomPortTriggerParams) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{27}
}

func (x *RequireRandomPortTriggerParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireRandomPortTriggerParams) GetTTLSeconds() int32 {
	if x != nil {
		return x.TTLSeconds
	}
	return 0
}

type RequireRandomPortTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port       int32  `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Token      string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	ExternalIP string `protobuf:"bytes,3,opt,name=ExternalIP,proto3" json:"ExternalIP,omitempty"`
}

func (x *RequireRandomPortTriggerResponse) Reset() {
	*x = RequireRandomPortTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireRandomPortTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireRandomPortTriggerResponse) ProtoMessage() {}

func (x *RequireRandomPortTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireRandomPortTriggerResponse.ProtoReflect.Descriptor instead.
func (*RequireRandomPortTriggerResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{28}
}

func (x *RequireRandomPortTriggerResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RequireRandomPortTriggerResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequireRandomPortTriggerResponse) GetExternalIP() string {
	if x != nil {
		return x.ExternalIP
	}
	return ""
}

type Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Port    int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Network string `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
}

func (x *Mirror) Reset() {
	*x = Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mirror) ProtoMessage() {}

func (x *Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mirror.ProtoReflect.Descriptor instead.
func (*Mirror) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{29}
}

func (x *Mirror) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Mirror) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Mirror) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type TunnelInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mirrors []*Mirror `protobuf:"bytes,1,rep,name=Mirrors,proto3" json:"Mirrors,omitempty"`
	// 发送给哪个端口镜像的？
	ToId string `protobuf:"bytes,2,opt,name=ToId,proto3" json:"ToId,omitempty"`
	// 数据
	Data []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	// 对应的远端地址是啥？用来区分 conn
	ToRemoteAddr string `protobuf:"bytes,4,opt,name=ToRemoteAddr,proto3" json:"ToRemoteAddr,omitempty"`
	// Close
	Close bool `protobuf:"varint,5,opt,name=Close,proto3" json:"Close,omitempty"`
}

func (x *TunnelInput) Reset() {
	*x = TunnelInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInput) ProtoMessage() {}

func (x *TunnelInput) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInput.ProtoReflect.Descriptor instead.
func (*TunnelInput) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{30}
}

func (x *TunnelInput) GetMirrors() []*Mirror {
	if x != nil {
		return x.Mirrors
	}
	return nil
}

func (x *TunnelInput) GetToId() string {
	if x != nil {
		return x.ToId
	}
	return ""
}

func (x *TunnelInput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TunnelInput) GetToRemoteAddr() string {
	if x != nil {
		return x.ToRemoteAddr
	}
	return ""
}

func (x *TunnelInput) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

type TunnelOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     string `protobuf:"bytes,1,opt,name=FromId,proto3" json:"FromId,omitempty"`
	RemoteAddr string `protobuf:"bytes,2,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Close      bool   `protobuf:"varint,4,opt,name=Close,proto3" json:"Close,omitempty"`
}

func (x *TunnelOutput) Reset() {
	*x = TunnelOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelOutput) ProtoMessage() {}

func (x *TunnelOutput) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelOutput.ProtoReflect.Descriptor instead.
func (*TunnelOutput) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{31}
}

func (x *TunnelOutput) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *TunnelOutput) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *TunnelOutput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TunnelOutput) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

type RemoteIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAddress string `protobuf:"bytes,1,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
}

func (x *RemoteIPResponse) Reset() {
	*x = RemoteIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteIPResponse) ProtoMessage() {}

func (x *RemoteIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteIPResponse.ProtoReflect.Descriptor instead.
func (*RemoteIPResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{32}
}

func (x *RemoteIPResponse) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

var File_tunnel_proto protoreflect.FileDescriptor

var file_tunnel_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x74, 0x70, 0x62, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xec, 0x01, 0x0a,
	0x1e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x26, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x3d, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x8b, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x54, 0x4c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54,
	0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01,
	0x0a, 0x21, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6d, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x50, 0x45, 0x4d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x50,
	0x45, 0x4d, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x4d,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x82, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x22, 0x53, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x69, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x53, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x41, 0x75, 0x74, 0x68, 0x22, 0x3e, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x43, 0x4d, 0x50, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xdf, 0x02, 0x0a, 0x17, 0x49, 0x43, 0x4d, 0x50,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x53,
	0x69, 0x7a, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x6c, 0x0a, 0x26, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x43, 0x4d, 0x50, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x70, 0x62,
	0x2e, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2f, 0x0a,
	0x08, 0x48, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x48, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x70,
	0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x48, 0x74, 0x74, 0x70, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0xef, 0x01, 0x0a, 0x0b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x46, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x3c, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9c,
	0x03, 0x0a, 0x16, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a,
	0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a,
	0x25, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5c, 0x0a,
	0x25, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x6c, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x50, 0x22, 0x46, 0x0a, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x07, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x22, 0x70, 0x0a, 0x0c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0xa8, 0x08, 0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x2d, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x12, 0x0a, 0x2e,
	0x74, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x74, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x10, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x11, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x74, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22,
	0x2e, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2e, 0x2e,
	0x74, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x66, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x23, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x25, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x29, 0x2e,
	0x74, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x43, 0x4d, 0x50, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x43, 0x4d, 0x50, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x2b, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x43, 0x4d, 0x50, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x74, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x26, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x74, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xa5, 0x01, 0x0a, 0x06, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x12, 0x45, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x2e,
	0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1a, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x2e, 0x74, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x4c,
	0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1f, 0x2e, 0x74, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x74,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tunnel_proto_rawDescOnce sync.Once
	file_tunnel_proto_rawDescData = file_tunnel_proto_rawDesc
)

func file_tunnel_proto_rawDescGZIP() []byte {
	file_tunnel_proto_rawDescOnce.Do(func() {
		file_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_tunnel_proto_rawDescData)
	})
	return file_tunnel_proto_rawDescData
}

var file_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_tunnel_proto_goTypes = []interface{}{
	(*Empty)(nil),                                     // 0: tpb.Empty
	(*HTTPRequestTriggerNotification)(nil),            // 1: tpb.HTTPRequestTriggerNotification
	(*QueryExistedHTTPRequestTriggerResponse)(nil),    // 2: tpb.QueryExistedHTTPRequestTriggerResponse
	(*QueryExistedHTTPRequestTriggerRequest)(nil),     // 3: tpb.QueryExistedHTTPRequestTriggerRequest
	(*RequireHTTPRequestTriggerParams)(nil),           // 4: tpb.RequireHTTPRequestTriggerParams
	(*RequireHTTPRequestTriggerResponse)(nil),         // 5: tpb.RequireHTTPRequestTriggerResponse
	(*RegisterTunnelRequest)(nil),                     // 6: tpb.RegisterTunnelRequest
	(*RegisterTunnelResponse)(nil),                    // 7: tpb.RegisterTunnelResponse
	(*GetAllRegisteredTunnelRequest)(nil),             // 8: tpb.GetAllRegisteredTunnelRequest
	(*RegisterTunnelMeta)(nil),                        // 9: tpb.RegisterTunnelMeta
	(*GetAllRegisteredTunnelResponse)(nil),            // 10: tpb.GetAllRegisteredTunnelResponse
	(*GetRegisteredTunnelDescriptionByIDRequest)(nil), // 11: tpb.GetRegisteredTunnelDescriptionByIDRequest
	(*RegisteredTunnel)(nil),                          // 12: tpb.RegisteredTunnel
	(*QuerySpecificICMPLengthTriggerParams)(nil),      // 13: tpb.QuerySpecificICMPLengthTriggerParams
	(*ICMPTriggerNotification)(nil),                   // 14: tpb.ICMPTriggerNotification
	(*QuerySpecificICMPLengthTriggerResponse)(nil),    // 15: tpb.QuerySpecificICMPLengthTriggerResponse
	(*CheckServerReachableRequest)(nil),               // 16: tpb.CheckServerReachableRequest
	(*HTTPSimpleFlow)(nil),                            // 17: tpb.HTTPSimpleFlow
	(*CheckServerReachableResponse)(nil),              // 18: tpb.CheckServerReachableResponse
	(*QueryExistedDNSLogParams)(nil),                  // 19: tpb.QueryExistedDNSLogParams
	(*DNSLogEvent)(nil),                               // 20: tpb.DNSLogEvent
	(*QueryExistedDNSLogResponse)(nil),                // 21: tpb.QueryExistedDNSLogResponse
	(*RequireDomainParams)(nil),                       // 22: tpb.RequireDomainParams
	(*RequireDomainResponse)(nil),                     // 23: tpb.RequireDomainResponse
	(*QueryExistedRandomPortTriggerRequest)(nil),      // 24: tpb.QueryExistedRandomPortTriggerRequest
	(*RandomPortTriggerEvent)(nil),                    // 25: tpb.RandomPortTriggerEvent
	(*QueryExistedRandomPortTriggerResponse)(nil),     // 26: tpb.QueryExistedRandomPortTriggerResponse
	(*RequireRandomPortTriggerParams)(nil),            // 27: tpb.RequireRandomPortTriggerParams
	(*RequireRandomPortTriggerResponse)(nil),          // 28: tpb.RequireRandomPortTriggerResponse
	(*Mirror)(nil),                                    // 29: tpb.Mirror
	(*TunnelInput)(nil),                               // 30: tpb.TunnelInput
	(*TunnelOutput)(nil),                              // 31: tpb.TunnelOutput
	(*RemoteIPResponse)(nil),                          // 32: tpb.RemoteIPResponse
}
var file_tunnel_proto_depIdxs = []int32{
	1,  // 0: tpb.QueryExistedHTTPRequestTriggerResponse.Notifications:type_name -> tpb.HTTPRequestTriggerNotification
	9,  // 1: tpb.GetAllRegisteredTunnelResponse.Tunnels:type_name -> tpb.RegisterTunnelMeta
	9,  // 2: tpb.RegisteredTunnel.Info:type_name -> tpb.RegisterTunnelMeta
	14, // 3: tpb.QuerySpecificICMPLengthTriggerResponse.Notifications:type_name -> tpb.ICMPTriggerNotification
	17, // 4: tpb.CheckServerReachableRequest.HttpFlow:type_name -> tpb.HTTPSimpleFlow
	17, // 5: tpb.CheckServerReachableResponse.HttpFlow:type_name -> tpb.HTTPSimpleFlow
	20, // 6: tpb.QueryExistedDNSLogResponse.Events:type_name -> tpb.DNSLogEvent
	25, // 7: tpb.QueryExistedRandomPortTriggerResponse.Events:type_name -> tpb.RandomPortTriggerEvent
	29, // 8: tpb.TunnelInput.Mirrors:type_name -> tpb.Mirror
	0,  // 9: tpb.Tunnel.RemoteIP:input_type -> tpb.Empty
	30, // 10: tpb.Tunnel.CreateTunnel:input_type -> tpb.TunnelInput
	6,  // 11: tpb.Tunnel.RegisterTunnel:input_type -> tpb.RegisterTunnelRequest
	8,  // 12: tpb.Tunnel.GetAllRegisteredTunnel:input_type -> tpb.GetAllRegisteredTunnelRequest
	11, // 13: tpb.Tunnel.GetRegisteredTunnelDescriptionByID:input_type -> tpb.GetRegisteredTunnelDescriptionByIDRequest
	27, // 14: tpb.Tunnel.RequireRandomPortTrigger:input_type -> tpb.RequireRandomPortTriggerParams
	24, // 15: tpb.Tunnel.QueryExistedRandomPortTrigger:input_type -> tpb.QueryExistedRandomPortTriggerRequest
	13, // 16: tpb.Tunnel.QuerySpecificICMPLengthTrigger:input_type -> tpb.QuerySpecificICMPLengthTriggerParams
	4,  // 17: tpb.Tunnel.RequireHTTPRequestTrigger:input_type -> tpb.RequireHTTPRequestTriggerParams
	3,  // 18: tpb.Tunnel.QueryExistedHTTPRequestTrigger:input_type -> tpb.QueryExistedHTTPRequestTriggerRequest
	16, // 19: tpb.Tunnel.CheckServerReachable:input_type -> tpb.CheckServerReachableRequest
	22, // 20: tpb.DNSLog.RequireDomain:input_type -> tpb.RequireDomainParams
	19, // 21: tpb.DNSLog.QueryExistedDNSLog:input_type -> tpb.QueryExistedDNSLogParams
	32, // 22: tpb.Tunnel.RemoteIP:output_type -> tpb.RemoteIPResponse
	31, // 23: tpb.Tunnel.CreateTunnel:output_type -> tpb.TunnelOutput
	7,  // 24: tpb.Tunnel.RegisterTunnel:output_type -> tpb.RegisterTunnelResponse
	10, // 25: tpb.Tunnel.GetAllRegisteredTunnel:output_type -> tpb.GetAllRegisteredTunnelResponse
	12, // 26: tpb.Tunnel.GetRegisteredTunnelDescriptionByID:output_type -> tpb.RegisteredTunnel
	28, // 27: tpb.Tunnel.RequireRandomPortTrigger:output_type -> tpb.RequireRandomPortTriggerResponse
	26, // 28: tpb.Tunnel.QueryExistedRandomPortTrigger:output_type -> tpb.QueryExistedRandomPortTriggerResponse
	15, // 29: tpb.Tunnel.QuerySpecificICMPLengthTrigger:output_type -> tpb.QuerySpecificICMPLengthTriggerResponse
	5,  // 30: tpb.Tunnel.RequireHTTPRequestTrigger:output_type -> tpb.RequireHTTPRequestTriggerResponse
	2,  // 31: tpb.Tunnel.QueryExistedHTTPRequestTrigger:output_type -> tpb.QueryExistedHTTPRequestTriggerResponse
	18, // 32: tpb.Tunnel.CheckServerReachable:output_type -> tpb.CheckServerReachableResponse
	23, // 33: tpb.DNSLog.RequireDomain:output_type -> tpb.RequireDomainResponse
	21, // 34: tpb.DNSLog.QueryExistedDNSLog:output_type -> tpb.QueryExistedDNSLogResponse
	22, // [22:35] is the sub-list for method output_type
	9,  // [9:22] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_tunnel_proto_init() }
func file_tunnel_proto_init() {
	if File_tunnel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestTriggerNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExistedHTTPRequestTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExistedHTTPRequestTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireHTTPRequestTriggerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireHTTPRequestTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRegisteredTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTunnelMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRegisteredTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredTunnelDescriptionByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredTunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySpecificICMPLengthTriggerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICMPTriggerNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySpecificICMPLengthTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckServerReachableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPSimpleFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckServerReachableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExistedDNSLogParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSLogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExistedDNSLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireDomainParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExistedRandomPortTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPortTriggerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExistedRandomPortTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireRandomPortTriggerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireRandomPortTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tunnel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tunnel_proto_goTypes,
		DependencyIndexes: file_tunnel_proto_depIdxs,
		MessageInfos:      file_tunnel_proto_msgTypes,
	}.Build()
	File_tunnel_proto = out.File
	file_tunnel_proto_rawDesc = nil
	file_tunnel_proto_goTypes = nil
	file_tunnel_proto_depIdxs = nil
}
