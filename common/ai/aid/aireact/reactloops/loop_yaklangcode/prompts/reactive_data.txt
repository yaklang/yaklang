{{ if .Code }}## 代码块区域说明

* 如果代码内容不是特别大的话，请直接在下面的代码块中展示
* 代码内容过大，会保存到临时文件中，你可以使用 'read_file' 或者 'grep' 等工具来查看
* 下面的代码块儿为了方便展示，将会展示行列号，你需要正确读取并区分
* 如果你要修改代码，请你使用 'modify_code' 工具来进行，精确修改到具体行
* 如果是库使用问题，需要可以使用 'query_document' 来搜索修正
* 如果出现了语法错误，你可以使用 'query_document' 来搜索相似的代码片段来参考
* 调试时，你可以使用 `desc(instance)` 来查看变量的类型和属性
* 你可以在必要的地方使用 `log.Info("Hello %v", name)` 来打印日志到标准输出以辅助调试

**重要提示：下面显示的代码(`<|CURRENT_CODE_{{ .Nonce }}|>` 内)包含行号是为了方便你定位和理解代码结构。但当你使用 'write_code' 或 'modify_code' 生成新代码时，生成的代码中绝对不能包含这些行号前缀！只生成纯净的 Yaklang 代码！**

<|CURRENT_CODE_{{ .Nonce }}|>
{{ .CurrentCodeWithLineNumber }}
<|CURRENT_CODE_END_{{ .Nonce }}|>
{{ else }}## 当前没有代码块

当前操作并不是对代码的修改，直接生成代码即可。{{ end }}
{{ if .FeedbackMessages }}
## 反馈/警告/待评估

针对上述代码，经过Yaklang编译器静态分析发现如下警告和错误：


<|ERR/LINT_WARNING_{{ .Nonce }}|>
{{ .FeedbackMessages }}
<|ERR/LINT_WARNING_END_{{ .Nonce }}|>

### 问题解决行动指令

**核心原则：从思考转向行动 - Think Once, Act Immediately**

当遇到 API 调用错误、语法错误或不确定的函数用法时，**必须先进行搜索和验证，而不是盲目猜测或重复思考**。

### 优先级处理顺序：

1. **语法错误** - 最高优先级，必须立即修复
2. **API 使用错误** - 通过搜索文档和示例解决
3. **功能缺陷** - 使用调试工具辅助排查

### 行动规则：

核心原则：渐进式修复。
永远不要轻易使用 `write_code` 来重置你的工作。你必须在现有代码的基础上进行修改和调试。

如果你连续使用 `write_code`，说明你的策略已经失败，必须重新分析问题的根源。

**一次思考，立即行动**
- 错误做法：反复思考"需要查询 X 的正确用法"
- 正确做法：思考一次后立即执行搜索命令

**具体搜索策略**
- 语法错误：使用 `query_document` 搜索相关语法和示例
- API 用法：搜索函数名、参数类型、返回值
- 类似功能：搜索相似的代码片段作为参考

**避免思考循环**
- 如果连续 2 次有相同的思考内容，立即停止思考
- 转为执行具体的搜索或验证命令
- 基于搜索结果做决策，而不是基于猜测

**调试工具使用**
- 使用 `desc(instance)` 查看变量类型和属性
- 使用 `log.Info()` 或 `dump()` 打印调试信息
- 通过日志输出验证代码执行流程

### 处理步骤：

1. **立即搜索** - 遇到错误时，直接使用工具查找：
   - 正确的 API 用法示例
   - 相关的文档或代码片段
   - 类似功能的实现方式

2. **验证语法** - 在修改代码前：
   - 查找官方文档中的正确语法
   - 搜索现有代码库中的使用示例
   - 确认函数签名和参数类型

3. **避免重复错误** - 如果某个方法报错：
   - 不要反复尝试相似的错误写法
   - 立即搜索该库/框架的正确用法
   - 查看错误信息中的提示和建议

### 典型优化场景：

```
错误做法：看到 yakit.AppendRow 报错后，继续尝试 yakit.EnableTable 的各种写法
正确做法：立即搜索 "yakit table usage" 或 "yakit.EnableTable" 找到正确语法
* Yaklang中声明一个变量不需要类型，可以直接写 `x = 10` 或者 "var x"，而不是 `var x int`
* 在 yaklang 中生成随机数，可以直接搜索 `randstr` 或 `randn` 的用法
* yaklang 禁止使用 import 或者 require 类似，所有包都是内置的
```

**记住：搜索 5 分钟比盲目试错 50 分钟更高效！**

### 下一步行动：
* 使用 `query_document` 搜索相关文档和示例代码
* 使用 `modify_code` 修改或局部生成代码以修复问题
* 如果不确定如何修复，先搜索相关的代码片段作为参考
{{ end }}