__KEYWORDS__ = "tcp连接,指纹扫描,扫描技术,网络安全,渗透测试,安全扫描,端口扫描,tcp扫描,网络"

__DESC__ = <<<EOF
使用TCP连接进行指纹扫描，这种扫描方式略慢于SYN扫描
EOF

yakit.AutoInitYakit()
target := cli.String("hosts", cli.setHelp("the targets u want to scan, input one or more target, use comma ',' as split, like 'www.example.com,192.168.1.1'"), cli.setRequired(true))
// target = "www.example.com"
ports := cli.String("ports", cli.setHelp("the ports you want to scan"), cli.setRequired(false), cli.setDefault("22,443,445,80,8000-8004,3306,3389,5432,8080-8084,7000-7005"))
concurrent := cli.Int("concurrent", cli.setHelp("the current scan service"), cli.setDefault(100))
webservice := cli.Bool("web", cli.setHelp("enable web servicescan, if you think it's a website"))
notHttpService := cli.Bool("not-http", cli.setHelp("if u are sure it' not a http service, use this flag to improve"))
active := cli.Bool("active", cli.setHelp("打开这个选项后会主动发包探测指纹"))
cli.check()

opts = []
opts.Push(servicescan.concurrent(concurrent))
if webservice {
    opts.Push(servicescan.web())
}
if notHttpService {
    opts.Push(servicescan.service())
}

opts.Push(servicescan.onOpen(i => {
    yakit.Info("%v is open", i.String())
}))

opts.Push(servicescan.probeTimeout(5))
if active {
    opts.Push(servicescan.active(true))
}


start := time.Now()
defer func{
    yakit.Info("cost: %v", time.Now().Sub(start).String())
}
results, err := servicescan.Scan(target, ports, opts...)
if err != nil {
    yakit.Error("failed: %v", err)
    return
}
closed := []
for result in results {
    if !result.IsOpen() {
        closed.Push(str.HostPort(result.Target, result.Port))
        continue
    }
    glance := result.String()
    banner := result.GetBanner()
    yakit.Info("find: %v banner: %v", glance, banner)
}
if closed.Len() > 0 {
    yakit.Info("closed addr: %v", closed)
}