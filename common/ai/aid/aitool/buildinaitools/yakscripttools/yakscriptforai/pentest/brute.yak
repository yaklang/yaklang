__KEYWORDS__ = "brute force,service,socks4 proxy,snmpv3,tomcat,mssql,ftp,rdp,http proxy,postgres"

__DESC__ = <<<EOF
brute service[socks4_proxy,snmpv3_sha-256,tomcat,mssql,snmpv3_md5,snmpv3_sha-384,ftp,rdp,snmpv2,http_proxy,socks4a_proxy,postgres,smb,imap,smtp,vnc,redis,mongodb,telnet,socks5_proxy,ssh,oracle,memcached,pop3,snmpv3_sha,snmpv3_sha-224,snmpv3_sha-512,rtsp,pptp,mysql,ldap]
EOF

yakit.AutoInitYakit()
target = cli.String("target", cli.setRequired(true), cli.setHelp("set target for bruting, support IP:PORT,IPCIDR"))
typeName = cli.String("typeName", cli.setRequired(true), cli.setHelp(`one of [socks4_proxy,snmpv3_sha-256,tomcat,mssql,snmpv3_md5,snmpv3_sha-384,ftp,rdp,snmpv2,http_proxy,socks4a_proxy,postgres,smb,imap,smtp,vnc,redis,mongodb,telnet,socks5_proxy,ssh,oracle,memcached,pop3,snmpv3_sha,snmpv3_sha-224,snmpv3_sha-512,rtsp,pptp,mysql,ldap], the brute service type`))

// target = "127.0.0.1"
// typeName = "ssh"

cli.check()

passlist := brute.GetPasswordListFromBruteType(typeName)
userlist := brute.GetUsernameListFromBruteType(typeName)

opts = []
opts.Push(brute.userList(userlist...))
opts.Push(brute.passList(passlist...))

ins, err = brute.New(
    typeName,
    opts...
)
if err != nil {
    yakit.Error(`create brute instance failed: %v`, err)
    return
}
result, err := ins.Start(target)
if err != nil {
    yakit.Error("create brute failed: %v", err.Error())
    return
}
count:=0
for i in result {
    if !i.Ok {
        log.Info()
        continue
    }
    count++
    yakit.Info("result: %v", i.String())
}
if count <= 0 {
    yakit.Error("brute finished, no result found")
}
