__DESC__ = "一个多功能的解码工具，支持对多种编码格式（如base64, url编码, double url编码, base32, hex, ascii, html实体, unicode等）的文本进行解码，并输出解码结果。"

__KEYWORDS__ = "数据处理,格式转换,base64解码,数据解码,解码工具,base32解码,decode,double url,encoding schemes,data transformation,text processing,hex解码,编码转换,文本解码,url解码,base64,url encoding,base32,format conversion,decoding tools"

tn := cli.String("type", cli.setRequired(true), cli.setHelp("decode method, available options: base64/b64, base64url, base32, hex, doubleurl, quote/ascii, html/htmlentity, htmlhex, url, unicode"))
txt := cli.String("text", cli.setRequired(true), cli.setHelp("the original text you want to decode"))
cli.check()

var result
var err
switch tn {
case "base64", "b64":
    result, err = codec.DecodeBase64(txt)
case "base64url":
    result, err = codec.DecodeBase64Url(txt)
case "base32":
    result, err = codec.DecodeBase32(txt)
case "hex":
    result, err = codec.DecodeHex(txt)
case "quote", "ascii":
    result, err = codec.DecodeASCII(txt)
case "html", "htmlentity", "htmlhex":
    result = codec.DecodeHtml(txt)
    err = nil
case "url":
    result, err = codec.DecodeUrl(txt)
case "unicode":
    result = codec.UnicodeDecode(txt)
    err = nil
default:
    yakit.Error("unknown encode type: %v" % tn)
    return
}
if err != nil {
    yakit.Error("decode %v error: %v, try another decode method..." % [tn, err])
    return
}
yakit.Info("decode result: %#v", string(result))