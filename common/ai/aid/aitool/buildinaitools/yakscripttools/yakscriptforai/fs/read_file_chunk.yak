__DESC__ = "一个用于安全读取大文件的工具，通过指定文件路径、分块大小和偏移量，可以按块读取文件特定位置的数据。尤其适用于处理内存受限或需要流式处理的场景。"

__KEYWORDS__ = "memory management,文件读取,大文件处理,file handling,reading,data processing,buffer,performance,内存安全,偏移读取,chunk size,offset,streaming,文件分块,数据块,文件处理,流式读取,large file"

yakit.AutoInitYakit()

t := cli.String("file", cli.setRequired(true), cli.setHelp("target file you want to read"))
chunkSize := cli.Int("chunk-size", cli.setRequired(true), cli.setHelp("size for chunk read, max: 1000"), cli.setDefault(200))
offset := cli.Int("offset", cli.setRequired(false), cli.setDefault(0))
cli.check()

if !file.IsExisted(t) {
    yakit.Warn("%v is not existed", t)
    return
}

if chunkSize <= 0 {
    yakit.Warn("chunksize should not be less than zero")
    return
}

if chunkSize > 1000 {
    yakit.Warn("chunksize you input is too large, override 1000, for save memory, shrink it.")
    return
}

size = 0
try {
    size = file.Stat(t)~.Size()
} catch e {
    size = 0
}



f, err := file.OpenFile(t, file.O_RDONLY, 0644)
if err != nil {
    yakit.Error("openfile failed: %v", err)
    return
}
defer f.Close()
_, err := f.Seek(offset, 0)
if err != nil {
    yakit.Error("seek offset failed: %v", err)
    return
}
raw, err := io.ReadAll(io.LimitReader(f, chunkSize))
_ = err
n := len(string(raw))
if n <= 0 && err != nil {
    yakit.Error("MET ERR: %v", err)
}
if n > 0 {
    yakit.Info("CHUNK[Total: %v]: %#v", size, string(raw))
}