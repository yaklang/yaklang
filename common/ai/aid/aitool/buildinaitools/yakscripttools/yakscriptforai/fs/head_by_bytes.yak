__DESC__ = "一个用于显示指定文件头部字节内容并将结果转化为字符串的工具。支持设置读取字节数限制，可选显示行号或进行十六进制转储。"

__KEYWORDS__ = "字节读取,文件读取,文件头部,命令行工具,file,bytes,文本操作,行号显示,head,first bytes,show,文件内容,十六进制转储,file content,display"

filename = cli.String("filename", cli.setRequired(true), cli.setHelp("which file you want to check?"))
// filename = `/Users/v1ll4n/Projects/yaklang/README.md`
limit = cli.Int("chars", cli.setDefault(200), cli.setRequired(true), cli.setHelp("how many chars you want to dump"))
showLineNumber = cli.Bool("line-number", cli.setHelp("show line number at every line first"))
hexdumped = cli.Bool("hexdump", cli.setHelp("show result in hex dump, if set hexdump param, only show hexdump"))
cli.check()

if limit <= 0 {
    limit = 200
    yakit.Warn("limit <= 0, auto set to 200")
}

fp, err = file.Open(filename)
if err != nil {
    yakit.Error("OPEN Err: %v", err)
    return
}
defer fp.Close()

raw, _ := io.ReadAll(io.LimitReader(fp, limit))
if hexdumped {
    dump(raw)
    yakit.Info(sdump(raw))
    return
}

if showLineNumber {
    count = 0
    buf = bufio.NewBuffer()
    lines := str.ParseStringToLines(string(raw))
    padding = len(string(len(lines)))
    for i in lines {
        count++
        buf.WriteString(sprintf("%" + string(padding) + "d | ", count))
        buf.WriteString(i)
        buf.WriteByte('\n')~
    }
    yakit.Info(string(buf.String()))
    return
}
yakit.Info("head %v bytes: %#v", limit, string(raw))
return