__DESC__ = "一个用于安全读取大型文件的工具，可以指定起始行偏移量、读取的行数以及每行的最大长度，以分段读取文件内容。"

__KEYWORDS__ = "buffer,文件读取,文件工具,文本处理,large file,streaming,performance,文件处理,数据读取,file handling,reading,data processing,memory management,大文件处理,分段读取,lines size,offset"

yakit.AutoInitYakit()

t := cli.String("file", cli.setRequired(true), cli.setHelp("target file you want to read"))
// t = "/Users/v1ll4n/Projects/yaklang/README.md"
offset := cli.Int("offset", cli.setRequired(false), cli.setDefault(0))
lines := cli.Int("lines", cli.setRequired(false), cli.setHelp("how many lines you want to read?"), cli.setDefault(50))
lineSize := cli.Int("line-size", cli.setRequired(false), cli.setHelp("the max columns in a line, default 512"), cli.setDefault(512))
cli.check()

if !file.IsExisted(t) {
    yakit.Warn("%v is not existed", t)
    return
}

if lines <= 0 {
    yakit.Warn("lines should not be less than zero, default set to 50")
    lines = 50
}
if lineSize <= 0 {
    yakit.Warn("line-size should not be less than zero, default set to 50")
    lineSize = 512
}

f, err := file.OpenFile(t, file.O_RDONLY, 0644)
if err != nil {
    yakit.Error("openfile failed: %v", err)
    return
}
defer f.Close()

count=0
start = offset
end = offset+lines
bytesCount = 0
for {
    count++
    text, err := f.ReadLine()
    if err != nil {
        if len(text) <= 0 {
            count--
        }
        break
    }
    bytesCount += len(text) + 1
    if count <= start { continue }
    if count >= end { break }
    yakit.Info("%3d | %v", count, text)
}
size := file.Stat(t)~.Size()
yakit.Info("total-bytes: %v read-bytes: %v percent: %.2f%%", size, bytesCount, (float64(bytesCount) / float64(size)) * 100)