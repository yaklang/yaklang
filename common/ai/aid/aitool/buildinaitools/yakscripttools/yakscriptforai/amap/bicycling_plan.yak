__DESC__ = "一个用于获取骑行导航路径规划的工具，根据起始点和目的地（可选城市）调用高德地图服务进行路径计算，并输出规划的路径信息，包括总距离、总时长以及详细的骑行步骤。"

__KEYWORDS__ = "骑行导航,路径规划,高德地图,位置服务,出行规划,导航信息"

ori = cli.String("origin",cli.setHelp("Starting point of the route planning"), cli.setRequired(true))
dst = cli.String("destination",cli.setHelp("Ending point of the route planning"), cli.setRequired(true))
city = cli.String("city",cli.setHelp("City where the route is located"))
cli.check()

route = amap.GetBicyclingPlan(ori,dst,amap.city(city))~
formatDistance = (meters) => {
    if meters == ""{
        return ""
    }
    meters = int(meters)
	if meters >= 1000 {
		return "%dkm" % (meters/1000)
	}
	return "%dm" % meters
}
formatDuration = (seconds) => {
    if seconds == ""{
        return ""
    }
    du = time.ParseDuration(seconds+"s")~
    return du.String()
}
yakit.Info("Found paths count: %d", len(route.Paths))

for i, path := range route.Paths {
    yakit.Info("Path %d - Distance: %s, Duration: %s", 
        i+1, formatDistance(path.Distance), formatDuration(path.Duration))
    
    yakit.Info("Path %d - Steps count: %d", i+1, len(path.Steps))
    
    for j, step := range path.Steps {
        yakit.Info("  Step %d - Instruction: %s, Distance: %s, Duration: %s", 
            j+1, step.Instruction, formatDistance(step.Distance), formatDuration(step.Duration))
    }
}