__DESC__ = "发送基础HTTP请求的工具，允许用户指定请求方法（默认为GET）和完整的URL。工具执行请求并打印原始请求和响应数据包。"

__KEYWORDS__ = "http请求,网络工具,web通信,请求工具,响应查看,基础请求,网络调试"

yakit.AutoInitYakit()
url = cli.String("url", cli.setHelp("需要指定的URL"), cli.setRequired(true))
// url = "http://127.0.0.1:8787/xss/js/in-str?name=admin"
method = cli.String("method", cli.setHelp("需要指定的HTTP方法"), cli.setDefault("GET"), cli.setRequired(false))
requestRequest := cli.String("show-request", cli.setHelp("是否需要展示Request，如果不是必须的话，可以忽略，结果将进一步精简，yes/no"), cli.setDefault("no"), cli.setRequired(false))
testParamType = cli.String("param-position", cli.setHelp("你想测试参数的位置是什么？可选为[query/post_form_encoded]，如果不设置，就不会新增参数"))
testParamName = cli.String("param-name", cli.setHelp("在这次HTTP请求过程中，你需要改变的参数名称（注意：这会改变发包请求内容）如果你的参数在URL已经有了，忽略这个选项"), cli.setRequired(false))
testParamValue = cli.String("param-value", cli.setHelp("配合param-name使用，你想把你设置的参数值修改为什么？"))
keyword := cli.String("keyword", cli.setHelp("是否需要重点展示某一些数据？设置了的话，如果有结果，会展示 keyword 附近200字节的内容"))
cli.check()

opts = []

try {
    yakit.Info("当前URL:%v", url)
    req = fuzz.UrlToHTTPRequest(method, url)~
    for i in req.GetGetQueryParams() {
        yakit.Info(i.String())
    }
} catch e {

}

isHttps, packet, err := poc.ParseUrlToHTTPRequestRaw(method /*type: string*/, url)
if err != nil {
    yakit.Error("parse url to packet failed: %v", err)
    return
}
opts.Push(poc.https(isHttps))

switch str.ToLower(string(testParamType)) {
case "query", "get":
    packet = poc.ReplaceHTTPPacketQueryParam(packet /*type: []byte*/, testParamName, testParamValue)
    yakit.Info("apply get query param into request: \n" + string(packet))
case "post", "post_form_encoded":
    packet = poc.ReplaceHTTPPacketPostParam(packet /*type: []byte*/, testParamName, testParamValue)
    yakit.Info("apply post param into request: \n" + string(packet))
}

rsp, req, err := poc.HTTPEx(packet, opts...)
if err != nil {
    yakit.Error("request failed: %v", err)
    return
}

// req 是不重要的，直接保存到文件中
if !(str.ToLower(requestRequest) in ["no", "n", "f", "false"]) {
    yakit.Info("requestRequest: %#v", requestRequest)
    tmpFileReq, err := file.TempFileName()
    if err == nil {
        file.Save(tmpFileReq, len(rsp.RawRequest))
        yakit.Info("req packet saved to %v", tmpFileReq)
    }
}

editor := memeditor.New(string(rsp.RawPacket))
// 对 AI 来说，直接保存到文件中，他就会用一些其他的东西来检查，所以，默认重要数据保存，告诉他保存到哪儿了。
rspFilename, err := file.TempFileName("do-http-raw-response-*.txt")
if err != nil {
    yakit.Error("create temp file failed: %v", err)
    return
}
file.Save(rspFilename, string(rsp.RawPacket))
yakit.Info("rsp packet[size:%v], save to %v, use grep or some text tool to handle it", len(rsp.RawPacket), rspFilename)

if len(rsp.RawPacket) < 1024 {
    yakit.Info("rsp packet[size:%v]: \n%v", len(rsp.RawPacket), string(rsp.RawPacket))
}

if keyword != "" {
    editor.FindStringRange(keyword, rangeIns => {
        println(rangeIns.GetTextContextWithPrompt(3))
    })
}
