__DESC__ = "一个从指定的Git仓库和提交/引用中提取文件系统内容并复制到本地临时目录的工具，支持分页读取，用于获取特定提交状态下的文件系统快照。"

__KEYWORDS__ = "git,文件系统,提交提取,仓库管理,版本控制,代码管理,文件快照,git工具"

yakit.AutoInitYakit()

repos = cli.String("repos", cli.setRequired(true), cli.setHelp("target git repos"))
refname = cli.String("ref", cli.setRequired(false), cli.setDefault("HEAD"), cli.setHelp("the commit hash or rev ref u want to dump filesystem from"))

// repos = `/Users/v1ll4n/Projects/yaklang`
// refname = "HEAD"
limit = cli.Int("limit", cli.setRequired(true), cli.setDefault(20), cli.setHelp("set limit for fetch branch, use offset at same time can read chunk"))
offset = cli.Int("offset", cli.setRequired(true), cli.setDefault(0), cli.setHelp("offset from start index, use it can read chunk"))
cli.check()

hash, err = git.RevParse(repos, refname)
if err != nil {
    yakit.Error(err.Error())
    return
}
fs, err = git.FileSystemFromCommit(repos /*type: string*/, hash)
if err != nil {
    yakit.Error(err.Error())
    return
}
local := filesys.CopyToTemporary(fs)
localDirname, err = local.Getwd()
if err != nil {
    yakit.Error("dump to local temp file err: %v", err)
    return
}
yakit.Info("commit %v in localfs: %v", hash, localDirname)
yakit.Info(filesys.Glance(localDirname))