name: cli
functions:
- name: cli.Args
  type_str: 'func () return([]string) '
  long_description: ""
  description: 获取全部的命令行参数，返回结果等同于 `os.Args`"
  returns:
  - name: r0
    param_alias: args
    type_alias: ""
    description: 全部命令行参数
    type_str: '[]string'
- name: cli.Bool
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return(bool) '
  long_description: ""
  description: 判断命令行参数是否存在 v1 参数对应的选项？如果 v1 是 `option`，则会检测 `--option` 或者 `-option`
    是否存在。要注意，不同于 `cli.String` 等接口，`cli.Bool` 不会判断参数的值，只会检测参数标记是不是存在。
  params:
  - name: v1
    param_alias: paramName
    type_alias: string
    description: 参数名：会在会自动检测输入值的参数名，自动带上 `-` 或者 `--` 前缀来检测
    type_str: string
  - name: v2
    param_alias: extraParams
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 这个参数是否存在在命令行中
    type_str: bool
- name: cli.Double
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return(float64) '
  long_description: ""
  description: 把函数解析成 `float64` 等价于 `cli.Float64`
  params:
  - name: v1
    param_alias: param
    type_alias: ""
    description: 参数名，自动带上 `--` 或者 `-` 来检测
    type_str: string
  - name: v2
    param_alias: extraParams
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 解析成的浮点型值
    type_str: float64
- name: cli.File
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]uint8) '
  long_description: ""
  description: 把输入的参数当成文件名来解析
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: 文件名
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 文件内容
    type_str: '[]uint8'
- name: cli.FileOrContent
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]uint8) '
  long_description: ""
  description: 把 v1 作为文件名来解析，如果解析失败，则把输入的内容直接变成内容返回
  params:
  - name: v1
    param_alias: param
    type_alias: ""
    description: 文件名或文件内容
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: resultRaw
    type_alias: ""
    description: ""
    type_str: '[]uint8'
- name: cli.Float
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return(float64) '
  long_description: ""
  description: 同 `cli.Double`，把参数内容解析成 float64
  params:
  - name: v1
    param_alias: param
    type_alias: ""
    description: 参数名
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 参数内容解析的 float64 值
    type_str: float64
- name: cli.Have
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return(bool) '
  long_description: ""
  description: 同 `cli.Bool`，检测参数是否存在在命令行中
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: bool
- name: cli.Host
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]string) '
  long_description: ""
  description: 把 v1 对应的命令行参数解析成扫描目标，支持 `192.168.1.1/24,8.8.8.8,baidu.com` 等 IP，IP
    段，域名等多种格式
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 解析成的扫描目标的值，会自动把网段拆开
    type_str: '[]string'
- name: cli.Hosts
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]string) '
  long_description: ""
  description: 同 `cli.Host`
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Host`
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Host`
    type_str: '[]string'
- name: cli.Int
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return(int) '
  long_description: ""
  description: 把命令行参数值解析成整数
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: 参数名称
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 解析成的参数值，整数
    type_str: int
- name: cli.Integer
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return(int) '
  long_description: ""
  description: 同 `cli.Int`
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Int`
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Int`
    type_str: int
- name: cli.LineDict
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]string) '
  long_description: ""
  description: 把一个字典按行解析
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: 参数名，字典的文件名
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 解析结果，按行解析成 `[]string`
    type_str: '[]string'
- name: cli.Net
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]string) '
  long_description: ""
  description: 同 `cli.Host`
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Host`
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Host`
    type_str: '[]string'
- name: cli.Network
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]string) '
  long_description: ""
  description: 同 `cli.Host`
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Host`
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Host`
    type_str: '[]string'
- name: cli.Port
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]int) '
  long_description: ""
  description: 把 ports 对应的命令行参数值解析成端口组，或者整数范围
  params:
  - name: v1
    param_alias: ports
    type_alias: ""
    description: ""
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 解析成的端口组
    type_str: '[]int'
- name: cli.Ports
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]int) '
  long_description: ""
  description: 同 `cli.Port`
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Port`
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 同 `cli.Port`
    type_str: '[]int'
- name: cli.SetCliName
  type_str: 'func (v1: string) '
  long_description: ""
  description: ""
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: string
- name: cli.SetDoc
  type_str: 'func (v1: string) '
  long_description: ""
  description: ""
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: string
- name: cli.String
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return(string) '
  long_description: ""
  description: 最基础的命令行获取接口，把参数的值解析成字符串
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: 参数的值 `string`
    type_str: string
- name: cli.StringSlice
  type_str: 'func (v1: string) return([]string) '
  long_description: ""
  description: ""
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: string
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: '[]string'
- name: cli.Url
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]string) '
  long_description: ""
  description: 把参数对应的值解析成 url，如果无法精确对应一个 url，将会自动补充 `https://`, `http://`, `www` 等，如果本身参数就是个
    url，则会保留原样
  params:
  - name: v1
    param_alias: param
    type_alias: ""
    description: 需要解析的参数名，支持针对域名，ip:port, ip, url 各种格式的解析，yak 会尽力全的补充 url
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: '[]string'
- name: cli.Urls
  type_str: 'func (v1: string, v2 ...func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) return([]string) '
  long_description: ""
  description: ""
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: '...cli.setHelp|cli.setDefault'
    description: ""
    type_str: '[]yaklib.setCliExtraParam'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: '[]string'
- name: cli.YakitPlugin
  type_str: 'func () return([]string) '
  long_description: ""
  description: ""
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: '[]string'
- name: cli.check
  type_str: 'func () '
  long_description: ""
  description: 检查当前设置的所有参数，如果有不合理的参数（无法确定值），则停止执行，打印出帮助信息
- name: cli.help
  type_str: 'func (v1 ...io.Writer) '
  long_description: ""
  description: ""
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: '[]io.Writer'
    is_variadic: true
- name: cli.setDefault
  type_str: 'func (v1: interface {}) return(func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) '
  long_description: |
    使用案例如下：

    ```go
    cli.String("url", cli.setDefault("https://example.com"))
    ```

    执行上述代码的时候，如果没有 `--url` 或者 `-url` 参数的话，将会使用默认的 `https://example.com` 作为函数的返回值。

    :::caution
    注意，如果传入的默认值类型和应该返回的类型不匹配，将会报错！错误提示约为类型断言错误，通过 `defaultValue.(type)` 来实现的。
    :::
  description: 为命令行设置默认值，默认值会被强行类型断言为目标类型，不要传错类型就可以！
  params:
  - name: v1
    param_alias: default
    type_alias: any
    description: 命令行默认值
    type_str: interface {}
  returns:
  - name: r0
    param_alias: ""
    type_alias: cli.setDefault
    description: ""
    type_str: 'func setCliExtraParam(v1: *yaklib.cliExtraParams) '
- name: cli.setHelp
  type_str: 'func (v1: string) return(func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) '
  long_description: ""
  description: 使用方法同 `cli.setDefault` 使用，如果某个参数的值为空的话，并且没有默认值，将会展示缺少的参数。
  params:
  - name: v1
    param_alias: helpText
    type_alias: str
    description: 想要默认展示的帮助信息
    type_str: string
  returns:
  - name: r0
    param_alias: ""
    type_alias: cli.setHelp
    description: ""
    type_str: 'func setCliExtraParam(v1: *yaklib.cliExtraParams) '
- name: cli.setRequired
  type_str: 'func (v1: bool) return(func setCliExtraParam(v1: *yaklib.cliExtraParams)
    ) '
  long_description: ""
  description: 设置参数是必须的，如果设置了，参数在没有设置默认值的情况下，并且找不到用户输入，会影响 cli.check 的判断结果
  params:
  - name: v1
    param_alias: required
    type_alias: ""
    description: ""
    type_str: bool
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: 'func setCliExtraParam(v1: *yaklib.cliExtraParams) '
variables: []
