# RDP 的检测方法在 Nmap 中不是特别准确，所以我们参考 MSF 的操作
# https://github.com/rapid7/metasploit-framework/blob/c0006258152b63b64bf00815f8a44af18498f567/lib/msf/core/exploit/rdp.rb
#  def rdp_fingerprint(nsock)
#     peer_info = {}
#     # warning: if rdp_check_protocol starts handling NLA, this will need to be updated
#     is_rdp, server_selected_proto = rdp_check_protocol(RDPConstants::PROTOCOL_SSL | RDPConstants::PROTOCOL_HYBRID | RDPConstants::PROTOCOL_HYBRID_EX)
#     return false, nil unless is_rdp
#     return true, peer_info unless [RDPConstants::PROTOCOL_HYBRID, RDPConstants::PROTOCOL_HYBRID_EX].include? server_selected_proto
#
#     swap_sock_plain_to_ssl(nsock)
#     ntlm_negotiate_blob = ''  # see: https://fadedlab.wordpress.com/2019/06/13/using-nmap-to-extract-windows-info-from-rdp/
#     ntlm_negotiate_blob << "\x30\x37\xa0\x03\x02\x01\x60\xa1\x30\x30\x2e\x30\x2c\xa0\x2a\x04\x28"
#     ntlm_negotiate_blob << "\x4e\x54\x4c\x4d\x53\x53\x50\x00"  #  Identifier - NTLMSSP
#     ntlm_negotiate_blob << "\x01\x00\x00\x00"                  #  Type: NTLMSSP Negotiate - 01
#     ntlm_negotiate_blob << "\xb7\x82\x08\xe2"                  #  Flags (NEGOTIATE_SIGN_ALWAYS | NEGOTIATE_NTLM | NEGOTIATE_SIGN | REQUEST_TARGET | NEGOTIATE_UNICODE)
#     ntlm_negotiate_blob << "\x00\x00"                          #  DomainNameLen
#     ntlm_negotiate_blob << "\x00\x00"                          #  DomainNameMaxLen
#     ntlm_negotiate_blob << "\x00\x00\x00\x00"                  #  DomainNameBufferOffset
#     ntlm_negotiate_blob << "\x00\x00"                          #  WorkstationLen
#     ntlm_negotiate_blob << "\x00\x00"                          #  WorkstationMaxLen
#     ntlm_negotiate_blob << "\x00\x00\x00\x00"                  #  WorkstationBufferOffset
#     ntlm_negotiate_blob << "\x0a"                              #  ProductMajorVersion = 10
#     ntlm_negotiate_blob << "\x00"                              #  ProductMinorVersion = 0
#     ntlm_negotiate_blob << "\x63\x45"                          #  ProductBuild = 0x4563 = 17763
#     ntlm_negotiate_blob << "\x00\x00\x00"                      #  Reserved
#     ntlm_negotiate_blob << "\x0f"                              #  NTLMRevision = 5 = NTLMSSP_REVISION_W2K3
#     resp = rdp_send_recv(ntlm_negotiate_blob)
#
#     ntlmssp_start = resp.index('NTLMSSP')
#     if ntlmssp_start
#       ntlmssp = NTLM_MESSAGE::parse(resp[ntlmssp_start..-1])
#       version = ntlmssp.padding.bytes
#       peer_info[:product_version] = "#{version[0]}.#{version[1]}.#{version[2] | (version[3] << 8)}"
#     end
#
#     return is_rdp, peer_info
#   end
#
# Probe TCP NtmlRDP q|\x30\x37\xa0\x03\x02\x01\x60\xa1\x30\x30\x2e\x30\x2c\xa0\x2a\x04\x28\x4e\x54\x4c\x4d\x53\x53\x50\x00\x01\x00\x00\x00\xb7\x82\x08\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x63\x45\x00\x00\x00\x0f|