
params = str.JsonToMap(DATA)

port = parseInt(str.ParamsGetOr(params, "port", "8088"))

assertf(!os.IsTCPPortOpen(port), "port %v is unavailable", port)

log("被动扫描端口为：%v", port)

log("正在启动 Webhook 服务器")
hook = NewWebHook(os.GetRandomAvailableTCPPort(), fn(data) {
    mapRaw, err = str.JsonRawByteToMap(data)
    if err != nil {
        return
    }

    type = mapRaw.type
    if f("%v", type) == "web_vuln" {
        log("发现一个漏洞【%v】", type)
        err = db.SaveVulnFromXrayRawMap(mapRaw, TASK_ID, RUNTIME_ID)
        if err != nil {
            log("漏洞存储失败：%v, DATA: \n%v\n", err, sdump(mapRaw))
        }
    }
})
addr = hook.Addr()
hook.Start()

log("默认 webhook 启动： %v, 1 秒后启动扫描进程", addr)
sleep(1)

args = [
    "--config", xray.FetchDefaultXrayConfig(),
    "webscan", "--listen", f("0.0.0.0:%v", port),
    "--webhook-output", addr,
]
log("启动 XRAY 进程: %v", str.Join(args, " "))
subprocess, err = GetXraySubProcess(
    CTX,
    args...,
)
assertNil(err)
output, err = subprocess.CombinedOutput()
if err != nil {
    log(string(output))
    log("XRAY 进程结束: %v", err)
} else {
    if len(output) <= 40960 {
        log("RAW OUTPUT[Short]: %v", string(output))
    }
    log("XRAY 进程结束")
}

_ = subprocess.Wait()