// author: v1ll4n
// 本脚本用来控制 Palm SIEM 进行综合扫描
// json schema 可以用来验证输入，详情请见 xray-scan-hosts.schema.json
//    https://jsonschema.net/home

/*
    初始化用户输入的任务参数
*/
params = str.JsonToMap(DATA)
host = str.ParamsGetOr(params, "host", "")
port = str.ParamsGetOr(params, "port", "21-23,80-90,389,443,445,636,1080-1090,1158,1433,1521,1527,1630,1883,2181,2888,3306,3389,3888,5432,5671-5672,6379,7474,8000-8010,8080-8090,9000-9010,9090-9100,11211,27017,50000,61613,61616,15672,15671,9200,9300,110,25")
concurrent = parseInt(str.ParamsGetOr(params, "concurrent", "10"))
xray_concurrent = parseInt(str.ParamsGetOr(params, "xray_concurrent", "5"))

assert(host != "", "host empty")
assert(port != "", "port empty")

log("scan host: %v", host)
log("    with port: %v", port)
log("    with concurrent: %v", concurrent)


log("正在启动 Webhook 服务器")
hook = NewWebHook(os.GetRandomAvailableTCPPort(), fn(data) {
    mapRaw, err = str.JsonRawByteToMap(data)
    if err != nil {
        return
    }

    type = mapRaw.type

    if f("%v", type) == "web_vuln" {
        dump(f("recv [%s]", type))
        err = db.SaveVulnFromXrayRawMap(mapRaw, TASK_ID, RUNTIME_ID)
        if err != nil {
            log("存储 XRAY Web 漏洞失败：%v: ORIGIN: \n%v", err, sdump(mapRaw))
        }
    }else if type == "web_statistic"{
        // log("XRAY UNHANDLED Webhook Message: \n%v",sdump(mapRaw))
    } else {
        log("XRAY Unhanled Webhook message: %v", sdump(mapRaw))
    }
})
addr = hook.Addr()
hook.Start()
log("默认 webhook 启动： %v, 1 秒后启动扫描进程", addr)

/*
    开始控制扫描过程
*/
log("正在构建指纹扫描引擎")
portsChan, err = scan.ScanFpWithConcurrent(
    CTX,
    scan.GetDefaultScanFingerprintConfig(),
    concurrent,
    host, port,
)
assertf(portsChan != undefined, "generate scan chan failed: %s", err)

log("开始处理指纹扫描结果，扫描结果自动存入资产库")

swg = sync.NewSizedWaitGroup(xray_concurrent)
for port = range portsChan {
    err = db.CreateOrUpdatePortsFromMatchResult(port)
    if err != nil {
        log("save port: %s failed: %s", port, err)
    }

    if parseStr(port.State) != "open" {
        continue
    }

    if port.Fingerprint == nil {
        continue
    }

    startWebScan = fn(rawUrl) {
        swg.Add()
        go fn(target){
            defer swg.Done()

            args = [
                "--config", xray.FetchDefaultXrayConfig(),
                "webscan", "--basic-crawler", target,
                "--webhook-output", addr,
            ]
            log("启动 XRAY 进程: %v", str.Join(args, " "))
            subprocess, err = GetXraySubProcess(
                CTX,
                args...,
            )
            assertNil(err)
            output, err = subprocess.CombinedOutput()
            if err != nil {
                log(string(output))
            }
            log("XRAY 进程结束: %v", err)
        }(rawUrl)
    }

    if str.Contains(port.Fingerprint.ServiceName, "https") {
        startWebScan(f("https://%v", str.HostPort(port.Target, port.Port)))
    }elif str.Contains(port.Fingerprint.ServiceName, "http"){
        startWebScan(f("http://%v", str.HostPort(port.Target, port.Port)))
    }else{
        swg.Add()
        go fn(target){
            defer swg.Done()

            args = [
                "--config", xray.FetchDefaultXrayConfig(),
                "servicescan", "--target", target,
                "--webhook-output", addr,
            ]
            subprocess = CreateMaterialFileSubProcess(CTX, file,
                args...
            )
            output, err = subprocess.CombinedOutput()
            if err != nil {
                log("启动 XRAY 进程: xray %v 失败", str.Join(args, " "))
                log(string(output))
                log("XRAY 进程结束: %v", err)
            }
        }(f("%v", str.HostPort(port.Target, port.Port)))
    }
}

swg.Wait()

