//
//
params = str.JsonToMap(DATA)
domains = str.ParamsGetOr(params, "domain", "")
ports = str.ParamsGetOr(params, "ports", "21-23,80-90,389,443,445,636,1080-1090,1158,1433,1521,1527,1630,1883,2181,2888,3306,3389,3888,5432,5671-5672,6379,7474,8000-8010,8080-8090,9000-9010,9090-9100,11211,27017,50000,61613,61616,15672,15671,9200,9300,110,25")
scanCClassNet = parseBool(str.ParamsGetOr(params, "scan_c_class_net", "false"))
assert(domains != "")
assert(ports != "")

filter = str.NewFilter()

swg = sync.NewSizedWaitGroup(2)
domainList = str.SplitAndTrim(domains, ",")
for _, domain = range domainList {
    log("开始针对域名[%v]进行扫描", domain)
    for domainRecord = range db.FuzzQueryDomainsByDomain(CTX, domain) {
        log("子域名：%v IP: [%v]", domainRecord.Domain, domainRecord.IPAddrs)
        for _, ip = range domainRecord.IPAddrs {
            target = ip

            if scanCClassNet {
                target, err = str.IPv4ToCClassNetwork(ip)
                if err != nil {
                    log("Convert IP to CClassNetwork failed: %s", err)
                    continue
                }
            }

            if filter.Exist(target) {
                continue
            }

            filter.Insert(target)

            log("开始扫描 IP[%v]", ip)
            swg.Add()
            go fn(ipAddr){
                defer swg.Done()
                c, err = scan.ScanManyFp(CTX, ipAddr, ports)
                if err != nil {
                    log("Scan Fingerprint [%s] failed: %v", ipAddr, err)
                    return
                }

                for matchResult = range c {
                    err = db.CreateOrUpdatePortsFromMatchResult(matchResult)
                    if err != nil {
                        log("save match result failed: %s", err)
                    }
                }
            }(target)
        }
    }
}
swg.Wait()