// 通过域名发现 HTTP 资产
//
params = str.JsonToMap(DATA)
domains = str.ParamsGetOr(params, "domain", "")
networks = str.ParamsGetOr(params, "network", "")

assert(domains != "" || networks != "", "empty domain and networks")

if domains != "" {
    log("针对域名关键字：%v 执行资产爬虫任务", domains)
}

if networks != "" {
    log("针对网络现有端口：%v 执行资产爬虫任务", domains)
}

swg = sync.NewSizedWaitGroup(2)

for _, domain = range str.SplitAndTrim(domains, ",") {
    log("针对域名：%v 进行 HTTP 资产发现", domain)
    for domainRecord = range db.FuzzQueryDomainsByDomain(CTX, domain) {
        log("子域名：%v IP: %v", domainRecord.Domain, domainRecord.IPAddrs)
        swg.Add()
        targetDomain = domainRecord.Domain
        go fn() {
            defer swg.Done()

            log("开始进行 HTTP 资产检查：%v", targetDomain)
            outC, err = crawler.StartWebCrawler(CTX, targetDomain)
            if err != nil {
                log("启动 web 爬虫失败： %v", targetDomain)
                return
            }

            for result = range outC {
                if result.Type == crawler.ResultType_HTTPRequest {
                    db.CreateOrUpdateHTTPRequestFromRecord(result.Data)
                }

                if result.Type == crawler.ResultType_HTTPResponse {
                    db.CreateOrUpdateHTTPResponseFromRecord(result.Data)
                }
            }
        }()
    }
}

for _, network = range str.SplitAndTrim(networks, ",") {
    log("针对已有资产网络：%v 进行 HTTP 资产发现", network)
    for port = range db.QueryPortsByNetwork(CTX, network) {
        if f("%v", port.State) != "open" {
            continue
        }

        target = str.HostPort(port.Host, port.Port)
        swg.Add()
        go fn() {
            defer swg.Done()

            log("开始进行 HTTP 资产检查：%v", target)
            outC, err = crawler.StartWebCrawler(CTX, target)
            if err != nil {
                log("启动 web 爬虫失败： %v", target)
                return
            }

            for result = range outC {
                if result.Type == crawler.ResultType_HTTPRequest {
                    db.CreateOrUpdateHTTPRequestFromRecord(result.Data)
                }

                if result.Type == crawler.ResultType_HTTPResponse {
                    db.CreateOrUpdateHTTPResponseFromRecord(result.Data)
                }
            }
        }()
    }
}

swg.Wait()