// 生成域名资产报告

params = str.JsonToMap(DATA)

baseDomain = str.ParamsGetOr(params, "domain", "")
domains = str.SplitAndTrim(baseDomain, ",")
assert(len(domains) > 0, "empty domains")

log("RECV domains: %v", domains)

reportName = f("域名资产报告: %v", baseDomain)
report = graph.NewTimelineReport(reportName)
report.AddMarkdownBlock(f(`
## Summary

本报告将涉及 Palm SIEM 平台内关于 '%v' 的域名资产信息

1. 以网络 C 段分类, 发现 C 段的 IP 对应域名的分布情况
1. 从 IP 角度观察, 挑选多个域名解析到同一个 IP 的情况
1. 从 IP 角度观察, 挑选一个域名解析多个 IP 的情况
1. 绘制域名解析到 IP 对应的经纬度地理地图(热力图)
1. 域名对应 IP 对应开放端口数量的热力图
1. 整体域名对应所有服务的指纹分部(饼图)

`, baseDomain))


stats = db.NewDomainStats()
for _, domain = range domains {
    for d = range db.FuzzQueryDomainsByDomain(CTX, domain) {
        stats.Feed(d)
    }
}

if stats.GetTotal() <= 0 {
    report.AddMarkdownBlock(`### Sorry No Domains Assets Found`)
} else {

    // C段网络分布
    baseInfo = f("C段网络分布：%v", baseDomain)
    g, err = stats.GetCClassNetworkPieGraph()
    if err == nil {
        model, err = graph.CreateGraphModel(
            f("%v - PieGraph", baseInfo), "描述了域名解析到的 IP 的C段网络分布状况", g, TASK_ID,
        )
        assertNil(err)
        CreateOrUpdateGraph(model)

        g, err = stats.GetCClassNetworkBarGraph()
        if err == nil {
            model, err = graph.CreateGraphModel(
                f("%v - BarGraph", baseInfo), "描述了域名解析到的 IP 的C段网络分布状况(bar)", g, TASK_ID,
            )
            assertNil(err)
            CreateOrUpdateGraph(model)
        }

        report.AddMarkdownBlock(`### 了域名解析到的 IP C段网络分分布图`)
        report.AddActiveGraphByName(baseInfo)
    }

    baseInfo = f("多域名解析到特定 IP 统计： %v", baseDomain)
    g, err = stats.GetMultiDomainsToOneIPBarGraph()
    if err == nil {
        model, err = graph.CreateGraphModel(
            f("%v - BarGraph", baseInfo), "图内容中，每一个 IP 都会被解析到多个域名中", g, TASK_ID,
        )
        assertNil(err)
        CreateOrUpdateGraph(model)

        report.AddMarkdownBlock(`### 多域名解析到的同一个 IP 如下统计`)
        report.AddActiveGraphByName(baseInfo)
    }

    baseInfo = f("多 IP 解析到特定同一域名统计： %v", baseDomain)
    g, err = stats.GetMultiIPToOneDomainBarGraph()
    if err == nil {
        model, err = graph.CreateGraphModel(
            f("%v - BarGraph", baseInfo), "图内容中，每一个域名都会被解析到多个 IP 中", g, TASK_ID,
        )
        assertNil(err)
        CreateOrUpdateGraph(model)

        report.AddMarkdownBlock(`### 多 IP 解析到特定同一域名统计`)
        report.AddActiveGraphByName(baseInfo)
    }

    baseInfo = f("域名 IP 分布的热力图： %v", baseDomain)
    g, err = stats.GetDomainsToIPGeoHeatmap()
    if err == nil {
        model, err = graph.CreateGraphModel(
            f("%v - Heatmap", baseInfo), "图内容中，展示了域名 IP 分布的地理分布", g, TASK_ID,
        )
        assertNil(err)
        CreateOrUpdateGraph(model)

        report.AddMarkdownBlock(`### 域名 IP 地理分布`)
        report.AddActiveGraphByName(baseInfo)
    }

    baseInfo = f("域名 IP 对应资产数量分布的热力图： %v", baseDomain)
    g, err = stats.GetIPOpenPortsGeoHeatmap()
    if err == nil {
        model, err = graph.CreateGraphModel(
            f("%v - Heatmap", baseInfo), "图内容中，域名 IP 对应资产数量分布的热力图", g, TASK_ID,
        )
        assertNil(err)
        CreateOrUpdateGraph(model)

        report.AddMarkdownBlock(`### 域名 IP 对应资产数量分布的热力图`)
        report.AddActiveGraphByName(baseInfo)
    }

    baseInfo = f("域名 IP 对应资产指纹分布图： %v", baseDomain)
    g, err = stats.GetPortsServiceTypesPieGraph()
    if err == nil {
        model, err = graph.CreateGraphModel(
            f("%v - PieGraph", baseInfo), "图内容中，域名 IP 对应资产指纹分布图", g, TASK_ID,
        )
        assertNil(err)
        CreateOrUpdateGraph(model)

        report.AddMarkdownBlock(`### 域名 IP 对应资产指纹分布图`)
        report.AddActiveGraphByName(baseInfo)
    }
}


item = graph.NewTimelinePointItemNow(f("关于【%s】的域名分析资产报告", baseDomain), report.ToTimelineItemData())
err = CreateOrUpdateTimelineItem(item)
assertNil(err)